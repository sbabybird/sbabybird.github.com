<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning &amp; Writing！</title><link>https://sbabybird.github.io/</link><description>Recent content on Learning &amp; Writing！</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 19 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sbabybird.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>机器文摘 第 153 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/</link><pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-07-48.png" alt="Featured image of post 机器文摘 第 153 期" />&lt;h1 id="机器文摘-第-153-期">机器文摘 第 153 期
&lt;/h1>&lt;h3 id="电饭锅传数据">电饭锅传数据
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-06-50.png"
width="497"
height="864"
loading="lazy"
class="gallery-image"
data-flex-grow="57"
data-flex-basis="138px"
>
最近流传一个待证实的传说，使用电饭锅可以助力两台手机设备之间数据传输的速度（主要用于新机迁移时）。&lt;/p>
&lt;p>推测是电饭锅内胆的金属产生了“法拉第笼”效应，屏蔽了外界信号干扰，提升了手机信号强度？&lt;/p>
&lt;p>我没有做测试的条件，目前还在怀疑中。&lt;/p>
&lt;p>但第一个想到这个点子的人，当时是什么精神状态？&lt;/p>
&lt;p>具体讨论来自这个推：https://x.com/skaas777/status/1977201633256726833&lt;/p>
&lt;h3 id="信息安全专家张云海的墓碑">信息安全专家张云海的墓碑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-07-23.png"
width="690"
height="1166"
loading="lazy"
class="gallery-image"
data-flex-grow="59"
data-flex-basis="142px"
>
张云海（1979-2025）是绿盟科技天机实验室的负责人，该实验室专注于漏洞挖掘、分析与利用技术研究。&lt;/p>
&lt;p>其研究领域包括操作系统、应用软件、基础组件以及安全防御与对抗技术等，并致力于挖掘和分析漏洞，曾获得微软缓解绕过赏金计划奖励。&lt;/p>
&lt;p>近期有网友发出了其墓碑照片，碑文为一段汇编代码。&lt;/p>
&lt;p>这段代码结合了汇编语言和幽默元素，以一种风趣的方式描述了一个人在家庭、社会和技术领域的多重角色。&lt;/p>
&lt;p>同时通过模拟汇编语言的执行流程，表达了对生活的总结：从出生（程序启动）到承担角色（函数调用），再到最终离开（程序退出）。&lt;/p>
&lt;h3 id="基于终端的-word-文件预览工具">基于终端的 word 文件预览工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-07-48.png"
width="690"
height="590"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="280px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/bgreenwell/doxx" target="_blank" rel="noopener"
>doxx&lt;/a>，用于 Word 文件的快速终端原生文档查看器。查看、搜索和导出 .docx 文档，而无需离开命令行。&lt;/p>
&lt;p>支持图片、文本颜色、表格、公式等富文本信息显示。 ​​​&lt;/p>
&lt;h3 id="用于-llm-私有部署的负载均衡平台">用于 LLM 私有部署的负载均衡平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-07-58.png"
width="690"
height="310"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="534px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/intentee/paddler" target="_blank" rel="noopener"
>Paddler&lt;/a> 是一个开源的 LLM 负载均衡器和服务平台。它允许您在自己的基础架构上运行推理、部署和扩展 LLM，从而提供卓越的开发者体验。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>通过内置的 llama.cpp 引擎进行推理&lt;/li>
&lt;li>LLM 特定的负载平衡&lt;/li>
&lt;li>通过可动态添加的代理工作，允许与自动缩放工具集成&lt;/li>
&lt;li>请求缓冲，支持从零主机扩展&lt;/li>
&lt;li>动态模型交换&lt;/li>
&lt;li>内置 Web 管理面板，用于管理、监控和测试&lt;/li>
&lt;/ul>
&lt;h3 id="基于-rust-的-llm-学习项目">基于 Rust 的 LLM 学习项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-08-37.png"
width="693"
height="467"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/karpathy/nanochat" target="_blank" rel="noopener"
>nanochat&lt;/a>，不到 8000 行代码，完整实现了从训练到推理的 LLM 全流程。&lt;/p>
&lt;p>项目主要特点：&lt;/p>
&lt;ul>
&lt;li>用 Rust 实现了高效的 tokenizer 训练&lt;/li>
&lt;li>在 FineWeb 语料上预训练 Transformer LLM，并多维度评估核心指标&lt;/li>
&lt;li>中期训练结合用户-助手对话、选择题、工具调用等多样任务&lt;/li>
&lt;li>监督微调（SFT）后，模型在多项世界知识（ARC-E/C、MMLU）、数学（GSM8K）、代码（HumanEval）测试中表现优异&lt;/li>
&lt;li>可选用“GRPO”算法进行强化学习（RL），提升数学题解答能力&lt;/li>
&lt;li>轻量化推理引擎支持 KV 缓存、简单预填充/解码，集成 Python 沙箱工具，同时提供 CLI 和类 ChatGPT 网页 UI&lt;/li>
&lt;li>生成统一的 Markdown 报告，方便总结、打分和游戏化体验&lt;/li>
&lt;/ul>
&lt;h3 id="shell-脚本的-lisp-解释器">Shell 脚本的 Lisp 解释器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-09-51.png"
width="536"
height="640"
loading="lazy"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="201px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/gue-ni/redstart" target="_blank" rel="noopener"
>Redstart&lt;/a>，是一个用 C++ 编写的轻量级 Lisp 解释器，专注于 Shell 脚本编写。它能够将 Lisp 的强大表达能力与 Unix Shell 的实用性相结合：您可以运行命令、捕获输出、在进程之间进行管道传输，同时仍然使用 Lisp 语法进行逻辑和结构编写。您可以将其视为用 Lisp 而不是 Bash 编写 Shell 脚本。&lt;/p>
&lt;p>有了这个，可以使用 Lisp 语言编写 Linux 的 Shell 脚本了。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 152 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/</link><pubDate>Sun, 12 Oct 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/2025-10-12-08-23-29.png" alt="Featured image of post 机器文摘 第 152 期" />&lt;h1 id="机器文摘-第-152-期">机器文摘 第 152 期
&lt;/h1>&lt;h3 id="构建逆向工程专用浏览器">构建逆向工程专用浏览器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/2025-10-12-08-22-46.png"
width="690"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://nullpt.rs/reverse-engineering-browser" target="_blank" rel="noopener"
>reverse-engineering-browser&lt;/a>，作者详细记录了从简单浏览器扩展到分叉Chromium内核的完整历程，实现了隐身hook机制和高级逆向工程功能。&lt;/p>
&lt;blockquote>
&lt;p>在AI蓬勃发展的时代，我的心仍然专注于AST转换、浏览器指纹识别和反机器人技术。但我的工作流程总是感觉很原始，需要手动筛选页面脚本、粘贴可疑片段到编辑器中，手工编写去混淆器。虽然有Webcrack和deobfuscate.io等工具，但端到端流程仍然缓慢且手动化。&lt;/p>
&lt;/blockquote>
&lt;p>核心要点:&lt;/p>
&lt;ul>
&lt;li>从浏览器扩展到Chromium分叉的演进过程&lt;/li>
&lt;li>解决内容脚本隔离、OOPIF、toString检测等技术挑战&lt;/li>
&lt;li>实现隐身hook机制绕过反检测措施&lt;/li>
&lt;li>集成去混淆、函数覆盖、指纹识别等高级功能&lt;/li>
&lt;/ul>
&lt;p>技术细节:&lt;/p>
&lt;ul>
&lt;li>Chrome DevTools Protocol (CDP) 的高级应用&lt;/li>
&lt;li>自定义Chromium内核和CDP域开发&lt;/li>
&lt;li>OOPIF (Origin-Isolated iframes) 绕过技术&lt;/li>
&lt;li>多层toString方法修补技术&lt;/li>
&lt;/ul>
&lt;p>实际应用:&lt;/p>
&lt;ul>
&lt;li>TikTok网站的数据收集分析&lt;/li>
&lt;li>Cloudflare Turnstile绕过&lt;/li>
&lt;li>FingerprintJS指纹捕获&lt;/li>
&lt;li>Canvas/WebGL指纹识别&lt;/li>
&lt;/ul>
&lt;h3 id="上手-qwen3-vl-的教程">上手 Qwen3-VL 的教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/2025-10-12-08-23-11.png"
width="982"
height="605"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/QwenLM/Qwen3-VL/tree/main/cookbooks" target="_blank" rel="noopener"
>Qwen3-VL cookbooks&lt;/a>，阿里官方的一套练习使用 Qwen3-VL 的教程。&lt;/p>
&lt;p>教程示例功能包括：
图文思维，看图推理，比如解题&lt;/p>
&lt;p>还有计算机操作智能体、多模态编程、全场景识别、文档解析、精准目标定位、通用OCR及关键信息提取、3D定位、长文档理解、空间推理、移动端智能体、视频理解等。&lt;/p>
&lt;h3 id="在网页里完美复刻红警2的故事">在网页里完美复刻红警2的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/2025-10-12-08-23-29.png"
width="690"
height="517"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/1959574914458711924" target="_blank" rel="noopener"
>没有源代码，他用5年时间把红警2给重写了&lt;/a>，一个国外小哥在没有源码的情况下，使用 ts 重写了 红警2 。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.ra2web.com/" target="_blank" rel="noopener"
>进入这个网址可以直接玩&lt;/a>，我试了一下，体验非常牛逼。&lt;/p>
&lt;h3 id="在线收听放松背景音">在线收听放松背景音
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/2025-10-12-08-23-55.png"
width="690"
height="565"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="293px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pease.day/" target="_blank" rel="noopener"
>pease&lt;/a> 是一个极简的环境音混音器（Ambient Sound Mixer），可以自由混合雨声、海浪、风声、咖啡厅、篝火、钢琴等 12 种自然声音，帮助你在工作、学习、冥想或睡眠时进入平静和专注的状态。&lt;/p>
&lt;p>特色亮点：
• 🎛️ 自由混音：支持多音源叠加与音量独立调节
• 💾 PWA 支持：安装后可离线使用
• 🎨 毛玻璃界面：深浅色主题自适应
• ⏱️ 定时功能：可设置播放时长
• 🔗 分享配置：可生成分享链接，传递你的专属混音&lt;/p>
&lt;h3 id="微软出品的研发智能体">微软出品的研发智能体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/2025-10-12-08-24-21.png"
width="823"
height="360"
loading="lazy"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="548px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/RD-Agent" target="_blank" rel="noopener"
>RD-Agent&lt;/a>，一个让 AI 能够自己做科研的系统——能提出问题、设计实验、验证结果、总结规律，整套科研流程都能自动化执行。&lt;/p>
&lt;blockquote>
&lt;p>研发 (R&amp;amp;D) 对于提升工业生产力至关重要，尤其是在人工智能时代，研发的核心主要集中在数据和模型上。我们致力于通过 R&amp;amp;D-Agent 实现这些高价值通用研发流程的自动化，让 AI 驱动数据驱动的 AI。&lt;/p>
&lt;/blockquote>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 151 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/</link><pubDate>Sun, 05 Oct 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/2025-10-05-10-44-53.png" alt="Featured image of post 机器文摘 第 151 期" />&lt;h1 id="机器文摘-第-151-期">机器文摘 第 151 期
&lt;/h1>&lt;h3 id="在地址栏玩贪食蛇">在地址栏玩贪食蛇
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/2025-10-05-10-43-26.png"
width="525"
height="199"
loading="lazy"
class="gallery-image"
data-flex-grow="263"
data-flex-basis="633px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://demian.ferrei.ro/[paused]" target="_blank" rel="noopener"
>snake&lt;/a> 这个网址点进去可以让你在浏览器的 URL 地址栏里玩贪食蛇游戏。&lt;/p>
&lt;p>通过定时器用 JS 实时更新地址栏的字符实现的效果：） ​​​&lt;/p>
&lt;h3 id="在线gpu性能测试">在线GPU性能测试
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/2025-10-05-10-43-45.png"
width="690"
height="493"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>
&lt;a class="link" href="https://www.volumeshader.dev/" target="_blank" rel="noopener"
>Volume Shader BM 在线GPU性能测试工具&lt;/a>&lt;/p>
&lt;p>这个网站是一个在线GPU性能测试工具，通过3D体积渲染来检测显卡性能。&lt;/p>
&lt;p>Volume Shader BM 网站主要用于测试和评估你电脑显卡（GPU）的3D渲染性能。它的核心功能包括：&lt;/p>
&lt;ul>
&lt;li>WebGL 体积渲染：直接在浏览器里运行3D体积着色器（volume shader）渲染，无需下载安装任何软件。&lt;/li>
&lt;li>实时性能数据：测试过程中会显示实时的帧率（FPS）、帧时间和显卡利用率等性能指标。&lt;/li>
&lt;li>跨平台支持：支持 Windows、macOS 和 Linux，只要浏览器支持 WebGL 就能用。&lt;/li>
&lt;li>结果导出与分享：测试完成后可以导出和分享你的显卡测试结果。&lt;/li>
&lt;/ul>
&lt;p>使用方法很简单：&lt;/p>
&lt;ol>
&lt;li>点击“Start GPU Test”按钮开始测试。&lt;/li>
&lt;li>浏览器会实时渲染3D体积效果，同时检测你的显卡性能。&lt;/li>
&lt;li>测试结束后可以查看详细的性能数据。&lt;/li>
&lt;/ol>
&lt;p>这个工具适合想要了解自己电脑显卡3D渲染能力、对比不同设备性能，或者开发者需要测试WebGL渲染效果的人群。&lt;/p>
&lt;h3 id="网页版视频字幕编辑工具">网页版视频字幕编辑工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/2025-10-05-10-43-59.png"
width="690"
height="467"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/x007xyz/flycut-caption" target="_blank" rel="noopener"
>FlyCutCaption&lt;/a> 纯前端实现的视频字幕编辑工具，支持字幕裁剪视频，视频字幕合成&lt;/p>
&lt;p>🎯 核心功能：&lt;/p>
&lt;ul>
&lt;li>🎤 智能语音识别：基于 Whisper 模型的高精度语音转文字，支持多种语言&lt;/li>
&lt;li>✂️ 可视化字幕编辑：直观的字幕片段选择和删除界面&lt;/li>
&lt;li>🎬 实时视频预览：与字幕同步的视频播放器，支持区间播放&lt;/li>
&lt;li>📤 多格式导出：支持 SRT、JSON 字幕格式以及视频文件导出&lt;/li>
&lt;li>🎨 字幕样式定制：自定义字幕字体、颜色、位置等样式&lt;/li>
&lt;li>🌐 国际化支持：组件化国际化设计，支持中文、英文、自定义语言包（如日语示例）&lt;/li>
&lt;li>🔧 技术特色&lt;/li>
&lt;li>⚡ 现代化技术栈：React 19 + TypeScript + Vite + Tailwind CSS&lt;/li>
&lt;li>🧠 本地 AI 处理：使用 Hugging Face Transformers.js 在浏览器本地运行 AI 模型&lt;/li>
&lt;li>🎯 Web Workers：ASR 处理在后台线程运行，不阻塞主界面&lt;/li>
&lt;li>📱 响应式设计：适配不同屏幕尺寸的现代化界面&lt;/li>
&lt;li>🎪 组件化架构：模块化设计，易于维护和扩展&lt;/li>
&lt;/ul>
&lt;h3 id="在我的世界构建一个-gpt">在“我的世界”构建一个 GPT
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/2025-10-05-10-44-53.png"
width="1000"
height="566"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>
油管视频博主&lt;a class="link" href="https://www.youtube.com/watch?v=VaeI9YgE1o8" target="_blank" rel="noopener"
>sammyuri&lt;/a>在游戏“我的世界”里通过红石系统构建了一个“chatGPT”。&lt;/p>
&lt;blockquote>
&lt;p>该模型拥有 5,087,280 个参数，使用 Python 在 TinyChat 基本英语对话数据集上进行训练。其嵌入维度为 240，词汇量为 1920 个 token，由 6 层组成。上下文窗口大小为 64 个 token，足以应对（非常）短的对话。大多数权重被量化为 8 位，但嵌入和 LayerNorm 权重分别以 18 位和 24 位存储。量化后的权重链接如下；它们被拆分成数百个文件，与构建过程中 ROM 的各个部分相对应。&lt;/p>
&lt;p>该建筑的体积为 1020x260x1656 方块。由于其巨大的体积，使用了 Distant Horizo​​ns 模组来拍摄整个建筑的画面；这导致远处的红石组件看起来很奇怪，因为它们的渲染细节较低。&lt;/p>
&lt;p>当使用 MCHPRS（Minecraft 高性能红石服务器）将滴答率提高到约 40,000 倍速度时，它可以在约 2 小时内产生响应。&lt;/p>
&lt;/blockquote>
&lt;h3 id="obs-跟随鼠标放大插件">OBS 跟随鼠标放大插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/2025-10-05-10-45-44.png"
width="1045"
height="746"
loading="lazy"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="336px"
>
&lt;a class="link" href="https://github.com/BlankSourceCode/obs-zoom-to-mouse" target="_blank" rel="noopener"
>OBS-Zoom-To-Mouse&lt;/a>，可让 OBS 自动跟随鼠标进行智能缩放。&lt;/p>
&lt;p>不仅能自动调整显示捕获源的缩放和位置，还支持一键缩放到鼠标位置，甚至能跟随鼠标的移动，同时有效避免画面抖动。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>一键缩放到当前鼠标位置，可自定义缩放倍数和动画速度；&lt;/li>
&lt;li>智能鼠标跟随模式，可设置跟随边界和锁定灵敏度；&lt;/li>
&lt;li>支持自动跟随和手动切换两种跟随方式；&lt;/li>
&lt;li>支持双机设置，可跟踪远程机器的鼠标位置；&lt;/li>
&lt;li>提供详细的手动位置设置，支持非显示捕获源。&lt;/li>
&lt;/ul>
&lt;p>兼容 Windows、Linux、macOS 三大平台，下载脚本文件导入到 OBS 即可使用。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 150 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/</link><pubDate>Sat, 27 Sep 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-35-53.png" alt="Featured image of post 机器文摘 第 150 期" />&lt;h1 id="机器文摘-第-150-期">机器文摘 第 150 期
&lt;/h1>&lt;h3 id="又一个私有云盘">又一个私有云盘
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-33-56.png"
width="952"
height="707"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://demo.foxel.cc/" target="_blank" rel="noopener"
>foxel&lt;/a>，为个人和团队提供高度可扩展的私有云存储解决方案，具有人工智能语义搜索功能。&lt;/p>
&lt;p>可以直接预览文件，支持图片、视频、PDF 等各种格式。&lt;/p>
&lt;p>完善的权限和分享功能，支持公开火私密分享链接给他人。&lt;/p>
&lt;p>通过 Docker 一键部署，简单配置一下即可使用，项目有提供了详细的安装教程。&lt;/p>
&lt;h3 id="基于-chrome-内核构建的高度隐私浏览器">基于 chrome 内核构建的高度隐私浏览器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-34-23.png"
width="805"
height="538"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://helium.computer/" target="_blank" rel="noopener"
>Helium&lt;/a>，氦气浏览器。高度注重隐私的浏览器。&lt;/p>
&lt;p>集成高效的广告拦截能力，追求极速、拒绝臃肿。&lt;/p>
&lt;p>目前仍在测试中。需要的可以下载试用。&lt;/p>
&lt;p>项目在 GitHub 开源：https://github.com/imputnet/helium&lt;/p>
&lt;h3 id="用于网页调试的-mcp">用于网页调试的 MCP
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-35-07.png"
width="537"
height="244"
loading="lazy"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="528px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ChromeDevTools/chrome-devtools-mcp" target="_blank" rel="noopener"
>chrome-devtools-mcp&lt;/a>，Chrome DevTools 推出了 MCP 并且代码已开源，可以直接让 AI 完成网页自动化测试、调试以及优化整套开发流程。&lt;/p>
&lt;p>能够自动进行网页导航、性能分析、截图调试等复杂操作，简化开发流程。&lt;/p>
&lt;p>可以模拟真人操作，比如页面点击、填写表单、元素拖拽等各种交互，可应用于自动化测试以及爬虫等场景。&lt;/p>
&lt;h3 id="极简-json-解析库">极简 JSON 解析库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-35-33.png"
width="657"
height="528"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/rxi/sj.h" target="_blank" rel="noopener"
>sj.h&lt;/a>，只有 150 行代码的 json 解析库，符合 c99 规范，极致轻量。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>仅约150行纯 C11 代码，极致轻量，零动态内存分配，状态占用极小&lt;/li>
&lt;li>精确错误定位，支持行列号提示，助力快速调试定位问题&lt;/li>
&lt;li>不含数字和字符串解析逻辑，strtod和unicode代理对由用户自定义，灵活度极高&lt;/li>
&lt;li>结构简单，便于集成，示例代码展示如何将 JSON 映射到自定义结构体，易于理解和扩展&lt;/li>
&lt;li>代码完全开源，Unlicense 许可，公共领域软件，无任何使用限制&lt;/li>
&lt;li>适合对性能和内存要求极高的场景，不依赖外部库，适合嵌入式、游戏引擎、系统工具等领域&lt;/li>
&lt;li>设计理念反直觉：舍弃繁重的全功能解析，专注核心解析需求，提升整体效率和可控性&lt;/li>
&lt;/ul>
&lt;h3 id="面向终端的创意编码环境">面向终端的创意编码环境
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-35-53.png"
width="721"
height="401"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>
&lt;a class="link" href="https://github.com/emprcl/runal" target="_blank" rel="noopener"
>runal&lt;/a>，面向终端的文本创意编程环境，赋予命令行艺术以全新生命。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>类似 processing 和 p5js，但所有渲染均以纯文本形式呈现，开启 ASCII 艺术与文本图形的无限可能&lt;/li>
&lt;li>支持 JavaScript 编写，内置 setup 和 draw 函数，实时监测脚本变动，无需重启即可动态更新画面&lt;/li>
&lt;li>提供键盘与鼠标事件响应接口（onKey、onMouseMove、onMouseClick 等），实现交互式文本创作&lt;/li>
&lt;li>同时支持 Go 包调用，方便集成到 Go 项目，满足多语言环境下的灵活开发需求&lt;/li>
&lt;li>轻量跨平台：Linux/macOS/Windows（推荐 Windows Terminal+Iosevka 字体），单文件运行或自定义编译均可&lt;/li>
&lt;/ul>
&lt;h2 id="想法">想法
&lt;/h2>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-40-47.png"
width="690"
height="920"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>
经常需要提醒自己的是，世界还有很多精彩的未知。&lt;/p>
&lt;p>这并不代表着自己无知，而是未知里存在的那些精彩值得时常提醒。&lt;/p>
&lt;p>还有很多大门等待打开。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 149 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/</link><pubDate>Sun, 21 Sep 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-39-46.png" alt="Featured image of post 机器文摘 第 149 期" />&lt;h1 id="机器文摘-第-149-期">机器文摘 第 149 期
&lt;/h1>&lt;h3 id="怎样正确地浪费-cpu-资源">怎样“正确地”浪费 CPU 资源
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-39-03.png"
width="615"
height="373"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;p>还记得那个给甲方预先进行负优化的程序员段子，为了将来满足甲方的优化需求，提前让程序跑的特别慢，随着项目的推进再逐渐注释掉代码，程序性能“大幅提升”，深得甲方认可。&lt;/p>
&lt;p>然而，现在的编译器都有了比较完善的编译期优化技术，如果只是傻傻的写一些让 CPU 浪费时间的循环，很可能这段代码根本就不会被编译进去，直接被“优化”掉了。&lt;/p>
&lt;p>&lt;a class="link" href="https://mostlynerdless.de/blog/2025/09/19/how-to-waste-cpu-like-a-professional/" target="_blank" rel="noopener"
>《如何像专家一样“浪费”CPU资源》&lt;/a>，这篇文章通过一个“如何浪费CPU”的有趣问题，讲解了程序、编译器和操作系统之间的一些工作原理，比如系统调用、编译器优化等。&lt;/p>
&lt;p>想让CPU跑满的话，简单的写一个死循环很容易被现在的编译器给优化掉。为了解决代码被优化的问题，文章介绍了三种技巧：&lt;/p>
&lt;ol>
&lt;li>使用特定的编译器指令。&lt;/li>
&lt;li>访问一个volatile（易变）变量，告诉编译器这个值随时可能改变，不要优化。&lt;/li>
&lt;li>使用内联汇编代码。&lt;/li>
&lt;/ol>
&lt;p>以及，最优雅的方法：即使用“单调时钟”（monotonic clock）。这种方法既能精确计时，又能最大限度地减少系统调用，是实现CPU占用的最高效和最准确的方式。&lt;/p>
&lt;h3 id="rss-标准的故事">RSS 标准的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-39-22.png"
width="704"
height="333"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="507px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://buttondown.com/blog/rss-vs-ice" target="_blank" rel="noopener"
>RSS 标准是怎样干微软的&lt;/a>，这篇文章讲述了 RSS（简易信息聚合）如何在与微软等大厂支持的ICE（信息与内容交换）标准竞争中胜出的故事。&lt;/p>
&lt;p>文章通过对比Betamax与VHS（有人说是色情厂商的支持导致 VHS 胜出，但这还不是关键）的竞争，类比ICE与RSS的竞争，指出尽管ICE技术更先进、资金更雄厚，但RSS因其简单、开放、易用而最终胜出。&lt;/p>
&lt;p>开放的技术标准或格式总是更有力量和优势。&lt;/p>
&lt;h3 id="技术越无聊越好使">技术越无聊越好使
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-39-46.png"
width="657"
height="379"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="416px"
>
&lt;a class="link" href="https://jenson.org/boring/" target="_blank" rel="noopener"
>更无聊的技术更好用&lt;/a>。&lt;/p>
&lt;p>真正有价值的技术，往往看起来不那么炫酷，反而很“无聊”。&lt;/p>
&lt;p>就像电从大型发电机变成我们家里墙上的插座一样，AI也会慢慢从喧嚣走向日常，成为我们生活中安静又可靠的一部分。&lt;/p>
&lt;p>这篇文字让我重新思考：也许未来不是让机器像人，而是让机器更好地帮我们从琐事中解脱。&lt;/p>
&lt;h3 id="网站建在电子烟屁股上">网站建在电子烟屁股上
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-40-11.png"
width="582"
height="333"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://bogdanthegeek.github.io/blog/projects/vapeserver/" target="_blank" rel="noopener"
>在一次性电子烟上托管网站&lt;/a>，上次有哥们儿把博客网站建在了一个手机上，我轻蔑一笑。&lt;/p>
&lt;p>这次的得点个赞了，有哥们把网站建在了“电子烟”的烟屁股上了。 ​​​&lt;/p>
&lt;p>他直接把电子烟里的控制芯片（ESP32）当成一台“迷你服务器”： 用 Arduino 写了个最简 HTTP 服务器程序，烧录进芯片； 把需要展示的网页内容转成 C 数组，随固件一起刷进去；&lt;/p>
&lt;h3 id="可完全离线运行的-ai-语音转录工具">可完全离线运行的 AI 语音转录工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-40-45.png"
width="792"
height="449"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/kaixxx/noScribe" target="_blank" rel="noopener"
>noScribe&lt;/a>，专为于学术研究和新闻采访设计的语音转文字工具。&lt;/p>
&lt;p>能够自动识别不同说话人、支持 60 多种语言转录，还内置了专业的编辑器来校对结果。&lt;/p>
&lt;p>支持几乎所有音频和视频格式的自动转录，可进行音频同步播放校对。&lt;/p>
&lt;p>可以本地离线运行，提供即开即用安装包（支持 Windows、macOS 和 Linux 全平台）。&lt;/p>
&lt;h3 id="来自-huggingface-的大模型教学项目">来自 HuggingFace 的大模型教学项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-41-06.png"
width="806"
height="442"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/huggingface/picotron" target="_blank" rel="noopener"
>picotron&lt;/a>，HuggingFace 的从 0 预训练大模型的框架，官方还给了视频教程，核心部分的源代码文件，每个都不到300行。&lt;/p>
&lt;h3 id="一个开源监控工具">一个开源监控工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-41-39.png"
width="703"
height="411"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/luis22d/ZeroTrace-Stealer-13-2026" target="_blank" rel="noopener"
>ZeroTrace&lt;/a>，可从客户端窃取大量数据或信息，并发送到服务器。&lt;/p>
&lt;p>支持对 Chrome 浏览器进行提取密码、Cookies、浏览历史、书签等信息。&lt;/p>
&lt;p>并且具备实时客户端监控、数据收集、分析工具、安全特性等多项功能。&lt;/p>
&lt;p>同时提供一个直观的界面显示，包括仪表板、文件资源管理器、密码管理器等多个视图。&lt;/p>
&lt;p>此外，还支持自定义端口配置和客户端构建器，以适应不同的网络环境和需求。&lt;/p>
&lt;h3 id="渲染中文字到字符界面">渲染中文字到字符界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-42-00.png"
width="805"
height="278"
loading="lazy"
class="gallery-image"
data-flex-grow="289"
data-flex-basis="694px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Antonoko/oh-my-logo-CJK" target="_blank" rel="noopener"
>oh-my-logo-CJK&lt;/a>，&lt;a class="link" href="https://github.com/shinshin86/oh-my-logo" target="_blank" rel="noopener"
>oh-my-logo&lt;/a> 项目的中文版，能将输入的中、日、韩文本渲染为 CLI 中的像素风 ASCII 图，支持多种渐变色板。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>CJK 友好：基于像素字体采样（非预制 ASCII），支持中、日、韩等多语种&lt;/li>
&lt;li>从 oh-my-logo 偷了多种渐变色板与方向，支持 24-bit ANSI 颜色&lt;/li>
&lt;li>多种像素输出模式与样式（half/full、block/shade 等）&lt;/li>
&lt;li>开箱即用，跨平台（Windows 通过 colorama 兼容 ANSI）&lt;/li>
&lt;/ul>
&lt;h3 id="直接在终端里运行任何-gui-应用">直接在终端里运行任何 GUI 应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-42-29.png"
width="823"
height="462"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>
&lt;a class="link" href="https://github.com/mmulet/term.everything" target="_blank" rel="noopener"
>Term.Everything&lt;/a>，可以让我们直接在终端里运行任何 GUI 应用。&lt;/p>
&lt;p>包括浏览器、游戏、视频等，并兼容 kitty、iTerm2 等终端，实现全分辨率渲染。&lt;/p>
&lt;p>同时支持通过 SSH 远程运行 GUI 应用，无需 X11 转发，提供了流畅使用体验。&lt;/p>
&lt;p>我推测其实现原理是直接将像素映射为终端里的字符，不知性能如何。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 148 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/</link><pubDate>Sun, 14 Sep 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-28-48.png" alt="Featured image of post 机器文摘 第 148 期" />&lt;h1 id="机器文摘-第-148-期">机器文摘 第 148 期
&lt;/h1>&lt;h3 id="创新科技creative-technology的发展简史">创新科技（Creative Technology）的发展简史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-28-27.png"
width="676"
height="899"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.abortretry.fail/p/the-story-of-creative-technology" target="_blank" rel="noopener"
>创新科技（Creative Technology）：一场关于“声音”的逆袭与教训&lt;/a>&lt;/p>
&lt;p>如果你曾经用PC玩过游戏、听过音乐，那么你大概率听过**Sound Blaster（声霸卡）&lt;strong>这个名字。&lt;br>
它曾是PC音频的代名词，是90年代多媒体革命的起点，也是新加坡科技史上最闪耀的一张名片。&lt;br>
但这家名叫&lt;/strong>Creative Technology（创新科技）**的公司，并非一路高歌猛进。它曾站在巅峰，也曾错失风口；它定义了一个时代，也被时代抛在身后。&lt;/p>
&lt;p>981年，新加坡工程师**沈望傅（Sim Wong Hoo）**在公交车上听到一段刺耳的音乐播放，忍不住吐槽：“这音质太烂了。”&lt;br>
这句抱怨，成了Creative Technology的起点。&lt;br>
他和两位合伙人成立公司，目标很简单：&lt;strong>让PC发出真正的“声音”&lt;/strong>。&lt;/p>
&lt;p>在那个PC还只能发出“哔哔”警报的年代，Creative推出的第一款声卡——&lt;strong>Sound Blaster&lt;/strong>，不仅支持8-bit音频采样，还能播放MIDI音乐，甚至能接游戏手柄。&lt;br>
这款产品迅速成为PC游戏玩家和音乐爱好者的“神器”，也奠定了Creative在音频领域的霸主地位。&lt;/p>
&lt;p>90年代是Creative的黄金时代。&lt;br>
随着Windows系统的普及和多媒体PC的兴起，Creative不断迭代Sound Blaster产品线，推出了&lt;strong>Sound Blaster 16、AWE32、AWE64 Gold&lt;/strong>等经典型号。&lt;br>
这些产品不仅音质出色，还引入了波表合成、硬件音效处理等先进技术，成为PC音频的行业标准。&lt;/p>
&lt;p>当时的市场几乎被Creative垄断，甚至英特尔和微软也不得不与其合作。&lt;br>
沈望傅一度豪言：&lt;strong>“只要PC要发声，就得用我们的技术。”&lt;/strong>&lt;br>
这句话并不夸张。Creative不仅定义了PC音频，还推动了整个多媒体生态的发展。&lt;/p>
&lt;p>进入2000年代，MP3开始流行，数字音乐浪潮来袭。&lt;br>
Creative迅速推出&lt;strong>Nomad系列MP3播放器&lt;/strong>，技术上并不落后，甚至在某些方面领先于苹果的iPod。&lt;br>
但问题在于：&lt;strong>产品体验太差了&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>软件难用，传歌慢&lt;/li>
&lt;li>设计厚重，缺乏美感&lt;/li>
&lt;li>品牌调性模糊，无法打动消费者&lt;/li>
&lt;/ul>
&lt;p>而苹果则凭借&lt;strong>iPod + iTunes&lt;/strong>的组合拳，打造出无缝的音乐体验，彻底改变了市场格局。&lt;br>
Creative错失了MP3时代，也错失了成为“音乐硬件王者”的机会。&lt;/p>
&lt;p>MP3败北后，Creative并未放弃消费电子市场。&lt;br>
他们推出了&lt;strong>Zen系列&lt;/strong>播放器，试图与iPod再战一场，但市场已今非昔比。&lt;br>
更致命的是，随着智能手机的崛起，&lt;strong>“独立播放器”这个市场本身正在消失&lt;/strong>。&lt;/p>
&lt;p>Creative试图转型，推出过Android平板、蓝牙音箱、游戏耳机等产品，但始终未能再造爆款。&lt;br>
在智能手机全面整合音频功能的浪潮下，&lt;strong>“声卡”这个品类也逐渐边缘化&lt;/strong>。&lt;br>
Creative从“标准制定者”变成了“边缘参与者”。&lt;/p>
&lt;p>如今的Creative已不再是消费市场的主角，但它并未消失。&lt;br>
他们转向&lt;strong>高端音频设备、专业录音、游戏耳机、VR音频技术&lt;/strong>等细分市场，继续为音频发烧友和专业用户提供服务。&lt;br>
其**Super X-Fi（声晰飞）**技术，甚至获得了CES多项大奖，被誉为“耳机中的全息音响”。&lt;/p>
&lt;p>虽然再也回不到90年代的巅峰，但Creative依然活着，&lt;strong>用自己的方式坚持对“声音”的探索&lt;/strong>。&lt;/p>
&lt;h3 id="改造与升级一台九十年代-pc">改造与“升级”一台九十年代 PC
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-28-48.png"
width="690"
height="391"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://fabiensanglard.net/2168/" target="_blank" rel="noopener"
>我替14岁的自己，圆了30年前的电脑梦&lt;/a>，买回小时候梦想电脑并升级修复。&lt;/p>
&lt;p>1993年的夏天，14岁的Fabien Sanglard被邻居书桌上的那台 IBM PS/1 2168 馋得走不动路。&lt;/p>
&lt;p>米色迷你塔式机箱、滑动式软驱挡板、顶部提手，像台可以拎着走的艺术品。&lt;/p>
&lt;p>486DX2-66 的 logo 在开机自检时一闪而过，DOOM 能跑满 25 fps，而他家的 Cyrix 486SLC 只能把分辨率缩成邮票大小才能勉强运行。&lt;/p>
&lt;p>三十年后，他在 eBay 刷到一台芬兰卖家挂出的整机，原盒、 manuals、深灰底座一样不少，连三十年前的购机收据都留着。&lt;/p>
&lt;p>快递横跨欧洲，泡沫碎成雪，机器却争气地第一次加电就点亮。&lt;/p>
&lt;p>于是一场没有deadline的“童年补完计划”正式启动：软驱磁头用棉签蘸酒精一点点擦，CRT色差信号接索尼PVM做无损采集，Sound Blaster 16 和 Roland SCP-55 同时出声，让 E1M1 的吉他 riff 在 ISA 总线上重新咆哮。&lt;/p>
&lt;p>他把 L2 Cache 从 128 kB升到 512 kB，帧率稳稳提升四分之一。&lt;/p>
&lt;h3 id="macbook-屏幕转轴角度传感器">Macbook 屏幕转轴角度传感器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-30-56.png"
width="348"
height="440"
loading="lazy"
class="gallery-image"
data-flex-grow="79"
data-flex-basis="189px"
>
国外有一位开发者发现了 MacBook 上一个未公开的屏幕角度传感器 API，并利用该 API 制作成一个有趣小工具：&lt;a class="link" href="https://github.com/samhenrigold/LidAngleSensor" target="_blank" rel="noopener"
>Lid Angle Sensor&lt;/a>。&lt;/p>
&lt;p>通过该工具能实时显示 MacBook 笔记本屏幕被盖上的角度数值，并发出逼真的木门开关声音，相当有趣。&lt;/p>
&lt;p>网友们也纷纷发挥创意让笔记本在开合屏幕的时候发出各种声音（比如乐曲solo等）。&lt;/p>
&lt;h3 id="中文-dos-游戏合集">中文 DOS 游戏合集
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-32-12.png"
width="855"
height="693"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="296px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/rwv/chinese-dos-games" target="_blank" rel="noopener"
>chinese-dos-games&lt;/a>，直接在浏览器里重温儿童经典。&lt;/p>
&lt;p>基于 em-dosbox 模拟器实现完美兼容，并提供完整游戏列表和搜索功能。&lt;/p>
&lt;p>同时提供 Python 脚本可以一键批量下载游戏文件到本地，支持 IPFS 分布式存储，确保资源永久可访问。&lt;/p>
&lt;p>目前共有 1898 款游戏。访问这个地址可以直接在线玩耍：https://dos.lol/&lt;/p>
&lt;h3 id="浏览器指纹信息查看">浏览器指纹信息查看
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-33-05.png"
width="775"
height="621"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="299px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://fingerprint.goldenowl.ai/" target="_blank" rel="noopener"
>Browser Fingerprint Detector&lt;/a>，这个网站可以直观展示你的浏览器当前暴露给服务端的隐私信息。&lt;/p>
&lt;p>可以点开看看，当你访问一个网站后，对方已经知道了你的多少信息了。&lt;/p>
&lt;h3 id="在线练习-vim-使用技巧">在线练习 vim 使用技巧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-33-25.png"
width="690"
height="490"
loading="lazy"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="337px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/renzorlive/vimmaster" target="_blank" rel="noopener"
>vim大师&lt;/a>，一个基于浏览器运行的小游戏，可以帮助你快速上手掌握vim编辑器的快捷操作命令。从入门到大师。 ​​​&lt;/p>
&lt;p>我 fork 后基于 GitHub Pages 做了个静态页面，可以访问这里使用：https://sbabybird.github.io/vimmaster/&lt;/p>
&lt;h3 id="基于浏览器的媒体处理工具">基于浏览器的媒体处理工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-34-41.png"
width="817"
height="618"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Vanilagy/mediabunny" target="_blank" rel="noopener"
>mediabunny&lt;/a>，纯 TypeScript 实现的浏览器端媒体处理利器，专注高性能视频音频文件的读写与转换。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持 MP4、MOV、WebM、MKV、WAVE、MP3、Ogg、ADTS 等多格式，内置25+编解码器，借助 WebCodecs API 实现硬件加速&lt;/li>
&lt;li>精确到微秒级的读写操作，支持转封装、转码、缩放、旋转、重采样、裁剪等复杂转换功能&lt;/li>
&lt;li>流式 I/O，内存占用极低，可处理任意大小文件，且体积极小，tree-shakable 最终包仅 5KB gzipped&lt;/li>
&lt;li>零依赖，跨平台兼容浏览器和 Node.js，基于 ECMAScript2021+，完全用 TypeScript 编写，类型支持最新版本&lt;/li>
&lt;li>类似 FFmpeg 却专为 Web 从零设计，具备极高性能和灵活性，满足现代前端对媒体处理的高要求&lt;/li>
&lt;li>开源且采用 MPL-2.0 许可证，允许商用和闭源项目使用，修改后需开源，确保生态健康持续发展&lt;/li>
&lt;/ul>
&lt;h3 id="专门给-qwen3-06b-用的迷你推理引擎">专门给 qwen3-0.6b 用的迷你推理引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-35-30.png"
width="391"
height="416"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="225px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/yassa9/qwen600" target="_blank" rel="noopener"
>qwen600&lt;/a>，一个从0实现的推理引擎，专门面向 Qwen3-0.6B 设计, 在3050-8GB 上能跑到 116.15 token/s（ 比llama.cpp 还快）。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>单批次推理引擎&lt;/li>
&lt;li>静态常量优化，支持编译时优化&lt;/li>
&lt;li>纯 CUDA C/C++ 实现，无 Python 依赖（仅分词器初始化除外）&lt;/li>
&lt;li>极简依赖：仅使用 cuBLAS、CUB 和标准 IO 库&lt;/li>
&lt;li>高效内存流水线：支持 mmap、单 GPU 内存块、异步拷贝&lt;/li>
&lt;li>GPU 上基于指针的零开销权重管理&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 147 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/</link><pubDate>Sun, 07 Sep 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-49-06.png" alt="Featured image of post 机器文摘 第 147 期" />&lt;h1 id="机器文摘-第-147-期">机器文摘 第 147 期
&lt;/h1>&lt;h3 id="给只有初中数学基础的你讲明白大语言模型的原理">给只有初中数学基础的你讲明白大语言模型的原理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-47-02.png"
width="688"
height="405"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="407px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://medium.com/data-science/understanding-llms-from-scratch-using-middle-school-math-e602d27ec876" target="_blank" rel="noopener"
>用初中数学从零吃透大语言模型&lt;/a>，对法学硕士 (LLM) 内部运作的完整解释，来自 Meta 的数据科学总监 Rohit Patel 。&lt;/p>
&lt;blockquote>
&lt;p>在本文中，我们将从零开始讲解大型语言模型 (LLM) 的工作原理——前提是你知道如何进行两个数字的加法和乘法。本文力求内容完整。我们首先用纸笔构建一个简单的生成式人工智能，然后逐步讲解所有必要的知识，以便对现代 LLM 和 Transformer 架构有深入的理解。本文将摒弃机器学习中所有花哨的术语和专业术语，以数字的本质来表达一切。不过，我们仍然会标明这些术语的名称，以便在你阅读专业术语时，能够更好地理解你的思路。&lt;/p>
&lt;p>从加法/乘法到当今最先进的人工智能模型，无需假设其他知识或参考其他来源，意味着我们涵盖了很多领域这不是一篇关于 LLM 的简单解释——理论上，一个有决心的人可以根据这里的所有信息，重新构建一个现代的 LLM。&lt;/p>
&lt;/blockquote>
&lt;h3 id="基于物理的第一原理渲染">基于物理的第一原理渲染
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-47-38.png"
width="765"
height="499"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="367px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://imadr.me/pbr/" target="_blank" rel="noopener"
>基于物理的第一原理渲染&lt;/a>，这篇文章构建了一个可交互的网页，把“光到底是什么、物体为什么呈现不同颜色、游戏里的金属与塑料如何被算法还原”这些看似高冷的物理问题，拆成一连串可拖拽、可滑动、可即时呈现的小实验。&lt;/p>
&lt;p>它先带你从电荷与磁场的舞蹈里导出电磁波，再用 Snell 窗演示水下奇妙视角，最后把微表面模型、BRDF、GGX 高光等硬核公式浓缩成几组滑杆——轻轻一拉，粗糙度、金属度、折射率即时成像，仿佛把渲染管线握在指尖。&lt;/p>
&lt;p>无需深厚数学背景，也能在十分钟内获得“原来真实感是这样算出来”的通透体验，值得任何对图形学或物理光学感兴趣的人静心一读。&lt;/p>
&lt;blockquote>
&lt;p>在这篇互动文章中，我们将探索产生光的物理现象以及光与物质相互作用的基本定律。我们将学习人眼如何捕捉光线，以及大脑如何将其解读为视觉信息。之后，我们将对这些物理相互作用进行近似建模，并学习如何创建各种材质的物理逼真渲染。&lt;/p>
&lt;/blockquote>
&lt;h3 id="什么是嵌入">什么是“嵌入”？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-48-30.png"
width="556"
height="633"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://vickiboykis.com/what_are_embeddings/" target="_blank" rel="noopener"
>What are embeddings? &lt;/a>，这篇文章系统地介绍了“嵌入”（Embeddings）这一机器学习中的核心概念。 嵌入是将文本、图片等多模态数据转换为数值形式的向量，以便于深度学习模型进行计算和处理。&lt;/p>
&lt;blockquote>
&lt;p>如果我们不理解我们是如何从一个单词变成一个BERT表示（更重要的是，我们为什么要这样做）的基础知识，那么这些模型对我们来说将永远是黑匣子。&lt;/p>
&lt;p>如果你去巴塞罗那的毕加索博物馆，你会看到毕加索这位艺术家许多早期的作品。它们真的很有趣，因为它们看起来并不像我们所认为的毕加索风格。这些在他早年完成的画作，展示了他作为一名古典主义画家的技术天赋。&lt;/p>
&lt;p>一些特别令人惊叹的例子是《科学与慈善》和《第一次圣餐》。我最喜欢的其中一幅是《画家的母亲肖像》。这些都是在他十五岁时画的。你可以从中看到这位艺术家与生俱来的艺术创作能力，以及他未来巨大的潜力。但是，在达到可以摒弃传统风格的境界之前，毕加索必须先精通它们。&lt;/p>
&lt;p>这对于机器学习也是如此。在大语言模型的前沿领域，有着一个充满激动人心发展的全新世界。但在这些尖端技术的喧嚣中，许多重要的基础概念被忽略了。如果我们不理解我们是如何从一个单词变成一个BERT表示（更重要的是，我们为什么要这样做）的基础知识，那么这些模型对我们来说将永远是黑匣子。我们将无法在它们的基础上进行构建，也无法以我们想要的方式去驾驭它们。&lt;/p>
&lt;p>彼得·诺维格（Peter Norvig）敦促我们要用十年的时间来教自己编程。本着这种精神，在与“嵌入”（embeddings）——深度学习模型中的基础数据结构——打了几年的交道之后，我意识到要对它们有一个好的概念模型并非易事。而且，当我想学习更多时，却没有一个好的、通用的文本可以作为起点。现有的资料要么过于艰深和学术化，要么过于肤浅，是这个领域的供应商为了推销其解决方案而制作的内容。&lt;/p>
&lt;p>所以我开始了一个项目，旨在理解机器学习和自然语言处理的基本构件，特别是它们与当今推荐系统的关系。这个项目的结果就是这个网站上的PDF，它面向的是普通读者，除了“向量很酷”这个想法之外，不试图向你推销任何东西。我也一直在通过Viberary这个项目将这些想法付诸实践。&lt;/p>
&lt;p>除了他的艺术作品，毕加索还给我们留下了一句名言：&lt;/p>
&lt;p>&amp;mdash;当艺术评论家聚在一起时，他们谈论的是形式、结构和意义。当艺术家们聚在一起时，他们谈论的是哪里可以买到便宜的松节油。&lt;/p>
&lt;p>我写这篇文章是为了我自己的学习过程。但我希望这份文档能将“嵌入”置于商业和工程的背景下，以便包括工程师、产品经理、学生以及任何希望学习更多基础知识的人在内的其他人都能觉得它有用。&lt;/p>
&lt;p>机器学习，就像所有优秀的工程和艺术一样，最终是我们表达自我的一种方式，是一门由基本的构件和模式组成的技艺，它赋予我们力量，让我们能够在前人打下的坚实基础上，创造出美好的事物。我希望你在探索和使用“嵌入”的过程中，也能找到和我一样多的乐趣。&lt;/p>
&lt;/blockquote>
&lt;h3 id="把我的世界搓成球">把《我的世界》搓成球
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-49-06.png"
width="716"
height="539"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>[方块星球](&lt;a class="link" href="https://www.bowerbyte.com/posts/blocky-planet/" target="_blank" rel="noopener"
>https://www.bowerbyte.com/posts/blocky-planet/&lt;/a>）是一款由独立开发者鼓捣出的技术 Demo，灵感源自上古时期的同类实验。&lt;/p>
&lt;p>它把《我的世界》那种方方正正的体素世界，硬生生贴到了一颗圆滚滚的行星上——星球不大，却能从地表一路挖到地核；方块虽小，却多达二十余种，想咋拆就咋拆。&lt;/p>
&lt;p>为了让玩家随时“脚踏实地”，星球被切成六块扇形区域，再像洋葱一样套上一层又一层“壳层”。每往下一层，方块数量翻四倍，尺寸缩四倍，既保持了手感，又避免了“面条块”和“馒头块”的尴尬。再加上自定义重力、喷气背包、北极苔原与森林两种生物群系，整个星球虽小，五脏俱全。&lt;/p>
&lt;p>作者坦言，这只是下班后的“自嗨项目”，未必会做成收费游戏，但偶尔修修 Bug、添点新花样还是有可能的。&lt;/p>
&lt;p>如果你也想围着这颗“方块小丸子”跑一圈，直接去 Itch.io 白嫖即可——Windows 原生版最顺滑，网页版也能凑合玩。&lt;/p>
&lt;h3 id="用-c-语言实现的超轻量级-ai-agent">用 C 语言实现的超轻量级 AI Agent
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-49-31.png"
width="810"
height="469"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/bravenewxyz/agent-c" target="_blank" rel="noopener"
>Agent-C&lt;/a>，一个使用 C 语言实现的超轻量级 AI Agent，编译后体积仅 4.4KB。&lt;/p>
&lt;p>支持使用 OpenRouter API 接入各种模型，可直接执行 Shell 命令操作系统。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>工具调用功能，AI 可直接执行 shell 命令操作系统&lt;/li>
&lt;li>超轻量设计，macOS 下仅 4.4KB，Linux 下约 16KB&lt;/li>
&lt;li>滑动窗口记忆管理，保持对话连贯性的同时高效运行&lt;/li>
&lt;li>自动平台检测和最优压缩，无需手动配置&lt;/li>
&lt;li>支持 OpenRouter API，可接入多种大语言模型&lt;/li>
&lt;/ul>
&lt;p>跨平台支持，兼容 macOS 和 Linux 系统，使用 make 命令编译后设置 API 密钥即可运行。&lt;/p>
&lt;h3 id="装机之家">装机之家
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-49-51.png"
width="690"
height="448"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.zhuangji.net" target="_blank" rel="noopener"
>装机之家&lt;/a>，这个网站提供了电脑系统安装包和大量装机软件，无任何套路，直接就能下载。 ​​​&lt;/p>
&lt;h3 id="喵语编程">喵语编程！
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-50-14.png"
width="480"
height="660"
loading="lazy"
class="gallery-image"
data-flex-grow="72"
data-flex-basis="174px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/wixette/meowlang" target="_blank" rel="noopener"
>meowlang&lt;/a>，有人整了个不错的活，只使用“喵喵”词来实现图灵完备的编程。&lt;/p>
&lt;p>图中喵语代码可以打印一个斐波那契数列。&lt;/p>
&lt;p>注意代码里没有用零宽空格等隐藏字符，只用喵和分号两个符号。编写方法有点像汇编，用喵的数量来写指令和值。&lt;/p>
&lt;h3 id="基于-web-的服务器管理平台">基于 web 的服务器管理平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-51-33.png"
width="1213"
height="679"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/LukeGus/Termix" target="_blank" rel="noopener"
>Termix&lt;/a>，提供了完整的 Web 界面来统一管理所有服务器，包括 SSH 终端、文件编辑、隧道管理等功能。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>SSH 终端访问，支持分屏显示（最多 4 个面板）和标签系统&lt;/li>
&lt;li>SSH 隧道管理，具备自动重连和健康监控功能&lt;/li>
&lt;li>远程文件编辑器，支持语法高亮和完整文件管理操作&lt;/li>
&lt;li>SSH 主机管理器，可保存和分类管理所有连接信息&lt;/li>
&lt;li>服务器状态监控，实时查看 CPU、内存和硬盘使用情况&lt;/li>
&lt;li>用户认证系统，支持管理员控制和 OIDC 认证&lt;/li>
&lt;/ul>
&lt;p>通过 Docker Compose 一键部署即可使用，需要管理多台服务器的运维人员和开发者，这个工具值得一看。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 146 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/</link><pubDate>Sun, 31 Aug 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-22-50.png" alt="Featured image of post 机器文摘 第 146 期" />&lt;h1 id="机器文摘-第-146-期">机器文摘 第 146 期
&lt;/h1>&lt;h3 id="关于安全启动和-tpm-的文章">关于安全启动和 TPM 的文章
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-22-23.png"
width="898"
height="508"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://andrewmoore.ca/blog/post/anticheat-secure-boot-tpm/" target="_blank" rel="noopener"
>安全启动与TPM技术成为游戏反作弊新手段&lt;/a>。&lt;/p>
&lt;p>硬件级安全功能正被用于打击游戏作弊，提升多人在线游戏的公平性。&lt;/p>
&lt;p>多家游戏开发商开始要求玩家启用安全启动（Secure Boot）和可信平台模块（TPM 2.0） 才能运行热门在线游戏。&lt;/p>
&lt;p>安全启动通过验证UEFI启动镜像和内核驱动程序的数字签名，防止加载未授权的代码。TPM则提供不可篡改的硬件唯一标识符（基于认可密钥），允许反作弊系统实施硬件封禁，增加作弊者成本。&lt;/p>
&lt;p>此外，TPM的平台配置寄存器（PCR） 可记录启动过程中的各种事件哈希值，为系统启动状态提供加密验证，确保启动链未被篡改。&lt;/p>
&lt;p>这些技术要求旨在对抗内核级作弊、内存修改、硬件ID欺骗等作弊手段，但也在玩家社群中引发了关于隐私和便利性的讨论。&lt;/p>
&lt;h3 id="腾讯开源的多智能体框架">腾讯开源的多智能体框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-22-50.png"
width="881"
height="630"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Tencent/Youtu-agent" target="_blank" rel="noopener"
>Youtu-agent&lt;/a>，是一个灵活、高性能的框架，用于构建、运行和评估自主智能体。除了在基准测试中名列前茅，该框架还提供了强大的智能体能力，例如数据分析、文件处理和深度研究。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>验证性能&lt;/strong>：在 WebWalkerQA 上达到 71.47% 的 pass@1，在 GAIA（纯文本子集）上达到 72.8% 的 pass@1，纯粹使用 &lt;code>DeepSeek-V3&lt;/code> 系列模型（不使用 Claude 或 GPT），建立了强大的开源起点。&lt;/li>
&lt;li>&lt;strong>开源友好且成本敏感&lt;/strong>：针对可访问、低成本部署进行了优化，不依赖封闭模型。&lt;/li>
&lt;li>&lt;strong>实际用例&lt;/strong>：开箱即用地支持 CSV 分析、文献综述、个人文件整理以及播客和视频生成等任务。（即将推出）&lt;/li>
&lt;li>&lt;strong>灵活的架构&lt;/strong>：基于 &lt;a class="link" href="https://github.com/openai/openai-agents-python" target="_blank" rel="noopener"
>openai-agents&lt;/a> 构建，可兼容各种模型 API（从 &lt;code>DeepSeek&lt;/code> 到 &lt;code>gpt-oss&lt;/code>）、工具集成和框架实现。&lt;/li>
&lt;li>&lt;strong>自动化与简洁性&lt;/strong>：基于 YAML 的配置、自动智能体生成和简化的设置减少了手动开销。&lt;/li>
&lt;/ul>
&lt;h3 id="短视频生成工厂">短视频生成工厂
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-23-13.png"
width="797"
height="478"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/YILS-LIN/short-video-factory" target="_blank" rel="noopener"
>short-video-factory&lt;/a>，一键生成产品营销与泛内容短视频，AI批量自动剪辑，高颜值跨平台桌面端工具。&lt;/p>
&lt;p>短视频工厂是一个开源的桌面端应用，旨在通过AI技术简化短视频的制作流程。用户可以通过简单的提示词文本+视频分镜素材，快速且自动的剪辑出高质量的产品营销和泛内容短视频。该项目集成了AI驱动的文案生成、语音合成、视频剪辑、字幕特效等功能，旨在为用户提供开箱即用的短视频制作体验。&lt;/p>
&lt;p>核心功能：&lt;/p>
&lt;ul>
&lt;li>🤖 AI驱动：集成了最新的AI技术，提升视频制作效率和质量&lt;/li>
&lt;li>📝 文案生成：基于提示词生成高质量的短视频文案&lt;/li>
&lt;li>🎥 自动剪辑：支持多种视频格式，自动化批量处理视频剪辑任务&lt;/li>
&lt;li>🎙️ 语音合成：将生成的文案转换为自然流畅的语音&lt;/li>
&lt;li>🎬 字幕特效：自动添加字幕和特效，提升视频质量&lt;/li>
&lt;li>📦 批量处理：支持批量任务，按预设自动持续合成视频&lt;/li>
&lt;li>🌐 多语言支持：支持中文、英文等多种语言，满足不同用户需求&lt;/li>
&lt;li>📦 开箱即用：无需复杂配置，用户可以快速上手&lt;/li>
&lt;li>📈 持续更新：定期发布新版本，修复bug并添加新功能&lt;/li>
&lt;li>🔒 安全可靠：完全本地本地化运行，确保用户数据安全&lt;/li>
&lt;li>🎨 用户友好：简洁直观的用户界面，易于操作
💻 多平台支持：支持Windows、macOS和Linux等多个操作系统&lt;/li>
&lt;/ul>
&lt;h3 id="可视化开发-python-图形界面">可视化开发 Python 图形界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-23-42.png"
width="822"
height="371"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="531px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/PaulleDemon/PyUIBuilder" target="_blank" rel="noopener"
>PyUIBuilder&lt;/a>，一款突破传统框架限制的 Python GUI 可视化构建工具，支持 Tkinter、CustomTkinter，Kivy 与未来的 PySide，颠覆你对 GUI 开发的认知。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>框架无关，生成纯 Python 代码，方便调试与后续维护，兼容多种主流 UI 库&lt;/li>
&lt;li>拖拽式设计，预置丰富 UI 组件，支持布局管理（flex、grid、绝对定位）和本地资源上传&lt;/li>
&lt;li>自动生成 requirements.txt，助力快速部署，提升开发效率&lt;/li>
&lt;li>即将支持事件处理、PyQt/PySide、Electron 桌面应用等高级功能，路线图公开透明&lt;/li>
&lt;li>免费网页版编辑器永远开放，付费版本享终身授权、优先支持和更多高级组件与功能&lt;/li>
&lt;li>开源社区活跃，作者独立维护，支持开源项目发展的同时享超值优惠预购许可&lt;/li>
&lt;li>适合快速原型设计、学习及商业项目，减少重复造轮子，释放更多时间专注业务逻辑&lt;/li>
&lt;/ul>
&lt;p>快速上手只需三步：选框架 + 拖组件 + 生成代码，Python GUI 开发从未如此简单高效📱💻&lt;/p>
&lt;h3 id="在本地浏览器中运行的pdf处理工具">在本地浏览器中运行的PDF处理工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-24-11.png"
width="860"
height="420"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/krmanik/local-pdf-tools" target="_blank" rel="noopener"
>Local PDF Tools&lt;/a>，一个完全在本地浏览器中运行的PDF处理工具。&lt;/p>
&lt;p>使用 Ghostscript WebAssembly 在浏览器中完全运行。它的主要功能包括：压缩、合并和拆分 PDF 文件。&lt;/p>
&lt;p>在线体验：krmanik.github.io/local-pdf-tools/&lt;/p>
&lt;h3 id="带渐变效果的编辑器主题">带渐变效果的编辑器主题
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-24-52.png"
width="1092"
height="703"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/shaobeichen/gradient-theme" target="_blank" rel="noopener"
>gradient-theme&lt;/a>，基于多个知名主题如 Dracula、Monokai Pro 等添加了精美的渐变效果，通过修改 VS Code 核心文件实现真正的渐变背景。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持 8 种经典主题的渐变版本，包括 Dracula、Monokai Pro 等&lt;/li>
&lt;li>一键启用/禁用渐变效果，操作简单便捷&lt;/li>
&lt;li>支持自定义渐变样式，可以创建专属的个性化主题&lt;/li>
&lt;li>完全保留原主题的语法高亮和配色方案&lt;/li>
&lt;li>提供详细的自定义教程和在线压缩工具支持&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>有一天我看到了一个自已修改 VSCode 主题 CSS 文件的视频，&lt;/p>
&lt;p>于是我觉得我可以使用相同的方式来制作一个 VSCode 渐变效果 CSS 文件，&lt;/p>
&lt;p>然后我就开始使用 Custom CSS and JS Loader 插件来加载自定义的渐变 CSS，&lt;/p>
&lt;p>后来许多人觉得我的渐变主题非常好看，希望也能在自己的 VSCode 上能使用它，&lt;/p>
&lt;p>但是如果要使用它的话，需要安装插件还需要我给他们一份 CSS 文件，这太麻烦了！&lt;/p>
&lt;p>于是我去学习了如何制作一个 VSCode 主题插件，做出了这个渐变色主题插件。&lt;/p>
&lt;/blockquote>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 145 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-09-00-45.png" alt="Featured image of post 机器文摘 第 145 期" />&lt;h1 id="机器文摘-第-145-期">机器文摘 第 145 期
&lt;/h1>&lt;h3 id="用-excel-来学习多头注意力机制">用 Excel 来学习多头注意力机制
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-08-57-44.png"
width="771"
height="676"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="273px"
>&lt;/p>
&lt;p>什么是大模型赖以生存的“注意力机制”？论文读起来太枯燥？Excel 总会用吧？&lt;/p>
&lt;p>&lt;a class="link" href="https://www.byhand.ai/p/multihead-attention" target="_blank" rel="noopener"
>用 Excel 来学习多头注意力机制&lt;/a>，之前有人用 Excel 做了一个 CPU，现在又有人基于 Excel 实现了一个“多头注意力”模型。&lt;/p>
&lt;p>跟着作者可以一步一步理解其中的技术原理。&lt;/p>
&lt;p>Excel：俺也是图灵完备的哦！&lt;/p>
&lt;h3 id="操作-excel-的-mcp-server">操作 Excel 的 MCP Server
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-08-58-43.png"
width="857"
height="556"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/haris-musa/excel-mcp-server" target="_blank" rel="noopener"
>excel-mcp-server&lt;/a>，一个Excel mcp，用AI操作Excel表格。&lt;/p>
&lt;p>利用这个 mcp server 你就可以让 AI 创建销售数据表，把A列都乘1.1，结果放B 列，然后画个柱状图。&lt;/p>
&lt;p>支持创建、复制工作表；填数、写公式、画图表、调颜色、加透视表、保存、转 PDF 等 Excel 的常规操作。&lt;/p>
&lt;p>本地或远程都能跑，stdio、SSE、HTTP 三种连接方式。&lt;/p>
&lt;h3 id="量产的激光灭蚊套装">量产的激光灭蚊套装
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-08-59-08.png"
width="690"
height="429"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="386px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://photonmatrixlab.com/" target="_blank" rel="noopener"
>光子矩阵&lt;/a>，全球首款便携式激光灭蚊器。用激光雷达检测蚊子，用激光消灭蚊子。&lt;/p>
&lt;p>可以有效地识别和打击飞行速度不超过 1m/s、尺寸特征为 2~20mm 的蚊子。它也可以有效打击该特征范围内的其他飞虫，但对飞行速度要快得多的苍蝇等飞虫基本无效。 ​​​&lt;/p>
&lt;h3 id="开源跨平台多智能体框架">开源跨平台多智能体框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-08-59-22.png"
width="690"
height="445"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/X-PLUG/MobileAgent/blob/main/README_zh.md" target="_blank" rel="noopener"
>Mobile-Agent-v3&lt;/a>，是一款基于GUI-Owl的跨平台多智能体框架，GUI-Owl也同时被开源，这是一款多模态跨平台GUI虚拟层模型&lt;/p>
&lt;p>GUI-Owl 作为 GUI 自动化基础模型，具备GUI感知、落地、端到端操作能力。&lt;/p>
&lt;p>可以理解 GUI界面布局、元素，把指令转化为具体的屏幕坐标和操作，完成完整的GUI操作流程。&lt;/p>
&lt;p>Mobile-Agent-v3 利用 GUI-Owl 能力与 GUI 交互，具备任务分解、规划以及进度管理、异常处理和反射能力、关键信息记录能力。&lt;/p>
&lt;p>比如，完成特定目标制定行动计划，跟踪任务执行进度，反馈调整行动。&lt;/p>
&lt;p>具备关键信息记录能力，支持跨应用任务。&lt;/p>
&lt;h3 id="基于控制台终端的电子书阅读器">基于控制台终端的电子书“阅读器”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-08-59-42.png"
width="826"
height="463"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/superstarryeyes/lue" target="_blank" rel="noopener"
>lue&lt;/a>，在终端中运行的电子书阅读器，支持 EPUB、PDF、TXT 等多种格式，还自带 TTS 语音朗读功能，支持 100+ 种语言朗读。&lt;/p>
&lt;p>界面简洁完美融入终端，同时支持快捷键操作，可轻松上下翻页。&lt;/p>
&lt;p>看起来就像在敲代码，实际却在上班看小说。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持 EPUB、PDF、DOCX 等多种电子书格式&lt;/li>
&lt;li>内置 TTS 语音朗读，可以离线听书&lt;/li>
&lt;li>高颜值的终端界面，完美伪装成工作状态&lt;/li>
&lt;li>自动保存阅读进度，随时继续阅读&lt;/li>
&lt;li>提供快捷键导航与进阶阅读控制&lt;/li>
&lt;li>支持离线语音朗读，无需联网使用&lt;/li>
&lt;/ul>
&lt;p>程序员们，继续摸鱼吧，马上鱼就上岸啦。&lt;/p>
&lt;h3 id="开源数字人对话系统">开源数字人对话系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-09-00-45.png"
width="539"
height="268"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="482px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/HumanAIGC-Engineering/OpenAvatarChat" target="_blank" rel="noopener"
>Open Avatar Chat&lt;/a>，在自己个人电脑上就能运行一个能与我们实时对话的数字人系统，平均回答延迟仅 2.2 秒。支持 Docker 一键快速部署。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>低延迟数字人实时对话，平均响应时间 2.2 秒&lt;/li>
&lt;li>支持多模态交互，包括文本、音频、视频输入&lt;/li>
&lt;li>模块化架构设计，可灵活替换各个组件&lt;/li>
&lt;li>预置 100+ 数字人形象，支持 LiteAvatar 和 LAM 两种渲染方式&lt;/li>
&lt;li>前后端分离，方便自定义界面和扩展功能&lt;/li>
&lt;li>支持本地推理和云端 API 两种部署模式&lt;/li>
&lt;/ul>
&lt;h3 id="可以跑在计算器上的-lisp-解释器">可以跑在计算器上的 lisp 解释器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-09-01-28.png"
width="798"
height="330"
loading="lazy"
class="gallery-image"
data-flex-grow="241"
data-flex-basis="580px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Robert-van-Engelen/tinylisp" target="_blank" rel="noopener"
>tinylisp&lt;/a>，这个项目教你如何使用 C 语言在 99 行代码内实现一个小型的 Lisp 解释器。&lt;/p>
&lt;p>尽管代码很简洁，但这个 Lisp 解释器具备 21 个内置原语、简单的垃圾回收和 REPL（交互式环境），使其比简单的示例更加实用，甚至可以在复古 Sharp PC-G850VS 掌上电脑上运行。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 144 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/</link><pubDate>Sat, 16 Aug 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-51-27.png" alt="Featured image of post 机器文摘 第 144 期" />&lt;h1 id="机器文摘-第-144-期">机器文摘 第 144 期
&lt;/h1>&lt;h3 id="windows-xp-的前世今生">Windows XP 的“前世今生”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-49-16.png"
width="690"
height="518"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.abortretry.fail/p/the-history-of-windows-xp" target="_blank" rel="noopener"
>一个差点不存在的传奇&lt;/a>，本文用大量幕后故事串起 XP 的诞生史——微软原本想靠 Neptune／Odyssey 取代 DOS，结果项目双双夭折，只得紧急合并成 Whistler，最终意外打造出史上寿命最长、影响最深远的 Windows XP。&lt;/p>
&lt;ol>
&lt;li>最初的计划：杀死 DOS，却“难产”
90 年代末，微软一直想摆脱老旧的 MS-DOS。
原本计划用 Windows 2000 直接终结 DOS 产品线，但最后一刻（1999 年 4 月）被叫停。
于是启动了两个全新分支：
Neptune：面向家庭用户，界面大改版（代号 Forms+）。
Odyssey：面向企业用户，升级 Windows 2000。
这两个项目最终都成了“黑洞”——功能越塞越多，进度却一拖再拖，1999 年 12 月被双双砍掉。&lt;/li>
&lt;li>紧急合并：Whistler 的诞生
为了不让努力白费，微软把 Neptune 和 Odyssey 合并为一个项目，代号 Whistler（加拿大滑雪胜地）。
2000 年初，Whistler 还只是“Windows 2000 加一点皮肤”，但迭代飞快：
3 月：开始引入 Windows Me 的界面元素。
10 月：首个 Beta 公开，已经可以切换“经典/新”界面。
2001 年 2 月：Beta 2 首次出现 Luna 主题（蓝绿渐变、圆润按钮），也就是我们后来熟知的“XP 脸”。&lt;/li>
&lt;li>最后一锤定音：XP 的惊险发布
2001 年 8 月 24 日，微软在总部办了一场“直升机发布会”——把 XP 的母盘装进手提箱，让 PC 厂商代表直接坐直升机带走。
10 月 25 日全球上市，营销预算高达 10 亿美元（微软 + 英特尔 + OEM 厂商各出 5 亿）。
口号从原本的“Prepare to Fly”因 9·11 事件紧急改成“Yes you can”，麦当娜的《Ray of Light》成为主题曲。&lt;/li>
&lt;li>彩蛋：那张“草地桌面”差点没拿到
XP 默认壁纸“Bliss”（蓝天白云绿草）其实是一张 1998 年拍的 Sonoma 山谷实景。
摄影师 Charles O’Rear 把照片上传到 Corbis（盖茨自己开的图库）后，微软想买断却发现“太贵，保险不保”，只能让他亲自坐飞机把底片送到总部。&lt;/li>
&lt;li>尾声：一个用了 13 年的系统
Vista、7、8 都没能完全取代 XP，它一直“坚挺”到 2014 年才结束官方支持。
直到今天，全球仍有 0.5% 的电脑在运行 XP——比某些 Linux 发行版还多。&lt;/li>
&lt;/ol>
&lt;h3 id="怎样构建一个能写代码的智能体">怎样构建一个能写代码的智能体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-50-02.png"
width="626"
height="485"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="309px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://ampcode.com/how-to-build-an-agent" target="_blank" rel="noopener"
>How to Build an Agent&lt;/a>，本文展示了如何用不到 400 行代码构建一个能与本地文件系统交互的代码编辑 Agent 。&lt;/p>
&lt;p>作者认为，现在所谓复杂的智能体架构都是皇帝的新装，事实上没有那么麻烦。&lt;/p>
&lt;p>构建代理的核心要素仅包括一个大型语言模型（LLM）、一个循环以及充足的 tokens，并无需复杂的框架。&lt;/p>
&lt;h3 id="用-ct-扫描仪扫描-386-处理器">用 CT 扫描仪扫描 386 处理器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-50-41.png"
width="497"
height="489"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="243px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.righto.com/2025/08/intel-386-package-ct-scan.html" target="_blank" rel="noopener"
>CT 扫描仪揭示了 386 处理器陶瓷封装内的惊喜&lt;/a>， 1985 年的 Intel 80386 处理器，外表只是一块灰扑扑的陶瓷方块。&lt;/p>
&lt;p>作者借来一台工业 CT，像给木乃伊做全身扫描一样，把它层层剥开：&lt;/p>
&lt;ul>
&lt;li>6 层陶瓷“地下管网”把电源、地线和信号送到每个角落；&lt;/li>
&lt;li>35 µm 的金丝比头发还细，却负责把硅片和世界连在一起；&lt;/li>
&lt;li>侧缘几乎看不见的金属“暗线”，原来是制造时为引脚电镀而临时接入的“施工电缆”；&lt;/li>
&lt;li>8 个标着“NC”的空闲引脚里，竟有一个悄悄连着内部信号，可能是调试接口的“后门”。&lt;/li>
&lt;/ul>
&lt;p>文章用 3D 扫描和显微照片把 1 µm 的晶体管一路放大到 2.54 mm 的引脚——2500 倍的尺度跨越，像把整座城市的地下管线、高架桥和毛细血管一次性拍成透视图。&lt;/p>
&lt;p>芯片封装从来不是“外壳”，而是一整套微型电力与信号的高速公路。&lt;/p>
&lt;h3 id="一款开源-llm-应用开发平台">一款开源 LLM 应用开发平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-51-06.png"
width="977"
height="617"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="380px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dataelement/bisheng" target="_blank" rel="noopener"
>BISHENG毕昇&lt;/a>，是一款 开源 LLM应用开发平台，主攻企业场景， 已有大量行业头部组织及世界500强企业在使用。&lt;/p>
&lt;p>“毕昇”是活字印刷术的发明人，活字印刷术为人类知识的传递起到了巨大的推动作用。项目作者希望“BISHENG毕昇”同样能够为智能应用的广泛落地提供有力支撑。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>🧩 独立、完备的应用编排框架：可在一个框架下实现各类任务（同类产品需要被 bot 调用，或划分成 chatflow 与 workflow 来完成不同类型的任务）。&lt;/li>
&lt;li>🔄 Human in the loop：支持用户在Workflow执行的中间过程进行干预和反馈（包括多轮对话），而同类产品只能从头执行到尾。&lt;/li>
&lt;li>💥 强大：支持成环、并行、跑批、判断逻辑以及所有逻辑的任意自由组合；支持多类型输入输出、撰写报告、内容审核等复杂场景。&lt;/li>
&lt;li>🖐️ 易用、符合直觉：如成环、并行、批量运行操作，在同类产品中用户需借助专门组件实现，在BISHENG中只需完全按照直觉连接成“流程图”即可（画圈成环、并列即并行、多选即批量）。&lt;/li>
&lt;/ul>
&lt;h3 id="提示词-hub">提示词 Hub
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-51-27.png"
width="923"
height="621"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;p>有人做了一个大佬提示词库 &lt;a class="link" href="https://www.prompterhub.cn/best-practices" target="_blank" rel="noopener"
>PrompterHub&lt;/a>，用于汇集中文 AI 优质提示词。作者按照提示词所生成的结果类型来分类，分为 SVG、HTML、文本、图片等类别。&lt;/p>
&lt;p>如果你有很不错的提示词，也可以去这里提交。&lt;/p>
&lt;h3 id="学习-cuda-c-编程的电子书">学习 CUDA C++ 编程的电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-51-58.png"
width="643"
height="519"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="297px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.nvidia.com/cuda/pdf/CUDA_C_Best_Practices_Guide.pdf" target="_blank" rel="noopener"
>《CUDA C++ 最佳实践指南》&lt;/a>，nvidia官方指南。&lt;/p>
&lt;p>本指南面向希望利用 NVIDIA GPU 强大的并行计算能力进行通用计算的开发者。&lt;/p>
&lt;p>虽然 GPU 能够同时执行数千个线程，但其架构与 CPU 截然不同，这带来了独特的编程挑战。&lt;/p>
&lt;p>本指南旨在解决一个核心问题：如何将一个可以正常运行的并行程序，转变为一个能够充分发挥硬件潜能的高性能程序。&lt;/p>
&lt;p>它通过阐述成熟的并行化和优化技术，指导开发者有效地利用 GPU 架构，从而最大限度地提高计算吞吐量并实现可扩展的、高效的程序。&lt;/p>
&lt;p>本文献适合已具备 C++ 编程语言基础 和 CUDA C++ 编程初步知识的开发者阅读。&lt;/p>
&lt;h3 id="每天六十秒看世界">每天六十秒看世界
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-52-35.png"
width="561"
height="687"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="195px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/vikiboss/60s" target="_blank" rel="noopener"
>每天60s看世界&lt;/a>，资讯类API大合集，涵盖新闻、每日壁纸、每日热搜、每日段子、Epic免费游戏等常用又有趣的内容。&lt;/p>
&lt;p>它不仅开源，还支持Docker、Node.js、Deno、Bun、Cloudflare Workers等多种部署方式，文档托管在Apifox上，部署方便，更新机制也很透明。&lt;/p>
&lt;p>更灵活的一点是：新闻源并不是写死的，而是可以自定义成你喜欢的信息源，配好cookie后定时自动抓取，每天都有更新。&lt;/p>
&lt;p>如果当天信息源没更新，也会自动 fallback 到前一天的内容，不会返回空数据。&lt;/p>
&lt;h3 id="观点">观点
&lt;/h3>&lt;ul>
&lt;li>我对现在 AI 编程的看法：我总有一种感觉，随着AI编程的成熟，编码的代价越来越低，软件也许会更换一种形态出现，所有的信息系统演变为一种通用的系统，再也没有“专业”功能，系统会根据需要，实时“生成”功能。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 143 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-29-23.png" alt="Featured image of post 机器文摘 第 143 期" />&lt;h1 id="机器文摘-第-143-期">机器文摘 第 143 期
&lt;/h1>&lt;h3 id="使用-rust-从零开始构建容器">使用 Rust 从零开始构建容器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-28-05.png"
width="773"
height="441"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://brianshih1.github.io/mini-container/preface.html" target="_blank" rel="noopener"
>Building a Container from Scratch in Rust&lt;/a>，用 Rust 语言从零开始构建容器系列教程。&lt;/p>
&lt;p>主要内容：&lt;/p>
&lt;ul>
&lt;li>使用挂载命名空间隔离根文件系统；&lt;/li>
&lt;li>使用 cgroups 进行资源限制；&lt;/li>
&lt;li>使用 seccomp 限制系统调用；&lt;/li>
&lt;li>使用用户命名空间和 uid 映射隔离用户 ID 和组 ID；&lt;/li>
&lt;li>通过功能进行权限控制；&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>我使用 Docker 容器已经很多年了，但一直把它当作神奇的黑匣子。我知道 Docker 使用容器运行时来创建隔离环境以运行代码。 不过，我不知道“隔离”到底是什么意思。为了揭开这个黑匣子，我决定在 Rust 中从头开始实现一个玩具容器运行时。&lt;/p>
&lt;p>在这个博客系列中，我将从 Linux 新手的角度，介绍容器的理论基础和实现过程。 我还会尽可能多地提供演示，以展示构成容器的 Linux 原语是如何工作的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="跨平台命令行-gpunpu-监控工具">跨平台命令行 GPU/NPU 监控工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-28-55.png"
width="963"
height="758"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="304px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/inureyes/all-smi" target="_blank" rel="noopener"
>all-smi&lt;/a>，覆盖NVIDIA、Apple Silicon、Tenstorrent、Rebellions、Furiosa多种硬件，支持单机与集群远程实时监控，完美替代nvidia-smi。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>实时监控核心指标：GPU/NPU利用率、显存占用、温度、功耗、频率，多平台细节数据（如PCIe、DLA、ANE功耗、NPU核心负载等）。&lt;/li>
&lt;li>多节点集群视图：支持256+远程节点统一管理，带连接池与重连机制，自动调节刷新间隔，历史趋势图和多标签界面优化运维效率。&lt;/li>
&lt;li>进程级别监控：GPU进程内存、CPU占用、用户信息、命令行，支持多维度排序和全进程树展示，助力精准资源调度。&lt;/li>
&lt;li>CPU/内存/存储全面覆盖：多核利用率、频率、温度及功耗，系统内存及缓冲区细节，交换空间和磁盘使用状态实时呈现。&lt;/li>
&lt;li>极致交互体验：终端UI支持键鼠操作、颜色分级高亮、响应式布局、无闪烁渲染，兼顾美观与实用。&lt;/li>
&lt;li>多种安装途径：Homebrew、Ubuntu PPA、Deb包、Cargo安装，兼容Linux/macOS/NVIDIA Jetson，轻松部署。&lt;/li>
&lt;li>Prometheus API输出：硬件指标标准化暴露，方便集成到监控体系，支持自定义刷新周期和进程信息。&lt;/li>
&lt;li>持续迭代优化：最新版本支持容器感知资源监控，ARM CPU频率检测增强，流程列表UI升级，Apache 2.0开源协议。&lt;/li>
&lt;/ul>
&lt;h3 id="anthropic-和吴恩达一起出的-claude-code-教程">Anthropic 和吴恩达一起出的 Claude Code 教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-29-23.png"
width="1465"
height="866"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>
&lt;a class="link" href="https://learn.deeplearning.ai/courses/claude-code-a-highly-agentic-coding-assistant/lesson/66b35/introduction" target="_blank" rel="noopener"
>Claude Code: A Highly Agentic Coding Assistant&lt;/a>，&lt;/p>
&lt;p>课程内容：&lt;/p>
&lt;ul>
&lt;li>协调多个 Claude 子 Agent 同时处理代码库的不同部分&lt;/li>
&lt;li>在 GitHub 问题中标记 Claude，并让它自主创建、审查和合并拉取请求&lt;/li>
&lt;li>将杂乱的 Jupyter 笔记本转变为干净、可用于生产的仪表板&lt;/li>
&lt;li>使用 Playwright 等 MCP 工具，这样 Claude 就能发现你的 UI 出了什么问题，并自主修复它&lt;/li>
&lt;/ul>
&lt;h3 id="小红书开源了一个-ocr-识别的模型">小红书开源了一个 OCR 识别的模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-30-48.png"
width="591"
height="541"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="262px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/rednote-hilab/dots.ocr" target="_blank" rel="noopener"
>dots.ocr&lt;/a>，可以把一些书、图标、公式扫描到电脑中。&lt;/p>
&lt;p>模型只有1.7B参数，模型大小只有6G左右。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>强大的性能：dots.ocr 在 OmniDocBench 上实现了文本、表格和阅读顺序的 SOTA 性能，同时提供与豆包 1.5 和 gemini2.5-pro 等大型模型相当的公式识别结果。&lt;/li>
&lt;li>多语言支持：dots.ocr 展示了针对低资源语言的强大解析能力，在我们的内部多语言文档基准测试中，在布局检测和内容识别方面取得了决定性的优势。&lt;/li>
&lt;li>统一简单的架构：通过利用单一视觉语言模型，dots.ocr 提供了比依赖复杂多模型管道的传统方法更加精简的架构。只需更改输入提示即可完成任务之间的切换，证明与 DocLayout-YOLO 等传统检测模型相比，VLM 可以获得具有竞争力的检测结果。&lt;/li>
&lt;li>高效快速的性能：dots.ocr 建立在紧凑的 1.7B LLM 之上，提供比许多其他基于更大基础的高性能模型更快的推理速度。&lt;/li>
&lt;/ul>
&lt;h3 id="京东开源了-joyagent">京东开源了 JoyAgent
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-31-21.png"
width="1101"
height="749"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="352px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jd-opensource/joyagent-jdgenie" target="_blank" rel="noopener"
>JoyAgent&lt;/a>，业界首个开源高完成度轻量化通用多智能体产品(JoyAgent-JDGenie)。&lt;/p>
&lt;blockquote>
&lt;p>JoyAgent-JDGenie是一个通用的多智能体框架，对于用户需要定制的一些新场景功能，只需将相关的子智能体或者工具挂载到JoyAgent-Genie即可。为了验证JoyAgent-JDGenie的通用性，在GAIA榜单Validation集准确率75.15%、Test集65.12%，已超越OWL（CAMEL）、Smolagent（Huggingface）、LRC-Huawei（Huawei）、xManus（OpenManus）、AutoAgent（香港大学）等行业知名产品。&lt;/p>
&lt;p>当前相关开源agent主要是SDK或者框架，用户还需基于此做进一步的开发，无法直接做到开箱即用。我们开源的JoyAgent-JDGenie是端到端的多Agent产品，对于输入的query或者任务，可以直接回答或者解决。例如用户query&amp;quot;给我做一个最近美元和黄金的走势分析&amp;quot;，JoyAgent-Genie可以直接给出网页版或者PPT版的报告文档。&lt;/p>
&lt;p>我们整体开源了智能体产品JoyAgent-JDGenie，包括前端、后端、框架、引擎、核心子智能体（报告生成智能体、代码智能体、PPT智能体、文件智能体等）、想用微调后效果更好的欢迎使用JoyAgent。&lt;/p>
&lt;/blockquote>
&lt;h3 id="深度-ai-代理通用开源库">深度 AI 代理通用开源库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-31-46.png"
width="611"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/hwchase17/deepagents" target="_blank" rel="noopener"
>Deep Agents&lt;/a>，LangChain 团队深度挖掘 Claude Code、Manus 与 Deep Research 核心，整合详细系统提示、规划工具、子代理与文件系统访问，打造的通用Python框架。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>通过deepagents库轻松创建支持复杂长远任务的深度AI代理。&lt;/li>
&lt;li>支持多工具调用、子代理任务分解及虚拟文件系统，提升任务规划与执行能力。&lt;/li>
&lt;li>与 LangGraph 无缝集成，支持流式交互、人机协作及记忆持久化。&lt;/li>
&lt;/ul>
&lt;h3 id="notebooklm-开源平替">NotebookLM 开源平替
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-34-09.png"
width="848"
height="464"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="438px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/souzatharsis/podcastfy" target="_blank" rel="noopener"
>Podcastfy.ai&lt;/a>，一款制作播客音频的开源工具，可作为 NotebookLM 开源平替。&lt;/p>
&lt;p>支持从网页、PDF、YouTube 视频甚至图片中提取内容，并自动生成有逻辑、有语气、有语音的自然流流畅播客对话。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持网页、PDF、图片、YouTube 视频等多种输入格式&lt;/li>
&lt;li>可生成短播客（2-5分钟）或长播客（30+分钟）&lt;/li>
&lt;li>自定义对话风格、语言和音频生成参数&lt;/li>
&lt;li>集成 100+ 种 LLM 模型进行文本生成&lt;/li>
&lt;li>支持本地 LLM 运行，保护数据隐私&lt;/li>
&lt;li>支持多语言，包括中文、英文、日文等&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 142 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-10-53.png" alt="Featured image of post 机器文摘 第 142 期" />&lt;h1 id="机器文摘-第-142-期">机器文摘 第 142 期
&lt;/h1>&lt;h3 id="让-qwen3-06b-拥有视觉的教程">让 Qwen3-0.6B 拥有视觉的教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-07-39.png"
width="695"
height="665"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mp.weixin.qq.com/s/dMr1KmlesrdQG2WNauzpwQ" target="_blank" rel="noopener"
>让Qwen3-0.6B拥有视觉&lt;/a>，介绍了一种将 SmolVLM2 视觉模块 和 Qwen3-0.6B 进行模型拼贴的方法，并通过微调实现具备「超小规模+多模态+支持中文」特性的“Qwen3-SmVL”。&lt;/p>
&lt;blockquote>
&lt;p>最近Huggingface团队发布了超小多模态模型SmolVLM2，可以做到端侧1GB显存推理。在怀着惊喜试用后发现，虽然模型有极其强大的视觉文本理解能力，但是模型却无法理解中文，这对中文技术社区并不是非常友好。&lt;/p>
&lt;p>刚好前段时间做SwanLab硬件检测适配时有一台未到期的沐曦曦云C500服务器，因此萌生了把当前中文小模型扛把子Qwen3与SmolVLM2直接微调拼接的想法。&lt;/p>
&lt;p>本教程将介绍一种模型拼接的思路，将SmolVLM2的视觉模块（0.09B）与Qwen3最小的模型（0.6B）进行对齐微调，最终使得Qwen模型具备一定的视觉理解能力。&lt;/p>
&lt;/blockquote>
&lt;h3 id="基于-llm-的结构化信息提取库">基于 LLM 的结构化信息提取库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-08-25.png"
width="830"
height="404"
loading="lazy"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="493px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/google/langextract" target="_blank" rel="noopener"
>LangExtract&lt;/a>，谷歌开源的一个能从非结构化信息中提取结构化信息的库。&lt;/p>
&lt;p>使用 LLMs 从非结构化文本文档中提取结构化信息，这些信息基于用户定义的指令。 它处理诸如临床笔记或报告之类的材料，识别并整理关键细节，同时确保提取的数据与源文本相对应。&lt;/p>
&lt;h3 id="终端中的-ai-编程助手">终端中的 AI 编程助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-08-52.png"
width="797"
height="450"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/charmbracelet/crush" target="_blank" rel="noopener"
>Crush&lt;/a>，将你喜爱的终端环境与多样化 LLM 无缝融合，打造专业、高效且灵活的 AI 编码工作站。深度整合多模型与工作流，提升开发效率与体验。&lt;/p>
&lt;p>设计理念凸显“工具即服务”的方法论，强调持续上下文管理和多模型协同，适应不同项目需求，具备长期演进潜力。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>多模型支持：可切换多种 LLM，支持 OpenAI、Anthropic 等兼容 API，实时转换模型不中断上下文&lt;/li>
&lt;li>会话管理：针对项目维护多会话、多上下文，代码与工具环境无缝串联&lt;/li>
&lt;li>LSP 集成：利用语言服务器协议增强上下文感知，辅助智能代码生成与提示&lt;/li>
&lt;li>拓展性强：支持 MCP（http、stdio、sse）协议扩展能力，灵活集成自定义功能&lt;/li>
&lt;li>跨平台兼容：macOS、Linux、Windows（PowerShell/WSL）、FreeBSD/OpenBSD/NetBSD 全面支持&lt;/li>
&lt;li>便捷安装：支持 Homebrew、npm、Arch、Nix、Go 等多种安装方式，Debian/RPM 包及多平台二进制均可用&lt;/li>
&lt;li>配置灵活：JSON 格式配置支持本地和全局，权限白名单及自定义 Provider 深度定制&lt;/li>
&lt;li>日志追踪：内置日志管理，支持实时查看和调试，助力问题快速定位&lt;/li>
&lt;/ul>
&lt;h3 id="一个深度研究-agent">一个深度研究 Agent
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-09-24.png"
width="824"
height="177"
loading="lazy"
class="gallery-image"
data-flex-grow="465"
data-flex-basis="1117px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/langchain-ai/open_deep_research" target="_blank" rel="noopener"
>Open Deep Research&lt;/a>，来自 LangChain 团队完全开源的一个深度研究 Agent。&lt;/p>
&lt;p>支持多种模型提供商和搜索工具，能够自行执行复杂的研究任务，从信息收集到分析整理自动化处理。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持 OpenAI、Anthropic、Google 等多种模型提供商&lt;/li>
&lt;li>集成 Tavily、原生网页搜索等多种搜索工具&lt;/li>
&lt;li>可配置的并发研究单元，提升研究效率&lt;/li>
&lt;li>支持 MCP 服务器扩展，增强研究能力&lt;/li>
&lt;li>提供 LangGraph Studio 可视化界面&lt;/li>
&lt;li>内置评估系统，确保研究质量&lt;/li>
&lt;/ul>
&lt;h3 id="在线配色生成器">在线配色生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-09-51.png"
width="1231"
height="719"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://kigen.design/color" target="_blank" rel="noopener"
>Color Generator&lt;/a>，这个配色生成器很适合我这种强迫症，输入一个颜色，自动帮你生成一批好看的颜色，界面真的很清新啊。可以直接复制网站给出的 CSS 代码。 ​​​&lt;/p>
&lt;h3 id="背景纹理生成器">背景纹理生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-10-24.png"
width="1097"
height="730"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://projects.verou.me/css3patterns/" target="_blank" rel="noopener"
>CSS3 Patterns Gallery&lt;/a>，这个网站有好多纯CSS3实现的各种背景纹理，包括程序员最爱的格子衫纹理。&lt;/p>
&lt;h3 id="通义万相-wan22-系列模型">通义万相 Wan2.2 系列模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-10-53.png"
width="661"
height="373"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Wan-Video/Wan2.2" target="_blank" rel="noopener"
>Wan2.2&lt;/a>，通义万相 2.2（Wan 2.2）是阿里云推出的新一代多模态生成模型。该模型采用创新的 MoE（Mixture of Experts）架构，由高噪专家模型和低噪专家模型组成，能够根据去噪时间步进行专家模型划分，从而生成更高质量的视频内容。&lt;/p>
&lt;p>Wan 2.2 具备三大核心特性：&lt;/p>
&lt;ul>
&lt;li>影视级美学控制，深度融合专业电影工业的美学标准，支持光影、色彩、构图等多维度视觉控制；&lt;/li>
&lt;li>大规模复杂运动，轻松还原各类复杂运动并强化运动的流畅度和可控性；&lt;/li>
&lt;li>精准语义遵循，在复杂场景和多对象生成方面表现卓越，更好还原用户的创意意图。&lt;/li>
&lt;/ul>
&lt;p>模型支持文生视频、图生视频等多种生成模式，适用于内容创作、艺术创作、教育培训等多种应用场景。&lt;/p>
&lt;p>目前 Wan2.2 支持在通义官网、魔搭社区、HuggingFace 和 GitHub 下载，也提供阿里云的 API 服务。&lt;/p>
&lt;h3 id="基于-python-的文件服务器工具">基于 Python 的文件服务器工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-11-38.png"
width="776"
height="260"
loading="lazy"
class="gallery-image"
data-flex-grow="298"
data-flex-basis="716px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/9001/copyparty" target="_blank" rel="noopener"
>copyparty&lt;/a>，只需 Python 即可运行，支持断点续传下载上传，兼容几乎所有网页浏览器，还能同时提供 HTTP、WebDAV、FTP、TFTP、SMB 多种协议访问。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持 HTTP/WebDAV/FTP/TFTP/SMB 多协议文件传输&lt;/li>
&lt;li>断点续传上传下载，网络中断也不怕&lt;/li>
&lt;li>内置音频播放器，支持几乎所有音频格式&lt;/li>
&lt;li>文件搜索和媒体标签索引功能&lt;/li>
&lt;li>用户权限管理，支持只读、只写等细粒度控制&lt;/li>
&lt;li>跨平台运行，支持 Windows、Linux、macOS、Android&lt;/li>
&lt;/ul>
&lt;p>提供一键 Python 脚本部署，也有 Windows exe 版本和 Docker 镜像。&lt;/p>
&lt;h3 id="100-行代码的智能体框架">100 行代码的智能体框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-11-52.png"
width="822"
height="647"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="304px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SWE-agent/mini-swe-agent" target="_blank" rel="noopener"
>mini-swe-agent&lt;/a>，SWE-bench 推出的智能体框架，只有 100 行 python（环境、模型、脚本总共 +100 行），解决了 SWE-bench 验证基准测试（使用 Claude Sonnet 4）中 65% 的 GitHub 问题。&lt;/p>
&lt;p>带有 UI，除了本地部署之外，还可以使用 docker 容器方式构建。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 141 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/</link><pubDate>Sun, 27 Jul 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-44-15.png" alt="Featured image of post 机器文摘 第 141 期" />&lt;h1 id="机器文摘-第-141-期">机器文摘 第 141 期
&lt;/h1>&lt;h3 id="大语言模型的演进">大语言模型的演进
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-44-15.png"
width="707"
height="528"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="321px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://goyalpramod.github.io/blogs/evolution_of_LLMs/" target="_blank" rel="noopener"
>一篇长文，介绍大语言模型的演进&lt;/a>，（主要是自2017年 Transformer 架构被引入以来的演进）。&lt;/p>
&lt;p>这篇文章主要探讨了自2017年以来语言模型的演变历程，重点介绍了Transformer架构的引入以及随后在自然语言处理领域引发的数学基础、架构创新和训练突破。文章详细分析了Transformer、RLHF（基于人类偏好的强化学习）、PPO（近端策略优化）和MoE（混合专家模型）等关键技术和理论，并探讨了BERT、GPT-1等模型的创新之处。&lt;/p>
&lt;h3 id="llm-架构对比">LLM 架构对比
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-44-53.png"
width="1058"
height="741"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://sebastianraschka.com/blog/2025/the-big-llm-architecture-comparison.html" target="_blank" rel="noopener"
>大型 LLM 架构对比&lt;/a>，文中列举了 llama-3.2, Qwen3-4B, SmolLM3-3B, DeepSeek-V3, Qwen3-235B-A22B, Kimi-K2 的架构并详细探讨了他们的区别和优势。&lt;/p>
&lt;h3 id="字节跳动开源了扣子平台">字节跳动开源了“扣子”平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-45-27.png"
width="947"
height="375"
loading="lazy"
class="gallery-image"
data-flex-grow="252"
data-flex-basis="606px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/coze-dev/coze-studio" target="_blank" rel="noopener"
>Coze Studio&lt;/a>，是一站式 AI Agent 开发工具。提供各类最新大模型和工具、多种开发模式和框架，从开发到部署，为你提供最便捷的 AI Agent 开发环境。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>提供 AI Agent 开发所需的全部核心技术：Prompt、RAG、Plugin、Workflow，使得开发者可以聚焦创造 AI 核心价值。&lt;/li>
&lt;li>开箱即用，用最低的成本开发最专业的 AI Agent：Coze Studio 为开发者提供了健全的应用模板和编排框架，你可以基于它们快速构建各种 AI Agent ，将创意变为现实。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>功能模块&lt;/strong>&lt;/th>
&lt;th>&lt;strong>功能点&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>模型服务&lt;/td>
&lt;td>管理模型列表，可接入OpenAI、火山方舟 等在线或离线模型服务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>搭建智能体&lt;/td>
&lt;td>* 编排、发布、管理智能体 &lt;br> * 支持配置工作流、知识库等资源&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>搭建应用&lt;/td>
&lt;td>* 创建、发布应用 &lt;br> * 通过工作流搭建业务逻辑&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>搭建工作流&lt;/td>
&lt;td>创建、修改、发布、删除工作流&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>开发资源&lt;/td>
&lt;td>支持创建并管理以下资源： &lt;br> * 插件 &lt;br> * 知识库 &lt;br> * 数据库 &lt;br> * 提示词&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>API 与 SDK&lt;/td>
&lt;td>* 创建会话、发起对话等 OpenAPI &lt;br> * 通过 Chat SDK 将智能体或应用集成到自己的应用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>感觉会成为 dify 的强有力竞争对手。&lt;/p>
&lt;h3 id="浏览器阅读markdown的插件">浏览器阅读Markdown的插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-45-53.png"
width="754"
height="716"
loading="lazy"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://md-reader.github.io/" target="_blank" rel="noopener"
>Markdown Reader&lt;/a>，可以用这个扩展在浏览器里高效阅读Markdown 文件（支持本地文件需要开启权限）。 ​​​&lt;/p>
&lt;h3 id="帮你监控咸鱼的工具">帮你监控咸鱼的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-46-22.png"
width="831"
height="716"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="278px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dingyufei615/ai-goofish-monitor" target="_blank" rel="noopener"
>ai-goofish-monitor&lt;/a>，一个基于 Playwright 和AI过滤分析的闲鱼多任务实时监控与智能分析工具，配备了功能完善的 Web 管理界面。&lt;/p>
&lt;p>在闲鱼上越来越难淘到个人闲置的好东西了，刷到的大多是商家货。这个工具能实时监控和分析闲鱼商品。你只需用文字描述想买什么，它就能自动设置监控任务，帮你精准找到匹配的商品。&lt;/p>
&lt;h3 id="用类-markdown-语法快速生成多种复杂图表">用类 Markdown 语法快速生成多种复杂图表
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-47-28.png"
width="530"
height="720"
loading="lazy"
class="gallery-image"
data-flex-grow="73"
data-flex-basis="176px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mermaid.js.org/" target="_blank" rel="noopener"
>Mermaid&lt;/a>，用类 Markdown 语法快速生成多种复杂图表的开源 JavaScript 工具，为文档与开发流程无缝衔接提供高效方案。&lt;/p>
&lt;ul>
&lt;li>支持流程图、时序图、甘特图、类图、状态图、饼图、Git 图谱、用户旅程图、C4 架构图等多种图形表达形式。&lt;/li>
&lt;li>以文本驱动图形，降低绘图门槛，非程序员也能通过 Mermaid Live Editor 轻松创建和编辑。&lt;/li>
&lt;li>消除文档滞后的痛点，实现图文同步更新，提升团队沟通和知识管理效率。&lt;/li>
&lt;li>可集成到 GitHub 及主流应用中，支持 CDN 引入，适合嵌入生产脚本和自动化流程。&lt;/li>
&lt;li>强调视觉回归测试，保障图形变更的可控性和稳定性，提升维护质量。&lt;/li>
&lt;li>社区活跃，已有 8 万+星，持续迭代与贡献，MIT 许可证，开放共建。&lt;/li>
&lt;li>针对安全风险设计沙箱渲染模式，兼顾交互功能与防范恶意脚本。&lt;/li>
&lt;/ul>
&lt;p>通过“代码即文档”的理念，Mermaid 将图形表达纳入代码管理体系，促进文档的实时演进，打破传统图形工具的隔阂，实现开发与非开发人员的高效协作。长期看，这种基于文本的图形描述是构建可维护、透明且自动化文档体系的核心路径。&lt;/p>
&lt;h3 id="从零开始学习-rlhf人类反馈强化学习教程">从零开始学习 RLHF（人类反馈强化学习）教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-48-30.png"
width="852"
height="457"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="447px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ash80/RLHF_in_notebooks" target="_blank" rel="noopener"
>RLHF_in_notebooks&lt;/a>，仅用 3 个完整 Notebook 笔记带我们一步步实现 RLHF 全流程。&lt;/p>
&lt;p>基于 GPT-2 模型和电影评论情感数据集，演示了从监督微调到奖励建模再到 PPO 强化学习的完整过程。&lt;/p>
&lt;p>主要内容：&lt;/p>
&lt;ul>
&lt;li>监督微调（SFT）：在情感数据集上微调 GPT-2 模型&lt;/li>
&lt;li>奖励模型训练：训练能够识别正面情感的奖励模型&lt;/li>
&lt;li>PPO 强化学习：使用策略优化让模型生成更积极的内容&lt;/li>
&lt;li>完整代码实现：三个独立的 Notebook 详细展示每个步骤&lt;/li>
&lt;li>实际案例演示：将 GPT-2 训练成只生成正面情感句子的模型&lt;/li>
&lt;li>配套视频教程：YouTube 上有对应的详细讲解视频&lt;/li>
&lt;/ul>
&lt;p>不仅如此，还配套了详细的视频教程，感兴趣的同学，按顺序运行三个 Notebook 即可完成学习。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 140 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/</link><pubDate>Mon, 21 Jul 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-29-42.png" alt="Featured image of post 机器文摘 第 140 期" />&lt;h1 id="机器文摘-第-140-期">机器文摘 第 140 期
&lt;/h1>&lt;h3 id="x64-汇编编程入门教程">x64 汇编编程入门教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-27-15.png"
width="690"
height="481"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="344px"
>&lt;/p>
&lt;p>如果你曾好奇C代码最终如何与 CPU 对话，或者想深入理解程序的性能瓶颈，这篇从零开始的 x64 汇编教程就是为你准备的。它没有陈旧的理论，只有直达核心的现代实战。&lt;/p>
&lt;p>来自 gpfault.net 的&lt;a class="link" href="https://gpfault.net/posts/asm-tut-0.txt.html" target="_blank" rel="noopener"
>这篇教程&lt;/a>是“现代 x64 汇编”系列的第一部分。作者没有一上来就抛出指令集，而是先回答了一个最重
要的问题：在2024年，我们为什么还要学习汇编？&lt;/p>
&lt;p>答案非常清晰：&lt;/p>
&lt;ol>
&lt;li>理解底层：真正明白我们的高级语言代码是如何在硬件上执行的。&lt;/li>
&lt;li>性能优化：识别并解决编译器无法优化的性能瓶颈。&lt;/li>
&lt;li>安全研究：进行逆向工程和漏洞分析。&lt;/li>
&lt;li>调试：在没有源码的情况下，深入调试复杂问题。&lt;/li>
&lt;/ol>
&lt;p>这篇文章最大的特点是它的纯粹性。它将带你使用 NASM 汇编器和 ld
链接器，在不依赖任何 C 标准库（libc）的情况下，编写一个打印 &amp;ldquo;Hello, world!&amp;rdquo; 的程序。&lt;/p>
&lt;p>你将直接通过系统调用
(syscall) 与Linux内核交互，亲手完成 write（写入屏幕）和 exit（退出程序）这两个核心操作。&lt;/p>
&lt;p>整个过程就像是剥开了操作系统的层层外壳，让你直接触摸到程序执行的最基本脉络。&lt;/p>
&lt;h3 id="被卡马克推荐的十大编程建议">被卡马克推荐的十大编程建议
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-27-45.png"
width="690"
height="620"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://x.com/jsuarez5341" target="_blank" rel="noopener"
>@Joseph Suárez&lt;/a> 在 X 上发表了关于编程的十条建议，如果希望成为编程高手，可以参考一下。&lt;/p>
&lt;p>&lt;em>该推还被游戏编程大神约翰卡马克转推并赞同了&lt;/em>。&lt;/p>
&lt;p>十条建议翻译为中文如下：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>通过实践学习。从耗时几小时的项目开始，逐步挑战需要数天完成的任务。简单的游戏是绝佳选择，因为你能快速获得大多数问题的可视化反馈。我推荐使用 raylib 进行渲染——它轻量级、支持几乎所有语言，且该库本身就是优秀软件设计的典范。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从 Python 开始。很多资深开发者讨厌 Python，我有时也讨厌它。但无论如何你都应该从 Python 入手，因为它能让你比几乎任何其他语言更快起步。你遇到的大多数 AI 项目至少表层代码都是用 Python 写的。不过别在 Python 上停留太久——语言的设计会引导你以特定方式思考问题。避免使用复杂的外部包、继承、装饰器，以及任何会让你偏离学习用赋值、条件、迭代和函数来表达逻辑的东西。写几个基础游戏、应用程序或工具后就转向其他语言。包管理推荐使用 uv。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尽早学习 C 语言。C 是一门非常适合编写高性能软件的极简语言。我之所以不建议初学者先学 C，唯一原因是它要求你同时理解计算机和操作系统的工作原理，这对新手来说信息量过大。你需要掌握的核心概念包括：数据类型、类型转换、结构体、（单遍）编译、链接、内存分配、栈与堆的区别、指针。现阶段请避开 C++，它只是在 C 语言基础上堆砌了大量你暂时用不着的复杂功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>警惕过度抽象。始终以最简单的方式解决眼前问题为目标。除非能百分百确定未来会出现某种情况，否则不要为了追求通用性而增加复杂度。即便真有这种需求，通常也等真正遇到时再解决更明智。C 语言在这方面表现优异，因为它移除了继承体系和臃肿第三方库这类诱人但事与愿违的工具。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 Git。这一点基础到我差点忘了提。默认在 GitHub 上创建新项目并频繁提交。这是避免工作丢失的最佳方式，还能为那些&amp;quot;明明之前能用&amp;quot;的代码提供版本回溯。~所有开源项目都通过 GitHub 运作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>善用调试器。调试器能让你逐行执行代码并检查局部变量值，比到处塞 print 语句高效灵活得多，还能快速跳转检查。Python 用 pdb，C 语言用 gdb 就够。写 C 语言务必搭配地址消毒器(Address Sanitizer)，它能提供可读的错误提示——重要到我建议没有它就别碰 C 语言。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>掌握基础 Unix 工具。尽快熟悉命令行操作，不必追求花哨。像 ls、pwd、cat、head、mv、cp、cd、mkdir、top 等基础命令就能满足 90%的日常需求，最常用的工具不超过 10 个。条件允许尽量用原生 Linux 系统，MacOS 尚可，Windows 则不建议——若不想双系统就装 WSL。推荐安装基础版 Ubuntu，别过度折腾系统定制。熟悉发行版的包管理工具（很可能是 apt），别用 snap。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>警惕技术陷阱。程序员总爱发明些让事情更糟的&amp;quot;聪明&amp;quot;办法来浪费你时间。新手尤其要避开：面向对象和函数式编程（都是教条）、测试驱动开发（少量测试无妨）、频繁更换语言和发行版、行业&amp;quot;最佳实践&amp;quot;（FAANG 里蹩脚工程师多的是）、Python 类型提示系统、C 语言的 make/cmake、Hydra 这类复杂配置解析器、GitHub 子模块和花哨的 CI、React 等现代前端框架（学基础 HTML+CSS 就够了）、系统美化、X 上最新的编程潮流，以及我在开发直播里吐槽过的一切。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不要为了学习而刷 LeetCode。虽然这对求职面试可能是种必要的妥协，但用巧妙算法解决刁钻问题并不能代表编程的全貌。你当然应该学习基础数据结构和算法，但相比构建更多项目，掌握十种动态编程变体在面试之外的作用有限。我已多年未参加编程面试，但我确信 18 岁的我会比 28 岁的我表现更好——而 28 岁的我在其他所有方面都更出色。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不必过度纠结 IDE 选择。这真的没那么重要。我只用带两个插件的 NeoVim，它轻量且不碍事。是的，我用过无数 IDE；不，这根本不重要。VSCode 就不错，但请坚持通过终端运行代码而非依赖项目配置和按钮。这会打破&amp;quot;IDE 是神奇必需品&amp;quot;的幻觉。别用 AI 优先的编辑器。当你掌握了基础后，像 Copilot 或 SuperMaven 这类代码补全工具无妨，但请仅用于节省打字和文档查阅时间——而非替代思考。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="bilibili-发布的文本生成语音大模型">Bilibili 发布的文本生成语音大模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-29-42.png"
width="973"
height="384"
loading="lazy"
class="gallery-image"
data-flex-grow="253"
data-flex-basis="608px"
>
&lt;a class="link" href="https://index-tts.github.io/index-tts2.github.io/" target="_blank" rel="noopener"
>IndexTTS2&lt;/a>，Bilibili Index 语音团队开发的文本到语音的大模型，效果惊人，他们用了《让子弹飞》、《甄嬛传》来示意这个模型的语音生成能力，不仅给张麻子、黄四郎、皇后、甄嬛加上了英配，还能精确控制情绪和时长（非常适合用来进行影视配音）。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>零样本语音克隆&lt;/li>
&lt;li>支持情绪分离&lt;/li>
&lt;li>指定 token 数量，来控制生成的语音长度&lt;/li>
&lt;li>基于 Qwen3 微调，支持手动编辑情绪&lt;/li>
&lt;/ul>
&lt;h3 id="windows-上-ffmpeg-的专业交互界面">Windows 上 FFmpeg 的专业交互界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-30-28.png"
width="1286"
height="693"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Lake1059/FFmpegFreeUI" target="_blank" rel="noopener"
>FFmpegFreeUI&lt;/a>，是 ffmpeg 在 Windows 上的轻度专业交互外壳，收录大量参数，界面美观，交互友好。此项目面向国内使用环境，让普通人也能够轻松压制视频和转换格式。&lt;/p>
&lt;p>对于不习惯使用命令行参数（主要是也不好记，我每次都是用大模型帮我生成命令）来操作 ffmpeg 进行音视频格式处理的人来说真是福音。&lt;/p>
&lt;p>亮点：&lt;/p>
&lt;ol>
&lt;li>永久免费、干净无广告；&lt;/li>
&lt;li>支持实时计算剩余时间和预估最终大小；&lt;/li>
&lt;li>开发插件扩展功能，VB 和 C# 都能写；&lt;/li>
&lt;/ol>
&lt;h3 id="blender-studio-官方发布了一个游戏">Blender Studio 官方发布了一个游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-30-45.png"
width="690"
height="599"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blenderstudio.itch.io/dogwalk" target="_blank" rel="noopener"
>Dog walk&lt;/a>。是一个简短的休闲互动故事。玩家将扮演一只可爱的大狗穿越冬季树林，帮助一个小孩子用隐藏在环境中的五颜六色的物品装饰雪人。&lt;/p>
&lt;p>在这个微型开放世界中，您可以尽情漫步露营地、森林小径、田园诗般的小溪和结冰的池塘。&lt;/p>
&lt;p>引导或拖动您拖着的小孩主人。互相帮助，成为威胁或做一个好孩子。&lt;/p>
&lt;p>该项目免费向所有人开放原始文档和代码，用于测试和改进 Blender 和 Godot 游戏引擎。&lt;/p>
&lt;h3 id="训练-agent-智能体能力的专用框架">训练 Agent 智能体能力的专用框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-31-17.png"
width="842"
height="743"
loading="lazy"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="271px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/OpenPipe/ART" target="_blank" rel="noopener"
>ART （Agent Reinforcement Trainer）&lt;/a>，使用这个框架可以将 GRPO 【群体相对策略优化(GRPO，Group Relative Policy Optimization) 是一种强化学习 (RL) 算法，专门用于增强大型语言模型(LLM) 中的推理能力】集成到你的 python 应用中，比如使用这个训练 Qwen2.5-7B 搜索邮件，或者玩各种游戏。这里使用小模型是因为小模型更适合用于这些零散任务的驱动模型。&lt;/p>
&lt;p>使用 GRPO 训练多步骤代理完成实际任务。相当于为智能体提供在职培训。支持 Qwen2.5、Qwen3、Llama、Kimi 等 LLM；&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 139 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/</link><pubDate>Sun, 13 Jul 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-49-08.png" alt="Featured image of post 机器文摘 第 139 期" />&lt;h1 id="机器文摘-第-139-期">机器文摘 第 139 期
&lt;/h1>&lt;h3 id="构建可靠-llm-应用程序的原则">构建可靠 LLM 应用程序的原则
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-44-09.png"
width="811"
height="629"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="309px"
>
&lt;a class="link" href="https://github.com/humanlayer/12-factor-agents" target="_blank" rel="noopener"
>12-factor-agents&lt;/a>，我们可以使用哪些原则来构建真正足够好并可以交到生产客户手中的 LLM 软件？&lt;/p>
&lt;p>项目的作者对于智能体的构建进行了总结，总结出了 12 种模式和设计原则。&lt;/p>
&lt;p>主要内容：&lt;/p>
&lt;ul>
&lt;li>How We Got Here: A Brief History of Software 我们如何走到今天：软件简史&lt;/li>
&lt;li>Factor 1: Natural Language to Tool Calls 因素 1：自然语言到工具调用&lt;/li>
&lt;li>Factor 2: Own your prompts 因素 2：拥有自己的提示&lt;/li>
&lt;li>Factor 3: Own your context window 因素 3：拥有自己的上下文窗口&lt;/li>
&lt;li>Factor 4: Tools are just structured outputs 因素 4：工具只是结构化的输出&lt;/li>
&lt;li>Factor 5: Unify execution state and business state 因素 5：统一执行状态和业务状态&lt;/li>
&lt;li>Factor 6: Launch/Pause/Resume with simple APIs 因素 6：使用简单的 API 启动/暂停/恢复&lt;/li>
&lt;li>Factor 7: Contact humans with tool calls 因素 7：通过工具调用与人类联系&lt;/li>
&lt;li>Factor 8: Own your control flow 因素 8：拥有自己的控制流&lt;/li>
&lt;li>Factor 9: Compact Errors into Context Window 因素 9：将错误压缩到上下文窗口中&lt;/li>
&lt;li>Factor 10: Small, Focused Agents 因素 10：小型、专注的代理商&lt;/li>
&lt;li>Factor 11: Trigger from anywhere, meet users where they are 因素 11：随时随地触发，随时随地与用户见面&lt;/li>
&lt;li>Factor 12: Make your agent a stateless reducer 因素 12：让你的代理成为无状态的 Reducer&lt;/li>
&lt;/ul>
&lt;h3 id="函数调用为什么被叫做call-functions">“函数调用”为什么被叫做“call functions”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-45-12.png"
width="743"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="377px"
>&lt;/p>
&lt;p>我们每天都在写 foo()，但有没有想过——为什么这叫‘调用（call）’一个函数，而不是‘启动’、‘执行’或者‘使唤’？&lt;/p>
&lt;p>这篇趣味考据&lt;a class="link" href="https://quuxplusone.github.io/blog/2025/04/04/etymology-of-call/" target="_blank" rel="noopener"
>《Why do we “call” functions?》&lt;/a>给出了一个出人意料的答案：把函数“call”出来，其实源自图书馆的“call number（索书号）”！&lt;/p>
&lt;p>作者从 StackExchange 上的一次闲聊出发，一路追到 1876 年杜威十进分类法、1947 年冯·诺依曼架构的 EDVAC 报告、1958 年 Fortran II 手册，再到 1960 年代的 Algol 规范，用大量一手文献串起了“call”这个词从“到图书馆喊一嗓子取书”到“在代码里喊一嗓子取函数”的完整演化史。&lt;/p>
&lt;h3 id="开源证件照处理程序">开源证件照处理程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-46-12.png"
width="610"
height="742"
loading="lazy"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="197px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/aoguai/LiYing" target="_blank" rel="noopener"
>LiYing&lt;/a>，是一套适用于自动化 完成一般照相馆后期证件照处理流程的照片自动处理的程序。&lt;/p>
&lt;p>可以完成人体、人脸自动识别，角度自动纠正，自动更换任意背景色，任意尺寸证件照自动裁切，并自动排版。&lt;/p>
&lt;p>完全离线运行。所有图像处理操作都在本地运行。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>人脸和人体自动识别定位，精准抠图换背景&lt;/li>
&lt;li>照片角度自动纠正，解决拍摄角度问题&lt;/li>
&lt;li>支持任意背景色替换，一键生成不同底色证件照&lt;/li>
&lt;li>多种证件照尺寸自动裁切，涵盖1寸到6寸各种规格&lt;/li>
&lt;li>智能排版功能，自动生成照片表格便于打印&lt;/li>
&lt;li>完全离线运行，保护隐私且无需网络连接&lt;/li>
&lt;/ul>
&lt;p>提供 Windows 整合包直接使用，也可通过源码安装运行。&lt;/p>
&lt;h3 id="开源视频剪辑软件">开源视频剪辑软件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-47-39.png"
width="777"
height="660"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="282px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/OpenCut-app/OpenCut" target="_blank" rel="noopener"
>OpenCut&lt;/a>，适用于 Web、桌面和移动设备的免费开源视频编辑器。&lt;/p>
&lt;p>据说是有人嫌弃收费版的 CapCut 卖的太贵，发起了这个开源项目，完全免费，功能对标 CapCut。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>Timeline-based editing 基于时间轴的编辑&lt;/li>
&lt;li>Multi-track support 多轨支持&lt;/li>
&lt;li>Real-time preview 实时预览&lt;/li>
&lt;li>No watermarks or subscriptions 无水印或订阅&lt;/li>
&lt;li>Analytics provided by Databuddy, 100% Anonymized &amp;amp; Non-invasive. 由 Databuddy 提供的分析，100%匿名和非侵入性。&lt;/li>
&lt;/ul>
&lt;h3 id="大语言模型高质量数据集汇总20255-更新">大语言模型高质量数据集汇总（2025.5 更新）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-48-07.png"
width="811"
height="817"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ninehills/blog/issues/129" target="_blank" rel="noopener"
>大语言模型高质量数据集汇总&lt;/a>，本贴收藏整理了数十份用于训练和评估大模型的数据集。&lt;/p>
&lt;h3 id="微软官方的面向初学者的ai-agent开发课程">微软官方的面向初学者的AI Agent开发课程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-48-25.png"
width="823"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/ai-agents-for-beginners" target="_blank" rel="noopener"
>11 Lessons to Get Started Building AI Agents&lt;/a>，微软官方的面向初学者的AI Agent开发课程，包含 11 个课程，涵盖了构建 AI 代理的基本知识。&lt;/p>
&lt;p>既然是面向初学者的，就有一些“21 天精通 C++”的味道。不过也算适合入门。&lt;/p>
&lt;p>课程内容目前以英文为主，后续将翻译为多国语言支持。&lt;/p>
&lt;h3 id="hugging-face-开源的智能小机器人">Hugging Face 开源的智能小机器人
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-49-08.png"
width="811"
height="455"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;p>Hugging Face 的开源小机器人 &lt;a class="link" href="https://huggingface.co/blog/reachy-mini" target="_blank" rel="noopener"
>Reachy Mini&lt;/a> ，支持 Python 编程（即将支持 JavaScript 和 Scratch），价格 299 美元起（比起国内的开源机器人可是贵了不少，我之前试过的小智机器人开发板才不到一百块钱人民币）。&lt;/p>
&lt;p>Reachy Mini 高 28 厘米，宽16 厘米（睡眠模式下约 23 厘米高），重量 1.5 公斤。&lt;/p>
&lt;p>它以套件形式提供，有 Lite 版（299 美元，不带算力板，需接 Mac、Linux，稍后支持 Windows）和正式版（449 美元，配树莓派5、电池）两种版本。&lt;/p>
&lt;p>Reachy Mini 配备摄像头、麦克风和扬声器，头部有 6 个自由度，提供了 15 种以上的机器人行为，开箱即用。&lt;/p>
&lt;h3 id="开源-raw-图像编辑器">开源 RAW 图像编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-50-46.png"
width="690"
height="389"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/CyberTimon/RapidRAW" target="_blank" rel="noopener"
>RapidRAW&lt;/a>一款美观、无损且 GPU 加速的 RAW 图像编辑器，在构建时充分考虑了性能。&lt;/p>
&lt;p>RapidRAW 是 Adobe Lightroom 的现代、高性能替代品。它以适用于 Windows、macOS 和 Linux 的轻量级软件包（小于 30MB）提供功能丰富、美观的编辑体验。&lt;/p>
&lt;p>作者在 18 岁时开发了这个项目，作为一项个人挑战。目标是在 Google Gemini 的支持下，为自己的摄影工作流程创建一个高性能工具，同时加深其对 React 和 Rust 的理解。&lt;/p>
&lt;h3 id="一个网络监控工具">一个网络监控工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-50-55.png"
width="690"
height="442"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="374px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://sniffnet.net/" target="_blank" rel="noopener"
>Sniffnet&lt;/a>，你可以看到你机器上的流量情况，包括在和谁交换数据，并且可以深入检查网络中的情况。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 138 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/</link><pubDate>Sun, 06 Jul 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-55-49.png" alt="Featured image of post 机器文摘 第 138 期" />&lt;h1 id="机器文摘-第-138-期">机器文摘 第 138 期
&lt;/h1>&lt;h3 id="在虚拟机中启用-cpu-风扇">在虚拟机中启用 CPU 风扇
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-55-06.png"
width="641"
height="552"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="278px"
>&lt;/p>
&lt;p>一位开发者通过调用冷门系统API，成功&lt;a class="link" href="https://wbenny.github.io/2025/06/29/i-made-my-vm-think-it-has-a-cpu-fan.html" target="_blank" rel="noopener"
>欺骗虚拟机（VM）使其认为自己配备了物理CPU风扇&lt;/a>。这篇文章讲述了一个关于如何让虚拟机（VM）误以为它拥有一个CPU风扇的故事。作者通过技术手段修改了虚拟机的系统管理BIOS（SMBIOS）数据，使得虚拟机中的恶意软件检测不到它运行在虚拟环境中。&lt;/p>
&lt;p>一些恶意软件会通过检测某些硬件组件是否存在来判断是否运行在虚拟机中，因为虚拟环境通常不会完整地模拟所有硬件。其中一个常见的检测点是CPU风扇，恶意软件会通过检查WMI（Windows Management Instrumentation）中的Win32_Fan类来判断。&lt;/p>
&lt;p>作者希望通过让虚拟机“拥有”CPU风扇，来欺骗恶意软件，使其认为自己运行在物理机上，从而绕过恶意软件的虚拟机检测机制。&lt;/p>
&lt;p>SMBIOS是一个存储系统硬件信息的标准，计算机通过读取SMBIOS数据来识别硬件设备，包括CPU风扇。&lt;/p>
&lt;p>作者通过反汇编cimwin32.dll发现，Win32_Fan类通过读取SMBIOS数据（特别是类型27的条目）来获取风扇设备信息。&lt;/p>
&lt;p>作者使用dmidecode工具从物理主机上获取了CPU风扇的SMBIOS数据，并将其转换为字节格式。&lt;/p>
&lt;p>通过伪造SMBIOS数据，作者成功让虚拟机“拥有”了CPU风扇，从而欺骗了恶意软件的检测机制。这一技术不仅可以用于CPU风扇，还可以扩展到其他硬件组件和WMI类。&lt;/p>
&lt;h3 id="编写玩具软件是一种乐趣">编写玩具软件是一种乐趣
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-55-19.png"
width="690"
height="359"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.jsbarretto.com/post/software-is-joy" target="_blank" rel="noopener"
>software is joy&lt;/a>，John Barretto 在这篇短文中抛出了一个反工业化开发的清新主张：当现代软件日益被效率、规模和AI工具裹挟时，亲手编写“玩具软件”才是重新触摸编程本真快乐的密钥。&lt;/p>
&lt;p>玩具软件的本质：指那些无商业压力、纯粹为探索或乐趣而建的“无用之物”（如迷你解释器、自制渲染器）。它们剥离了工业化开发的功利性，让开发者回归“创造欲”的原点。&lt;/p>
&lt;p>费曼名言的实践：文中引用物理学家费曼的箴言——“我无法创造的东西，我就无法理解”（What I cannot create, I do not understand），直指玩具项目的终极意义：通过从零构建，开发者能穿透技术表象，抵达系统性理解的深层愉悦。&lt;/p>
&lt;p>对抗“工具化”的良药：当AI生成代码逐渐普及，被动使用工具易导致思维钝化。而玩具项目要求开发者主动设计、调试与迭代，这种全链条的创造性掌控，正是抵御“工具化”的精神锚点1。&lt;/p>
&lt;h3 id="以数据为中心的-ai-系统">以数据为中心的 AI 系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-55-49.png"
width="984"
height="432"
loading="lazy"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/OpenDCAI/DataFlow" target="_blank" rel="noopener"
>DataFlow&lt;/a>，是一个数据准备系统，旨在从噪声数据源（PDF、纯文本、低质量问答）中解析，生成，加工并评估高质量数据，以提升大语言模型（LLMs）在特定领域的表现，支持预训练、监督微调（SFT）、强化学习训练以及基于知识库的 RAG 系统。&lt;/p>
&lt;blockquote>
&lt;p>我们在医疗、金融和法律等多个垂类领域实证验证了 DataFlow 的有效性。&lt;/p>
&lt;/blockquote>
&lt;p>主要特性：&lt;/p>
&lt;ol>
&lt;li>支持多种数据源（PDF、文本、低质量问答）的解析与处理；&lt;/li>
&lt;li>提供多种预构建的高效数据处理管道；&lt;/li>
&lt;li>配备智能DataFlow-agent，可根据任务需求动态构建新管道。&lt;/li>
&lt;/ol>
&lt;h3 id="用纯-css-来做出毛玻璃效果">用纯 CSS 来做出毛玻璃效果
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-56-22.png"
width="592"
height="891"
loading="lazy"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="159px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://glass3d.dev" target="_blank" rel="noopener"
>glass3d&lt;/a>，在市面上有很多玻璃拟态生成器，但 glass3d 想把这种效果做得更进一步！这个项目是作者花费数月时间，不断尝试CSS属性层叠并与各种浏览器兼容性问题作斗争的结果。&lt;/p>
&lt;p>效果包括：&lt;/p>
&lt;ol>
&lt;li>可调节的模糊、亮度和饱和度（通过 backdrop-filter 实现）&lt;/li>
&lt;li>微妙的半透明纹理&lt;/li>
&lt;li>仿3D斜角效果（使用 box-shadow 实现，而非 outline）&lt;/li>
&lt;/ol>
&lt;p>玻璃拟态效果相当消耗（计算机）资源，因此最好只用作点缀，并避免在宽大的桌面元素上使用。它应该与最新版本的Chrome、Safari和Firefox（桌面端和移动端）兼容。&lt;/p>
&lt;h3 id="一键搬运视频工具">一键搬运视频工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-57-17.png"
width="1011"
height="366"
loading="lazy"
class="gallery-image"
data-flex-grow="276"
data-flex-basis="662px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Huanshere/VideoLingo" target="_blank" rel="noopener"
>VideoLingo&lt;/a>，这个工具使用 yt-dlp下载油管视频，然后进行AI字幕分割，AI翻译，自动增字幕，使用大模型进行配音。实现了一个全流程的搬运工具。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>🎥 使用 yt-dlp 从 Youtube 链接下载视频&lt;/li>
&lt;li>🎙️ 使用 WhisperX 进行单词级和低幻觉字幕识别&lt;/li>
&lt;li>📝 使用 NLP 和 AI 进行字幕分割&lt;/li>
&lt;li>📚 自定义 + AI 生成术语库，保证翻译连贯性&lt;/li>
&lt;li>🔄 三步直译、反思、意译，实现影视级翻译质量&lt;/li>
&lt;li>✅ 按照 Netflix 标准检查单行长度，绝无双行字幕&lt;/li>
&lt;li>🗣️ 支持 GPT-SoVITS、Azure、OpenAI 等多种配音方案&lt;/li>
&lt;li>🚀 一键启动，在 streamlit 中一键出片&lt;/li>
&lt;li>🌍 多语言支持就绪的 streamlit UI&lt;/li>
&lt;li>📝 详细记录每步操作日志，支持随时中断和恢复进度&lt;/li>
&lt;/ul>
&lt;p>与同类项目相比的优势：绝无多行字幕，最佳的翻译质量，无缝的配音体验&lt;/p>
&lt;h3 id="集成在-ide-中的开源-ai-设计-agent">集成在 IDE 中的开源 AI 设计 Agent
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-58-32.png"
width="542"
height="625"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="208px"
>
&lt;a class="link" href="https://github.com/superdesigndev/superdesign" target="_blank" rel="noopener"
>SuperDesign&lt;/a>，可直接在 IDE 中生成 UI 设计。&lt;/p>
&lt;p>通过自然语言提示就能生成完整的 UI 界面、可复用组件和线框图，并支持 Cursor、Windsurf、VS Code 等主流 AI 编辑器。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>产品界面生成：通过单个提示即可创建完整 UI 界面&lt;/li>
&lt;li>UI 组件创建：生成可直接使用的可复用组件&lt;/li>
&lt;li>线框图绘制：快速探索低保真度布局设计&lt;/li>
&lt;li>设计分支和迭代：轻松复制和改进现有设计&lt;/li>
&lt;li>提示词转代码：将设计提示直接复制到 AI IDE 中&lt;/li>
&lt;/ul>
&lt;p>通过 Cursor/VS Code 市场安装插件即可使用，其中设计文件本地存储在 .superdesign/ 目录中。&lt;/p>
&lt;h3 id="从零开始构建-ai-agent-的完整教程指南">从零开始构建 AI Agent 的完整教程指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-59-19.png"
width="735"
height="477"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/langchain-ai/agents-from-scratch" target="_blank" rel="noopener"
>Agents From Scratch&lt;/a>，LangChain 官方团队开放了一份从零开始构建 AI Agent 的完整教程指南。通过构建一个能管理邮件的智能助手，循序渐进地教授代理构建、评估、人机交互和记忆机制等核心技术，最终能连接真实的 Gmail API。&lt;/p>
&lt;p>主要内容：&lt;/p>
&lt;ul>
&lt;li>从基础智能代理到高级功能的完整学习路径&lt;/li>
&lt;li>实战构建邮件助手项目，包含邮件分类和自动回复&lt;/li>
&lt;li>智能代理评估方法，使用 LLM 作为评判器&lt;/li>
&lt;li>人机交互机制，支持用户审核关键操作&lt;/li>
&lt;li>记忆系统实现，让代理能学习和适应用户偏好&lt;/li>
&lt;li>Gmail API 集成和部署指南，可投入实际使用&lt;/li>
&lt;/ul>
&lt;p>适合想学习 AI Agent 开发的 AI 开发者，提供了完整的开发环境配置和测试方案。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 137 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/</link><pubDate>Sun, 29 Jun 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-08-59-21.png" alt="Featured image of post 机器文摘 第 137 期" />&lt;h1 id="机器文摘-第-137-期">机器文摘 第 137 期
&lt;/h1>&lt;h3 id="新手如何编写-linux-设备驱动程序">新手如何编写 Linux 设备驱动程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-08-57-40.png"
width="690"
height="511"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://crescentro.se/posts/writing-drivers/" target="_blank" rel="noopener"
>《编写基本的 Linux 设备驱动程序》&lt;/a>，展示了从零开始为特定 USB 设备开发 Linux 用户空间驱动的完整过程，包括前期的知识储备、工具使用、与内核驱动的交互、代码实现与调试等，对想了解 USB 设备驱动开发的读者有较大参考价值。&lt;/p>
&lt;p>作者因购买的 Nanoleaf Pegboard Desk Dock 仅支持 Windows 和 macOS，决定为其开发 Linux 驱动，尽管此前对 Linux 驱动和 USB 知识几乎一无所知。&lt;/p>
&lt;p>通过逆向工程官方驱动和联系厂商获取协议文档，作者选择用 Rust 语言结合 rusb 库编写用户空间驱动，而非内核驱动。&lt;/p>
&lt;p>在开发中，作者创建 udev 规则获取设备访问权限，通过 lsusb 查看设备信息，使用 rusb 库的相应方法实现设备的接口声明、数据发送与接收，并处理了内核驱动占用设备的问题。&lt;/p>
&lt;h3 id="用280个字符建模世界">用280个字符建模世界
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-08-57-53.png"
width="690"
height="508"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tympanus.net/codrops/2025/06/23/modeling-the-world-in-280-characters/" target="_blank" rel="noopener"
>《Modeling the World in 280 Characters》&lt;/a>，这篇文章主要讲述了作者作为一名图形程序员，热衷于编写 280 字符以内的 GLSL 代码片段（即 “代码高尔夫”），并通过分享自己的创作过程、动机和相关技巧，鼓励读者尝试这一有趣的编程方式。&lt;/p>
&lt;p>作者 &lt;a class="link" href="https://xordev.com/" target="_blank" rel="noopener"
>Xor&lt;/a> 是一名图形程序员，负责视频效果等的开发，他喜欢编写紧凑的着色器程序，认为这一过程充满乐趣、挑战，还能激发对图形编程的兴趣并推动学习发现。同时，他通过此结识了众多有趣的人。&lt;/p>
&lt;p>着色器运行在 GPU 上而非 CPU，碎片着色器（片段着色器）是 “推特着色器” 的类型，主要功能是根据输入的片段坐标输出颜色和不透明度。&lt;/p>
&lt;p>作者以写 “Milky” 星星着色器为例(可在&lt;a class="link" href="https://twigl.app/%e4%bd%93%e9%aa%8c" target="_blank" rel="noopener"
>twigl.app&lt;/a>)，介绍了创作思路，包括确定初始想法、进行中心化与缩放以适应不同分辨率和宽高比、循环创建环绕中心的点光源、添加发光效果、运用三角函数确定粒子位置、使用正弦波进行着色等步骤，还强调了代码高尔夫需要平衡多方面因素。&lt;/p>
&lt;h3 id="电子书principles-of-programming-languages编程语言原理">电子书《Principles of Programming Languages》编程语言原理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-08-58-35.png"
width="363"
height="475"
loading="lazy"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="183px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pl.cs.jhu.edu/pl/book/book.pdf" target="_blank" rel="noopener"
>《编程语言原理》&lt;/a>是由 Mike Grant、Zachary Palmer 和 Scott Smith 编写的教材，主要面向计算机科学专业的高年级本科生和研究生。内容涉及编程语言的核心概念、设计原则和实现技术，涵盖了从基础的函数式编程到高级的并发编程和类型系统等多个方面。&lt;/p>
&lt;blockquote>
&lt;p>“在这本书中，我们的目标是研究编程语言中的基本概念，而不是学习一系列特定的语言。语言易于学习，难的是理解它们背后的概念。我们依次研究的基本特性包括高阶函数、以记录和变量形式的数据结构、可变状态、异常、对象和类以及类型。我们还研究语言实现，包括语言解释器和语言编译器。在整本书中，我们为玩具语言编写小型解释器，而在第8章，我们编写了一个有原则的编译器。我们定义类型检查器来确定哪些程序是类型正确的，哪些不是。我们还通过操作语义和类型系统的概念，对解释器和类型检查器进行了更精确、数学化的理解。这两个概念历史上是从逻辑学家对编程的视角演变而来的。”&lt;/p>
&lt;/blockquote>
&lt;h3 id="图形化编程教育游戏机">图形化编程教育游戏机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-08-59-21.png"
width="824"
height="417"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="474px"
>
&lt;a class="link" href="https://github.com/ScratchArcade/arcade-lite" target="_blank" rel="noopener"
>Scratch Arcade&lt;/a>，这是一款针对少儿编程可编程游戏机硬件产品，解决当前Scratch教学模式单一，程序模版化，没有硬件关联，导致学生兴趣下滑。这款产品将完全弥补这些不足，提升教学内容的丰富性，程序的多样性和变化性，学生的成就感获得完全提升，并且完全不改变现在已有的教学内容，完全拿来即用。&lt;/p>
&lt;blockquote>
&lt;p>“目前市面上图形化编程教育游戏机大多是基于MakeCode Arcade设计，但MakeCode并不符合中国教育环境，大部分人只熟悉Scratch图形编程，于是诞生了这个基于Scratch设计的游戏机。”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>“本人从小就热爱玩游戏，并从事游戏开发工作十多年，自2018年开始接触到Scratch少儿编程，一开始只是完成由游戏开发者到少儿编程教育工作者转型。由于工作关系接触到了开源硬件micro:bit, 偶然发现micro:bit V2加上LCD屏幕可以使用MakeCode Arcade图形化工具来开发游戏。任何人真的可以通过图形化的工具给自己制作开发游戏还可以下载到游戏机里面去玩。接触这个软件后对我一个传统游戏开发者来说是非常震惊的，于是立马淘宝上买了一个回来玩，玩了一阵子后，职业的原因让我发现了一些用户体验问题，MakeCode Arcade编程所有的游戏场景，背景，元素全部在一个主程序里面，并且控制器都要依赖游戏机本身的硬件，这样导致游戏程序的编写难度偏大。别说是小朋友和新手用户，就算是我这个游戏开发多年的人来说都感觉有点绕，MakeCode Arcade还是有一种程序员在做游戏开发的影子在里面。相比而言Scratch游戏编程就显得简单很多，常用图标，声音元素可以直接使用自带的或者电脑上传，不需要全部靠编程去实现。不同角色可以独立模块化编程，无论是编程框架还是编程思想，用户都能很容易理解。我在实际教学应用中也验证了这点，教学难度Scratch远低于MakeCode Arcade。”&lt;/p>
&lt;/blockquote>
&lt;h3 id="开源智能客服-agent">开源智能客服 Agent
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-09-00-07.png"
width="826"
height="402"
loading="lazy"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="493px"
>
&lt;a class="link" href="https://github.com/openai/openai-cs-agents-demo" target="_blank" rel="noopener"
>openai-cs-agents-demo&lt;/a>，OpenAI 开源的一个客服 Agent 演示 Demo，值得一看，对我们构建一套 AI 客服系统有一定启发。&lt;/p>
&lt;p>基于 OpenAI Agents SDK 构建，一套航空公司智能客服系统，内置多个 Agent，系统能自动识别问题类型并路由给对应的专业 Agent。&lt;/p>
&lt;p>主要有如下 Agent 组成，实现完善的航空客服系统：&lt;/p>
&lt;ul>
&lt;li>智能分流 Agent，自动识别并路由不同类型客户请求&lt;/li>
&lt;li>专业座位预订 Agent，处理座位更改和互动座位图&lt;/li>
&lt;li>航班状态 Agent，提供实时航班信息查询&lt;/li>
&lt;li>FAQ Agent，回答常见问题和机型信息&lt;/li>
&lt;li>取消服务 Agent，处理退票和改签业务&lt;/li>
&lt;/ul>
&lt;p>同时提供了安全防护机制，防止越狱攻击和无关话题。&lt;/p>
&lt;h3 id="用-pytorch-重新实现-stable-diffusion-35-模型">用 PyTorch 重新实现 Stable Diffusion 3.5 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-09-00-31.png"
width="692"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="357px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/yousef-rafat/miniDiffusion" target="_blank" rel="noopener"
>miniDiffusion&lt;/a>，它以最少的代码（约2800行）从头开始复现Stable Diffusion 3.5，包括从VAE到DiT以及训练和数据集脚本。项目包含核心图像生成模块、文本编码器、字节对和单体分词器等组件，还提供训练和推理脚本。该项目用于教育和实验目的。&lt;/p>
&lt;h3 id="构建语音-ai-agent-的框架库">构建语音 AI Agent 的框架库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-09-01-37.png"
width="669"
height="398"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="403px"
>
&lt;a class="link" href="https://github.com/livekit/agents" target="_blank" rel="noopener"
>livekit/agents&lt;/a>，这个库包括了语音转文本、大型语言模型、文本转语音和实时 API，甚至还包括各种检测用户开始说话，停止说话，与手机电话集成等等各种实用的微型模型和脚本。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 136 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/</link><pubDate>Sun, 22 Jun 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-23-29.png" alt="Featured image of post 机器文摘 第 136 期" />&lt;h1 id="机器文摘-第-136-期">机器文摘 第 136 期
&lt;/h1>&lt;h3 id="用收据打印机管理任务">用收据打印机管理任务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-21-07.png"
width="690"
height="520"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://joshworth.com/dev/pixelspace/pixelspace_solarsystem.html" target="_blank" rel="noopener"
>《收据打印机治好了我的拖延症》&lt;/a>，这篇文章的作者分享了自己如何借助热敏式收据打印机克服拖延症并提升生产力的心路历程。&lt;/p>
&lt;p>作者曾因拖延症导致健康问题和事业失败，但在深入研究视频游戏的成瘾机制后，发现游戏通过即时反馈和重复的游戏循环让人们沉浸其中。&lt;/p>
&lt;p>他将这一原理应用于自己的日常生活，通过将任务分解成小步骤并使用便签纸记录任务完成情况，创造出即时反馈的机制。&lt;/p>
&lt;p>然而，手写便签的繁琐促使他采用热敏式收据打印机打印每日任务，实现快速、批量的任务管理。&lt;/p>
&lt;p>最终，作者通过开发自定义软件与打印机结合，构建了一套高效的生产力系统，显著提升了工作效率并摆脱了低效拖延的困扰。&lt;/p>
&lt;p>这种方法不仅对作者个人产生了积极影响，也提供了对科技如何辅助个人提升生产力的创新思考。&lt;/p>
&lt;h3 id="如果月球只有-1-个像素">如果月球只有 1 个像素
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-21-21.png"
width="690"
height="589"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://joshworth.com/dev/pixelspace/pixelspace_solarsystem.html" target="_blank" rel="noopener"
>一个乏味而精确的太阳系模型&lt;/a>，个项目以一种直观且颇具创意的方式，展示了太阳系行星之间的浩瀚距离。&lt;/p>
&lt;p>它通过一个互动式的太阳系模型，使我们仿佛在太空中旅行，体验从地球到其他行星的漫长旅程。&lt;/p>
&lt;p>太阳系中大部分区域实际上是空无一物的，这也是为什么大多数太阳系地图无法按比例绘制的原因。&lt;/p>
&lt;p>作者通过生动的比喻和数据，强调了行星之间距离的遥远以及太阳系中 “空无一物” 的本质。&lt;/p>
&lt;p>尽管我们可能无法完全理解这些巨大的空间尺度，但正是这些渺小的行星和恒星的存在，让我们在这广阔的宇宙中显得尤为珍贵。&lt;/p>
&lt;h3 id="开源-ai-agents-开发框架">开源 AI Agents 开发框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-22-40.png"
width="839"
height="727"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>
&lt;a class="link" href="https://github.com/strands-agents/tools" target="_blank" rel="noopener"
>Strands Agents Tools&lt;/a>，仅需几行代码就能构建出强大的智能助手。&lt;/p>
&lt;p>提供了 30 多种实用工具，涵盖文件操作、系统命令、HTTP 请求、Python 执行等核心功能，还支持集群智能协调多个代理解决复杂问题。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>文件读写编辑，支持语法高亮和智能修改&lt;/li>
&lt;li>Shell 命令执行和系统交互，确保安全性&lt;/li>
&lt;li>HTTP 客户端和 AWS 服务集成，轻松对接外部 API&lt;/li>
&lt;li>Python 代码执行，带状态持久化和安全确认&lt;/li>
&lt;li>批量工具并行调用，大幅提升处理效率&lt;/li>
&lt;li>内存管理和任务调度，提供完整的代理生命周期支持&lt;/li>
&lt;/ul>
&lt;h3 id="自动生成软著申请文档">自动生成软著申请文档
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-23-04.png"
width="845"
height="729"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="278px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.textimagecraft.com/zh/ruanzhu" target="_blank" rel="noopener"
>ruanzhu&lt;/a>，一键生成软著申请所需文档，可导出 MD 文件。&lt;/p>
&lt;h3 id="麻省理工免费电子书">麻省理工免费电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-23-29.png"
width="690"
height="774"
loading="lazy"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="213px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://visionbook.mit.edu/" target="_blank" rel="noopener"
>《计算机视觉基础》&lt;/a>，本书涵盖了计算机视觉领域的基础主题，并从图像处理和机器学习的角度进行讲解。我们希望培养读者的直觉，因此本书包含了许多可视化效果。本书的读者对象是即将进入该领域的本科生和研究生，但我​​们希望经验丰富的从业者也能从本书中受益。&lt;/p>
&lt;blockquote>
&lt;p>我们最初的目标是写一本涵盖该领域的厚书。可惜的是，计算机视觉领域实在太庞大，我们无法做到这一点。因此，我们决定写一本小书，每章不超过五页。这样的目标迫使我们真正专注于理解每个主题所需的重要概念。写一本短书非常合适，因为我们没有时间写长书，而且读者也没有时间阅读。可惜的是，我们也未能实现这个目标。&lt;/p>
&lt;/blockquote>
&lt;h3 id="生产级智能体">生产级智能体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-24-23.png"
width="847"
height="815"
loading="lazy"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="249px"
>
&lt;a class="link" href="https://github.com/NirDiamant/agents-towards-production" target="_blank" rel="noopener"
>Agents Towards Production&lt;/a>，是一个开源项目，帮助开发者将AI代理从概念转化为实际产品。&lt;/p>
&lt;p>提供了一系列的教程、工具和代码示例，涵盖从零到生产部署的全过程。这些教程包括编排、工具集成、可观测性、部署、安全等多个方面，旨在帮助开发者快速从概念验证转向生产环境。&lt;/p>
&lt;p>项目还提供了详细的文档和代码，方便开发者学习和应用。&lt;/p>
&lt;h3 id="李宏毅深度学习教程">李宏毅深度学习教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-24-56.png"
width="583"
height="540"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="259px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/datawhalechina/leedl-tutorial" target="_blank" rel="noopener"
>LeeDL-Tutorial（苹果书）&lt;/a>，李宏毅老师是台湾大学的教授，其《机器学习》（2021年春）是深度学习领域经典的中文视频之一。&lt;/p>
&lt;p>李老师幽默风趣的授课风格深受大家喜爱，让晦涩难懂的深度学习理论变得轻松易懂，他会通过很多动漫相关的有趣例子来讲解深度学习理论。&lt;/p>
&lt;p>李老师的课程内容很全面，覆盖了到深度学习必须掌握的常见理论，能让学生对于深度学习的绝大多数领域都有一定了解，从而可以进一步选择想要深入的方向进行学习，培养深度学习的直觉，对于想入门深度学习又想看中文讲解的同学是非常推荐的。&lt;/p>
&lt;p>本教程主要内容源于《机器学习》（2021年春），并在其基础上进行了一定的原创。&lt;/p>
&lt;p>比如，为了尽可能地降低阅读门槛，笔者对这门公开课的精华内容进行选取并优化，对所涉及的公式都给出详细的推导过程，对较难理解的知识点进行了重点讲解和强化，以方便读者较为轻松地入门。&lt;/p>
&lt;p>此外，为了丰富内容，笔者在教程中选取了《机器学习》（2017年春） 的部分内容，并补充了不少除这门公开课之外的深度学习相关知识。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 135 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/</link><pubDate>Sun, 15 Jun 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-17-06.png" alt="Featured image of post 机器文摘 第 135 期" />&lt;h1 id="机器文摘-第-135-期">机器文摘 第 135 期
&lt;/h1>&lt;h3 id="跨平台现代文件管理器">跨平台现代文件管理器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-13-45.png"
width="1782"
height="1090"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="392px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/gtsteffaniak/filebrowser" target="_blank" rel="noopener"
>FileBrowser Quantum&lt;/a>，最好的免费自托管基于 Web 的文件管理器。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>实时搜索和文件监控，边输入边显示结果&lt;/li>
&lt;li>支持多个文件源同时管理，告别单一目录限制&lt;/li>
&lt;li>Office 和视频文件在线预览，无需下载查看&lt;/li>
&lt;li>OIDC、密码+2FA 等多种登录方式保障安全&lt;/li>
&lt;li>开发者 API 支持，可集成到自己的项目中&lt;/li>
&lt;li>文件夹大小显示和高级过滤搜索功能&lt;/li>
&lt;/ul>
&lt;p>在项目发布页面提供了开箱即用安装包，支持 Windows、macOS 和 Linux 系统。&lt;/p>
&lt;h3 id="本周最新最火的-ocr-模型工具箱">本周最新最火的 OCR 模型工具箱
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-14-26.png"
width="1078"
height="623"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="415px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/allenai/olmocr" target="_blank" rel="noopener"
>olmOCR&lt;/a>，将 PDF 和其他基于图像的文档格式转换为干净、可读、纯文本格式的工具包。&lt;/p>
&lt;p>仅仅 3B 参数，性能超越 Gemini 2.5 Pro 等闭源模型，不仅能精确识别文字、公式和表格，还能保持原有的文档结构和布局关系。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>将基于 PDF、PNG 和 JPEG 的文档转换为干净的 Markdown&lt;/li>
&lt;li>支持方程式、表格、手写和复杂格式&lt;/li>
&lt;li>自动删除页眉和页脚&lt;/li>
&lt;li>转换为具有自然阅读顺序的文本，即使存在图形、多列布局和插图&lt;/li>
&lt;li>高效，每转换一百万页的成本不到 200 美元&lt;/li>
&lt;li>基于 7B 参数 VLM，因此需要 GPU&lt;/li>
&lt;/ul>
&lt;h3 id="人工智能工程中心">人工智能工程中心
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-15-19.png"
width="674"
height="655"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/patchy631/ai-engineering-hub" target="_blank" rel="noopener"
>AI Engineering Hub&lt;/a>，有关 LLM、RAG 和真实世界 AI 代理应用的深入教程。&lt;/p>
&lt;p>人工智能工程正在快速发展，保持领先地位需要深刻的理解和实践经验。在这里，您将了解：&lt;/p>
&lt;ul>
&lt;li>关于 LLM 和 RAG 的深入教程；&lt;/li>
&lt;li>现实世界的智能体应用程序；&lt;/li>
&lt;li>在您的项目中实施、调整和扩展的示例；&lt;/li>
&lt;/ul>
&lt;p>无论您是初学者、从业者还是研究人员，此 repo 都为各个技能水平的人员提供了资源，以便他们在 AI 工程中进行实验并取得成功。&lt;/p>
&lt;h3 id="线性代数开源书籍">线性代数开源书籍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-15-46.png"
width="510"
height="607"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="201px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Visualize-ML/Linear-Algebra-Made-Easy---Learn-with-Python-and-Visualization" target="_blank" rel="noopener"
>”数学不难“ 之 《线性代数不难》上下册&lt;/a>，一本让学习线性代数变得生动有趣的开源书籍，分为上下两册从基础到高阶内容，通过大量几何图形和动画展示向量、矩阵、特征值分解等数学概念。&lt;/p>
&lt;p>配有 Python 实战示例，可直接运行的 .ipynb 文件，通过动手实践对抽象理论知识有更深刻的理解。&lt;/p>
&lt;p>适合想系统掌握线性代数并应用到数据分析、机器学习领域的开发者学习。&lt;/p>
&lt;h3 id="一个-rag-教学项目">一个 RAG 教学项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-16-41.png"
width="790"
height="579"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://github.com/fareedkhan-dev/all-rag-techniques" target="_blank" rel="noopener"
>all-rag-techniques&lt;/a>，采用了一种清晰、亲身实践的方法来讲解检索增强生成（RAG），将各种先进技术分解为直截了当、易于理解的实现。这里的所有内容都是使用我们熟悉的 Python 库（如 openai、numpy、matplotlib 及其他几个库）构建的，而不是依赖 LangChain 或 FAISS 等框架。&lt;/p>
&lt;p>目标很简单：提供可读、可修改且具有教育意义的代码。通过专注于基础原理，本项目旨在揭开 RAG 的神秘面紗，让您更容易理解其真实的工作原理。&lt;/p>
&lt;h3 id="为大语言模型提供高效知识蒸馏的工具包">为大语言模型提供高效知识蒸馏的工具包
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-17-06.png"
width="807"
height="638"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/modelscope/easydistill" target="_blank" rel="noopener"
>EasyDistill&lt;/a>，帮助研究人员和开发者轻松实现大语言模型的知识蒸馏，将复杂的大模型性能迁移到小模型中。&lt;/p>
&lt;p>EasyDistill 提供了一个多功能且用户友好的平台来简化知识蒸馏过程，支持黑盒和白盒两种方法。它促进高效的模型训练，使较小的模型能够在不损失准确性的情况下模拟较大模型的性能。EasyDistill 拥有广泛的功能特性，包括数据合成、监督微调、排序优化和强化学习，所有这些都针对各种知识蒸馏场景进行了定制。该工具包设计用于适应系统1（快速、直觉）和系统2（缓慢、分析）认知模型，具有模块化和易于使用的特点，配备简单的命令行界面来指导用户。除了学术探索之外，EasyDistill 还锚定实际的工业解决方案，提供强大的蒸馏模型和开源数据集，同时展示与阿里云AI平台PAI的无缝集成。致力于连接理论进步与实际需求，EasyDistill 赋能NLP社区，使最先进的知识蒸馏策略对研究人员和行业从业者都变得可及。&lt;/p>
&lt;p>亮点：&lt;/p>
&lt;ol>
&lt;li>支持黑箱和白箱蒸馏方法；&lt;/li>
&lt;li>提供数据合成、监督微调、强化学习等多种功能；&lt;/li>
&lt;li>与阿里云PAI平台无缝集成&lt;/li>
&lt;/ol>
&lt;h3 id="离线开源语音识别工具包">离线开源语音识别工具包
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-18-13.png"
width="786"
height="487"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/alphacep/vosk-api" target="_blank" rel="noopener"
>vosk&lt;/a>，支持 20 多种语言识别，模型仅 50MB 却能提供连续大词汇量转录，还支持流式 API 和说话人识别等高级功能。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持英语、中文、俄语、德语、法语等 20+ 种语言&lt;/li>
&lt;li>完全离线运行，无需网络连接和 API 费用&lt;/li>
&lt;li>零延迟响应，提供流式 API 接口&lt;/li>
&lt;li>模型小巧（50MB）支持连续大词汇量转录&lt;/li>
&lt;li>支持说话人识别和可重新配置词汇表&lt;/li>
&lt;li>提供 Python、Java、C++、Node.js 等多语言绑定&lt;/li>
&lt;li>适用于聊天机器人、智能家居、字幕生成等场景&lt;/li>
&lt;/ul>
&lt;p>提供了详细安装说明和使用示例，可通过官网下载对应语言模型。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 134 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/</link><pubDate>Sun, 08 Jun 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-18-40.png" alt="Featured image of post 机器文摘 第 134 期" />&lt;h1 id="机器文摘-第-134-期">机器文摘 第 134 期
&lt;/h1>&lt;h3 id="教你从头从与非门开始构建一台计算机的游戏">教你从头（从与非门开始）构建一台计算机的游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-16-08.png"
width="937"
height="912"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.nandgame.com/" target="_blank" rel="noopener"
>欢迎来到 Nand 游戏世界&lt;/a>，你将从基础部件开始组装一台计算机。&lt;/p>
&lt;p>游戏包含一系列关卡。在每一关里，你需要按照要求构建一个功能符合规范的组件，该组件可在后续关卡中作为基础模块使用。&lt;/p>
&lt;p>本游戏无需预先掌握计算机架构或软件知识，数学方面也只需用到加减法即可。（不过需要一定耐心——部分关卡可能需要花些时间才能破解！）&lt;/p>
&lt;p>你的首要任务是制作一个与非门元件。&lt;/p>
&lt;h3 id="又一个强大的开源-tts-模型">又一个强大的开源 TTS 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-16-47.png"
width="749"
height="823"
loading="lazy"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="218px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/resemble-ai/chatterbox" target="_blank" rel="noopener"
>Chatterbox TTS&lt;/a>，基于 0.5B Llama 架构训练，不仅支持零样本语音克隆，还独创了情感夸张控制功能，能够让合成语音更生动有趣。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>零样本文本转语音，无需训练即可模仿任何声音&lt;/li>
&lt;li>情感夸张控制，可调节语音的戏剧化程度&lt;/li>
&lt;li>超稳定对齐推理，确保输出质量始终如一&lt;/li>
&lt;li>内置声音转换脚本，轻松实现声音克隆&lt;/li>
&lt;li>内置 PerTh 水印保护，防止恶意使用&lt;/li>
&lt;li>在盲测中击败 ElevenLabs，质量有保障&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://huggingface.co/spaces/ResembleAI/Chatterbox" target="_blank" rel="noopener"
>在线体验 Chatterbox TTS&lt;/a>。&lt;/p>
&lt;h3 id="自托管专业级语音合成服务">自托管专业级语音合成服务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-17-37.png"
width="810"
height="728"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>
&lt;a class="link" href="https://github.com/devnen/Chatterbox-TTS-Server" target="_blank" rel="noopener"
>Chatterbox-TTS-Server&lt;/a>，基于 &lt;a class="link" href="https://github.com/resemble-ai/chatterbox" target="_blank" rel="noopener"
>Chatterbox TTS&lt;/a> 模型构建，提供可视化 Web 界面和完整 API，支持声音克隆、智能长文本分块处理，还有 GPU 加速。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>提供 Web UI 界面，支持文本输入和参数调节&lt;/li>
&lt;li>支持声音克隆功能，可上传参考音频生成相似声音&lt;/li>
&lt;li>预定义声音库，提供多种高质量合成声音选择&lt;/li>
&lt;li>智能长文本处理，自动分块避免生成限制&lt;/li>
&lt;li>OpenAI 兼容 API 接口，方便集成到现有项目&lt;/li>
&lt;li>支持GPU 加速和 Docker 部署，性能强劲易于部署&lt;/li>
&lt;/ul>
&lt;h3 id="基于视频文件存储-ai-的记忆">基于视频文件存储 AI 的记忆
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-18-08.png"
width="830"
height="555"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>&lt;/p>
&lt;p>把用于 AI 模型的向量数据存储在视频里？&lt;a class="link" href="https://github.com/olow304/memvid" target="_blank" rel="noopener"
>Memvid&lt;/a>，颠覆传统的向量数据库处理方式，直接将文本数据编码成视频文件。&lt;/p>
&lt;p>通过将数百万文本块压缩到单个 MP4 文件中，不仅实现了 10 倍的存储压缩率，还能在亚秒级时间内完成语义搜索，完全无需数据库服务器。&lt;/p>
&lt;p>项目内置对话功能，可与知识库进行上下文感知的对话，同时支持直接导入 PDF 文档并自动索引处理。&lt;/p>
&lt;p>可完全离线工作，视频生成后无需网络连接。&lt;/p>
&lt;h3 id="一键生成手写文稿">一键生成手写文稿
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-18-40.png"
width="703"
height="696"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="242px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.autohanding.com/" target="_blank" rel="noopener"
>autohanding&lt;/a>，一键生成手写文稿，模仿真实笔迹。支持多种字体选择与纸张背景设置，用户可上传 Word 文件并进行个性化调整，打印出高质量的手写效果，满足各种需求。&lt;/p>
&lt;p>支持以指定概率进行随机文字涂改。&lt;/p>
&lt;p>支持设置文字凌乱度。&lt;/p>
&lt;h3 id="可视化-gpt-2-小模型的注意力矩阵">可视化 GPT-2 “小模型”的注意力矩阵
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-19-55.png"
width="927"
height="882"
loading="lazy"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://amanvir.com/gpt-2-attention" target="_blank" rel="noopener"
>gpt-2-attention&lt;/a>，这个网站可以可视化 GPT-2（小模型）生成文本时的每一个注意力权重矩阵。&lt;/p>
&lt;h3 id="从零实现高斯泼溅-3d-渲染">从零实现高斯泼溅 3D 渲染
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-22-15.png"
width="853"
height="847"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/guoriyue/3dgs-warp-scratch" target="_blank" rel="noopener"
>3D Gaussian Splatting with NVIDIA Warp&lt;/a>，用Python从零构建3D高斯绘制，无需CUDA即可在CPU/GPU上运行。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ol>
&lt;li>无需复杂CUDA设置，无缝切换CPU/GPU；&lt;/li>
&lt;li>代码简洁易懂，适合学习现代图形学；&lt;/li>
&lt;li>仅需Python和NVIDIA Warp，无需昂贵GPU。&lt;/li>
&lt;/ol>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 133 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/</link><pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-46-39.png" alt="Featured image of post 机器文摘 第 133 期" />&lt;h1 id="机器文摘-第-133-期">机器文摘 第 133 期
&lt;/h1>&lt;h3 id="多模态智能体训练方法">多模态智能体训练方法
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-38-11.png"
width="1010"
height="479"
loading="lazy"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="506px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://arxiv.org/pdf/2505.14246" target="_blank" rel="noopener"
>Visual Agentic Reinforcement Fine-Tuning&lt;/a>，上海交大、上海 AI Lab、港中文、武汉大学的研究团队最新推出的多模态智能体训练方法，专为赋予视觉语言模型（LVLMs）以「工具智能体」能力而设计。&lt;/p>
&lt;p>&lt;a class="link" href="https://weibo.com/ttarticle/p/show?id=2309405170925888209091" target="_blank" rel="noopener"
>机器之心解读这篇论文的文章&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Visual-ARFT 让模型不仅能看图、能理解，还能「动脑推理、动手操作」，主要包括以下三个方面的核心能力：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>模型能够自动调用搜索引擎查资料或者编写并执行 Python 代码处理图像；
面对复杂任务，能够自主拆解问题、规划步骤、调用合适工具完成任务；
支持多步推理、多模态输入，具备强大的跨模态泛化能力！&lt;/p>
&lt;/blockquote>
&lt;h3 id="开源跨平台智能对话机器人">开源跨平台智能对话机器人
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-41-34.png"
width="1389"
height="891"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="374px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com//zhayujie/chatgpt-on-wechat" target="_blank" rel="noopener"
>chatgpt-on-wechat&lt;/a>，基于大模型搭建的聊天机器人，同时支持 微信公众号、企业微信应用、飞书、钉钉 等接入，可选择 GPT4.1/GPT-4o/GPT-o1/ DeepSeek/Claude/文心一言/讯飞星火/通义千问/ Gemini/GLM-4/Kimi/LinkAI，能处理文本、语音和图片，访问操作系统和互联网，支持基于自有知识库进行定制企业智能客服。&lt;/p>
&lt;p>支持的功能如下：&lt;/p>
&lt;ul>
&lt;li>✅ 多端部署： 有多种部署方式可选择且功能完备，目前已支持微信公众号、企业微信应用、飞书、钉钉等部署方式&lt;/li>
&lt;li>✅ 基础对话： 私聊及群聊的消息智能回复，支持多轮会话上下文记忆，支持 GPT-4o系列, GPT-4.1系列, Claude, Gemini, 文心一言, 讯飞星火, 通义千问，ChatGLM-4，Kimi, MiniMax, GiteeAI, ModelScope&lt;/li>
&lt;li>✅ 语音能力： 可识别语音消息，通过文字或语音回复，支持 azure, baidu, google, openai(whisper/tts) 等多种语音模型&lt;/li>
&lt;li>✅ 图像能力： 支持图片生成、图片识别、图生图（如照片修复），可选择 Dall-E-3, stable diffusion, replicate, midjourney, CogView-3, vision模型&lt;/li>
&lt;li>✅ 丰富插件： 支持自定义插件扩展，已实现多角色切换、文字冒险、敏感词过滤、聊天记录总结、文档总结和对话、联网搜索等插件&lt;/li>
&lt;li>✅ Agent能力： 支持访问浏览器、终端、文件系统、搜索引擎等各类工具，并可通过多智能体协作完成复杂任务，基于 AgentMesh 框架实现&lt;/li>
&lt;li>✅ 知识库： 通过上传知识库文件自定义专属机器人，可作为数字分身、智能客服、私域助手使用，基于 LinkAI 实现&lt;/li>
&lt;/ul>
&lt;h3 id="通过游戏学习-javascript-编程">通过游戏学习 Javascript 编程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-42-03.png"
width="690"
height="812"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="203px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://warriorjs.com/" target="_blank" rel="noopener"
>warriorjs&lt;/a>，一个通过游戏来学习 js 的网站​​​。&lt;/p>
&lt;h3 id="在安卓手机上跑本地大模型">在安卓手机上跑本地大模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-46-39.png"
width="748"
height="492"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="364px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/google-ai-edge/gallery" target="_blank" rel="noopener"
>Google AI Edge Gallery&lt;/a>，谷歌发布的一个开源安卓应用，专门跑他们的本地模型。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>完全离线使用&lt;/li>
&lt;li>支持多模态理解&lt;/li>
&lt;/ul>
&lt;p>可以直接试用前几天发布的端侧多模态模型 Gemma 3n&lt;/p>
&lt;h3 id="基于-markdown-的开源排版系统">基于 Markdown 的开源排版系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-43-00.png"
width="804"
height="495"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/iamgio/quarkdown" target="_blank" rel="noopener"
>Quarkdown&lt;/a>，是一个集成了 Markdown 和 LaTeX 功能的现代排式系统，免费且开源，用于创建演示文稿、文章或书籍。&lt;/p>
&lt;h3 id="跨平台剪贴板同步方案">跨平台剪贴板同步方案
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-43-48.png"
width="815"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Jeric-X/SyncClipboard" target="_blank" rel="noopener"
>SyncClipboard&lt;/a>，通过服务器同步各设备的剪贴板内容，支持文字、图片和文件，还能解决从浏览器复制动态图变静态的问题，甚至能自动转换图片格式。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>多设备剪贴板实时同步，支持文字、图片和文件；&lt;/li>
&lt;li>从浏览器复制图片时自动下载原图，保留动态图效果；&lt;/li>
&lt;li>智能图片格式转换，解决不同应用间的兼容性问题；&lt;/li>
&lt;li>支持 WebDAV 网盘作为服务器，也可独立部署；&lt;/li>
&lt;li>iOS 通过快捷指令、Android 通过多种工具实现同步；&lt;/li>
&lt;li>支持自动提取并同步短信验证码。&lt;/li>
&lt;/ul>
&lt;p>服务器支持 Docker 一键部署，提供全平台桌面客户端，并内置了服务器功能。&lt;/p>
&lt;h3 id="强化学习后训练框架">强化学习后训练框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-44-12.png"
width="756"
height="364"
loading="lazy"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="498px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Simple-Efficient/RL-Factory" target="_blank" rel="noopener"
>RL-Factory&lt;/a>，专门用于智能体学习的强化学习框架。该框架采用环境解耦设计，只需提供工具配置和奖励函数就能开始训练，还支持异步工具调用让训练速度提升 2 倍。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>环境解耦设计，一键式配置 MCP 工具和自定义工具；&lt;/li>
&lt;li>异步并行工具调用，训练效率比传统框架提升 2 倍；&lt;/li>
&lt;li>原生支持 Qwen3 模型，无需 SFT 即可准确调用工具；&lt;/li>
&lt;li>多种奖励计算方式，支持规则、模型判断和工具调用；&lt;/li>
&lt;li>批处理和分布式模型判断，大幅提升训练效率；&lt;/li>
&lt;li>多代理扩展支持，可转换为 MCP 格式进行交互。&lt;/li>
&lt;/ul>
&lt;h3 id="在-vs-code-里管理-postgresql-数据库">在 VS Code 里管理 PostgreSQL 数据库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-44-30.png"
width="690"
height="425"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://techcommunity.microsoft.com/blog/adforpostgresql/announcing-a-new-ide-for-postgresql-in-vs-code-from-microsoft/4414648" target="_blank" rel="noopener"
>微软推出的一款 VS Code 扩展&lt;/a>，该扩展为管理 PostgreSQL 数据库设计，旨在简化 PostgreSQL 数据库管理和开发工作流程。&lt;/p>
&lt;p>这一扩展使开发者能够在不离开 VS Code 的情况下管理数据库对象、草拟查询，并获得上下文感知的 IntelliSense 和 GitHub Copilot 的 “@pgsql” 智能助手的智能协助。&lt;/p>
&lt;h3 id="图形引擎教程">图形引擎教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-45-07.png"
width="690"
height="508"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://italink.github.io/ModernGraphicsEngineGuide/" target="_blank" rel="noopener"
>现代图形引擎入门指南&lt;/a>，一本在线教程，从 c++ 开始讲起的现代图形引擎入门教程，作者写了两年多了，还一直在更新。&lt;/p>
&lt;h3 id="linux-命令行编程教程">Linux 命令行编程教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-46-03.png"
width="487"
height="689"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://learnbyexample.github.io/cli-computing/" target="_blank" rel="noopener"
>Linux Command Line Computing&lt;/a>，本书面向初级至中级用户，重点讲解 Linux 命令行工具与 Shell 脚本编程，核心内容涵盖文件管理及文本处理任务，不涉及系统管理和网络等高级主题。&lt;/p>
&lt;p>本书包含大量的示例和练习，在线阅读免费，制作好的pdf版收费。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 132 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/</link><pubDate>Sun, 25 May 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-53-53.png" alt="Featured image of post 机器文摘 第 132 期" />&lt;h1 id="机器文摘-第-132-期">机器文摘 第 132 期
&lt;/h1>&lt;h3 id="开发游戏但不使用任何引擎">开发游戏但不使用任何引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-53-12.png"
width="690"
height="443"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="373px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://noelberry.ca/posts/making_games_in_2025" target="_blank" rel="noopener"
>《在 2025 年制作游戏》&lt;/a>来自一位开发了 20 年游戏的从业者 Noel Berry 。&lt;/p>
&lt;p>文中分享了他自己制作游戏的流程和所使用的工具。尽管很多人认为不用大型商业游戏引擎就很难做游戏，但 Noel 认为对于其制作的游戏类型，不需要大型引擎的 90% 的功能，且大型引擎的默认功能实现往往不能满足其需求，最终项目还是会变成主要使用自己工具和系统，而引擎只是提供一些界面和渲染功能，所以 Noel 选择不使用大型游戏引擎，而是自己编写特定用途的小工具来制作游戏，这样更有趣，也能够掌控开发流程，方便快速找到问题并解决，不用担心引擎的更新或商业决策影响自己的游戏。&lt;/p>
&lt;p>主要工具：&lt;/p>
&lt;ul>
&lt;li>编程语言：C#&lt;/li>
&lt;li>窗口管理、渲染、输入、音频：SDL3&lt;/li>
&lt;li>操作系统：Noel 提到自己已不再使用 Windows 进行游戏开发（仅用于测试），因为其更倾向于使用开源、跨平台的工具和库，而且觉得 Windows 越来越令人沮丧，Linux 则能更快速优雅地满足其编程游戏的需求。&lt;/li>
&lt;/ul>
&lt;h3 id="不到-1000-行代码写一个带语法高亮的编辑器">不到 1000 行代码写一个带语法高亮的编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-53-40.png"
width="690"
height="499"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/antirez/kilo" target="_blank" rel="noopener"
>kilo&lt;/a>，不依赖任何库，用不到 1k 行 C 代码写一个可以在 VT100 兼容终端中运行的编辑器。支持快捷键操作、语法高亮和内容查询。 ​​​&lt;/p>
&lt;h3 id="将小爱音箱接入小智语音助手">将小爱音箱接入小智语音助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-53-53.png"
width="690"
height="401"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="412px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/idootop/open-xiaoai" target="_blank" rel="noopener"
>open-xiaoai&lt;/a>，开源项目让小爱音箱「听见你的声音」。&lt;/p>
&lt;p>MiGPT 的增强版本，小爱音箱刷机后，获取系统+硬件控制权，接管小爱音箱的耳朵（麦克风）和嘴巴（扬声器）。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>支持自定义小爱音箱唤醒词（离线部署 + 中英文）&lt;/li>
&lt;li>支持定制多个唤醒词服务，不同唤醒词之间互不干扰&lt;/li>
&lt;li>不影响小爱音箱的任何原有功能，支持随时切换回原系统&lt;/li>
&lt;li>支持接入 Gemini Live API 和 OpenAI Realtime API 等多模态大模型&lt;/li>
&lt;li>支持接入小智 AI 等语音助手，超低延时、超流畅的对话体验，支持连续对话，任意打断&lt;/li>
&lt;li>支持自定义消息回复，方便对接其他 LLM、AI Workflow（Dify、扣子）、AI Agent 等服务&lt;/li>
&lt;/ul>
&lt;h3 id="自动完成数学建模全流程的强大-ai-助手">自动完成数学建模全流程的强大 AI 助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-54-16.png"
width="690"
height="496"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="333px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jihe520/MathModelAgent" target="_blank" rel="noopener"
>MathModelAgent&lt;/a>，内置多个智能体分别负责不同环节，如代码手（带有反思模块，本地代码解释器）、论文手、建模手等，实现全自动分析问题、建模、编写代码、纠错生成一份格式完整的论文。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>自动分析问题、数学建模、编写代码、纠错和撰写论文；&lt;/li>
&lt;li>本地代码解释器，确保代码可执行性；&lt;/li>
&lt;li>生成格式完善的建模论文，直接可用；&lt;/li>
&lt;li>多 Agent 协作：代码 Agent、论文 Agent 分工合作；&lt;/li>
&lt;li>支持多种 LLM 模型，每个 Agent 可单独设置不同模型；&lt;/li>
&lt;li>成本低廉，单次任务约 1 元人民币。&lt;/li>
&lt;/ul>
&lt;p>支持 WebUI 和命令行两种方式使用，只需配置好环境并填写 API 密钥即可使用。&lt;/p>
&lt;h3 id="从零实现一个-deep-research-智能体">从零实现一个 Deep Research 智能体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-55-12.png"
width="858"
height="445"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/liyuan24/nanoDeepResearch" target="_blank" rel="noopener"
>nanoDeepResearch&lt;/a>, 作者受到字节开源的 DeerFlow 启发，决定从零开始构建一个深度研究 Agents，不依赖任何现有的框架，如 LangGraph。&lt;/p>
&lt;p>通过该项目，我们可以清晰了解到工作流程中每个步骤，例如：&lt;/p>
&lt;ul>
&lt;li>对于网络搜索，LLM 建议搜索什么内容；&lt;/li>
&lt;li>对于编码，LLM 生成了什么代码；&lt;/li>
&lt;li>对于规划，LLM 输出了什么研究计划。&lt;/li>
&lt;/ul>
&lt;p>主要功能特性：&lt;/p>
&lt;ul>
&lt;li>完整实现 ReAct 代理系统，能自主推理和行动；&lt;/li>
&lt;li>多专家协作系统，包括规划者、研究者、编码者和报告者；&lt;/li>
&lt;li>透明展示每个步骤的决策过程和生成内容；&lt;/li>
&lt;li>支持网络搜索、网页爬取和 Python 编程工具。&lt;/li>
&lt;/ul>
&lt;h3 id="从零构建小大语言模型的教程">从零构建“小”大语言模型的教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-55-48.png"
width="415"
height="523"
loading="lazy"
class="gallery-image"
data-flex-grow="79"
data-flex-basis="190px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/KaihuaTang/Building-a-Small-LLM-from-Scratch" target="_blank" rel="noopener"
>Building-a-Small-LLM-from-Scratch&lt;/a>，该系列的目的是让读者可以在基础的pytorch上，不依赖任何其他现成的外部库，从零开始理解并实现一个大语言模型的所有组成部分。&lt;/p>
&lt;p>以及训练微调代码，读者仅需python，pytorch和最基础深度学习背景知识即可。&lt;/p>
&lt;p>目前还在更新中，已经完成的有三章。&lt;/p>
&lt;h3 id="一个本地-ai-应用的全家桶">一个本地 AI 应用的全家桶
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-56-36.png"
width="848"
height="623"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/badboysm890/ClaraVerse" target="_blank" rel="noopener"
>Clara&lt;/a>，隐私优先，完全本地化的 AI 工作空间，包含 Ollama LLM 聊天、工具调用、代理构建器、稳定扩散以及嵌入式 n8n 式自动化功能。无需后端，无需 API 密钥。&lt;/p>
&lt;p>Windows 系统安装部署需要依赖本地有 Python 环境以及 DockerDesktop。&lt;/p>
&lt;p>我安装测试后感觉体验还有待提升，主要是智能体编排方面的功能实现还不够完整，项目还在开发中。&lt;/p>
&lt;h3 id="能自我进化的编码智能体">能自我进化的编码智能体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-57-58.png"
width="852"
height="487"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/shyamsaktawat/OpenAlpha_Evolve" target="_blank" rel="noopener"
>OpenAlpha_Evolve&lt;/a>，是一款受DeepMind突破性研究成果&amp;quot;AlphaEvolve&amp;quot;等自主编码智能体启发而开发的开源Python框架。&lt;/p>
&lt;p>该项目通过运用谷歌Gemini等大型语言模型（LLMs），在进化原则的指导下，实现了核心思想的重现：构建一个能持续执行代码编写、测试与优化的智能系统，通过迭代演进实现代码的自主进化。&lt;/p>
&lt;p>他们的使命是为研究人员、开发者和技术爱好者打造一个易用、易懂且可扩展的平台，助力探索人工智能、代码生成与自动化问题解决领域令人着迷的交叉创新。&lt;/p>
&lt;blockquote>
&lt;p>通过这一平台，我们致力于推动AI技术在实际编程场景中的应用边界，赋能更智能的自动化软件开发流程。&lt;/p>
&lt;/blockquote>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 131 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/</link><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-28-28.png" alt="Featured image of post 机器文摘 第 131 期" />&lt;h1 id="机器文摘-第-131-期">机器文摘 第 131 期
&lt;/h1>&lt;h3 id="你的代码是如何在cpu里执行的">你的代码是如何在CPU里执行的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-23-38.png"
width="587"
height="442"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chessman7.substack.com/p/how-your-code-runs-the-journey-of" target="_blank" rel="noopener"
>程序在 CPU 中的运行过程&lt;/a>，中央处理器 (CPU) 是强大的引擎，驱动着从简单计算到复杂模拟的一切任务。理解它的架构和执行流程不仅仅是学术兴趣，更是任何深入编程或计算机科学人士的必修课。&lt;/p>
&lt;p>这篇博文旨在通过探索 CPU 的架构和执行流程，并用一个实际的代码示例来解释这些概念，从而解释 CPU 的内部工作原理。&lt;/p>
&lt;p>详细讲解了 CPU 的主要组成部分：控制单元（CU）负责协调指令的获取、解码和执行；算术逻辑单元（ALU）执行算术和逻辑运算；寄存器临时存储数据和指令；内存包括 RAM、ROM 和缓存；组合逻辑负责处理输入信号并输出结果。&lt;/p>
&lt;p>重点介绍了 CPU 操作围绕的取指 - 译码 - 执行循环：取指阶段，CPU 根据程序计数器（PC）从内存中获取指令；译码阶段，确定指令的操作码和操作数；执行阶段，执行指令指定的操作，可能涉及 ALU 或寄存器和内存间的数据移动；最后将结果写回寄存器或内存。&lt;/p>
&lt;p>以一个简单的 C 程序为例，展示了程序从编写到运行的整个过程：编译阶段，C 代码被编译为对象文件，再与库链接成可执行文件；加载阶段，加载器将可执行文件从硬盘加载到内存；执行阶段，CPU 从内存中获取、解码和执行指令；输出阶段，程序通过 printf 函数将结果输出到屏幕。同时介绍了程序运行中涉及的内存段、操作系统、硬盘和主板等组件的作用。&lt;/p>
&lt;h3 id="huggingface官方出的-mcp-教学课程">huggingface官方出的 mcp 教学课程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-24-14.png"
width="600"
height="612"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="235px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/mcp-course" target="_blank" rel="noopener"
>《模型上下文协议（MCP）课程》&lt;/a>，将指导您理解、使用和构建尖端 AI 应用，这些应用将基于最新的 MCP 标准，利用外部数据和工具。这门免费课程旨在帮助您从 MCP 领域的初学者成长为经验丰富的实践者。&lt;/p>
&lt;p>课程内容：&lt;/p>
&lt;ul>
&lt;li>基础单元 ：从理论上学习 MCP 概念。&lt;/li>
&lt;li>用例分配 ：将学到的概念应用于现实世界的问题。&lt;/li>
&lt;li>合作 ：采用 Hugging Face 及其合作伙伴的最新 MCP 实施和工具。&lt;/li>
&lt;/ul>
&lt;h3 id="开源自动化-ai-工具">开源自动化 AI 工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-29-50.png"
width="721"
height="404"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/mediar-ai/terminator" target="_blank" rel="noopener"
>Terminator&lt;/a>，旨在使用类似 Playwright 的 API 与 Windows 上的原生 GUI 应用程序交互，例如解析网站。&lt;/p>
&lt;p>通过利用操作系统级的辅助功能 API，Terminator 的 AI 代理速度比基于视觉的方法更快、更可靠，并且可以与后台应用程序交互。&lt;/p>
&lt;p>对比传统 OCR 自动化工具，有如下的特点：&lt;/p>
&lt;ul>
&lt;li>速度特别快，比传统方法快很多倍；&lt;/li>
&lt;li>即使软件窗口被遮挡或在后台，也能操作；&lt;/li>
&lt;li>非常稳定，不容易因为界面变化而失效。&lt;/li>
&lt;/ul>
&lt;h3 id="smolvlm-webgpu-版本">SmolVLM webgpu 版本
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-28-28.png"
width="681"
height="786"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="207px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/spaces/webml-community/smolvlm-realtime-webgpu" target="_blank" rel="noopener"
>smolvlm-realtime-webgpu&lt;/a>，这个模型可以识别视频中的物体，识别率相当不错，模型大小只有500M。&lt;/p>
&lt;p>现在出了 webgpu 版本，可以直接在网页中运行，实时监测视频流里的物品。&lt;/p>
&lt;h3 id="一键把电子书变成有声书">一键把电子书变成有声书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-32-39.png"
width="1889"
height="843"
loading="lazy"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="537px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://b2t.pingfury.top/" target="_blank" rel="noopener"
>Book2TTS&lt;/a>，一键把电子书变成有声书&lt;/p>
&lt;p>亮点：&lt;/p>
&lt;ul>
&lt;li>支持上传 EPUB、PDF 等格式&lt;/li>
&lt;li>可选择不同语音合成模型，如 Edge-TTS / OpenAI / ElevenLabs 等&lt;/li>
&lt;li>多语言支持，包括中文神经音色&lt;/li>
&lt;li>支持 RSS 订阅&lt;/li>
&lt;li>自动分页，可自由选择章节生成&lt;/li>
&lt;li>可下载音频或直接发布&lt;/li>
&lt;li>界面简洁、操作直观，适合播客、有声读物、学习场景使用&lt;/li>
&lt;/ul>
&lt;h3 id="纯原生-web-技术教程">纯原生 Web 技术教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-33-16.png"
width="757"
height="690"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="263px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://plainvanillaweb.com/index.html" target="_blank" rel="noopener"
>Plain Vanilla&lt;/a>一个介绍纯 Vanilla web 技术的合集教程，使用原生的 HTML、CSS 和 JavaScript 进行网页和 Web 应用开发，摒弃复杂的框架和构建工具。&lt;/p>
&lt;p>主要内容：&lt;/p>
&lt;ul>
&lt;li>无框架、无构建工具&lt;/li>
&lt;li>Web Components - 替代 Vue/React&lt;/li>
&lt;li>现代 CSS - 不用 PostCSS / SASS&lt;/li>
&lt;li>部署与优化 ​​​&lt;/li>
&lt;/ul>
&lt;h3 id="一个免费的在线工具箱">一个免费的在线工具箱
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-33-41.png"
width="876"
height="650"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://uiedtool.com/" target="_blank" rel="noopener"
>UIED Tools&lt;/a>，是由 &lt;a class="link" href="https://fsuied.com/" target="_blank" rel="noopener"
>UIED技术团队&lt;/a> 设计开发的在线工具平台。&lt;/p>
&lt;p>网站汇聚大量在线即开即用的工具，包括 AI、设计、图片处理、办公等。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 130 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/</link><pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-54-40.png" alt="Featured image of post 机器文摘 第 130 期" />&lt;h1 id="机器文摘-第-130-期">机器文摘 第 130 期
&lt;/h1>&lt;h3 id="用微信聊天记录创造数字分身">用微信聊天记录创造数字分身
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-53-52.png"
width="3790"
height="1594"
loading="lazy"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="570px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/xming521/WeClone" target="_blank" rel="noopener"
>WeClone&lt;/a>，用自己的微信聊天记录训练LLM，搞一个自己的数字分身，支持微信语音克隆。&lt;/p>
&lt;p>支持绑定到微信、QQ、Telegram、企微、飞书机器人等，作为个人助手，忙的时候应付简单社交比较实用。&lt;/p>
&lt;p>项目仓库里包含了从聊天数据导出、预处理、模型训练以及部署的全流程。&lt;/p>
&lt;p>项目默认使用 Qwen2.5-7B-Instruct 模型，LoRA 方法对 sft 阶段微调，大约需要 16GB 显存。也可以使用 LLaMA Factory 支持的其他模型和方法。&lt;/p>
&lt;h3 id="计算部署大模型所需资源的工具">计算部署大模型所需资源的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-54-13.png"
width="690"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="350px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://apxml.com/tools/vram-calculator" target="_blank" rel="noopener"
>vram-calculator&lt;/a>，一个计算大模型推理和训练所占内存的在线工具。&lt;/p>
&lt;p>工具的特点是比较精准，且可调整很多细节参数，能够比较精准预测你最终所需的资源。&lt;/p>
&lt;p>能计算 MoE 的模型，会算不同的 attention 机制，支持修改 batch size、seq length 和并发数。 ​​​&lt;/p>
&lt;h3 id="开源-cursor-平替">开源 cursor 平替
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-54-40.png"
width="690"
height="274"
loading="lazy"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="604px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/voideditor/void" target="_blank" rel="noopener"
>Void&lt;/a>，像 cursor 一样基于 vscode 开发的基于 AI 的智能 IDE 环境。&lt;/p>
&lt;p>支持在项目工程中直接使用 AI Agent 进行编码、调试等任务的执行。&lt;/p>
&lt;p>可以对接任意大模型 LLM，包括云端服务或本地部署服务。&lt;/p>
&lt;h3 id="速度极快的语音识别模型">速度极快的语音识别模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-55-26.png"
width="690"
height="549"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/nvidia/parakeet-tdt-0.6b-v2" target="_blank" rel="noopener"
>Parakeet TDT 0.6B V2&lt;/a>，英伟达开源的一个语音识别模型，发布后迅速登顶 OpenASR 榜单。&lt;/p>
&lt;p>能够在 1 秒内实现高质量转录 60 分钟的音频，而且参数仅仅 0.6B，轻松击败了所有主流闭源模型。&lt;/p>
&lt;p>不过目前仅支持识别英文，采用的是 CC-BY-4.0 开源许可，允许商业使用。&lt;/p>
&lt;h3 id="条形码在线生成">条形码在线生成
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-55-52.png"
width="935"
height="821"
loading="lazy"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="273px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://barcode-maker.com" target="_blank" rel="noopener"
>Barcode Maker&lt;/a>，一个免费、开源的在线条码生成工具，支持多种一维条码和二维码格式的实时批量生成。无需注册，没有数量限制，并且支持多种格式下载。&lt;/p>
&lt;p>支持 Code 128、EAN/UPC、Code 39、ITF、MSI Plessey、Pharmacode、Codabar 等一维码，以及 QR Code、Data Matrix、PDF417、Aztec Code 等二维码&lt;/p>
&lt;p>支持 PNG、JPG、GIF、SVG 格式下载，批量生成时会打包为 ZIP 文件。&lt;/p>
&lt;p>完全响应式设计，适用于电脑、平板和智能手机。&lt;/p>
&lt;h3 id="操作excel的-mcp-服务">操作excel的 mcp 服务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-56-30.png"
width="869"
height="431"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="483px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/haris-musa/excel-mcp-server" target="_blank" rel="noopener"
>excel-mcp-server&lt;/a>，允许 AI 操作 Excel 文件，且无需安装 Microsoft Excel。&lt;/p>
&lt;p>支持使用 AI Agent 创建、读取和修改 Excel 工作簿。&lt;/p>
&lt;ul>
&lt;li>📊 创建和修改 Excel 工作簿&lt;/li>
&lt;li>📝 读取和写入数据&lt;/li>
&lt;li>🎨 应用格式和样式&lt;/li>
&lt;li>📈 创建图表和可视化&lt;/li>
&lt;li>📊 生成数据透视表&lt;/li>
&lt;li>🔄 管理工作表和区域&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 129 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/</link><pubDate>Mon, 05 May 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/2025-05-05-13-25-14.png" alt="Featured image of post 机器文摘 第 129 期" />&lt;h1 id="机器文摘-第-129-期">机器文摘 第 129 期
&lt;/h1>&lt;h3 id="一个涵盖所有-github-代码库的免费百科全书">一个涵盖所有 GitHub 代码库的免费百科全书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/2025-05-05-13-22-56.png"
width="1065"
height="717"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://deepwiki.com/" target="_blank" rel="noopener"
>DeepWiki&lt;/a>，本周最火项目，将任何公共 GitHub 代码库的 URL 替换为“ https:// deepwiki. com/org/repo ”即可获得类似维基百科的精准库描述。&lt;/p>
&lt;p>可一键将任意代码库转换成详细易懂的知识库文档并与之对话 DeepWiki 通过分析 GitHub 公共代码库的代码、README 和配置文件，然后会自动自动生成一个详细的、易读的文档、交互式图表，并有一个对话式 AI 助手。&lt;/p>
&lt;p>一共索引了 3 万个库，40 亿行代码。&lt;/p>
&lt;p>&lt;a class="link" href="https://greasyfork.org/zh-CN/scripts/534213-github-to-deepwiki" target="_blank" rel="noopener"
>这里有一个油猴脚本，可以让你在浏览 Github 仓库页面的时候直接一键跳转到对应的 Deepwiki 页&lt;/a>：https://greasyfork.org/zh-CN/scripts/534213-github-to-deepwiki&lt;/p>
&lt;h3 id="8-个超实用的-ai-音乐生成工具">8 个超实用的 AI 音乐生成工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/2025-05-05-13-23-35.png"
width="1088"
height="848"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://soundraw.io" target="_blank" rel="noopener"
>Soundraw&lt;/a>，支持高度自定义的AI音乐生成平台，可调整节奏和旋律，支持多种风格和音乐流派选择。&lt;/li>
&lt;li>&lt;a class="link" href="https://mubert.com/render/moods" target="_blank" rel="noopener"
>Mubert&lt;/a>，操作简单，支持快速生成多种风格的背景音乐。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.beatoven.ai" target="_blank" rel="noopener"
>Beatoven&lt;/a>，输入文本即可快速生成符合场景需求的音乐，每次可生成多段1分钟左右的音频。&lt;/li>
&lt;li>&lt;a class="link" href="https://soundful.com" target="_blank" rel="noopener"
>Soundful&lt;/a>，擅长生成冥想和放松类音乐，能生成超过5分钟的冥想音频，非常适合制作长时背景音乐。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.loudly.com" target="_blank" rel="noopener"
>Loudly&lt;/a>，文本转音乐功能，能生成30秒音乐，支持风格融合。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.aiva.ai" target="_blank" rel="noopener"
>Aiva&lt;/a>，集成专业编辑工具和海量素材库的平台，提供数百种预设风格。&lt;/li>
&lt;li>&lt;a class="link" href="https://stability.ai/stable-audio" target="_blank" rel="noopener"
>Stable Audio&lt;/a>，支持生成45秒的高质量音频，支持二次创作功能。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.splashmusic.com" target="_blank" rel="noopener"
>Splash Music&lt;/a>，在线合成自然音效和背景音的平台，提供在线使用版本，无需下载。&lt;/li>
&lt;/ol>
&lt;h3 id="学术论文阅读工具">学术论文阅读工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/2025-05-05-13-23-53.png"
width="831"
height="531"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/LYiHub/mad-professor-public" target="_blank" rel="noopener"
>mad-professor&lt;/a>，集PDF处理、AI翻译、RAG检索、AI问答及语音聊天于一体。&lt;/p>
&lt;p>导入PDF后它会自动提取、翻译和结构化论文内容，并且支持中英文对照阅读&lt;/p>
&lt;p>支持AI智能问答，分屏界面，左侧论文右侧AI问答，可以语音提问和TTS语音回答&lt;/p>
&lt;p>mad-professor 被赋予了个性角色，回答问题时会带有教授的性格和情感特点，支持更换不同的教授人设/声音&lt;/p>
&lt;h3 id="轻量级-llm-离线运行工具">轻量级 LLM 离线运行工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/2025-05-05-13-24-35.png"
width="822"
height="464"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Genta-Technology/Kolosal" target="_blank" rel="noopener"
>Kolosal AI&lt;/a>，让大语言模型在本地设备上轻松运行。&lt;/p>
&lt;p>主要特点：&lt;/p>
&lt;ol>
&lt;li>仅需约20MB的编译体积，适合边缘设备；&lt;/li>
&lt;li>支持 AVX2 CPU、AMD和 NVIDIA GPU，硬件适配广泛；&lt;/li>
&lt;li>支持多种流行模型，如 Mistral、LLaMA、Qwen 等。&lt;/li>
&lt;/ol>
&lt;h3 id="android-自动化工具">Android 自动化工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/2025-05-05-13-25-14.png"
width="1066"
height="700"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/droidrun/droidrun" target="_blank" rel="noopener"
>DroidRun&lt;/a>，用 AI 操作手机。&lt;/p>
&lt;p>通过自然语言直接控制 Android 设备，比如说 “打开设置查看电池用量” 这样的简单指令，AI 就能自动帮我们完成，就像有个助手在替我们操作手机一样方便。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>使用自然语言命令控制 Android 设备，无需编程知识&lt;/li>
&lt;li>支持多种大模型（OpenAI、Anthropic、Gemini）作为决策大脑&lt;/li>
&lt;li>简单易用的命令行界面，一行命令就能完成复杂操作&lt;/li>
&lt;li>提供 Python API 接口，方便开发者集成自定义功能&lt;/li>
&lt;li>支持截图分析，让 AI 能&amp;quot;看到&amp;quot;手机屏幕内容&lt;/li>
&lt;li>轻松实现 UI 测试、日常任务自动化等功能&lt;/li>
&lt;/ul>
&lt;p>安装配置简单，通过 USB 或 ADB 即可连接操控，特别适合需要自动化手机操作和测试的开发者与个人。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 128 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/</link><pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-56-22.png" alt="Featured image of post 机器文摘 第 128 期" />&lt;h1 id="机器文摘-第-128-期">机器文摘 第 128 期
&lt;/h1>&lt;h3 id="用-docker-快速搭建-mcp-服务器">用 Docker 快速搭建 MCP 服务器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-55-27.png"
width="847"
height="769"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="264px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/metorial/mcp-containers" target="_blank" rel="noopener"
>MCP Containers&lt;/a> 将数百个常用 MCP 服务器打包成即用即取的 Docker 镜像，直接一键部署各种 AI 能力扩展的 MCP 工具。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>一键部署体验，通过简单的 Docker 命令即可使用任何 MCP 服务器&lt;/li>
&lt;li>自动更新机制，服务器镜像每日更新，始终与源仓库同步&lt;/li>
&lt;li>安全隔离环境，各服务器在独立容器中运行互不干扰&lt;/li>
&lt;li>支持数百种 MCP 服务器，从网络搜索、浏览器控制到各类 API 集成&lt;/li>
&lt;li>丰富的文档和使用指南，帮助快速上手&lt;/li>
&lt;/ul>
&lt;p>只需拉取需要的 Docker 镜像即可，同时每一个 MCP 服务器都有详细的使用教程。&lt;/p>
&lt;h3 id="性能强大的目标跟踪库">性能强大的目标跟踪库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-56-22.png"
width="762"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/roboflow/trackers" target="_blank" rel="noopener"
>trackers&lt;/a>，是一个统一的库，提供领先的多目标跟踪算法的全新实现。其模块化设计让您可以轻松替换跟踪器，并将其与来自各种库（例如 inference 、 ultralytics 或 transformers 的目标检测器集成。&lt;/p>
&lt;p>虽然 repo 介绍里面没有写这个算法的最大跟总量，但是演示视频里面跟踪鸡蛋的场景最大有标记为 269 的鸡蛋，也就是说它至少可以动态跟踪200+目标。&lt;/p>
&lt;h3 id="桌面宠物猫">桌面宠物猫
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-57-14.png"
width="416"
height="278"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ayangweb/BongoCat" target="_blank" rel="noopener"
>BongoCat&lt;/a>，在电脑上显示一个可爱的猫咪，跟随着你敲打的键盘和移动的鼠标进行互动，工作累了困了可玩下解压。&lt;/p>
&lt;p>提供 Windows、macOS 和 Linux 系统安装包，可直接开箱即用。&lt;/p>
&lt;h3 id="利用多模态大模型实时分析视频流">利用多模态大模型实时分析视频流
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-58-05.png"
width="690"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://showlab.github.io/livecc/" target="_blank" rel="noopener"
>LiveCC&lt;/a>，能实时分析视频的模型，基于Qwen2-VL-7B后训练，能实时分析出视频的内容，速度快效果好。&lt;/p>
&lt;p>从演示效果上来看，十分厉害的样子。&lt;/p>
&lt;p>能够直接读出演讲者在白板上实时手写的单词。&lt;/p>
&lt;p>观看球赛视频能够做到及时解说当前战况。&lt;/p>
&lt;h3 id="性能强大的视频生成框架">性能强大的视频生成框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-59-09.png"
width="827"
height="633"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/lllyasviel/FramePack" target="_blank" rel="noopener"
>FramePack&lt;/a>，是一个渐进式生成视频的下一帧（下一帧部分）预测神经网络结构。&lt;/p>
&lt;p>FramePack 将输入上下文压缩为恒定长度，以便生成工作量不受视频长度的影响。&lt;/p>
&lt;p>即使在笔记本电脑 GPU 上，FramePack 也可以使用 13B 模型处理大量帧。&lt;/p>
&lt;p>FramePack 可以使用更大的批量大小进行训练，类似于图像扩散训练的批量大小。&lt;/p>
&lt;p>使用 13B 模型生成 1 分钟视频（60 秒），30fps（1800 帧），最低所需的 GPU 内存为 6GB。&lt;/p>
&lt;p>官方只提供了windows构建版本，下载后使用 update.bat 进行更新，使用 run.bat 运行。框架会直接从HuggingFace 上下载模型&lt;/p>
&lt;h3 id="小巧又逼真的语音生成模型">小巧又逼真的语音生成模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-59-55.png"
width="810"
height="387"
loading="lazy"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/nari-labs/dia" target="_blank" rel="noopener"
>Dia-1.6B&lt;/a>，一款超逼真的文本转语音生成模型，号称超越 ElevenLabs 和 Sesame。&lt;/p>
&lt;p>仅仅只有 1.6B 参数，能直接从文本生成高度逼真的对话，还支持控制情感和语调，甚至可以生成笑声、咳嗽等非语言声音。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>通过 [S1] 和 [S2] 标签控制生成多角色对话；&lt;/li>
&lt;li>支持生成笑声、清嗓子、叹息等非语言表达；&lt;/li>
&lt;li>提供声音克隆功能，可复制特定声音风格；&lt;/li>
&lt;li>实时生成，A4000 GPU 上约 40 tokens/s。&lt;/li>
&lt;/ul>
&lt;p>提供 Gradio UI 界面，操作简单易上手，同时还可以在 Hugging Face 上在线体验。&lt;/p>
&lt;h3 id="ai-生成骨骼">AI 生成骨骼
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-10-00-54.png"
width="818"
height="268"
loading="lazy"
class="gallery-image"
data-flex-grow="305"
data-flex-basis="732px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/VAST-AI-Research/UniRig" target="_blank" rel="noopener"
>UniRig&lt;/a>，自动为3D模型生成骨骼，比此前的方法精度大幅提升，不仅能生成人物骨骼，也能生成各种动物的骨骼。&lt;/p>
&lt;p>AI生成3D模型，AI再生成3D骨骼，再通过骨骼生成动作，3D影视和游戏会有比较可控的落地方案。&lt;/p>
&lt;h3 id="微软开源基于-cpu-推理框架">微软开源基于 CPU 推理框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-10-01-27.png"
width="827"
height="518"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/BitNet" target="_blank" rel="noopener"
>BitNet.cpp&lt;/a>，可直接在 CPU 上运行 1-bit 模型推理（如 BitNet b1.58）。&lt;/p>
&lt;p>提供多种优化内核，支持在 CPU 上实现快速无损推理，使模型速度提升 1.37-6.17 倍，同时能耗降低高达 82.2%，可在单 CPU 上运行 100B 规模模型。&lt;/p>
&lt;p>官方提供了 2B 参数模型可直接使用，支持多种 Hugging Face 上的 1-bit 模型。&lt;/p>
&lt;p>同时提供完整的示例代码和详细的使用指南，适用于 Windows、Linux 和 macOS 系统。&lt;/p>
&lt;h3 id="基于-live2d-的-ai-虚拟助手">基于 Live2D 的 AI 虚拟助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-10-02-01.png"
width="799"
height="781"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="245px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/fagenorn/handcrafted-persona-engine" target="_blank" rel="noopener"
>Persona Engine&lt;/a>，AI 虚拟助手项目，结合了大语言模型，Live2D，自动语音识别，文本转语音，实时语音克隆。&lt;/p>
&lt;p>达到了直接跟虚拟人物对话的能力，可以直接集成到 OBS 里面做AI虚拟主播。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 127 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/</link><pubDate>Sun, 20 Apr 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-03-07.png" alt="Featured image of post 机器文摘 第 127 期" />&lt;h1 id="机器文摘-第-127-期">机器文摘 第 127 期
&lt;/h1>&lt;h3 id="破解一个智能家居设备">破解一个智能家居设备
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-00-17.png"
width="690"
height="335"
loading="lazy"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="494px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://jmswrnr.com/blog/hacking-a-smart-home-device" target="_blank" rel="noopener"
>《破解一个智能家居设备》&lt;/a>，这篇文章讲述了一位技术爱好者如何通过逆向工程破解了一款基于ESP32的智能家居设备（空气净化器），并将其成功集成到Home Assistant智能家居系统中的故事。&lt;/p>
&lt;p>作者对家中所有设备都希望通过Home Assistant进行统一控制，但一款昂贵的空气净化器只能通过其官方App操作，并且依赖云端服务。为了实现本地化控制，作者决定对设备进行逆向工程。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>分析设备通信&lt;/strong>：&lt;br>
作者通过抓包发现设备与云端服务器通过UDP协议通信，且数据经过加密。进一步分析表明，设备使用了自定义协议，而非标准的DTLS。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>硬件拆解与固件提取&lt;/strong>：&lt;br>
作者拆解设备，发现其核心是ESP32芯片。通过串口连接和固件转储，作者提取了设备的存储数据和应用逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>破解加密协议&lt;/strong>：&lt;br>
通过分析固件和网络数据包，作者发现设备使用了ECDH密钥交换和AES加密。他成功破解了加密逻辑，并实现了中间人攻击（MITM），能够解密设备与云端的通信。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>构建本地服务器&lt;/strong>：&lt;br>
作者搭建了一个本地服务器，模拟云端服务，将设备的控制逻辑完全本地化。通过MQTT协议，他将设备与Home Assistant连接，实现了远程控制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>最终实现&lt;/strong>：&lt;br>
设备成功集成到Home Assistant中，作者可以通过自动化规则（如空气质量监测）控制空气净化器。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="一次性密码otps的工作原理">一次性密码（OTPs）的工作原理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-00-31.png"
width="690"
height="617"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.dogac.dev/how-do-one-time-passwords-work/" target="_blank" rel="noopener"
>《一次性密码的工作原理》&lt;/a>，这篇文章深入浅出地讲解了一次性密码（OTPs）的工作原理，特别是HOTP（基于HMAC的一次性密码）和TOTP（基于时间的一次性密码），并分享了作者从零开始实现这些算法的经验。&lt;/p>
&lt;p>作者对一次性密码（如Google Authenticator中的6位数字代码）的神秘性感到好奇，决定深入研究其背后的机制。&lt;/p>
&lt;p>文章通过通俗易懂的方式解释了HOTP和TOTP的原理，并展示了如何从零开始实现它们。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>OTPs的基本概念&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>OTPs是一次性密码，通常用于双因素认证（2FA），比传统密码更安全，因为它们只能使用一次或在有限时间内有效。&lt;/li>
&lt;li>与传统密码不同，OTPs是动态的，减少了密码被重复使用（重放攻击）的风险。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>HOTP和TOTP的区别&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>HOTP&lt;/strong>：基于一个递增的计数器生成密码。每次生成密码后，计数器加一。&lt;/li>
&lt;li>&lt;strong>TOTP&lt;/strong>：基于当前时间生成密码，通常每30秒更新一次。这种方法利用了现代设备的时间同步技术（如NTP），使得密码生成更加方便和安全。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>密码生成的算法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>作者详细解释了如何使用HMAC（基于哈希的消息认证码）来生成密码。HMAC结合了一个秘密密钥和一个计数器（或时间戳）来生成动态密码。&lt;/li>
&lt;li>TOTP实际上是HOTP的一个变种，它将当前时间作为计数器的输入。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>作者的实现过程&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>作者分享了自己如何从零开始实现HOTP和TOTP，并发布了一个演示应用来验证和展示这些算法的工作原理。&lt;/li>
&lt;li>他强调了理解这些算法背后的数学和逻辑的重要性，并展示了如何通过简单的步骤生成安全的一次性密码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="开源的多模态视觉模型">开源的多模态视觉模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-01-14.png"
width="827"
height="717"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jingyaogong/minimind-v" target="_blank" rel="noopener"
>MiniMind-V&lt;/a>，是一款可以从零开始训练多模态视觉模型的开源项目。&lt;/p>
&lt;p>它提供详细的训练流程，仅用1.3块钱成本 + 1小时！即可训练出26M参数的超小多模态视觉语言模型，支持识图与对话。&lt;/p>
&lt;p>MiniMind-V 26M 参数的超轻量设计，提供从数据处理到指令微调的全流程代码。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>超轻量模型：仅 26M 参数（0.026B），约为 GPT-3 的 1/7000，单卡 3090 即可训练。&lt;/li>
&lt;li>多模态能力：支持单图和多图输入，结合文本进行对话。&lt;/li>
&lt;li>全流程开源：包含数据处理、预训练、SFT 和推理完整代码，支持数据集清洗和自定义配置。&lt;/li>
&lt;li>跨模态对齐：采用简单线性变换，将 CLIP 的 768 维视觉 token 对齐到 LLM 空间。&lt;/li>
&lt;li>易用接口：提供 OpenAI 兼容 API，可接入 FastGPT、OpenWebUI 等。&lt;/li>
&lt;/ul>
&lt;h3 id="浏览器中运行-linux-或其他操作系统">浏览器中运行 Linux 或其他操作系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-01-45.png"
width="690"
height="536"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="308px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.bellard.org/jslinux/" target="_blank" rel="noopener"
>jslinux&lt;/a>，是一个运行在网页中的虚拟机，可以让你在浏览器中运行老式操作系统，包括 win2000、dos、linux等。&lt;/p>
&lt;h3 id="面向-sql-生成和-rdbms-的-rag-框架">面向 SQL 生成和 RDBMS 的 RAG 框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-02-43.png"
width="814"
height="580"
loading="lazy"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="336px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/vanna-ai/vanna" target="_blank" rel="noopener"
>vanna&lt;/a>，这个 RAG 框架支持很多 RDBMS 包括 PostgreSQL，MySQL，Apache Hive，ClickHouse，Snowflake，Oracle，Microsoft SQL Server，BigQuery，SQLite，DuckDB 等等，并且可以自动获取数据库库表结构。&lt;/p>
&lt;p>它还有自我学习功能，正确的问题到 SQL 的对应关系被存储起来，可以使未来的结果更加准确。&lt;/p>
&lt;h3 id="微信公众号-markdown-编辑器">微信公众号 Markdown 编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-02-57.png"
width="690"
height="483"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jaywcjlove/wxmp" target="_blank" rel="noopener"
>wxpm&lt;/a>，开源免费的 Mardown 编辑器，支持 Markdown 所有基础语法、自定义 CSS 样式、多种主题选择、实时编辑预览以及色盘取色等等功能。&lt;/p>
&lt;p>提供 Docker 快速部署在线使用，轻松创建出一篇简洁美观大方的微信公众号图文。&lt;/p>
&lt;h3 id="相机镜头景深效果在线模拟">相机镜头景深效果在线模拟
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-03-07.png"
width="690"
height="315"
loading="lazy"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="525px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dofsimulator.net/en/" target="_blank" rel="noopener"
>dofsimulator&lt;/a>，这个工具可是太棒了，可以在线模拟各品牌相机镜头的景深效果，直接调整光圈、拍照距离、镜头焦段，实时预览景深效果。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 126 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-34-08.png" alt="Featured image of post 机器文摘 第 126 期" />&lt;h1 id="机器文摘-第-126-期">机器文摘 第 126 期
&lt;/h1>&lt;h3 id="比尔盖茨眼里的微软-50-年">比尔盖茨眼里的微软 50 年
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-30-38.png"
width="690"
height="502"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.gatesnotes.com/meet-bill/source-code/reader/microsoft-original-source-code" target="_blank" rel="noopener"
>微软50周年的回忆&lt;/a>，今年是微软诞生50周年，比尔盖茨写了这篇回忆文章，介绍了他怎么会创立这家公司，文末给出了微软第一个产品 Altair BASIC 的源码下载。 ​​​&lt;/p>
&lt;p>这篇文章回顾了比尔盖茨在成长过程中遇到的几位对他影响深远的老师，并详细描述了这些老师如何通过独特的教学方式和对他的信任，塑造了他的思维方式和未来成就。&lt;/p>
&lt;p>值得一提的是，这篇文章的排版颇具复古计算机风格。&lt;/p>
&lt;h3 id="提示词分享网站">提示词分享网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-31-19.png"
width="1301"
height="564"
loading="lazy"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="553px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://promptup.net/" target="_blank" rel="noopener"
>promptup&lt;/a>，这个网站汇集了市面上很多AI大佬写的非常优秀的提示词案例，比如：&lt;/p>
&lt;ol>
&lt;li>如何将文档变成可视化网页的提示词；&lt;/li>
&lt;li>SVG图形大师，如何使用 Claude 生成美妙的SVG 图；&lt;/li>
&lt;li>还有网页设计PPT大师的提示词，生成漂亮的网页 PPT；&lt;/li>
&lt;li>如何一句话生成好看的单词闪卡的提示词；&lt;/li>
&lt;li>去除 AI 味 Prompt。&lt;/li>
&lt;/ol>
&lt;h3 id="将网站内容转换为-mcp-服务器">将网站内容转换为 MCP 服务器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-31-57.png"
width="665"
height="395"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ryoppippi/sitemcp" target="_blank" rel="noopener"
>sitemcp&lt;/a>, 它能一键抓取整个网站内容并将其转化为 MCP 服务器，再搭配 Claude 等 MCP 客户端，就能直接对网站内容进行对话提问。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>支持一次性抓取整个网站，并缓存到本地&lt;/li>
&lt;li>可设置并发数提高抓取速度&lt;/li>
&lt;li>支持多种工具命名策略，便于 AI 客户端调用&lt;/li>
&lt;li>提供路径匹配功能，可选择性抓取特定页面&lt;/li>
&lt;li>支持内容选择器，确保提取页面中最有价值的内容&lt;/li>
&lt;/ul>
&lt;p>可通过命令行一键安装使用，并无缝集成到各种 MCP 客户端。&lt;/p>
&lt;h3 id="开源-ai-会议助手">开源 AI 会议助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-32-46.png"
width="706"
height="520"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Zackriya-Solutions/meeting-minutes" target="_blank" rel="noopener"
>metting-minutes&lt;/a>，它能实时捕获会议音频、进行转录并生成摘要，无需服务器所有处理在本地完成，确保数据隐私安全。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>实时捕获麦克风和系统音频&lt;/li>
&lt;li>使用本地 Whisper 模型进行即时语音转录&lt;/li>
&lt;li>支持多种 LLM 提供商，包括 Anthropic、Groq 和 Ollama&lt;/li>
&lt;li>完全本地处理，无需外部服务器，保护隐私&lt;/li>
&lt;/ul>
&lt;p>提供 Windows、macOS 系统安装包，下载即可使用。&lt;/p>
&lt;h3 id="零样本复刻任意人声">零样本复刻任意人声
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-33-09.png"
width="671"
height="326"
loading="lazy"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="493px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SparkAudio/Spark-TTS" target="_blank" rel="noopener"
>Spark-TTS&lt;/a> 基于 Qwen2.5 架构直出语音编码，零样本复刻任意人声，中英文混合生成丝滑无界。无需专业设备/海量数据，即刻生成媲美真人的多语言语音。 ​​​&lt;/p>
&lt;h3 id="awesome-rag">Awesome-RAG
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-33-43.png"
width="690"
height="2005"
loading="lazy"
class="gallery-image"
data-flex-grow="34"
data-flex-basis="82px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Danielskry/Awesome-RAG" target="_blank" rel="noopener"
>Awesome-RAG&lt;/a>，GitHub 上一份精心整理的检索增强生成（RAG）技术资源集合。&lt;/p>
&lt;p>这份列表系统整理了 RAG 相关的理论知识、实现方法、开发框架、关键技术以及评估指标等内容。&lt;/p>
&lt;p>从基本原理到高级技术详解，再到实现步骤，有助于我们更好学习与使用 RAG。&lt;/p>
&lt;h3 id="多平台直播流自动录制工具">多平台直播流自动录制工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-33-59.png"
width="690"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ihmily/StreamCap" target="_blank" rel="noopener"
>StreamCap&lt;/a>，一个基于FFmpeg的直播流录制客户端，可录制覆盖 40+ 国内外主流直播平台。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>系统支持：Windows 11/10 | macOS 12+ (x86/ARM)&lt;/li>
&lt;li>功能支持：支持批量录制、循环监控、定时监控、消息推送以及自动转码&lt;/li>
&lt;li>画质支持：蓝光、超清、高清、标清、流畅&lt;/li>
&lt;li>支持的保存格式：MP4、TS、FLV、MKV、MOV、MP3、WAV、M4A&lt;/li>
&lt;/ul>
&lt;p>已支持平台：&lt;/p>
&lt;ul>
&lt;li>国内平台（30+）：抖音、快手、虎牙、斗鱼、B站、小红书、YY、映客、Acfun、Blued、京东、淘宝&lt;/li>
&lt;li>海外平台（10+）：TikTok、Twitch、PandTV、Soop、Twitcasting、CHZZK、Shopee、Youtube、LiveMe、Flextv、Popkontv、Bigo&lt;/li>
&lt;/ul>
&lt;h3 id="音频可视化画布">音频可视化画布
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-34-08.png"
width="690"
height="411"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="402px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/RylanBot/melody-canvas" target="_blank" rel="noopener"
>melody-canvas&lt;/a>，开源音频可视化前端库。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>💕 音频可视化
&lt;ul>
&lt;li>基于 Web Audio API，实现音频分析算法&lt;/li>
&lt;li>支持多种类型元素的创建，提供灵活的自定义选项&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>💕 画布编辑
&lt;ul>
&lt;li>使用 FabricJS 库，实现可拖拽编辑器&lt;/li>
&lt;li>支持图片和文本的添加，方便组合搭配&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>💕 视频导出
&lt;ul>
&lt;li>使用基于 WebCodecs API 的 WebAV 库，实现在浏览器环境下加工视频&lt;/li>
&lt;li>支持视频在渲染的过程中，继续调整其它内容&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 125 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-36-42.png" alt="Featured image of post 机器文摘 第 125 期" />&lt;h1 id="机器文摘-第-125-期">机器文摘 第 125 期
&lt;/h1>&lt;h3 id="如何实现一个分词器">如何实现一个分词器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-36-11.png"
width="465"
height="241"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="463px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://juejin.cn/post/7397701403378155530" target="_blank" rel="noopener"
>如何实现一个分词器&lt;/a>，本文详细介绍了如何实现一个分词器，并探讨了其在自然语言处理和代码补全中的应用。&lt;/p>
&lt;p>通过理解BPE算法的原理和实现过程，我们不仅能够创建自定义的分词器，还能更好地适配和优化大语言模型的使用。&lt;/p>
&lt;p>本文提供的分词器实现方案不仅适用于代码补全工具，还可以扩展到其他需要文本处理的领域。&lt;/p>
&lt;h3 id="当广播电台成了软件商店1980年代的科技魔法">当广播电台成了“软件商店”：1980年代的科技魔法
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-36-42.png"
width="690"
height="425"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>
&lt;a class="link" href="https://newslttrs.com/yes-in-the-1980s-we-downloaded-games-from-the-radio" target="_blank" rel="noopener"
>通过广播下载游戏&lt;/a>，这篇文章讲述了1980年代英国的一项令人难以置信的技术现象。&lt;/p>
&lt;p>1980年代的某个深夜，英国的无线电波中突然响起一阵刺耳的尖叫——这不是恐怖电影配乐，而是一群孩子屏住呼吸等待的“魔法咒语”。他们把磁带机对准收音机，按下录音键，然后祈祷这段噪音能在明天变成一场太空射击游戏。&lt;/p>
&lt;p>这是真的。&lt;/p>
&lt;p>当时英国正经历家庭电脑革命，但问题是：市面上的ZX Spectrum、Commodore 64、BBC Micro彼此完全不兼容，软件像巴尔干半岛一样割裂。BBC电台的《The Chip Shop》节目组急中生智，从荷兰广播公司NOS引进了BASICODE——一种能让不同电脑“听懂同一种语言”的跨平台代码。用户只需先装一个“翻译器”，就能把广播里的噪音转化为程序。&lt;/p>
&lt;p>想象一下：深夜电台开始播放“嘟嘟声”，你用磁带录下来，插进录音机连上电脑，几分钟后屏幕上蹦出一个文字冒险游戏。虽然没有图形，但当像素文字告诉你“你发现了藏宝图！”时，那种心跳至今让老玩家怀念。&lt;/p>
&lt;blockquote>
&lt;p>当互联网让软件分发变成瞬间的事，BASICODE的尖叫渐渐消失在电波里。今天，当我在Facebook看到有人质疑这段历史时，才意识到：我们这一代人的童年，已经成了下一代人眼中的“科幻故事”。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在没有App Store的年代，我们用噪音编织了整个数字世界。&lt;/p>
&lt;/blockquote>
&lt;h3 id="mcp-中文资源合集">MCP 中文资源合集
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-37-45.png"
width="854"
height="701"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="292px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/yzfly/Awesome-MCP-ZH" target="_blank" rel="noopener"
>Awesome-MCP-ZH&lt;/a>，是一个关于MCP的中文资源合集，涵盖了MCP的基础知识、客户端、服务器以及相关工具和教程，旨在帮助中文用户快速上手MCP。&lt;/p>
&lt;h3 id="网易开源的-tts-语音合成项目">网易开源的 TTS 语音合成项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-40-06.png"
width="681"
height="528"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="309px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/netease-youdao/EmotiVoice" target="_blank" rel="noopener"
>EmotiVoice&lt;/a>，是网易有道开源的多语言、多声音和提示控制的文本到语音（TTS）系统。&lt;/p>
&lt;p>支持英语和中文，提供超过2000种声音，支持基于提示生成带有不同情感（如开心、悲伤、愤怒等）的语音。&lt;/p>
&lt;p>具备情感合成、语音克隆等功能，提供Web界面和OpenAl兼容的API，方便用户使用和开发者集成，适合用在语音助手、有声读物等多种场景。&lt;/p>
&lt;h3 id="帮你自动画架构图的-ai">帮你自动画架构图的 AI
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-40-18.png"
width="690"
height="460"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://halomate.ai/" target="_blank" rel="noopener"
>halomate&lt;/a>，一款收费 AI 绘图产品，可以根据文字生成图像，有别于其他文生图模型，这款产品能够根据文字描述帮助用户生成软件产品架构图、思维导图等专业图形。&lt;/p>
&lt;h3 id="开源跨设备文件共享工具">开源跨设备文件共享工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-40-55.png"
width="810"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="418px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/schollz/croc" target="_blank" rel="noopener"
>croc&lt;/a>，一款跨设备文件分享的开源免费工具，无需在同一网络下，允许任意两台电脑之间传输文件或文件夹，不限制大小，并提供端到端加密，更安全更快速地分享。&lt;/p>
&lt;p>支持多文件传输，以及中断后的断点续传功能。&lt;/p>
&lt;p>支持 Windows、Linux 和 macOS 一键安装使用。&lt;/p>
&lt;h3 id="基于-cloudflare-pages-的开源免费文件托管解决方案">基于 CloudFlare Pages 的开源免费文件托管解决方案
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-41-30.png"
width="807"
height="460"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;p>在写文章或教程时，我们经常需要插入大量的图片和文件，往往需要一个稳定且不限大小的图床。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/MarSeventh/CloudFlare-ImgBed" target="_blank" rel="noopener"
>CloudFlare ImgBed&lt;/a>，一个基于 CloudFlare Pages 的开源免费文件托管解决方案，可作为图床、文件床、网盘。&lt;/p>
&lt;p>提供上传、管理、读取、删除等全链路功能，并支持鉴权、目录、图片审查、随机图等各项特性。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持多种存储渠道（Telegram Bot、Cloudflare R2、S3 等）与多种上传方式&lt;/li>
&lt;li>支持目录功能、上传认证、图片审查、防滥用与 IP 黑名单&lt;/li>
&lt;li>提供丰富 API 接口，包含上传 API 与随机图 API&lt;/li>
&lt;li>可自定义网站外观、背景、图床名称、Logo 等界面元素&lt;/li>
&lt;li>完全基于 Cloudflare 免费额度，无需额外购买服务器和域名&lt;/li>
&lt;/ul>
&lt;h3 id="自媒体平台自动化工具">自媒体平台自动化工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-41-49.png"
width="797"
height="467"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dreammis/social-auto-upload" target="_blank" rel="noopener"
>social-auto-upload&lt;/a>，可以自动化发布视频到自媒体平台。&lt;/p>
&lt;p>支持抖音、小红书、视频号、tiktok、youtube、bilibili等&lt;/p>
&lt;p>支持定时上传和计划任务上传&lt;/p>
&lt;h3 id="从零开始的-llama-32">从零开始的 Llama 3.2
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-42-29.png"
width="1328"
height="728"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/p>
&lt;p>想学习开源项目，自己撸一遍才能知其所以然。&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/rasbt/llama-3.2-from-scratch" target="_blank" rel="noopener"
>llama-3.2-from-scratch&lt;/a>，这个huggingface项目介绍了一个从零开始实现的 PyTorch 版本的 Llama 3.2 文本模型，代码简洁易懂，适合学习和研究。&lt;/p>
&lt;p>它提供了详细的使用指南，包括模型设置、权重下载、文本生成等步骤。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 124 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/</link><pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-35-52.png" alt="Featured image of post 机器文摘 第 124 期" />&lt;h1 id="机器文摘-第-124-期">机器文摘 第 124 期
&lt;/h1>&lt;h3 id="mcp-是什么">MCP 是什么？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-31-38.png"
width="740"
height="288"
loading="lazy"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="616px"
>&lt;/p>
&lt;p>最近 MCP 协议实在是太火了，它到底是什么？与智能体、LLM 到底是什么关系？&lt;/p>
&lt;p>&lt;a class="link" href="https://read.highgrowthengineer.com/p/mcps-simply-explained" target="_blank" rel="noopener"
>MCP（模型上下文协议）：5 分钟简单解释&lt;/a>，MCP，即模型上下文协议 ，本文将为您简化 MCP 的含义，向您展示如何使用它来提高工作效率，并解释其幕后工作原理。&lt;/p>
&lt;p>简而言之，MCP 是一种可以让 LLM 大语言模型更轻松地与外部工具集成的方式。&lt;/p>
&lt;p>默认情况下，当您与 Claude、ChatGPT 或 Cursor IDE 对话时，如果您要求它“从 Sentry 中提取最新错误并修复它们”，它将不知道您在说什么。同样，它也不知道如何做以下任何事情：&lt;/p>
&lt;ul>
&lt;li>阅读 PM 提供的 PRD 并编写符合要求的测试&lt;/li>
&lt;li>在 Slack 中阅读 #alerts 频道中的消息并进行调试&lt;/li>
&lt;li>为你发现需要重构的一些代码创建 JIRA 票证&lt;/li>
&lt;/ul>
&lt;p>MCP 可让您完成所有这些工作。这是工程师可以遵循的标准协议，以向公众展示这些工具。&lt;/p>
&lt;p>有两个关键组成部分：&lt;/p>
&lt;ul>
&lt;li>MCP 服务器： Sentry、Slack、JIRA、Gmail 等提供商围绕遵循 MCP 协议的 API 设置适配器 。任何工程师也可以开源自己的服务器！&lt;/li>
&lt;li>MCP 客户端： 您使用的各种客户端和应用程序（如 Cursor）知道如何使用“MCP 协议”进行通信。&lt;/li>
&lt;/ul>
&lt;h3 id="mcp-编程极速入门中文教程">MCP 编程极速入门中文教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-32-15.png"
width="721"
height="495"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://github.com/liaokongVFX/MCP-Chinese-Getting-Started-Guide" target="_blank" rel="noopener"
>MCP-Chinese-Started-Guide&lt;/a>，这有一份关于 MCP 的中文教程，作者一步步讲解了如何从开发 MCP 服务器，到调试 MCP 服务器，再到结合
DeepSeek + Cline 构建图文生成实例。&lt;/p>
&lt;blockquote>
&lt;p>模型上下文协议（MCP）是一个创新的开源协议，它重新定义了大语言模型（LLM）与外部世界的互动方式。MCP 提供了一种标准化方法，使任意大语音模型能够轻松连接各种数据源和工具，实现信息的无缝访问和处理。MCP 就像是 AI 应用程序的 USB-C 接口，为 AI 模型提供了一种标准化的方式来连接不同的数据源和工具。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识库增强语言模型">知识库增强语言模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-33-20.png"
width="964"
height="510"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="453px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/KBLaM" target="_blank" rel="noopener"
>KBLaM&lt;/a>，是微软最新推出的一种利用外部知识进行增强的新方法。与检索增强生成（RAG）不同，KBLaM 消除了外部检索模块；与上下文学习不同，它的计算开销与 KB 大小成线性关系，而不是二次关系。&lt;/p>
&lt;p>KBLaM 相当于给AI配了个&amp;quot;活字典&amp;quot;，解决了LLM高效整合外部知识的问题。&lt;/p>
&lt;p>KBLaM可以随时更新，不用重新训练。它把外部知识转换成连续的键值向量对，直接嵌入到模型的注意力层中，从而实现隐式检索，当知识库更新时，只需要更新对应的键值对即可，无需重新训练整个模型。&lt;/p>
&lt;p>这种方法比RAG更直接，不需要外部检索；比上下文学习更高效，可以处理更多知识；比微调更灵活，可以随时更新知识。&lt;/p>
&lt;h3 id="在线绘图板但是可以做动画">在线绘图板，但是可以做动画
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-33-43.png"
width="601"
height="725"
loading="lazy"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="198px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://inscribed.app/" target="_blank" rel="noopener"
> Inscribed&lt;/a>，可生成动画的在线绘图板。&lt;/p>
&lt;p>功能特点:&lt;/p>
&lt;ul>
&lt;li>🎨 由 Excalidraw 驱动的交互式绘图画布&lt;/li>
&lt;li>⌨️ 支持键盘快捷键&lt;/li>
&lt;li>📏 可自定义文档尺寸&lt;/li>
&lt;li>🖼️ 图片导入和处理&lt;/li>
&lt;li>🔤 集成 Google 字体&lt;/li>
&lt;li>🎭 演示模式支持&lt;/li>
&lt;li>📤 支持导出 GIF 动画&lt;/li>
&lt;li>💾 数据导出/导入功能&lt;/li>
&lt;li>🔗 支持通过 Gist 托管的 iframe 嵌入&lt;/li>
&lt;/ul>
&lt;h3 id="开源音乐生成模型">开源音乐生成模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-34-09.png"
width="690"
height="253"
loading="lazy"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="654px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ASLP-lab/DiffRhythm" target="_blank" rel="noopener"
>Di♪♪Rhythm(中文名：谛韵）&lt;/a>，是第一个能够创作完整歌曲的开源基于扩散的音乐生成模型。&lt;/p>
&lt;p>速度确实快，用base模型20s就能生成出来1m35s的音乐，需要16g显存。&lt;/p>
&lt;p>以后写歌更方便了。 ​​​&lt;/p>
&lt;h3 id="开源-b-站历史记录管理工具">开源 B 站历史记录管理工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-34-25.png"
width="690"
height="312"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="530px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/2977094657/BilibiliHistoryFetcher" target="_blank" rel="noopener"
>BilibiliHistoryFetcher&lt;/a>，这是一个B站历史记录管理工具，解决了B站历史记录只能保存最近几个月、无法复杂筛选、没有数据分析等痛点。它使用Python开发，采用SQLite数据库存储，支持视频下载、数据分析、AI摘要等功能&lt;/p>
&lt;p>获取b站历史记录，保存到本地数据库，可下载对应视频及时存档，生成详细的年度总结，自动化任务部署到服务器实现自动同步，以及自动发送日志邮件。&lt;/p>
&lt;h3 id="ai-直接生成二进制可执行文件">AI 直接生成二进制可执行文件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-35-27.png"
width="1178"
height="389"
loading="lazy"
class="gallery-image"
data-flex-grow="302"
data-flex-basis="726px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SamsungSAILMontreal/ByteCraft" target="_blank" rel="noopener"
>ByteCraft&lt;/a>，我们已经见多了AI生成文字、图像、视频，这个项目不太一样，是让AI直接生成可执行的二进制文件。&lt;/p>
&lt;p>ByteCraft，是通过在 4 个 GPU 上对 7B 参数的LLM（Qwen2.5）进行微调，以 32K 的生成上下文长度训练了 4 个月，以生成基于文本描述的视频游戏和动画的二进制文件。&lt;/p>
&lt;blockquote>
&lt;p>想象一下这样一个世界：你可以编写一个描述你想要的视频游戏或动画的提示，然后生成一个功能齐全的可执行文件。我们通过训练一个模型来生成视频游戏和动画的字节，首次尝试实现这个疯狂的目标！&lt;/p>
&lt;/blockquote>
&lt;h3 id="阿里巴巴集团统一实验室制作的数字人模型">阿里巴巴集团统一实验室制作的数字人模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-35-52.png"
width="705"
height="392"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://lingtengqiu.github.io/LHM/" target="_blank" rel="noopener"
>LHM&lt;/a>，一个能从单张图像几秒钟重建出可动画化的3D数字人模型，支持实时渲染、姿态控制。&lt;/p>
&lt;p>一张照片几秒钟创建出一个3D数字人，这个数字人可以做各种动作，效果看起来逼真，衣服、头发、面部等细节保持的很好。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 123 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/</link><pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-08-27.png" alt="Featured image of post 机器文摘 第 123 期" />&lt;h1 id="机器文摘-第-123-期">机器文摘 第 123 期
&lt;/h1>&lt;h3 id="一个-开源-低成本2000-人形机器人">一个 开源 低成本(~¥2000) “人形”机器人
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-03-46.png"
width="690"
height="618"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/timqian/bambot" target="_blank" rel="noopener"
>Bambot&lt;/a>，是一个开源项目，旨在以廉价的硬件拼装出可用的“人形”机器人。&lt;/p>
&lt;p>我看了项目视频，虽然距离“人形”还有不少差距，但是从可用性上来说，还是有一些东西的，主要是价格便宜，全部硬件加起来不超过 300 美元。&lt;/p>
&lt;h3 id="绝版游戏保护工程">绝版游戏保护工程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-05-06.png"
width="557"
height="681"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>
&lt;a class="link" href="https://github.com/skywind3000/preserve-cd" target="_blank" rel="noopener"
>preserve-cd&lt;/a>，该项目不仅收集了 64+ 款几乎绝版的精品 DOS 游戏，还有 100+ 款上手简单但超级耐玩的 Windows 和 Flash 小游戏。&lt;/p>
&lt;blockquote>
&lt;p>今天互联网上的内容，由于各种原因，正在以越来越快的速度消失，而新一代网民们，却并没有备份和记录的习惯及意识。不远的将来，会有一天，当你特别想找一个东西却搜尽互联网都找不到时就来麻烦了，本项目立足于将这样的损失最小化。&lt;/p>
&lt;/blockquote>
&lt;p>此外，该项目还有一个兄弟项目&lt;a class="link" href="https://github.com/skywind3000/preserve-iso" target="_blank" rel="noopener"
>绝版软件保护工程&lt;/a>，收录了很多“历史上”经典的开发环境相关工具及套件。&lt;/p>
&lt;h3 id="开源圆角等宽字体适合编程">开源圆角等宽字体（适合编程）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-05-37.png"
width="832"
height="801"
loading="lazy"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="249px"
>
&lt;a class="link" href="https://github.com/subframe7536/maple-font" target="_blank" rel="noopener"
>Maple Mono&lt;/a>：开源圆角等宽字体，中英文宽度完美2:1，细粒度的自定义选项 。&lt;/p>
&lt;p>字体作者说：&lt;/p>
&lt;blockquote>
&lt;p>市面上有这么多优秀的等宽字体，经由专业的设计师设计，看起来整洁美观。但是，当他真正把它们作为主要字体用来写代码时，他发现其中很多的字体总有一些地方让他不太满意，例如：&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>JetBrains Mono 虽然字形设计精炼、排版整齐划一，但是风格有些死板。&lt;/li>
&lt;li>Fira Code 虽然有丰富的连字，但是缺少斜体，自动生成的斜体角度过大。&lt;/li>
&lt;li>Victor Mono 虽然具有手写风格的斜体，但是其稍显夸张的风格让他有些难以接受。&lt;/li>
&lt;li>Sarasa Gothic 虽然中英文 2:1 等宽，但是英文部分过于狭窄，阅读体验不太好。&lt;/li>
&lt;li>很少有等宽字体设计有圆角。&lt;/li>
&lt;li>很少有等宽字体对 Nerd-Font 和中文优先支持。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>因此，他制作了这一款字形整洁、拥有手写风格的斜体、细粒度自定义配置、内置 Nerd-Font、中英文 2:1 等宽的字体，用于提升自己的工作效率，希望它也能对其他人有所帮助。&lt;/p>
&lt;/blockquote>
&lt;h3 id="执行网页数据抓取的-mcp-server">执行网页数据抓取的 MCP Server
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-06-54.png"
width="839"
height="843"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jae-jae/fetcher-mcp" target="_blank" rel="noopener"
>fetcher-mcp&lt;/a>，一个基于Playwright无头浏览器的网页内容抓取MCP server项目。&lt;/p>
&lt;p>支持JavaScript，用Playwright执行JavaScript，能处理动态网页内容和现代网页应用&lt;/p>
&lt;p>内置Readability算法，可自动提取网页主要内容，去除广告、导航等非核心元素&lt;/p>
&lt;p>可并行处理，支持HTML和Markdown输出&lt;/p>
&lt;p>可自动屏蔽不必要的资源，图片、样式表、字体、媒体等。&lt;/p>
&lt;p>&lt;a class="link" href="https://onevcat.com/2025/02/mcp/" target="_blank" rel="noopener"
>MCP 是什么，可以看这篇文章&lt;/a>：MCP (Model Context Protocol，模型上下文协议) 是由 Anthropic 在 2024 年底推出的一种开放协议，它通过提供一种标准化的接口，旨在通过标准化的接口实现大语言模型 (LLM) 与外部数据源及工具的无缝集成。&lt;/p>
&lt;h3 id="专门矢量作图的-ai-模型">专门矢量作图的 AI 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-08-03.png"
width="1046"
height="777"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/joanrod/star-vector" target="_blank" rel="noopener"
>StarVector&lt;/a>， 是一个专为 SVG 向量图形生成 设计的基础模型，其目标是：&lt;/p>
&lt;p>用大模型（VLM）从图像或文本中理解语义结构，并自动生成标准可编辑的 SVG代码，适用于图标、技术图、LOGO、表情等。&lt;/p>
&lt;p>也就是将 SVG 矢量图的生成转化为“代码生成任务”，支持从图像或文本生成高质量 SVG 文件。&lt;/p>
&lt;p>StarVector 使用多模态架构来处理图像和文本。&lt;/p>
&lt;p>执行图像到 SVG（或图像矢量化）时，图像被投影到视觉标记中，并生成 SVG 代码。&lt;/p>
&lt;p>执行文本到 SVG 时，模型仅接收文本指令（不提供图像），并创建一个新的 SVG。&lt;/p>
&lt;h3 id="用于激光点云矢量化的大模型">用于激光点云矢量化的大模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-08-27.png"
width="690"
height="454"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="364px"
>
&lt;a class="link" href="https://huggingface.co/manycore-research/SpatialLM-Llama-1B" target="_blank" rel="noopener"
>SpatialLM&lt;/a> 是一种 3D 大型语言模型，旨在处理 3D 点云数据并生成结构化的 3D 场景理解输出。&lt;/p>
&lt;p>这些输出包括建筑元素，如墙壁、门、窗户和定向物体边界框及其语义类别。&lt;/p>
&lt;p>与以前需要专门设备进行数据收集的方法不同，SpatialLM 可以处理来自各种来源的点云，例如单目视频序列、RGBD 图像和 LiDAR 传感器。&lt;/p>
&lt;p>这种多模态架构有效地弥合了非结构化 3D 几何数据和结构化 3D 表示之间的差距，提供了高级语义理解。&lt;/p>
&lt;p>它增强了空间推理能力，适用于具象机器人、自主导航和其他复杂的 3D 场景分析任务中的应用。&lt;/p>
&lt;h3 id="控制-unity-游戏引擎的-mcp-server-也来了">控制 Unity 游戏引擎的 MCP Server 也来了
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-10-29.png"
width="538"
height="295"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>
继 &lt;a class="link" href="https://github.com/ahujasid/blender-mcp" target="_blank" rel="noopener"
>blender-mcp&lt;/a> 之后，果然也有人做出了&lt;a class="link" href="https://github.com/justinpbarnett/unity-mcp" target="_blank" rel="noopener"
>Unity MCP&lt;/a>，通过 LLM 对话来控制 Unity 去设计游戏。&lt;/p>
&lt;p>Unity MCP Server 提供了 Unity（通过 C#）与 Python 服务器之间的双向通信通道，支持：&lt;/p>
&lt;ul>
&lt;li>资产管理：以编程方式创建、导入和操作 Unity 资产。&lt;/li>
&lt;li>场景控制：管理场景、对象及其属性。&lt;/li>
&lt;li>材质编辑：修改材质及其属性。&lt;/li>
&lt;li>脚本集成：查看、创建和更新 Unity 脚本。&lt;/li>
&lt;li>编辑器自动化：控制 Unity 编辑器功能，如撤销、重做、播放和构建。&lt;/li>
&lt;/ul>
&lt;p>项目适合希望利用LLMs来增强其 Unity 项目或自动化重复任务的开发者。&lt;/p>
&lt;h3 id="大模型微调数据集创建工具">大模型微调数据集创建工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-11-07.png"
width="690"
height="416"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="398px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ConardLi/easy-dataset" target="_blank" rel="noopener"
>Easy DataSet&lt;/a>，提供了直观的界面，上传文件，智能分割内容，生成问题，并为模型微调生成高质量的训练数据。&lt;/p>
&lt;p>此外，还支持导出 Alpaca、JSON 等多种格式数据集，同时兼容所有遵循 OpenAI 格式的 LLM API。&lt;/p>
&lt;p>提供 Windows、MacOS 和 Linux 安装包下载，开箱即用，也支持 Docker 部署和 NPM 安装。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 122 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-46-46.png" alt="Featured image of post 机器文摘 第 122 期" />&lt;h1 id="机器文摘-第-122-期">机器文摘 第 122 期
&lt;/h1>&lt;h3 id="被勒索软件加密的文件有破解可能吗">被勒索软件加密的文件有破解可能吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-44-32.png"
width="517"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="357px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tinyhack.com/2025/03/13/decrypting-encrypted-files-from-akira-ransomware-linux-esxi-variant-2024-using-a-bunch-of-gpus/" target="_blank" rel="noopener"
>用 GPU 解密被勒索软件加密的文件&lt;/a>，作者最近帮助一家公司从 Akira 勒索软件中恢复了数据，而无需支付赎金。为此专门写了一篇博客，分享他是如何做到的，以及完整的源代码。&lt;/p>
&lt;p>这篇文章深入探讨了如何利用 GPU 破解 Akira 勒索软件（Linux/ESXI 2024 变种）加密的文件，无需支付赎金。文章首先介绍了 Akira 勒索软件的背景，指出该变种使用当前时间（纳秒）作为种子进行加密，且每个文件都有唯一的密钥。作者通过分析恶意软件的代码和加密原理，发现可以通过暴力破解时间戳来恢复文件。&lt;/p>
&lt;p>文章详细描述了暴力破解的可行性、实施步骤以及相关代码和工具的使用。作者还分享了如何获取明文样本、测量服务器速度、划分工作负载、租用 GPU 等实用信息。此外，文章还提供了恢复文件的具体步骤，包括获取时间戳、密文和明文，以及如何运行暴力破解和解密工具。&lt;/p>
&lt;p>作者在文中强调了这一过程的复杂性和挑战性，同时也分享了成功恢复文件的经验和教训。&lt;/p>
&lt;p>文章最后指出，虽然大多数勒索软件情况下无法在没有密钥的情况下恢复数据，但有时通过深入研究和分析，仍有可能找到解决方案。&lt;/p>
&lt;h3 id="大模型核心概念科普文token-是什么">大模型核心概念科普文：Token 是什么?
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-44-54.png"
width="657"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mp.weixin.qq.com/s/SXT2wuM0sox34PRrqWWAzw" target="_blank" rel="noopener"
>Token 是什么?&lt;/a>&lt;/p>
&lt;ol>
&lt;li>Token（标记）&lt;/li>
&lt;/ol>
&lt;p>定义：文本处理的基本单位，1个中文≈1 Token，1英文≈0.3 Token
作用：模型通过Token处理文本，直接影响上下文长度计算
2. 上下文长度（Context Window）&lt;/p>
&lt;p>定义：单次推理可处理的输入+输出Token总量上限（如DeepSeek为64K≈6万字）
特点：
多轮对话需拼接历史记录，超出限制时触发&amp;quot;上下文截断&amp;quot;（丢弃早期内容）
实际使用中服务端自动截断，用户感知为模型&amp;quot;遗忘&amp;quot;早期对话
3. 最大输出长度&lt;/p>
&lt;p>定义：单次生成内容的最大Token数（如DeepSeek为8K≈8000字）
输入限制：上下文长度 - 最大输出长度 = 最大输入限制（如64K-8K=56K）
典型场景策略&lt;/p>
&lt;p>短输入长输出：输入1K时最多输出63K（需质量检测）
长输入短输出：输入60K文档时最多输出4K摘要
多轮对话管理：通过截断保留最新内容（如累计64K时新输入5K，则丢弃最早5K）
技术原理&lt;/p>
&lt;p>受三大因素限制：
位置编码范围（如RoPE、ALiBi）
自注意力机制计算复杂度
KV Cache显存占用与序列长度正相关
厂商对比&lt;/p>
&lt;p>OpenAI GPT-4：上下文128K，输出4K
Anthropic Claude 3：上下文200K，输出4K
DeepSeek：上下文64K，输出8K
使用建议&lt;/p>
&lt;p>长文本生成需分段请求
关键信息尽量放在对话后期
敏感场景主动设置max_tokens参数
重要内容建议本地存储避免依赖模型记忆
（注：文中数据以DeepSeek模型为例，不同厂商参数存在差异）&lt;/p>
&lt;h3 id="智能体设计引擎">智能体设计引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-45-15.png"
width="690"
height="970"
loading="lazy"
class="gallery-image"
data-flex-grow="71"
data-flex-basis="170px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/emcie-co/parlant" target="_blank" rel="noopener"
>Parlant&lt;/a>，这是一款对话式 AI 引擎，它利用行为指南、运行时监督等，让开发人员能够控制面向用户的 AI Agent。&lt;/p>
&lt;p>来源：&lt;a class="link" href="https://weibo.com/2169039837/PisZ1trIm" target="_blank" rel="noopener"
>@karminski-牙医&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>相信大家都打过移动客服，客服会根据你按的数字键进入下一个对话。这个工具的功能类似，你可以预设用户的提问，然后针对每个提问场景来编写功能，比如是RAG查询还是调用函数去给客户订票等等。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>估计企业客户会对这个框架比较感兴趣，用来搭建自己的智能客服。&lt;/p>
&lt;/blockquote>
&lt;h3 id="像素级精度复制任何ui界面">像素级精度复制任何UI界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-45-44.png"
width="522"
height="304"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="412px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://Same.dev" target="_blank" rel="noopener"
>Same dev&lt;/a>，宣称可以以像素级精度复制任何用户界面（UI），只需提供网页 URL、截图或设计文件（如 Figma），即可生成对应的代码，确保视觉效果与原始界面高度一致。&lt;/p>
&lt;p>通过 AI 驱动，网页链接 将 UI 转化为可运行的代码，支持多种前端技术栈。&lt;/p>
&lt;p>支持的框架包括 HTML/CSS、React、Tailwind CSS 等&lt;/p>
&lt;h3 id="为大模型提供浏览器自动化能力的工具">为大模型提供浏览器自动化能力的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-46-22.png"
width="690"
height="584"
loading="lazy"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="283px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/executeautomation/mcp-playwright" target="_blank" rel="noopener"
>Playwright MCP Server&lt;/a>，通过模型上下文协议（MCP）服务器，让 LLM 可以与网页交互、截取屏幕截图、在真实浏览器环境中执行 JavaScript，实现智能 AI 网页浏览和操作。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>为 Claude 等 LLM 提供浏览器自动化能力&lt;/li>
&lt;li>支持与网页交互、表单填写和导航操作&lt;/li>
&lt;li>能够截取网页截图，帮助 AI 理解网页内容&lt;/li>
&lt;li>支持在浏览器环境中执行 JavaScript 代码&lt;/li>
&lt;li>集成 Smithery 和 mcp-get 等工具，简化安装配置&lt;/li>
&lt;/ul>
&lt;h3 id="让大模型操作-blender-自动建模的工具">让大模型操作 Blender 自动建模的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-46-46.png"
width="526"
height="305"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ahujasid/blender-mcp" target="_blank" rel="noopener"
>BlenderMCP&lt;/a>，一个通过 MCP 实现 Claude 直接操控 Blender 的开源项目：BlenderMCP。&lt;/p>
&lt;p>只需简单的提示词，即可让 Claude 控制 Blender 自动进行 3D 建模、场景创建和模型操作，实现 AI 辅助 3D 内容的创作。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>双向通信：Claude AI 可直接与 Blender 进行实时交互和控制&lt;/li>
&lt;li>对象操作：创建、修改、删除 Blender 中的 3D 对象&lt;/li>
&lt;li>材质控制：应用和修改材质与颜色属性&lt;/li>
&lt;li>场景检查：获取当前 Blender 场景的详细信息&lt;/li>
&lt;li>代码执行：从 Claude 在 Blender 中运行 Python 代码&lt;/li>
&lt;/ul>
&lt;p>提供简单的安装步骤，需先安装 uv 包管理器，然后将插件添加到 Blender 中，并在 Claude 设置中配置 MCP 服务。&lt;/p>
&lt;p>然后输入：&amp;ldquo;创建一个低面数地牢场景，里面有一条龙守卫着一锅金子&amp;rdquo;，Claude 就能直接控制 Blender 创建完整的 3D 场景。&lt;/p>
&lt;h3 id="一个开源的-mcp-客户端工具">一个开源的 MCP 客户端工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-47-28.png"
width="824"
height="462"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/CopilotKit/open-mcp-client" target="_blank" rel="noopener"
>Open MCP Client&lt;/a>，能让我们轻松地在任何应用中与 MCP 服务器进行交互的客户端，只需从 Composio 获取一个 URL 即可快速连接。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>基于网页的 MCP 客户端，可直接在浏览器中使用；&lt;/li>
&lt;li>开源客户端库，可轻松集成到任何应用程序中；&lt;/li>
&lt;li>使用 CopilotKit 构建客户端和交互层；&lt;/li>
&lt;li>集成 LangChain LangGraph ReAct 智能体协调 MCP 调用；&lt;/li>
&lt;li>仅需 40 行代码即可实现 MCP 服务器的连接功能。&lt;/li>
&lt;/ul>
&lt;p>感兴趣的可以部署在 Vercel 平台上，或者直接访问给出体验链接，也可以选择集成到自己的应用中使用。&lt;/p>
&lt;h3 id="llm-微调教程">LLM 微调教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-48-38.png"
width="802"
height="727"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="264px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unsloth.ai/get-started/fine-tuning-guide" target="_blank" rel="noopener"
>Fine-tuning Guide&lt;/a>，一个指南来教您如何正确地微调 LLM！&lt;/p>
&lt;p>主要内容：&lt;/p>
&lt;ul>
&lt;li>选择正确的参数和训练方法&lt;/li>
&lt;li>RL、GRPO、DPO 和 CPT&lt;/li>
&lt;li>数据准备、过度拟合和评估&lt;/li>
&lt;li>使用 Unsloth 进行训练并在 vLLM、Ollama、Open WebUI 上部署&lt;/li>
&lt;/ul>
&lt;h3 id="网易云音乐无损解析开源工具">网易云音乐无损解析开源工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-48-55.png"
width="690"
height="776"
loading="lazy"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="213px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Suxiaoqinx/Netease_url" target="_blank" rel="noopener"
>Netease_url&lt;/a>，只需复制粘贴歌曲链接，即可解析各种音质，包括超清母带、沉浸环绕声等高质量音质，并可打包下载歌曲文件、封面图以及歌词等。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>支持多种音质解析，从标准到超清母带全覆盖；&lt;/li>
&lt;li>提供 GUI 模式和 API 模式两种使用方式；&lt;/li>
&lt;li>自动打包封面图和歌词，一次下载全部资源；&lt;/li>
&lt;li>可通过命令行参数自定义音质和解析方式。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 121 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/</link><pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-03-07.png" alt="Featured image of post 机器文摘 第 121 期" />&lt;h1 id="机器文摘-第-121-期">机器文摘 第 121 期
&lt;/h1>&lt;h3 id="永不落伍的技能">永不落伍的技能
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-16-57-04.png"
width="2415"
height="622"
loading="lazy"
class="gallery-image"
data-flex-grow="388"
data-flex-basis="931px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.autodidacts.io/troubleshooting/" target="_blank" rel="noopener"
>《故障排除：永不落伍的技能》&lt;/a>，本文探讨了故障排除（troubleshooting）作为一种核心技能的重要性，并详细介绍了如何提升这一技能。&lt;/p>
&lt;p>故障排除是系统性地确定系统中不期望行为的原因并加以修复的过程，它在多个领域中都具有普遍适用性。&lt;/p>
&lt;p>文章通过一系列具体的步骤和策略，如“后退一步”“确保你在调整正确的琴弦”“确定流程”“观察症状”“隔离问题”等，指导读者如何更有效地进行故障排除。&lt;/p>
&lt;p>此外，作者还讨论了如何通过缩短反馈循环、减少噪声、记录问题等方式提高效率，并指出故障排除能力可以通过实践和反思得到提升。&lt;/p>
&lt;h3 id="intel-arc-显卡也能跑-deepseek-r1-满血版大模型了">intel arc 显卡也能跑 deepseek-r1 满血版大模型了
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-16-57-35.png"
width="579"
height="474"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="293px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/intel/ipex-llm/blob/main/docs/mddocs/Quickstart/llamacpp_portable_zip_gpu_quickstart.zh-CN.md" target="_blank" rel="noopener"
>使用 IPEX-LLM 在 Intel GPU 运行 llama.cpp Portable Zip&lt;/a>，本指南演示如何使用 llama.cpp portable zip 通过 ipex-llm 在 Intel GPU 上直接免安装运行。&lt;/p>
&lt;p>使用最新版 llama.cpp Portable Zip 可以在 Xeon 上通过1到2张 Arc A770 GPU 运行 DeepSeek-R1-671B-Q4_K_M ​​​&lt;/p>
&lt;h3 id="本地化智能学习助手">本地化智能学习助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-16-58-39.png"
width="1211"
height="794"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://wisemind-ai.com/" target="_blank" rel="noopener"
>WiseMindAI&lt;/a>，是一款融合了 AI 功能的本地知识库产品。创建知识库并总结📑、与知识库对话💬、生成知识卡片📏，全都能轻松搞定！&lt;/p>
&lt;p>如果你使用过 ima、Cherry Studio，应该会喜欢 WiseMindAI，它就像是 ima + Cherry Studio 的本地化升级版，功能更强大，使用也更安心～&lt;/p>
&lt;p>数据完全本地化，支持文档总结、对话、笔记、海报、10+个AI大模型等收起。&lt;/p>
&lt;p>&lt;a class="link" href="https://mp.weixin.qq.com/s/FmvGxFPKNjhAwD7M2OTaHw" target="_blank" rel="noopener"
>作者还写了一篇文章带你快速掌握WiseMindAI&lt;/a>&lt;/p>
&lt;h3 id="关于大模型的电子书">关于大模型的电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-16-59-07.png"
width="491"
height="650"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="181px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://luhengshiwo.github.io/LLMForEverybody/" target="_blank" rel="noopener"
>LLMForEverybody&lt;/a>&lt;/p>
&lt;h3 id="在线文件格式转换平台">在线文件格式转换平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-00-00.png"
width="1127"
height="640"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="422px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.alltoall.net" target="_blank" rel="noopener"
>alltoall&lt;/a>，最全类型的在线文件转换平台，免费、快速，支持200+文件格式的转换、压缩、AI抠图等。虽然对文件大小有一定限制，但日常使用足够了。&lt;/p>
&lt;h3 id="一款-ai-语音增强与转换工具">一款 AI 语音增强与转换工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-01-00.png"
width="916"
height="850"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="258px"
>
&lt;a class="link" href="https://xiaohu.ai/c/ai-23cc23/micdrop-ai-5ec77392-9592-4925-80ff-d5cbbe7ecdc5" target="_blank" rel="noopener"
>MicDrop&lt;/a>，一款 AI 语音增强与转换工具，可以将你的歌声实时转换成录影棚级别的质量&lt;/p>
&lt;p>✅ 实时变声，无需后期处理 🎙️
✅ 将你的声音变成各种声音，创作独特音效 🎷🎻
✅ AI 自动和声，让你的作品更饱满 🎼
✅ 一键提升录音质量，适用于直播、播客、电影配音 🎬
✅ 免版税声音库，可自由商用 💰&lt;/p>
&lt;p>你只用手机录了一段歌声，MicDrop 可以让它听起来像是在录音棚里录制的专业配音！&lt;/p>
&lt;p>它可与所有主流数字音频工作站（DAW）兼容，支持 AU 和 VST3 插件格式。&lt;/p>
&lt;h3 id="本地化的-ai-桌面应用">本地化的 AI 桌面应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-01-30.png"
width="690"
height="455"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/signerlabs/klee-client" target="_blank" rel="noopener"
>Klee&lt;/a>，这款应用内置 RAG 知识库和 Markdown 笔记支持，让我们能在本地运行开源大模型，完全离线使用且零数据收集，保护隐私安全。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>可下载并在桌面运行开源 LLM 模型&lt;/li>
&lt;li>完全离线使用，零数据收集，保障隐私安全&lt;/li>
&lt;li>内置 Markdown 笔记功能，便于记录和整理思路&lt;/li>
&lt;li>支持文件和文件夹知识库，建立个性化 AI 助手&lt;/li>
&lt;li>基于 Ollama 和 LlamaIndex 构建，运行快速高效&lt;/li>
&lt;/ul>
&lt;p>提供各平台安装包，直接下载安装即可使用，也支持从源码构建安装。&lt;/p>
&lt;h3 id="开源音乐生成模型">开源音乐生成模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-02-28.png"
width="964"
height="521"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="444px"
>
&lt;a class="link" href="https://github.com/smthemex/ComfyUI_YuE" target="_blank" rel="noopener"
>YUE&lt;/a>，香港科技大学开源的音乐模型，可以作为著名AI音乐应用suno的平替。&lt;/p>
&lt;p>这个模型专为音乐生成而设计，专门用于将歌词转换为完整歌曲 （lyrics2song）。&lt;/p>
&lt;p>它可以生成一首完整的歌曲，持续几分钟，其中包括朗朗上口的音轨和伴奏音轨。&lt;/p>
&lt;p>YuE 能够对不同的流派/语言/声乐技巧进行建模，无论是流行乐，是是重金属。&lt;/p>
&lt;p>同时，也可以生成人声，包括中文、英文、韩文、日文等等。&lt;/p>
&lt;p>可以作为视频模型的配音来用。&lt;/p>
&lt;h3 id="又一款语音自然的-tts-模型">又一款语音自然的 TTS 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-03-07.png"
width="533"
height="296"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/collections/HKUSTAudio/llasa-679b87dbd06ac556cc0e0f44" target="_blank" rel="noopener"
>Llasa&lt;/a>，一款基于Llama的TTS系统。&lt;/p>
&lt;p>它通过扩展训练时间和推理时间计算，提高了语音合成的自然度、韵律准确性和情感表达能力&lt;/p>
&lt;p>生成效果自然流畅富有感情，开心、悲伤等情感表现的比较自然，适合做有声读物或语音助手&lt;/p>
&lt;p>它用了一个Xcodec2语音分词器，把语音分解成一个个小的标记，使计算机更容易处理语音，这些标记不仅能表示语音的内容，还能保留语音的情感和音色信息&lt;/p>
&lt;p>核心在于其单一Transformer架构和规模化训练/推理策略，结合Xcodec2语音分词器，使其能生成更自然、更富有表现力的语音&lt;/p>
&lt;p>有1B、3B、8B三个版本，支持中英文&lt;/p>
&lt;h3 id="每天根据新闻生成语音博客">每天根据新闻生成语音博客
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-03-27.png"
width="756"
height="753"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://hacker-news.agi.li/" target="_blank" rel="noopener"
>hacker-news&lt;/a>，一个基于 AI 的 Hacker News 中文播客项目，每天自动抓取 Hacker News 热门文章，通过 AI 生成中文总结并转换为播客内容。&lt;/p>
&lt;p>主要特性&lt;/p>
&lt;ul>
&lt;li>🤖 自动抓取 Hacker News 每日热门文章&lt;/li>
&lt;li>🎯 使用 AI 智能总结文章内容和评论&lt;/li>
&lt;li>🎙️ 通过 Edge TTS 生成中文播报&lt;/li>
&lt;li>📱 支持网页和播客 App 收听&lt;/li>
&lt;li>🔄 每日自动更新&lt;/li>
&lt;li>📝 提供文章摘要和完整播报文本
技术栈&lt;/li>
&lt;li>Next.js 应用框架&lt;/li>
&lt;li>Cloudflare Workers 部署和运行环境&lt;/li>
&lt;li>Edge TTS 语音合成&lt;/li>
&lt;li>OpenAI API 内容生成&lt;/li>
&lt;li>Tailwind CSS 样式处理&lt;/li>
&lt;li>shadcn UI 组件库&lt;/li>
&lt;/ul>
&lt;p>我试听了一下，感觉效果很棒，有很大潜力啊，以后每个人都可以设置自己的个性化主播和电台。&lt;/p>
&lt;h3 id="ai驱动的电子表格">AI驱动的电子表格
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-04-30.png"
width="816"
height="695"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/PragmaticMachineLearning/probly" target="_blank" rel="noopener"
>Probly&lt;/a>，一款AI驱动的电子表格应用：Probly，它结合了电子表格功能、Python数据分析和AI的能力，所有操作都在浏览器内完成，&lt;/p>
&lt;p>具备全功能的电子表格能力，支持各种公式&lt;/p>
&lt;p>可以直接在浏览器中运行Python代码&lt;/p>
&lt;p>支持数据可视化，可以根据数据创建图表和可视化效果&lt;/p>
&lt;p>内置AI提供智能建议和自动化分析，可以用自然语言提问题，比如“帮我预测下个月的销售额”，或“找出哪些客户最有可能流失”，它会自动分析数据并给出答案，还能生成图表和可视化报告&lt;/p>
&lt;p>数据分析全部在浏览器本地完成&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 120 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/</link><pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-20-53.png" alt="Featured image of post 机器文摘 第 120 期" />&lt;h1 id="机器文摘-第-120-期">机器文摘 第 120 期
&lt;/h1>&lt;h3 id="用240个浏览器标签页中运行经典弹球游戏">用240个浏览器标签页中运行经典弹球游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-14-55.png"
width="538"
height="351"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="367px"
>
&lt;a class="link" href="https://eieio.games/blog/running-pong-in-240-browser-tabs" target="_blank" rel="noopener"
>Pong 的奇特实验&lt;/a>，这篇文章介绍了一个有趣的项目，利用浏览器标签页运行《Pong》游戏。&lt;/p>
&lt;p>作者通过在8x30网格排列的240个浏览器标签页中运行经典游戏Pong，探索了一种创新的浏览器标签页使用方式。&lt;/p>
&lt;p>受朋友&lt;a class="link" href="https://mewtru.com/flappyfavi" target="_blank" rel="noopener"
>Tru的项目（Flappy Favi）&lt;/a>启发，作者解决了如何创建标签页网格、在后台标签页中更新收藏夹图标以及标签页之间的同步通信等挑战。&lt;/p>
&lt;p>通过使用AppleScript、Web Workers和Broadcast Channels等工具，作者实现了在主画布和标签栏之间的平滑动画和交互。&lt;/p>
&lt;p>最终效果是Pong游戏中的球和球拍能够在前景窗口和标签栏之间无缝移动。&lt;/p>
&lt;h3 id="全世界最好的大语言模型资源汇总">全世界最好的大语言模型资源汇总
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-15-46.png"
width="340"
height="533"
loading="lazy"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="153px"
>
&lt;a class="link" href="https://github.com/WangRongsheng/awesome-LLM-resourses" target="_blank" rel="noopener"
>AI资源合集&lt;/a>，这个项目整理了500（还在持续更新中）多个资源，包括从数据到论文，教程等一应俱全。&lt;/p>
&lt;h3 id="从零实现-deepseek-r1">从零实现 DeepSeek R1
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-16-52.png"
width="855"
height="526"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>
&lt;a class="link" href="https://github.com/FareedKhan-dev/train-deepseek-r1" target="_blank" rel="noopener"
>train-deepseek-r1&lt;/a>，GitHub 上一个从零实现 DeepSeek R1 训练过程的开源项目。通过手绘流程图和代码解析，让复杂的 AI 训练变得易懂。&lt;/p>
&lt;p>详细展示了 DeepSeek R1 的训练流程，从基础模型开始，通过强化学习、监督微调等阶段，最终构建出具有卓越推理能力的语言模型。&lt;/p>
&lt;p>项目包含了：&lt;/p>
&lt;ul>
&lt;li>使用手绘流程图详解 DeepSeek R1 架构&lt;/li>
&lt;li>完整实现 GRPO 算法训练 R1 Zero 初始版本&lt;/li>
&lt;li>通过 SFT 解决 R1 Zero 的混乱推理和语言混合问题&lt;/li>
&lt;li>基于推理导向的强化学习优化模型能力&lt;/li>
&lt;li>使用小型基础模型，让本地训练和实验成为可能&lt;/li>
&lt;li>包含奖励函数、拒绝采样等关键技术实现细节&lt;/li>
&lt;/ul>
&lt;h3 id="高性能-ocr-模型">高性能 OCR 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-17-26.png"
width="815"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>
&lt;a class="link" href="https://github.com/allenai/olmocr" target="_blank" rel="noopener"
>olmOCR&lt;/a>，一款开源的高性能 OCR 模型，专门用于将 PDF 和文档图像转换为清晰、结构化的纯文本。模型足够小，可以在本地运行。&lt;/p>
&lt;p>基于 Qwen2-VL-7B-Instruct 构建。它通过在多样化数据集上微调，并结合高效的推理引擎，实现了低成本、高质量的文本提取。&lt;/p>
&lt;p>olmOCR 的优势在于其性能卓越，能够处理复杂布局的文档；&lt;/p>
&lt;p>输出为 Markdown 格式，便于解析；&lt;/p>
&lt;h3 id="免费音乐播放器">免费音乐播放器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-18-27.png"
width="828"
height="464"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>
&lt;a class="link" href="https://github.com/nukeop/nuclear" target="_blank" rel="noopener"
>nuclear&lt;/a>，GitHub 上一款专注于免费流媒体资源的桌面音乐播放器。&lt;/p>
&lt;p>从互联网的各个角落拉取免费的音乐资源，并提供了一个美观、强大的播放界面。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>搜索和播放YouTube上的音乐功能&lt;/li>
&lt;li>专辑搜索功能，查看专辑, 基于艺术家和曲目名称的自动歌曲查询&lt;/li>
&lt;li>歌曲队列，可以作为播放列表导出。&lt;/li>
&lt;li>加载保存的播放列表 (储存在json格式文件中)。&lt;/li>
&lt;li>带评论的最新出版歌曲 - 专辑和音轨。&lt;/li>
&lt;li>按照音乐流派浏览。&lt;/li>
&lt;li>音乐电台模式 (自动排查类似的曲目)。&lt;/li>
&lt;li>无限制的下载 (基于youtube提供的服务)。&lt;/li>
&lt;li>实时歌词展示。&lt;/li>
&lt;li>将喜欢的歌曲添加到你的喜爱曲目列表中。&lt;/li>
&lt;li>在本地库文件中听歌。&lt;/li>
&lt;/ul>
&lt;p>提供 Windows、macOS 和 Linux 安装包，可直接开箱即用。&lt;/p>
&lt;h3 id="一站式-ai-数字人系统">一站式 AI 数字人系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-19-22.png"
width="809"
height="533"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="364px"
>
&lt;a class="link" href="https://github.com/modstart-lib/aigcpanel" target="_blank" rel="noopener"
>AigcPanel&lt;/a>，支持视频合成、声音合成、声音克隆，简化本地模型管理、一键导入和使用 AI 模型。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持视频数字人合成，支持视频画面和声音换口型匹配&lt;/li>
&lt;li>支持语音合成、语音克隆，多种声音参数可设置&lt;/li>
&lt;li>支持多模型导入、一键启动、模型设置、模型日志查看&lt;/li>
&lt;li>支持国际化，支持简体中文、英语等&lt;/li>
&lt;li>支持多种模型一键启动包，如 CosyVoice、MuseTalk、LatentSync、Wav2Lip 等&lt;/li>
&lt;/ul>
&lt;h3 id="阿里的视频生成模型">阿里的视频生成模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-20-53.png"
width="538"
height="302"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>
&lt;a class="link" href="https://github.com/Wan-Video/Wan2.1" target="_blank" rel="noopener"
>Wan2.1&lt;/a>，阿里开源的视频生成模型，超过了现有开源模型和商业方案，支持消费级GPU运行&lt;/p>
&lt;p>支持文本生成视频、图像生成视频、视频编辑、文本生成图像及视频生成音频&lt;/p>
&lt;p>支持生成包含中英文文本的视频内容&lt;/p>
&lt;p>其在复杂运动动态生成、物理场景模拟、以及文本渲染上表现优秀&lt;/p>
&lt;p>3D VAE架构，可处理任意长度的1080P视频，并保持时序信息&lt;/p>
&lt;h3 id="一款开源的轻量级-web-应用防火墙">一款开源的轻量级 Web 应用防火墙
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-24-43.png"
width="997"
height="552"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>
&lt;a class="link" href="https://github.com/samwafgo/SamWaf" target="_blank" rel="noopener"
>SamWaf&lt;/a>，一款完全开源的轻量级 Web 应用防火墙，支持私有化部署，提供 Bot 检测、URL 白名单、CC 防护、自定义防护规则等功能，适用于小型企业、工作室和个人网站。&lt;/p>
&lt;h3 id="关于数据收集的开源实用工具">关于数据收集的开源实用工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-25-06.png"
width="862"
height="654"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>
&lt;a class="link" href="https://github.com/patrickloeber/llm-data-scrapers" target="_blank" rel="noopener"
>LLM Data Scrapers&lt;/a>，一份整理了关于数据收集的开源实用工具和抓取数据列表。&lt;/p>
&lt;p>涵盖了从不同来源，如代码库、网页和 PDF 文档等，提取数据的多种方法，并将数据转换为 LLMs 可以处理的格式。&lt;/p>
&lt;p>除此之外，还提供了相关的数据和更多的实用工具列表。&lt;/p>
&lt;h3 id="云粘贴">云粘贴
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-25-44.png"
width="572"
height="431"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>
&lt;a class="link" href="https://toolsonline.app/remote-paste" target="_blank" rel="noopener"
>remote-paste&lt;/a>，一个实验性的工具，这个网站可以让你迅速将内容在手机和电脑之间复制粘贴。&lt;/p>
&lt;blockquote>
&lt;p>作者介绍：有无数次，我想把手机上的一个链接，或者一段文本拷贝到电脑上，我都需要打开一个类似于社交软件的东西；然后在手机上发送到某个窗口，然后在电脑上打开。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>有的朋友会推荐我说，用微信输入法等工具，但是对于没有使用该输入法的人依然会有很长的操作路径&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>于是我开发了一个网站，操作路径如下，文字看起来有点长但是使用起来我很轻松。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>用户打开网站&lt;/li>
&lt;li>用手机扫码二维码在手机上打开&lt;/li>
&lt;li>把手机上的 link/text 复制到文本框，点击生成&lt;/li>
&lt;li>生成之后的页面会生成一个长度为四位的code，用户在电脑上输入对应的四位code之后即可复制。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 119 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/</link><pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-02-11.png" alt="Featured image of post 机器文摘 第 119 期" />&lt;h1 id="机器文摘-第-119-期">机器文摘 第 119 期
&lt;/h1>&lt;h3 id="用纯-jax-实现-llama3-模型">用纯 JAX 实现 LLaMA3 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-01-47.png"
width="690"
height="527"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>
JAX 是一个由 Google 开发的 Python 库，它结合了 NumPy 的易用性 和 自动微分、即时编译 (JIT) 以及 在加速器（GPU/TPU）上运行的能力。&lt;/p>
&lt;p>阅读这篇&lt;a class="link" href="https://saurabhalone.com/blogs/llama3/web" target="_blank" rel="noopener"
>《用纯 JAX 实现 LLaMA3 模型》&lt;/a>，可以深入了解 JAX 在构建高效深度学习模型中的优势，以及如何从零开始实现一个现代语言模型。文章强调了 JAX 的纯函数特性、JIT 编译等优势，并提供了完整的代码实现，适合有一定 Python 和 Transformer 基础的读者学习。&lt;/p>
&lt;h3 id="一个稳定有良好泛化能力的r1风格视觉语言模型">一个稳定有良好泛化能力的R1风格视觉语言模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-02-11.png"
width="2210"
height="1080"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>
&lt;a class="link" href="https://github.com/om-ai-lab/VLM-R1" target="_blank" rel="noopener"
>VLM-R1&lt;/a>，把DeepSeek的R1方法用到了视觉上模型上，增强了模型稳定性和泛化能力。&lt;/p>
&lt;p>基于Qwen2.5-VL 构建，能同时处理图像和文本输入，特别强化了对图像中特定目标的定位能力。&lt;/p>
&lt;p>擅长指代表达类理解，比如&amp;quot;这个红色的杯子在哪里&amp;quot;这样的问题，并在图像中定位目标。&lt;/p>
&lt;h3 id="可以在端侧运行的视觉模型">可以在端侧运行的视觉模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-27-43.png"
width="515"
height="834"
loading="lazy"
class="gallery-image"
data-flex-grow="61"
data-flex-basis="148px"
>
&lt;a class="link" href="https://huggingface.co/blog/smolvlm2" target="_blank" rel="noopener"
>Smolvlm2&lt;/a>，这个视觉模型非常小，提供了 256M, 500M, 2.2B 三个版本。&lt;/p>
&lt;p>500M 版本就能装在 iPhone 上流畅运行。&lt;/p>
&lt;p>模型能识别物体，并且可以给出一定的问题回答（打开冰箱识别牛奶在哪里），还能对视频做总结。&lt;/p>
&lt;h3 id="深入挖掘llama3的从零实现中英文版">深入挖掘llama3的从零实现(中英文版)
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-28-06.png"
width="690"
height="1212"
loading="lazy"
class="gallery-image"
data-flex-grow="56"
data-flex-basis="136px"
>
&lt;a class="link" href="https://github.com/therealoliver/Deepdive-llama3-from-scratch" target="_blank" rel="noopener"
>一篇关于从零实现LLaMA3模型的详细教程&lt;/a>，也是基于 naklecha/llama3-from-scratch 的增强版本。在原项目的基础上进行了全面的改进和优化，旨在帮助大家更轻松地理解和掌握llama3模型的实现原理以及详细的推理流程。&lt;/p>
&lt;p>教程里涉及的代码均有中文注释。&lt;/p>
&lt;h3 id="开源-ai-agent-引擎">开源 AI Agent 引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-28-46.png"
width="825"
height="303"
loading="lazy"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="653px"
>
&lt;a class="link" href="https://github.com/refly-ai/refly" target="_blank" rel="noopener"
>ReflyAI&lt;/a>，可视化构建你自己的 AI 工作流，比 dify 轻量一些。&lt;/p>
&lt;h3 id="电子书计算机视觉算法与应用">电子书《计算机视觉：算法与应用》
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-29-17.png"
width="820"
height="298"
loading="lazy"
class="gallery-image"
data-flex-grow="275"
data-flex-basis="660px"
>
&lt;a class="link" href="https://szeliski.org/Book/" target="_blank" rel="noopener"
>Computer Vision: Algorithms and Applications&lt;/a>，这本书是计算机视觉领域的经典教材，涵盖了从基础到高级的多种算法和技术。全书内容丰富，涉及图像形成、处理、特征检测、模型拟合、深度学习、识别等多个方面。&lt;/p>
&lt;p>除了书籍下载，页面上还提供了一些拿本书当教材的大学课程主页，可以下载课件。&lt;/p>
&lt;h3 id="可本地部署的-pdf-文件处理工具合集">可本地部署的 PDF 文件处理工具合集
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-29-35.png"
width="690"
height="590"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="280px"
>
&lt;a class="link" href="https://github.com/Frooodle/Stirling-PDF" target="_blank" rel="noopener"
>Stirling-PDF&lt;/a>，一款强大的本地网页版 PDF 文件处理工具，可 Docker 部署。&lt;/p>
&lt;p>提供了丰富的 PDF 文件操作功能，包括拆分、合并、格式转换、内容排列、添加图片、旋转、压缩等。&lt;/p>
&lt;p>其安全私密性非常高，所有文件和 PDF 操作都是在客户端进行，或者仅在服务器内存中临时处理，任务完成后即刻删除。&lt;/p>
&lt;p>一旦用户下载了文件，该文件就会从服务器上删除。&lt;/p>
&lt;h3 id="给-ai-agent-用的浏览器自动化工具">给 AI Agent 用的浏览器自动化工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-31-33.png"
width="694"
height="492"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="338px"
>
&lt;a class="link" href="https://github.com/steel-dev/steel-browser" target="_blank" rel="noopener"
>Steel&lt;/a>，这个工具可以让大模型直接操作浏览器，从而实现完全的浏览器AI自动化。&lt;/p>
&lt;h3 id="快速搭建你自己的-ai-集群">快速搭建你自己的 AI 集群
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-32-15.png"
width="819"
height="525"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="374px"
>
&lt;a class="link" href="https://github.com/exo-explore/exo" target="_blank" rel="noopener"
>exo&lt;/a>，一个可帮你在家快速搭建 AI 集群的开源项目，支持将现有设备统一到一个功能强大的GPU中，支持 iPhone，iPad，Android，Mac，Nvidia，树莓派等等几乎所有设备。&lt;/p>
&lt;p>在项目部署成功后，一旦有新设备联网，即可接入使用，充当 AI 算力集群的一部分。&lt;/p>
&lt;h3 id="开源倒计时工具">开源倒计时工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-32-34.png"
width="690"
height="383"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/vladelaina/Catime" target="_blank" rel="noopener"
>Catime&lt;/a>，一款简洁的 Windows 倒计时工具，支持番茄时钟功能，具有透明界面和丰富的自定义选项。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>倒计时、正计时、时钟显示&lt;/li>
&lt;li>超时动作：通知、锁屏、关机等&lt;/li>
&lt;li>界面：透明、点击穿透、自由调整、自定义颜色 ​​​&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 118 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-03-47.png" alt="Featured image of post 机器文摘 第 118 期" />&lt;h1 id="机器文摘-第-118-期">机器文摘 第 118 期
&lt;/h1>&lt;h3 id="从零开始构建一个深度学习库">从零开始构建一个深度学习库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-02-13.png"
width="498"
height="756"
loading="lazy"
class="gallery-image"
data-flex-grow="65"
data-flex-basis="158px"
>&lt;/p>
&lt;p>这篇文章&lt;a class="link" href="https://www.henrypan.com/blog/2025-02-06-ml-by-hand/" target="_blank" rel="noopener"
>《How I Built a Deep Learning Library from Scratch Using Only Python, NumPy &amp;amp; Math》&lt;/a>由 Henry Pan 撰写，详细介绍了他如何仅使用 Python 和 NumPy 从零开始构建一个深度学习库——ML by Hand。&lt;/p>
&lt;p>该库的目的是为了帮助学习者深入理解深度学习模型和库的构建原理，而不是为了替代现有的高效库如 PyTorch 或 TensorFlow。&lt;/p>
&lt;p>Henry Pan 开始这个项目的动机是出于对如何从数学公式出发构建深度学习模型的好奇心。&lt;/p>
&lt;p>他希望通过这个项目，从第一原理（微积分和线性代数）出发，将这些原理以最原始的形式表达在代码中。&lt;/p>
&lt;p>该项目的灵感来源于 Andrej Karpathy 的 Micrograd 项目，最初只是想创建一个自动求导引擎，但最终发展成为一个完整的机器学习库。&lt;/p>
&lt;p>通过这篇文章，读者可以深入了解如何从零开始构建一个深度学习库，以及在构建过程中需要考虑的各种技术和设计问题。&lt;/p>
&lt;h3 id="98-版电视剧水浒传的官方网站">98 版电视剧水浒传的官方网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-02-28.png"
width="478"
height="272"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://1link.fun/i/98-quSrAu73_WS/" target="_blank" rel="noopener"
>水浒传官网长啥样 - 探究央视 98 版水浒传网址&lt;/a>，本文通过一段抖音视频，引出了对央视98版《水浒传》官网的探究。&lt;/p>
&lt;p>视频中提到的网址存在错误，正确的网址应为http://www.chinapages.com/shuihu&lt;/p>
&lt;p>这个网址曾属于中国黄页（China Pages），由马云于1995年创立，旨在将中国企业介绍给全世界。&lt;/p>
&lt;p>通过互联网档案馆（Wayback Machine），作者找到了该网址在1998年5月9日的快照，网页设计具有浓厚的年代感。&lt;/p>
&lt;p>该网站一直存活到2001年6月6日，之后变为404状态。这段历史不仅展示了互联网发展的早期阶段，也反映了中国互联网产业的起步。&lt;/p>
&lt;h3 id="ai-生成-ppt">AI 生成 PPT
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-02-40.png"
width="690"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="355px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://aipptmaker.ai/create" target="_blank" rel="noopener"
>aipptmaker&lt;/a>，一个通过 AI 在线制作 PPT 的工具。&lt;/p>
&lt;ul>
&lt;li>无需安装，登录后即可在线使用；&lt;/li>
&lt;li>无需切换，在一个工具上就可以完成全部任务；&lt;/li>
&lt;/ul>
&lt;h3 id="批量提取网页图片">批量提取网页图片
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-02-49.png"
width="690"
height="394"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chromewebstore.google.com/detail/fetchimage/oecdebfgcmkgdfepfacnfhmkhjgbafde" target="_blank" rel="noopener"
>FetchImage&lt;/a> 是一款让网页图片提取变得极致简单的 Chrome 扩展程序。&lt;/p>
&lt;p>无论是设计灵感收集、内容创作，还是日常图片整理，FetchImage 都能帮助您快速、高效地完成任务。&lt;/p>
&lt;p>主要功能:&lt;/p>
&lt;ul>
&lt;li>✅ 一键提取：从任何网页瞬间提取所有图片。&lt;/li>
&lt;li>✅ 尺寸筛选：轻松筛选符合需求的图片大小。&lt;/li>
&lt;li>✅ 批量下载：支持一键批量保存图片。&lt;/li>
&lt;li>✅ 隐私至上：所有操作均在本地执行，绝不收集任何数据。&lt;/li>
&lt;/ul>
&lt;p>支持网站：Instagram、X（原 Twitter）、Pinterest、Facebook、Google 图片等主流平台。&lt;/p>
&lt;h3 id="deep-research-开源版">Deep Research 开源版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-03-03.png"
width="690"
height="576"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/zilliztech/deep-searcher" target="_blank" rel="noopener"
>DeepSearcher&lt;/a>，结合了大模型和向量数据库，为个人/企业知识管理、智能问答、信息搜索等场景提供高度准确的答案和全面分析。&lt;/p>
&lt;p>支持本地文件导入，以及网络数据爬取等文档加载，支持 DeepSeek、OpenAI 等大模型。&lt;/p>
&lt;h3 id="抱抱脸hugging-face团队推出的智能体agent库">抱抱脸（Hugging Face）团队推出的智能体（agent）库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-03-47.png"
width="813"
height="515"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/huggingface/smolagents" target="_blank" rel="noopener"
>smolagents&lt;/a> 是由 Hugging Face 团队开发的一个轻量级库，旨在帮助开发者快速构建和部署智能代理（agents）。&lt;/p>
&lt;p>该项目的核心目标是通过简洁的设计和强大的功能，使开发者能够轻松创建能够执行复杂任务的代理，这些任务包括调用工具、编写代码以及协调其他代理的工作。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>简洁性：smolagents 的设计非常简洁，核心逻辑集中在 agents.py 文件中，易于上手和定制。&lt;/li>
&lt;li>代码代理：支持 CodeAgent，这是一种能够通过编写 Python 代码来执行操作的代理。与传统的基于文本的代理相比，代码代理在执行复杂任务时更加高效。&lt;/li>
&lt;li>模型无关性：支持多种语言模型（LLM），包括本地的 transformers 模型、OpenAI、Anthropic 等提供的模型，以及通过 LiteLLM 集成的 100 多种模型。&lt;/li>
&lt;li>工具无关性：支持多种工具，包括 LangChain、Anthropic 的 MCP，甚至可以将 Hugging Face 的 Hub Space 作为工具使用。&lt;/li>
&lt;li>模态无关性：支持文本、图像、视频甚至音频输入，适用于多种应用场景。&lt;/li>
&lt;li>安全性：提供沙盒环境（通过 E2B）来安全地执行代码，防止对系统造成潜在风险。&lt;/li>
&lt;/ul>
&lt;h3 id="用自然语言和数据对话">用自然语言和数据对话
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-04-12.png"
width="787"
height="699"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sinaptik-ai/pandas-ai" target="_blank" rel="noopener"
>PandaAI&lt;/a>是一个Python平台，可以轻松以自然语言向您的数据提出问题。&lt;/p>
&lt;p>它可以帮助非技术用户以更自然的方式与数据进行交互，并帮助技术用户在处理数据时节省时间和精力。&lt;/p>
&lt;p>将该库依赖到自己项目中，只需几行代码，轻松实现数据读取，并能通过对话方式向数据进行提问。&lt;/p>
&lt;p>比如查询数据，做数据分析，甚至还可以直接为我们生成趋势图。目前已支持 SQL、CSV、Parquet 等数据存储格式。&lt;/p>
&lt;p>如果开发人员开放一个可视化界面，产品或销售就能直接做数据分析，再也不用导出数据并生成表格。&lt;/p>
&lt;h3 id="连载教程从零开始理解大语言模型">连载教程“从零开始理解大语言模型”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-04-29.png"
width="690"
height="871"
loading="lazy"
class="gallery-image"
data-flex-grow="79"
data-flex-basis="190px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/KaihuaTang/All-you-need-to-know-about-LLM" target="_blank" rel="noopener"
>https://github.com/KaihuaTang/All-you-need-to-know-about-LLM&lt;/a>&lt;/p>
&lt;p>本系列教程的目的是让读者可以在基础的pytorch上，不依赖任何其他现成的外部库，从零开始理解并实现一个大语言模型的所有组成部分，以及训练微调代码，因此读者仅需python，pytorch和最基础深度学习背景知识即可。&lt;/p>
&lt;p>可以先收藏，&lt;del>反正收藏了就等于学会了&lt;/del>。&lt;/p>
&lt;h3 id="一个经典的操作系统开发教程2008-年的">一个经典的操作系统开发教程（2008 年的）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-04-50.png"
width="690"
height="1266"
loading="lazy"
class="gallery-image"
data-flex-grow="54"
data-flex-basis="130px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.brokenthorn.com/Resources/OSDevIndex.html" target="_blank" rel="noopener"
>http://www.brokenthorn.com/Resources/OSDevIndex.html&lt;/a>&lt;/p>
&lt;p>面向初学者，一步步开发一个操作系统。用到的语言是 C 语言和 x86 汇编语言&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 117 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/</link><pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-22-11.png" alt="Featured image of post 机器文摘 第 117 期" />&lt;h1 id="机器文摘-第-117-期">机器文摘 第 117 期
&lt;/h1>&lt;h3 id="使用-esp32-cam-将旧的水电燃气等计量单元连接到数字世界">使用 ESP32-CAM 将旧的水、电、燃气等计量单元连接到数字世界
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-19-48.png"
width="690"
height="555"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/p>
&lt;p>人工智能无处不在，从语音到图像识别。尽管大多数 AI 系统都依靠强大的处理器或云计算，但边缘计算通过利用现代处理器的功能使 AI 更接近最终用户。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jomjol/AI-on-the-edge-device" target="_blank" rel="noopener"
>ESP32-CAM&lt;/a>，项目展示了使用 ESP32 （一种低成本，具有AI功能的设备）来数字化模拟仪表（无论是水，气或电力）数字化的边缘计算。&lt;/p>
&lt;p>通过负担得起的硬件和简单的说明，您可以将任何标准仪表变成智能设备。&lt;/p>
&lt;p>关键特性：&lt;/p>
&lt;ul>
&lt;li>🔗Tensorflow Lite（Tflite）集成- 包括易于使用的包装器。&lt;/li>
&lt;li>📸内联图像处理（特征检测，对齐，ROI提取）。&lt;/li>
&lt;li>💡小型且负担得起的设备（3 x 4.5 x 2cm³，小于10欧元）。&lt;/li>
&lt;li>📷集成相机和照明。&lt;/li>
&lt;li>🌐用于管理和控制的Web界面。&lt;/li>
&lt;li>🔄用于直接通过Web接口更新的OTA接口。&lt;/li>
&lt;li>🏠与 Home Assistant 的完全集成。&lt;/li>
&lt;li>📡 MQTT协议支持。&lt;/li>
&lt;li>📥可用于数据访问的REST API 。&lt;/li>
&lt;/ul>
&lt;h3 id="专业逆向工程大模型">专业逆向工程大模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-20-03.png"
width="394"
height="680"
loading="lazy"
class="gallery-image"
data-flex-grow="57"
data-flex-basis="139px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/albertan017/LLM4Decompile" target="_blank" rel="noopener"
>LLM4Decompile&lt;/a>，这个模型可以将 x86_64二进制程序反编译为 C 代码，模型大小从 1.3B 到 22B 都有，22B 如果 Q4 量化的话只有 10G左右，Q8 大概 22G。好一点的显卡就能本地用了 ​​​。&lt;/p>
&lt;h3 id="awesome-deepseek-integration">Awesome DeepSeek Integration
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-20-18.png"
width="690"
height="1418"
loading="lazy"
class="gallery-image"
data-flex-grow="48"
data-flex-basis="116px"
>&lt;/p>
&lt;p>DeepSeek 最近很火，这个仓库收集了&lt;a class="link" href="https://github.com/deepseek-ai/awesome-deepseek-integration" target="_blank" rel="noopener"
>一份支持 DeepSeek 大模型的各类软件列表&lt;/a>，来自 DeepSeek 官方团队收集整理，涵盖了应用程序、AI Agent 框架、RAG 框架、即时通讯插件、浏览器插件、VS Code 插件等等。在这份列表上面，我们能快速找到那些已支持 DeepSeek 的应用、框架、插件，并按需选择使用。&lt;/p>
&lt;h3 id="方便微调视觉语言模型的工具">方便微调视觉语言模型的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-20-33.png"
width="690"
height="418"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/roboflow/maestro" target="_blank" rel="noopener"
>Maestro&lt;/a>，这个工具把PaliGemma 2、Florence-2、Qwen2.5-VL的微调流程，打包成“开箱即用”的方案，而且还支持CLI和Python API，甚至在Colab上也能跑。不用考虑各种繁琐的配置、数据加载、训练循环和复现问题，用户只需专注于模型调优的核心部分。&lt;/p>
&lt;h3 id="如何用-deepseek-r1-蒸馏出属于你自己的大模型">如何用 DeepSeek-R1 蒸馏出属于你自己的大模型？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-21-16.png"
width="869"
height="817"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Kiln-AI/Kiln" target="_blank" rel="noopener"
>Kiln&lt;/a>，一个新的 fune-tune 框架，可以在 1 小时内让DeepSeek-R1蒸馏出属于你自己的小模型，整个过程是全自动的，不需要编写代码或者手动调节，仅需定义你的数据集即可。&lt;/p>
&lt;p>项目支持跨平台桌面应用，无论是 Windows、Mac、Linux，均可下载安装包即开即用。&lt;/p>
&lt;h3 id="大规模预训练语言模型的教程">大规模预训练语言模型的教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-21-36.png"
width="690"
height="979"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/datawhalechina/so-large-lm" target="_blank" rel="noopener"
>《大模型基础》&lt;/a>，一文了解大模型基础知识。&lt;/p>
&lt;p>基于斯坦福大学和李宏毅的课程，并结合开源贡献者的补充和最新研究进展，旨在为读者提供深入的理论知识和实践方法。&lt;/p>
&lt;p>内容涵盖了模型架构、数据收集、模型训练、智能体，以及模型在安全、环境和法律方面的应用等。&lt;/p>
&lt;h3 id="在手机端离线运行-llm-大模型">在手机端离线运行 LLM 大模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-22-11.png"
width="793"
height="452"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/alibaba/MNN" target="_blank" rel="noopener"
>MnnLlmApp&lt;/a>，基于 MNN-LLM 框架的 Android 手机应用，阿里开源项目，支持各类 LLM 在手机上离线运行，支持多种多模态任务，文本生成文本、图像生成文本、音频转文本以及文本生成图像。&lt;/p>
&lt;p>在安卓平台上，MNN-LLM的CPU性能优秀，预填充速度较 llama.cpp 提高了 8.6 倍，较 fastllm 提升了 20.5倍，解码速度分别快了2.3倍、8.9倍&lt;/p>
&lt;p>支持多种模型，Qwen、Gemma、Llama（涵盖TinyLlama与MobileLLM）、Baichuan、Yi、DeepSeek、InternLM、Phi、ReaderLM、Smolm等&lt;/p>
&lt;p>完全在设备本地运行。&lt;/p>
&lt;h3 id="非结构化数据转换工具">非结构化数据转换工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-22-35.png"
width="836"
height="485"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/adithya-s-k/omniparse" target="_blank" rel="noopener"
>omniparse&lt;/a>，一个可以把各种非结构化数据转为结构化数据的工具：OmniParse，本地运行，支持约20种文件格式。&lt;/p>
&lt;p>支持文档、表格、图像、视频、音频、网页等，能提取表格、识别图片内容、转录音视频、爬取网页，把数据转成高结构化Markdown 格式。&lt;/p>
&lt;p>适合需要批量处理各种数据并用于AI应用的场景，目前支持Linux系统。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 116 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/</link><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-46-34.png" alt="Featured image of post 机器文摘 第 116 期" />&lt;h1 id="机器文摘-第-116-期">机器文摘 第 116 期
&lt;/h1>&lt;h3 id="展开说说关于编程的未来">展开说说关于编程的未来
&lt;/h3>&lt;p>这几天思考了关于未来编程方式变革。&lt;/p>
&lt;p>当前这种使用“专属高级程序语言”编程的方式将像之前“纸带打孔编程”那样逐渐消失，取而代之的是使用自然语言进行“编程”。&lt;/p>
&lt;p>码农这个职业可能不复存在，但是编程的工作仍然需求旺盛，只是形式变了、工具变了、工作场景也变了，对“程序员”的要求也变了。&lt;/p>
&lt;p>技术的核心目标无非是提升生产力和生产效率，改善人类的生活水平，信息科技也无非是通过数字化、信息化手段来实现这个目标。&lt;/p>
&lt;p>之前是那种高级语言编程实现，现在跳过了“编码”过程，直接以一种前所未有的交互方式来创造“软件”。&lt;/p>
&lt;p>既然创造方式改变了，那么必定会带来其他的改变，我能想到以下几点：&lt;/p>
&lt;ol>
&lt;li>软件的量必然膨胀，构建软件的成本变得十分低廉，生产软件的速度也呈指数级增长，一切能用软件的地方都得用上软件。&lt;/li>
&lt;li>软件的架构可能改变，之前编程还需要照顾人类的阅读，现在无所谓了，变量命名、代码复用、模块化、扩展性，实现方式变了，比起精心设计的可复用模块，可能每次都实时生成代码更经济。&lt;/li>
&lt;li>编程的职业可能泛化，软件创造被拉下高科技的神坛，人人都能编程，人人都能创造软件。&lt;/li>
&lt;/ol>
&lt;p>那会诞生哪些公司机会呢？&lt;/p>
&lt;ol>
&lt;li>提供新型的工具，帮助人人创造软件（各种 ai 创业公司都在做，以提供新型编程工具、环境为主要产品）。&lt;/li>
&lt;li>利用新型的工具，满足之前没有被服务到位的需求（之前可能因为软件建设太昂贵），就像拼多多那样（目前字节的扣子平台有点儿这个意思）。&lt;/li>
&lt;li>培训，教人学习和使用这些工具，当然了，是面向未来的“新型程序员”。&lt;/li>
&lt;/ol>
&lt;h3 id="20251版ai-agent工具全景图-从入门到进阶的12个关键工具">2025.1版AI Agent工具全景图： 从入门到进阶的12个关键工具
&lt;/h3>&lt;p>&lt;em>来自微博&lt;a class="link" href="https://weibo.com/u/1402400261" target="_blank" rel="noopener"
>@爱可可-爱生活&lt;/a>&lt;/em>&lt;/p>
&lt;ol>
&lt;li>入门首选： PydanticAI&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>特点：类型安全 + FastAPI风格&lt;/li>
&lt;li>优势：模型通用性强，上手门槛低&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>团队协作利器： CrewAI&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>主打多智能体协同&lt;/li>
&lt;li>适合复杂项目开发&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>可视化开发神器： n8n&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>提供数百种集成选项&lt;/li>
&lt;li>所见即所得的工作流构建&lt;/li>
&lt;/ul>
&lt;p>4-6. 企业级开发三剑客：&lt;/p>
&lt;ul>
&lt;li>AutoGen(微软)： 开源框架，专注多智能体&lt;/li>
&lt;li>Smolagents(HF)： 简码开发，环境兼容性强&lt;/li>
&lt;li>Phidata： 智能体记忆管理，文档完善&lt;/li>
&lt;/ul>
&lt;p>7-9. 进阶开发工具链：&lt;/p>
&lt;ul>
&lt;li>AgentOps： DevOps全流程支持&lt;/li>
&lt;li>Vercel AI SDK： 与AI-SDK完美集成&lt;/li>
&lt;li>Rig(Rust)： 新手友好的智能体开发工具&lt;/li>
&lt;/ul>
&lt;p>10-12. 特色应用工具：&lt;/p>
&lt;ul>
&lt;li>Eliza： 跨渠道智能交互&lt;/li>
&lt;li>LangGraph： 基于LangChain的高级应用&lt;/li>
&lt;li>Memó： 个性化交互增强工具&lt;/li>
&lt;/ul>
&lt;p>核心价值：这套工具链涵盖了从入门到专业的全周期开发需求，既有低代码平台助力快速起步，也有专业框架支撑进阶开发。新手可以逐步尝试，专业开发者也能找到趁手工具。&lt;/p>
&lt;p>建议：&lt;/p>
&lt;ol>
&lt;li>建议先从可视化工具入手&lt;/li>
&lt;li>逐步过渡到代码开发&lt;/li>
&lt;li>根据项目需求选择合适工具&lt;/li>
&lt;li>关注工具间的协同效应&lt;/li>
&lt;/ol>
&lt;p>无论你是初学者还是专家，这12个工具都值得收藏。&lt;/p>
&lt;h3 id="流体模拟吊坠">流体模拟吊坠
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-40-29.png"
width="690"
height="571"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="290px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mitxela.com/projects/fluid-pendant" target="_blank" rel="noopener"
>流体模拟吊坠&lt;/a>，这篇文章详细介绍了作者制作的一款流体模拟吊坠（Fluid Simulation Pendant）的全过程。&lt;/p>
&lt;p>吊坠是一件手工制作的珠宝，运行实时的FLIP流体模拟。外壳镀金，显示屏由手表玻璃保护。&lt;/p>
&lt;p>流体模拟基于Matthias Müller的工作，特别是他的&lt;a class="link" href="https://matthias-research.github.io/pages/tenMinutePhysics/index.html" target="_blank" rel="noopener"
>“Ten Minute Physics”&lt;/a>网站上的“&lt;a class="link" href="https://matthias-research.github.io/pages/tenMinutePhysics/18-flip.html" target="_blank" rel="noopener"
>如何编写FLIP水模拟器&lt;/a>”教程。&lt;/p>
&lt;p>作者在项目中并没有直接移植，而是根据教程重新实现的。&lt;/p>
&lt;p>组成吊坠的硬件包括STM32L432KC（ARM Cortex-M4带FPU，超频至100MHz）、ADXL362超低功耗加速度计、MCP73832锂电充电控制器、TPS7A02稳压器（极低功耗）和TPS3839监控器。所有这些组件都集成在一个四层0.8mm的PCB上。&lt;/p>
&lt;h3 id="只有56个字节的贪吃蛇游戏">只有56个字节的贪吃蛇游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-40-44.png"
width="690"
height="726"
loading="lazy"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="228px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/donno2048/snake" target="_blank" rel="noopener"
>snake&lt;/a>，不是 56Kb，而是只有 56 字节。 ​​​&lt;/p>
&lt;h3 id="高性能语音转文本工具">高性能语音转文本工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-41-31.png"
width="821"
height="460"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/KoljaB/RealtimeSTT" target="_blank" rel="noopener"
>RealtimeSTT&lt;/a>，一个强大高效、低延迟的语音转文本工具。&lt;/p>
&lt;p>简单易用，支持开始和停止说话的状态监测，支持指定唤醒词触发工作，实时进行将语音转换为文本。&lt;/p>
&lt;p>可以在 Windows、macOS 以及 Linux 系统上安装使用，同时支持 CUDA 进行 GPU 加速。&lt;/p>
&lt;h3 id="白嫖微软-edge-在线文本转语音服务">白嫖微软 Edge 在线文本转语音服务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-42-05.png"
width="690"
height="652"
loading="lazy"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="253px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/travisvn/openai-edge-tts" target="_blank" rel="noopener"
>openai-edge-tts&lt;/a>，利用微软 Edge 的在线语音服务，提供免费的文本转语音功能，且可以像使用 OpenAI 的语音一样使用该 API。&lt;/p>
&lt;p>同时，支持多种音频格式，如 mp3、aac、flac、wav 等，可自由调节播放速度，以及有多种语音和语言选择。&lt;/p>
&lt;p>可通过 Docker 一键部署方式，快速体验。&lt;/p>
&lt;h3 id="轻量级文本转语音模型">轻量级文本转语音模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-42-28.png"
width="690"
height="556"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="297px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://kokorotts.online" target="_blank" rel="noopener"
>Kokoro TTS&lt;/a>，一个只有 82M 参数的文本合成语音模型。&lt;/p>
&lt;p>有着极高的生成速度和非常自然的发音效果。&lt;/p>
&lt;p>支持中文，但特长是美式发音和英式发音的英语，适合生成英文配音。&lt;/p>
&lt;p>Kokoro TTS 基于 Apache 2.0 许可开源。&lt;/p>
&lt;h3 id="轻量级大模型">轻量级大模型
&lt;/h3>&lt;p>&lt;em>来自微博&lt;a class="link" href="https://weibo.com/u/2169039837" target="_blank" rel="noopener"
>@karminski-牙医&lt;/a>&lt;/em>
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-45-19.png"
width="690"
height="843"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;blockquote>
&lt;p>搜索引擎&amp;amp;爬虫工程师的工具链感觉现在全面面临洗牌了。以前靠SVM来分类，靠 TF-IDF 来抽关键词，trie-tree 来过滤敏感词，基于文本密度算法来抽正文，靠余弦相似度等相似度算法来消重。
现在，大模型能全面取代这些传统NLP做法了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我现在抽正文就在用 reader-lm-1.5b，这个模型能把 html 转 markdown，然后再消息队列塞给下游模型用定义好的Agent来分类，提取关键词和摘要。最后入库之前RAG检索做消重。尤其是文本内容的对抗进化没那么快，现在打不过LLM（比如写点抽象的东西来规避过滤，LLM能轻松认出来，但是基于敏感词的 trie-tree 效果就很差）。所以LLM除了耗资源几乎无缺点了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>reader-lm-1.5b 地址：huggingface.co/jinaai/reader-lm-1.5b
这个模型小到不用量化，纯CPU都能跑得飞起。&lt;/p>
&lt;/blockquote>
&lt;h3 id="一个在纯pdf文件里运行的俄罗斯方块">一个在纯pdf文件里运行的俄罗斯方块
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-45-31.png"
width="690"
height="1106"
loading="lazy"
class="gallery-image"
data-flex-grow="62"
data-flex-basis="149px"
>&lt;/p>
&lt;p>生成pdf的代码： github.com/ThomasRinsma/pdftris&lt;/p>
&lt;p>演示地址：th0mas.nl/downloads/pdftris.pdf&lt;/p>
&lt;p>实际上运行需要依赖现代桌面浏览器中的 PDF 引擎（PDFium 和 PDF.js）,也就是在浏览器中打开这个pdf文件，如果用普通的pdf程序如sumatrapdf打开这个pdf文件是没法运行的。&lt;/p>
&lt;p>当然这也意味着pdf的安全风险。&lt;/p>
&lt;h3 id="屏蔽搜索结果的垃圾内容">屏蔽搜索结果的垃圾内容
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-45-44.png"
width="585"
height="433"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>现在互联网搜索引擎搜索出的内容，由 AI 制造的垃圾内容越来越多，&lt;a class="link" href="https://github.com/popcar2/BadWebsiteBlocklist" target="_blank" rel="noopener"
>BadWebsiteBlocklist&lt;/a>，这里提供了一份黑名单，借助 &lt;a class="link" href="https://iorate.github.io/ublacklist/docs" target="_blank" rel="noopener"
>uBlackList&lt;/a>浏览器插件，可以有效屏蔽搜索结果中这些垃圾内容。 ​​​&lt;/p>
&lt;h3 id="ffmpeg-命令在线参考">ffmpeg 命令在线参考
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-45-53.png"
width="690"
height="318"
loading="lazy"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="520px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://ffmpegbyexample.com/" target="_blank" rel="noopener"
>https://ffmpegbyexample.com/&lt;/a> 这个网站可以查看 ffmpeg 的全部命令参数以及使用方式，网站列举了几十种常见转换任务的命令行示例。&lt;/p>
&lt;h3 id="检测视频中人眼视线的模型">检测视频中人眼视线的模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-46-34.png"
width="536"
height="295"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/vikhyatk/moondream2/tree/main" target="_blank" rel="noopener"
>Moondream&lt;/a> 是一个 非常强大而且小巧的视觉模型。&lt;/p>
&lt;p>0.5B INT4 版本甚至只有 400M&lt;/p>
&lt;p>支持结构化 OCR 输出、图片描述、物体检测和位置标注&lt;/p>
&lt;p>最近更是更新了 视线检测，给一段视频就可以看到视频中每个人的视线&lt;/p>
&lt;p>这个很适合用来恶搞和意图检测&lt;/p>
&lt;p>Comfyui 插件也已经上线，显存占用为 6G&lt;/p>
&lt;h3 id="stttts框架">STT/TTS框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-47-02.png"
width="690"
height="1323"
loading="lazy"
class="gallery-image"
data-flex-grow="52"
data-flex-basis="125px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/k2-fsa/sherpa-onnx" target="_blank" rel="noopener"
>sherpa-onnx&lt;/a>，这个框架可以语音转文字，文字转语音，说话人识别，说话人验证，语言识别，音频标签，关键词检测，添加标点符号等等功能。
支持架构也非常广泛，从 x86 到 arm 到 risc-v。主流编程语言也全部支持。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 115 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/</link><pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-57-33.png" alt="Featured image of post 机器文摘 第 115 期" />&lt;h1 id="机器文摘-第-115-期">机器文摘 第 115 期
&lt;/h1>&lt;h3 id="图灵机原理介绍">图灵机原理介绍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-53-53.png"
width="690"
height="497"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="333px"
>&lt;/p>
&lt;p>这是一篇交互型文章：https://samwho.dev/turing-machines/&lt;/p>
&lt;p>文章内容是对图灵机(现代计算机的理论原型)的介绍。&lt;/p>
&lt;p>图灵机尽管设计简单，只有四个部件和五条指令，但事实证明它能够执行任何可能的计算，为现代计算机奠定了理论基础。&lt;/p>
&lt;p>文章内嵌入了很有趣的图灵机交互控件，可以跟随作者一边学习知识概念，一边体验计算的魅力。&lt;/p>
&lt;h3 id="做一个能听懂键盘敲击键位的玩具">做一个能听懂键盘敲击键位的「玩具」
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-56-36.png"
width="246"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="48"
data-flex-basis="117px"
>&lt;/p>
&lt;p>基于声学信号处理及深度学习的键盘敲击识别系统。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ZhuoZhuoCrayon/AcousticKeyBoard-Web" target="_blank" rel="noopener"
>AcousticKeyBoard&lt;/a> 源自一个想法「做一个听懂键盘敲击键位的玩具？」，用于学习信号处理 / 深度学习 / 安卓 / Django。 ​​​&lt;/p>
&lt;p>基本原理：&lt;/p>
&lt;ul>
&lt;li>按键敲击最高世界记录约为 800 / min，平均每 75 ms 敲击一次键盘，即按键重叠发生在 3,600 的 silence 片段。&lt;/li>
&lt;li>单人敲击键盘场景下，Hit 片段不会重合，并且不同按键所处位置、形状有所区别，Hit 具有可识别特征。&lt;/li>
&lt;li>空格与其他按键形状不同，敲击声已明显不同。&lt;/li>
&lt;li>不同按键周围的固体环境有差异，声音信号基于固体传导，在峰段存在差异。&lt;/li>
&lt;/ul>
&lt;h3 id="关于-ai-智能体agents的详细介绍">关于 AI 智能体（Agents）的详细介绍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-57-14.png"
width="796"
height="642"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="297px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huyenchip.com//2025/01/07/agents.html" target="_blank" rel="noopener"
>&lt;/a> ，文章深入介绍了 AI Agents 的核心概念、关键组成部分以及实践经验，包括如下内容：&lt;/p>
&lt;ul>
&lt;li>AI Agents 的详细介绍：一个能感知环境并采取行动的智能系统；&lt;/li>
&lt;li>Agents 两大核心能力支柱：工具集（知识增强、能力扩展、操作能力）和规划能力（执行、反思、纠错）；&lt;/li>
&lt;li>Agents 三大失败模式：规划失败、工具失败和效率问题。&lt;/li>
&lt;/ul>
&lt;h3 id="一个免费白噪音网站">一个免费白噪音网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-57-33.png"
width="690"
height="401"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="412px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.ppbzy.com/" target="_blank" rel="noopener"
>泡泡白噪音&lt;/a>：提升专注与放松的一站式白噪音平台&lt;/p>
&lt;p>🌟 产品亮点
1️⃣ 丰富的白噪音选择
提供上百种高质量的白噪音场景，包括自然环境、城市氛围和独特的声音素材：
☕ 咖啡厅背景声、火车行驶声、飞机白噪音
🌊 雨声、海浪声、森林风声等自然白噪音
🎵 Lofi 音乐与轻柔旋律，适合舒缓放松
2️⃣ 白噪音组合与收藏功能
支持多个白噪音的自由组合，每个音源都可以单独调整音量，随心定制属于你的专属音效！
比如同时播放「咖啡厅」+「下雨声」+「键盘敲击声」，打造最适合你的工作氛围。
收藏功能：将喜欢的白噪音组合一键保存，随时快速切换。
3️⃣ 场景模式，一键开启 + 放松视频
根据不同需求设计了 3 大场景模式：
工作模式：提升注意力，适合学习、写作和编码。
助眠模式：舒缓身心，帮助快速入睡。
冥想模式：沉浸在自然的声音中，平静你的心灵。
放松场景视频：提供沉浸式动画场景切换（如雨夜中的温馨小屋），增强沉浸感。
4️⃣ 定时功能
设置播放时长，白噪音将在指定时间后自动关闭，让你放心工作、学习或入睡，无需手动操作。
5️⃣ 音质选择功能
支持多种音质选择，从高音质到低音质，满足不同设备和网络环境需求。
6️⃣ 内置番茄钟功能
集成了 番茄计时器，帮助你专注工作或学习，同时享受喜欢的白噪音。
7️⃣ 背景主题切换
可根据个人喜好选择背景主题（白天、夜晚等），增加沉浸感，贴合当下的情绪与状态。
8️⃣ 无干扰体验
简洁的设计，无广告，无注册，无干扰，让你专注于自己想做的事。&lt;/p>
&lt;h3 id="音乐合成器知识学习">音乐合成器知识学习
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-57-48.png"
width="690"
height="382"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://learningsynths.ableton.com/zh-Hans" target="_blank" rel="noopener"
>音乐合成器入门&lt;/a>，这是一个在线交互站点，可以一边学习合成器的基础知识一边上手体验。&lt;/p>
&lt;p>网站也支持 MIDI 键盘输入，跟着教程捏出自己独有的音色之后还可以来一段现场演奏。 ​​​&lt;/p>
&lt;p>之前还出过一个姊妹篇：&lt;a class="link" href="https://learningmusic.ableton.com/zh-Hans/" target="_blank" rel="noopener"
>在线学习编曲&lt;/a>。&lt;/p>
&lt;h3 id="透明背景视频生成">透明背景视频生成
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-58-12.png"
width="506"
height="304"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/wileewang/TransPixar" target="_blank" rel="noopener"
>TransPixar&lt;/a>, 是由 Adobe 和香港科大开源的一款可以生成透明视频的项目，它可以生成包含烟雾、反射、水滴等透明元素的视频，看起来非常真实、更自然。&lt;/p>
&lt;p>这给比如电影特效制作、游戏画面渲染、虚拟现实创作提供了更多的便利性。&lt;/p>
&lt;h3 id="操作系统教程">操作系统教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-58-26.png"
width="690"
height="648"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://operating-system-in-1000-lines.vercel.app/en" target="_blank" rel="noopener"
>用大概1000行代码，从零开始构建一个小型的操作系统&lt;/a>。&lt;/p>
&lt;p>这个教程详细介绍了构建一个小型操作系统的过程，包括实现基本的上下文切换、分页、用户模式、命令行Shell、磁盘设备驱动程序以及文件的读写操作。尽管这些听起来很复杂，但整个操作系统的代码量仅为 1000 行。&lt;/p>
&lt;h3 id="用视觉模型将-pdf-转换为-markdown-格式">用视觉模型将 PDF 转换为 Markdown 格式
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-58-38.png"
width="690"
height="259"
loading="lazy"
class="gallery-image"
data-flex-grow="266"
data-flex-basis="639px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/getomni-ai/zerox" target="_blank" rel="noopener"
>zerox&lt;/a>，一个基于视觉模型的 OCR 工具，因为其在识别过程中调用了大模型的能力，所以对于带有特殊布局、表格、图表的文档转换效果要高于普通 OCR 文字识别程序。 ​​​&lt;/p>
&lt;h3 id="绘画点子生成器">绘画点子生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-58-48.png"
width="690"
height="531"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://whattodraw.art/" target="_blank" rel="noopener"
>画点儿啥&lt;/a>，解决想画画但是又不知道画点儿啥的问题。&lt;/p>
&lt;p>这个网站可以随机生成一些绘画主意，可以在线作画，然后将你的结果提交与全网进行比对得分。 ​​​&lt;/p>
&lt;h3 id="安卓设备调试界面工具">安卓设备调试界面工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-58-57.png"
width="690"
height="458"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/liriliri/aya" target="_blank" rel="noopener"
>aya&lt;/a>，是一个用于简化对安卓设备操作控制的桌面应用程序，可以看作是 ADB 的图形用户界面。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>内置 ADB，安装即用，无需任何额外的复杂操作。&lt;/li>
&lt;li>按类别分为多个面板，包括应用程序管理、性能监控、流程管理等。&lt;/li>
&lt;li>图形用户界面，一键操作，无需输入任何命令。&lt;/li>
&lt;/ul>
&lt;h3 id="免费ai歌曲生成器-free-ai-song-generator">免费AI歌曲生成器 Free AI Song Generator
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-59-10.png"
width="690"
height="425"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>网址：https://ai-song.ai/&lt;/p>
&lt;p>输入歌词，AI 会根据歌词生成一首歌曲，自动完成谱曲、编曲、演唱全部内容，可以选择不同的风格和情感。&lt;/p>
&lt;h3 id="关于-ai-对编程行业影响的不负责任推测">关于 AI 对编程行业影响的不负责任推测
&lt;/h3>&lt;p>经过几天的 AI 大模型 Agent 发展现状的研究，我感觉未来属于有想象力的、能吹牛逼讲故事的人（可能过去也是一直属于这种人）。&lt;/p>
&lt;p>要说之前吹牛逼的人还需要忽悠真人帮他实现梦想，实现起来有点儿难度之外，现在直接有无限个 AI 机器人任劳任怨地帮你实现梦想。&lt;/p>
&lt;p>对着 AI 讲故事，然后它们把故事实现，这是未来的主要商业模式（看看抖音的扣子平台，已经涌现出大量的这样的产品了）。&lt;/p>
&lt;p>未来的编程方式也会完全改变，当今的高级语言不会再有人使用，或者就像汇编语言那样只在特殊场景才被特殊群体使用。&lt;/p>
&lt;p>取而代之的编程语言就是自然语言，由 AI 模型将自然语言解析成为计算机语言。&lt;/p>
&lt;p>软件架构将产生巨大颠覆，现在所谓的代码复用、可扩展性、可伸缩性在新的 AI 架构下将不再作为重点目标，AI 编程的时候可以完全无视这些，需要代码就随时生成，统统写死，一次性地运行也将成为一种经济型策略。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 114 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/</link><pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-21-20.png" alt="Featured image of post 机器文摘 第 114 期" />&lt;h1 id="机器文摘-第-114-期">机器文摘 第 114 期
&lt;/h1>&lt;h3 id="跟孩子一起制作一个-8bit-个人电脑吧">跟孩子一起制作一个 8bit 个人电脑吧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-19-49.png"
width="640"
height="430"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="357px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.codycomputer.org/" target="_blank" rel="noopener"
>Cody Computer&lt;/a>，是一个 DIY 项目，灵感来自于20世纪80年代康懋达（Commodore）家用电脑（但并不兼容它）。&lt;/p>
&lt;p>Cody Computer 围绕 Western Design Center 的 65C02 和 65C22 微处理器以及 Parallax Propeller 微控制器构建。&lt;/p>
&lt;p>它并不是要与现代电脑或旧电脑的新版本竞争，而是作为一个简单、有趣、可能还有点教育意义的项目。&lt;/p>
&lt;p>项目使用 KiCad 设计电子部分，使用 OpenSCAD 和 Inkscape 开发机械部件，所有设计文件和软件均在 GPLv3 许可证下发布。&lt;/p>
&lt;p>功能特性&lt;/p>
&lt;ul>
&lt;li>易于组装：基于现代65C02、65C22 和 P8X32A 构建。&lt;/li>
&lt;li>3D打印部件：包括机械部件和键盘，以及定制的3D打印键帽套装。&lt;/li>
&lt;li>Cody BASIC：启动时进入 &amp;ldquo;Cody BASIC&amp;rdquo; 环境，支持使用 64tass 进行汇编语言交叉开发。&lt;/li>
&lt;li>视频：160x200 NTSC 视频图形，灵感来自 VIC-II 的多色模式。&lt;/li>
&lt;li>音频：实现 Commodore SID 功能的有限子集。&lt;/li>
&lt;li>端口：包括扩展/卡带端口、两个缓冲UART和Atari风格的操纵杆连接器。&lt;/li>
&lt;/ul>
&lt;h3 id="绕过-windows-11版本-24h2上的-bitlocker-加密">绕过 Windows 11（版本 24H2）上的 BitLocker 加密
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-20-49.png"
width="525"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="333px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://noinitrd.github.io/Memory-Dump-UEFI/" target="_blank" rel="noopener"
>这篇文章&lt;/a>是关于如何绕过 Windows 11（版本 24H2）上的 BitLocker 加密。&lt;/p>
&lt;p>作者通过使用自己开发的工具 Memory-Dump-UEFI 从内存中提取完整的卷加密密钥（FVEK）来实现这一目标。&lt;/p>
&lt;p>如果攻击者能够物理接触设备，他们可能会通过突然重启计算机并转储最近运行的 Windows 实例的 RAM 来获取访问权限。捕获的内存可以被分析以定位敏感信息，如 FVEK 密钥。这种技术并非万无一失，因为一旦断电，RAM 中的内容会迅速退化。&lt;/p>
&lt;p>步骤 1：创建可启动的 USB 设备&lt;/p>
&lt;p>为了完成这一步，你需要一个大于目标系统 RAM 容量的 USB 存储设备。作者提供了一个名为 flashimage.sh 的脚本来简化这个过程。&lt;/p>
&lt;p>步骤 2：突然重启目标系统&lt;/p>
&lt;p>这可以通过多种方式完成，但目标是最小化计算机完全断电的时间。作者在 Windows 加载但登录屏幕尚未出现之前重启系统时，找到了 FVEK 密钥。&lt;/p>
&lt;p>步骤 3：从 USB 设备启动&lt;/p>
&lt;p>立即从 USB 设备启动 Memory-Dump-UEFI。你将到达 UEFI shell，在那里你可以找到并执行 app.efi。这个过程的时间取决于正在转储的 RAM 量和 USB 设备的速度。&lt;/p>
&lt;p>步骤 4：分析转储&lt;/p>
&lt;ul>
&lt;li>设置：应用程序可能会产生几个转储文件，这是由于 FAT32 文件系统对文件大小有 4GB 的限制。作者提供了一个名为 concatDumps.py 的脚本，可以将几个转储文件按时间顺序合并为一个。&lt;/li>
&lt;li>池标签：池标签是 4 个字符长的标识符，指示 Windows 内核内存池的位置。这些池由 Windows 内核分配，是寻找敏感信息的好地方。&lt;/li>
&lt;li>FVEK 密钥恢复：作者在 dFVE 池标签下找到了 FVEK 密钥，这表明是由 dumpfve.sys 分配的内存，与 BitLocker 驱动器加密的完整卷加密崩溃转储过滤器有关。&lt;/li>
&lt;/ul>
&lt;p>在获得密钥后，需要在密钥前加上使用的算法。然后，将密钥转储到文件中，并使用 dislocker 工具套件来解锁 BitLocker 保护的分区。&lt;/p>
&lt;h3 id="1-秒为什么是-1-秒">1 秒为什么是 1 秒？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-21-09.png"
width="481"
height="354"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="326px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.johndcook.com/blog/2024/12/29/what-exactly-is-a-second/" target="_blank" rel="noopener"
>到底什么是 1 秒？&lt;/a>，一篇关于 1 秒为什么是 1 秒，以及现代人是如何对其进行精确定义的科普文。&lt;/p>
&lt;p>文章从Unix时间的微妙不准确性聊起，引出了对秒定义的深入讨论。他解释了为何地球自转的逐渐减慢促使科学家们在1967年重新定义秒，将其与铯原子的辐射周期挂钩，而非依赖于地球的自转。&lt;/p>
&lt;p>这种定义的转变，不仅保证了时间测量的精确性，也体现了科学对恒定标准的不懈追求。&lt;/p>
&lt;p>通过这篇文章，我们得以一窥秒背后的科学奥秘，以及它如何与我们的日常生活和科技进步紧密相连。&lt;/p>
&lt;h3 id="做一个蜂鸣器提醒自己不要久坐">做一个蜂鸣器，提醒自己不要久坐
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-21-20.png"
width="690"
height="660"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.jacobvosmaer.nl/0036-beeper/" target="_blank" rel="noopener"
>我最喜欢的人体工学&lt;/a>，作者介绍了他自创的一个名为 &amp;ldquo;The Beeper&amp;rdquo;（蜂鸣器）的 DIY 设备，这个设备帮助他解决了长时间坐在电脑前工作导致的身体疼痛问题。&lt;/p>
&lt;p>&amp;ldquo;The Beeper&amp;rdquo; 由三个部分组成：硬件、运行在硬件上的固件，以及在工作电脑上运行的软件。如果作者的电脑屏幕解锁时间过长，&amp;ldquo;The Beeper&amp;rdquo; 会开始发出蜂鸣声，因为设备放置在远离书桌的地方，所以他必须起身去关闭它，从而解决了长时间静坐的问题。&lt;/p>
&lt;p>硬件方面，&amp;ldquo;The Beeper&amp;rdquo; 被安装在一个小型的 ABS 塑料外壳中，内部包括一个 ESP8266 开发板、一个瞬时开关和一个压电蜂鸣器。蜂鸣器被粘在外壳上。&lt;/p>
&lt;p>在作者的笔记本电脑上运行的软件是经过多年调整，已经符合了作者的工作习惯。软件通过 macOS LaunchAgent 自动启动，每 20 分钟检查一次是否应该发出蜂鸣声，如果是，则激活 &amp;ldquo;The Beeper&amp;rdquo;。但如果作者的屏幕被锁定，或者他正在使用外接显示器，或者正在进行 Zoom 会议，软件则不会发出蜂鸣声。&lt;/p>
&lt;h3 id="openai-canvas-开源版本">OpenAI Canvas 开源版本
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-21-49.png"
width="767"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/langchain-ai/open-canvas" target="_blank" rel="noopener"
>Open Canvas&lt;/a>，是一个开源 Web 应用程序，用于与代理协作更好地编写文档。它的灵感来自OpenAI 的“Canvas” ，但是完全开源。&lt;/p>
&lt;p>不仅支持 Claude、Gemini、ChatGPT 等主流 LLM，还支持本地 Ollama 模型，同时内置记忆功能，更好记住我们的使用习惯与风格。&lt;/p>
&lt;p>主要特性如下：&lt;/p>
&lt;ul>
&lt;li>内置记忆 Agents：自动生成反馈和记忆，存储样式规则和用户见解；&lt;/li>
&lt;li>快捷操作：可自定义提示词，在不同对话中使用，提供常见的写作和编码等任务提示词；&lt;/li>
&lt;li>兼容多种格式：支持代码和 Markdown 等多种格式，同时可自由切换；&lt;/li>
&lt;li>实时渲染：在编辑 Markdown 可实时预览渲染效果；&lt;/li>
&lt;li>版本控制：所有内容都有版本记录，可以自由查看历史版本。&lt;/li>
&lt;/ul>
&lt;h3 id="ai-在-cad-领域的一种尝试">AI 在 CAD 领域的一种尝试
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-23-19.png"
width="690"
height="418"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zoo.dev/text-to-cad" target="_blank" rel="noopener"
>text-to-cad&lt;/a>。&lt;/p>
&lt;p>Text-to-CAD 是一个开源提示界面，用于通过文本提示生成 CAD 文件。生成可以导入到您选择的 CAD 程序中的模型。 ​​​&lt;/p>
&lt;h3 id="基于-webgl-的流体力学模拟">基于 webgl 的流体力学模拟
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-23-38.png"
width="690"
height="623"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://paveldogreat.github.io/WebGL-Fluid-Simulation/" target="_blank" rel="noopener"
>Fluid-Simulation&lt;/a>，是一个基于 WebGL 的流体力学模拟项目，可以
在网页中模拟流体运动，用户通过鼠标交互，项目同时提供了一个可在手机上运行的移动版本。 ​​​&lt;/p>
&lt;h3 id="基于-webrtc-的去中心化匿名聊天浏览器插件">基于 WebRTC 的去中心化匿名聊天浏览器插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-24-17.png"
width="475"
height="267"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/molvqingtai/WebChat" target="_blank" rel="noopener"
>WebChat&lt;/a>，在任何网站上，无需注册，一键开启与他人聊天，利用 WebRTC 端到端加密，所有聊天数据保存到本地，安全隐私。&lt;/p>
&lt;p>在任何网站上，无需注册，一键开启与他人聊天，利用 WebRTC 端到端加密，所有聊天数据保存到本地，安全隐私。&lt;/p>
&lt;h3 id="大模型导航资源">大模型导航资源
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-25-17.png"
width="817"
height="660"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="297px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Hannibal046/Awesome-LLM" target="_blank" rel="noopener"
>Awesome-LLM&lt;/a>，里面收集了几乎全部的模型，具有里程碑意义的论文，排行榜，测试集，训练框架，部署，应用，书籍等。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 113 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-55-02.png" alt="Featured image of post 机器文摘 第 113 期" />&lt;h1 id="机器文摘-第-113-期">机器文摘 第 113 期
&lt;/h1>&lt;h3 id="用-esp32-做一个无人机">用 ESP32 做一个无人机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-55-02.png"
width="524"
height="355"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.digikey.cn/zh/maker/projects/a-step-by-step-guide-to-build-a-low-cost-drone-using-esp32/8afccd0690574bcebfa0d2ad6fd0a391" target="_blank" rel="noopener"
>一个使用 ESP32 制作廉价无人机的项目&lt;/a>&lt;/p>
&lt;p>教人们如何使用 ESP32 微控制器构建一个低成本的无人机。&lt;/p>
&lt;p>ESP32是一款功能强大的低成本微控制器，广泛用于物联网(IoT)项目和嵌入式系统。它具有Wi-Fi和蓝牙功能，适合用于需要无线连接的项目。&lt;/p>
&lt;p>项目特点：&lt;/p>
&lt;ul>
&lt;li>Wi-Fi控制：可以通过智能手机控制。&lt;/li>
&lt;li>MPU6050 IMU：用于稳定性控制。&lt;/li>
&lt;li>一体化PCB：不需要任何3D打印部件。&lt;/li>
&lt;li>易于升级：可以通过外部模块添加定位保持或高度保持等额外功能。&lt;/li>
&lt;li>小尺寸和轻量级。&lt;/li>
&lt;li>内置电池充电器。&lt;/li>
&lt;li>内置USB接口：用于编程和调试。&lt;/li>
&lt;li>支持Android和iOS应用。&lt;/li>
&lt;li>开源。&lt;/li>
&lt;/ul>
&lt;p>基于 Espressif 的 ESP-drone 固件，使用 ESP-IDF 4.4.5 版本编写。可以通过提供的&lt;a class="link" href="https://github.com/Circuit-Digest/ESP-Drone" target="_blank" rel="noopener"
>GitHub仓库&lt;/a>从头开始构建固件，或者如果不想麻烦，可以直接刷入提供的二进制文件。&lt;/p>
&lt;h3 id="将-sqlite-性能提升-10-倍">将 SQLite 性能提升 10 倍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-55-17.png"
width="663"
height="321"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="495px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://avi.im/blag/2024/sqlite-past-present-future/" target="_blank" rel="noopener"
>这篇深入探讨SQLite数据库性能优化&lt;/a>的文章，详细阐述了如何通过引入布隆过滤器这一创新技术，显著提升了SQLite在处理分析查询时的速度，实现了高达10倍的性能飞跃。&lt;/p>
&lt;p>文章不仅回顾了SQLite的发展历程，还深入分析了数据库连接操作的内部机制，并探讨了优化数据库查询的策略，最终展示了这一改进如何在SQLite v3.38.0版本中得到实际应用。&lt;/p>
&lt;h3 id="教程---用-c-语言写-shell">教程 - 用 C 语言写 Shell
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-55-35.png"
width="442"
height="595"
loading="lazy"
class="gallery-image"
data-flex-grow="74"
data-flex-basis="178px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://brennan.io/2015/01/16/write-a-shell-in-c/" target="_blank" rel="noopener"
>用 C 语言编写一个 Shell&lt;/a>，这篇教程带领读者用 C 语言实现一个简易的 shell，对于希望进阶的程序员来说，实现一个自己的 shell 有助于更深入地了解操作系统、shell 等概念以及底层技术。&lt;/p>
&lt;h3 id="教程---用-c-语言写虚拟机">教程 - 用 C 语言写虚拟机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-55-48.png"
width="560"
height="365"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.jmeiners.com/lc3-vm/" target="_blank" rel="noopener"
>编写您自己的虚拟机&lt;/a>，这是一份手把手教授读者进行虚拟机编写的教程。&lt;/p>
&lt;p>跟随教程可以实现一个可以运行汇编程序的真正 VM，可以运行一些自己编写的游戏。&lt;/p>
&lt;p>成品只有大概 250 行 C 代码，但作者讲的比较细，文档量比代码量大多了。 ​​​&lt;/p>
&lt;h3 id="一个脑洞清奇的网络安全项目">一个脑洞清奇的网络安全项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-56-01.png"
width="690"
height="760"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/drk1wi/portspoof" target="_blank" rel="noopener"
>Portspoof&lt;/a>，这个项目在安全防护方面主打一个逆向思维，你不是扫我端口开没开吗？老子把 65536 个端口全打开了（伪装），慢慢扫吧。&lt;/p>
&lt;p>这个安全工具的逻辑是：通过使所有 TCP 端口始终处于开放状态，以及模拟服务响应，增加攻击者对系统进行侦察的难度。&lt;/p>
&lt;p>核心功能&lt;/p>
&lt;ul>
&lt;li>端口欺骗：Portspoof 使所有 65535 个 TCP 端口都显示为开放状态。当攻击者尝试连接到任何端口时，Portspoof 会返回 SYN+ACK，而不是告知端口是关闭或被过滤的。&lt;/li>
&lt;li>服务模拟：Portspoof 拥有一个庞大的动态服务签名数据库，用于生成虚假的服务标识（banners），以欺骗扫描器。这使得攻击者难以确定哪些端口真正在使用服务。&lt;/li>
&lt;/ul>
&lt;p>攻击者估计一脸宋小宝：玩儿呐？&lt;/p>
&lt;h3 id="构建自己的音乐流媒体中心">构建自己的音乐流媒体中心
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-56-37.png"
width="690"
height="381"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="434px"
>&lt;/p>
&lt;p>爱收藏音乐的 NAS 佬又有可以折腾的项目了。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/blackcandy-org/blackcandy" target="_blank" rel="noopener"
>Black Candy&lt;/a>是一个开源自托管音乐流媒体服务器。适合那些希望拥有个人音乐库并能够自托管音乐流媒体服务的用户。通过 Black Candy，用户可以轻松地管理和播放自己的音乐收藏，同时享受自托管带来的隐私和控制优势。&lt;/p>
&lt;p>主要功能特性：&lt;/p>
&lt;ul>
&lt;li>音乐流媒体：作为一个自托管的音乐流媒体服务器，用户可以播放存储在服务器上的音乐。&lt;/li>
&lt;li>移动应用：提供了移动应用，可在各大应用商店下载。&lt;/li>
&lt;/ul>
&lt;p>项目目前还在积极开发中，可能还不太稳定。&lt;/p>
&lt;h3 id="全平台网页收藏工具">全平台网页收藏工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-56-48.png"
width="690"
height="423"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="391px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/hoarder-app/hoarder" target="_blank" rel="noopener"
>Hoarder&lt;/a> 是一个自托管的、能够保存书签、笔记、图片和 PDF 文件的平台，并且具有基于人工智能的自动标记和全文搜索功能。&lt;/p>
&lt;p>这个项目的开发者在日常生活中经常在手机上浏览 Reddit、Twitter 和 Hacker News，发现有趣的内容（文章、工具等）想要保存以便在电脑前阅读。最初使用 Pocket 作为稍后阅读的应用，但后来对自托管产生了兴趣，希望构建一个自托管的解决方案。&lt;/p>
&lt;p>主要功能特性：
书签管理：可以保存链接、简单的笔记、图片和 PDF 文件。
自动获取：自动获取链接的标题、描述和图片。
分类整理：将书签分类到不同的列表中。
全文搜索：对存储的所有内容进行全文搜索。
AI自动标记：使用 AI（如 chatgpt）进行自动标记，支持使用本地模型。
OCR技术：从图片中提取文本。
浏览器插件：提供 Chrome 和 Firefox 插件，方便快速书签保存。
移动应用：提供 iOS 和 Android 应用。
RSS订阅：自动从 RSS 订阅中保存内容。
REST API：提供 REST API 接口。
页面归档：使用 &lt;a class="link" href="https://github.com/Y2Z/monolith" target="_blank" rel="noopener"
>monolith&lt;/a> 进行全页面归档，防止链接失效，自动使用 youtube-dl 归档视频。&lt;/p>
&lt;p>“去我的收藏夹吃灰”又多了一个工具。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 112 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/</link><pubDate>Mon, 23 Dec 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-07-18.png" alt="Featured image of post 机器文摘 第 112 期" />&lt;h1 id="机器文摘-第-112-期">机器文摘 第 112 期
&lt;/h1>&lt;h3 id="xbox-360-游戏机的破解原理">XBox 360 游戏机的破解原理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-06-24.png"
width="466"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>由于当年微软在发布 xbox 游戏机初代时安全方面做的不足，导致该机器很快被破解，后来虽然微软发布了 6 次修补程序，也无济于事（每次补丁都在数周内被破解）。&lt;/p>
&lt;p>所以xbox 360 游戏机在发布时做足了安全方面的工作，也确实很难破解，无法运行任何未通过“微软签名”认证的程序。一度被认为是不可破解的游戏机。&lt;/p>
&lt;p>然而在该机发布的 6 年后，还是有聪明的黑客，通过“硬件”手段，找到了破解方法。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/README.md" target="_blank" rel="noopener"
>《xbox360硬件安全漏洞研究》&lt;/a>记录了详细的实现原理。&lt;/p>
&lt;p>基本原理概括如下：
xbox 360 启动时加载引导程序，此时它会比对程序是否被签名过。&lt;/p>
&lt;p>既然是“比对”那就有相应的指令：memcmp。&lt;/p>
&lt;p>在cpu旁边等着，在它执行签名认证的 memcmp 指令的那一刻，给它的 reset 引脚发射一个大约 10 纳秒的脉冲信号，让它哆嗦一下，发生了硬件故障但不至于死机。此时这条指令就会返回 0x00，也就是说无论比对是否成功，都会认为成功。&lt;/p>
&lt;p>基于此，你就可以让游戏机加载并运行你的未签名的程序了。&lt;/p>
&lt;h3 id="给-html-的元素设置一个不存在的颜色">给 HTML 的元素设置一个不存在的颜色
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-06-37.png"
width="690"
height="593"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="279px"
>&lt;/p>
&lt;p>在 HTML 的元素属性里有个 Color 属性，可以设置元素颜色，支持 &lt;code>#000000&lt;/code> HEX 色值以及颜色名的方式（比如 black、white、green 等）指定颜色。&lt;/p>
&lt;p>如果你设置了一个奇怪的名称给 Color，浏览器也会试图解析它，比如：&lt;code>&amp;lt;font color=&amp;quot;chucknorris&amp;quot;&amp;gt;&lt;/code>，会显示红色的字体。&lt;/p>
&lt;p>&lt;a class="link" href="http://t.cn/A6msThEe" target="_blank" rel="noopener"
>《我最喜欢的颜色是 chucknorris 红》&lt;/a>探讨了在 HTML 中设置文本颜色的一种非常规方法，并解释了为什么浏览器会把 chucknorris 解析为红色。&lt;/p>
&lt;p>文章详细解释了浏览器如何处理无效的颜色值，包括：&lt;/p>
&lt;ul>
&lt;li>清理：移除颜色值前的 #。&lt;/li>
&lt;li>替换无效字符：非十六进制字符被替换为 0。&lt;/li>
&lt;li>标准化长度：不足部分补 0。&lt;/li>
&lt;li>分割成红绿蓝三部分。&lt;/li>
&lt;li>处理长度：过长的组件会被截断，过短的会被补足。&lt;/li>
&lt;li>最终组合：将处理后的红绿蓝值组合成最终的颜色。&lt;/li>
&lt;/ul>
&lt;p>按照上面的规则chucknorris最终被浏览器解析为红色。&lt;/p>
&lt;h3 id="为什么使用极坐标绘制质数图案呈现出一个星系">为什么使用极坐标绘制质数图案呈现出一个星系
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-07-07.png"
width="639"
height="731"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="209px"
>&lt;/p>
&lt;p>将多个质数按极坐标绘制出来时，如果数量足够多，其图案将呈现出螺旋状，就像一个星系。&lt;/p>
&lt;p>&lt;a class="link" href="https://jaketae.github.io/study/prime-spirals/" target="_blank" rel="noopener"
>这篇文章&lt;/a>进行了一些分析。&lt;/p>
&lt;p>事实上，呈现出螺旋状与质数无关，即使绘制所有正整数也会呈现类似效果。&lt;/p>
&lt;p>此文从数学的角度，解释了呈现螺旋的原因。&lt;/p>
&lt;h3 id="自制一个显示课程表的电子墨水屏">自制一个显示课程表的电子墨水屏
&lt;/h3>&lt;p>​​​&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-07-18.png"
width="649"
height="394"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mfasold.net/blog/displaying-website-content-on-an-e-ink-display/" target="_blank" rel="noopener"
>在电子墨水屏上显示网站内容&lt;/a>，本文介绍了一个将学校课程表自动显示在电子墨水屏上的项目。&lt;/p>
&lt;p>作者选用了搭载 ESP32 微控制器的 Inkplate 6COLOR 设备，通过 MicroPython 编程实现。&lt;/p>
&lt;p>项目通过 Playwright 进行网页抓取，Pillow 库处理图像，再利用 Werkzeug 搭建简易服务器发布图像。&lt;/p>
&lt;p>最终，通过 Arduino 库在电子墨水屏上显示处理后的课程表图像，实现低功耗、定时更新。这个DIY项目不仅提高了家庭日常效率，还展示了如何将网络内容自动化展示在电子设备上。&lt;/p>
&lt;p>关键技术点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>电子墨水屏技术&lt;/strong>：电子墨水屏以其低功耗和类似纸张的阅读体验而闻名，适合长时间显示静态内容，如课程表。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>微控制器编程&lt;/strong>：通过Arduino或MicroPython对ESP32微控制器进行编程，实现设备控制和网络通信。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>网络抓取（Web Scraping）&lt;/strong>：使用Playwright等工具模拟浏览器操作，从网站上提取所需数据，即使网站有登录限制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图像处理&lt;/strong>：利用Pillow库对抓取的网页内容进行颜色量化和尺寸调整，以适配电子墨水屏的显示要求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实时时钟（RTC）&lt;/strong>：使用RTC模块设置设备定时唤醒，更新显示内容，然后再次进入深度睡眠模式以节省电力。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Wi-Fi通信&lt;/strong>：ESP32微控制器的Wi-Fi功能用于从互联网获取数据，实现远程内容更新。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Docker容器化&lt;/strong>：将应用及其依赖打包进Docker容器，简化部署和维护，适用于多种云服务和虚拟私有服务器。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="将各种文件转换为-markdown">将各种文件转换为 Markdown
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-08-16.png"
width="569"
height="499"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="273px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://github.com/microsoft/markitdown" target="_blank" rel="noopener"
>markitdown&lt;/a>，微软发布的一个开源工具，用于将各种文件转换为 Markdown 格式。&lt;/p>
&lt;p>支持：&lt;/p>
&lt;ul>
&lt;li>PDF（.pdf）&lt;/li>
&lt;li>PowerPoint （.pptx）&lt;/li>
&lt;li>Word （.docx）&lt;/li>
&lt;li>Excel (.xlsx)&lt;/li>
&lt;li>图像（EXIF 元数据和 OCR）&lt;/li>
&lt;li>音频（EXIF 元数据和语音转录）&lt;/li>
&lt;li>HTML（维基百科等的特殊处理）&lt;/li>
&lt;li>各种其他基于文本的格式（csv、json、xml 等）&lt;/li>
&lt;/ul>
&lt;h3 id="excel-cpu">excel CPU
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-08-40.png"
width="690"
height="441"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/InkboxSoftware/excelCPU" target="_blank" rel="noopener"
>excelCPU&lt;/a>, 一个用 Excel 表格实现的 CPU 模拟器，可以在 Excel 中模拟 CPU 的运行过程，包括指令集、寄存器、内存、堆栈等。&lt;/p>
&lt;p>项目包括CPU.xlsx、ROM.xlsx、InstructionSet.xlsx等文件，以及一个Python编译器用于将Excel-ASM16语言编写的程序编译成Excel可以理解的格式。&lt;/p>
&lt;p>用户可以通过修改Excel工作表中的值来控制CPU，执行程序，并观察CPU的运行状态。&lt;/p>
&lt;p>项目提供了详细的指令集和操作说明，允许用户深入了解和实践基于Excel的计算和编程。&lt;/p>
&lt;h3 id="一个帮助提升英语水平的新闻网站">一个帮助提升英语水平的新闻网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-08-54.png"
width="690"
height="487"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://englishnewsinlevels.com" target="_blank" rel="noopener"
>englishnewsinlevels.com&lt;/a>，一个帮助提升英语水平的新闻网站，提供了不同难度的新闻，分为三个级别：1级、2级、3级。&lt;/p>
&lt;p>1级：适合初学者，使用简单的词汇和句子，新闻内容简单易懂。&lt;/p>
&lt;p>2级：适合中级水平，使用更多的词汇和句子，新闻内容更丰富。&lt;/p>
&lt;p>3级：适合高级水平，使用更复杂的词汇和句子，新闻内容更深入。&lt;/p>
&lt;ul>
&lt;li>每篇新闻配备优质音频和重点词汇注释&lt;/li>
&lt;li>文章难度分级精确，循序渐进&lt;/li>
&lt;li>阅读后有理解测验，帮助巩固学习&lt;/li>
&lt;li>个人词汇本功能，可收藏和复习生词&lt;/li>
&lt;li>自动统计学习数据：已掌握词汇量、阅读文章数、连续学习天数等&lt;/li>
&lt;li>支持下载 PDF，方便离线阅读&lt;/li>
&lt;li>界面简洁无广告，专注于学习体验&lt;/li>
&lt;/ul>
&lt;h3 id="几句话就能生成可调节的音效音频">几句话就能生成可调节的音效音频
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-09-10.png"
width="690"
height="685"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tiktokvoice.net/en/sounds-effect" target="_blank" rel="noopener"
>sounds-effect&lt;/a>&lt;/p>
&lt;p>应用场景场景：&lt;/p>
&lt;ul>
&lt;li>🎮 生成游戏开发中音效，比如：击打，乐器，环境声音等；&lt;/li>
&lt;li>🍀 白噪音视频和音频中的背景音，比如：下雨，打雷，风吹声等；&lt;/li>
&lt;li>💡 创意视频和广告中的特殊声音，比如：飞碟降落，塞车疾驰，宇宙飞行等； ​​​&lt;/li>
&lt;/ul>
&lt;h3 id="机器人训练源码">机器人训练源码
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-09-46.png"
width="585"
height="575"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="244px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/unitreerobotics/unitree_rl_gym" target="_blank" rel="noopener"
>Unitree RL GYM&lt;/a>，Unitree 宇树科技开源了其机器人训练的所有源代码，包括了 强化学习（RL）训练代码、从模拟到模拟（Sim-to-Sim） 和 从模拟到现实（Sim-to-Real） 的源代码。&lt;/p>
&lt;p>该项目可以帮助开发者或研究人员在虚拟环境中模拟和训练机器人，然后把训练结果转移到机器人上。是宇树科技Unitree H1、H1-2 和 G1 机器人已经验证过的技术。&lt;/p>
&lt;h3 id="专为通用-ai-训练而设计的物理模拟平台">专为通用 AI 训练而设计的物理模拟平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-10-40.png"
width="826"
height="690"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Genesis-Embodied-AI/Genesis" target="_blank" rel="noopener"
>Genesis&lt;/a>，生成式物理引擎，可以生成基于真实物理的4D动态世界，面向机器人和物理AI的通用模拟平台。&lt;/p>
&lt;p>四个主要能力：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>物理引擎：可以模拟现实世界的各种物理现象，包括刚体、关节体、液体、气体、可变形物体、薄壳物体和颗粒材料等，这些物理现象可以在统一框架下相互作用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>机器人仿真平台：轻量级、超快速、Python化、用户友好&lt;/p>
&lt;/li>
&lt;li>
&lt;p>渲染系统：可生成照片级真实的画面&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成式数据引擎：可以根据文字描述自动生成各类数据&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;em>这里未来可能诞生奴役人类的 The Matix。&lt;/em>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 111 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/</link><pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-42-31.png" alt="Featured image of post 机器文摘 第 111 期" />&lt;h1 id="机器文摘-第-111-期">机器文摘 第 111 期
&lt;/h1>&lt;h3 id="用不到-3000-个字节的-c-代码实现一个-chatgpt">用不到 3000 个字节的 C 代码，实现一个 chatGPT
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-42-31.png"
width="690"
height="566"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="292px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://nicholas.carlini.com/writing/2023/chat-gpt-2-in-c.html" target="_blank" rel="noopener"
>用大约3000字节的C语言代码实现l了个类似于ChatGPT的程序&lt;/a>，基于 GPT-2 模型。&lt;/p>
&lt;p>GPT-2是一个开源的自然语言处理模型，虽然它的能力远不及后来的 GPT-4（ChatGPT使用的模型），但它非常适合学习和理解 LLM 的工作原理，基于 GPT-2 你可以自己动手实现一个完全可用的聊天模型。&lt;/p>
&lt;p>这个 C 程序主要包括：&lt;/p>
&lt;ul>
&lt;li>基础矩阵数学库：由于神经网络本质上是矩阵运算，作者首先创建了一个极简的矩阵库，包括矩阵与常数的运算和矩阵间的运算。&lt;/li>
&lt;li>快速矩阵乘法：作者实现了一个基础的矩阵乘法算法，并对其进行了优化，使其能够更快地运行。&lt;/li>
&lt;li>神经网络层：为了构建一个变换器（transformer），作者定义了一些特殊的神经网络层，包括GELU激活函数和层归一化（LayerNorm）。&lt;/li>
&lt;li>变换器架构：在600字节的代码中，作者实现了变换器模型，这是GPT-2的核心。&lt;/li>
&lt;li>字节对编码（Byte pair encoding, BPE）：为了处理词汇表中单词的无限性，GPT-2使用BPE将单词分解为“词片”。作者描述了如何在C语言中实现BPE。&lt;/li>
&lt;li>权重加载：加载神经网络的实际权重也是必要的步骤，作者解释了如何从磁盘读取这些权重。&lt;/li>
&lt;li>BPE词汇表加载：为了执行BPE，作者需要从磁盘加载BPE词汇表，这个过程涉及到一些复杂的UTF-8编码处理。&lt;/li>
&lt;/ul>
&lt;h3 id="基于哈希值识别相似图像">基于哈希值识别相似图像
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-42-55.png"
width="470"
height="297"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="379px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/JohannesBuchner/imagehash" target="_blank" rel="noopener"
>imagehash&lt;/a>，该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。&lt;/p>
&lt;h3 id="完全本地运行的跨平台图像处理应用">完全本地运行的跨平台图像处理应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-43-12.png"
width="690"
height="430"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/zhongweili/imagenie" target="_blank" rel="noopener"
>Imagenie&lt;/a>。&lt;/p>
&lt;p>核心功能：人像修复、超分辨率放大、背景移除。&lt;/p>
&lt;p>技术原理：本地运行 AI 模型进行图像处理，基于 tauri 框架，本地使用 rust 语言开发核心功能，兼顾性能与跨平台。&lt;/p>
&lt;p>应用特点：AI 驱动：每个功能都是由 AI 模型本地化推理实现，完全本地运行，不必担心照片上传到 web。&lt;/p>
&lt;h3 id="将-markdown-文本-转换为美观的图片海报">将 Markdown 文本 转换为美观的图片海报
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-43-47.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/gcui-art/markdown-to-image" target="_blank" rel="noopener"
>Markdown-to-Image&lt;/a>，开源的 Markdown 转图片工具。&lt;/p>
&lt;ul>
&lt;li>直接将Markdown 格式的内容渲染成适合社交媒体分享的图片。&lt;/li>
&lt;li>可以选择内置的模板，也可以自己设计模板样式&lt;/li>
&lt;li>自带 9 种主题（比如不同的背景、配色风格）&lt;/li>
&lt;li>输出的图片可以直接复制，也可以转成 HTML 代码，粘贴到文章、邮件或编辑器里&lt;/li>
&lt;li>支持一键部署到你自己的服务器&lt;/li>
&lt;/ul>
&lt;h3 id="开源-excel-电子表格操作库java">开源 excel 电子表格操作库（Java）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-44-01.png"
width="622"
height="614"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="243px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/CodePhiliaX/fastexcel" target="_blank" rel="noopener"
>FastExcel&lt;/a>，由easyexcel(已停止维护)作者最新推出的新版本， 快速、简洁、解决大文件内存溢出的java处理Excel工具。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code>1. 完全兼容 EasyExcel，平滑过渡
FastExcel 完全兼容原 EasyExcel 的所有功能和特性。这意味着现有使用 EasyExcel 的项目，可以毫无障碍地迁移到 FastExcel。您只需简单地更换包名和 Maven 依赖，即可完成升级，无需担心任何兼容性问题。
2. 高性能表现，卓越体验
正如其名，FastExcel 在性能上有了显著的提升。通过对底层算法的优化和内存管理的改进，FastExcel 能够更加高效地处理大规模的 Excel 数据，大幅降低了内存消耗和处理时间。
3. 免费开源，MIT 协议
我们承诺，FastExcel 将始终免费开源，并采用最开放的 MIT 协议。这为开发者和企业提供了极大的自由度和灵活性，可以在任何商业化场景中自由使用 FastExcel，无需担心版权和授权问题。
4. 功能创新，超越自我
FastExcel 不仅继承了 EasyExcel 的所有功能，还在此基础上进行了许多创新和改进。在 1.0.0 版本中，我们新增了以下实用功能：
读取 Excel 指定行数：您可以根据需求，只读取感兴趣的部分数据，提高了数据处理的效率。
Excel 转换为 PDF：直接将 Excel 文件转换为 PDF，满足多样化的文档输出需求。
&lt;/code>&lt;/pre>
&lt;h3 id="一个工具解决管理开发环境版本的所有问题">一个工具解决管理开发环境版本的所有问题
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-44-17.png"
width="690"
height="344"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mise.jdx.dev/about.html" target="_blank" rel="noopener"
>Mise&lt;/a>是一个开发环境版本管理工具，作用类似于 pyenv、nvm等，但是更全面。&lt;/p>
&lt;p>可以管理多种语言的开发环境包括不限于 node、python、cmake、terraform等。&lt;/p>
&lt;p>安装和管理 Node、Python 或 Terraform 等开发工具/运行时，既简化了这些工具的安装，又允许您指定要在不同项目中使用这些工具的哪个版本。 Mise 支持 数百 种开发工具。&lt;/p>
&lt;p>同时 Mise 也是一个任务运行程序，可用于在开发人员之间共享项目中的常见任务，并简化文件更改时运行任务等操作。&lt;/p>
&lt;h3 id="基于纯键盘操作的浏览器">基于纯键盘操作的浏览器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-44-28.png"
width="690"
height="416"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="398px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.qutebrowser.org/" target="_blank" rel="noopener"
>qutebrowser&lt;/a>是一个以键盘为中心的开源浏览器（基于 Python 和 Qt）。&lt;/p>
&lt;p>具有最小化的 GUI 界面，使用与 Vim 编辑器相同的快捷键操作方式进行交互，让人沉浸在网页内容浏览之中。&lt;/p>
&lt;p>浏览器的制作灵感来自于 vimperator 插件，该插件允许用户使用 Vim 编辑器的快捷键操作浏览器（chrome 和 edge 浏览器版本的插件为 vimium）。&lt;/p>
&lt;h3 id="使用-webgpu-加速构建的文本转语音-web-应用程序">使用 WebGPU 加速构建的文本转语音 Web 应用程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-46-48.png"
width="521"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="248px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/huggingface/transformers.js-examples/tree/main/text-to-speech-webgpu" target="_blank" rel="noopener"
>TTS WebGPU&lt;/a>，第一个使用 WebGPU 加速构建的文本转语音 Web 应用程序。&lt;/p>
&lt;p>由 OuteTTS 和 Transformers.js 提供支持的高质量自然语音生成，100% 在浏览器中本地运行。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>2024 年个人年终总结</title><link>https://sbabybird.github.io/p/2024-%E5%B9%B4%E4%B8%AA%E4%BA%BA%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/2024-%E5%B9%B4%E4%B8%AA%E4%BA%BA%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid><description>&lt;h1 id="2024-年个人年终总结">2024 年个人年终总结
&lt;/h1>&lt;h2 id="回顾重要的事">回顾重要的事
&lt;/h2>&lt;p>&lt;em>记录这一年发生过的重要事情&lt;/em>&lt;/p>
&lt;h3 id="读书">读书
&lt;/h3>&lt;p>春天的时候，有次饭后在客厅踱步，随手从书架上取下一本史铁生的《命若琴弦》，一口气看完。&lt;/p>
&lt;p>唤醒了读书的回忆，想起了曾经有一段时间自己是多么渴望读书，以及对书的热爱，现在条件具备了，读书成为了最便宜的开销，怎么反而又让短视频夺走了时间呢？&lt;/p>
&lt;p>于是开启了一年的读书节奏，在微信读书中开的会员也发挥了作用，基本上早晚通勤路上都在看书，饭后也会一边在客厅踱步一边阅读。&lt;/p>
&lt;p>虽然都是碎片时间，但每天都读，几乎不间断，一年下来，竟然看了二三十本，这个阅读量远超前两年。&lt;/p>
&lt;p>但同时将阅读视为消遣，而不是学习，这样我就不会有心理压力。&lt;/p>
&lt;p>我会潦草地记录一些读书心得体会（在微信读书上），但也不会当作多么认真的事情。&lt;/p>
&lt;p>晚饭后捧着书阅读并不比坐在沙发上看电视要高级，但读书能够使我平静，这就足够了。&lt;/p>
&lt;h3 id="写作">写作
&lt;/h3>&lt;p>我每天都会在一个电子书平板上手写一些文字，既不是日记也不是散文。&lt;/p>
&lt;p>只是我的思维碎片，字迹十分潦草，就像加密过一样，我一度怀疑过后我也不会认得这些字。&lt;/p>
&lt;p>但是无所谓，谁还会再看呢？&lt;/p>
&lt;p>我把这个写作过程当作一种“冥想”，比起关注自己呼吸的那种，这种冥想对我更加有效，而且不费力气。&lt;/p>
&lt;p>我的压力和焦虑就在一点点写字的过程中逐渐的释放出来，写完我会变得平静，此时如果测量心跳和血压，将会无比正常。&lt;/p>
&lt;h3 id="饮食与健康">饮食与健康
&lt;/h3>&lt;p>不管是否愿意承认，已经开始的衰老还是如约反映到身体机能上，今年的体会更加深刻，刚开始甚至给我带来一些恐慌。&lt;/p>
&lt;p>但很快我就调整心态，并意识到这并非是什么大事情，而且一种自然规律，任何人都要接受一个事实，那就是人会随着岁月的增加而逐渐失去一些曾经拥有的东西。&lt;/p>
&lt;p>我变得更加注重饮食起居，以及由于代谢缓慢而不得已给自己主动增加运动量，包括不限于：多走路、爬楼梯、散步、跟着视频练习八段锦体操等活动。&lt;/p>
&lt;p>饮食上更加注重清淡，这在以前我是不能接受的，但现在开始可以接受，并且主动要求多吃绿色蔬菜，以及做到了完全不抽烟和几乎不喝酒。&lt;/p>
&lt;p>每天走路步数不低于 1 万步是我的底线。&lt;/p>
&lt;h3 id="学习">学习
&lt;/h3>&lt;p>英语、数学和编程是我一直没有停止的学习内容。&lt;/p>
&lt;p>但受现实影响，难以系统学习，只能利用碎片化时间进行学习，所以进展不算快，但长期坚持还是有所收获。&lt;/p>
&lt;p>而且我也感悟到了一个关于学习的道理：对于有了一定基础知识的学习者来说，与其按部就班地学习课程，不如在实际项目中迅速高强度地贯通知识。&lt;/p>
&lt;p>我不是说系统地学习不好，而是对于现阶段的我来说，以项目的方式来组织知识，用到什么就学什么，是最有效的学习方法。&lt;/p>
&lt;p>我这个阶段肯定不能再幻想着跟大学生、研究生那样以“学习”为职业的人一样，将学习视为某种特有的活动。&lt;/p>
&lt;p>而是早已将学习融入到生活中任何一个环节，任何时候都需要学习，都需要更新自己的知识。&lt;/p>
&lt;h3 id="摄影">摄影
&lt;/h3>&lt;p>意识到手机现在完全可以替代相机（对于我的需求来说），不再执着使用卡片相机、单反相机或富士的装逼相机（让它们统统都吃灰去吧）拍照。&lt;/p>
&lt;p>在日常生活中多拍，能够随时随地抓住瞬间才是重要的。&lt;/p>
&lt;p>今年更换了手机，将自 2005 年以来所使用过的所有手机拍摄的照片全部拷贝到这个新手机上，一并进行了云盘备份保存。&lt;/p>
&lt;p>新手机的 AI 智能检索功能十分有效，能够让我快速查找到想要的照片，能够随手翻阅的相册才是好相册，能够随时待命的相机才是好相机。&lt;/p>
&lt;p>继续用拍照记录生活，不管使用什么设备，从某种程度上来说，我在摄影这方面已经“超脱”了。&lt;/p>
&lt;h3 id="游戏">游戏
&lt;/h3>&lt;p>今年终于通关了《塞尔达传说-神奇的帽子》，这部 2004 年发行在任天堂 GameBoy Advance 掌机上的优秀作品。&lt;/p>
&lt;p>这个游戏我从 2023 年年初开始玩，经历了卡关、弃坑、重开等一系列的操作，最终在攻略的指引下，战胜了大 BOSS，获得了通关体验（随即又花费了一点儿时间很快通关了第二次）。&lt;/p>
&lt;p>另外，PS1 平台的《山脊赛车 R4》我也通关了 2 次，这个游戏越玩越顺手，操作手感非常丝滑，虽然 PS1 平台是索尼在 1994 年发布的，游戏画面简陋（与现代游戏比起来惨不忍睹），但玩起来的体验要好于现在的 AAA 大作。&lt;/p>
&lt;p>PS2 平台的几部极品飞车（地下狂飙 1 2、卧底、最高通缉等）也陆续耍了耍，但是没通关。&lt;/p>
&lt;p>使用十年前配置的电脑，玩二十年前的主流游戏，是一个非常划算的事情。&lt;/p>
&lt;p>或者使用模拟器玩更复古的主机游戏，比如索尼的 PS2、世嘉的 Dreamcast、任天堂的 Wii 等，拿今年的行情来说，两千块钱捡破烂配置的 PC 就可以超高质量运行上述主机模拟。&lt;/p>
&lt;p>而且还有海量的经典大作，游戏画面质量比起现在虽然差点儿，但搁在当年是十分惊艳的（是要斥巨资才能享受到的）。&lt;/p>
&lt;p>当年的大作在游戏性方面比现在堆画面、吃配置、一个游戏动辄上百 G 资源的所谓 3A 体验要好很多，而且玩起来有一种超值的心理。&lt;/p>
&lt;p>引申来说，读书又何尝不是呢？经典的好书常看常新、历久弥新，影响深远。&lt;/p>
&lt;p>何必要追捧当前畅销的“佳作”，打个时间差，多看看过去经典作品，比一味追新，会更有收获。&lt;/p>
&lt;h3 id="四十不惑">四十不惑
&lt;/h3>&lt;p>每个人可能到了一定的阶段都会有自己对“不惑”的感悟，我自己的感觉是，确实想明白了一些事情。&lt;/p>
&lt;p>其中我觉得最具有代表性的，是我感悟到了：人不能放任欲望无止境地膨胀下去。&lt;/p>
&lt;p>人的欲望最大的问题就是，它会随着被满足，变得越来越大，乃至无穷大。&lt;/p>
&lt;p>在生活中对享乐保持克制，是感受幸福和美好的关键基础，正像是玩游戏不能作弊无限命那样，一旦失去限制，事情要么走向无聊和乏味，要么走向美好幸福的反面。&lt;/p>
&lt;p>老话也有云，饿了吃糠甜如蜜，饱了吃密密不甜，也叫“少吃多甜”；月盈后就开始亏，反者道之动，这些基本的道理都暗示了要对自己的贪欲进行限制。&lt;/p>
&lt;p>想明白这点之后，要时刻提醒自己珍惜已经拥有的东西，才不至于跌入欲望的陷阱。&lt;/p>
&lt;p>无限地满足欲望所带来的只能是空虚和毁灭。&lt;/p>
&lt;p>所以，古人早已参透这个智慧，大部分的经典古籍都在阐述同一个道理：“想成仙？很简单，战胜自己的欲望即可。”&lt;/p>
&lt;p>&lt;em>去年感悟到了在精神上保持专注与集中，是感受生活、不虚度光阴的最好方式，今年进一步体会到，凡事都要有克制和限度，精神境界得到进一步提升。&lt;/em>&lt;/p>
&lt;h2 id="问自己">问自己
&lt;/h2>&lt;h3 id="今年我最感恩的三件事是什么">今年我最感恩的三件事是什么？
&lt;/h3>&lt;ol>
&lt;li>感恩我的家人和朋友，感谢他们对我的支持与关心，是我的精神支柱；&lt;/li>
&lt;li>感恩互联网上还能有一些开放的地方，提供了非常多的学习机会与内容；&lt;/li>
&lt;li>感谢这个充满了机缘巧合的世界，让人们能够不断地体验和修行。&lt;/li>
&lt;/ol>
&lt;h3 id="今年我最自豪的三项成就是什么">今年我最自豪的三项成就是什么？
&lt;/h3>&lt;ol>
&lt;li>在 AI 的帮助下写了一个浏览器插件，可以自动识别网页中图片上的文字，是我第一个比较有完成度的作品，已上架 Edge 浏览器插件商店；&lt;/li>
&lt;li>完全不抽烟以及限制饮酒，意识到了这些东西只能提供虚假的放松，而且还是通过危害身体健康所获得的放松，那就不要被这种虚假的枷锁所束缚；&lt;/li>
&lt;li>坚持了读书与学习，并且不带有功利的心态，找到了通过阅读、写作给自己带来平静与放松的方式；&lt;/li>
&lt;/ol>
&lt;h3 id="今年我收获了哪些成长">今年我收获了哪些成长？
&lt;/h3>&lt;ol>
&lt;li>意识到“克制”的重要性，好吃的、好玩的，不可有一味贪多，有限制才有快乐；&lt;/li>
&lt;li>将有限的条件进行充分地发挥，是赋予人生以意义的重要方式。无论是打游戏还是做软件，甚至人生。
充分发挥有限的条件，是一件非常有成就感的事情。
因为它体现了人作为一种具有主观能动性的物种，在某种环境下所产生的特有价值。
这种价值成就比起任意挥霍所做成的事情，赋予人的意义感要强的多。
引申来说，不要这山扒着那山高、得陇望蜀，将手头现有的东西充分发挥好，才是解答人生答案的最佳路线。；&lt;/li>
&lt;li>对于外界持续压力带来的焦虑，也许没有更好的办法，运动、写作、读书、学习，合理的膳食，以及坚持一颗乐于助人、热爱奉献精神的心，才是良药；&lt;/li>
&lt;/ol>
&lt;h3 id="今年我面对过哪些失败">今年我面对过哪些失败？
&lt;/h3>&lt;p>从我现在的心态来看，我觉得没有什么失败的。&lt;/p>
&lt;p>如果非要挑的话，可能就是没有挣到足够多的钱吧，但这是一个无止境的事情，在某些层面看着是失败的，在某些层面看着又是成功的。&lt;/p>
&lt;p>没能够成功打造个人的产品并且坚持打磨，我认为是我目前所面临的某种意义上的失败。&lt;/p>
&lt;p>懒惰还是有一点，动力也有点儿缺乏，应该推动自己在创造和产出上更加勤奋一些，至少将一些垃圾时间利用起来。&lt;/p>
&lt;h3 id="明年我的关键词是什么">明年我的关键词是什么？
&lt;/h3>&lt;p>硬件、DIY、产品、AI、探索、实践、行动。&lt;/p>
&lt;h3 id="明年我最想完成的三件事是什么">明年我最想完成的三件事是什么？
&lt;/h3>&lt;ol>
&lt;li>制作结合软硬件和 AI 技术的个人产品。&lt;/li>
&lt;li>持续试错个人产品的运营，产品具体形式不限。&lt;/li>
&lt;li>摸索定义出个人工作室（实验室）的需求与目标。&lt;/li>
&lt;/ol>
&lt;h3 id="去年的三件事目标完成情况">去年的三件事目标完成情况：
&lt;/h3>&lt;ol>
&lt;li>基于 AI 和自动化思路做出完成度比较高的独立产品：独立制作了浏览器插件，但是缺乏运营，用户不多；&lt;/li>
&lt;li>除本职工作外，在业余有一定副业营收（产品、投资）：无副业收入，投资有一点点收入但不多；&lt;/li>
&lt;li>个人内容产品运营取得更好的粉丝增长：持续输出机器文摘公众号文章，但阅读量不多，关注者不超过 100 人；&lt;/li>
&lt;/ol>
&lt;h3 id="五年后我希望成为什么样的人">五年后我希望成为什么样的人？
&lt;/h3>&lt;p>成为职业自由、有更多私人时间，且身体健康、有活力的人。&lt;/p>
&lt;p>成为更有智慧面对生活的人。&lt;/p></description></item><item><title>机器文摘 第 110 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/</link><pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-27-19.png" alt="Featured image of post 机器文摘 第 110 期" />&lt;h1 id="机器文摘-第-110-期">机器文摘 第 110 期
&lt;/h1>&lt;h3 id="物理遮挡摄像头并非多此一举">物理遮挡摄像头并非多此一举
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-26-29.png"
width="690"
height="392"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="422px"
>&lt;/p>
&lt;p>多年的担心还是发生了，近日有安全人员公布了一个开源工具仓库。&lt;/p>
&lt;p>里面提供的相关工具包可以将 thinkpad x230 笔记本的摄像头 LED 关闭，并偷偷进行视频录制。&lt;/p>
&lt;p>开源仓库地址在：https://github.com/xairy/lights-out
记录有演讲细节的pdf：https://docs.google.com/presentation/d/1NSS2frdiyRVr-5vIjAU-2wf_agzpdiMR1DvVhz2eDwc/edit#slide=id.g3003eb4ed53_5_160&lt;/p>
&lt;p>具体技术原理：&lt;/p>
&lt;ul>
&lt;li>ThinkPad X230（以及同一时代的其他一些笔记本电脑）上使用的网络摄像头基于 Ricoh R5U8710 USB 相机控制器。该控制器将其固件的一部分（SROM 部分）存储在位于网络摄像头板上的 SPI 闪存芯片上。控制器还允许通过 USB 重新刷新 SPI 芯片的内容。&lt;/li>
&lt;li>X230 网络摄像头板上的 LED 连接到 R5U8710 控制器的 GPIO B1 引脚。GPIO B 端口映射到 R5U8710 内部基于 8051 的 CPU 的 XDATA 内存空间中的 0x80 地址。因此，更改该地址的值会更改 LED 的状态。无论网络摄像头当前是否正在流式传输视频，这都有效。&lt;/li>
&lt;li>库中提供的工具允许使用 USB 控制的所谓“通用植入物”将自定义固件刷入网络摄像头板上的 SPI 芯片。此植入程序允许将受控数据写入任意地址（在 XDATA 内存空间内）并调用任意地址（在 CODE 内存空间内;与从偏移量 0xb000 开始的 XDATA 别名）。&lt;/li>
&lt;/ul>
&lt;p>看来联想后来给 thinkpad 笔记本摄像头都加入了物理遮挡开关的行为并非多次一举，恐怕是早就知道了这种技术漏洞了吧。&lt;/p>
&lt;h3 id="用上世纪五十年代的真空管攒一个电脑">用上世纪五十年代的真空管“攒”一个“电脑”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-26-44.png"
width="458"
height="654"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="168px"
>&lt;/p>
&lt;p>电子计算机在最开始使用的主要电子元件就是真空管（又称电子管），为了验证这个事情，&lt;a class="link" href="https://www.thetubecomputer.com/" target="_blank" rel="noopener"
>The Tube Computer&lt;/a>一文作者亲自用回收的老真空管制作了一个放在家里占满了一面墙的 8 位计算机。&lt;/p>
&lt;p>这台计算机采用更现代的 8bit 设计，真空管全部采用上世纪五十年代生产的老管子（估计是拆机件）。&lt;/p>
&lt;p>运转起来既发光又发热，可以给整个房间供暖。&lt;/p>
&lt;p>这个项目启动的初衷是作者希望让自己的孙子能够真正的“看见”电子计算机的运行。&lt;/p>
&lt;p>真是一个爱动手、能动手的老极客啊。&lt;/p>
&lt;h3 id="可以-diy-的-开源-ai-聊天机器人">可以 DIY 的 开源 AI 聊天机器人
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-27-19.png"
width="640"
height="480"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/78/xiaozhi-esp32" target="_blank" rel="noopener"
>小智 AI 聊天机器人&lt;/a>，基于 ESP32+SenseVoice+Qwen72B 的开源 AI 硬件项目。&lt;/p>
&lt;p>支持 Wi-Fi 配网和 4G 通信，具备离线语音唤醒、5种语言识别、声纹识别、流式对话等功能。&lt;/p>
&lt;p>可自定义角色设定和提示词，支持对话记忆，适合AI硬件开发学习者使用。&lt;/p>
&lt;p>提供免开发环境固件和详细教程。&lt;/p>
&lt;p>所有材料均可在淘宝上买到，我试着下单凑齐了零件（没买 4G 通信模块），共花费 90 元（含邮费）。&lt;/p>
&lt;h3 id="又一个开源知识图谱平台">又一个开源知识图谱平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-28-03.png"
width="564"
height="318"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/whyhow-ai/knowledge-graph-studio" target="_blank" rel="noopener"
>knowledge-graph-studio&lt;/a>，一个开源的知识图谱构建和管理平台，专为RAG应用设计。支持基于规则的实体解析、模块化图谱构建、灵活的数据接入等功能。基于NoSQL数据库构建，提供API优先的设计理念和SDK支持，可用于构建动态的图谱驱动AI工作流，适用于实验性和大规模应用场景。&lt;/p>
&lt;h3 id="复制当前网页为-markdown-格式的插件">复制当前网页为 Markdown 格式的插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-28-40.png"
width="581"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="362px"
>
&lt;a class="link" href="https://github.com/AnswerDotAI/web2md-ext" target="_blank" rel="noopener"
>Web2MD 浏览器插件&lt;/a>：一个简单实用的 Chrome 扩展工具，通过快捷键 Ctrl+Shift+O 可以一键将当前网页内容转换为 Markdown 格式并自动复制到剪贴板，支持自定义快捷键，提高文档处理效率。&lt;/p>
&lt;h3 id="生成式-ai-学习资源">生成式 AI 学习资源
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-29-18.png"
width="557"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>
&lt;a class="link" href="https://github.com/genaibook/genaibook" target="_blank" rel="noopener"
>GenAI Book&lt;/a>，《Hands-On Generative AI with Transformers and Diffusion Models》一书的配套资源库，包含完整的代码示例和练习答案。涵盖了生成式AI的核心内容，从Transformers到扩散模型，从语言模型到图像生成，并包含实践应用案例。适合想要系统学习生成式AI的开发者使用.&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>自我定价与生活选择</title><link>https://sbabybird.github.io/p/%E8%87%AA%E6%88%91%E5%AE%9A%E4%BB%B7%E4%B8%8E%E7%94%9F%E6%B4%BB%E9%80%89%E6%8B%A9/</link><pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%87%AA%E6%88%91%E5%AE%9A%E4%BB%B7%E4%B8%8E%E7%94%9F%E6%B4%BB%E9%80%89%E6%8B%A9/</guid><description>&lt;h1 id="自我定价与生活选择">自我定价与生活选择
&lt;/h1>&lt;h2 id="我写的原文">我写的原文
&lt;/h2>&lt;p>今年在看《纳瓦尔宝典》一书时有句话印象深刻：一个人一定要自己个自己定一个很高的“时薪”，这样做了以后就会不由自主的避开无意义的事情，转而去做那些重要的事情。&lt;/p>
&lt;p>原文我不记得了，大概是这个意思。&lt;/p>
&lt;p>其实这种观点我也早有发觉。在比较小的时候我就已经很懒于做那些我认为没有价值的事情，有时会跟老一辈的思想观念产生冲突。&lt;/p>
&lt;p>经常被骂：“你的气力怎么那么主贵（注：方言，珍贵的意思）？”&lt;/p>
&lt;p>现在看来，我至少有一半是正确的行为，因为我主动避免去做一些低价值的事情，当然也未必就去做了多少高价值的事情（还是因为懒）。&lt;/p>
&lt;p>但起码是一个很好的开端。&lt;/p>
&lt;p>而有些人一生都在消耗时间和精力在低价值事情上，才是让人恐惧的，看看你身边的人，有多少人日复一日在做着消磨时间却无正向价值产生的事情。&lt;/p>
&lt;p>比如说：有人为了买到便宜的东西，消耗大量的时间进行商品比对、观看评测、听取带货建议，最后还冒着买到假货的风险，选择低质的商品。&lt;/p>
&lt;p>如果说他是因为生活所迫，确实支付不起更高品质商品的价格，倒也情有可原，如果只是单纯地想省点儿钱，那就大错特错了，因为他正好走向了他所期望的反面。&lt;/p>
&lt;p>因为此类人忽略了一个重要的事情，潜意识里觉得自己的时间和精力不值钱，忽略了自己的价值。极端地说：他给自己的定价为 0 。&lt;/p>
&lt;p>回到《纳瓦尔宝典》中，作者提出给自己定出很高时薪的观点，是一个相当聪明的行为，因为一旦自己给自己开出了很高的时薪，也就等于承认了自己的高价值，自己的时间一下子变得无比珍贵（物理上）。&lt;/p>
&lt;p>然后再做事情的时候，尤其是空消耗时间的事情，就会变得谨慎起来，会意识到自己在干什么，应该干什么，那些与自己目标相悖的事情也就少干甚至不干了。&lt;/p>
&lt;p>当然，还得补充一句，凡事都不能想的太绝对，因为对“价值”的评价是一个偏主观的行为。&lt;/p>
&lt;p>如果一件事情能够给你带来快乐和成长，那么即便它没能带来什么实质性的回报，仅仅快乐和成长本身，就已经很有价值了。&lt;/p>
&lt;p>因为还有一句话：能够让你快乐的时光，都不算虚度。&lt;/p>
&lt;h2 id="ai-润色后">AI 润色后
&lt;/h2>&lt;p>今年阅读《纳瓦尔宝典》时，书中一句话让我印象深刻：“为自己设定一个高昂的‘时薪’，这样你就会自然而然地避开无意义的事务，转而投身于那些真正重要的事业。”&lt;/p>
&lt;p>尽管我已无法准确复述原文，但这个观点我早已有所体会。&lt;/p>
&lt;p>自小，我就对那些我认为无价值的事务提不起兴趣，这常常与老一辈的价值观发生冲突。&lt;/p>
&lt;p>我常被责备：“你的力气怎么那么珍贵？”如今看来，至少我一半的行为是正确的，因为我主动避开了低价值的事务，尽管我未必因此做了更多高价值的事（或许还是因为懒惰）。&lt;/p>
&lt;p>但这至少是一个良好的起点。反观那些一生都在低价值事务上耗费时间和精力的人，这才是真正令人恐惧的。环顾四周，有多少人日复一日地做着那些消磨时间却毫无正向价值的事情。&lt;/p>
&lt;p>例如，有人为了买到便宜货，不惜花费大量时间比较商品、观看评测、听取带货建议，最后还冒着买到假货的风险，选择了低质量的商品。&lt;/p>
&lt;p>如果他们是因为经济压力，确实无法负担更高品质的商品，那还情有可原。但如果仅仅是为了省钱，那他们就大错特错了，因为他们正好走向了他们期望的反面。&lt;/p>
&lt;p>这类人忽略了一个重要的事实：他们潜意识里认为自己的时间和精力不值钱，忽视了自己的价值。极端地说，他们给自己的定价为零。&lt;/p>
&lt;p>回到《纳瓦尔宝典》中，作者提出给自己设定一个高时薪的观点，这是一个非常明智的行为。一旦你给自己设定了高时薪，就等于承认了自己的高价值，你的时间立刻变得无比宝贵。&lt;/p>
&lt;p>然后，在做事时，尤其是那些消耗时间的事情，你就会变得更加谨慎，你会意识到自己在做什么，应该做什么，那些与自己目标相悖的事情就会减少甚至不再发生。&lt;/p>
&lt;p>当然，我们还需要补充一点，凡事都不能过于绝对，因为对“价值”的评价是一个主观的行为。如果一件事情能给你带来快乐和成长，即使它没有带来实质性的回报，快乐和成长本身就是一种价值。&lt;/p>
&lt;p>正如另一句所说：“能够让你快乐的时光，都不算虚度。”&lt;/p></description></item><item><title>机器文摘 第 109 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/</link><pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-04-25.png" alt="Featured image of post 机器文摘 第 109 期" />&lt;h1 id="机器文摘-第-109-期">机器文摘 第 109 期
&lt;/h1>&lt;h3 id="计算机内存的一些历史">计算机内存的一些历史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-03-52.png"
width="690"
height="460"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://lcamtuf.substack.com/p/memory-the-forgotten-history" target="_blank" rel="noopener"
>被遗忘的内存历史&lt;/a>，文章详细介绍了了从继电器到真空管、动态存储器，再到磁介质存储的发展，强调了内存在个人计算发展中的重要性，并探讨了各种存储技术的优势与局限。 ​​​&lt;/p>
&lt;h3 id="dos-内存模型的一些知识">DOS 内存模型的一些知识
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-04-14.png"
width="690"
height="383"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blogsystem5.substack.com/p/dos-memory-models" target="_blank" rel="noopener"
>重新审视 DOS 内存模型&lt;/a>，探讨了DOS操作系统如何克服x86实模式下内存限制的各种技巧，特别是那个时代编译可执行程序所需要了解的不同“内存模型”。&lt;/p>
&lt;p>作者先是带大家回顾了 8086（也就是 DOS 主要面向的 CPU） 的内存访问架构（段地址：偏移地址），然后分别分析了几种在 DOS 下常见的可执行文件封装格式（COM、EXE）。&lt;/p>
&lt;blockquote>
&lt;p>COM文件是最简单的可执行文件格式，它们包含原始机器代码，可以放置在几乎任何内存位置并执行，无需任何后处理。COM文件利用8086的分段架构，总是加载到任何段的100h偏移处，所有内存地址必须相对于这个偏移。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>为了解决COM文件的限制，微软为DOS设计了另一种可执行文件格式：EXE文件。与COM文件相比，EXE文件有内部结构，不受64KB限制，可以包含更大的代码和数据块。EXE文件包含多个段，并将代码和数据分布在它们之间。&lt;/p>
&lt;/blockquote>
&lt;p>文章在最后解释了旧编译器中常见的内存模型，包括 Tiny、Small、Compact、Medium、Large 和 Huge 模型，每种模型都有其特定的指针使用方式和内存布局。&lt;/p>
&lt;h3 id="游戏画面的抗锯齿技术详解">游戏画面的抗锯齿技术详解
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-04-25.png"
width="690"
height="603"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="274px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.frost.kiwi/analytical-anti-aliasing/" target="_blank" rel="noopener"
>AAA - Analytical Anti-Aliasing&lt;/a>，这篇文章来自Frost Kiwi的博客，主要讨论了抗锯齿技术，特别是分析性抗锯齿（Analytical Anti-Aliasing，简称AAA）。&lt;/p>
&lt;p>文章详细介绍了从简单的超采样抗锯齿（SSAA）到基于理论的SMAA，再到使用机器学习的DLAA等多种抗锯齿技术，以及它们如何以不同的方法实现相同的目标：消除图像中的锯齿效应。&lt;/p>
&lt;p>文章通过WebGL示例展示了如何实现抗锯齿技术。&lt;/p>
&lt;p>作者提供了详细的代码示例，包括顶点着色器、片段着色器和JavaScript代码，这些代码可以在WebGL画布上绘制一个移动的圆，并展示不同抗锯齿技术的效果。&lt;/p>
&lt;h3 id="使用-vscode-为-commodore64-开发应用程序">使用 vscode 为 commodore64 开发应用程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-04-43.png"
width="690"
height="418"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>commodore64（在文中简称C64）是上世纪 80 年代十分风靡的一款 8 位个人电脑。&lt;/p>
&lt;p>在二十一世纪的今天，也有很多复古电脑爱好者，为其开发应用程序。（YouTube上有个 8BitGuy 是我见过的最热衷此事的，好像还做了发售的游戏，&lt;em>&lt;a class="link" href="https://space.bilibili.com/556805805" target="_blank" rel="noopener"
>同时在 B 站也有他的频道:The 8-Bit Guy&lt;/a>&lt;/em>）&lt;/p>
&lt;p>&lt;a class="link" href="https://retrogamecoders.com/c64-visual-studio-code/" target="_blank" rel="noopener"
>Programming the C64 with Visual Studio Code&lt;/a>一文介绍了怎样在vscode这个目前最流行的现代编辑器上通过安装插件的方式为 C64 开发应用程序。&lt;/p>
&lt;p>主要用到了一个名为 &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=rosc.vs64" target="_blank" rel="noopener"
>VS64&lt;/a> 的插件，该插件在不安装额外工具链的情况下即可支持使用 BASIC 语言为 C64 开发程序。&lt;/p>
&lt;p>如使用 C、6502汇编进行开发，还需安装配套的编译和调试工具。&lt;/p>
&lt;h3 id="用-excel-做一个向量数据库">用 excel 做一个向量数据库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-04-58.png"
width="690"
height="438"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>向量数据库最近大火，主要是受 LLM 火爆的影响，在执行 RAG 相关任务时，向量数据库是必备的数据存储和语义检索基础。&lt;/p>
&lt;p>想要深入理解其原理，这里有一个项目，作者&lt;a class="link" href="https://aibyhand.substack.com/p/building-a-vector-database-in-excel" target="_blank" rel="noopener"
>用 excel 实现了一个向量数据库原型&lt;/a>，主要用于展示其背后的技术原理。&lt;/p>
&lt;h3 id="一个视频看明白卷积神经网络cnn的运行机制">一个视频看明白卷积神经网络（CNN）的运行机制
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-05-22.png"
width="572"
height="381"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>这是目前为止我看过的关于卷积神经网络运作最清晰、最容易理解的视频，使用可视化语言 Processing 制作，清晰地展现下述过程：&lt;/p>
&lt;ol>
&lt;li>输入图像的像素被卷积层处理；&lt;/li>
&lt;li>特征图被池化层处理；&lt;/li>
&lt;li>特征图被全连接层处理；&lt;/li>
&lt;/ol>
&lt;p>视频项目的源码在：https://github.com/okdalto/CNN-visualization&lt;/p>
&lt;h3 id="监控网页任意元素并显示在-title-中">监控网页任意元素并显示在 title 中
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-05-57.png"
width="690"
height="431"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chromewebstore.google.com/detail/title-mirror/mkffplgaiikhbnihpedpmgkkpemmlohf" target="_blank" rel="noopener"
>Title Mirror&lt;/a> 一个有意思的插件，把网页中任意元素内容投射在网页title区域。&lt;/p>
&lt;p>可以用来进行股市盯盘、球赛比分关注等摸鱼活动。&lt;/p>
&lt;h3 id="使用-ollama-支持的视觉模型llama-32-visionminicpm-v-等实现图片-ocr">使用 Ollama 支持的视觉模型（llama 3.2-vision/minicpm-v 等）实现图片 OCR
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-07-15.png"
width="556"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="289px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/bytefer/ollama-ocr" target="_blank" rel="noopener"
>Ollama-OCR&lt;/a>，使用 Llama 3.2-Vision/ minicpm-v 等 Ollama 支持的视觉模型，进行 OCR 识别。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>保留原始文本格式和结构&lt;/li>
&lt;li>支持多种图像格式：JPG、JPEG、PNG&lt;/li>
&lt;li>可自定义的识别提示词和模型&lt;/li>
&lt;li>支持输出 Markdown 格式文档&lt;/li>
&lt;/ul>
&lt;h3 id="阿里开源的-agent-框架">阿里开源的 agent 框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-08-39.png"
width="667"
height="419"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;p>阿里开源了一个基于Qwen2.0的agent框架：&lt;a class="link" href="https://github.com/QwenLM/Qwen-Agent" target="_blank" rel="noopener"
>Qwen-Agent&lt;/a>，具有指令遵循、工具使用、任务规划和记忆能力。&lt;/p>
&lt;p>你可以用它来构建各种能执行复杂任务的AI代理，它可以调用工具，计算器、搜索引擎，可以处理长文档等，你可以构建比如，浏览器助手、代码解释器、自定义助手等。&lt;/p>
&lt;h3 id="基于-webrtc-技术的屏幕共享工具">基于 WebRTC 技术的屏幕共享工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-09-02.png"
width="483"
height="793"
loading="lazy"
class="gallery-image"
data-flex-grow="60"
data-flex-basis="146px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://getbananas.net/" target="_blank" rel="noopener"
>Bananas Screen Sharing&lt;/a>，开源跨平台屏幕共享工具，基于 WebRTC 技术，实现点对点的安全连接。无需注册或配置，用户只需生成链接并分享即可开始使用。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 108 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/</link><pubDate>Tue, 26 Nov 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-36-35.png" alt="Featured image of post 机器文摘 第 108 期" />&lt;h1 id="机器文摘-第-108-期">机器文摘 第 108 期
&lt;/h1>&lt;h3 id="计算机除了数字的还有模拟的">计算机除了数字的，还有模拟的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-34-35.png"
width="477"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="245px"
>&lt;/p>
&lt;p>基于二进制的数字计算机流行，使得人们往往忽略了还有其他范式的计算机，实际上还有模拟的和量子的。&lt;/p>
&lt;p>随着数字计算接近摩尔定律的极限，模拟计算提供了一种可替代的可能性。&lt;/p>
&lt;p>模拟计算特别适合于动态系统建模和神经形态人工智能应用，比数字计算更节能，面对网络威胁时也更安全。&lt;/p>
&lt;p>&lt;a class="link" href="https://the-analog-thing.org/" target="_blank" rel="noopener"
>The Analog Thing&lt;/a>（简称THAT）是一个高质量、低成本、开源且非盈利的尖端模拟计算机项目。&lt;/p>
&lt;p>旨在提供一个能够快速、并行、高效地模拟动态系统的平台。&lt;/p>
&lt;p>它将实践操作与数学理论相结合，自然融入设计和工程实践，如试错探索和使用比例模型。THAT不仅有助于理解现状（是什么的模型），还能帮助实现理想状态（应该是什么的模型）。&lt;/p>
&lt;p>THAT设计精巧，使用少量计算元件就能实现广泛的模拟计算应用。包括5个积分器、4个求和器、2个比较器、主从端口、8个系数电位器、2个乘法器、面板仪表和混合端口等。&lt;/p>
&lt;p>使用THAT，你可以模拟包括市场经济、疾病传播与控制、人口动态、化学反应、机械系统以及各种数学吸引子在内的动态系统。&lt;/p>
&lt;p>THAT还提供了学习微积分、模拟电路和控制工程的机会。模拟计算与变化率和数量积累紧密相关，提供了一种实践微积分的方法。通过操作放大器构建的计算元件，用户可以直观地理解模拟电路。在自适应控制系统中，模拟计算提供了控制工程的实践入门。&lt;/p>
&lt;p>不过值得注意的是，这款产品并非开源，其硬件成品需要付费购买，定价在 450 - 500 欧元。&lt;/p>
&lt;h3 id="构建自己的-rag-应用">构建自己的 RAG 应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-34-53.png"
width="1586"
height="1202"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>RAG（搜索增强生成）是当下最热的基于 LLM （大语言模型）的应用技术，市面上也充斥着大量的相关开源项目。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/bRAGAI/bRAG-langchain" target="_blank" rel="noopener"
>bRAG-langchain&lt;/a>，是一个帮助你学习 RAG 技术构建自己应用的开源项目，提供了从基础环境配置到高级应用架构的一系列教程。&lt;/p>
&lt;p>教程内容基于 jupyter-notebook 构建，可以边实践边学习。&lt;/p>
&lt;p>正如项目介绍中所说：构建 RAG 应用所需要了解的一切，都在这里。&lt;/p>
&lt;h3 id="强化学习算法集">强化学习算法集
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-35-54.png"
width="335"
height="410"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/XinJingHao/DRL-Pytorch" target="_blank" rel="noopener"
>DRL-Pytorch&lt;/a>，最全面的深度强化学习算法 PyTorch 实现合集，整合了 13 种主流强化学习算法。&lt;/p>
&lt;p>包括从入门级的Q-learning到高阶的SAC、TD3等，每个算法都配有详细文档、完整训练曲线和论文引用。&lt;/p>
&lt;p>项目还提供了丰富的学习资源推荐，包括环境配置、经典书籍、在线课程和重要论文等。&lt;/p>
&lt;h3 id="基于-ai-的实时世界场景生成">基于 AI 的实时世界场景生成
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-36-35.png"
width="690"
height="517"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://thematrix1999.github.io/" target="_blank" rel="noopener"
>“The Matrix”&lt;/a>是一个前沿的实时、高分辨率、无限地平线的世界模拟系统。&lt;/p>
&lt;p>项目名称和灵感来源于1999年的电影《The Matrix》（国内译为：黑客帝国），旨在通过AI技术创造一个逼真的、沉浸式的互动世界，模糊现实与幻觉之间的界限。&lt;/p>
&lt;p>其核心原理是：基于用户输入的视角控制信息，用 AI 实时生成视频帧画面。&lt;/p>
&lt;p>AI 模型的视频生成能力学习自很多大型游戏的渲染结果。&lt;/p>
&lt;p>技术特点&lt;/p>
&lt;ul>
&lt;li>帧级精度：用户交互响应达到电影中的水平。&lt;/li>
&lt;li>AAA级视觉效果：提供接近现实的沉浸式场景。&lt;/li>
&lt;li>无限生成能力：超越当前视频模型的限制，支持无尽探索。&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="基于控制台的-3d-模型查看工具">基于控制台的 3D 模型查看工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-37-26.png"
width="690"
height="440"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/liam-ilan/terminal3d" target="_blank" rel="noopener"
>Terminal3d&lt;/a>，是一款用于在终端控制台中查看 3d .obj 文件的工具。&lt;/p>
&lt;p>特性：&lt;/p>
&lt;ol>
&lt;li>读取 .obj 文件并将其呈现到终端。&lt;/li>
&lt;li>使用 盲文 （⡟） 和 块 （▛） 字符进行渲染。&lt;/li>
&lt;li>在线框和顶点模式之间进行选择。&lt;/li>
&lt;li>支持鼠标控制场景相机。 ​​​&lt;/li>
&lt;/ol>
&lt;h3 id="端到端实时语音翻译系统">端到端实时语音翻译系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-37-52.png"
width="534"
height="266"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>
&lt;a class="link" href="https://github.com/nethermanpro/transvip" target="_blank" rel="noopener"
>TransVIP&lt;/a>，上海交大和微软开源的一款端到端的语音到语音翻译系统，它可以保持原声特征、保持源语音和目标语音时长同步。&lt;/p>
&lt;p>它的声音特点和说话的节奏感保持的非常不错，比较自然流畅，时长控制的也比较精确，很适合做视频配音、跨语言直播或实时语音翻译。&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ul>
&lt;li>直接从源语音到目标语音，无需中间步骤，处理延迟低&lt;/li>
&lt;li>源语音和目标语音时长保持一致，可以避免口型不同步问题&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 107 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/</link><pubDate>Tue, 19 Nov 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-39-45.png" alt="Featured image of post 机器文摘 第 107 期" />&lt;h1 id="机器文摘-第-107-期">机器文摘 第 107 期
&lt;/h1>&lt;h3 id="用linux自带命令做一个数据库">用Linux自带命令做一个数据库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-38-23.png"
width="690"
height="716"
loading="lazy"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="231px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.howtogeek.com/build-a-database-with-powerful-linux-built-in-tools/" target="_blank" rel="noopener"
>用Linux自带命令做一个数据库&lt;/a>。&lt;/p>
&lt;p>本文向读者揭示了Linux文本文件处理的奥秘，展示了如何将普通的文本文件转变为一个功能完备的数据库。&lt;/p>
&lt;p>全部工具所使用的都是 Linux 内置的命令工具，包括对文本文件进行搜索（grep）、提取（cut）、复杂处理（awk）、排序（sort）、分页（head和tail）以及合并（join）等操作命令。&lt;/p>
&lt;p>作者通过构建一个简单的待办事项应用数据库的例子，逐步引导读者如何使用这些工具。&lt;/p>
&lt;p>内容包括：&lt;/p>
&lt;ol>
&lt;li>如何创建表（以DSV格式的平面文件）&lt;/li>
&lt;li>如何插入新数据&lt;/li>
&lt;li>如何查询整个表，如何仅选择特定的列，以及如何根据条件过滤行。&lt;/li>
&lt;li>如何对结果进行排序和分页，以及如何实现表之间的关联。&lt;/li>
&lt;/ol>
&lt;p>作者最终将一个复杂的SQL查询转换为一系列Linux命令行操作，展示了Linux工具的强大能力，也证明了即使在没有传统数据库管理系统的情况下，也能够实现高效的数据管理和查询。&lt;/p>
&lt;h3 id="写一个-8-位单片机模拟器但是用-latex-">写一个 8 位单片机模拟器，但是用 LaTeX ？！
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-38-44.png"
width="250"
height="250"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://gitlab.brokenpipe.de/stettberger/avremu/tree/master" target="_blank" rel="noopener"
>avremu&lt;/a>。&lt;/p>
&lt;p>LaTeX 是一个排版系统（写学术论文离不了）。但底层的 TeX 系统是一个强大的宏处理器。&lt;/p>
&lt;p>事实上，TeX 是一种图灵完备的编程语言。TeX 可以计算任何可计算的东西（可计算性是理论计算机科学中的一个概念，因为计算机也不是啥都能计算，比如著名的“停机问题”就搞不定，不过这扯远了）。&lt;/p>
&lt;p>图灵完备意味着，Tex 可以给任何编程语言编写合适的解释器（理论上）。&lt;/p>
&lt;p>于是就有蛋疼之人挑战了一把，用 Tex 宏编写了一个 8 位单片机的模拟器（见上述链接）。&lt;/p>
&lt;p>链接里是一个 git 仓库，里面存放了完整的代码。据作者说，他这个模拟器在自己的笔记本电脑上，可以运行达到 2.5KHz。&lt;/p>
&lt;p>配图为作者使用该模拟器运行 44 个小时生成。&lt;/p>
&lt;h3 id="浏览器是如何渲染网页的">浏览器是如何渲染网页的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-39-05.png"
width="644"
height="715"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="216px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://abhisaha.com/blog/exploring-browser-rendering-process/" target="_blank" rel="noopener"
>探索浏览器的渲染过程&lt;/a>，一篇很不错的科普文章，讲述了从键入 URL 地址到你能看到网页内容期间发生了什么事情。&lt;/p>
&lt;p>比较有特点的是，这篇文章在网页里嵌入了交互式的演示动画，充分展示了浏览器所做工作的具体细节。 ​​​&lt;/p>
&lt;h3 id="免费冥想音效网站">免费冥想音效网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-39-17.png"
width="690"
height="536"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="308px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://soundbox.fun/" target="_blank" rel="noopener"
>Sound Box&lt;/a> 是一款专业的免费在线情境音效平台，提供多种自然环境音效以及白噪音，帮助用户打造完美的声音空间。无论是为了专注工作、放松心情，还是助眠解压，都能找到最适合的声音组合。&lt;/p>
&lt;p>除了免费之外，这个网站还有以下特点：&lt;/p>
&lt;ol>
&lt;li>丰富的声音库
&lt;ul>
&lt;li>精选优质环境音效：雨声、海浪、鸟鸣、虫鸣等自然声音&lt;/li>
&lt;li>白噪音与环境音：咖啡厅、火焰、风声等氛围音效&lt;/li>
&lt;li>每个音效都经过专业处理，确保最佳音质&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>专业混音功能
&lt;ul>
&lt;li>支持多声道混音，可同时播放多个音效&lt;/li>
&lt;li>独立音量控制，精确调节每个声道&lt;/li>
&lt;li>智能音量平滑过渡，避免突兀变化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="开源数字人智能对话系统">开源数字人智能对话系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-39-45.png"
width="690"
height="502"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Kedreamix/Linly-Talker" target="_blank" rel="noopener"
>Linly-Talker &lt;/a> 是一个将大型语言模型与视觉模型相结合的智能 A 系统。&lt;/p>
&lt;p>它集成了各种技术，例如 Whisper、Linly、微软语音服务和 SadTalker 会说话的生成系统。&lt;/p>
&lt;p>该系统部署在 Gradio(一个基于 Python 的 Web 应用快速开发框架) 上，允许用户通过提供图像与 A1助手进行交谈。&lt;/p>
&lt;p>用户可以根据自己的喜好进行自由的对话或内容生成。&lt;/p>
&lt;h3 id="开源画布框架">开源画布框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-40-46.png"
width="690"
height="359"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dgmjs/dgmjs" target="_blank" rel="noopener"
>DGM.js&lt;/a>，具有智能形状的开源无限画布，支持智能图形、实时协作、多页面、手绘风格以及导出为图片和 JSON 功能。&lt;/p>
&lt;p>制作网页版绘图（架构图、草图、界面原型）工具。&lt;/p>
&lt;h3 id="开源在线电子表格">开源在线电子表格
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-49-41.png"
width="907"
height="590"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.ironcalc.com/" target="_blank" rel="noopener"
>IronCalc&lt;/a>一款开源电子表格引擎，它能在浏览器中打开，并可以集成到 SaaS 产品和 Web 应用中，甚至能直接嵌入到博客帖子中。&lt;/p>
&lt;p>主要特性如下：&lt;/p>
&lt;ul>
&lt;li>轻量化：用 Rust 编写并在浏览器中运行，无需服务器支持，快速轻量。&lt;/li>
&lt;li>兼容性：支持各种类似Excel 的函数，能处理大部分 Excel 公式。&lt;/li>
&lt;li>开源：在 MIT/Apache 2.0 许可证下可用，允许集成到项目中，根据需求定制。&lt;/li>
&lt;li>可扩展性：支持无 UI 运行，也可嵌入 Python 和 JavaScript 中，灵活适应不同开发需求。&lt;/li>
&lt;li>协作功能：任何人都能在线使用并轻松共享电子表格。&lt;/li>
&lt;/ul>
&lt;h3 id="多智能体人格模拟">多智能体人格模拟
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-51-04.png"
width="1024"
height="1024"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/TinyTroupe" target="_blank" rel="noopener"
>TinyTroupe&lt;/a>，微软推出的一个由 LLM 驱动的多智能体人格模拟工具。&lt;/p>
&lt;p>其最大的特点是可以模拟具有特定性格、兴趣和目标的虚拟人物。&lt;/p>
&lt;p>通过调用 LLM 语言模型，它能够生成逼真的人物行为和互动场景。&lt;/p>
&lt;p>可应用在：广告、软件测试、产品和项目管理等工作场景中，提供接近真实的数据模拟。&lt;/p>
&lt;h3 id="轻量-ocr-工具">轻量 OCR 工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-51-54.png"
width="655"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.npmjs.com/package/llama-ocr" target="_blank" rel="noopener"
>llama-ocr&lt;/a>，核心是调用 LLama3.2 的模型能力，实现 OCR 功能，输入图像（本地或网络），输出markdown格式文本。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 106 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/</link><pubDate>Tue, 12 Nov 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-10-01-17.png" alt="Featured image of post 机器文摘 第 106 期" />&lt;h1 id="机器文摘-第-106-期">机器文摘 第 106 期
&lt;/h1>&lt;h3 id="入侵-ea-的-7-亿个在线账号">入侵 EA 的 7 亿个在线账号
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-56-39.png"
width="690"
height="338"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="489px"
>&lt;/p>
&lt;p>著名游戏公司 EA，最近有研究人员发现可以通过一些“特殊手段”窃取其在线账号里的个人数字资产。&lt;/p>
&lt;p>利用所发现的漏洞，可以将别人账号下的游戏数据挪到自己账号下。&lt;/p>
&lt;p>作者后来将情况反馈给了 EA，现在已经被修复（据作者说这项工作 EA 拖了好几个月时间）。&lt;/p>
&lt;p>&lt;a class="link" href="https://battleda.sh/blog/ea-account-takeover" target="_blank" rel="noopener"
>《黑客入侵 7 亿个 Electronic Arts 帐户》&lt;/a>记录了整个探索发现的过程。&lt;/p>
&lt;p>大意如下：&lt;/p>
&lt;ol>
&lt;li>在EA的开发者环境中，一个安全研究员发现了一些不应该被公开的API文档。通过这些文档，他发现了一个关键的API接口，允许修改用户的身份标识（persona）信息。&lt;/li>
&lt;li>他发现可以利用一个特定的API接口（/identity/pids/{pidId}/personas/{personaId}），通过PUT请求来更新任何用户的persona信息，包括用户名、状态和账户ID。&lt;/li>
&lt;li>研究员测试了这个API接口，成功将自己的Steam账户与另一个EA账户关联，然后断开，证明了API端点的控制能力。&lt;/li>
&lt;li>他进一步发现，通过将其他用户的persona移动到自己的账户下，理论上可以完全控制那个账户，包括用户名和游戏数据。&lt;/li>
&lt;/ol>
&lt;h3 id="3d视频游戏中阴影技术的发展历程">3D视频游戏中阴影技术的发展历程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-56-52.png"
width="508"
height="360"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="338px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://30fps.net/pages/videogame-shadows/" target="_blank" rel="noopener"
>《经典的 3D 电子游戏阴影技术》&lt;/a>，探讨了 3D 视频游戏中阴影技术的发展历程和不同实现方法。&lt;/p>
&lt;p>在现实世界中，单一光源下的阴影并不会因为重叠而变暗，但在游戏里，情况就不同了。&lt;/p>
&lt;p>在3D游戏中，阴影不仅仅是为了增加真实感，它们还影响着游戏的性能和视觉效果。&lt;/p>
&lt;p>文章介绍了几种不同的阴影技术，比如在角色脚下画一个简单的暗色圆盘（Blob阴影），或者在角色上方渲染一个阴影纹理（平面阴影）。&lt;/p>
&lt;p>这些技术可以让阴影看起来更自然，但也需要在性能和视觉效果之间找到平衡。&lt;/p>
&lt;p>还有一些更高级的技术，比如阴影贴图和模板阴影，这些技术可以让阴影在不同表面上看起来更加真实。&lt;/p>
&lt;p>但这些技术也有它们的问题，可能会出现一些视觉错误，或者需要大量的计算资源。&lt;/p>
&lt;p>随着技术的发展，现代游戏开始使用更复杂的阴影技术，比如光线追踪阴影，这种技术可以模拟出更真实的光影效果，但也需要更多的计算能力。&lt;/p>
&lt;p>有时候，为了游戏的其他方面，比如性能或者艺术风格，开发者可能会选择不使用阴影，或者使用简化的阴影效果。&lt;/p>
&lt;h3 id="微软发布的多智能体系统">微软发布的“多智能体”系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-57-30.png"
width="796"
height="447"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;p>最近基于大模型的“智能体”技术大火，其核心是基于大模型对于自然语言理解和逻辑推理能力，使得计算机可以自主地做一些稍微复杂的事务。&lt;/p>
&lt;p>比如今年新出的高端智能手机大部分都带有基于“智能体”技术的智能助理，比之前 siri 级别的对话助手要强大一些，可以根据语音输入做出复杂任务：如去外卖app帮你下单点一杯咖啡。&lt;/p>
&lt;p>这其中的技术原理基本上就是让大模型基于一些预定规则，扮演具有特定能力的“角色”，分工配合完成任务。&lt;/p>
&lt;p>微软发布的类似贾维斯的通用多代理系统： &lt;a class="link" href="https://www.microsoft.com/en-us/research/articles/magentic-one-a-generalist-multi-agent-system-for-solving-complex-tasks/" target="_blank" rel="noopener"
>Magentic-One&lt;/a> 采用了一个名为 Orchestrator 的首席代理来指导其他四个代理完成任务。&lt;/p>
&lt;p>这些代理分别是 WebSurfer（操作 Chromium 浏览器）、FileSurfer（读取本地文件）、Coder（编写和执行 Python 代码）和 ComputerTerminal（执行程序和安装新的编程库）。&lt;/p>
&lt;p>能够在不修改其核心功能或架构的情况下，在多个挑战性的代理基准上实现竞争性能。&lt;/p>
&lt;p>系统基于 AutoGen 开源框架构建，这使得系统具有模块化和灵活性，并且支持代理的即插即用设计。&lt;/p>
&lt;h3 id="makrdown-电子书工具">Makrdown 电子书工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-57-51.png"
width="690"
height="760"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://rust-lang.github.io/mdBook/" target="_blank" rel="noopener"
>mdBook&lt;/a> 是一个命令行工具，用于使用 Markdown 创建书籍。它非常适合创建产品或 API 文档、教程、课程材料或任何需要干净、易于导航和可自定义的演示文稿的内容。&lt;/p>
&lt;p>特性如下：&lt;/p>
&lt;ol>
&lt;li>轻量级 Markdown 语法可帮助你更专注于内容&lt;/li>
&lt;li>集成 搜索 支持&lt;/li>
&lt;li>为许多不同语言的代码块提供颜色语法高亮显示&lt;/li>
&lt;li>主题 文件允许自定义输出的格式&lt;/li>
&lt;li>预处理器 可以为自定义语法和修改内容提供扩展&lt;/li>
&lt;li>后端 可以将输出渲染为多种格式&lt;/li>
&lt;li>用 Rust 编写，实现速度、安全性和简单性&lt;/li>
&lt;/ol>
&lt;h3 id="网页里的复古电脑">网页里的复古电脑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-58-03.png"
width="690"
height="611"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="271px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pieter.com/" target="_blank" rel="noopener"
>pieter&lt;/a> 是一个运行在网页里的 windows3.1 环境，页面同时模拟了复古计算机的外观（有点儿像上世纪八九十年代的电脑）。让你完全沉浸在老系统的环境里。 ​​​&lt;/p>
&lt;h3 id="语音一体化处理工具">语音一体化处理工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-58-30.png"
width="543"
height="312"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="417px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/abus-aikorea/voice-pro" target="_blank" rel="noopener"
>Voice-Pro&lt;/a>，一款基于 Gradio Web UI 的语音识别、翻译和TTS的语音一体化处理工具，支持实时转录、翻译，一键安装。&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ol>
&lt;li>提供YouTube下载器、噪音去除、字幕、翻译和TTS的集成环境&lt;/li>
&lt;li>支持100种语言的语音识别和字幕创建，可翻译成100多种语言并通过TTS生成语音，可调整TTS语音速度、音量和音调&lt;/li>
&lt;li>原始视频的背景音乐和音效在多语言视频中保持不变&lt;/li>
&lt;li>支持批量处理&lt;/li>
&lt;/ol>
&lt;h3 id="gpu-加速的屏幕截图">GPU 加速的屏幕截图
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-58-47.png"
width="690"
height="382"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Exotik850/cleave" target="_blank" rel="noopener"
>Cleave&lt;/a>，是一个Rust写的轻量级、GPU加速的截图工具。&lt;/p>
&lt;p>使用Rust和WGPU构建，提供流畅的性能和最小的资源占用。主要特点包括GPU加速渲染、交互式屏幕区域选择、键盘控制、直接复制到剪贴板、支持高DPI显示和实时视觉反馈。 ​​​&lt;/p>
&lt;h3 id="在线生成练字字帖">在线生成练字字帖
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-59-03.png"
width="690"
height="458"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.zivip.com/" target="_blank" rel="noopener"
>超级字帖&lt;/a>，字帖生成网站，可以生成汉字（1-6年级的都有）、拼音、英文、数字等六大类字帖。&lt;/p>
&lt;h3 id="微积分电子书">微积分电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-59-47.png"
width="543"
height="277"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;/p>
&lt;p>微积分知识，对于AI也很重要了。&lt;/p>
&lt;p>计算损失“梯度”，反向传播，都要用到微积分。&lt;/p>
&lt;p>不过高校学习的高数课本都太枯燥难学了，如果业余时间想复习一下，看课本有些看不进去。&lt;/p>
&lt;p>Wolfram（就是那个做出著名数学软件 Mathematica 的公司） 发布了一本免费电子教科书&lt;a class="link" href="https://wolfram-media.com/products/introduction-to-calculus/" target="_blank" rel="noopener"
>《微积分导论》&lt;/a>。&lt;/p>
&lt;p>这本电子书介绍了微积分的基本概念及其应用，涵盖了微积分 1 的所有内容以及部分微积分 2 的内容。&lt;/p>
&lt;p>书中首先介绍函数和极限，然后是微分学，接着转向积分学，并简要讨论微分方程。&lt;/p>
&lt;p>最后提供了基于 AP 微积分 AB 课程的样本考试的完整解答。&lt;/p>
&lt;p>与书中涵盖的主题相关的视频、练习题、习题和测验，都可以在互动的 Wolfram U 课程&lt;a class="link" href="https://wolframcloud.com/obj/online-courses/introduction-to-calculus/what-is-calculus.html" target="_blank" rel="noopener"
>《微积分导论》&lt;/a>中找到。&lt;/p>
&lt;h3 id="专为音频对话开发的会话音频开源模型">专为音频对话开发的会话音频开源模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-10-00-39.png"
width="699"
height="608"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="275px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Standard-Intelligence/hertz-dev" target="_blank" rel="noopener"
>Hertz-dev&lt;/a>，是由 Standard Intelligence 公司开发的首个会话音频开源模型。hertz-dev 是一个全双工、仅支持音频的 Transformer 基础模型。&lt;/p>
&lt;p>它的主要功能是用于生成对话音频，也就是模拟人类对话的语音生成。支持全双工音频，它可以同时接收和生成音频，就像电话或实时对话一样，不需要等待说完一句话才能回复。&lt;/p>
&lt;p>Hertz-dev 拥有85亿参数，基于2千万小时的高质量音频数据训练，支持单声道和全双工生成选项。模型因使用了真实世界会话音频的超大数据集，能表现人类语音特征，如停顿和情感语调。&lt;/p>
&lt;h3 id="开源个人云电脑">开源个人云电脑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-10-00-54.png"
width="690"
height="511"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/HeyPuter/puter" target="_blank" rel="noopener"
>Puter&lt;/a>，一款开源免费且可一键部署个人云电脑的工具。提供了丰富的功能、极致速度体验，并且可高度个性化定制，打造专属个人云端操作系统。&lt;/p>
&lt;p>具有如下特性：&lt;/p>
&lt;ul>
&lt;li>一站式个人云平台，所有文件、应用和游戏都可以安全保存，随时随地访问；&lt;/li>
&lt;li>可作为 Dropbox、Google Drive、OneDrive 等传统网盘的升级替代，提供更强大的功能；&lt;/li>
&lt;li>支持构建和发布网站、Web 应用程序和游戏，是开发者的得力助手；&lt;/li>
&lt;li>提供完整的远程桌面环境，可用作服务器和工作站；&lt;/li>
&lt;li>支持自行托管，数据完全自主可控，充分保护隐私安全；&lt;/li>
&lt;li>支持多种部署方式，提供 Docker 一键部署方式；&lt;/li>
&lt;li>界面设计简洁美观，操作流畅，轻松上手使用。&lt;/li>
&lt;/ul>
&lt;h3 id="一个可以更改人物表情的工具">一个可以更改人物表情的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-10-01-17.png"
width="563"
height="277"
loading="lazy"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="487px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jhj0517/AdvancedLivePortrait-WebUI" target="_blank" rel="noopener"
>AdvancedLivePortrait-WebUI&lt;/a>，可以让照片中的人物眨眼、挑眉、嘟嘴，可以用它制作表情包、视频后期制作等。&lt;/p>
&lt;p>特性如下：&lt;/p>
&lt;ol>
&lt;li>可以精确调整，比如单独控制眼睛、眉毛或嘴型&lt;/li>
&lt;li>支持批量处理&lt;/li>
&lt;li>基于Gradio的Web界面工具，可实时预览&lt;/li>
&lt;/ol>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 105 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/</link><pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-43-35.png" alt="Featured image of post 机器文摘 第 105 期" />&lt;h1 id="机器文摘-第-105-期">机器文摘 第 105 期
&lt;/h1>&lt;h3 id="手写一个-git-版本控制系统">手写一个 Git 版本控制系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-36-45.png"
width="305"
height="353"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="207px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/hanyujie2002/wyag-zh" target="_blank" rel="noopener"
>自己动手写 Git&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>本文旨在从基础开始，深入解释 Git 版本控制系统。这听起来并不简单，过去的尝试往往效果不佳。但有一个简单的方法：要理解 Git 的内部机制，只需从头实现一个 Git。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>这不是开玩笑，也并不复杂：如果你仔细阅读这篇文章并编写代码（或者直接 下载代码 压缩包——但我强烈建议你自己动手写代码），你将得到一个名为 wyag 的程序，它实现了 Git 的基本功能：init、add、rm、status、commit、log……而且与 Git 本身兼容，甚至可以说最后添加关于提交部分的记录是由 wyag 本身而不是 Git 创建的 （链接）。所有这一切仅需 988 行简单的 Python 代码。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>那么，Git 真的有那么复杂吗？我认为复杂性是个误解。确实，Git 是一个功能丰富的大型程序，但其核心其实非常简单，表面上的复杂性往往源于其深奥之处（而且 Git 被比作墨西哥卷饼 的讨论可能也没有帮助）。实际上，让 Git 令人困惑的，正是它核心模型的极简与强大。核心的简单性与丰富的应用之间的结合，常常让人难以理解，因为需要一定的思维跳跃才能从基本的简单性中推导出各种应用。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>通过实现 Git，我们将能更清晰地认识其基本原理。&lt;/p>
&lt;/blockquote>
&lt;h3 id="自然语言处理中的-embedding-是什么">自然语言处理中的 Embedding 是什么？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-37-17.png"
width="690"
height="771"
loading="lazy"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="214px"
>&lt;/p>
&lt;p>Embedding 直译过来是嵌入，但实际上这个技术的主要作用是将文本进行向量化（给文本提取多维度特征，用于判断文本之间的关系远近）。&lt;/p>
&lt;p>&lt;a class="link" href="%e7%bd%91%e9%a1%b5%e9%93%be%e6%8e%a5" >《嵌入被低估了》&lt;/a>，这篇文章讨论了机器学习（ML）技术中的嵌入技术对技术写作领域可能产生的影响。&lt;/p>
&lt;p>文章介绍了如何使用嵌入技术，以及它们是如何工作的。例如，使用 Gemini 服务提供商的 API 来生成嵌入向量的结果。&lt;/p>
&lt;p>嵌入技术将文本映射到一个多维空间中，每个维度代表一个特征。通过比较两个嵌入在这个多维空间中的距离，可以确定两个文本在语义上的接近程度。&lt;/p>
&lt;p>作者进行了一个实验，通过 Sphinx 扩展为每个文档生成嵌入，并将结果存储在 embeddings.json 文件中。然后，使用线性代数方法找到每个文档的最近邻，即与当前页面相关的推荐页面。&lt;/p>
&lt;p>实验表明，嵌入技术可能为我们维护文档的能力带来数量级上的提升。&lt;/p>
&lt;h3 id="基于自然语言的数据可视化">基于自然语言的数据可视化
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-37-34.png"
width="3840"
height="1916"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/data-formulator" target="_blank" rel="noopener"
>data-formulator&lt;/a>，微软开源的一个数据可视化AI工具项目：data-formulator，支持用户界面交互和自然语言输入结合的方式，进行数据转换并创建可视化效果。&lt;/p>
&lt;p>能处理图片和混乱文本，专业分析师和普通用户都能用。&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ol>
&lt;li>结合了拖拽操作和自然语言输入，不用写代码；&lt;/li>
&lt;li>可以自动理解数据关系，智能推荐合适的图表类型，能自动转换和清理数据，可以处理复杂的数据计算；&lt;/li>
&lt;li>可以调整图表样式，支持迭代式修改，可以基于现有图表继续优化；&lt;/li>
&lt;li>支持多种图表类型，能处理图片和混乱文本，自动生成数据转换的代码；&lt;/li>
&lt;/ol>
&lt;h3 id="专门绘制神经网络的绘图工具">专门绘制神经网络的绘图工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-38-13.png"
width="1359"
height="812"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/alexlenail/NN-SVG" target="_blank" rel="noopener"
>NN-SVG&lt;/a>，一个参数化生成神经网络（NN）架构图的工具，能帮助科研人员快速画出学术级别的示意图，支持一键导出SVG格式。&lt;/p>
&lt;p>节点层数、数量、颜色、大小等各类属性，都可以自定义设置。支持绘制多种神经网络图，比如：&lt;/p>
&lt;ol>
&lt;li>全连接神经网络（FCNN）；&lt;/li>
&lt;li>卷积神经网络（CNN）；&lt;/li>
&lt;li>深度神经网络，参考 AlexNet 论文的风格；&lt;/li>
&lt;/ol>
&lt;h3 id="纸质文档数字化存档工具">纸质文档数字化存档工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-38-44.png"
width="690"
height="494"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/paperless-ngx/paperless-ngxpaperless-ngx" target="_blank" rel="noopener"
>paperless-ngx&lt;/a>，一个基于 Django 的文档管理系统，可将纸质文档转换成可搜索的在线存档。不同于普通的扫描仪将实体书变为难以检索的图片或 PDF 格式，它通过文档扫描器实现电子化，转化为易于检索的格式。&lt;/p>
&lt;h3 id="免费在线文本转语音">免费在线文本转语音
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-38-53.png"
width="690"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="477px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tts.femoon.top/cn" target="_blank" rel="noopener"
>Azure TTS Web&lt;/a>，支持一次最多转换2000字，生成的声音非常真实、自然，有男性、女性的角色可选，情绪可匹配亲切、愉悦、兴奋、抱歉等。 ​​​&lt;/p>
&lt;h3 id="transformer-可视化">transformer 可视化
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-43-35.png"
width="690"
height="438"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://poloclub.github.io/transformer-explainer/" target="_blank" rel="noopener"
>transformer-explainer&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>Transformers 彻底改变了机器学习，但它们的内部工作原理对许多人来说仍然模糊不清。我们推出了 Transformer Explainer，这是一个互动可视化工具，旨在帮助非专业人士通过 GPT-2 模型了解 Transformers。我们的工具通过整合模型概览并在数学操作和模型结构的不同抽象层次之间平滑过渡，帮助用户理解复杂的 Transformer 概念。
它在用户的浏览器中本地运行一个实时 GPT-2 实例，让用户能够输入自己的内容，并实时观察 Transformer 的内部组件和参数如何协同工作来预测下一个词元。该工具无需安装或特殊硬件，从而扩大了大众对现代生成式 AI 技术的教育途径。&lt;/p>
&lt;/blockquote>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 104 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-21-08.png" alt="Featured image of post 机器文摘 第 104 期" />&lt;h1 id="机器文摘-第-104-期">机器文摘 第 104 期
&lt;/h1>&lt;h3 id="基于比-unreal-更-real-的游戏引擎制作游戏">基于比 Unreal 更 Real 的“游戏引擎”制作游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-19-02.png"
width="690"
height="415"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p>
&lt;p>在游戏界，Unreal Engine 是许多开发者的得力助手，能够制作出十分逼真的游戏场景。&lt;/p>
&lt;p>但是看多了也会腻。&lt;/p>
&lt;p>于是，有位开发者决定&lt;a class="link" href="https://novalis.org/blog/2024-10-18-building-a-game-with-the-real-engine.html" target="_blank" rel="noopener"
>用“Real Engine”——也就是他的双手和一堆材料——来打造一个 Real 游戏&lt;/a>。&lt;/p>
&lt;p>此游戏的开发，不建模、不编写 shader，而是直接动手做模型，拍照，然后像拼图一样在游戏里拼出他的世界。&lt;/p>
&lt;p>在这个过程中，作者遇到了不少挑战，比如光线泄漏、视觉设计问题，还有材质选择的纠结。&lt;/p>
&lt;p>虽然原型只花了几天时间，但他很快意识到，完成整个游戏可能需要他余生的所有周末。&lt;/p>
&lt;p>作者在文中也解释了为什么他没有选择 Blender 或 AI 生成艺术，因为他想要的是独一无二的真实感（全部来自实拍！）。&lt;/p>
&lt;p>他甚至自制了一个基于 Raspberry Pi 的相机系统，用来拍摄那些精心制作的模型，确保每个细节都能在游戏中完美呈现。&lt;/p>
&lt;p>手工侠坚持不用现成的模型家具和3D打印件，因为他不想让游戏看起来像是宜家的样板间。&lt;/p>
&lt;p>他用定格技术制作动画，虽然他承认自己的作品和专业动画师还有差距，但至少游戏作品不会让人在第一关就猜到结局。&lt;/p>
&lt;p>作者乐观预计在2025年或2026年发布他的游戏“High Mountain Abbey”。&lt;/p>
&lt;h3 id="编写属于你自己的虚拟机">编写属于你自己的虚拟机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-19-19.png"
width="690"
height="856"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="193px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.jmeiners.com/lc3-vm/" target="_blank" rel="noopener"
>Write your Own Virtual Machine&lt;/a>，本文指导读者如何编写自己的虚拟机（VM），以运行汇编语言程序。文章提供了一个关于虚拟机的全面介绍，包括其定义、LC-3架构、汇编示例、执行程序、实现指令集、陷阱例程等。最终代码仅约250行C语言。学习要求读者具备基本的C/C++和二进制算术知识。&lt;/p>
&lt;h3 id="开源反恐精英游戏">开源反恐精英游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-19-37.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/solcloud/Counter-Strike" target="_blank" rel="noopener"
>Counter-Strike&lt;/a>，项目提供编译好的客户端可执行文件，以及后端服务代码。&lt;/p>
&lt;p>运行联网游戏需要自行搭建服务。 ​​​&lt;/p>
&lt;h3 id="手机投屏电脑工具">手机投屏电脑工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-20-00.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/barry-ran/QtScrcpy" target="_blank" rel="noopener"
>QtScrcpy&lt;/a>，支持通过 USB 或 WIFI 一键连接 Android 设备到电脑，实现屏幕显示和控制，无需 root 权限。&lt;/p>
&lt;p>提供了丰富功能，包括实时屏幕显示、键鼠控制、屏幕录制、截图、批量操作、文件传输、剪贴板同步等。&lt;/p>
&lt;p>支持 GNU/Linux、Windows 和 macOS 主流平台，提供高性能、高质量、低延迟和快速启动的使用体验。&lt;/p>
&lt;h3 id="架构图但是-3d-的">架构图，但是 3D 的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-20-23.png"
width="690"
height="499"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://icraft.gantcloud.com/" target="_blank" rel="noopener"
>icraft&lt;/a>，一个绘制 3D 架构图的工具。&lt;/p>
&lt;p>iCraft Editor 是一款免费的3D架构图绘制工具，用来绘制3D架构图，采用真实3D场景展现架构图、网络拓扑图、其他3D结构图，绘制AWS|GCP|Azure|AliCloud架构图，将您的AWS|GCP|Azure|AliCloud环境可视化为等距架构图, 可旋转视角、嵌套子场景，帮助您轻松绘制出色的3D架构图&lt;/p>
&lt;p>iCraft Editor的主要特点：&lt;/p>
&lt;ol>
&lt;li>可免费在线使用&lt;/li>
&lt;li>真3D场景，可自由切换视角&lt;/li>
&lt;li>可嵌套子场景&lt;/li>
&lt;li>可编辑动画&lt;/li>
&lt;/ol>
&lt;h3 id="pgs-字幕格式详解">PGS 字幕格式详解
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-20-36.png"
width="768"
height="432"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>蓝光里面有个叫 PGS（Presentation Graphic Stream）的字幕格式，是以图片形式存储的字幕，扩展名一般为 .SUP。播放器在播放的时候就是跟着时间轴读取图片然后渲染到画面上。&lt;/p>
&lt;p>这个格式的技术信息，资料较少，&lt;a class="link" href="https://blog.thescorpius.com/index.php/2017/07/15/presentation-graphic-stream-sup-files-bluray-subtitle-format/" target="_blank" rel="noopener"
>这篇文章解析了 PGS 的技术规格&lt;/a>。&lt;/p>
&lt;p>相关开源仓库：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/Sec-ant/BDSupReader" target="_blank" rel="noopener"
>https://github.com/Sec-ant/BDSupReader&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/mjuhasz/BDSup2Sub" target="_blank" rel="noopener"
>https://github.com/mjuhasz/BDSup2Sub&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/xwlcn/BDSupSubPlus" target="_blank" rel="noopener"
>https://github.com/xwlcn/BDSupSubPlus&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/wswartzendruber/PGS4NET" target="_blank" rel="noopener"
>https://github.com/wswartzendruber/PGS4NET&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="开源人形机器人">开源人形机器人
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-21-08.png"
width="756"
height="599"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="302px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.zhiyuan-robot.com/DOCS" target="_blank" rel="noopener"
>智元机器人&lt;/a>，稚晖君创业研发的：智元人形机器人，全套资料全球开源，包括设计图纸和代码。&lt;/p>
&lt;p>灵犀X1全身包含29个关节（R86-2&lt;em>9、R86-3&lt;/em>6、R52&lt;em>10、L28&lt;/em>4）和2个夹爪，支持扩展头部3自由度。&lt;/p>
&lt;p>开发资料包括：BOM清单、整机图纸、装机SOP等。&lt;/p>
&lt;p>从硬件上来看，该机器人使用了一台 i7-13620H 迷你主机作为计算中枢，使用一台 glient MT2500A 有线路由器作为网络中枢。&lt;/p>
&lt;p>有趣的是，在物料清单上，有些电子料和成品套件还给出了淘宝链接（上链接！）。&lt;/p>
&lt;h3 id="解析屏幕界面交互的工具">解析屏幕界面交互的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-22-15.png"
width="689"
height="419"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="394px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/OmniParser" target="_blank" rel="noopener"
>OmniParser&lt;/a>，微软开源的一款可以解析和识别屏幕上可交互图标的工具，它能准确的识别出用户界面中的可交互图标，在解析方面优于 GPT-4V。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>双重识别能力，能找出界面上所有可以点击的地方，具备语义理解能力，能理解按钮或图标的具体功能&lt;/li>
&lt;li>可以作为插件，与Phi-3.5-V、 Llama-3.2-V以及其他模型结合使用&lt;/li>
&lt;li>支持结构化输出，除了识别屏幕上的元素，还能将这些元素转换成结构化的数据&lt;/li>
&lt;/ul>
&lt;h3 id="端到端情感语音对话模型">端到端情感语音对话模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-23-10.png"
width="827"
height="351"
loading="lazy"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="565px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/THUDM/GLM-4-Voice" target="_blank" rel="noopener"
>GLM-4.Voice&lt;/a>，智谱开源的情感语音模型，一款端到端语音模型，能情感共鸣、支持打断、多语言多方言支持。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>情感表达和情感共鸣：可以模拟不同的情感和语调，高兴、悲伤、生气、害怕等情绪，会用合适的情绪语气回复&lt;/li>
&lt;li>调节语速：可以要求 ta 快点说 or 慢点说&lt;/li>
&lt;li>随时打断：可以根据实时的指令，调整语音输出的内容、风格和情感，支持更灵活的对话互动&lt;/li>
&lt;li>多语言、多方言支持：目前支持中英文语音以及中国各地方言，擅长粤语、重庆话、北京话&lt;/li>
&lt;/ul>
&lt;h3 id="开源视频翻译工具">开源视频翻译工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-23-51.png"
width="1003"
height="392"
loading="lazy"
class="gallery-image"
data-flex-grow="255"
data-flex-basis="614px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Huanshere/VideoLingo" target="_blank" rel="noopener"
>VideoLingo&lt;/a>，是一站式视频翻译本地化配音工具，旨在生成 Netflix 级别的高质量字幕，告别生硬机翻，告别多行字幕，还能加上高质量的配音，让全世界的知识能够跨越语言的障碍共享。通过直观的 Streamlit 网页界面，只需点击两下就能完成从视频链接到内嵌高质量双语字幕甚至带上配音的整个流程，轻松创建 Netflix 品质的本地化视频。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>🎥 使用 yt-dlp 从 Youtube 链接下载视频&lt;/li>
&lt;li>🎙️ 使用 WhisperX 进行单词级时间轴字幕识别&lt;/li>
&lt;li>📝 使用 NLP 和 GPT 根据句意进行字幕分割&lt;/li>
&lt;li>📚 GPT 总结提取术语知识库，上下文连贯翻译&lt;/li>
&lt;li>🔄 三步直译、反思、意译，媲美字幕组精翻效果&lt;/li>
&lt;li>✅ 按照 Netflix 标准检查单行长度，绝无双行字幕&lt;/li>
&lt;li>🗣️ 使用 GPT-SoVITS 等方法对齐配音&lt;/li>
&lt;li>🚀 整合包一键启动，在 streamlit 中一键出片&lt;/li>
&lt;li>📝 详细记录每步操作日志，支持随时中断和恢复进度&lt;/li>
&lt;li>🌐 全面的多语言支持，轻松实现跨语言视频本地化&lt;/li>
&lt;/ul>
&lt;p>VideoLingo 提供 一键简易包 和 源码安装 两种本地安装方式。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 103 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/</link><pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-35-29.png" alt="Featured image of post 机器文摘 第 103 期" />&lt;h1 id="机器文摘-第-103-期">机器文摘 第 103 期
&lt;/h1>&lt;h3 id="制作一个带全息图像的窗户">制作一个带全息图像的窗户
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-31-04.png"
width="609"
height="585"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="249px"
>&lt;/p>
&lt;p>一扇透明的窗户在特定光线下能展现出隐藏的图像，甚至3D全息图？&lt;/p>
&lt;p>文章&lt;a class="link" href="https://mattferraro.dev/posts/caustics-engineering" target="_blank" rel="noopener"
>《Hiding Images in Plain Sight: The Physics Of Magic Windows》&lt;/a>讲述了如何制作一个具有魔力的透明亚克力窗户。&lt;/p>
&lt;p>这个窗户在正常情况下看起来是完全透明的，但当你用手电筒照射或在阳光下时，它能形成图像或3D全息图。&lt;/p>
&lt;p>实现这个魔法背后的物理原理是光的折射和一种称为“焦散”的现象。&lt;/p>
&lt;p>焦散是当光线照射到透明物体时形成的明亮光斑。&lt;/p>
&lt;p>即使是物体表面微小的不平整也能形成强大的透镜效果，产生强烈的焦散图案。&lt;/p>
&lt;p>作者通过精确控制亚克力表面的形状（通过控制表面的凹凸），使得折射的光线能够形成焦散图像。他将这个过程比作传统的凸透镜，通过调整透镜的曲率来控制光线的汇聚或发散，从而影响图像的亮度。&lt;/p>
&lt;p>作者在文中详细介绍了如何通过数学建模和计算来设计这样的窗户。首先，他将问题公式化，然后通过迭代方法逐步求解。&lt;/p>
&lt;p>使用类似于计算流体动力学的方法，通过定义一个“速度势”来模拟光线压力的分布，并通过求解泊松方程来找到所需的表面形状。&lt;/p>
&lt;p>文末提供了相关代码和设计文件。&lt;/p>
&lt;h3 id="使用-pytorch-从零开始构建大型语言模型">使用 Pytorch 从零开始构建大型语言模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-31-46.png"
width="643"
height="270"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="571px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://medium.com/@msouza.os/llm-from-scratch-with-pytorch-9f21808c6319" target="_blank" rel="noopener"
>《LLM from scratch with Pytorch》&lt;/a>，作者 Matheus Oliveira De Souza，介绍了如何使用 Pytorch 从零开始构建大型语言模型（LLM）。&lt;/p>
&lt;p>文章先解释了生成模型和LLM的基本概念，然后逐步介绍了模型的各个组成部分，包括Tokenization、Embedding层、Transformer架构以及Attention机制。&lt;/p>
&lt;p>作者分享了自己使用 Pytorch 实现 Medium 文章生成器的经历，包括数据集准备、模型训练和测试。&lt;/p>
&lt;p>文章还探讨了使用预训练的 GPT-2 嵌入层来加速训练过程。&lt;/p>
&lt;h3 id="基于编程的物理教程">基于编程的物理教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-32-10.png"
width="738"
height="521"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://matthias-research.github.io/pages/tenMinutePhysics/index.html" target="_blank" rel="noopener"
>十分钟物理&lt;/a>，教你用 JavaScript 模拟物理现象，如火焰、弹球碰撞、欧拉流体等很多内容。&lt;/p>
&lt;p>每则教程配有详细的笔记、代码、demo和教学视频。 ​​​&lt;/p>
&lt;h3 id="教你如何编写游戏模拟器">教你如何编写游戏模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-32-47.png"
width="337"
height="721"
loading="lazy"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="112px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.emulator101.com/" target="_blank" rel="noopener"
>Emulator 101&lt;/a>，该教程以C语言为基础，适合想要深入了解CPU工作原理的学习者。&lt;/p>
&lt;p>教程指导读者一步步编写一个模拟 Space Invaders 游戏的 8080 CPU 仿真器，通过实际操作帮助理解 CPU 的工作原理和汇编语言。&lt;/p>
&lt;p>除了基础的编程知识，还涵盖了二进制和十六进制的介绍、CPU的快速入门、逻辑操作、汇编语言、堆栈等内容。此外，还提供了针对不同平台（如Mac OS X、iOS）的模拟器移植指南。&lt;/p>
&lt;h3 id="效果极好的-tts文本合成语音">效果极好的 TTS(文本合成语音)
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-33-22.png"
width="537"
height="297"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SWivid/F5-TTS" target="_blank" rel="noopener"
>F5-TTS&lt;/a>&lt;/p>
&lt;ol>
&lt;li>零样本声音克隆，生成的语音自然且富有表现力&lt;/li>
&lt;li>推理实时率达到0.15，优于现有基于扩散的TTS模型&lt;/li>
&lt;li>支持控制语音速度，并保持声音自然&lt;/li>
&lt;li>支持无缝在不同语言/方言间平滑过渡&lt;/li>
&lt;/ol>
&lt;h3 id="一款开源免费的远程会话管理工具">一款开源免费的远程会话管理工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-33-44.png"
width="690"
height="648"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/1Remote/1Remote" target="_blank" rel="noopener"
>1Remote&lt;/a>，能够让你在任何时候快速开启一个远程会话，支持微软远程桌面(RDP)、VNC、SSH、Telnet、SFTP, FTP, RemoteApp 等协议。&lt;/p>
&lt;p>具有如下特性：&lt;/p>
&lt;ul>
&lt;li>多协议支持：支持 RDP, SSH, VNC, Telnet, (S)FTP, RemoteApp 等协议，颇为全面；&lt;/li>
&lt;li>快速启动：可通过 Alt + M 快速启动远程会话，支持拼音检索汉字；&lt;/li>
&lt;li>多显示器支持：提供了出色的 RDP 多显示器远程管理体验；&lt;/li>
&lt;li>细节配置：可以为每个连接设置 标签、图标、连接前后执行脚本等；&lt;/li>
&lt;li>界面定制：支持多语言和多主题切换，还可以根据个人喜好调整界面布局；&lt;/li>
&lt;li>可自定义启动器，在 sFTP、VNC 等协议中，用自己喜欢的程序来替换内置程序；&lt;/li>
&lt;li>开箱即用： Exe 版本下载解包即可，不需要执行任何安装操作。&lt;/li>
&lt;/ul>
&lt;h3 id="一个全能离线-ocr-桌面工具">一个全能离线 OCR 桌面工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-34-06.png"
width="690"
height="592"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="279px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/xushengfeng/eSearch" target="_blank" rel="noopener"
>eSearch&lt;/a>，截屏 离线OCR 搜索翻译 以图搜图 贴图 录屏 万向滚动截屏 屏幕翻译 。&lt;/p>
&lt;p>作者自荐：&amp;gt; eSearch 是Information-portal的:electron:重写版(顺便加了亿些功能)&lt;/p>
&lt;blockquote>
&lt;p>主要是想在 Linux 上(win 和 mac 上也能用)实现锤子大爆炸或小米传送门这样的屏幕搜索功能，当然也是一款方便的截屏软件。
经过数次版本迭代，eSearch 的功能愈加丰富
即拥有 截屏+OCR+搜索+翻译+贴图+屏幕翻译+以图搜图+滚动截屏+录屏&lt;/p>
&lt;/blockquote>
&lt;h3 id="开源虚拟数字人">开源虚拟数字人
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-35-29.png"
width="292"
height="435"
loading="lazy"
class="gallery-image"
data-flex-grow="67"
data-flex-basis="161px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/yakami129/VirtualWife" target="_blank" rel="noopener"
>Virtualwife&lt;/a>，是一个创新的虚拟数字人项目，专注于开发具有 AI 的虚拟角色。&lt;/p>
&lt;p>角色设计用于在B站等直播平台上进行互动，提供娱乐和信息。&lt;/p>
&lt;p>通过集成先进的 AI 技术，如自然语言处理和机器学习，Virtualwife 的角色能理解和响应用户输入，提供更加自然和智能的交流体验。&lt;/p>
&lt;p>Virtualwife 基于 OpenAI 等 AI 研究机构的技术增强虚拟角色的能力。&lt;/p>
&lt;blockquote>
&lt;p>VirtualWife是一个虚拟数字人项目，项目还处于孵化阶段，有很多需要优化的地方，作者想打造一个拥有自己“灵魂”的虚拟数字人，你可以像朋友一样和她相识，作者希望虚拟数字人融入人类生活，作为恋爱导师，心理咨询师，解决人类的情感需求。&lt;/p>
&lt;/blockquote>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 102 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/</link><pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-50-31.png" alt="Featured image of post 机器文摘 第 102 期" />&lt;h1 id="机器文摘-第-102-期">机器文摘 第 102 期
&lt;/h1>&lt;h3 id="上海交通大学的大模型课程">上海交通大学的大模型课程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-49-30.png"
width="690"
height="2077"
loading="lazy"
class="gallery-image"
data-flex-grow="33"
data-flex-basis="79px"
>&lt;/p>
&lt;p>LLM 大语言模型技术已经引发了技术革命，对自然语言处理、机器翻译、自动文本生成等领域产生了深远影响。&lt;/p>
&lt;p>&lt;a class="link" href="https://gair-nlp.github.io/cs2916/docs/intro/" target="_blank" rel="noopener"
>这个来自上海交大的课程（号称国内首个 LLM 课程）&lt;/a>，将帮助学生理解这一革命的本质、历史和未来发展，为他们在相关领域的工作做好准备。&lt;/p>
&lt;p>每个章节都可以下载课件并给出了推荐阅读材料。&lt;/p>
&lt;h3 id="一份从中级到高级的-ai-学习路径">一份从中级到高级的 AI 学习路径
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-50-31.png"
width="690"
height="690"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/hesamsheikh/ml-retreat" target="_blank" rel="noopener"
>ML Retreat&lt;/a>，来自国外一名技术博主分享，记录了其在学习高级机器学习时的个人笔记和资源，涵盖了从基础到更高级主题的深入理解。&lt;/p>
&lt;p>目前已分享如何从头构建大语言模型、LLM 幻觉深入研究以及 LLM 超越注意力机制等相关笔记。&lt;/p>
&lt;h3 id="实现一个-256kb-的迷你文件系统">实现一个 256KB 的迷你文件系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-51-02.png"
width="690"
height="189"
loading="lazy"
class="gallery-image"
data-flex-grow="365"
data-flex-basis="876px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.qtmuniao.com/2024/02/28/mini-filesystem/" target="_blank" rel="noopener"
>螺蛳壳里做道场：实现一个 256KB 的迷你文件系统&lt;/a>，提供了一个迷你文件系统的实现示例，涵盖了文件系统的多个关键组成部分，包括数据结构、读写流程、目录组织和空闲空间管理。通过这个简单的模型，读者可以对文件系统的工作原理有一个直观的理解。&lt;/p>
&lt;blockquote>
&lt;p>本文主要 “编译” 自书籍&lt;a class="link" href="https://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="noopener"
>《Operating Systems: Three Easy Pieces》&lt;/a>第 40 章，这是一本非常深入浅出的书，推荐给所有对操作系统感到迷茫的同学。本文件系统基于一个非常小的硬盘空间，以数据结构和读写流程为主线，从零到一的推导出各个基本环节，可以帮你快速建立起对文件系统的直觉。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>文件系统基本都是构建于块存储之上的。但当然，现在的一些分布式文件系统，如 JuiceFS，底层是基于对象存储的。但无论块存储还是对象存储，其本质都是按 “数据块” 进行寻址和数据交换的。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我们首先会探讨一个完整的文件系统在硬盘上的数据结构，也即布局；然后再通过打开关闭、读写流程将各个子模块串起来，从而完成对一个文件系统要点的覆盖。&lt;/p>
&lt;/blockquote>
&lt;h3 id="开局一张图剩下全靠编">开局一张图，剩下全靠编？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-51-36.png"
width="770"
height="552"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="334px"
>&lt;/p>
&lt;p>日内瓦大学等机构研究的强化学习智能体——&lt;a class="link" href="https://diamond-wm.github.io/" target="_blank" rel="noopener"
>DIAMOND世界模型（World model）&lt;/a>，做到了。&lt;/p>
&lt;p>这个项目验证了一种新的图形技术：不使用传统游戏渲染技术，而是通过模型预测，实时生成游戏的视频帧。&lt;/p>
&lt;p>也就是说，用户通过鼠标键盘进行输入，模型便会根据用户的操作生成下一帧视频。&lt;/p>
&lt;p>基本原理：&lt;/p>
&lt;ol>
&lt;li>扩散模型：核心模块，通过逆向学习噪声过程来生成高质量的视觉数据。输入过去的观察与动作数据，模型可以预测未来的画面、奖励和任务是否终止。&lt;/li>
&lt;li>奖励模型：使智能体能够评估其行为，并通过这些评估优化决策能力。奖励信号是强化学习系统中至关重要的一环，驱动智能体不断改进其策略。&lt;/li>
&lt;li>终止模型：该模型能帮助智能体识别任务何时结束，或者需要重新开始。例如在自动驾驶中，智能体需要知道自己何时到达目的地。&lt;/li>
&lt;/ol>
&lt;h3 id="python-图形库">Python 图形库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-52-48.png"
width="964"
height="776"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/panda3d/panda3d" target="_blank" rel="noopener"
>Panda3D&lt;/a>，一个开源、跨平台的游戏引擎，专为开发实时 3D 图形应用程序而设计。它由迪士尼和卡内基梅隆大学共同开发，提供了丰富的功能和灵活的 API，使开发者能够快速构建复杂的 3D 应用程序和游戏。Panda3D 支持 Python 和 C++ 编程语言，适合不同层次的开发者使用。&lt;/p>
&lt;h3 id="机器人算法实践">机器人算法实践
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-53-18.png"
width="853"
height="1000"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="204px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/carlos-argueta/rse_prob_robotics" target="_blank" rel="noopener"
>机器人算法实践&lt;/a>，基于《概率机器人学》书中的机器人算法在 &lt;a class="link" href="http://dev.ros2.fishros.com/doc/" target="_blank" rel="noopener"
>ROS 2&lt;/a>（用于构建机器人的第二代机器人操作系统，其包含了大量的机器人相关软件库和工具集。） 上的实现，旨在通过 Python 和 C++ 代码，将书中的理论与现实世界中的机器人应用相结合，实现快速原型开发和深入理解。&lt;/p>
&lt;h3 id="开源搜索引擎">开源搜索引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-54-20.png"
width="886"
height="736"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/KoriIku/luxirty-search" target="_blank" rel="noopener"
>Luxirty Search&lt;/a>，基于 Google，屏蔽内容农场，具有无广告、无跟踪、干净、简洁，快等特点。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ol>
&lt;li>内置内容农场屏蔽，包括 CSDN 等 SEO 站点和 Stack Overflow 中文翻译站。&lt;/li>
&lt;li>一键提升 GitHub、Stack Overflow、V2EX、博客园搜索权重，无需手动输入 site:。&lt;/li>
&lt;li>一键搜索 v2ex、Raddit。&lt;/li>
&lt;li>内置广告屏蔽、跟踪链接移除。&lt;/li>
&lt;/ol>
&lt;h3 id="高性能开源-ocr-工具">高性能开源 OCR 工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-55-10.png"
width="699"
height="316"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="530px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/VikParuchuri/surya" target="_blank" rel="noopener"
>Surya&lt;/a>，超强的开源 OCR 工具，新版本使用了新的架构，性能优于当前的SoTA开源模型 Table Transformer。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ol>
&lt;li>识别表格行、列和单元格和具体的字符。&lt;/li>
&lt;li>识别复杂的布局（标题、图像等等）和旋转的表格。&lt;/li>
&lt;li>支持包括中文在内的90多种语言。&lt;/li>
&lt;li>可在本地运行，提供API。&lt;/li>
&lt;/ol>
&lt;h3 id="极简-gif-录制工具">极简 GIF 录制工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-55-32.png"
width="813"
height="423"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cockos.com/licecap" target="_blank" rel="noopener"
>LICEcap&lt;/a>，一个十分简洁的 GIF 录制工具，软件体积仅几百 KB，录制生成的 GIF 品质优异，生成的文件体积也很小。支持 Windows 和 Mac 平台。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 101 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/</link><pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/2024-10-08-10-11-47.png" alt="Featured image of post 机器文摘 第 101 期" />&lt;h1 id="机器文摘-第-101-期">机器文摘 第 101 期
&lt;/h1>&lt;h3 id="用点阵打印机给自己每天打一份日报">用点阵打印机给自己每天打一份日报
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/2024-10-08-10-08-34.png"
width="700"
height="551"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="304px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://aschmelyun.com/blog/getting-my-daily-news-from-a-dot-matrix-printer/" target="_blank" rel="noopener"
>《打印日报》&lt;/a>，这篇文章讲述了作者如何利用点阵打印机来获取每日新闻的经历。&lt;/p>
&lt;p>作者原本习惯于每天早上通过手机浏览新闻和社交媒体，了解外界发生的事情。&lt;/p>
&lt;p>然而，碎片化信息的严重过载，使他决定减少屏幕使用时间。&lt;/p>
&lt;p>尽管如此，他还是希望在早晨起床后能够及时获取信息。&lt;/p>
&lt;p>为了实现这个目标，作者从eBay上购买了一台点阵打印机，并计划每天打印出一份定制的“日报”来阅读。&lt;/p>
&lt;p>文章详细描述了他如何搭建这个系统：&lt;/p>
&lt;h4 id="硬件配置">硬件配置
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>点阵打印机&lt;/strong>：一台 Star NP-10 型号的打印机。&lt;/li>
&lt;li>&lt;strong>Raspberry Pi Zero W&lt;/strong>：用于连接打印机并处理数据。&lt;/li>
&lt;li>&lt;strong>串口转USB适配器&lt;/strong>：用于将打印机的串行端口转换为 USB 接口，方便连接。&lt;/li>
&lt;li>&lt;strong>电源&lt;/strong>：为打印机和 Raspberry Pi 提供电力。&lt;/li>
&lt;/ul>
&lt;h4 id="数据内容">数据内容
&lt;/h4>&lt;p>作者希望“日报”包含四个部分：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>天气&lt;/strong>：提供当天的天气情况。&lt;/li>
&lt;li>&lt;strong>股票&lt;/strong>：展示股票市场的动态。&lt;/li>
&lt;li>&lt;strong>新闻头条&lt;/strong>：主要新闻的摘要。&lt;/li>
&lt;li>&lt;strong>Reddit热门帖子&lt;/strong>：Reddit上受欢迎的帖子。&lt;/li>
&lt;/ol>
&lt;p>他通过免费的公共API获取这些信息。&lt;/p>
&lt;h4 id="自动化打印">自动化打印
&lt;/h4>&lt;p>作者通过设置定时任务，使得打印机每天早上8点左右自动打印出他的个性化“日报”。&lt;/p>
&lt;p>效果比较令作者满意，这种有限的信息量，通过一张纸呈现的方式，比在网站和社交媒体应用上无休止地滚动浏览要好得多。&lt;/p>
&lt;p>发挥一点儿创意，将旧技术与现代技术相结合，有时候可以创造出既有趣又实用的解决方案。&lt;/p>
&lt;h3 id="用一个打火机来获取-root-权限">用一个打火机来获取 root 权限？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/2024-10-08-10-09-02.png"
width="595"
height="784"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="182px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.da.vidbuchanan.co.uk/blog/dram-emfi.html" target="_blank" rel="noopener"
>《你能只用一个打火机获得root权限吗？》&lt;/a>，文章探讨了通过硬件故障注入（EMFI）来实现黑客攻击的可能性。&lt;/p>
&lt;p>要编写一个漏洞利用程序，首先需要一个漏洞。如果没有现成的漏洞，就需要创造性地使用故障注入技术。&lt;/p>
&lt;p>注入可以采取多种形式，包括软件控制的数据损坏、电源故障、时钟故障、电磁脉冲、激光等。（我记得 Xbox360 游戏机的硬件破解就是针对 CPU 发送合适的电击脉冲，从而导致某些保护指令失效）&lt;/p>
&lt;p>硬件故障注入通常需要专门的（且昂贵的）设备，因为需要在故障注入的时机和位置方面具有高度的精确性。&lt;/p>
&lt;p>作者之前了解到使用压电点火器和电感器作为电磁故障注入（EMFI）的低成本工具，并成功利用DFA攻击了运行在Arduino上的AES软件实现。但作者并不满足于此，他想要利用更“真实”的目标。&lt;/p>
&lt;p>作者选择了一台2011年生产的三星S3520笔记本电脑作为测试对象，配备有 Intel i3-2310M CPU和 1GB DDR3 RAM。&lt;/p>
&lt;p>这台电脑足够新，可以运行轻量级的桌面Linux发行版（作者选择了Arch Linux），但又足够老旧，即使变砖也不会太担心。&lt;/p>
&lt;p>他计划通过在这些数据传输引脚上注入故障来实现攻击（作者认为笔记本电脑中最易受物理攻击的部分是连接DRAM内存和系统其余部分的DDR总线。）。&lt;/p>
&lt;p>&lt;em>值得注意的是，作者应该是实现了这个目标，但是文章中并未介绍实施攻击的过程，仅仅提供了大概的思路（可能是出于安全性考虑）&lt;/em>&lt;/p>
&lt;h3 id="cuda-编程教程">CUDA 编程教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/2024-10-08-10-11-02.png"
width="690"
height="278"
loading="lazy"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="595px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/srush/GPU-Puzzles" target="_blank" rel="noopener"
>GPU-Puzzles&lt;/a>，GPU 拼图，一套通过实践学习 CUDA 编程的教程。&lt;/p>
&lt;p>课程采用 Python 笔记本的方式进行教学，可以下载自己的副本在具有 GPU 的环境中执行，也可直接使用在线的免费环境（如 Colab）进行执行。 ​​​&lt;/p>
&lt;h3 id="数学动画库">数学动画库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/2024-10-08-10-11-32.png"
width="525"
height="268"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="470px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ManimCommunity/manim" target="_blank" rel="noopener"
>Manim&lt;/a>，一个可以用于创建数学动画的开源工具。&lt;/p>
&lt;p>可以通过动画的方式精确的展示数学概念和过程。&lt;/p>
&lt;p>支持生成各种数学图形和动画，几何图形变换、函数图像绘制、微积分概念演示等。&lt;/p>
&lt;h3 id="高颜值浏览器主页插件">高颜值浏览器主页插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/2024-10-08-10-11-47.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>
&lt;a class="link" href="https://github.com/XengShi/materialYouNewTab" target="_blank" rel="noopener"
>materialYouNewTab&lt;/a>，一款颜值颇高的浏览器主页插件，采用 Google Material You 的设计风格，提供了自定义搜索引擎、自定义快捷网站图标、主题切换等多种功能。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 100 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/</link><pubDate>Tue, 24 Sep 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-09-55-05.png" alt="Featured image of post 机器文摘 第 100 期" />&lt;h1 id="机器文摘-第-100-期">机器文摘 第 100 期
&lt;/h1>&lt;h3 id="基于-nfc-的电影点播系统">基于 NFC 的电影点播系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-09-55-05.png"
width="690"
height="509"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>HN 上一个很有爱的家长，写了一篇&lt;a class="link" href="https://simplyexplained.com/blog/how-i-built-an-nfc-movie-library-for-my-kids/" target="_blank" rel="noopener"
>《我是如何为我的孩子构建一个 NFC 电影库的》&lt;/a>，记录了他的一个爱心创意。&lt;/p>
&lt;p>为了让孩子们看电影方便，作者自己动手做了一个可以识别 NFC 卡片的电影播放系统，孩子们拿着实体卡放在读卡器上即可实现对应影片的播放。&lt;/p>
&lt;p>之所以做这一一个系统，是因为作者感觉拿着遥控器在电视上选来选去，太缺乏仪式感了。&lt;/p>
&lt;p>他想让孩子体验自己在童年时跟小伙伴一起挑选 VHS 录像带，并将其放入播放器的那种兴奋感觉。&lt;/p>
&lt;p>但是现在像 VHS 这种老旧的播放系统早已被淘汰，于是作者一拍脑袋想到了这个新旧融合的点子。&lt;/p>
&lt;p>作者使用了包括一个 ESP32 开发板在内的硬件组合，零件成本大约 25 欧元。&lt;/p>
&lt;p>以及自己动手写了一些控制用的代码。&lt;/p>
&lt;p>文章记录了整个制作过程，并开源了所用到的图纸和代码。&lt;/p>
&lt;h3 id="windows-shell-推荐">Windows shell 推荐
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-09-55-20.png"
width="653"
height="370"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>除了 CMD.EXE、PowerShell 以及 WSL，在 Windows 使用命令行还有另外一种选择&lt;/p>
&lt;p>&lt;a class="link" href="https://www.ii.com/git-bash-is-my-preferred-windows-shell/" target="_blank" rel="noopener"
>《我最推荐的 windows shell》&lt;/a>，这篇文章是关于作者为什么喜欢在 Windows 系统中使用 Git Bash 作为命令行工具的个人体验分享。&lt;/p>
&lt;p>Git Bash 是在 Win 系统中安装 Git 时自带的一个 shell，本意在方便用户以 bash 的习惯在 Win 下使用命令行。&lt;/p>
&lt;p>作者在文中列举了一些 Win 平台下可用的命令行 shell，并详细介绍了 Git Bash 的特点，以及为什么最终选用它作为日常操作的 shell。&lt;/p>
&lt;p>主要原因：&lt;/p>
&lt;ol>
&lt;li>喜欢用 Bash，有多年的使用习惯，和对大量常用命令的依赖（比如 less、awk、cat 等）。&lt;/li>
&lt;li>容易安装，随 Git 的安装就带着了。&lt;/li>
&lt;li>与 Win 资源管理器完美整合（带有右键菜单：Git Bash Here）。&lt;/li>
&lt;li>直接使用 Windows 本身的环境变量（这点儿与 WSL 不同）。&lt;/li>
&lt;li>原生支持 UTF-8 编码。&lt;/li>
&lt;/ol>
&lt;p>文中还分享了一些定制化技巧以及一些使用上的 tips ，值得收藏。&lt;/p>
&lt;h3 id="星系可视化">星系可视化
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-09-55-38.png"
width="637"
height="361"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Avicted/galaxy_visualization_raylib" target="_blank" rel="noopener"
>Galaxy Visualization 星系可视化&lt;/a> 是一个的数据可视化任务项目，它通过蓝色展示100,000个真实星系和红色展示100,000个随机分布的星系，为我们提供了一个直观的宇宙结构视图。&lt;/p>
&lt;p>这个项目是 &lt;a class="link" href="https://studiehandboken.abo.fi/en/course/IT00CG19/19162?period=2024-2027" target="_blank" rel="noopener"
>Åbo Akademi 大学 GPU 编程课程&lt;/a> 的一部分，该课程专注于教授 CUDA 并行编程技术。&lt;/p>
&lt;p>学生们面临的挑战是使用 CUDA 技术计算星系间的 100亿个角度，并验证这些星系的分布并非随机，这一任务需要他们利用超级计算机的GPU资源独立完成。&lt;/p>
&lt;p>预期的计算时间仅为大约 3 秒，这不仅考验了学生对CUDA编程的掌握程度，也展示了高性能计算在处理大规模数据集时的潜力。&lt;/p>
&lt;p>项目本身提供的是数据的可视化展示，而非课程作业的具体解决方案，它为学生提供了一个直观的参考，帮助他们更好地理解和探索星系分布的复杂性。&lt;/p>
&lt;p>项目使用 &lt;a class="link" href="https://www.raylib.com/" target="_blank" rel="noopener"
>Raylib&lt;/a> 作为渲染引擎。&lt;/p>
&lt;h3 id="面向高级语言-javascript-rust-c等程序员的汇编语言入门指南">面向高级语言（ JavaScript, Rust, C等）程序员的汇编语言入门指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-09-56-13.png"
width="690"
height="1167"
loading="lazy"
class="gallery-image"
data-flex-grow="59"
data-flex-basis="141px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://shikaan.github.io/assembly/x86/guide/2024/09/08/x86-64-introduction-hello.html" target="_blank" rel="noopener"
>《写给高级语言用户的汇编语言入门指南》&lt;/a>，
本文以，以“Hello, World!”程序为例，介绍了x86-64汇编语言的基础知识。逐步介绍了x86-64汇编语言的特点、指令结构、寄存器使用、数据存储、程序结构和系统调用。 ​​​&lt;/p>
&lt;h3 id="使用纯-c-语言构建-android-应用">使用纯 C 语言构建 Android 应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-10-03-07.png"
width="480"
height="360"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/cnlohr/rawdrawandroid" target="_blank" rel="noopener"
>rawdrawandroid&lt;/a>，是一个开源安卓项目框架模板，提前配置好了使用 C 语言开发构建 Android App 的全部环境。&lt;/p>
&lt;p>这种并非主流做法，作者提供此框架的目的也只是希望避开一些“必须”使用 Java 才能做的事情，证明只使用 C 语言也同样可以做到并且构建的成果占用资源低且效率高。&lt;/p>
&lt;h3 id="机器视觉入门教程">机器视觉入门教程
&lt;/h3>&lt;p>AI 界的 github &lt;a class="link" href="https://huggingface.co/learn/computer-vision-course/unit0/welcome/welcome" target="_blank" rel="noopener"
>huggingface.co 出了一个关于机器视觉的教程&lt;/a>，从入门到实践，内容非常全面，也很有趣味性。&lt;/p>
&lt;h3 id="机器视觉开源工具">机器视觉开源工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-10-04-54.png"
width="690"
height="689"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/roboflow/supervision" target="_blank" rel="noopener"
>supervision&lt;/a>，GitHub 上一个开箱即用的计算机视觉工具，功能非常强大，可用于在图像或视频上绘制指定目标且它完全开源，已有 18.9k star。&lt;/p>
&lt;h3 id="用-github-搭建个人博客的另一种方式">用 Github 搭建个人博客的另一种方式
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-10-05-17.png"
width="532"
height="471"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="271px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.tinymind.me" target="_blank" rel="noopener"
>https://www.tinymind.me&lt;/a>，
授权你的 Github 账号，就可以用它来写你的个人博客和短想法，每条新日记都会立刻同步到你 Github 一个名为&amp;quot;tinymind-blog&amp;quot;的 repo 里。&lt;/p>
&lt;p>这是一个开源产品、没有服务器，只授权公开 repo 的写权限，不会读取 private repo ，只要 Github 不倒闭，你的日记数据就不会丢失。&lt;/p>
&lt;p>原理：
用 Github API 在你的目录下创建一个&amp;quot;tinymind-blog&amp;quot; repo
你的每次提交(blog/thoughts)，都会进行一次 commit ，数据被提交到这个 repo 。
读取最新的 blog/thoughts 数据，然后渲染在网页上。&lt;/p>
&lt;h3 id="一个远程桌面控制软件">一个远程桌面控制软件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-10-15-43.png"
width="684"
height="781"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://gv.163.com" target="_blank" rel="noopener"
>GameViewer&lt;/a>，网易出品的远程控制软件，完全免费，支持 Windows 、macOS 、安卓、iPhone 、iPad 。&lt;/p>
&lt;p>使用简单，打开就知道怎么操作。使用场景包括：远程协助、远程办公、远程游戏，具有超低延迟、流畅稳定、高清高帧、多点触控等特点。&lt;/p>
&lt;h3 id="计算机组成原理开源书籍">计算机组成原理开源书籍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-10-16-15.png"
width="690"
height="430"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;p>分享一本开源免费可在线阅读的书籍：《计算机体系结构基础》（第三版）。&lt;/p>
&lt;p>由被誉为 “龙芯之父” 的胡伟武老师等一线科研人员编写，共十二章，涵盖指令系统结构、计算机硬件结构、CPU 微结构、并行处理结构、计算机性能分析等主要内容。&lt;/p>
&lt;p>GitHub：https://github.com/foxsen/archbase
在线阅读：https://foxsen.github.io/archbase/index.html&lt;/p>
&lt;p>本书可作为高等学校本科生教材，也适合研究生和计算机技术人员参考阅读。&lt;/p>
&lt;h3 id="关于创造价值">关于创造价值
&lt;/h3>&lt;p>任何工作创造的价值，最终都会转化为刺激产生多巴胺的东西。&lt;/p>
&lt;p>也就是满足人们的需求。&lt;/p>
&lt;p>但最本质的需求还是多巴胺。&lt;/p>
&lt;p>你从事高尚事业，看似与之无关，你只不过提供了中间过程罢了，最终还是一样。&lt;/p>
&lt;p>脱口秀演员比较直接，刚讲完段子，观众就分泌了。&lt;/p>
&lt;p>当然那些从事特殊职业的，可以更直接的让客人分泌。&lt;/p>
&lt;p>所以，你想挣钱，得满足市场需求这不假，但琢磨来琢磨去，发现无非就是围绕怎样让人分泌多巴胺。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 099 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/</link><pubDate>Tue, 10 Sep 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-44-37.png" alt="Featured image of post 机器文摘 第 099 期" />&lt;h1 id="机器文摘-第-099-期">机器文摘 第 099 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="创始人模式">创始人模式
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-43-25.png"
width="545"
height="425"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;p>Paul Graham 写了一篇非常精彩的文章&lt;a class="link" href="https://paulgraham.com/foundermode.html" target="_blank" rel="noopener"
>《创始人模式》&lt;/a>，微博网友&lt;a class="link" href="https://weibo.com/1560906700/Ovi5A5w3m" target="_blank" rel="noopener"
>@阑夕&lt;/a>对此进行了精简版翻译。&lt;/p>
&lt;p>文章精彩，翻译亦精彩。&lt;/p>
&lt;p>摘录部分内容如下：&lt;/p>
&lt;blockquote>
&lt;p>这么说吧，世上有两种不同的模式来经营公司：创始人模式和管理人模式，在今天，即使是硅谷，也存在着某种潜在的共识，认为扩大规模就意味着转向管理人模式。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>据我所知，还没有专门解释创始人模式的书被出版，商学院也不知其存在，所以我们能得到的，只有少数创始人自己过河时摸到的石头。不过，既然我们确定了想找什么，事情就好办多了，我希望再过几年，创始人模式也能像管理人模式一样为人熟知，何况现在其实已经能猜到其中的区别在哪。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>是的，找来优秀的员工，让他们充分发挥，听上去非常有道理，但从一个个创始人的血泪教训来看，这种建议的潜台词就是：雇佣专业的骗子，让他们把公司掏空。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>创始人意识到自己受到了来自两个方向的操纵：有人告诉他们必须像管理人一样经营公司，而当他们这么做了，又会受到来自被他们管理的员工的压力，他们会让创始人相信，在周围的人都不认同你的判断时，你就应该反思是不是自己错了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>比如，乔布斯就为他认为对苹果公司而言最重要的100个人专门组织过一次静修会议，而这100个人并不是按职位级别顺序选出来的，你能想象在一家普通公司需要多大的能力才能推进这样的事情吗？&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="现代与古典的结合在-dos-环境里用-javascript-写交互动画">现代与古典的结合：在 DOS 环境里用 JavaScript 写交互动画
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-44-37.png"
width="638"
height="419"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SuperIlu/DOjS" target="_blank" rel="noopener"
>DOjS&lt;/a>，是一个 JavaScript 编程环境，适用于运行 MS-DOS、 FreeDOS 或任何基于 DOS 的 Windows（如 95、98、ME）的系统。它具有集成的编辑器、图形和声音输出、鼠标/键盘/摇杆输入等功能。&lt;/p>
&lt;p>DOjS 的功能有点儿类似于 Processing（一个多媒体交互开发环境，有 Java 版本和 Javascript 版本）。&lt;/p>
&lt;p>但特点是它确实可以在真正的 DOS 环境下运行，假如你有一台老掉牙的 386 电脑的话，不妨试试这个。&lt;/p>
&lt;h3 id="用-sql-玩俄罗斯方块">用 SQL 玩俄罗斯方块
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-44-50.png"
width="618"
height="586"
loading="lazy"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="253px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/nuno-faria/tetris-sql" target="_blank" rel="noopener"
>tetris-sql&lt;/a>，是一个利用 SQL 语言的图灵完备性来构建一个俄罗斯方块（Tetris）游戏。&lt;/p>
&lt;p>实现原理：&lt;/p>
&lt;ol>
&lt;li>递归公共表表达式 (CTE)：使用 SQL 的递归 CTE 来创建游戏循环，模拟编程语言中的循环结构。&lt;/li>
&lt;li>输出处理：使用 RAISE NOTICE 命令在 PostgreSQL 中输出游戏状态，因为 SQL 标准查询不适用于实时渲染。&lt;/li>
&lt;li>输入处理：通过数据库表接收用户输入，游戏循环通过查询这个表来读取玩家操作。&lt;/li>
&lt;li>游戏状态管理：使用 SQL 表和数组存储游戏状态，如当前得分、游戏板、玩家操作等。&lt;/li>
&lt;li>游戏逻辑：包括方块的移动、旋转、碰撞检测和行消除等逻辑，都通过 SQL 查询和函数实现。&lt;/li>
&lt;li>渲染游戏：将游戏板和方块的状态转换为字符串，以在终端或命令行界面中显示。&lt;/li>
&lt;li>资源消耗：虽然 CPU 使用率低，但内存和磁盘使用量会随着游戏的进行而增加，因为 SQL 查询保留了中间数据。&lt;/li>
&lt;/ol>
&lt;p>SQL 不仅可以用于数据库操作，还能通过创新方法实现复杂的游戏逻辑和算法。&lt;/p>
&lt;h3 id="一个功能强大且高颜值的-markdown-编辑器">一个功能强大且高颜值的 Markdown 编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-45-39.png"
width="815"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="458px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/udecode/plate" target="_blank" rel="noopener"
>Plate&lt;/a>，基于 React 的富文本编辑器框架，提供了 50+ 个插件直接开箱即用，可以无缝与你系统集成，同时还支持组件定制开发。&lt;/p>
&lt;p>UI 响应式设计，支持深浅色主题。&lt;/p>
&lt;h3 id="微软-autogen-的用户界面">微软 AutoGen 的用户界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-46-22.png"
width="939"
height="603"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="373px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/autogen/tree/main/samples/apps/autogen-studio" target="_blank" rel="noopener"
>AutoGen Studio&lt;/a>，提供了一个可视化界面，用户可以通过拖放、点击的方式定义和修改智能体以及工作流程。&lt;/p>
&lt;ol>
&lt;li>定义和修改智能体：支持通过界面定义智能体的属性，包括技能、配置和工作流程。&lt;/li>
&lt;li>创建和管理会话：支持创建会话，与智能体进行交互，并查看结果，包括聊天历史记录、生成的文件和执行时间。&lt;/li>
&lt;li>添加技能：支持为智能体添加技能，以扩展其功能，比如生成图像、查找论文等。&lt;/li>
&lt;li>支持将会话发布到本地库。&lt;/li>
&lt;/ol>
&lt;h3 id="llm-全栈应用框架">LLM 全栈应用框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-46-35.png"
width="690"
height="373"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Mintplex-Labs/anything-llm" target="_blank" rel="noopener"
>AnythingLLM&lt;/a>，这是一个全栈应用程序，可以将任何文档、资源（如网址链接、音频、视频）或内容片段转换为上下文，以便任何大语言模型（LLM）在聊天期间作为参考使用。&lt;/p>
&lt;p>此应用程序允许选择使用哪个LLM或向量数据库，同时支持多用户管理并设置不同权限。&lt;/p>
&lt;p>AnythingLLM 将文档划分为称为 workspaces (工作区)的对象。&lt;/p>
&lt;p>工作区的功能类似于线程，同时增加了文档的容器化。&lt;/p>
&lt;p>工作区可以共享文档，但工作区之间的内容不会互相干扰或污染，因此可以保持每个工作区的上下文清晰。&lt;/p>
&lt;h3 id="nanite-渲染引擎基于-webgpu-的实现">nanite 渲染引擎基于 WebGPU 的实现
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-46-52.png"
width="690"
height="327"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="506px"
>&lt;/p>
&lt;p>黑神话悟空的火爆让虚幻引擎 UE5 受到更广泛的关注，渲染组件 nanite 亦功不可没。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Scthe/nanite-webgpu" target="_blank" rel="noopener"
>nanite-webgpu&lt;/a>，是一个使用 WebGPU 在 Web 浏览器中的 Nanite 实现。&lt;/p>
&lt;p>包括网格 LOD 层次结构、软件光栅化器。基于每个实例和每个网格进行剔除（在这两种情况下都是视锥体和遮挡剔除）。&lt;/p>
&lt;p>支持纹理和逐顶点法线。&lt;/p>
&lt;p>可以使用 Deno 离线工作。&lt;/p>
&lt;h3 id="开源-ai-语音工具箱">开源 AI 语音工具箱
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-47-04.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Spr-Aachen/Easy-Voice-Toolkit" target="_blank" rel="noopener"
>Easy Voice Toolkit&lt;/a>，包括音频处理、语音识别、语音转录、数据集制作和语音合成等多种音频工具，形成了一套完整语音模型训练的工作流。&lt;/p>
&lt;p>各个工具均支持中文、英文和日文三种语言，提供 Windows 开箱即用的安装包，支持本地部署以及 Google Colab 云端部署。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 098 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/</link><pubDate>Tue, 03 Sep 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-55-02.png" alt="Featured image of post 机器文摘 第 098 期" />&lt;h1 id="机器文摘-第-098-期">机器文摘 第 098 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="探索机器学习的本质">探索机器学习的本质
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-55-02.png"
width="690"
height="351"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>尽管我们在工程层面上已经取得了巨大进展，但机器学习的基础原理仍然是一个谜。&lt;/p>
&lt;p>&lt;a class="link" href="https://writings.stephenwolfram.com/2024/08/whats-really-going-on-in-machine-learning-some-minimal-models/" target="_blank" rel="noopener"
>《机器学习中真正发生的事情：一些最小模型》&lt;/a>，一篇来自Stephen Wolfram的最新力作，深入探讨了机器学习的核心奥秘，并通过一系列极简模型揭示了机器学习背后的基本原理。&lt;/p>
&lt;p>此文是对机器学习领域的一次深刻反思，不仅为技术人员提供了新的视角，也为对人工智能未来充满好奇的观察者提供了丰富的思考素材。&lt;/p>
&lt;p>在文中，作者试图通过构建和讲解一些极简模型来揭开这层神秘的面纱。&lt;/p>
&lt;p>文中展示了即使是最简单的模型也能复现机器学习中的复杂现象。&lt;/p>
&lt;p>这些模型的简单性让我们更容易理解机器学习的本质。&lt;/p>
&lt;blockquote>
&lt;p>“我在这里尝试做的是尽可能深入挖掘——并且尽可能地简化事物。我将探索一些极简模型——这些模型，除了其他优点外，更适合于直观化展示。起初，我并不确信这些极简模型是否能够重现我们在机器学习中观察到的现象。但令人惊讶的是，它们似乎确实可以。”&lt;/p>
&lt;/blockquote>
&lt;h3 id="防火墙背后的秘密如何安全地打破规则">防火墙背后的秘密：如何安全地“打破”规则
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-55-22.png"
width="690"
height="400"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.haskellforall.com/2024/08/firewall-rules-not-as-secure-as-you.html" target="_blank" rel="noopener"
>《防火墙可能没你想的那么安全》&lt;/a>，一篇非常有趣且实用的科技文章，可能会颠覆你对网络安全的一些基本看法。&lt;/p>
&lt;p>作者向我们展示了如何在严格的企业防火墙下，依然能够安全地进行网络通信。&lt;/p>
&lt;p>文中展示了一些技术，表明“如果同一个人或组织控制了连接的两端，那么通常任何防火墙规则都可能被绕过。”&lt;/p>
&lt;blockquote>
&lt;p>“一个常见的技巧是在客户的数据中心内部主机（即内部主机）创建一个外部主机（即你的数据中心）作为代理。这是非常有效的，因为客户无法控制代理和上游主机之间的流量。”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>“SSH反向隧道允许内部机器（例如internal.example.com）通过外部机器（例如external.example.com）发起的出站TCP请求，保持TCP连接活跃，并监听外部机器上的EXTERNAL_PORT上的入站请求。”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>“corkscrew是一个非常简单的工具，它将SSH连接包装在HTTP连接中。这让我们可以将SSH流量伪装成HTTP流量（然后我们可以通过使用stunnel加密连接，进一步将其伪装成HTTPS流量）。”&lt;/p>
&lt;/blockquote>
&lt;p>这意味着即使在严格的网络监控下，人们仍然有可能安全地传输数据。&lt;/p>
&lt;h3 id="一个无限画布教程">一个无限画布教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-55-34.png"
width="690"
height="429"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="386px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://infinitecanvas.cc/zh/guide/what-is-an-infinite-canvas" target="_blank" rel="noopener"
>一步步构建一个可用的无限画布&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>什么是无限画布？
infinitecanvas 对“无限”的描述如下：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>高扩展性。用户可以以非线形的形式自由组织内容结构。
缩放。模拟真实世界中的“放大”纵览全局和“缩小”观察细节。
直接操作。提供对于基础图形的直观编辑能力，包括移动、成组、修改样式等。
实时协作。
你一定见过甚至使用过各种包含无限画布的应用，infinitecanvas 上就展示了从设计工具到创意画板在内的众多案例，其中不乏一些知名产品包括 Figma、Modyfi、rnote、tldraw、excalidraw等等。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>作为一个前端，我对其中涉及到的渲染技术很感兴趣。尽管 tldraw、excalidraw 等普遍使用易用性更高的 Canvas2D / SVG 技术，但 JS 和 Rust 生态中也有很多编辑器、设计工具使用更底层的渲染技术对 2D 图形进行 GPU 加速，以获得更好的性能和体验：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>因此在这个教程中，我希望实现以下特性：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>使用 @antv/g-device-api 作为硬件抽象层，支持 WebGL1/2 和 WebGPU。
参考 mapbox 和 Figma，尝试使用 Tile-based 渲染。
使用 SDF 渲染圆、椭圆、矩形等。
GPU 加速的文本和贝塞尔曲线渲染。
使用 rough.js 支持手绘风格。
使用 CRDT 支持协同 Yjs。&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="摩根大通的-python-培训课程">摩根大通的 Python 培训课程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-55-46.png"
width="690"
height="477"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jpmorganchase/python-training" target="_blank" rel="noopener"
>python-training&lt;/a>，此 Python 培训面向摩根大通业务分析师和交易员，以及精选客户。&lt;/p>
&lt;p>本课程旨在介绍 Python 中的数值计算和数据可视化。&lt;/p>
&lt;p>它不是一门完整的计算机科学或编程课程，主要面对没有正式编程背景的人。 ​​​&lt;/p>
&lt;h3 id="手工爱好者技能树">手工爱好者技能树
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-55-55.png"
width="690"
height="448"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sjpiper145/MakerSkillTree" target="_blank" rel="noopener"
>MakerSkillTree&lt;/a>，一个包含制作者技能树和模板的存储库，供您制作自己的技能树。爱 DIY 的人可以收藏。&lt;/p>
&lt;p>里面的技能清单都可以打印到 A4 纸上进行随时翻阅。&lt;/p>
&lt;p>包括：汽车、钓鱼、盖房、锻造、铸造、音乐、摄影、缝纫等 20 种经典技能，以及科技技能、生活类技能各 20 种。&lt;/p>
&lt;p>把这些技能学完之后估计比 手工耿+李子柒 还厉害。&lt;/p>
&lt;h3 id="用小游戏练习高效使用-vim">用小游戏练习高效使用 vim
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-56-04.png"
width="690"
height="315"
loading="lazy"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="525px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://vim-racer.com/" target="_blank" rel="noopener"
>vim-racer&lt;/a>，这个网站教你快速地在 VIM 中进行跳转。&lt;/p>
&lt;p>网站提供了一个小游戏，模拟了 VIM 的编辑环境，给出了若干个需要移动光标到那儿的目标。&lt;/p>
&lt;p>你的任务就是快速定位光标过去，随便用什么方法。&lt;/p>
&lt;p>结束后会告你你的得分，以及别人高手的得分。&lt;/p>
&lt;p>可以在游戏之后查看网站给出的小 TIPS，练习更优雅快速的跳转方式。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="玩是一种十分罕见的心理状态">“玩”是一种十分罕见的心理状态
&lt;/h3>&lt;p>来自微博：&lt;a class="link" href="https://weibo.com/1973422271/OvdPqcffQ" target="_blank" rel="noopener"
>@赵丹赵丹喵&lt;/a>&lt;/p>
&lt;p>从脑神经科学的角度看，“玩”是一种极其精细、罕见的心理状态，甚至很脆弱。任何一点竞争的动机或者情绪，都会压制住“玩”的感觉。&lt;/p>
&lt;p>英文原文是，Neurologically speaking, play is a very fragile state. Any competing motivation or emotion will suppress play.&lt;/p>
&lt;p>这个「玩」的状态，其实也意味着创造力、高能量、热爱、快乐等等一系列的心理状态。所谓的单纯享受过程而不是追逐结果，在「做事」的时候因为「内心享受」收获回报。&lt;/p>
&lt;p>热爱驱动而不是恐惧驱动，过程驱动而不是结果驱动，无限游戏而不是有限游戏，这个原理我已经懂了好几年了，可在做事，在写作，在创业的时候，一次又一次丢掉过程只问结果。今天听播客这句话直接击穿我，因为这个「纯粹的玩」的状态，从大脑的生理构成上来看，就是极其难以达到的。&lt;/p>
&lt;p>「玩」的对立面就是「竞争心」。竞争心意味着追逐结果，想要赢而害怕输，追逐好而害怕坏，二元对立，好坏分离。这个竞争心，心理学里面叫“小我”，佛学里面叫“我执”。执心一起，贪心一生，纯粹的玩的状态就不复存在了。人就紧绷了，咬牙切齿了，患得患失了，不松弛不快乐不自洽了。&lt;/p>
&lt;p>怎么能让自己时时刻刻都在「玩」呢？觉察，觉察，觉察，觉察身体，觉察心，觉察脑，觉察情绪和念头。observe yourself, only then you can be free.&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 097 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/</link><pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-17-48.png" alt="Featured image of post 机器文摘 第 097 期" />&lt;h1 id="机器文摘-第-097-期">机器文摘 第 097 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="五万吨液压机的故事">五万吨液压机的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-17-39.png"
width="677"
height="645"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="251px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.construction-physics.com/p/how-to-build-a-50000-ton-forging" target="_blank" rel="noopener"
>《怎样建造 50000 吨的锻造液压机》&lt;/a>，此文看似介绍液压机的建造技术，实则回顾了大型锻造液压机的发展历史，以及引申分析了一些军事技术惠及民用的模式。&lt;/p>
&lt;p>大型锻造液压机计划最初来自于美国，在上世纪 50 年代，出于对生产轻量化、高度集成的战斗机零件的需求，他们设计并建造了两台 50000 吨级的液压机。&lt;/p>
&lt;p>虽然建造时间很长（大概花了 4 年），并且为此突破了很多技术层面的困难，很多零件的供应都是专门生产，甚至连零件的运输都专门设计了车辆。&lt;/p>
&lt;p>但带来的好处是显而易见的，之前需要用铆钉连接的数百个飞机零件，现在只需要液压机挤压生产成为四五个大件即可，可靠性、空气动力等性能也得到了大幅提升。&lt;/p>
&lt;p>这种冲压锻造技术后来还下放到民用领域，其生产的产品给普通人的生活带来了巨大方便。&lt;/p>
&lt;p>这两台机器最终服役到 2018 年，被新建造的 60000 吨级机器所取代。&lt;/p>
&lt;p>文末提到了一个有意思的点，那就是，目前世界上最大的液压机在中国（80000吨级），而且国外用的很多液压机的零部件和生产厂商也多为中国企业。&lt;/p>
&lt;p>最后作者不得不感慨：&lt;/p>
&lt;blockquote>
&lt;p>技术进步意味着建造以前从未建造过的东西，这通常意味着推动制造技术的界限向前发展。如果做不到这一点，你就有可能被这样做的人超越。&lt;/p>
&lt;/blockquote>
&lt;h3 id="超级任天堂图形系统详解">超级任天堂图形系统详解
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-17-48.png"
width="690"
height="507"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>超级任天堂（SFC），在北美又称 SNES，是任天堂公司在上世纪 90 年代发售的游戏机，是经典红白机（FC）的升级产品。&lt;/p>
&lt;p>对比 FC，该机拥有强大的图形处理能力以及 16 位中央处理器，使得游戏体验得到了极大提升。&lt;/p>
&lt;p>这里有一组文章，讲解了&lt;a class="link" href="https://fabiensanglard.net/snes_video/" target="_blank" rel="noopener"
>超级任天堂游戏机的图形系统是如何工作的&lt;/a>。&lt;/p>
&lt;p>文章深入探讨了SNES图形系统的技术细节，包括CRT的工作原理、SNES如何适应当时的电视标准，以及它如何创新地处理分辨率和信号输出。&lt;/p>
&lt;p>作者对 90 年代基于 CRT 的显示技术了如指掌，还顺便解释了为什么美国 NTSC 制式的电视机刷新率为 59.94 这个奇怪的不整的数字（当时黑白转彩色时为了兼容以及偷懒选了一个毕竟奇葩的技术标准）。&lt;/p>
&lt;h3 id="潜艇触屏交互界面导致美国海军损失过亿">潜艇触屏交互界面导致美国海军损失过亿
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-18-00.png"
width="690"
height="481"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="344px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://adrian3.com/blog/2019/2019-09-28-The-US-Navys-100-million-dollar-checkbox.php" target="_blank" rel="noopener"
>《The U.S. Navy&amp;rsquo;s $100M checkbox (2019)》&lt;/a>，这是一个悲惨的故事，看完之后你会更加怀念物理按键时代。&lt;/p>
&lt;p>同时更加痛恨现在由触摸屏构建的各种交互环境（包括各种汽车主机厂商令人讨厌的触摸屏交互）。&lt;/p>
&lt;p>文章写于 2019 年，故事发生在 2017 年。&lt;/p>
&lt;p>一艘美国海军驱逐舰与一艘利比亚油轮相撞，导致十名水手死亡，损失上亿美元。&lt;/p>
&lt;p>而造成这一惨剧的罪魁祸首是触摸屏上的一个复选框（checkbox）。&lt;/p>
&lt;p>虽然最终进行这种 UI 设计的设计师躲过了惩罚，但是本文作者不依不饶。&lt;/p>
&lt;p>写了此文对整个事件进行详细分析，以说明糟糕的交互设计是如何一步一步酿成惨剧的。&lt;/p>
&lt;h3 id="上世纪-80-年代的纯黑客测试">上世纪 80 年代的“纯”黑客测试
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-18-20.png"
width="611"
height="700"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="209px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.armory.com/tests/hacker.html" target="_blank" rel="noopener"
>hacker-checklist&lt;/a>，这里有一份测试问卷，编写于上世纪 80 年代。&lt;/p>
&lt;p>里面的问题展示了当时作为一个计算机黑客所应该具备的一些特质。&lt;/p>
&lt;p>问卷展示了技术工作者的某种古典幽默，读起来让人忍俊不禁。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="开源版的-figma">开源版的 Figma
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-19-53.png"
width="416"
height="231"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/penpot/penpot" target="_blank" rel="noopener"
>Penpot&lt;/a>，是第一个开源的设计工具，用于设计和代码协作。设计师可以创建精美的设计、互动原型和大规模的设计系统，而开发者则能享受即用型代码，使他们的工作流程变得轻松快捷，且无需为交接烦恼。&lt;/p>
&lt;h3 id="在浏览器运行的语音识别工具">在浏览器运行的语音识别工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-20-38.png"
width="1236"
height="658"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/supabase-community/babelfish.ai" target="_blank" rel="noopener"
>Babelfish.ai&lt;/a>，一款基于AI的实时转录和翻译工具，可在浏览器中本地运行&lt;/p>
&lt;p>基于 Huggingface Transformer.js 、Supabase Realtime 构建的，可以实时识别语音并将其转换为目标语言文本&lt;/p>
&lt;p>适用于实时会议翻译、在线教育、多语言聊天等场景&lt;/p>
&lt;p>特点:&lt;/p>
&lt;ol>
&lt;li>实时语音转录: 利用OpenAI Whisper模型，在浏览器中实现实时语音转录&lt;/li>
&lt;li>实时翻译: 使用Meta的NLLB-200模型，将转录后的文本实时翻译成 200 种语言&lt;/li>
&lt;/ol>
&lt;h3 id="在线合成器">在线合成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-20-54.png"
width="690"
height="452"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://cardinal.kx.studio/live" target="_blank" rel="noopener"
>Cardinal&lt;/a>是一个免费且开源的虚拟模块化合成器插件， 提供 AudioUnit/CLAP/LV2/VST2/VST3 插件格式，并作为 FreeBSD、Linux、macOS、Windows 和 Web 的独立应用程序使用。&lt;/p>
&lt;p>可以在线体验，喜欢模块化复古合成器的可以试试。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 096 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/</link><pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-22-40.png" alt="Featured image of post 机器文摘 第 096 期" />&lt;h1 id="机器文摘-第-096-期">机器文摘 第 096 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="激光麦克风">激光麦克风
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-22-40.png"
width="690"
height="313"
loading="lazy"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="529px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.wired.com/story/infrared-laser-microphone-keystroke-surveillance/" target="_blank" rel="noopener"
>《用激光窃听键盘输入》&lt;/a>这篇文章讲述了一个利用红外激光技术进行窃听的故事。&lt;/p>
&lt;p>在拉斯维加斯举行的 Defcon 安全会议上，著名黑客 Samy Kamkar 展示了他自己的DIY激光监视技术。他能够将一种肉眼看不见的红外激光对准远处的笔记本电脑，通过窗户检测计算机的振动，重建几乎每一个输入的字符。这种技术利用了敲击不同键盘键产生的微妙声学特性，即使没有看到键盘，只要黑客能够看到目标笔记本电脑上的任何相对反射的部分，也能工作。&lt;/p>
&lt;p>实现这种神奇窃听效果的关键技术有三个：&lt;/p>
&lt;ol>
&lt;li>基于激光的音频输入：发射每秒频闪 40K 赫兹的激光光源，通过镜头接收反射光，使用传感器以 400K 赫兹进行采样，以便进行光电转换和频率分析。&lt;/li>
&lt;li>使用 iZotopeRX 软件进行噪声处理以获取想要的音频信息。&lt;/li>
&lt;li>使用开源软件 Keytap3 （基于 AI 的听声识别键位）将音频识别为按键信息。&lt;/li>
&lt;/ol>
&lt;p>ps：作者说，由于苹果笔记本有个反光良好的镜面 LOGO，所以针对苹果笔记本的窃听效果最好。&lt;/p>
&lt;h3 id="用-c-语言在-40-年前的老系统上进行编程是什么体验">用 C 语言在 40 年前的老系统上进行编程是什么体验？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-22-53.png"
width="557"
height="372"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://kevinboone.me/cpm-c.html" target="_blank" rel="noopener"
>《回到 CP/M 的 C 编程》&lt;/a>讲述了作者在一台真正的（物理上）CP/M 机器进行编程的经历。&lt;/p>
&lt;p>C/PM ：（&amp;ldquo;Control Program for Microcomputers&amp;quot;的缩写），即“微机控制程序”。它是1970年代为 Intel 8080 微处理器开发的一个操作系统。&lt;/p>
&lt;p>C/PM是早期微计算机操作系统的先驱之一，它为后来的操作系统，包括MS-DOS（微软磁盘操作系统），奠定了基础。&lt;/p>
&lt;p>文中介绍了在不依赖现代环境的前提下，完全基于老式系统进行编程是何种体验：&lt;/p>
&lt;ol>
&lt;li>古老的编译器需要用户手动执行三次命令才能完成程序生成，包括编译 C 代码到 ASM 汇编、编译汇编、链接可执行程序；&lt;/li>
&lt;li>早期的 ANSI C 语法，函数及变量必须在块定义之前声明，否则无法编译（也就是说 &lt;code>for(int i;;;)&lt;/code> 这种写法不行，必须得把 &lt;code>int i&lt;/code> 这个定义提到前面去）；&lt;/li>
&lt;li>int 类型和指针为 16 位，但 float 为 32 位，double 为 64 位（但要谨慎使用因为没有指令加速，计算非常慢）；&lt;/li>
&lt;li>极简的标准库、原始的内存管理等等。&lt;/li>
&lt;/ol>
&lt;p>看来当个 80 年代的程序员真的不容易。&lt;/p>
&lt;h3 id="嵌入在字体里的语法高亮">嵌入在字体里的语法高亮
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-23-36.png"
width="690"
height="348"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;p>用技术挑战可能性的故事最让人欣赏。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://blog.glyphdrawing.club/font-with-built-in-syntax-highlighting/" target="_blank" rel="noopener"
>《集成代码高亮的字体》&lt;/a>的作者估计有强迫症吧。&lt;/p>
&lt;p>为了给自己的博客增加手写 HTML、CSS 的能力（想要代码语法高亮，但是又不想引入 JS 库），不惜做了一个自带高亮效果的字体。&lt;/p>
&lt;p>实现原理：&lt;/p>
&lt;ol>
&lt;li>OpenType COLOR 表可以使得字体文件支持颜色。&lt;/li>
&lt;li>OpenType 上下文替换技术可以让字体根据识别到的模式自动返回对应颜色。&lt;/li>
&lt;li>给 JS、HTML、CSS 等语言的关键字创建大量的“上下文替换规则”。&lt;/li>
&lt;li>在网页中加载该字体使用，即使输入的是纯文本，也会带有颜色高亮效果了。&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="读写-json-csv-等文本数据的工具">读写 json csv 等文本数据的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-24-01.png"
width="602"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="370px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/TomWright/dasel" target="_blank" rel="noopener"
>dasel&lt;/a>，一个可以对多种单文本数据文件读写的命令行工具。&lt;/p>
&lt;p>支持 JSON, TOML, YAML, XML 和 CSV，而且可以方便地在这些格式之间进行转换。&lt;/p>
&lt;p>用于需要在命令行批量对这些文本数据进行增删改查。 ​​​&lt;/p>
&lt;h3 id="基于大模型的开源-ocr-工具">基于大模型的开源 OCR 工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-24-16.png"
width="690"
height="389"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Dicklesworthstone/llm_aided_ocr" target="_blank" rel="noopener"
>LLM-Aided OCR&lt;/a>，一个基于 LLM 的 OCR 扫描 PDF 开源工具 。&lt;/p>
&lt;p>旨在通过利用多模态大语言模型（LLM）将原始的 OCR 扫描 PDF 文本转换成高准确度、格式正确且易于阅读的 Markdown 文档。&lt;/p>
&lt;p>实现思路：首先将 PDF 文件转图像，进行 OCR 扫描处理提取文本，再利用本地 LLM 或 API（如 OpenAI、Anthropic）纠正 OCR 错误，最后转换成高准确度、高质量的 Markdown 文本。&lt;/p>
&lt;h3 id="imgui-设计器">ImGUI 设计器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-24-26.png"
width="690"
height="471"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/tpecholt/imrad" target="_blank" rel="noopener"
>ImRAD&lt;/a>，可视化设计制作 ImGUI 界面的工具。&lt;/p>
&lt;h3 id="通过口令认证在两台计算机上安全地迁移文件">通过口令认证在两台计算机上安全地迁移文件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-24-47.png"
width="690"
height="382"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/magic-wormhole/magic-wormhole" target="_blank" rel="noopener"
>魔法虫洞&lt;/a>&lt;/p>
&lt;p>安全地将东西从一台计算机移动到另一台计算机。&lt;/p>
&lt;p>该软件包提供了一个库和一个名为 wormhole 的命令行工具，它可以将任意大小的文件和目录（或短文本）从一台计算机转移到另一台计算机。&lt;/p>
&lt;p>两端通过使用相同的“虫洞代码”来识别：通常，发送者机生成密码，然后接收端通过输入这个密码建立连接&lt;/p>
&lt;h3 id="另一个传输工具">另一个传输工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-25-01.png"
width="690"
height="676"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="244px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/LeastAuthority/destiny" target="_blank" rel="noopener"
>destiny&lt;/a>，
可以在非局域网下，任何平台或设备之间传输文件。上传者分享传输码就可以下载，点对点加密，没有中心服务器，不需要注册，开箱即用。&lt;/p>
&lt;h3 id="一行命令优化-windows-11-体验">一行命令优化 Windows 11 体验
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-25-19.png"
width="690"
height="177"
loading="lazy"
class="gallery-image"
data-flex-grow="389"
data-flex-basis="935px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Raphire/Win11Debloat" target="_blank" rel="noopener"
>Win11Debloat&lt;/a>，一个针对win11系统的优化脚本。&lt;/p>
&lt;p>可以用来移除 Windows 预装的应用程序，禁用遥测，从 Windows 搜索中移除 Bing，以及执行各种其他更改来清理并改善您的 Windows 体验。这个脚本适用于 Windows 10 和 Windows 11。 ​​​&lt;/p>
&lt;h3 id="用安卓手机当电脑麦克风">用安卓手机当电脑麦克风
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-25-28.png"
width="690"
height="513"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/gdzx/audiosource" target="_blank" rel="noopener"
>AudioSource&lt;/a>，你的电脑可能没有麦克风，需要的时候，又不想买一个麦克风，这时候就可以把你的 Android 当作麦克风来用。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 095 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/</link><pubDate>Tue, 13 Aug 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/2024-08-13-09-19-48.png" alt="Featured image of post 机器文摘 第 095 期" />&lt;h1 id="机器文摘-第-095-期">机器文摘 第 095 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="不懂-cpu-原理那就自己动手编程模拟一个">不懂 CPU 原理？那就自己动手编程模拟一个
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/2024-08-13-09-18-27.png"
width="688"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://djharper.dev/post/2019/05/21/i-dont-know-how-cpus-work-so-i-simulated-one-in-code/" target="_blank" rel="noopener"
>《我不知道 CPU 是怎么工作的，于是我写程序模拟了一个》&lt;/a>&lt;/p>
&lt;p>不懂 CPU 工作原理，看别人的解释视频和文章都不过瘾，干脆自己来吧，从底层模拟一个 CPU ，这下可以拿捏各种细节了。&lt;/p>
&lt;p>不过等一下，作者并非真的不理解，实际上，早在 2013 年他就动手写过一个任天堂 GameBoy 模拟器。&lt;/p>
&lt;p>只是作者认为当时的硬件肯定没有现在的计算机硬件这么攒劲，于是作者又犯了“绝不允许自己不知道引擎盖下的机器是如何工作的”综合征。&lt;/p>
&lt;p>而且，与一般的模拟器不同（只是暴露了兼容指令集），这次作者在代码层面真正模拟了硬件电路级别的 CPU，包括 ALU 算逻运算单元、中断电路等。&lt;/p>
&lt;p>文章记录了动手过程，包括一些踩坑花絮。&lt;/p>
&lt;h3 id="如何极快地构建任何东西">如何极快地构建任何东西
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/2024-08-13-09-18-38.png"
width="399"
height="341"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="280px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://learnhowtolearn.org/how-to-build-extremely-quickly/" target="_blank" rel="noopener"
>《如何极快地构建任何东西》&lt;/a>，这是一篇教你提高做事（尤其是创造性劳动）效率的文章。&lt;/p>
&lt;p>其核心理念只有一条：先完成，再完善。&lt;/p>
&lt;p>也就是不要陷入到细节里。&lt;/p>
&lt;p>你的构建进度条不是慢慢从左走到右，而是基于一个基础框架，反复迭代，以逐步增添细节的方式填满的。&lt;/p>
&lt;p>展开来说：&lt;/p>
&lt;ol>
&lt;li>做任何事情先做提纲（框架、地基，都一个意思）。&lt;/li>
&lt;li>扫描你的框架，做更细一级的补充，循环此过程。&lt;/li>
&lt;li>在完成核心功能之前不要关注细节。&lt;/li>
&lt;/ol>
&lt;p>作者在文中以写作和编程进行了举例，几乎手把手教你了。&lt;/p>
&lt;h3 id="ai-模型的量化是什么它跟常说的量化交易有关系吗">AI 模型的“量化”是什么，它跟常说的“量化交易”有关系吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/2024-08-13-09-19-00.png"
width="688"
height="439"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;p>答案是：卡巴斯基和巴基斯坦的关系。&lt;/p>
&lt;p>AI 模型的量化（Quantization）是一种在机器学习和人工智能领域中用于优化大型模型的技术。&lt;/p>
&lt;p>这篇文章&lt;a class="link" href="%e7%bd%91%e9%a1%b5%e9%93%be%e6%8e%a5" >《A Visual Guide to Quantization》&lt;/a>解释了量化的基本概念和实现原理。&lt;/p>
&lt;p>什么是量化？
量化是一种数据压缩技术，它用于减少模型参数所需的存储空间和计算资源。在机器学习模型中，参数通常以浮点数（一种可以表示小数的数值类型）的形式存储，这需要较多的内存和计算能力。量化通过将这些浮点数转换为更简单的数值格式（如整数），从而降低模型对计算资源的需求。&lt;/p>
&lt;p>为什么要量化？&lt;/p>
&lt;ol>
&lt;li>硬件限制：大型语言模型（LLMs）通常包含数十亿参数，它们在消费级硬件上运行时会受到内存和处理能力的限制。&lt;/li>
&lt;li>效率提升：量化可以显著减少模型的大小，使其能够在更小、更慢的设备上运行，比如智能手机或嵌入式设备。&lt;/li>
&lt;li>成本降低：减少对高性能硬件的依赖可以降低部署和运行模型的成本。&lt;/li>
&lt;li>实时应用：在需要快速响应的应用场景中，量化可以加快模型的推理速度。&lt;/li>
&lt;/ol>
&lt;p>量化的技术依据：&lt;/p>
&lt;ol>
&lt;li>数值表示：在计算机中，数值通常以浮点数的形式表示，包括符号位、指数位和尾数位。量化则是将这些浮点数转换为更简单的格式，比如8位整数（INT8）。&lt;/li>
&lt;li>精度与范围：量化会牺牲一定的数值精度以换取更小的数值范围。例如，使用INT8量化时，数值的范围和精度都会比32位浮点数（FP32）小。&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="webgpu-在线教程">WebGPU 在线教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/2024-08-13-09-19-13.png"
width="289"
height="398"
loading="lazy"
class="gallery-image"
data-flex-grow="72"
data-flex-basis="174px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://shi-yan.github.io/webgpuunleashed/" target="_blank" rel="noopener"
>WebGPU Unleashed&lt;/a>，一本在线交互式电子书。&lt;/p>
&lt;p>将教你使用 WebGPU 在 JavaScript 中进行图形编程，带你做好每一个练习，可在线运行。&lt;/p>
&lt;h3 id="70-岁奶奶编写的游戏">70 岁奶奶编写的游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/2024-08-13-09-19-23.png"
width="506"
height="403"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://news.ycombinator.com/item?id=41217109" target="_blank" rel="noopener"
>HN &lt;/a>上的一位网友放出了一个链接，是他 &lt;a class="link" href="https://grandmasword.com/" target="_blank" rel="noopener"
>70岁的奶奶刚学会编程做的文字游戏&lt;/a>。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 094 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/</link><pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-43-19.png" alt="Featured image of post 机器文摘 第 094 期" />&lt;h1 id="机器文摘-第-094-期">机器文摘 第 094 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="用-c-重写一个-2d-游戏引擎">用 C 重写一个 2D 游戏引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-40-27.png"
width="690"
height="458"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://phoboslab.org/log/2024/08/high_impact" target="_blank" rel="noopener"
>high_impact&lt;/a>，是一个用 C 写的 2D 动作游戏引擎，很简洁但是很强大。&lt;/p>
&lt;p>作者在这篇文章里记述了这个引擎的诞生历程。&lt;/p>
&lt;p>与其他游戏引擎不同的是，这个引擎是先有了 JavaScript 版本，然后才做的 C 语言版本。&lt;/p>
&lt;p>作者在文中不但回顾了 JavaScript 版本的开发始末，还详细讲解了 C 语言版本的实现思路，包括：渲染、碰撞、粒子系统等。&lt;/p>
&lt;p>我十分认同作者的一句话：“我喜欢的游戏和技术都有一个特点，那就是他们很容易上手，但是不容易精通。”（作者在文中指 C 语言）&lt;/p>
&lt;h3 id="终端操作高级技巧">终端操作高级技巧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-40-43.png"
width="459"
height="313"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;p>经常在 Linux 进行服务端编程或者运维操作的人员，离不了跟终端、命令行窗口打交道。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.bitsand.cloud/posts/terminal-tips/" target="_blank" rel="noopener"
>《终端操作高级技巧》&lt;/a>整理了若干条非常棒的操作技巧（秘籍），可以极大提升你的工作体验。&lt;/p>
&lt;p>摘录部分如下：&lt;/p>
&lt;ol>
&lt;li>使用命令行编辑：输错长串的大段命令不要着急，无需重新输入，Ctrl+E 可以进入编辑界面，直接编辑你的大段命令。&lt;/li>
&lt;li>通过 tmux 脚本控制终端行为（可以完成一些自动化交互操作）。&lt;/li>
&lt;li>fzf 模糊查找整合到命令行历史查找中，Ctrl + R 可以快速搜寻曾经执行过的命令。&lt;/li>
&lt;/ol>
&lt;h3 id="计算机逆向工程大全">计算机逆向工程大全
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-41-03.png"
width="597"
height="600"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;p>提到“逆向工程”大家首先想到的就是“破解”，事实上也是这样。&lt;/p>
&lt;p>不过除了搞越狱、破解之外，学习逆向工程也是了解计算机底层原理的绝佳途径。&lt;/p>
&lt;p>&lt;a class="link" href="https://0xinfection.github.io/reversing" target="_blank" rel="noopener"
>《逆向工程》&lt;/a>这本电子书整理了一份十分详尽的学习手册。&lt;/p>
&lt;p>内容涵盖了 x86、arm 等主流平台关于如何进行“逆向”的全部工作指南。&lt;/p>
&lt;p>手册不仅介绍基础的原理知识，还整理了关于环境安装、配套的工具使用等方面的信息，适合边学边练&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="纯-python-写-web-界面">纯 Python 写 Web 界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-41-28.png"
width="690"
height="254"
loading="lazy"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="651px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://fastht.ml/" target="_blank" rel="noopener"
>FastHTML&lt;/a>，一个好玩的项目，用纯 Python 开发现代网页应用。&lt;/p>
&lt;p>不需要了解前端知识，只需能写 Python 代码，即可做出美观易用的网页程序。 ​​​&lt;/p>
&lt;h3 id="一个实验性质的-js-引擎">一个实验性质的 Js 引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-41-37.png"
width="567"
height="514"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="264px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://porffor.dev/" target="_blank" rel="noopener"
>porffor&lt;/a>，一个从零实现的 JS 解释器。&lt;/p>
&lt;p>Porffor 是一个独特的 JS 引擎/编译器/运行时，将 JS 代码提前编译为 WebAssembly 或原生代码。&lt;/p>
&lt;p>目前该项目在 Github 开源，仅用于研究用途。&lt;/p>
&lt;p>不过，从项目主页给出的测试数据来看，目前还不具备实用性，仅通过了 35% 的语法标准测试。&lt;/p>
&lt;h3 id="在容器里运行-macos">在容器里运行 MacOS
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-41-46.png"
width="690"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sickcodes/Docker-OSX" target="_blank" rel="noopener"
>Docker-OSX&lt;/a>，这个开源项目可以让你在 docker 里运行 MacOS 系统。&lt;/p>
&lt;p>通过强大的虚拟机模拟器 QEMU 实现。 ​​​&lt;/p>
&lt;h3 id="科研写作专用编辑器">科研写作专用编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-41-56.png"
width="690"
height="743"
loading="lazy"
class="gallery-image"
data-flex-grow="92"
data-flex-basis="222px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.stempad.io/editor" target="_blank" rel="noopener"
>stempad&lt;/a>，一个专门用于科研写作的在线工具，浏览器访问直接使用，所有数据保存在本地。&lt;/p>
&lt;p>特色是内嵌可视化公式编辑器以及公式图形绘制功能。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 093 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/</link><pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-23-44.png" alt="Featured image of post 机器文摘 第 093 期" />&lt;h1 id="机器文摘-第-093-期">机器文摘 第 093 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="可以挂在钥匙链上的-wii-游戏机">可以挂在钥匙链上的 Wii 游戏机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-23-34.png"
width="690"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://bitbuilt.net/forums/index.php?threads/kawaii.6474/" target="_blank" rel="noopener"
>Kawaii&lt;/a>（意为“可爱”）是一个功能齐全的 Wii 游戏机，但是体积比任天堂发售的 Wii 游戏机缩小了数倍，还不到一个巴掌大小。&lt;/p>
&lt;p>方案思路来自于一个叫做 GC Nano 的项目，不过做的更小，设计了更好的外壳和扩展。&lt;/p>
&lt;p>主要手段，就是切割原有 Wii 游戏机的电路板，保留核心部件，重新设计外壳和扩展接口。&lt;/p>
&lt;p>规格包括：&lt;/p>
&lt;ol>
&lt;li>60x60x16mm 的 CNC 铝制外壳（被动冷却），带有激光蚀刻艺术作品。&lt;/li>
&lt;li>类似 MagSafe 的 12 针磁性 pogo pin 连接器。&lt;/li>
&lt;li>带有 USB-C 电源输入、x4 GCC 控制器端口、复合/分量视频输出和立体声音频输出的底座。&lt;/li>
&lt;li>钥匙链环。&lt;/li>
&lt;/ol>
&lt;p>像 GC Nano 和 Short Stack 一样，Kawaii 完成后将完全开源。&lt;/p>
&lt;h3 id="css-的-box-shadows-还能干啥">CSS 的 box-shadows 还能干啥
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-23-44.png"
width="690"
height="418"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dgerrells.com/blog/how-not-to-use-box-shadows" target="_blank" rel="noopener"
>box-shadows&lt;/a>，一篇讲解前端技术的精品文章。&lt;/p>
&lt;p>探讨了如何以创造性的方式使用 CSS 的 box-shadows，看看使用 box-shadows 都是有哪些限制，以及可以整出什么花活儿。&lt;/p>
&lt;p>作者前端技术功底深厚，文中提供了多个有趣的效果展示 Demo。&lt;/p>
&lt;p>除了 CSS 相关的技巧外，作者对于 JavaScript 代码的相关优化也颇有心得。&lt;/p>
&lt;p>亮点如下：&lt;/p>
&lt;ol>
&lt;li>层叠多个 box shadows 可以创建深度视觉效果（3D 渲染）；&lt;/li>
&lt;li>使用 box shadows 实现光线追踪渲染；&lt;/li>
&lt;li>在线交互体验作者编写的 Demo；&lt;/li>
&lt;/ol>
&lt;h3 id="设计就是抄袭">设计就是抄袭
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-24-03.png"
width="690"
height="393"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;p>设计工作中，原创为主？还是临摹、抄袭、复制、山寨为主？&lt;/p>
&lt;p>不同的人有不同的看法。&lt;/p>
&lt;p>一些设计师认为保持作品的“原创性”是必须的，否则跟偷窃有何分别？&lt;/p>
&lt;p>一些人则认为大量的“复制”、“山寨”才是设计工作的主流，是这些复制品让市场繁荣，让作品得以传承，更多人受益。&lt;/p>
&lt;p>当然也有一些人格分裂者，复制别人的时候是“致敬”，但绝不允许别人复制自己的（乔布斯：没错！正是在下）。&lt;/p>
&lt;p>&lt;a class="link" href="https://matthewstrom.com/writing/copying/" target="_blank" rel="noopener"
>《设计工作的方式是复制》&lt;/a>一文对抄袭和设计的关系进行了探讨。&lt;/p>
&lt;p>作者的观点是倾向于鼓励复制的，因为作者在开头就声明了本文可以随意转载、下载、重置、复制并发布。&lt;/p>
&lt;p>文中主要讲了几个工业设计（主要是消费电子产品）历史上的有趣故事，借此讨论了“复制”这一看似不合理的行为是怎样成为设计的主要工作方式的。&lt;/p>
&lt;p>有几个有趣的点：&lt;/p>
&lt;ol>
&lt;li>乔布斯当年从施乐实验室偷走了图形界面的创意，然后转头起诉微软抄袭苹果电脑的界面，回过味儿的施乐公司开始起诉苹果。这事儿后来比尔盖茨回忆说，就好像自己看上了邻居家里的电视机，进屋去偷的时候发现乔布斯已经把它搬走了。&lt;/li>
&lt;li>苹果公司后来甚至起诉三星公司，说自己拥有“圆角矩形”专利，不允许三星生产圆角的平板电脑，法院驳回了，但是三星也赔了不少钱。&lt;/li>
&lt;li>最牛的游戏程序员，约翰卡马克成功在 PC 上复刻了任天堂的超级马里奥3，首次实现了 PC 电脑上的卷轴动画游戏，后来老板希望申请专利，但是卡马克拒绝说：你要敢申请，我就敢辞职。（卡马克在我心目中是世界最牛程序员之一，另一个是 Linus）&lt;/li>
&lt;/ol>
&lt;h3 id="业余无线电文化美国的历史">业余无线电文化（美国）的历史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-24-16.png"
width="690"
height="409"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://thereader.mitpress.mit.edu/the-rich-history-of-ham-radio-culture/" target="_blank" rel="noopener"
>《业余无线电文化的丰富历史》&lt;/a>由历史学家克里斯滕·哈林（Kristen Haring）撰写，深入探讨了业余无线电爱好者（通常称为“火腿”）的世界。&lt;/p>
&lt;p>文章描绘了业余无线电文化（美国）的形成过程以及它的丰富多彩。&lt;/p>
&lt;p>一些有趣的点：&lt;/p>
&lt;ol>
&lt;li>火腿们通过摩尔斯电码展示他们的技术身份，他们对这种编码的热爱源于FCC许可考试中对编码技能的重视，以及他们对如何将语言转化为电码的欣赏。电码操作者能够通过电码的“触感”识别彼此，这种“触感”几乎和指纹一样独特。&lt;/li>
&lt;li>一些火腿通过摩尔斯电码在公共场合进行秘密交流。例如，一个火腿描述了他如何在约会时与兄弟通过摩尔斯电码讨论他们的约会对象，而对方却浑然不觉。&lt;/li>
&lt;li>美国无线电中继联盟（ARRL）发布的“业余者的准则”强调了火腿应具备的特质，如绅士风度、忠诚、进步、友好、平衡和爱国。这些准则不仅为火腿们提供了行为模范，还通过大众媒体的广泛传播，成为公众对火腿形象的一种认知。&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="可以像架构图那样组织编辑窗口的编辑器">可以像架构图那样组织编辑窗口的编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-24-25.png"
width="690"
height="488"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://haystackeditor.com/" target="_blank" rel="noopener"
>haystackeditor&lt;/a>，一个很有意思的编辑器，可以在一个无限大的画布上摊开你要编辑的多个文件。&lt;/p>
&lt;p>比起用分割窗口、TAB页来管理多个打开的文件，有一个很大的优势，就可以按照你的代码调用关系来摆放编辑窗口的大小和位置。&lt;/p>
&lt;p>各个代码源文件的关系一目了然。&lt;/p>
&lt;h3 id="wgpu-学习教程">wgpu 学习教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-24-36.png"
width="231"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="49"
data-flex-basis="119px"
>&lt;/p>
&lt;p>WebGPU 是由 W3C GPU for the Web 社区组所发布的规范，目标是允许网页代码以高性能且安全可靠的方式访问 GPU 功能。它通过借鉴 Vulkan API，并将其转换为宿主硬件上使用的各式 API（如 DirectX、Metal、Vulkan）来实现这一目标。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/gfx-rs/wgpu" target="_blank" rel="noopener"
>wgpu&lt;/a> 是基于 WebGPU API 规范的、跨平台的、安全的、纯 Rust 图形 API。它是 Firefox、Servo 和 Deno 中 WebGPU 整合的核心。&lt;/p>
&lt;p>wgpu 不仅可以在 Web 环境运行，还可以在 macOS / iOS、Android、Window 和 Linux 等系统上原生运行。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sotrh/learn-wgpu" target="_blank" rel="noopener"
>learn-wgpu&lt;/a>是一套针对 wgpu 开发的教程，包括入门和进阶部分，热心网友翻译的 &lt;a class="link" href="https://jinleili.github.io/learn-wgpu-zh/" target="_blank" rel="noopener"
>learn-wgpu 中文版&lt;/a>还增加了集成与调试的章节。&lt;/p>
&lt;h3 id="学习计算机知识的实体卡牌游戏">学习计算机知识的实体卡牌游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-24-46.png"
width="471"
height="377"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="299px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://punkx.org/unix-pipe-game/" target="_blank" rel="noopener"
>card-game&lt;/a>，这个网站提供了一些可以自行下载打印的游戏卡牌，都是与计算机基础知识相关的桌游。&lt;/p>
&lt;p>可以让父母跟孩子一起通过做游戏学习知识，寓教于乐，而且是桌游的感觉。&lt;/p>
&lt;p>可以学习的知识包括：UNIX 管道、C 语言指针与数组、Python 编程等等。&lt;/p>
&lt;h3 id="从网页中偷按钮的设计">从网页中“偷”按钮的设计
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-24-59.png"
width="690"
height="488"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://anatolyzenkov.com/stolen-buttons/button-stealer" target="_blank" rel="noopener"
>Button Stealer&lt;/a>，这个插件只干一件事，从你浏览的每一个网页里偷取按钮。&lt;/p>
&lt;p>日积月累你会发现它积攒了一堆各式各样的按钮。&lt;/p>
&lt;p>作者说了，这个功能没啥用，但是好像挺有趣。&lt;/p>
&lt;p>插件不会收集用户信息，所有数据都保存在本地。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 092 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-48-15.png" alt="Featured image of post 机器文摘 第 092 期" />&lt;h1 id="机器文摘-第-092-期">机器文摘 第 092 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="苏联计算器简史">苏联计算器简史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-47-59.png"
width="603"
height="522"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="277px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://kimi.moonshot.cn/chat/cqat74ucp7fcufcoehug" target="_blank" rel="noopener"
>苏联计算器简史&lt;/a>&lt;/p>
&lt;p>这篇文章讲述了苏联计算器的发展历程，从最初的独特操作语言到后来的现代化设计。&lt;/p>
&lt;p>在上世纪 70 年代初，计算器的交互操作才开始变得通用，而早期的计算器，比如列宁格勒“Svetlana”工厂生产的C3-07，每个型号都有自己特定的操作程序。&lt;/p>
&lt;p>B3-18 是苏联第一款工程计算器，它能够进行更复杂的数学运算，比如三角函数和对数运算，这在当时非常先进。&lt;/p>
&lt;p>文章还提到了苏联计算器的一些有趣特点，某些型号的计算器在显示数字时会用到一些特殊的技巧。&lt;/p>
&lt;p>比如在C3-07型号上，零的高度只有正常数字的一半，以帮助用户更容易地找到最重要的数字。&lt;/p>
&lt;p>随着技术的发展，苏联的计算器也开始使用集成电路和更先进的能源技术，比如太阳能和液晶显示，这使得计算器更加节能和便携。&lt;/p>
&lt;p>B3-34 是苏联最受欢迎的计算器之一，它不仅功能强大，而且具有一些未公开的特殊功能，在特定条件下，一些按键会有不同寻常的作用。&lt;/p>
&lt;p>通过本文，可以了解苏联工程师在计算器设计上的创新和努力。&lt;/p>
&lt;p>即使在技术和资源受限的情况下，工程师们也能够创造出功能丰富且有趣的计算器。&lt;/p>
&lt;h3 id="box-shadows-都是能干啥">box-shadows 都是能干啥
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-48-15.png"
width="690"
height="418"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dgerrells.com/blog/how-not-to-use-box-shadows" target="_blank" rel="noopener"
>box-shadows&lt;/a>，一篇讲解前端技术的精品文章。&lt;/p>
&lt;p>探讨了如何以创造性的方式使用 CSS 的 box-shadows，看看使用 box-shadows 都是有哪些限制，以及可以整出什么花活儿。&lt;/p>
&lt;p>作者前端技术功底深厚，文中提供了多个有趣的效果展示 Demo。&lt;/p>
&lt;p>除了 CSS 相关的技巧外，作者对于 JavaScript 代码的相关优化也颇有心得。&lt;/p>
&lt;p>亮点如下：&lt;/p>
&lt;ol>
&lt;li>层叠多个 box shadows 可以创建深度视觉效果（3D 渲染）；&lt;/li>
&lt;li>使用 box shadows 实现光线追踪渲染；&lt;/li>
&lt;li>在线交互体验作者编写的 Demo；&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="在-amd-显卡上跑-cuda-程序">在 AMD 显卡上跑 CUDA 程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-48-38.png"
width="690"
height="437"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>不用改一行代码，即可将你的 CUDA 程序在 AMD 显卡上运行。&lt;/p>
&lt;p>AI 时代，天下苦 Nvidia 久矣！&lt;/p>
&lt;p>大量的 AI 研究与计算都依赖基于 Nvidia 显卡的 CUDA 计算平台。&lt;/p>
&lt;p>而且 CUDA 这个计算平台是商业封闭平台，不能在别的底层硬件运行（比如 AMD 、Intel 等厂商的显卡）。&lt;/p>
&lt;p>所以 N 卡价格水涨船高，老黄股票赚了个盆满钵满。&lt;/p>
&lt;p>现在看到了希望，&lt;a class="link" href="https://docs.scale-lang.com/" target="_blank" rel="noopener"
>SCALE&lt;/a>，一个在 AMD 平台模拟 CUDA 的中间层。&lt;/p>
&lt;p>通过 GPGPU 编程将普通的 AMD GPU 也提供了一层 CUDA 接口。&lt;/p>
&lt;p>我不知道这种假装会不会带来侵权问题。&lt;/p>
&lt;p>不过可以先观望一下，这个项目目前已经做到了在部分 A 卡上运行一大批依赖 CUDA 的计算应用了。&lt;/p>
&lt;h3 id="电子书计算机是如何工作的">电子书《计算机是如何工作的》
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-49-04.png"
width="540"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.fastchip.net/howcomputerswork/p1.html" target="_blank" rel="noopener"
>《 How Computers Work ：Processor and Main Memory 》&lt;/a>&lt;/p>
&lt;p>本书从头开始讲cpu是怎么工作的，有 pdf 和 doc 两种格式供下载 。&lt;/p>
&lt;p>具体内容涵盖了计算机的基础知识、内存、指令、处理器、编程和其他相关话题。书中使用继电器而非晶体管来简化电路，适合没有技术背景的读者。&lt;/p>
&lt;h3 id="代码图片生成器">代码图片生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-49-16.png"
width="690"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>来自 Raycast 团队开源的一个 Web 工具箱 ray.so。&lt;/p>
&lt;p>提供了精美的代码图片生成器、图标制作器以及多种高颜值的 Raycast 主题等等。&lt;/p>
&lt;p>GitHub：https://github.com/raycast/ray-so&lt;/p>
&lt;h3 id="在线设计电路板并记录笔记">在线设计电路板并记录笔记
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-49-26.png"
width="690"
height="468"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://viscircuit.com/demo" target="_blank" rel="noopener"
>viscircuit&lt;/a>，这个网站可以让你在线以可视化的绘制电路板图纸，并使用 Markdown 格式做笔记。&lt;/p>
&lt;h3 id="在线获取图书信息的-api">在线获取图书信息的 API
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-49-34.png"
width="690"
height="415"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://book-db-v1.saltyleo.com/" target="_blank" rel="noopener"
>SaltyLeo 的图书元数据 API&lt;/a>&lt;/p>
&lt;p>这个网址提供了一个在线 API ，用于获取图书的元信息：作者、出版社、封面、简介等。&lt;/p>
&lt;p>可以用来刮削元数据补充自己的书库，也可以用作建站使用。 ​​​&lt;/p>
&lt;h3 id="基于-webassembly-技术的-linux-虚拟环境">基于 WebAssembly 技术的 Linux 虚拟环境
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-49-45.png"
width="651"
height="505"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="309px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://webvm.io/" target="_blank" rel="noopener"
>WebVM&lt;/a> 是一个无服务器的虚拟 Linux 环境，完全在 HTML5/WebAssembly 中客户端运行。&lt;/p>
&lt;p>WebVM 由 CheerpX 虚拟化引擎驱动，它使得在任何浏览器上安全、沙盒化的客户端执行 x86 二进制文件成为可能。&lt;/p>
&lt;p>CheerpX 包括一个 x86 到 WebAssembly 的即时编译器（JIT 编译器）、一个基于虚拟块的文件系统，以及一个 Linux 系统调用模拟器。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="复古游戏更划算">复古游戏更划算
&lt;/h3>&lt;p>电脑使用 7 年前的主流配置，玩 15 年前的主流游戏，是一个非常划算的事情。&lt;/p>
&lt;p>或者使用模拟器玩更复古的主机游戏，比如索尼的 PS2、世嘉的 Dreamcast、任天堂的 Wii 等，拿今年的行情来说，两千块钱捡破烂配置的 PC 就可以超高质量运行上述主机模拟。&lt;/p>
&lt;p>而且还有海量的经典大作，游戏画面质量比起现在虽然差点儿，但搁在当年是十分惊艳的（是要斥巨资才能享受到的）。&lt;/p>
&lt;p>当年的大作在游戏性方面比现在堆画面、吃配置、一个游戏动辄上百 G 资源的所谓 3A 体验要好很多，而且玩起来有一种超值的心理。&lt;/p>
&lt;p>引申来说，读书又何尝不是呢？经典的好书常看常新、历久弥新，影响深远。&lt;/p>
&lt;p>何必要追捧当前畅销的“佳作”，打个时间差，多看看过去经典作品，比一味追新，会更有收获。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 091 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/</link><pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-55-17.png" alt="Featured image of post 机器文摘 第 091 期" />&lt;h1 id="机器文摘-第-091-期">机器文摘 第 091 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="在终端命令行界面输入文本这事儿挺复杂">在终端命令行界面输入文本这事儿挺复杂
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-54-43.png"
width="690"
height="404"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/p>
&lt;p>如果工作中经常需要登陆远程主机 shell，使用终端的命令行界面进行文本输入是最频繁的事情了。&lt;/p>
&lt;p>然而很多时候这种文本输入的体验并不一致，很让人困惑。&lt;/p>
&lt;p>比如即便是资深的人士，也不敢保证在某个命令行窗口，键入 Ctrl+E 是将光标移动到行尾，Ctrl+A 移动到命令开头。&lt;/p>
&lt;p>这种行为是否有效，取决于各种因素，有的时候是 shell 的版本导致，或者对于快捷键绑定的方式不一样。&lt;/p>
&lt;p>或者干脆，如果你正好在某个古老命令的交互界面，那么你在键盘的方向键上按箭头以及按各种 Ctrl+ 快捷键，很可能得到这样的回显：“&lt;code>^[[D^[[D^[[C^[[C^&lt;/code>”。&lt;/p>
&lt;p>这一切是怎么回事？&lt;/p>
&lt;p>&lt;a class="link" href="https://jvns.ca/blog/2024/07/08/readline/" target="_blank" rel="noopener"
>《在终端中输入文本很复杂》&lt;/a>，这篇文章做了比较深入的分析。&lt;/p>
&lt;p>了解了背后的原理之后，就不会对终端的文本交互行为感到困惑了。&lt;/p>
&lt;p>简单概括：要想在命令行交互时获得比较一致的体验，取决于对一个叫做 readline 库的使用。&lt;/p>
&lt;p>所执行程序如果底层依赖 readline 做文本交互（事实上大部分是用这个库做的实现），即可保证一些基本的键盘响应一致：&lt;/p>
&lt;ol>
&lt;li>Ctrl+A 到行首；&lt;/li>
&lt;li>Ctrl+E 到行尾；&lt;/li>
&lt;li>Ctrl+U 删除当前行；&lt;/li>
&lt;li>Ctrl+W 向前删除一个词；&lt;/li>
&lt;li>Ctrl+左右箭头键：前后移动一个词；&lt;/li>
&lt;li>Ctrl+R 搜索历史记录；&lt;/li>
&lt;/ol>
&lt;p>最后，文章讨论了很多引申问题，比如 shell 的 vi 键绑定或者 emacs 绑定等等，还有很多细节问题会影响文本输入体验。&lt;/p>
&lt;h3 id="写作是思考的工具">写作是思考的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-55-03.png"
width="633"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="439px"
>&lt;/p>
&lt;p>如果你有什么想法，或者你深信不疑的观点，最好把它写下来，在写的过程中你也许会发现逻辑上的漏洞甚至错误。&lt;/p>
&lt;p>如果不写下来，只停留在想法上，你会觉得你的观点很完美，无懈可击，你就陷入这样自我欺骗的循环里了。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.henrikkarlsson.xyz/p/writing-to-think" target="_blank" rel="noopener"
>《如何在写作中思考》&lt;/a>花费大量篇幅展示并论证了一个观点：写作可以帮助你完善你的思维。&lt;/p>
&lt;p>写作可以迅速使你在脑海里模棱两可的东西固化成文字，使你开始怀疑这些文字的正确性。&lt;/p>
&lt;p>这个从动态思维到静态文字的过程，特别像量子力学所说的“波函数坍缩”。&lt;/p>
&lt;p>当一切皆有可能的东西变成实在，你就不再有理由给自己找借口：“我不是那个意思。。。”&lt;/p>
&lt;p>这种硬性的要求，迫使你进行更深入的思考，以及清晰的表达。&lt;/p>
&lt;h3 id="装在软驱里的电脑">装在软驱里的电脑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-55-17.png"
width="596"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://abe.today/blogs/main/floppy8-a-tiny-computer-in-a-floppy-drive" target="_blank" rel="noopener"
>《Floppy8 一个小电脑，但是在软驱里》&lt;/a>。&lt;/p>
&lt;p>作者逛 ebay 的时候发现了一个长相有点儿像古老电脑 Amiga 1010 磁盘驱动器的软驱，虽然不确定这就是 Amiga 的产品，但是设计感十足。&lt;/p>
&lt;p>总之就是，这个设备的外观一下子打动了他，福至心灵，情怀上脑，他决定将这个软驱买回来，然后改造一番。&lt;/p>
&lt;p>大概花了几个周的时间，作者实现了支持外插“游戏卡带”的小计算机，可以运行一些复古游戏，甚至能够播放 4k 视频。&lt;/p>
&lt;p>整个项目的亮点在于作者精心设计了一个可以插入软驱的卡带（实际存储用的 micro SD 卡），通过插入电脑来实现更换游戏内容。&lt;/p>
&lt;p>文中完整记录了制作过程。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="pcsx2-模拟器出了-20-正式版了">pcsx2 模拟器出了 2.0 正式版了
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-55-31.png"
width="690"
height="293"
loading="lazy"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="565px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pcsx2.net/blog/2024/pcsx2-2-release" target="_blank" rel="noopener"
>pcsx2&lt;/a> 是一个模拟索尼 PlayStation 2 游戏机的模拟器， 可以加载游戏光盘镜像进行游玩。&lt;/p>
&lt;p>此次发布 2.0 稳定版本比之前的 1.6.x 稳定版本在体验上有了巨大提升：&lt;/p>
&lt;ol>
&lt;li>使用 QT 作为界面渲染框架，支持现代化的全屏交互操作；&lt;/li>
&lt;li>更高性能的 cpu 、内存模拟，游戏体验提升；&lt;/li>
&lt;li>更高的兼容性，GTA 重影、极品飞车模糊、狂暴飞车天空看不见等大量的兼容性图形问题得到修复；&lt;/li>
&lt;li>支持单个游戏独立配置，有些游戏需要开启或关闭某些模拟器特性才能正常运行，可以单独给他配置，系统在加载时自动切换；&lt;/li>
&lt;li>渲染后端支持现代图形 API Vulcan ，渲染性能提升超过 30%；&lt;/li>
&lt;/ol>
&lt;h3 id="边缘设备上的whisper实时语音转录工具">边缘设备上的Whisper实时语音转录工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-56-06.png"
width="755"
height="528"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="343px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/maxbbraun/whisper-edge" target="_blank" rel="noopener"
>Whisper Edge&lt;/a>，利用硬件机器学习加速器实现始终在线的语音识别。当前支持Jetson Nano和Coral Edge TPU设备。&lt;/p>
&lt;h3 id="基于-python-的复古游戏引擎">基于 Python 的复古游戏引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-56-22.png"
width="690"
height="387"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/kitao/pyxel" target="_blank" rel="noopener"
>Pyxel&lt;/a>是一个 python 的经典像素风游戏制作引擎。&lt;/p>
&lt;p>由于像素风游戏的机制非常简单 (如：最多只能显示 16 种颜色、播放 4 种声音等)，现在你也可以轻松地享受这种游戏的制作过程。&lt;/p>
&lt;h3 id="使用-rust-编写的开源代码编辑器-zed-出-linux-版本了">使用 Rust 编写的开源代码编辑器 Zed 出 Linux 版本了
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-56-33.png"
width="690"
height="583"
loading="lazy"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="284px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zed.dev/linux" target="_blank" rel="noopener"
>zed linux&lt;/a>&lt;/p>
&lt;p>可以直接通过一行命令脚本进行安装。&lt;/p>
&lt;blockquote>
&lt;p>编辑器本体代码采用 GPL 授权形式，服务器端组件使用 AGPL 授权，GPUI 用户界面框架则以 Apache 2 授权发布。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Zed 编辑器最大的优势是“高性能”，号称能够充分利用设备的 CPU、GPU 能力，让应用程序启动、文件加载、键盘响应速度“更快”，官方声称，与微软 Visual Studio Code 相比，Zed 的启动速度快了 4 倍，而 RAM 占用少了一半。&lt;/p>
&lt;/blockquote>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="谷歌浏览器内置插件">谷歌浏览器内置插件
&lt;/h3>&lt;p>今天在 V 站听说一个有趣的事情：谷歌浏览器里面带有一个隐藏的插件。&lt;/p>
&lt;p>当用户访问谷歌网站的时候（即网址为 google.com），这个插件就启动收集用户的硬件信息，内容相当的丰富。&lt;/p>
&lt;p>这个插件的代码是写死在 chrome 代码里的，也就是说用户无法屏蔽。&lt;/p>
&lt;p>看来，谷歌早就不是那个自称“不作恶”的谷歌了。 ​​​&lt;/p>
&lt;h3 id="物联网图形编程">物联网图形编程
&lt;/h3>&lt;p>昨天，我大舅竟然问我写程序的问题&lt;/p>
&lt;p>他买了个廉价单片机芯片电路板，准备折腾物联网智能家居控制。&lt;/p>
&lt;p>但是编写程序烧录不到板子上，找我远程连线。&lt;/p>
&lt;p>最后我发现是编程环境的中文路径问题，帮他解决了。&lt;/p>
&lt;p>他用的就是那种积木编程，少儿学编程的那种拖拽界面。&lt;/p>
&lt;p>看来想折腾不一定非得要什么语言，还是得在具体的项目上练。&lt;/p>
&lt;p>现在国内的物联网芯片商家很卷，二十块钱卖你一套板子，还送你编程教程、各种打包编译环境。&lt;/p>
&lt;h3 id="不能离线安装的游戏">不能离线安装的游戏
&lt;/h3>&lt;p>微软有个游戏叫模拟飞行（开飞机的），它的资源库大小有多大呢&lt;/p>
&lt;p>10PB。&lt;/p>
&lt;p>也就是 1万 T，或者 1千万 G。&lt;/p>
&lt;p>所以都装在本地的话，连硬盘都买不起。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 090 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-40-16.png" alt="Featured image of post 机器文摘 第 090 期" />&lt;h1 id="机器文摘-第-090-期">机器文摘 第 090 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="git-的故事">Git 的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-39-51.png"
width="656"
height="516"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="305px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.brachiosoft.com/posts/git/" target="_blank" rel="noopener"
>《Git 的故事：这次没有这么好玩》&lt;/a>（文章支持繁体中文和英文两个版本）。&lt;/p>
&lt;p>这是一篇真正的长文，长的几乎像一本小书了。&lt;/p>
&lt;p>在阅读这篇文章之前，我曾一度认为 Git 就是 Linus 这个大神在某个商用的版本管理工具不让使用之后，一怒之下花了一周时间再次创造的奇迹（上一次是 Linux）。&lt;/p>
&lt;p>然而，事实并非如此，Linus 虽然天才，但是也不是那么简单就拿出了 Git，虽然这次仍然体现了他的天才创意在里面，但这个工具的思想已经有了很多前人的经验在里面了。&lt;/p>
&lt;p>文章作者可能具有撰写科技传记的经验，故事写的看似平铺直叙，但又生动有趣。&lt;/p>
&lt;p>里面再次提到 Linus 所推崇的设计理念：“简单”，好的设计一定是简单的设计。&lt;/p>
&lt;p>看完既激励人心，又让人对那些默默无闻的社区贡献者心生敬意。&lt;/p>
&lt;blockquote>
&lt;p>Stack Overflow 在 2022 的調查中，Git 市佔率高達 94%，以至於隔年 Stack Overflow 乾脆放棄問大家用什麼版控系統。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>歷史上從來沒有一個版控軟體能如此稱霸市場，下一個能取代 Git 的會是什麼？不少人說可能會與 AI 有關，但沒人說得準，不過可以確信的是，過程中一定會有一連串的偶發事件和一群傑出的駭客。&lt;/p>
&lt;/blockquote>
&lt;h3 id="手把手教你写一个-json-解析器">手把手教你写一个 JSON 解析器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-40-01.png"
width="621"
height="400"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.davimiku.com/tutorials/json-parsing-rust-1" target="_blank" rel="noopener"
>《实现 JSON 解析 （Rust）》&lt;/a>，通过从头开始实现 JSON 解析来学习解析器的基础知识。&lt;/p>
&lt;p>这篇文章既适合想要入门解析器编写的人，又适合没用过 Rust 但是想看看 Rust 语言怎么样的人。&lt;/p>
&lt;p>作者写的非常细心，文章经过精心排版。&lt;/p>
&lt;p>连最基础的语法介绍都不放过，看完相当于学习了解析器的编写思路，也熟悉了一下 Rust 语言。&lt;/p>
&lt;h3 id="使用-javascript-模拟-2000-万个粒子">使用 JavaScript 模拟 2000 万个粒子
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-40-16.png"
width="690"
height="369"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/p>
&lt;p>即使在资源有限的情况下，通过创新和优化，也能够达成看似不可能的目标。&lt;/p>
&lt;p>&lt;a class="link" href="https://dgerrells.com/blog/how-fast-is-javascript-simulating-20-000-000-particles" target="_blank" rel="noopener"
>《使用 JavaScript 模拟 2000 万个粒子》&lt;/a>记录了一位拥有黑客精神的程序员在资源受限的情况下，进行大规模粒子实时渲染的探索故事。&lt;/p>
&lt;p>在手机上只用 CPU 的情况下，达到了渲染 100 万个粒子运动 60fps 的帧率。在他的 M1 芯片苹果电脑上达到了 2000 万粒子 20 fps，更高性能的桌面电脑上这个数字可达 3000 万。&lt;/p>
&lt;p>其实，对于大部分编程问题，要解决的根本问题就是如何组织数据的问题。&lt;/p>
&lt;p>拿本文这个问题来说，如果使用传统的数组对象，对上千万的粒子数据进行随机存取，会带来极低的缓存命中率和执行效率。&lt;/p>
&lt;p>作者也是首先就想到了这一点，他先从找到更合适的数组表示方法（选用了 JavaScript 里的 TypeArray）下手。&lt;/p>
&lt;p>通过 Web Workers 进行多线程计算。&lt;/p>
&lt;p>使用 ImageData 建立像素缓冲区，逐步提升效率。&lt;/p>
&lt;p>最终找到了一个天才的渲染策略：他用粒子网格计数作为纹理，渲染一个全屏的四边形，而不是一个个实例化的粒子。这种方法固定了每帧传输到GPU的数据量，使得渲染过程不再依赖于粒子的数量。达到了想要的目标。&lt;/p>
&lt;h3 id="intel-无线模块产品规格对比">intel 无线模块产品规格对比
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-40-44.png"
width="690"
height="183"
loading="lazy"
class="gallery-image"
data-flex-grow="377"
data-flex-basis="904px"
>&lt;/p>
&lt;p>我最近购买 intel 无线模块踩了个坑。&lt;/p>
&lt;p>Intel AX 系列无线模块是目前在笔记本、迷你主机、单片机等设备中广泛使用的网络硬件。&lt;/p>
&lt;p>当前主要流行的有：AX200、AX210、AX201、AX211 等版本，看上去感觉就是新旧程度不同，感觉都差不多。&lt;/p>
&lt;p>&lt;a class="link" href="https://ark.intel.com/content/www/cn/zh/ark/compare.html?productIds=189347%2C130293" target="_blank" rel="noopener"
>但是这里面有一个重大区别&lt;/a>。&lt;/p>
&lt;p>AX 系列尾号为 1 的型号，只能搭配 Intel 酷睿 10 代及以上 CPU 进行使用，原因是无线模块的部分功能需要依赖 CPU 里面的专属接口。&lt;/p>
&lt;p>而尾号为 0 的型号就没有这个问题，可以用于各种设备，包括 ARM 架构的单片机、AMD 的 x64 CPU 等。&lt;/p>
&lt;h3 id="那个惹人厌的-ds_store-文件夹哪儿来的">那个惹人厌的 .DS_Store 文件夹哪儿来的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-40-53.png"
width="548"
height="348"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="377px"
>&lt;/p>
&lt;p>如果你尝试过从苹果电脑拷贝文件夹到 Windows 电脑，你一定见过一个文件 .DS_Store ，特别的碍眼。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.arno.org/on-the-origins-of-ds-store" target="_blank" rel="noopener"
>《浅谈 DS_store 的起源》&lt;/a>，文章记录了这个玩意儿诞生的原因，以及为什么现在这么泛滥。&lt;/p>
&lt;p>一句话来说：苹果电脑的“文件资源管理器”程序需要用它来记录一些“元信息”，但是由于设计失误，导致过度创建这个文件。而且 .DS_Store 这个名字取得也太随意，跟它的作用并没有太大关系。&lt;/p>
&lt;p>ps：看来，无论哪儿的公司，多牛逼的程序员，都逃脱不了维护屎山的命运。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="命令行里的-excel但是-vim-风格">命令行里的 excel，但是 vim 风格
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-41-08.png"
width="669"
height="850"
loading="lazy"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="188px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/andmarti1424/sc-im" target="_blank" rel="noopener"
>sc-im&lt;/a>，是一个在终端控制台运行的电子表格程序。&lt;/p>
&lt;p>通过控制台的字符进行界面渲染，最大支持 65536 行、702 列数据。&lt;/p>
&lt;p>支持 csv、tab、xlsx 文件的导入，支持导出 markdown。&lt;/p>
&lt;p>最大的特点是采用了 vim 的命令风格，可以使用键盘快速操控导航。&lt;/p>
&lt;p>有强大的命令支持（跟 vim 一样采用 ：冒号输入），甚至可以绘制图表。&lt;/p>
&lt;h3 id="关爱程序员健康的十六进制编辑器">关爱程序员健康的十六进制编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-41-19.png"
width="690"
height="424"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/WerWolv/ImHex" target="_blank" rel="noopener"
>ImHex&lt;/a>是一个开源跨平台（Windows、MacOS、Linux、Web）十六进制编辑器，主要用于程序员调试和编辑二进制文件。&lt;/p>
&lt;p>使用 &lt;a class="link" href="https://github.com/ocornut/imgui" target="_blank" rel="noopener"
>Dear ImGUI&lt;/a> 作为界面渲染库。&lt;/p>
&lt;p>支持暗黑模式，据作者说，做这款编辑器主要是为了夜猫子程序员的视网膜着想。&lt;/p>
&lt;h3 id="用-vim-script-编写的-c-语言编译器">用 Vim script 编写的 C 语言编译器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-41-38.png"
width="690"
height="301"
loading="lazy"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="550px"
>&lt;/p>
&lt;p>Vim script 本来是在编辑器之神 Vim 中运行的脚本语言，用于给 Vim 编写扩展。&lt;/p>
&lt;p>现在有人用它&lt;a class="link" href="https://github.com/rhysd/8cc.vim" target="_blank" rel="noopener"
>实现了一个支持 C11 标准的编译器&lt;/a>。&lt;/p>
&lt;p>至于为什么要这样做，我想这就是骇客精神吧。&lt;/p>
&lt;p>如果非要说有点儿用的话，我推测，也许在 Vim 中作为一个 LSP 语法解析的后端或许能用。&lt;/p>
&lt;h3 id="基于-web-的视频特效工具">基于 Web 的视频特效工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-41-47.png"
width="690"
height="398"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="416px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pikimov.com/" target="_blank" rel="noopener"
>PKIMOV&lt;/a>，Adobe After Effects 的免费平替。而且还不用安装，直接在线使用。&lt;/p>
&lt;p>如果有轻量的在线制作视频特效合成需求，可以尝试一下这个工具。&lt;/p>
&lt;p>操作界面与交互逻辑与 AE 非常相似。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="选择的问题">选择的问题
&lt;/h3>&lt;p>人们有时会感到后悔，是因为陷入了一个思维误区，即：认为自己有得选。&lt;/p>
&lt;p>实际上几乎所有人在所有时间，在面临选择的时候，都是没得选的。&lt;/p>
&lt;p>这牵涉到“自由意志”的哲学问题，但也是人性决定的，很多事情让你回到过去，你还是会做出一模一样的选择。&lt;/p>
&lt;p>当意识到自己没得选的时候，痛苦就会减少，很多人把精神托付给宗教也是这个原因，他们希望一切“让别人安排”。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 089 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/</link><pubDate>Tue, 02 Jul 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-36-52.png" alt="Featured image of post 机器文摘 第 089 期" />&lt;h1 id="机器文摘-第-089-期">机器文摘 第 089 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="圆角矩形的故事">圆角矩形的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-35-27.png"
width="360"
height="269"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="321px"
>&lt;/p>
&lt;p>苹果 Macintosh 电脑的图形界面开发，在早期层遇到过不少的挑战。&lt;/p>
&lt;p>怎样快速地绘制“圆角矩形”就是其中一项。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.folklore.org/Round_Rects_Are_Everywhere.html" target="_blank" rel="noopener"
>《圆角矩形无处不在》&lt;/a>记录了当时（1981年）乔布斯“逼迫”技术人员实现高速圆角矩形绘制的故事。&lt;/p>
&lt;p>当时 Macintosh 电脑所用的 68000 处理器在硬件层面并不支持浮点数预算，而绘制圆形或椭圆意味着要大量求解平方根，这是硬件级别的限制。&lt;/p>
&lt;p>工程师比尔发明了一个快速绘制圆形和椭圆的算法，不依靠高精度浮点运算，仅仅使用普通的加减法。&lt;/p>
&lt;p>当他兴高采烈地到公司进行演示时，并没有获得期望中的赞赏，而是乔布斯还想要自行车：“能不能快速绘制圆和矩形的组合？。。。”&lt;/p>
&lt;p>比尔有些失落，并且提出并没有绘制圆角矩形的必要，不过乔布斯不吃这一套，拉着他到大街上溜达了一圈，找出了很多现实中圆角矩形的例子。&lt;/p>
&lt;p>最终比尔被说服，回家熬了一个通宵实现了圆角矩形高速绘制的算法。&lt;/p>
&lt;h3 id="用傅里叶变换加速多项式相乘">用傅里叶变换加速多项式相乘
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-35-45.png"
width="546"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>&lt;/p>
&lt;p>不要被标题吓到，&lt;a class="link" href="https://www.alvarorevuelta.com/posts/fft-polynomials" target="_blank" rel="noopener"
>这是一篇很有趣且容易理解的文章&lt;/a>。&lt;/p>
&lt;p>只要初中数学水平，就知道如何进行多项式相乘：把他们的项分别相乘，然后再将结果加起来，最后合并同类项化简即可。&lt;/p>
&lt;p>然而使用上述方法的复杂度会随着多项式的阶数增高而迅速增高（具体来说是：O(n^2))。&lt;/p>
&lt;p>这篇文章以科普的方式，介绍了一种将复杂度降低至 O（nlogn）的方法，文章写的算是容易理解，具体要点如下：&lt;/p>
&lt;ol>
&lt;li>多项式可以使用傅里叶变换从“值域”转换为“频域”，如果采用 FFT 快速傅里叶变换算法则复杂度为 O（nlogn）。&lt;/li>
&lt;li>转换为“频域”后再进行相乘，其复杂度仅为 O（n），因为这变成了简单的元素相乘。&lt;/li>
&lt;li>再将相乘的结果转换为“值域”使用 IFFT 算法的话复杂度仍为 O（nlogn）。&lt;/li>
&lt;/ol>
&lt;p>虽然貌似步骤增多了，但是其计算速度得以极大提升（尤其是复杂的多项式）。&lt;/p>
&lt;p>那么问题来了，多项式相乘在现实中有什么用吗？&lt;/p>
&lt;p>答案是，在很多领域都有重要意义，包括不限于：信号处理、数字通信、计算机图形学、密码学、物理模拟、经济学和金融。&lt;/p>
&lt;h3 id="可编程字体">可编程字体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-35-58.png"
width="690"
height="543"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="304px"
>&lt;/p>
&lt;p>原来字体文件可以做这么多事情？&lt;/p>
&lt;p>用于 Firefox 和 Chrome 等应用程序的字体整形引擎 HarfBuzz 带有一个可执行 Wasm 整形器，允许使用任意代码来“整形”文本。&lt;/p>
&lt;p>然而有人发现它可以做的事情远不止给字体“整形”。&lt;/p>
&lt;p>&lt;a class="link" href="https://fuglede.github.io/llama.ttf/" target="_blank" rel="noopener"
>llama.ttf&lt;/a>，将一个大语言模型放入到字体文件里，并且可以在所有使用了 HarfBuzz 的软件中体验。&lt;/p>
&lt;p>只需选择那种字体，然后键入一串用于激活的魔法字符串，即可开始人机对话。。。&lt;/p>
&lt;p>作者还给出了一些用字体所做的有趣的事情，甚至可以用于打游戏。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="用开源代码组成的银河系">用开源代码组成的银河系
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-36-20.png"
width="690"
height="376"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="440px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://anvaka.github.io/" target="_blank" rel="noopener"
>代码星系&lt;/a>，基于各种流行的包管理体系，提取出软件包的信息，制作出类似星系云图的可视化效果。&lt;/p>
&lt;p>可以通过键盘鼠标进行交互漫游，有种在太空中飞速遨游的感觉。 ​​​&lt;/p>
&lt;h3 id="可视化远古-cpu-的运行">可视化远古 CPU 的运行
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-36-30.png"
width="690"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/floooh/v6502r" target="_blank" rel="noopener"
>v6502r&lt;/a>是一个将 6502 CPU 内部结构及其运行过程进行可视化的开源项目。&lt;/p>
&lt;p>&lt;a class="link" href="https://floooh.github.io/visualz80remix/" target="_blank" rel="noopener"
>visualz80remix&lt;/a>，则是基于 v6502r 做了一个在线页面，实时在网页里可视化 z80 CPU 的内部构造和指令执行过程。&lt;/p>
&lt;p>注：z80 和 6502 都是上世纪 70 年代生产的经典 CPU，字长均为 8 位，基于它们诞生了一大批经典的、物美价廉的个人电脑。&lt;/p>
&lt;h3 id="流体模拟">流体模拟
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-36-52.png"
width="567"
height="606"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="224px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://grantkot.com/ll/" target="_blank" rel="noopener"
>ll&lt;/a>，基于 WASM 技术的流体模拟页面 Demo，效果酷炫。可以设置重力加速、粒子颜色等，如果在手机上还能体验通过传感器控制。 ​​​&lt;/p>
&lt;h3 id="适用于现代-windows-的平铺桌面管理器">适用于现代 Windows 的平铺桌面管理器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-37-07.png"
width="690"
height="377"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="439px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/LGUG2Z/komorebi" target="_blank" rel="noopener"
>komorebi&lt;/a>是一个平铺窗口管理器，可作为Windows 10及更高版本中Microsoft桌面窗口管理器的扩展。&lt;/p>
&lt;p>komorebi 允许您使用一个控制台程序来控制应用程序窗口、虚拟工作区和显示显示器，该命令可与第三方软件（如 AutoHotKey）一起使用，以设置用户定义的键盘快捷键。&lt;/p>
&lt;h3 id="初创公司-resend-开源了他们公司">初创公司 Resend 开源了他们公司
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-37-21.png"
width="690"
height="302"
loading="lazy"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="548px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://resend.com/handbook" target="_blank" rel="noopener"
>handbook&lt;/a>，这里是他们提供的全部手册，涵盖了公司经营理念、用人、技术栈、设计、售后服务、市场营销等运营整个公司相关的全部文档指南。&lt;/p>
&lt;p>对于如何运营一个现代化科技初创公司感兴趣的朋友可以了解一下。&lt;/p>
&lt;p>Resend 创立于 2023 年 1月份，主打产品是电子邮件相关的效率工具，公司愿景是提升人们的沟通效率。&lt;/p>
&lt;p>公司推崇远程办公和线上协作，并严格限制加班时间。&lt;/p>
&lt;p>选择将这些信息开源出来，也是对营销方式的一种探索。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="不负责任地猜想">不负责任地猜想
&lt;/h3>&lt;p>资源过剩的时代，帮人筛选东西应该也是一种刚需。&lt;/p>
&lt;p>不一定是物理实体，数字消费品也算。&lt;/p>
&lt;p>你帮别人严格把关，严格到极致，就产生了价值。&lt;/p>
&lt;p>这样，就连喜欢挑剔的人，也有了创造和输出价值的方式。&lt;/p>
&lt;p>不过，需要什么样的渠道呢？大众点评那种恐怕不行，还不够严格。&lt;/p>
&lt;p>东方甄选，网易严选这种带货卖货的，又太泛。&lt;/p>
&lt;p>应该再垂直一些。&lt;/p>
&lt;p>形成某些细分领域的权威。&lt;/p>
&lt;p>给现在的网络评测，测评人，恰饭的环境及业务逻辑升升级，不收厂商的钱，改收用户的钱，也许能探索一条新路。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 088 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/2024-06-25-08-51-28.png" alt="Featured image of post 机器文摘 第 088 期" />&lt;h1 id="机器文摘-第-088-期">机器文摘 第 088 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="通过重新定义问题来降低本质复杂性">通过重新定义问题来降低本质复杂性
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/2024-06-25-08-51-15.png"
width="639"
height="369"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="415px"
>&lt;/p>
&lt;p>在《人月神话》里，把复杂性分为两种：&lt;/p>
&lt;ol>
&lt;li>本质复杂性（Essential Complexity），指的是你要解决的问题本身的复杂性，是无法避免的。&lt;/li>
&lt;li>附属复杂性（Accidental Complexity），是指我们在解决本质问题时，所采用的解决方案而引入的复杂性。&lt;/li>
&lt;/ol>
&lt;p>书中提出了十分经典的，具有长久影响力的那句话：“没有银弹”：指的是软件本质的复杂度是无法避免的。&lt;/p>
&lt;p>然而，作为一名软件工程师，要懂得质疑。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://olano.dev/blog/a-note-on-essential-complexity" target="_blank" rel="noopener"
>《关于本质复杂性的笔记》&lt;/a>（原文是西班牙文，后被翻译为英文），就质疑了软件本质复杂性无法降低的观点。&lt;/p>
&lt;p>文章认为：&lt;/p>
&lt;blockquote>
&lt;p>即使我们不能仅通过改变软件来消除本质复杂性，但这并不意味着我们对此无能为力。如果我们能够改变问题的定义，或者让世界适应软件，而不是相反，那么软件解决的问题可以重新定义，本质不是一成不变的，而是可以讨论的，是工程师可以工作的一部分。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>通过重新定义问题，软件工程师的目标可以简化为减少任何类型的复杂性。这涉及到质疑假设、说服利益相关者，并可能需要重新考虑软件系统或组织本身的复杂性。&lt;/p>
&lt;/blockquote>
&lt;p>如果延申思考的话，解决任何问题都可以视为一个管理复杂度的任务。&lt;/p>
&lt;p>当你觉得问题麻烦无法解决的时候，有人已经重新定义了该问题。&lt;/p>
&lt;h3 id="光盘的历史意义">光盘的历史意义
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/2024-06-25-08-51-28.png"
width="669"
height="374"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="429px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.fastcompany.com/91128052/history-of-cd-roms-encarta-myst" target="_blank" rel="noopener"
>《光盘简史》&lt;/a>，讲述了CD-ROM技术及其在90年代对数字媒体和互动娱乐的影响，特别是它如何推动了多媒体百科全书和游戏的发展。&lt;/p>
&lt;p>文章回顾了CD-ROM作为存储介质的兴起和衰落，以及它在技术史上的地位。&lt;/p>
&lt;p>CD-ROM（光盘只读存储器）在90年代初作为新兴的存储技术，以其大容量和快速读取能力，彻底改变了数字媒体的存储和分发方式。&lt;/p>
&lt;p>CD-ROM使得丰富的多媒体内容，包括视频、音频和图像，能够被集成到单一的光盘上，为用户带来了前所未有的互动体验。&lt;/p>
&lt;p>微软的《Encarta》作为首款CD-ROM百科全书，不仅提供了丰富的信息，还集成了互动功能，标志着传统印刷百科全书向数字媒体的转变。&lt;/p>
&lt;p>游戏《Myst》利用CD-ROM的存储优势，创造了一个沉浸式的虚拟世界，成为当时最畅销的电脑游戏之一。&lt;/p>
&lt;p>CD-ROM的普及促进了家庭电脑的升级，加速了互联网和在线媒体的发展，为后来的数字时代奠定了基础。&lt;/p>
&lt;p>尽管CD-ROM在技术上具有重要意义，但随着更高效存储技术的出现，如DVD和在线流媒体，CD-ROM逐渐退出了主流市场。&lt;/p>
&lt;p>CD-ROM时代的产品，如《Encarta》和《Myst》，不仅是技术成就，也成为了90年代文化和技术发展的重要标志，值得被保存和研究。&lt;/p>
&lt;h3 id="怎样做大数运算">怎样做大数运算？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/2024-06-25-08-51-38.png"
width="690"
height="132"
loading="lazy"
class="gallery-image"
data-flex-grow="522"
data-flex-basis="1254px"
>&lt;/p>
&lt;p>现在计算机大部分都是 64 位的字长，64 位用于表示整型数字的话，最大可以到 18,446,744,073,709,551,615&lt;/p>
&lt;p>如果超出这个大小，还能算吗？&lt;/p>
&lt;p>如果你手头有一个 Python 解释器（C 实现版本），你可以尝试在它的交互命令中输入比较大的数字让他进行运算试试。&lt;/p>
&lt;p>你会发现 CPython 可以处理非常大的数字，他是怎么实现的？&lt;/p>
&lt;p>&lt;a class="link" href="https://austinhenley.com/blog/bignum1.html" target="_blank" rel="noopener"
>《动手写一个大数计算库》&lt;/a>，提供了一种简单易懂的方法。&lt;/p>
&lt;p>作者首先翻看了 CPython 的源码，找到了大数处理部分，发现比较复杂（超过 6000 行代码和 100 多个函数）。&lt;/p>
&lt;p>然后自己动手写了一个极简的（只支持：比较大小、加、乘运算，不过其它的也好处理）。&lt;/p>
&lt;p>核心思路是将数字用字符串存储起来，然后按单个字符为一位进行对应计算。&lt;/p>
&lt;p>虽然实现不完整，但是很容易就能理解他的代码思想。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="俄罗斯方块字体">俄罗斯方块字体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/2024-06-25-08-52-03.png"
width="690"
height="349"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="474px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://erikdemaine.org/fonts/tetris/?text=hello&amp;#43;world&amp;amp;speed=10" target="_blank" rel="noopener"
>tetris-font&lt;/a>&lt;/p>
&lt;p>这个网站可以用俄罗斯方块将你输入的字符拼凑出来，并带有动画效果。&lt;/p>
&lt;p>只支持 26 个英文字母，不支持标点符号和其他字符。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="程序排错的通用思路">程序排错的通用思路
&lt;/h3>&lt;p>最近指导同事解决了几个他们一度认为不可能解决的技术问题。&lt;/p>
&lt;p>给他们信心带来极大提升的同时，我也在思考这背后的统一方法。&lt;/p>
&lt;p>实际上整个解决过程我并没有亲自动手。&lt;/p>
&lt;p>我只是给他们提供思路。&lt;/p>
&lt;p>具体操作和实施都是他们进行的，因为我是通过互联网远程遥控指挥他们。&lt;/p>
&lt;p>但是这背后的思想其实都是同一个思想。&lt;/p>
&lt;p>那就是“逐步缩小错误发生的范围”。&lt;/p>
&lt;p>怎么理解这个？&lt;/p>
&lt;p>就是，首先拿出一个基础环境，这个基础环境绝对正常，然后一步一步引入有问题的模块。&lt;/p>
&lt;p>先保证一个最小化的正确环境，将所有模块都屏蔽掉，逐渐打开它们，慢慢加到一个出错的临界点。&lt;/p>
&lt;p>直到定位到一个模块，一打开，就出错，那么范围就缩小到了这个地方了。&lt;/p>
&lt;p>这就是“缩小范围”。&lt;/p>
&lt;p>当然我在这里所说的模块。&lt;/p>
&lt;p>不一定是一个物理实体。&lt;/p>
&lt;p>可能是一个函数、一段代码、一个子系统。&lt;/p>
&lt;p>这个方法看似简单。但要在合理的时间合理的地点运用起来，它的力量非常强大。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 087 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/</link><pubDate>Tue, 18 Jun 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-47-55.png" alt="Featured image of post 机器文摘 第 087 期" />&lt;h1 id="机器文摘-第-087-期">机器文摘 第 087 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="家常软件和赤脚程序员">家常软件和赤脚程序员
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-47-35.png"
width="690"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;p>在端午假期这几天，我在 chatGPT 的帮助下给老婆写了一个浏览器插件，它的功能只有一个，将网页中任何图片上的字给扣出来。&lt;/p>
&lt;p>写的过程虽然不算轻松，但受益于 AI 技术的强大，在写代码方面不用动用太多脑力，很多不熟悉的 API 或者方法调用，都可以借助 AI 实现。&lt;/p>
&lt;p>从使用结果上来看，老婆十分满意，而且有一种尊贵 VIP 的感觉。&lt;/p>
&lt;p>&lt;em>这款插件目前过于简陋，我暂时还无法将其上架至插件商店。&lt;/em>&lt;/p>
&lt;p>我还没来及给这样的软件下定义，今天就看到一个有意思的名词，“Home cooked app”————家常软件。&lt;/p>
&lt;p>像“家常菜”那样的家常软件，虽然不像饭店里的那样具有商业价值，但是是你亲手端出来的，别有一番风味。&lt;/p>
&lt;p>&lt;a class="link" href="https://maggieappleton.com/home-cooked-software" target="_blank" rel="noopener"
>《home-cooked-software》&lt;/a>，是一篇演讲记录，作者提到了家常软件这个概念，并且表达了对于其发展的个人预判。&lt;/p>
&lt;p>作者认为，随着 AI 能力的提升，软件开发的门槛急速降低，人们对于这种以前“不好意思提出的极度个性的需求”将迅速膨胀。&lt;/p>
&lt;p>“家常软件”开发者将越来越多，并且进入一个黄金时代。&lt;/p>
&lt;p>作者甚至参考中国上世纪 60 年代的“赤脚医生”概念，创造了一个“赤脚开发者”称谓。&lt;/p>
&lt;p>演讲内容值得一看，摘抄部分有趣的观点如下（坦白说，我觉得作者有些过于乐观了）：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用专业软件就像是餐厅专业厨师制作的一顿饭或蛋糕，可能比家常的好吃多了，但是你无法控制它的制作方式，以及他们在里面放了多少黄油。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>商业的标准化软件是由不太了解我们的人为我们制作的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>工业软件的定位迫使它们不可能满足小众需求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这个世界充满了需要解决的问题。虽然并非所有这些问题都有软件形状的解决方案，但其中有一大堆问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将工具和逻辑链接在一起的架构使语言模型比其他方式更强大，最终能够在我们现有的编程环境中完成相当复杂的任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这些人（指赤脚开发者）深深植根于他们的社区，因此他们了解周围人的需求和问题。因此，他们完全有能力解决本地问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="史上最好的屏幕保护程序">史上最好的屏幕保护程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-47-55.png"
width="690"
height="389"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>这里有个故事&lt;a class="link" href="https://gizmodo.com/you-can-now-enjoy-the-best-screensaver-of-all-time-in-y-1847738622" target="_blank" rel="noopener"
>讲述了 Windows NT 屏保 &amp;ldquo;3D Pipes&amp;rdquo; 的诞生&lt;/a>。&lt;/p>
&lt;p>当时 Windwos NT 3.5 首次实现了对 OpenGL 的完整硬件加速支持，但苦于没有什么程序可以展示这个牛逼特性。&lt;/p>
&lt;p>于是他们在内部团队搞了一个编程竞赛，谁能写的程序被投票最多，就把它加入到系统自带的屏幕保护程序中。&lt;/p>
&lt;p>之所以要作为屏幕保护程序推出，主要是出于安全考虑，因为一旦程序出毛病倒不至于给系统带来太大麻烦，告诉用户先别用那个屏保即可。&lt;/p>
&lt;p>于是诞生了一组酷炫的、发挥 OpenGL 图形优势的程序，其中包括：3D 文本、3D 迷宫、3D 飞行物，以及本文主角：3D Pipes。&lt;/p>
&lt;p>文章最后还提供了&lt;a class="link" href="https://1j01.github.io/pipes/" target="_blank" rel="noopener"
>一个在线体验该屏保的地址&lt;/a>。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="苹果的-备忘录数学计算器-开源版">苹果的 “备忘录数学计算器” 开源版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-49-12.png"
width="749"
height="474"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="379px"
>&lt;/p>
&lt;p>苹果 WWDC 2024 大会上，在 iPad 上演示通过键入或手写数学表达式后，利用 AI 可立即呈现解答结果。&lt;/p>
&lt;p>在 GitHub 上发现有一个开源版 &lt;a class="link" href="https://github.com/ayushpai/AI-Math-Notes" target="_blank" rel="noopener"
>“AI Math Notes”&lt;/a>，完美实现类似的功能。&lt;/p>
&lt;p>这是一款用 Python 语言开发的交互式绘图应用，允许你在画布上绘制数学方程，再使用多模态 LLM 来计算并在旁边显示结果。&lt;/p>
&lt;h3 id="xv6-中文文档">xv6 中文文档
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-49-35.png"
width="611"
height="1531"
loading="lazy"
class="gallery-image"
data-flex-grow="39"
data-flex-basis="95px"
>&lt;/p>
&lt;p>xv6 是 MIT 开发的一个教学用的完整的类 Unix 操作系统，并且在 MIT 的操作系统课程 6.828 中使用。通过阅读并理解 xv6 的代码，可以清楚地了解操作系统中众多核心的概念，对操作系统感兴趣的同学十分推荐一读！这份&lt;a class="link" href="https://th0ar.gitbooks.io/xv6-chinese/content/index.html" target="_blank" rel="noopener"
>中文翻译的 MIT xv6 文档&lt;/a>是阅读代码过程中非常好的参考资料。&lt;/p>
&lt;h3 id="古老的绘图设备收藏">古老的绘图设备收藏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-49-44.png"
width="690"
height="374"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://drawingmachines.org/" target="_blank" rel="noopener"
>DrawingMachines.org&lt;/a>，是一个专注于收集和记录光学、机械和自动化绘图机器、设备、辅助工具和仪器的档案网站。&lt;/p>
&lt;p>目标是揭示那些被遗忘、过时或不熟悉的绘图技术，记录艺术与技术之间关系的历史，并尝试揭示他们的原理。&lt;/p>
&lt;p>去看一下在没有计算机的时代，人们是怎样作出精美的图形的吧。&lt;/p>
&lt;h3 id="无需-flash-插件的小游戏网">无需 flash 插件的小游戏网
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-49-55.png"
width="690"
height="441"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://1u9u.com/" target="_blank" rel="noopener"
>1u9u&lt;/a>，1.8 万个 flash 小游戏。不需要安装 flash 插件，直接在线玩。&lt;/p>
&lt;p>每个游戏均有截图。&lt;/p>
&lt;p>使用 &lt;a class="link" href="https://ruffle.rs/" target="_blank" rel="noopener"
>ruffle&lt;/a> 模拟 flash 插件。 ​​​&lt;/p>
&lt;h3 id="一个干净的从零开始编写的-html-渲染库">一个干净的，从零开始编写的 HTML 渲染库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-50-07.png"
width="690"
height="280"
loading="lazy"
class="gallery-image"
data-flex-grow="246"
data-flex-basis="591px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/lexbor/lexbor" target="_blank" rel="noopener"
>lexbor&lt;/a>，一个开源的 HTML 渲染库。&lt;/p>
&lt;p>对于有志于浏览器开发的程序员（在下佩服！），这个库可以看一下，是一个完整的 HTML 渲染引擎，而且十分简洁。&lt;/p>
&lt;p>主要特点：&lt;/p>
&lt;ul>
&lt;li>纯 C 语言实现，速度快，支持 C99。&lt;/li>
&lt;li>没有任何外部依赖。&lt;/li>
&lt;li>模块化设计，每个模块相对独立，可单独使用。&lt;/li>
&lt;/ul>
&lt;h3 id="一个超好的-sooundfonts-资源站">一个超好的 SooundFonts 资源站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-50-27.png"
width="690"
height="546"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>发现一个超级好的 &lt;a class="link" href="https://baike.baidu.com/item/Sound%20Font/3442190" target="_blank" rel="noopener"
>SoundFonts&lt;/a> 资源站&lt;a class="link" href="https://sites.google.com/site/soundfonts4u/" target="_blank" rel="noopener"
>soundfonts4u&lt;/a>。&lt;/p>
&lt;p>SOUNDFONT，顾名思义，就是“声音字体”。文件扩展名为 *.SF 或 *.SF2。 它是由新加坡创新公司 Creative Technology 在中档声卡上 (EMU SoundBlaster)使用的音色库技术（现在用的较少了）。&lt;/p>
&lt;p>但是这项技术十分牛逼，可以做到用很逼真的音色来播放 MIDI 歌曲，虽然现在随着网速的增加，大家已经在线可以听无损音乐了，但是 MIDI 有它自己的韵味儿。&lt;/p>
&lt;p>soundfonts4u 这个网站里提供了很多优质的 sf 格式的音色库，最大的竟然高达 968MB，当然不敢用创新声卡加载了，但是网站也提供了软件用于加载音色。&lt;/p>
&lt;p>希望在电脑上播放高品质 MIDI 音乐的朋友绝对要收藏。&lt;/p>
&lt;h3 id="把网站保存在-zip-包里">把网站保存在 zip 包里
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-50-40.png"
width="557"
height="334"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/potahtml/mpa-archive" target="_blank" rel="noopener"
>map-archive&lt;/a>是一个运行在 node.js 环境的爬虫工具，可以将多页面网站保存到本地的 zip 包里，并且重新通过这个 zip 包在本地进行发布站点。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="人们只想回到过去">人们只想回到过去
&lt;/h3>&lt;p>人们对旧时的物件、文艺作品、甚至演员艺人，往往都会加上一层美化滤镜，不由自主地觉得越古老就越“正宗”、“功夫越深”，并深切鄙视当下。&lt;/p>
&lt;p>造成这种行为的根本原因在于，生命对于时间之箭的无能为力，人几乎从一出生开始，就拼命地想回到过去。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 086 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-57-02.png" alt="Featured image of post 机器文摘 第 086 期" />&lt;h1 id="机器文摘-第-086-期">机器文摘 第 086 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="用三个月时间做一个游戏引擎">用三个月时间做一个游戏引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-55-50.png"
width="634"
height="419"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;p>游戏编程、图形编程总是那么迷人，但是对于初学者来说往往不知该从何处下手。&lt;/p>
&lt;p>有句话叫读万卷书不如行万里路，学习一项技能最好的方法就是动手去做。&lt;/p>
&lt;p>不用设想一步到位或者找到一条完美的训练路径，或者做好了十足准备再去动手，那样你可能永远也无法入门。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://edw.is/learning-vulkan/" target="_blank" rel="noopener"
>《我是怎样学 Vulkan 编程的》&lt;/a>文章作者便是十足的行动派，在 0 经验的情况下，三个月撸了一个还算凑合的游戏引擎。&lt;/p>
&lt;p>在本文里作者详细记录了学习过程和经验，对于想涉猎游戏图形编程的人来说，是一份不错的参考（也是激励）。&lt;/p>
&lt;p>主要内容如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>要学习的基础知识：OpenGL 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一些需要避免的陷阱：不要试图做一个全能的东西。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择合适的图形 API：根据你希望运行的平台决定，目前在 Windows + Linux 开发跨平台小游戏似乎 Vulkan 是首选。WebGPU 也可以，但是目前标准还不够稳定。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Vulkan 学习资料。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>引擎架构设计。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>学习心得：主要是踩的坑。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="cpu-的缓存为什么要分级">CPU 的缓存为什么要分级？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-56-05.png"
width="453"
height="648"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="167px"
>&lt;/p>
&lt;p>现代 CPU 一般把缓存分为 3 级，L1、L2、L3，容量依次增加，速度依次降低。&lt;/p>
&lt;p>有网友询问，为什么不能把一级缓存做得跟三级缓存一样大，然后去掉后面两级不就行了吗？&lt;/p>
&lt;p>答案是不行，&lt;a class="link" href="https://fgiesen.wordpress.com/2016/08/07/why-do-cpus-have-multiple-cache-levels" target="_blank" rel="noopener"
>这篇文章给出了解释&lt;/a>。&lt;/p>
&lt;p>简单来说：&lt;/p>
&lt;p>1、想象一下，你是公司的CEO，你负责处理所有的决策和任务。但你不可能记住每一个细节，所以你需要一个助手团队来帮助你。&lt;/p>
&lt;p>2、你的办公桌抽屉（L1缓存）是最方便的，里面放着你经常需要快速查阅的文件和信息。当需要做出快速决策时，你可以直接从抽屉里拿文件，这非常快。&lt;/p>
&lt;p>3、但是，抽屉的空间有限，不能放太多东西。所以，你还有一个更大的文件柜（L2缓存），它就在你的办公室里，虽然不如抽屉那么快，但比去公司的档案室（主存储器）要快得多。&lt;/p>
&lt;p>4、如果文件不在抽屉或文件柜里，你就得去档案室（L3缓存或主存储器）查找，这需要更多的时间，但档案室可以存储大量的文件和信息。&lt;/p>
&lt;p>回到最初的问题，如果把 L1 做的跟 L3 一样大行吗？&lt;/p>
&lt;p>如果做那么大，他就不是抽屉了（L1）了，你也不可能在一个像房间那么大的抽屉里快速去到想要的东西。&lt;/p>
&lt;h3 id="当心你的-wifi-路由被安装后门">当心你的 Wifi 路由被安装后门
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-56-24.png"
width="690"
height="402"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;p>有一个名叫 Sam 的电脑高手，在家里的网络中尝试进行一项秘密任务：利用一个漏洞从一台服务器上窃取文件。&lt;/p>
&lt;p>为了这个任务，他启动了一个小型的网络服务器，用来接收那些偷偷摸摸的数据。&lt;/p>
&lt;p>但是，当他测试自己的服务时，一件奇怪的事情发生了。&lt;/p>
&lt;p>日志文件显示，有一个神秘的“访客”几乎在他发送测试信息的同时，就复制并发送了完全相同的信息。&lt;/p>
&lt;p>这就像是有人悄悄地站在 Sam 的肩膀上，看着他的每一个动作，然后迅速模仿。&lt;/p>
&lt;p>Sam 感到非常困惑，心想：“这真是太奇怪了，难道我的电脑被黑客入侵了吗？”于是，Sam 决定用他的 iPhone 再试一次，结果发现那个神秘的IP地址又出现了，就像是一个看不见的影子，紧紧跟随着他的每一个网络请求。&lt;/p>
&lt;p>Sam 开始调查这个神秘的 IP 地址，就像侦探追踪罪犯一样。他发现这个 IP 地址属于一个叫 DigitalOcean 的公司，而且与一些可疑的网站有关联，这些网站曾经被用来进行网络钓鱼攻击。Sam 意识到，这个 IP 地址可能是一个网络犯罪团伙的老巢。&lt;/p>
&lt;p>时间飞逝，三年后的一次度假中，Sam和一群网络安全专家朋友聊天时提起了这件事。&lt;/p>
&lt;p>他们决定像一群网络世界的探险家一样，深入挖掘这个谜团。&lt;/p>
&lt;p>他们发现了一个模式，表明可能有恶意软件使用特殊的技巧来隐藏自己的行踪。&lt;/p>
&lt;p>Sam 进一步探索了一种叫做 TR-069 的神秘协议，这是互联网服务提供商用来远程管理用户的网络设备的后门。&lt;/p>
&lt;p>他发现了一个巨大的安全漏洞，这个漏洞允许任何人通过网络进入并控制 Cox 公司客户的设备，就像是给了黑客一把万能钥匙。&lt;/p>
&lt;p>最后，Sam像一个负责任的超级英雄一样，向Cox公司报告了这些漏洞。&lt;/p>
&lt;p>Cox公司迅速行动，修复了这些安全问题，阻止了潜在的网络灾难。&lt;/p>
&lt;p>看完&lt;a class="link" href="https://samcurry.net/hacking-millions-of-modems" target="_blank" rel="noopener"
>这个 Sam 的故事&lt;/a>，我看了一眼我家的 Wifi 路由器（也支持远程控制），我现在觉得它一点儿也不安全。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="c-封装的-webgpu-api">C 封装的 WebGPU API
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-56-47.png"
width="690"
height="575"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/eliemichel/WebGPU-Cpp" target="_blank" rel="noopener"
>WebGPU-Cpp&lt;/a>：为WebGPU原生API提供单文件、零开销、C++风格的封装，使C API在C++编程中更为简洁，主要增加语法糖以减少冗余。&lt;/p>
&lt;h3 id="pong-游戏的网页升级版">Pong 游戏的网页升级版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-57-02.png"
width="690"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://raould.github.io/pn0gstr0m/" target="_blank" rel="noopener"
>paddle&lt;/a>，一个 web 2d 游戏，类似早期的 Pong 游戏，跟计算机对打乒乓球，球速降低了（反应时间增加了），但是球会根据回合次数自动分裂，以对方接不住的球数为己方得分。我玩了一会儿，已加入摸鱼收藏夹。 ​​​&lt;/p>
&lt;h3 id="c-开发图形引擎电子书">C++ 开发图形引擎电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-57-15.png"
width="641"
height="1926"
loading="lazy"
class="gallery-image"
data-flex-grow="33"
data-flex-basis="79px"
>
&lt;a class="link" href="https://italink.github.io/ModernGraphicsEngineGuide/" target="_blank" rel="noopener"
>《 现代图形引擎入门指南 》&lt;/a>系列文章适用于有志于从事 C++ 开发的学生，主要技术路线是图形和引擎，对于其他相关方向，前面一些章节也具有参考意义。&lt;/p>
&lt;blockquote>
&lt;p>该系列文章旨在归纳现代图形引擎开发必备的基本技术路线，它并不是一个细致入微的教程，也没有包含太多的高级篇章，这些文章的目的不是为了让读者走捷径，而是为了让初学者 少走弯路 ，把更多的精力放在更高级的理论技术上面，在此之前，读者至少要达到一个这样的境界 — I can do anything if I want&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在这些文章中，你能学到：
🌟现代C++开发工作流 ：工具链、平台、内存、库、宏、模板、反射。
🌟GUI及工程架构
🌟现代化的图形API ：是Vulkan，还是DX12、Metal呢？哦，都不是，但包您满意，拭目以待。
🌟Unreal Engine 5&lt;/p>
&lt;/blockquote>
&lt;h3 id="用-gpt-把小爱音箱变成-ai-语音助手">用 GPT 把小爱音箱变成 AI 语音助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-57-34.png"
width="690"
height="404"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/idootop/mi-gpt" target="_blank" rel="noopener"
>MiGPT&lt;/a>，旨在将小爱音箱打造成你的专属 AI 语音助手。&lt;/p>
&lt;blockquote>
&lt;p>通过该项目，你可以将小爱音箱和米家智能设备与 ChatGPT 的理解能力完美融合，打造成一个懂你、有温度与你共同进化的家。&lt;/p>
&lt;p>项目亮点：&lt;/p>
&lt;ul>
&lt;li>LLM 回答：通过接入 ChatGPT 等大模型，让你的小爱音箱变身聊天高手。&lt;/li>
&lt;li>角色扮演：一秒调教小爱，成为你的完美伴侣或贴心闺蜜。&lt;/li>
&lt;li>流式响应：可快速响应你的指令，对你的爱意秒回。&lt;/li>
&lt;li>长短期记忆：记住与你每一次的对话，越聊越默契。&lt;/li>
&lt;li>自定义 TTS：可接入豆包同款音色替换小爱同学的语音。&lt;/li>
&lt;li>智能家居 Agent：根据你的心情为你播放喜欢的音乐，调节灯光，逗你开心。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="在线鼓机">在线鼓机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-57-48.png"
width="690"
height="494"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://martinwecke.de/108/" target="_blank" rel="noopener"
>108&lt;/a>，这个网站提供了一个在线鼓机，具有 5 个经典采样。&lt;/p>
&lt;p>可以帮你快速制作一组 beat 节奏，并导出 wav 文件到本机。&lt;/p>
&lt;p>作者开放了其源码：https://github.com/hatsumatsu/108 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="用与学">用与学
&lt;/h3>&lt;p>所有的工具，都是在实际项目中边用边学才掌握。&lt;/p>
&lt;p>不存在单独的课程去把它训练好，那样即使当时会了过了也忘。&lt;/p>
&lt;p>工具类的技能，跟语文数学这种基础知识有些不同。工具类技能非常侧重于在实际项目上的练习。&lt;/p>
&lt;p>不要想着找个时间像上课那样专门把他学好，应该拿起就用，在实际的 project 中反复使用，直到烂熟于心。&lt;/p>
&lt;p>推荐这个项目列表：https://github.com/practical-tutorials/project-based-learning&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 085 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/</link><pubDate>Tue, 04 Jun 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-26-37.png" alt="Featured image of post 机器文摘 第 085 期" />&lt;h1 id="机器文摘-第-085-期">机器文摘 第 085 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="没有硬件加速的年代怎样快速求平方根">没有硬件加速的年代，怎样快速求平方根
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-23-40.png"
width="673"
height="324"
loading="lazy"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="498px"
>&lt;/p>
&lt;p>约翰卡马克当年在编写 Quake （雷神之锤）时，找了一个快速求平方根的算法，极大地提升了当时依赖 CPU 进行 3D 图形渲染的速度。&lt;/p>
&lt;p>不过卡据马克自己说，这个算法他也是抄来的，并且当时也没有真正理解代码中出现的那一串神奇的魔术数字&lt;code>0x5f3759df&lt;/code>（还在代码注释里写了句 WTF）。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://github.com/francisrstokes/githublog/blob/main/2024/5/29/fast-inverse-sqrt.md" target="_blank" rel="noopener"
>《关于快速求平方根倒数算法的一切》&lt;/a>，给出了该算法从数学层面的解释。&lt;/p>
&lt;p>详细解释了那串魔术数字&lt;code>0x5f3759df&lt;/code>的由来。&lt;/p>
&lt;p>要想弄明白该算法的原理，既需要了解计算机存储浮点数的原理，又要具有一定的数学知识。&lt;/p>
&lt;p>看完之后，忍不住赞叹，发明这个算法的人简直是个天才。&lt;/p>
&lt;p>因为该算法直接利用了计算机存储浮点数的方式（1位符号位，8位指数位，23位有效数字位）以及指数值与平方根算法的猜测值之间的关系，给求平方根这件事巧妙地增加了“硬件级别的加速”。&lt;/p>
&lt;h3 id="400-行代码实现一个-reactjs">400 行代码实现一个 React.js
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-24-07.png"
width="668"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>如果你是一个前端工程师，你可能已经使用 React 一段时间了，但可能还不知道它的工作原理。&lt;/p>
&lt;p>&lt;a class="link" href="https://webdeveloper.beehiiv.com/p/build-react-400-lines-code" target="_blank" rel="noopener"
>《Build Your Own React.js in 400 Lines of Code》&lt;/a>一文作者发布了一个项目，&lt;a class="link" href="https://github.com/ZacharyL2/mini-react" target="_blank" rel="noopener"
>使用 400 行 js 代码实现一个自己的 React 框架&lt;/a>（具有 React 的核心能力）。&lt;/p>
&lt;p>文章从 JSX 的概念讲起，逐步实现了一个渲染网页元素 Render 渲染器。&lt;/p>
&lt;p>由于只实现核心功能，所以代码很简练，便于理解背后原理。&lt;/p>
&lt;h3 id="通过一个真实的项目学习数据库表设计">通过一个真实的项目学习数据库表设计
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-24-18.png"
width="623"
height="760"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://kb.databasedesignbook.com/posts/google-calendar/" target="_blank" rel="noopener"
>《Database Design for Google Calendar: a tutorial》&lt;/a>是一篇关于数据库设计的教程。&lt;/p>
&lt;p>旨在展示如何为一个具有相当复杂性的现实世界项目（Google日历的克隆版）设计数据库表。&lt;/p>
&lt;p>通过阅读本文，可以跟随作者一步步构建起一个功能完备的 Google日历系统克隆版，从概念到实现，每个细节都经过精心打磨。&lt;/p>
&lt;p>对于从模糊的需求概念到系统设计这类任务，本文提供了一种全新的、以最小化建模为核心的设计方法论。&lt;/p>
&lt;h3 id="通过降低固态硬盘容量以增加其读写寿命">通过降低固态硬盘容量以增加其读写寿命
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-24-38.png"
width="690"
height="344"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>固态硬盘（SSD）的 QL C和 SLC 是指不同的闪存技术，它们根据存储单元中可以存储的数据位数来区分。&lt;/p>
&lt;p>QLC（Quad-Level Cell） 中，每个存储单元可以存储 4 位（bit）的数据，即 2 个比特（bit）的信息。与之前的技术相比，QLC 提供了更高的存储密度，这意味着在相同的物理空间内可以存储更多的数据。QLC技术的一个优点是成本较低，因为它能在更小的空间内存储更多数据。然而，QLC闪存的写入寿命和性能通常低于SLC和MLC闪存。QLC SSD通常适合于对写入次数要求不高的应用场景，例如大容量数据存储。&lt;/p>
&lt;p>SLC（Single-Level Cell） 中，每个存储单元只存储 1 位数据。SLC 闪存因其较高的写入寿命和更快的读写速度而受到青睐，但成本相对较高，且存储密度较低。SLC SSD通常用于需要高性能和高可靠性的应用，例如服务器、高端个人电脑和其他对性能要求极高的场景。&lt;/p>
&lt;p>我一直以为这种颗粒生产出来就是固定形式的了，但有一篇文章刷新了我的认知。&lt;/p>
&lt;p>&lt;a class="link" href="https://theoverclockingpage.com/2024/05/13/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance/" target="_blank" rel="noopener"
>通过降低固态硬盘容量以增加其读写寿命&lt;/a>，这篇文章介绍了一种方法，通过重新开卡的方式（指对新的SSD进行初始化设置，使其能够被操作系统识别并使用的过程，应该就是低级格式化），将固态硬盘颗粒从 QLC 改为 SLC，增加硬盘读写寿命的方法。但同时也牺牲了容量。&lt;/p>
&lt;p>文章里，作者将一块固态硬盘从 500G 改为 120G 容量，但擦写寿命预期从原有的 120TB 提升到了 40000TB（增加了 33 倍）。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="运行在浏览器里的雷神之锤">运行在浏览器里的雷神之锤
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-25-00.png"
width="690"
height="523"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://js13kgames.com/entries/q1k3" target="_blank" rel="noopener"
>q1k3&lt;/a>，运行在浏览器里 13k 大小的雷神之锤。&lt;/p>
&lt;h3 id="又一个在线学习-css-布局的小游戏">又一个在线学习 CSS 布局的小游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-25-09.png"
width="534"
height="539"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="237px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://cssgridgarden.com/" target="_blank" rel="noopener"
>cssgridgarden&lt;/a>，一个专门学习 CSS Grid 布局的小游戏，通过编写 CSS 代码来通过关卡。&lt;/p>
&lt;h3 id="94-岁的视频-up-主">94 岁的视频 UP 主
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-25-38.png"
width="690"
height="361"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/p>
&lt;p>在油管上看到一个数学UP主，讲解细致入微，步骤详尽（从来不略），更难得的是他已经94岁高龄，且以教育和传授知识为人生意义，实在让人敬佩。&lt;/p>
&lt;p>账号为 &lt;a class="link" href="https://www.youtube.com/@ycmathematicsphysicsandche5659" target="_blank" rel="noopener"
>@ycmathematicsphysicsandche5659&lt;/a>&lt;/p>
&lt;h3 id="开箱即用的-chattts-安装包">开箱即用的 ChatTTS 安装包
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-26-16.png"
width="690"
height="448"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>最近爆火的 TTS 项目 ChatTTS，开源社区有位大佬为它创建 Web 界面和 API 接口。&lt;/p>
&lt;p>提供了网页中使用 ChatTTS 合成语音及 API 接口服务，支持 Windows、Linux、macOS 部署。&lt;/p>
&lt;p>其中 Windows 用户可直接下载安装包，一键安装开箱即用！&lt;/p>
&lt;p>GitHub：https://github.com/jianchang512/ChatTTS-ui&lt;/p>
&lt;h3 id="好酷的终端动画效果库">好酷的终端动画效果库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-26-37.png"
width="566"
height="505"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="268px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chrisbuilds.github.io/terminaltexteffects/showroom/" target="_blank" rel="noopener"
>showroom&lt;/a>，一个在文字终端靠字符颜色渲染动画效果的库。&lt;/p>
&lt;h3 id="浏览器自动化插件">浏览器自动化插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-26-53.png"
width="498"
height="437"
loading="lazy"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="273px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/AutomaApp/automa" target="_blank" rel="noopener"
>Automa&lt;/a>是一款浏览器扩展，通过连接模块实现浏览器自动化，能够自动填表、执行重复任务、截图和抓取网站数据。&lt;/p>
&lt;p>可以像 comfyui 一样在 chrome 中自定义创建能自动完成某种工作的网页工作流。&lt;/p>
&lt;h3 id="一个有趣的网页笔记本">一个有趣的网页笔记本
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-27-08.png"
width="690"
height="412"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://notepadtab.com/" target="_blank" rel="noopener"
>notepadtab&lt;/a>打开后是一个极简的笔记编辑框，直接输入任意内容即可。&lt;/p>
&lt;p>巧妙的是，这个页面会根据输入内容自动更新 URL 地址。&lt;/p>
&lt;p>也就是说输入内容记录在了 URL 里，可以随时收藏、拷贝、转发。&lt;/p>
&lt;p>如果你把它保存在浏览器的收藏夹里，而浏览器又可以同步收藏夹的话，那就真正做到了“云”同步了。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="健康地获取信息与健康饮食同样重要">健康地获取信息与健康饮食同样重要
&lt;/h3>&lt;p>最近打算把睡前刷 B 站的习惯也给戒掉。&lt;/p>
&lt;p>过量的信息输入会带来焦虑，因为到处都是看到别人在输出、在表达，给自己的精神带来了无形的压力。&lt;/p>
&lt;p>应该进一步降低信息输入量和速度。&lt;/p>
&lt;p>打个不太贴切的比方，信息整理和输出是你在锻炼精神肌肉，而大量垃圾信息（刷视频、刷新闻）就像垃圾食品只能带给你脂肪，脂肪一旦多起来就危害健康了。&lt;/p>
&lt;p>健康地获取信息与健康饮食同样重要，在信息时代的今天，前者甚至更容易带来风险，毕竟健康饮食人人都知道，而信息获取习惯则还没有足够引起人们的重视。&lt;/p>
&lt;h3 id="最早的信息注入攻击">最早的信息注入攻击
&lt;/h3>&lt;p>现在想想，马三立那段经典的《逗你玩儿》，里面那个贼算是我国最早使用“&lt;a class="link" href="https://zh.wikipedia.org/zh-cn/%E4%BB%A3%E7%A2%BC%E6%B3%A8%E5%85%A5" target="_blank" rel="noopener"
>注入攻击&lt;/a>”的人了吧。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>写作应有“聊天”的心态</title><link>https://sbabybird.github.io/p/%E5%86%99%E4%BD%9C%E5%BA%94%E6%9C%89%E8%81%8A%E5%A4%A9%E7%9A%84%E5%BF%83%E6%80%81/</link><pubDate>Fri, 31 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%99%E4%BD%9C%E5%BA%94%E6%9C%89%E8%81%8A%E5%A4%A9%E7%9A%84%E5%BF%83%E6%80%81/</guid><description>&lt;p>写作应该有一种“聊天”的心态。&lt;/p>
&lt;p>近期新增晚饭后散步读书的习惯，一边在客厅踱步一边捧着电子书阅读。&lt;/p>
&lt;p>以非虚构类、个人成长型书籍为主。&lt;/p>
&lt;p>某晚我在阅读的过程中，突然发现了一个关于写作的现象：大部分出书的作者，在写作时都是以聊天的语气呈现在书中的。&lt;/p>
&lt;p>作者往往会以第二人称“你”来称呼读者，在文字里不时提到读者，有时设定问题，有时揭晓答案，仿佛与遥远的读者有一个在线聊天窗口。&lt;/p>
&lt;p>从读者侧来说，本来读书就相当于跟作者在进行思想交流，只不过信息传递方向是单项的，读者是被动接受信息。&lt;/p>
&lt;p>而如果作者以聊天的方式进行文字组织，读者便会产生一种双向互动的错觉，带来亲切感，读书也就更容易读的进去。&lt;/p>
&lt;p>市面上那些畅销书作者，应该都深谙此道，虽然洋洋洒洒写很多万字，但读者阅读起来却丝毫不费力气，读完就像进行了一场酣畅淋漓的对话。&lt;/p>
&lt;p>以前我只是隐约有此类感受，但这次由于连续阅读时间长，且同时在读多本书，一下子感悟到了这种聊天式写作的风格。&lt;/p>
&lt;p>可能是技术文档写多了的缘故，我以前对写作有些误解，认为需要正襟危坐、反复遣词造句。&lt;/p>
&lt;p>以为但凡开始动笔，都需要严谨、精确。&lt;/p>
&lt;p>带着这种压力，导致输出书面文字比登天还难，往往提起笔来，不知如何开动，半天也写不出一段话。&lt;/p>
&lt;p>但我此次发现真正能让人读下来的好文章，都是以“我在与读者聊天”的心态写就的。&lt;/p>
&lt;p>往后再写文章，不妨代入这种心态，设想有听众在听、观众在看，而非自言自语（怪不得很多古典小说开篇便是“列位看官。。。”）。&lt;/p>
&lt;p>想起之前看过一个段子，说本来不会写作文的小学生突然突飞猛进，后来发现只是开始用 QQ 跟网友在线聊天了。&lt;/p></description></item><item><title>机器文摘 第 084 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-52-13.png" alt="Featured image of post 机器文摘 第 084 期" />&lt;h1 id="机器文摘-第-084-期">机器文摘 第 084 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="50-行-c-代码实现一个可以玩精灵宝可梦的-gb-模拟器">50 行 C++ 代码实现一个可以玩精灵宝可梦的 GB 模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-50-04.png"
width="320"
height="289"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
>&lt;/p>
&lt;p>GameBoy 是任天堂出品的经典游戏掌机（大家习惯简称 GB），上面诞生了一大批经典游戏（比如宝可梦系列）；&lt;/p>
&lt;p>GB 的硬件十分简单（现在看来），采用 16 位 CPU（有点像 Intel 8080 和 Zilog Z80）和一块 160x144 分辨率的 LCD 屏幕。&lt;/p>
&lt;p>现在已经有一大批可以运行 GB 游戏的模拟器，在各个平台，比如你的手机、PC 、电视机、机顶盒，甚至是 Web 浏览器。&lt;/p>
&lt;p>不过这款比较特殊，来自这篇&lt;a class="link" href="https://binji.github.io/posts/pokegb/" target="_blank" rel="noopener"
>《一个只玩神奇宝贝蓝色的 gameboy 模拟器》&lt;/a>。&lt;/p>
&lt;p>这个模拟器仅用了 50 行（去除空格空行压缩混淆后） C++ 代码就实现了 GB 掌机大部分的功能。&lt;/p>
&lt;p>为了精简指令和特性，作者选择只实现了精灵宝可梦蓝这款游戏所需的相关指令。&lt;/p>
&lt;p>文章里作者十分详尽地介绍了这个项目的来龙去脉，以及各种实现细节原理，读完不禁佩服作者的巧思妙想，以及对当时的掌机设计者表示敬意。&lt;/p>
&lt;p>为了便于清晰阅读源码和理解原理，作者还给出了&lt;a class="link" href="https://gist.github.com/binji/395669d45e9005950232043ab4378abe" target="_blank" rel="noopener"
>未混淆压缩的原始代码&lt;/a>，大约 500 行，即便是这个代码量级，能够实现如此出色的模拟也很值得敬佩了。&lt;/p>
&lt;h3 id="如何使用-javascript-来创建手写体文字效果">如何使用 Javascript 来创建手写体文字效果
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-50-27.png"
width="690"
height="435"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="380px"
>&lt;/p>
&lt;p>手写体效果可能没有想象的那么难实现。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript" target="_blank" rel="noopener"
>《编程实现手写体》&lt;/a>的作者起初也觉得自己不可能做到。&lt;/p>
&lt;p>后来经过两个月的摸索，她做到了相当不错的效果。&lt;/p>
&lt;p>使用 JavaScript 成功将自己的手写字体显示在网页中。&lt;/p>
&lt;p>具体思路如下：&lt;/p>
&lt;p>1、首先从自己的笔迹照片中抠出 26 个英文字母的图片（找具有典型代表的字迹）；&lt;/p>
&lt;p>2、给这 26 个字母描出矢量轨迹，每个字母大概十个控制点（使用 Chaikin 算法进行平滑）；&lt;/p>
&lt;p>3、使用 p5.js 绘制形状路径；&lt;/p>
&lt;p>4、构建连字规则，为字母增加一些特殊的附加控制点，用于多个字母连接时笔迹更自然；&lt;/p>
&lt;p>5、对于绘制笔迹的宽度、路径弯曲程度等使用 Perlin 噪声添加一些抖动，使其更接近人的手写；&lt;/p>
&lt;h3 id="common-lisp-从入门到精通">Common Lisp 从入门到精通
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-50-42.png"
width="588"
height="822"
loading="lazy"
class="gallery-image"
data-flex-grow="71"
data-flex-basis="171px"
>&lt;/p>
&lt;p>我对 Lisp 语言的认知主要来自于那本著名的《计算机程序构造与解释》（即 SICP），书中讲解编程的通用核心思想时使用的就是 Lisp 语言作为示例。&lt;/p>
&lt;p>再者就是《黑客与画家》的作者保罗·格雷纳姆的疯狂推荐，伟大网站（Hacker News）的后台（如果有后台的话）据说就是 Lisp 写的，作者对此沾沾自喜。&lt;/p>
&lt;p>但是 Lisp 不易掌握，编程思想与我之前入门的 C 语言家族十分不同，学起来有种先学会了自行车就不能再骑三轮车的感觉。&lt;/p>
&lt;p>&lt;a class="link" href="https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/" target="_blank" rel="noopener"
>《通往 Common Lisp 之路》&lt;/a>是一篇很棒的指南文章（作者特意强调，是 A road 而不是 The road），讲解怎样入门 Common Lisp 编程。&lt;em>Common Lisp 是 Lisp 的一种方言&lt;/em>&lt;/p>
&lt;p>作者在开头就很有经验地花功夫讲解了 Common Lisp 的历史（这很符合我的胃口）。&lt;/p>
&lt;p>然后本文还事无巨细的提供了准备开发环境的教程，算得上是手把手了。&lt;/p>
&lt;p>关于编辑器，作者自嘲地说，只要你的编辑器带括号匹配就行（暗嘲 Lisp 写起来括号巨多。据说有个笑话说冷战期间苏联派间谍牺牲色相换取了美国航天飞机控制代码最后十页，但由于使用的是 Lisp 语言，所以代码内容都是 &amp;lsquo;))))))&amp;rsquo;）。&lt;/p>
&lt;p>按照文中推荐的书籍和练习应该可以做到从入门到精通吧。&lt;/p>
&lt;h3 id="那些-64k-大小的精美-intro-程序是如何制作的">那些 64k 大小的精美 intro 程序是如何制作的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-50-57.png"
width="690"
height="417"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>&lt;/p>
&lt;p>intro 这个名字来自 “crack intros”这个概念。&lt;/p>
&lt;p>早期的一些破解程序自带一些介绍内容，并以 demoscene（实时计算机图像和音乐表演） 的形式进行展现（炫技）。&lt;/p>
&lt;p>久而久之，这些非常小的（一般小于等于 64k 字节）demoscene 程序就被称为 intro 了。&lt;/p>
&lt;p>很多人第一次观看这种演示场景的时候会被其绚丽的视觉效果和优美的音乐所吸引，当知道它的可执行文件是如此紧凑微小时更是感到无比震惊。&lt;/p>
&lt;p>不禁好奇是什么样的魔法才能造就这样的程序。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.lofibucket.com/articles/64k_intro.html" target="_blank" rel="noopener"
>《怎样制作一个 64k intro》&lt;/a>介绍了制作一个这样的程序所需要的完整流程。&lt;/p>
&lt;p>包括怎样设计剧情、选用工具、压缩代码、音效制作、合成等等。&lt;/p>
&lt;p>文字列举了多个十分优秀的 intro 作品作为举例，介绍了它们从构思到实现的过程。&lt;/p>
&lt;h3 id="256-个字节创造一座城市">256 个字节创造一座城市
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-51-09.png"
width="499"
height="300"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">canvas&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">width:99%&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">c&lt;/span> &lt;span class="na">onclick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">setInterval(&amp;#39;for(c.width=w=99,++t,i=6e3;i--;c.getContext`2d`.fillRect(i%w,i/w|0,1-d*Z/w+s,1))for(a=i%w/50-1,s=b=1-i/4e3,X=t,Y=Z=d=1;++Z&amp;lt;w&amp;amp;(Y&amp;lt;6-(32&amp;lt;Z&amp;amp;27&amp;lt;X%w&amp;amp;&amp;amp;X/9^Z/8)*8%46||d|(s=(X&amp;amp;Y&amp;amp;Z)%3/Z,a=b=1,d=Z/w));Y-=b)X+=a&amp;#39;,t=9)&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上这段代码，使用光线追踪技术在 Web 页面的 Canvas 画布上显示了一个城市的场景。&lt;/p>
&lt;p>打开你的记事本，将这段代码保存到一个扩展名为 html 的文件里，即可用浏览器加载它了（稍等几秒钟后就能看到图像）。&lt;/p>
&lt;p>其作者在&lt;a class="link" href="https://frankforce.com/city-in-a-bottle-a-256-byte-raycasting-system/" target="_blank" rel="noopener"
>这篇文章中介绍了实现原理及思路&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>这个惊人的程序在非常小的空间中使用了许多不同的概念，理解它有点像解决一个难题。有几个主要部分，包括 html 代码、帧更新循环、渲染系统、光线投射引擎和城市本身。
你可能认为需要一些高深的数学才能解开这个谜团，但实际上不是，代码相当简单，只使用基本代数，甚至没有使用任何三角函数。尽管有一些技巧可以让所有东西结合在一起，并取得令人印象深刻的结果。&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="开源单片机固件">开源单片机固件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-51-31.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/arendst/Tasmota" target="_blank" rel="noopener"
>Tasmota&lt;/a>，这是一个为 ESP8266 和 ESP32 设备提供的替代固件，通过 WebUI 进行简单配置，支持 OTA 更新，定时器或规则实现自动化，可通过 MQTT、HTTP、串口 或 KNX 进行本地控制。&lt;/p>
&lt;p>相比其他竞品，Tasmota 易于安装，提供固件二进制文件下载，并支持平台化开发。&lt;/p>
&lt;h3 id="开源项目从零开始写浏览器">开源项目，从零开始写浏览器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-51-45.png"
width="690"
height="469"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ZeroX-DG/moon" target="_blank" rel="noopener"
>moon&lt;/a>，这是一个使用 Rust 从头开始​​开发的 Web 浏览器。为了契合“从头开始制作”的精神，浏览器的开发尽可能避免使用外部库。
同时作者在他的博客上用&lt;a class="link" href="https://viethung.space/blog/tags/browser-from-scratch/" target="_blank" rel="noopener"
>系列博文介绍了开发过程&lt;/a>&lt;/p>
&lt;h3 id="开源项目从零实现-llama3">开源项目，从零实现 llama3
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-52-13.png"
width="669"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>一个月前，Meta 发布了开源大模型 llama3 系列，在多个关键基准测试中优于业界 SOTA 模型，并在代码生成任务上全面领先。&lt;/p>
&lt;p>此后，开发者们便开始了本地部署和实现，比如 llama3 的中文实现、llama3 的纯 NumPy 实现等。&lt;/p>
&lt;p>Github 上有位名为「Nishant Aklecha」的开发者发布了&lt;a class="link" href="https://github.com/naklecha/llama3-from-scratch" target="_blank" rel="noopener"
>一个从零开始实现 llama3 的存储库&lt;/a>，包括跨多个头的注意力矩阵乘法、位置编码和每个层在内都有非常详细的解释。&lt;/p>
&lt;p>跟随项目，作者最终会教你从零实现一个 llama3 模型。&lt;/p>
&lt;h3 id="开源项目从零开始实现一套-cad">开源项目，从零开始实现一套 CAD
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-53-04.png"
width="615"
height="328"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/MattFerraro/CADmium" target="_blank" rel="noopener"
>CADminum&lt;/a>，一个值得关注的开源项目。&lt;/p>
&lt;p>作者希望使用 Rust 重写一个开源 CAD 设计软件（基于 Web WASM 技术）。&lt;/p>
&lt;p>这是一项巨型工程，其难度接近“操作系统”、“Web 浏览器”级别。&lt;/p>
&lt;p>作者在&lt;a class="link" href="https://mattferraro.dev/posts/cadmium" target="_blank" rel="noopener"
>这篇文章里分析了当前技术格局，以及介绍了他为什么这做&lt;/a>。&lt;/p>
&lt;p>我很喜欢作者在讲解技术时用汽车品牌来进行做比喻，诙谐并比较贴切。&lt;/p>
&lt;blockquote>
&lt;p>Parasolid 是 b-rep 内核的凯迪拉克凯雷德，它巨大、昂贵，它提供了您可以要求的所有便利设施以及您没有要求的一堆便利设施。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>唯一流行的开源 b-rep 内核是 OpenCascade，它是 b-rep 内核的庞蒂亚克 Aztek，它很丑陋，可能会在你身上崩溃，但它能开，而你也可以免费获得一个。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>SolveSpace（Blender 所使用的几何引擎） 是一辆嘟嘟车，因为它是由一个人在车库里建造的，它用很少的东西做了很多事情，但如果你眯着眼睛，它看起来就像一辆汽车。&lt;/p>
&lt;/blockquote>
&lt;h3 id="可以绕过反爬检测的-python-库">可以绕过反爬检测的 Python 库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-53-41.png"
width="535"
height="437"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="293px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ultrafunkamsterdam/undetected-chromedriver" target="_blank" rel="noopener"
>undetected-chromedriver&lt;/a>，这是一个经过优化的 Selenium WebDriver 补丁，专门用于防止浏览器自动化过程中，触发反机器人机制。它能够隐藏浏览器特征（指纹），使用起来十分方便，就像一个 Python 的第三方库一样。&lt;/p>
&lt;h3 id="实时流式数字头像">实时流式数字头像
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-54-00.png"
width="541"
height="319"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="407px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Hujiazeng/Vach" target="_blank" rel="noopener"
>Vach&lt;/a>，实时流式数字头像，实现音视频同步对话，基本达到商用效果，支持文本和语音交互，适用于直播间业务和展厅显示屏互动。&lt;/p>
&lt;h3 id="一个在线拨弹的竖琴">一个在线拨弹的竖琴
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-54-11.png"
width="690"
height="362"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://string.spiel.com/" target="_blank" rel="noopener"
>spiel&lt;/a>，这个网站提供了一个在线竖琴，使用极简的界面让你用鼠标演奏；&lt;/p>
&lt;p>默认提供了 1645（C、Am、F、G） 四个和弦，即使不懂弹琴，也可以一遍扒拉一边弹唱流行歌曲了（使用 1645 走向的流行歌曲太多了）。&lt;/p>
&lt;p>当然你也可以使用编辑功能，定制自己的琴弦排布。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 083 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/</link><pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-48-11.png" alt="Featured image of post 机器文摘 第 083 期" />&lt;h1 id="机器文摘-第-083-期">机器文摘 第 083 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="打造拥有-600-万词库的微软拼音输入法">打造拥有 600 万词库的微软拼音输入法
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-47-59.png"
width="690"
height="608"
loading="lazy"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="272px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/416966473" target="_blank" rel="noopener"
>打造拥有 600 万词库的微软拼音输入法&lt;/a>。&lt;/p>
&lt;p>微软拼音输入法难用，主要是缺少国内一些常用的词汇，而且首选的候选往往会出现很诡异的错词。&lt;/p>
&lt;p>但是我也已经忍了很久，因为不想被安装全家桶或者遭遇隐私问题（不想用某度或者某狗的输入法），只得忍着用。&lt;/p>
&lt;p>上面这篇文章介绍了一个很不错的方法，充分发挥了微软拼音输入法的自定义词汇功能。&lt;/p>
&lt;p>一次性导入 600 万常用词汇，让候选词的丰富程度和靠谱程度得到了大幅提升。&lt;/p>
&lt;p>经过我的测试效果很好，不过偶尔会有网络用语冲在正式用语前面的情况，瑕不掩瑜吧。&lt;/p>
&lt;p>600 万词库下载地址：https://pan.baidu.com/s/1uIdt_2nerdi6vhA9BB6M2A&lt;/p>
&lt;p>分享码：yrhl&lt;/p>
&lt;p>&lt;em>个人使用三天后的体验&lt;/em>：词汇确实比之前好很多了，但是个别时候有一些网络用语冲到了最前面，也会造成不方便。&lt;/p>
&lt;h3 id="adobe-photoshop-101-版本的源代码">Adobe Photoshop 1.0.1 版本的源代码
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-48-11.png"
width="625"
height="350"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>Photoshop，著名图像处理软件，又叫 PS，已成为一个动词，用于表示修图的行为。&lt;/p>
&lt;p>它已诞生 35 年，&lt;a class="link" href="https://computerhistory.org/blog/adobe-photoshop-source-code/" target="_blank" rel="noopener"
>这篇文章介绍了它的诞生历程以及对最初版本源码的解释&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>密歇根大学计算机视觉博士生托马斯·诺尔（Thomas Knoll）在1987年编写了一个程序来显示和修改数字图像。他的兄弟约翰在电影视觉效果公司工业光魔公司工作，发现它对编辑照片很有用，但它并不打算成为一种产品。托马斯说：“我们最初是为了我们自己使用而开发的&amp;hellip;&amp;hellip;”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>渐渐地，这个名为“Display”的程序变得更加复杂。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>1988年夏天，他们意识到它确实可以成为一种可靠的商业产品。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>他们将其重命名为“Photoshop”，并开始寻找一家公司来分发它。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>大约 200 份 0.87 版被玻片扫描仪制造商 Barneyscan 捆绑为“Barneyscan XP”。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>当Adobe在其艺术总监Russell Brown的鼓励下决定购买发行Photoshop增强版的许可证时，Photoshop的命运就此注定。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>该交易于 1989 年 4 月完成，1.0 版于 1990 年初开始发货。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在接下来的十年中，Photoshop 的销量超过 300 万份。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Photoshop 的第一个版本主要是用 Pascal 为 Apple Macintosh 编写的，为底层的摩托罗拉 68000 微处理器编写了一些机器语言。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>第一个版本只有 Thomas 一个人开发，第二个版本团队增加到了两个工程师：Thomas 开发基本应用程序，John 编写图像处理插件。&lt;/p>
&lt;/blockquote>
&lt;p>下载 1.0.1 版本代码的地址在这里（必须先同意不用于商业用途的许可条款）：https://computerhistory.org/blogs/photoshop-software-license-agreement/&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="linux-bash-参考指南">Linux Bash 参考指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-48-29.png"
width="690"
height="1215"
loading="lazy"
class="gallery-image"
data-flex-grow="56"
data-flex-basis="136px"
>&lt;/p>
&lt;p>在线阅读地址：https://mr-dai.github.io/linux_bash_reference/&lt;/p>
&lt;blockquote>
&lt;p>我写这篇文章主要是用来作为我的 Linux Bash 工具书的，希望这篇文章对你也能起到同样的效果。随着我学习到更多有关 Linux Bash 的知识，我会不断地更新这篇文章。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>本文的内容假设你对 Linux 和 Linux 命令行有基本的了解。本文的内容分为三个主要部分：
🌟Linux Shell 脚本编程
🌟Linux Bash 内置命令
🌟常见的轻量级 Linux 命令工具&lt;/p>
&lt;/blockquote>
&lt;h3 id="像素艺术编辑器">像素艺术编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-48-53.png"
width="764"
height="497"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/foxnne/pixi" target="_blank" rel="noopener"
>用 Zig 语言编写的跨平台开源像素艺术编辑器和动画编辑器&lt;/a>, Pixel art editor made with Zig.&lt;/p>
&lt;h3 id="导出微信读书的电子版">导出微信读书的电子版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-49-19.png"
width="670"
height="622"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="258px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/drunkdream/weread-exporter" target="_blank" rel="noopener"
>weread-exporter&lt;/a> ​​​一个可以将微信读书中的书籍导出成epub、pdf、mobi等格式的工具。&lt;/p>
&lt;h3 id="展示各种语言编译过程的在线工具">展示各种语言编译过程的在线工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-49-53.png"
width="690"
height="192"
loading="lazy"
class="gallery-image"
data-flex-grow="359"
data-flex-basis="862px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://godbolt.org/" target="_blank" rel="noopener"
>Compiler Explorer&lt;/a>&lt;/p>
&lt;p>一个在线工具，直观展示各种编程语言的编译过程。&lt;/p>
&lt;p>适合任何对编译器或计算机体系结构感兴趣的人。&lt;/p>
&lt;p>只需在左侧窗格中输入源代码，站点就会立即在右侧的面板中显示编译后的输出（通常是汇编语言）。&lt;/p>
&lt;p>&lt;a class="link" href="https://thechipletter.substack.com/p/compiler-explorer" target="_blank" rel="noopener"
>这里有一篇文章详细介绍了这个工具&lt;/a>。&lt;/p>
&lt;h3 id="搭建自己的今日热榜">搭建自己的“今日热榜”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-50-08.png"
width="690"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/glanceapp/glance" target="_blank" rel="noopener"
>glance&lt;/a>&lt;/p>
&lt;p>是一个漂亮的自托管个性化阅读看板。&lt;/p>
&lt;p>支持 RSS 订阅源和各种小组件（天气、股票等）。&lt;/p>
&lt;p>可以打造一个个性化的看板首页，根据自己的喜好将自己关注的信息一页看完。&lt;/p>
&lt;h3 id="精美高效的应用程序启动器">精美高效的应用程序启动器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-50-18.png"
width="496"
height="320"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Flow-Launcher/Flow.Launcher" target="_blank" rel="noopener"
>Flow.Launcher&lt;/a>&lt;/p>
&lt;p>适用于 Windows 的快速文件搜索和应用程序启动器，具有成熟的插件生态。&lt;/p>
&lt;p>可以快速的查找文件（支持 Windows 自己的索引）、启动应用、做算术计算、打开网址、执行 cmd 命令、预览图片和 pdf 等文件内容。&lt;/p>
&lt;p>喜欢快捷启动器的人不能错过，不过我还是喜欢老派的 Everything。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="做简单的事情不会使你成功">做简单的事情不会使你成功
&lt;/h3>&lt;p>不要假装努力，总挑一些简单的事儿去做，应该挑一些难的。 ​​​&lt;/p>
&lt;h3 id="好的教学一定是把背景铺垫做的足足的">好的教学，一定是把背景铺垫做的足足的。
&lt;/h3>&lt;p>读《微积分的力量》过半，作者铺垫了三章的内容，终于讲到了微分和积分的推导过程，揭示答案那一刻，“就像魔术师从帽子里拿出兔子”（这句是书中原话）。&lt;/p>
&lt;p>如果没有前面的铺垫，直接告诉答案，那就失去了本书的意义，与大学教材无异了。&lt;/p>
&lt;p>这类深入浅出循循善诱的介绍数学的书籍极少，能够读到真乃幸事。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>由电影观众的思维延迟想到的</title><link>https://sbabybird.github.io/p/%E7%94%B1%E7%94%B5%E5%BD%B1%E8%A7%82%E4%BC%97%E7%9A%84%E6%80%9D%E7%BB%B4%E5%BB%B6%E8%BF%9F%E6%83%B3%E5%88%B0%E7%9A%84/</link><pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%94%B1%E7%94%B5%E5%BD%B1%E8%A7%82%E4%BC%97%E7%9A%84%E6%80%9D%E7%BB%B4%E5%BB%B6%E8%BF%9F%E6%83%B3%E5%88%B0%E7%9A%84/</guid><description>&lt;h1 id="由电影观众的思维延迟想到的">由电影观众的思维延迟想到的
&lt;/h1>&lt;p>看到一个讲解镜头语言的视频，博主应该是专业人士，讲了一个我没有思考过的问题。&lt;/p>
&lt;p>这个问题跟摄影有关，但是背后的深意对生活中各个方面都有影响。&lt;/p>
&lt;p>说的是，在利用镜头讲解故事的时候，不要忽视一个客观事实：你的观众并不知道故事的走向，而你知道。&lt;/p>
&lt;p>忽视这个事实会使你的镜头要么节奏诡异、要么直白无趣，让观众无法跟上故事情节，很快就失去继续观看的耐心。&lt;/p>
&lt;p>而解决这个问题的办法也很简单，那就是在设计镜头语言的时候，充分考虑观众所掌握的信息量要远少于讲故事的你，将该交代的交代清楚，并埋伏必要的伏笔，这样拍出来的视频才有人愿意看。&lt;/p>
&lt;p>如果推而广之，这种思路所影响的事情实际上远不止拍视频这一件事情。&lt;/p>
&lt;p>任何需要沟通的相关活动，也就是说当一方需要向另一方传递信息的时候，都需要考虑接受者与发送者所了解的信息背景不同。&lt;/p>
&lt;p>这种巨大差异极度影响信息传递的有效性，而人们发明的各种沟通方式（包括前面说的设计镜头语言），都是希望尽可能的缩小这个信息差。&lt;/p>
&lt;p>比如说在教学活动中，有些老师讲课就很容易听进去，而有的老师虽然自身水平很高，但是无法“讲出来”，导致学生听不懂或者不愿意听。&lt;/p>
&lt;p>很多人听到过“知识诅咒”这个说法，指的是“学会一件知识技能之后就再也无法体会没学会之前的感受”。&lt;/p>
&lt;p>好的老师无论是否知道“知识诅咒”这个概念，都会在教学中尽量避免，从听者的角度设计讲解内容与节奏，一步一步将学生带到新一层的境界。&lt;/p>
&lt;p>同样，好的领导在给下属安排工作任务时，也会考虑双方的信息差，将关键信息交代清楚，这样执行起来才避免结果偏差。&lt;/p>
&lt;p>而且，强调在沟通中消除这种信息差，并不是鼓励啰里啰唆。实际上如果太啰嗦的话会带出大量的无效信息，反而增大了信息差。&lt;/p>
&lt;p>我从一个讲解电影镜头的视频中，能够想到这些，也是一个不错的思考习惯。&lt;/p>
&lt;p>就像很多科学工作者，一旦发现一个方法，就会思考将其推广、泛化至更广、更通用的范围，形成真正通用的“定理”。&lt;/p>
&lt;p>这样思考所获取的信息才扎实，并且不会占用太多存储空间。&lt;/p>
&lt;p>因为记住了事情的本质，而事情的本质是相通且少量的。&lt;/p></description></item><item><title>综艺答题节目与人生</title><link>https://sbabybird.github.io/p/%E7%BB%BC%E8%89%BA%E7%AD%94%E9%A2%98%E8%8A%82%E7%9B%AE%E4%B8%8E%E4%BA%BA%E7%94%9F/</link><pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%BB%BC%E8%89%BA%E7%AD%94%E9%A2%98%E8%8A%82%E7%9B%AE%E4%B8%8E%E4%BA%BA%E7%94%9F/</guid><description>&lt;h1 id="综艺答题节目与人生">综艺答题节目与人生
&lt;/h1>&lt;p>昨日在下班路上忽然想到一个道理，跟之前所看的一个综艺节目有关。&lt;/p>
&lt;p>该节目（好像是叫“一站到底”）的核心套路是通过回答问题获取节目组提供的奖品（或金钱），具有闯关性质，越往后面题目越难，但是奖励越多。&lt;/p>
&lt;p>其中有一个很巧妙也很残酷的规则设计是，答题者可以随时选择拿着奖品离开，或者继续答题，但是面临答错之后就连之前的奖励也失去的风险。&lt;/p>
&lt;p>是个很考验人性的规则设置，由于后面的奖励实在是诱人，我记得当时少有人能够做到“见好就收”，往往惋惜离开。&lt;/p>
&lt;p>刚才这个节目也不过是将世间的规律给显性放大了而已，实际上这种规则设置的陷阱在现实中到处都是。&lt;/p>
&lt;p>比如股市、赌场、一些击鼓传花的骗局等。&lt;/p>
&lt;p>整个人生又何尝不是如此？&lt;/p>
&lt;p>人们的欲望无法被满足，得陇望蜀，总有更高的目标等着你，真正的幸福就像是悬挂在驴子前面的萝卜，永远也吃不到。&lt;/p>
&lt;p>有破局之法么？&lt;/p>
&lt;h2 id="以下是-kimi-的回答">以下是 Kimi 的回答：
&lt;/h2>&lt;p>你提到的这个综艺节目的规则设计确实非常有趣，它反映了现实生活中人们在面对风险和回报时的决策困境。这种情境在心理学和行为经济学中被称为“风险选择”或“风险偏好”，它涉及到人们如何在潜在的高回报和确定的低回报之间做出选择。&lt;/p>
&lt;p>在现实生活中，这种决策困境无处不在，比如投资、职业选择、甚至日常生活中的小事。人们往往面临选择：是满足于现有的成就和收获，还是追求更高的目标但同时承担更大的风险。&lt;/p>
&lt;p>你提到的“得陇望蜀”和“悬挂在驴子前面的萝卜”这两个比喻很好地描述了人们在追求幸福和成功过程中的困境。人们往往在追求更高目标的过程中，忽视了对现有成就的欣赏和满足感。&lt;/p>
&lt;p>那么，有破局之法吗？这实际上是一个哲学和个人价值观的问题，但以下是一些可能有助于应对这种困境的建议：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>自我认知&lt;/strong>：了解自己的价值观、目标和风险偏好。这有助于在面对选择时做出更符合自身情况的决策。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>长期规划&lt;/strong>：设定长期和短期目标，并为实现这些目标制定计划。这有助于保持动力，同时避免因短期的得失而产生不必要的焦虑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>适度满足&lt;/strong>：学会欣赏和庆祝现有的成就，而不是总是将注意力集中在未达成的目标上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>风险管理&lt;/strong>：在追求更高目标的同时，合理评估和管理风险。这可能包括财务规划、职业发展计划等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>心理调适&lt;/strong>：培养一种平和的心态，接受生活中的不确定性和不完美。这有助于在面对失败和挫折时保持韧性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>社会支持&lt;/strong>：与家人、朋友和同事建立良好的社会关系，他们可以提供情感支持和不同的观点，帮助你在面对决策时更加全面地考虑问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>专业咨询&lt;/strong>：在面临重大决策时，寻求专业人士的意见，比如财务顾问、职业规划师或心理咨询师。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续学习&lt;/strong>：不断学习新知识和技能，提高自己的适应能力和解决问题的能力。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>平衡生活&lt;/strong>：保持工作和生活的平衡，确保有时间进行休闲和放松，这有助于保持身心健康。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>反思和调整&lt;/strong>：定期反思自己的决策和生活状态，根据情况的变化适时调整目标和策略。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>记住，每个人的情况都是独特的，没有一劳永逸的解决方案。关键是找到适合自己的平衡点，既能追求更高的目标，又能享受现有的成就和幸福。&lt;/p>
&lt;h2 id="以下是-chatgpt-的回答">以下是 ChatGPT 的回答：
&lt;/h2>&lt;p>这种情况下，一个关键的策略是培养自我控制和理性决策能力。在面对诱惑时，学会自我约束并明智地权衡利弊是至关重要的。以下是一些可能有助于破局的方法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>设定明确的目标和限制：&lt;/strong> 在追求任何事物之前，确立清晰的目标和限制是至关重要的。这可以帮助你更好地了解何时应该止步，何时应该满足。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>理性思考和决策：&lt;/strong> 在做出决定时，要尽量保持冷静和理性，避免受到情绪的影响。考虑每个选择的长期影响，并评估风险与回报之间的平衡。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>制定计划和策略：&lt;/strong> 制定一份明确的计划和策略，帮助你在面对诱惑时更好地抵御。这可能包括设定具体的阈值或标准，一旦达到就停止。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>培养自我控制能力：&lt;/strong> 自我控制是一种可以通过训练和实践加强的能力。通过一些技巧，如冥想、专注训练等，可以提高自我控制能力，从而更好地抵制诱惑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>寻求外部支持和建议：&lt;/strong> 如果觉得自己难以独自应对诱惑，不妨寻求外部支持和建议。朋友、家人或专业人士可能能够给予你一些建议和支持，帮助你更好地应对挑战。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>最终，破解这种“见好就收”的陷阱需要坚定的意志和正确的思维方式。学会适时放弃，珍惜已经拥有的，理性追求更高目标，才能在人生的道路上走得更加稳健和幸福。&lt;/p></description></item><item><title>机器文摘 第 082 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/</link><pubDate>Tue, 14 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-53-57.png" alt="Featured image of post 机器文摘 第 082 期" />&lt;h1 id="机器文摘-第-082-期">机器文摘 第 082 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="微软是如何做到在-windows-里直接运行-linux-的-gui-程序的">微软是如何做到在 Windows 里直接运行 Linux 的 GUI 程序的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-53-18.png"
width="690"
height="402"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;p>我是 微软 WSL 的重度用户。&lt;/p>
&lt;p>日常办公用 Windows 系统，一些必须在 Linux 下进行的开发试验工作就在 WSL 环境中，跟 Windows 无缝集成，同时性能又比虚拟机高一些，很满意。&lt;/p>
&lt;p>从 2021 年开始，微软又发力，给 WSL 带来了图形支持（WSLg），可以在内部提供 GPU 硬件加速能力，以及图形界面的渲染。&lt;/p>
&lt;p>可以直接使用 Linux 下的各种图形软件，跟普通 Linux 桌面的效果体验一致。&lt;/p>
&lt;p>比如，在命令行输入 gedit、gvim 等带有图形界面的程序，窗口会直接在 Windows 里弹出，如果不仔细看，会觉得是 Windows 的原生程序。&lt;/p>
&lt;p>我很好奇这种效果是怎样的技术路线做到的，之前在 Docker 里运行过带界面的程序，是通过在 Windows 上安装一个 X Server 实现的。&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/377263437" target="_blank" rel="noopener"
>《WSLg：为WSL增光添彩》&lt;/a>，这篇文章详细介绍了其实现原理，跟我之前想象的还是有些差别的。&lt;/p>
&lt;p>微软果然还是喜欢骚操作，而且会凭借实力让这个骚操作成为既成事实的标准。&lt;/p>
&lt;p>具体来说：&lt;/p>
&lt;blockquote>
&lt;p>微软做了个和WSL用户发行版（User Distro，如Ubuntu、Debian、openSUSE、CentOS等）平级的“WSLg System Distro”，这个 Linux 发行版原本是微软内部在 Azure 云上的 Linux 系统，叫做“CBL-Mariner”，现在经过精心剪裁一番魔改之后，专门干一件事——跑 X Server。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>好了现在 X Server 有了，但图形界面是显示在 WSLg System Distro 里，怎么进到这个系统里看呢？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>微软在 WSLg System Distro 里加了远程桌面服务套件——FreeRDP，一个支持Windows远程桌面协议（RDP）的服务端，如果是在 Windows 里装 Linux虚拟机的话，可以用 Windows 自带的远程桌面客户端和虚拟 Linux 系统中的 FreeRDP 通信。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>就这样，通过Windows -&amp;gt; RDP -&amp;gt; X Server一层套一层，把图形窗口“无缝”地集成到了Windows桌面环境中，整个形成了 WSLg 的架构。&lt;/p>
&lt;/blockquote>
&lt;h3 id="使用-sockets-操作-x-window-窗口">使用 sockets 操作 X Window 窗口
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-53-33.png"
width="661"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/p>
&lt;p>既然上面讲 WSL2 里实现图形界面的事情，不妨再来一篇探索 X Server 技术的文章。&lt;/p>
&lt;p>在这篇&lt;a class="link" href="https://hereket.com/posts/from-scratch-x11-windowing/" target="_blank" rel="noopener"
>《在 linux 中用 200 行纯手写 C 代码打开一个图形窗口》&lt;/a>里，作者为了研究 X11 窗口图形协议，决定在不调用 xlib 这种基础库的情况下，通过套接字发送指令的方式，创建一个 GUI 窗口程序。&lt;/p>
&lt;p>实际上 Linux 中用于显示图形界面的 X Server 也是一种网络服务，通过 X11 协议渲染图形界面，只要能够发送正确的信息给服务，就能进行图形界面的显示和交互。&lt;/p>
&lt;p>虽然理论上是这样，然而实际实现时却没这么容易，作者花功夫研读了相关技术文档，并且进行了若干次尝试才最终成功。&lt;/p>
&lt;p>作者在文末写道：&lt;/p>
&lt;blockquote>
&lt;p>X Server 在 linux 世界中正在慢慢被剥夺，并被 Wayland 取代。尽管如此，X11 仍然是一个有趣的协议。&lt;/p>
&lt;/blockquote>
&lt;h3 id="向量嵌入的一些基础知识">向量嵌入的一些基础知识
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-53-57.png"
width="613"
height="357"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="412px"
>&lt;/p>
&lt;p>随着 LLM 大模型的应用日趋成熟，基于 LLM 进行知识库搭建、模型微调等操作变得越来越普遍。&lt;/p>
&lt;p>普通技术人员在进行此类应用操作时，接触到的第一个新技术名词可能就是“向量嵌入（Vector Embeddings）”，这是在 NLP 领域的一个基本概念。&lt;/p>
&lt;p>理解它有助于在使用 LLM 模型进行应用层开发（尤其是在检索增强生成类应用）时充分发挥模型的力量，也能做到“知其所以然”。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.timescale.com/blog/a-beginners-guide-to-vector-embeddings/" target="_blank" rel="noopener"
>《A Beginner’s Guide to Vector Embeddings》&lt;/a>为读者提供了关于向量嵌入（Vector Embeddings）的基础知识，包括概念的定义、工作原理、如何在产品中应用等方面。&lt;/p>
&lt;p>&lt;em>虽然有 timescale 广告的成分，但是文章本身质量还挺高&lt;/em>&lt;/p>
&lt;h3 id="基于-sqlite-做一个搜索引擎">基于 SQLite 做一个搜索引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-54-09.png"
width="471"
height="212"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="533px"
>&lt;/p>
&lt;p>基于 SQLite 可以做全文检索吗？&lt;/p>
&lt;p>答案是可以，SQLite FTS4 和 FTS5 扩展允许您对加载到 SQLite 中的文档执行全文搜索。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.philipotoole.com/building-a-highly-available-search-engine-using-sqlite/" target="_blank" rel="noopener"
>使用 SQLite 构建高可用性搜索引擎&lt;/a>&lt;/p>
&lt;p>这篇文章介绍了一个叫做 &lt;a class="link" href="https://rqlite.io/" target="_blank" rel="noopener"
>rqlite&lt;/a> 的项目，它基于 SQLite 数据库实现了一个可用的搜索引擎。&lt;/p>
&lt;p>文章详细介绍了使用这个搜索引擎进行测试和索引 Apache 日志的步骤。&lt;/p>
&lt;p>像搭建轻量级全文检索服务的，不妨试一试。&lt;/p>
&lt;h3 id="爱上-makefile">爱上 Makefile
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-54-22.png"
width="466"
height="382"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="292px"
>&lt;/p>
&lt;p>如果你和我一样对 Makefile 充满恐惧，不愿意碰它一下。&lt;/p>
&lt;p>甚至认为它只是用于构建某个蹩脚的 C++ 工程所使用的老掉牙工具。&lt;/p>
&lt;p>那可以看看这篇&lt;a class="link" href="https://gagor.pro/2024/02/how-i-stopped-worrying-and-loved-makefiles" target="_blank" rel="noopener"
>《我是如何爱上 Makefile 的》&lt;/a>。&lt;/p>
&lt;p>Makefile 拥有包括进行软件构建在内的多种用途，虽然大部分人仅仅用它来编译源码。&lt;/p>
&lt;p>文章作者介绍了自己对 Makefile 由浅入深的使用过程，以及各种非软件构建的场景：包括 发送邮件、给 Python 项目准备环境、静态博客网站的生成等等。&lt;/p>
&lt;p>如果你愿意的话，甚至可以用它来煮咖啡。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="基于终端的文件管理器">基于终端的文件管理器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-54-46.png"
width="690"
height="485"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="341px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/MHNightCat/superfile" target="_blank" rel="noopener"
>Superfile&lt;/a>，针对 Terminal 的文件管理应用。&lt;/p>
&lt;p>界面很漂亮，可以方便地在控制台管理文件。&lt;/p>
&lt;p>支持自定义主题和快捷键。 ​​​&lt;/p>
&lt;h3 id="阿里出的语音识别模型">阿里出的语音识别模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-54-58.png"
width="690"
height="1493"
loading="lazy"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="110px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/alibaba-damo-academy/FunASR" target="_blank" rel="noopener"
>FunASR&lt;/a>，阿里巴巴的语音转文字，funasr，中文效果卓越，可以离线使用。&lt;/p>
&lt;h3 id="用-airpod-发射摩斯码">用 airpod 发射摩斯码
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-55-08.png"
width="360"
height="540"
loading="lazy"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="160px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/EtherDream/headphone-morse-transmitter" target="_blank" rel="noopener"
>headphone-morse-transmitter&lt;/a>。&lt;/p>
&lt;p>这个开源项目可以把你的 airpod 耳机变成一个莫尔斯码发射器。&lt;/p>
&lt;p>想象一下梁朝伟在无间道中使用耳机发送“有内鬼，终止交易”。 ​​​&lt;/p>
&lt;h3 id="c-的坑一网打尽">C++ 的坑，一网打尽。
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-55-18.png"
width="690"
height="691"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="239px"
>&lt;/p>
&lt;p>地址：https://fouronnes.github.io/cppiceberg/&lt;/p>
&lt;p>网站列举了 C++ 语言的一些反直觉的特性，标识在一座冰山上，点击链接可以看到该问题的详解。 ​​​&lt;/p>
&lt;p>这其中就包含有网友整理的&lt;a class="link" href="https://gist.github.com/aras-p/6224951" target="_blank" rel="noopener"
>“离职之前可以提交的代码片段”&lt;/a>。&lt;/p>
&lt;p>可真是太能整活了, 加上它们会导致程序大概能跑，但是会不定期出 BUG。&lt;/p>
&lt;h3 id="开发-ai-助手的程序框架">开发 AI 助手的程序框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-55-36.png"
width="690"
height="366"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/CopilotKit/CopilotKit" target="_blank" rel="noopener"
>CopilotKit&lt;/a>，一个用于构建自定义 AI 智能助手的框架，包括应用内 AI 聊天机器人、应用内 Agent 代理和 AI 补全的文本编辑区域。 ​​​&lt;/p>
&lt;h3 id="一款100免费的在线pdf工具功能众多界面好看-">一款100%免费的在线PDF工具，功能众多，界面好看。 ​​​
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-55-47.png"
width="690"
height="373"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>地址：https://onlinepdfedit.com/zh-cn/&lt;/p>
&lt;h3 id="codepen-的国内替代">CodePen 的国内替代。
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-55-58.png"
width="550"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>地址：https://bi.cool/&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="不能根据想象感受真实">不能根据想象感受真实
&lt;/h3>&lt;p>电影《心灵捕手》中有段对白：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">肖恩：如果我问你艺术,你可能会提出艺术书籍中的粗浅论调。有关米开朗基罗,你知道很多，他的满腔政治热情，与教皇相交莫逆，你对他很清楚吧？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">但你连西斯汀教堂的气味也不曾嗅到？你未曾站在那儿，昂首眺望天花板上的名画吧？可是我见过。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">你年轻彪悍，我如果和你谈论战争，你会向我大抛莎士比亚， 朗诵“共赴战场，亲爱的朋友”
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">但你从未亲临战阵，未试过把挚友的头拥入怀里，看着他吸着最后一口气，凝望着你，垂死向你求助。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>我的体会是，感受一样东西，不能只靠想象（不是不能想象，而是不能仅依赖）。&lt;/li>
&lt;li>也就是说，无论你从电视上、书本里、别人的讲述中能获取多少关于一件事物（或一个地方、一个人）的信息，在你真正与它接触之前，你都不可能真正认识它。&lt;/li>
&lt;li>但不幸的是，现在数字化生活已经将人与真实生活剥离得过于孤立，我们仿佛被各种电子设备（尤其是手机）催眠了。&lt;/li>
&lt;li>足不出户是很难感受完整的世界的，如果有可能，还是尽可能去自然中感受真实的东西。&lt;/li>
&lt;/ul>
&lt;h3 id="看书与电视没多大区别">看书与电视没多大区别
&lt;/h3>&lt;p>对我来说，吃完晚饭看书对比坐沙发看美剧的最大区别，就是看书可以走动以活动身体。&lt;/p>
&lt;p>从吸收的内容营养上来说，看书并不比看电视高明到哪儿去，目前都是当作消遣的一种方式。&lt;/p>
&lt;p>很多人过于抬高了读书的好，以及看电视的坏。&lt;/p>
&lt;p>但如果一件事情能让人沉浸和放松，那就是最大的益处。&lt;/p>
&lt;p>做事一旦太功利，就很无趣了。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>上班是一种体制</title><link>https://sbabybird.github.io/p/%E4%B8%8A%E7%8F%AD%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BD%93%E5%88%B6/</link><pubDate>Sat, 11 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8A%E7%8F%AD%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BD%93%E5%88%B6/</guid><description>&lt;h1 id="上班是一种体制">上班是一种体制
&lt;/h1>&lt;p>在电影《肖申克的救赎》里，有一段情节。&lt;/p>
&lt;p>熬了几十年终于出狱后的瑞德，被政府安顿了一份超市收银员的工作。&lt;/p>
&lt;p>但是经理对他很不满意，总是冲他大吼：以后再上厕所能不能别他妈给我打报告了！&lt;/p>
&lt;p>然而瑞德说：不打报告，我尿不出来。&lt;/p>
&lt;p>这就是体制的力量。&lt;/p>
&lt;p>瑞德已经无法离开监狱的体制，甚至到了无法生存的地步（电影中同样出狱的另一位老人选择了自杀）。&lt;/p>
&lt;p>社会上的上班族，也是一样。&lt;/p>
&lt;p>从小被规训，在学校里就养成了固定时间固定地点被关在那里的习惯。&lt;/p>
&lt;p>走向社会之后，一旦没有这种要求就会恐慌。&lt;/p>
&lt;p>所以得赶紧找个班上。&lt;/p>
&lt;p>那样才有安全感。&lt;/p>
&lt;p>这种按部就班的生活就算不是浪费生命，但也绝对谈不上多么高质量的享受生命。&lt;/p>
&lt;p>当然，有些人群早就已经觉醒。&lt;/p>
&lt;p>但是这个社会不希望人们觉醒。&lt;/p>
&lt;p>也更加的不给后来的人们觉醒的机会。&lt;/p>
&lt;p>&amp;mdash;- 上班时间出来办事有感，原来上班时大街上还有那么多人没被关起来。&lt;/p></description></item><item><title>再读阿城</title><link>https://sbabybird.github.io/p/%E5%86%8D%E8%AF%BB%E9%98%BF%E5%9F%8E/</link><pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%8D%E8%AF%BB%E9%98%BF%E5%9F%8E/</guid><description>&lt;h1 id="再读阿城">再读阿城
&lt;/h1>&lt;p>读完史铁生的《我与地坛》之后，最近又在读阿城的作品。&lt;/p>
&lt;p>在微信读书上找到了集结出版的《阿城作品文集》，准备一次将阿城的文字读全。&lt;/p>
&lt;p>包括《树王》、《棋王》、《孩子王》，以及随笔集《常识与通识》、《闲话闲说》等。&lt;/p>
&lt;p>此次新读到的还有一本他受邀去意大利威尼斯住了三个月写的《威尼斯日记》。&lt;/p>
&lt;p>王小波、史铁生、钟阿城这三个作家所处年代相同，我都很喜欢。读他们的文字，总有类似的感觉，也说不上来具体是什么味儿。&lt;/p>
&lt;p>他们都经历过特殊历史时期，而且都是那个时期里有点儿独立思想的人，所以写出的文字，都带有同样的味道。&lt;/p>
&lt;p>我就不分析他们的近似和区别了，这三个作家里面，我还是最能读进去阿城的文字。&lt;/p>
&lt;p>作者自己也给出了解释，那就是“世俗”的力量，作者从不排斥“俗”，甚至越俗越喜欢，这样的性格在知识分子身上很少见。&lt;/p>
&lt;p>但是又不恶俗，写出的文字既有美感，也接地气。对作者自己情绪的捕获和表达十分到位，使人读起来就像是与熟人聊天，而且双方都不端着掖着的那种。&lt;/p>
&lt;p>我记得在《威尼斯日记》里有一段写作者在商店里见到了一批手工捏制的瓶子，其中一个瓶子外形比较俏皮，作者写道：这瓶子让人一看就想到它当时腰上被捏时的那一声“哎哟”。&lt;/p>
&lt;p>很有画面感，将瓶子所带来的轻松愉快情绪，一下子就从遥远的威尼斯传递到了读者眼前。&lt;/p>
&lt;p>我也忍不住“哟”了一声。&lt;/p>
&lt;p>先写这么多，随意记录一些自己读书时的琐碎感受。&lt;/p>
&lt;p>我想起了一些他们三个共同的味道是什么，应该是文字里流露出的对生活跳出现实之外的冷静观察（敏感、细腻、又能准确表达），也许这是一个天赋写作的人所必备的能力？&lt;/p>
&lt;p>我虽没有这样的天赋，但也心向往之。&lt;/p></description></item><item><title>机器文摘 第 081 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-54-53.png" alt="Featured image of post 机器文摘 第 081 期" />&lt;h1 id="机器文摘-第-081-期">机器文摘 第 081 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="为什么-sqlite-使用字节码来执行-sql">为什么 SQLite 使用字节码来执行 SQL
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-54-03.png"
width="363"
height="452"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="192px"
>&lt;/p>
&lt;p>每个 SQL 数据库引擎的执行 SQL 的步骤都差不多，一般来说都会先将输入的 SQL 文本转换为机器更容易理解的“预执行语句”。&lt;/p>
&lt;p>然后通过某种“虚拟机”去执行它以生成结果。&lt;/p>
&lt;p>如果了解一点儿编译原理的话，基本上所有的高级语言都会有类似的处理过程，SQL 有点儿像解释执行的语言。&lt;/p>
&lt;p>具体虚拟机如何执行处理后的“预执行语句”，在数据库领域有两大技术路线，分别是：&lt;/p>
&lt;p>1、字节码：输入 SQL 被转换为虚拟机语言，然后由虚拟机解释器运行。这是SQLite使用的技术。&lt;/p>
&lt;p>2、对象树：输入 SQL 在表示要完成的处理的对象树中进行转换。SQL 是通过遍历此树来执行的。这是MySQL和PostgreSQL使用的技术。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://sqlite.org/draft/whybytecode.html" target="_blank" rel="noopener"
>《为什么 SQLite 使用字节码》&lt;/a>是 SQLite 的开发者写的解释文章，对比了这两种路线的各自优势，并解释了他们做出这样选择的理由。&lt;/p>
&lt;p>简单来说，使用字节码的优点是：简单容易理解（是引擎容易理解，就像 CPU 更理解汇编语言）、容易调试、可以增量运行、占用空间小。&lt;/p>
&lt;p>使用对象树的优点是：有些查询可以推迟运行（便于性能优化）、数据流程易于并行化（还是有利于性能）。&lt;/p>
&lt;h3 id="c-编译器的历史">C 编译器的历史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-54-53.png"
width="690"
height="493"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/p>
&lt;p>这篇文章是&lt;a class="link" href="https://thechipletter.substack.com/p/a-history-of-c-compilers-part-1-performance" target="_blank" rel="noopener"
>《The Chip Letter》&lt;/a>系列的一部分，主题是 C 编译器的历史。&lt;/p>
&lt;p>文章从C语言的起源讲起，探讨了 C 编译器的发展，以及它们对计算机架构、操作系统和编程语言的影响。&lt;/p>
&lt;p>文章强调了C语言的可移植性对于软件行业的经济优势，以及 Richard Stallman 创建的 GCC 编译器对自由软件运动的重要性。&lt;/p>
&lt;p>随着计算机架构的快速发展，如 Arm 和 RISC-V，高性能编译器成为支持这些架构的关键。&lt;/p>
&lt;p>文章还提到了微软在Windows操作系统上的 C 编译器，以及 GCC 和 LLVM 编译器生态系统在支持新硬件和架构方面的重要作用。&lt;/p>
&lt;p>最后，文章指出，高质量的 C 编译器对于任何成功的硬件生态系统都是必不可少的。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="用于科研的命令行技巧">用于科研的命令行技巧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-55-08.png"
width="235"
height="779"
loading="lazy"
class="gallery-image"
data-flex-grow="30"
data-flex-basis="72px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://jeroenjanssens.com/dsatcl/" target="_blank" rel="noopener"
>命令行中的数据科学&lt;/a>&lt;/p>
&lt;p>这本在线电子书籍，讲解了在 Linux / Unix 命令行环境下进行数据建模和处理的工具使用技巧。&lt;/p>
&lt;blockquote>
&lt;p>这份经过全面修订的指南演示了命令行的灵活性如何帮助您成为更高效、更富有成效的数据科学家。
您将学习如何结合小而强大的命令行工具，以快速获取、清理、浏览和建模数据。
为了帮助您入门，作者 Jeroen Janssens 提供了一个包含 100 多种 Unix 强大工具的 Docker 映像，无论您使用 Windows、macOS 还是 Linux，这对您的工作都很有帮助。&lt;/p>
&lt;/blockquote>
&lt;h3 id="一个新的-ocr-框架">一个新的 OCR 框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-55-17.png"
width="690"
height="629"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="263px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/VikParuchuri/surya" target="_blank" rel="noopener"
>surya&lt;/a>&lt;/p>
&lt;p>一个新的 OCR 框架，效果据说比 EasyOCR 要好。&lt;/p>
&lt;h3 id="开源多模态-llm-模型">开源多模态 LLM 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-55-28.png"
width="534"
height="633"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="202px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/mbzuai-oryx/LLaVA-pp" target="_blank" rel="noopener"
>LLaVA++&lt;/a>&lt;/p>
&lt;p>基于 Phi-3 和 LLaMA-3 的开源多模态 LLM，项目扩展了LLaVA模型，集成了 Phi-3 Mini Instruct 和 LLaMA-3 Instruct 模型，提升了模型的视觉和语言指令处理能力。&lt;/p>
&lt;h3 id="开源-gpu-学习项目">开源 GPU 学习项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-55-41.png"
width="690"
height="933"
loading="lazy"
class="gallery-image"
data-flex-grow="73"
data-flex-basis="177px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/adam-maj/tiny-gpu" target="_blank" rel="noopener"
>tiny-gpu&lt;/a>，一个最小 GPU 实现，用于从头开始了解 GPU 的工作原理。&lt;/p>
&lt;p>这个项目主要集中于探索：&lt;/p>
&lt;ul>
&lt;li>架构 - GPU的架构是什么样子的？最重要的元素是什么？&lt;/li>
&lt;li>并行化 - SIMD编程模型是如何在硬件中实现的？&lt;/li>
&lt;li>内存 - GPU如何解决有限内存带宽的限制？ ​​​&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="关于未来技术趋势的一点儿判断">关于未来技术趋势的一点儿判断
&lt;/h3>&lt;p>AI 技术经过几十年长期发展，自去年开始引爆了应用点（大语言模型带来的自然语言对话以及多媒体生成技术）之后。基本上已经成为继云计算、移动互联网、物联网等超级技术概念之后的又一热点。&lt;/p>
&lt;p>即便是理性看待，AI 也已经成为任何信息化相关产品不可或缺的能力，理论突破在提速、数据规模的增加在提速、各种意义上的基础设施也越来越完善，技术路线从实验室到消费端的周期也越来越短。&lt;/p>
&lt;p>但是很难说 AI 是一个行业，应该把它看作是基于计算机技术的信息化、数字化行业的技术革新，是给各个行业进行赋能的一项技术。&lt;/p>
&lt;p>所以，AI 技术本身只是一个基础，如果希望深耕，还需要细分出想要瞄准的应用市场，因为基础理论部分只能靠科学家去推动，我等凡人安心做好应用层工作已经不容易了。&lt;/p>
&lt;p>如果说 AI 是未来信息技术的基础能力的话，那么虚拟增强现实则是在人机交互方面的发展必然。&lt;/p>
&lt;p>人机交互自计算机诞生以来一直进展缓慢，输入输出设备虽然对应了人类的听觉、视觉、触觉等感官，但是交互方式仍然偏机械，而且缺乏互动性。&lt;/p>
&lt;p>按照人类生物本能的需求，在交互方面肯定希望以一种自然的、不增加外部环节的人机沟通和交流，目前的输入输出设备还差的很远。&lt;/p>
&lt;p>但随着芯片技术发展，算力增强的同时体积和能耗减小，增强现实设备有望以轻便的方式接入人眼，甚至达到现在无线耳机的佩戴舒适度，届时将类似 chatGPT 一样引爆交互革命。&lt;/p>
&lt;p>伴随而来的就是面向新终端、场景的新一轮内容制作和应用制作的市场需求，人类可能在娱乐、效率生产力等方面全面依赖虚拟增强现实技术，像淘汰报纸、杂志一样淘汰现有的电视、电影、PC或手机。&lt;/p>
&lt;p>护理机器人的发展严重依赖 AI 技术和工业制造能力，对其的强烈需求不是来自于工业生产，而是老龄化社会带来的护理需求。&lt;/p>
&lt;p>可以想象，如果合理发展的话，未来针对行动不便老人的护理工作一定会以智能机器人为主，真人劳动力的成本将再一次大幅提升，生产力更加获得解放。&lt;/p>
&lt;p>普通人在这样的趋势下所能获得市场机会，恐怕只能是内容创作、基础设施运维等低端工作，或者是非物质类的价值输出（比如聊天、网游陪玩等）；&lt;/p>
&lt;p>客观规律决定了人类没有能力控制或改变历史进程的发展，恐怕赛博朋克 2077 那样的世界将不可避免地到来了。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>关于未来技术趋势的一点儿判断</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E6%8A%80%E6%9C%AF%E8%B6%8B%E5%8A%BF%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E5%88%A4%E6%96%AD/</link><pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E6%8A%80%E6%9C%AF%E8%B6%8B%E5%8A%BF%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E5%88%A4%E6%96%AD/</guid><description>&lt;h1 id="关于未来技术趋势的一点儿判断">关于未来技术趋势的一点儿判断
&lt;/h1>&lt;p>早上整理自己关于技术趋势的判断，提到了未来 AI、虚拟增强现实、护理机器人是我认为的几个比较有用的领域。&lt;/p>
&lt;p>这里展开说一点儿。&lt;/p>
&lt;p>AI 技术经过几十年长期发展，自去年开始引爆了应用点（大语言模型带来的自然语言对话以及多媒体生成技术）之后。基本上已经成为继云计算、移动互联网、物联网等超级技术概念之后的又一热点。&lt;/p>
&lt;p>即便是理性看待，AI 也已经成为任何信息化相关产品不可或缺的能力，理论突破在提速、数据规模的增加在提速、各种意义上的基础设施也越来越完善，技术路线从实验室到消费端的周期也越来越短。&lt;/p>
&lt;p>但是很难说 AI 是一个行业，应该把它看作是基于计算机技术的信息化、数字化行业的技术革新，是给各个行业进行赋能的一项技术。&lt;/p>
&lt;p>所以，学习和掌握 AI 技术本身只是一个基础，如果希望深耕，还需要细分出想要瞄准的应用市场，因为基础理论部分只能靠科学家去推动，我等凡人安心做好应用层工作已经不容易了。&lt;/p>
&lt;p>如果说 AI 是未来信息技术的基础能力的话，那么虚拟增强现实则是在人机交互方面的发展必然。&lt;/p>
&lt;p>人机交互自计算机诞生以来一直进展缓慢，输入输出设备虽然对应了人类的听觉、视觉、触觉等感官，但是交互方式仍然偏机械，而且缺乏互动性。&lt;/p>
&lt;p>按照人类生物本能的需求，在交互方面肯定希望以一种自然的、不增加外部环节的人机沟通和交流，目前的输入输出设备还差的很远。&lt;/p>
&lt;p>但随着芯片技术发展，算力增强的同时体积和能耗减小，增强现实设备有望以轻便的方式接入人眼，甚至达到现在无线耳机的佩戴舒适度，届时将类似 chatGPT 一样引爆交互革命。&lt;/p>
&lt;p>伴随而来的就是面向新终端、场景的新一轮内容制作和应用制作的市场需求，人类可能在娱乐、效率生产力等方面全面依赖虚拟增强现实技术，像淘汰报纸、杂志一样淘汰现有的电视、电影、PC或手机。&lt;/p>
&lt;p>护理机器人的发展严重依赖 AI 技术和工业制造能力，对其的强烈需求不是来自于工业生产，而是老龄化社会带来的护理需求。&lt;/p>
&lt;p>可以想象，如果合理发展的话，未来针对行动不便老人的护理工作一定会以智能机器人为主，真人劳动力的成本将再一次大幅提升，生产力更加获得解放。&lt;/p>
&lt;p>普通人在这样的趋势下所能获得市场机会，恐怕只能是内容创作、基础设施运维等低端工作，或者是非物质类的价值输出（比如聊天、网游陪玩等）；&lt;/p>
&lt;p>客观规律决定了人类没有能力控制或改变历史进程的发展，恐怕赛博朋克 2077 那样的世界将不可避免地到来了。&lt;/p></description></item><item><title>机器文摘 第 080 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-58-14.png" alt="Featured image of post 机器文摘 第 080 期" />&lt;h1 id="机器文摘-第-080-期">机器文摘 第 080 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="利用计算机图形学模拟木星大红斑">利用计算机图形学模拟木星大红斑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-54-40.png"
width="690"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://emildziewanowski.com/flowfields/" target="_blank" rel="noopener"
>《流场》：模拟木星的大气流动效果&lt;/a>，这是一篇讲解视觉效果生成的文章，作者分享了他通过设计一些有趣的 Shader 着色器来实现模拟木星大气层流动效果的方法。&lt;/p>
&lt;p>无论是否掌握着色器编程或者游戏引擎的材质制作技术，都可以跟随作者逐渐深入了解视觉效果的实现过程。&lt;/p>
&lt;p>为了方便理解，作者从最古老的红白机游戏动画效果的技术讲起（魂斗罗里动态的水流实际上是基于对调色板的动态切换）。&lt;/p>
&lt;p>然后使用 UE5 游戏引擎的材质编辑器逐渐创建示例，由浅入深展示实现效果的原理。&lt;/p>
&lt;p>为了阅读体验更佳，页面中还嵌入了基于 ShaderToy 的可运行 Demo，直接渲染出了视觉效果（估计是使用的 UE5 的 GLSL 导出功能，否则光写这些 Demo 也够费劲的了）。&lt;/p>
&lt;h3 id="执行-sql-时到底发生了什么">执行 SQL 时到底发生了什么？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-55-06.png"
width="663"
height="609"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="261px"
>&lt;/p>
&lt;p>理解SQL查询背后的复杂过程对于开发者至关重要，不仅可以提升查询性能，还能帮助选择有效的索引策略、改善资源管理，并有效诊断和解决性能瓶颈。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://blog.bytebytego.com/p/what-happens-when-a-sql-is-executed" target="_blank" rel="noopener"
>《执行 SQL 时到底发生了什么》&lt;/a>深入探讨了 SQL 命令在数据库中的执行过程，揭示了 SQL 作为现代数据管理的核心语言，是如何在关系型数据库中高效地检索、操纵和管理信息的。&lt;/p>
&lt;p>文章以MySQL为例，详细阐述了SQL语句的生命周期，包括SQL解析器、查询优化器、执行引擎以及底层存储引擎的作用。&lt;/p>
&lt;p>此外，还介绍了 SQL 标准的发展历程，从早期的 SQL-86、SQL-89 和 SQL-92，到现代的 SQL:1999 及后续标准，展示了 SQL 语言的不断进化和完善。&lt;/p>
&lt;h3 id="读什么你就是什么">读什么你就是什么
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-56-32.png"
width="500"
height="200"
loading="lazy"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="600px"
>&lt;/p>
&lt;p>我不记得我读过的书，也不记得我吃过的饭菜。&lt;/p>
&lt;p>即便如此，他们还是造就了我。&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.jim-nielsen.com/2024/you-are-what-you-read/" target="_blank" rel="noopener"
>《读什么你就是什么》&lt;/a> ​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="8bit-复古音效制作">8bit 复古音效制作
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-57-28.png"
width="690"
height="732"
loading="lazy"
class="gallery-image"
data-flex-grow="94"
data-flex-basis="226px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://sfxr.me/" target="_blank" rel="noopener"
>jsfxr&lt;/a>，一个在线音效制作工具，专门用于合成 8bit 风格的声音效果。&lt;/p>
&lt;p>通过其提供的 js 库，可以将制作的成果集成到自己的网页游戏中。 ​​​&lt;/p>
&lt;h3 id="把手机作为电脑摄像头">把手机作为电脑摄像头
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-57-43.png"
width="512"
height="447"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="274px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.dev47apps.com/" target="_blank" rel="noopener"
>DroidCam&lt;/a>&lt;/p>
&lt;p>一个很方便的小工具，可以让你的手机作为你的电脑摄像头。&lt;/p>
&lt;p>手机端支持安卓和苹果系统，电脑端支持 Windows、Linux 和 Mac。&lt;/p>
&lt;p>应急开个视频会议，或者让手机当作你的视频采集终端应该没问题。 ​​​&lt;/p>
&lt;h3 id="前端拖拽库">前端拖拽库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-58-14.png"
width="690"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="400px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/atlassian/pragmatic-drag-and-drop" target="_blank" rel="noopener"
>pragmatic-drag-and-drop&lt;/a>&lt;/p>
&lt;p>可以应用在任何前端技术栈（react、svelte 、 vue 、 angular）上的拖放组件库。 ​​​&lt;/p>
&lt;h3 id="从原理讲解基于-webglwebgpu-进行画布渲染">从原理讲解基于 webgl、webgpu 进行画布渲染
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-58-37.png"
width="690"
height="397"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/p>
&lt;p>这儿有一套关于&lt;a class="link" href="https://infinitecanvas.cc/" target="_blank" rel="noopener"
>使用 WebGL 和 WebGPU 实现一套无线画布的教程&lt;/a>。&lt;/p>
&lt;p>以下是原作者的介绍：&lt;/p>
&lt;blockquote>
&lt;p>一些知名产品包括 Figma、Modyfi、rnote、tldraw、excalidraw等等都会使用无限画布。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>作为一个前端，我对其中涉及到的渲染技术很感兴趣。尽管 tldraw、excalidraw 等普遍使用易用性更高的 Canvas2D / SVG 技术，但 JS 和 Rust 生态中也有很多编辑器、设计工具使用更底层的渲染技术对 2D 图形进行 GPU 加速，以获得更好的性能和体验，例如：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Figma 使用 C++ 编写了一个 tile-based 的渲染引擎，编译成 WASM 后调用 WebGL 渲染
Modyfi 使用了 Rust 生态中的 wgpu，同样编译成 WASM 后调用 WebGL2 渲染
因此我想通过一份教程一步步实现一个简单的无限画布，主要通过 WebGL1/2 和WebGPU 实现高性能渲染。&lt;/p>
&lt;/blockquote>
&lt;h3 id="计算机原理教学项目">计算机原理教学项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-59-07.png"
width="1292"
height="732"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ArhanChaudhary/NAND" target="_blank" rel="noopener"
>NAND&lt;/a>，是一个图灵等价的16位计算机，完全由时钟频率和在Web上模拟的与非门电路组成。NAND拥有自己的CPU、机器语言、汇编语言、汇编器、虚拟机语言、虚拟机翻译器、编程语言、编译器、集成开发环境（IDE）和用户界面。&lt;/p>
&lt;p>从第一原理构建现代计算机：从Nand到Tetris（以项目为中心的课程）&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="关于-shell-编程">关于 shell 编程
&lt;/h3>&lt;p>我一直对于 Shell 编程怀有抵触情绪，虽然它很强大，很多在命令行中生存的程序员也根本无法拒绝 Shell 编程。&lt;/p>
&lt;p>但是我基本对 Shell 编程提不起兴趣，如果非要说原因的话，那就是：“Shell 编程对空格非常敏感”。&lt;/p>
&lt;p>还记得那个笑话：在使用 rm 命令的时候，多打了一个空格，导致整个系统被删了 &lt;code>rm -rf /空格/foo/bar&lt;/code>。&lt;/p>
&lt;p>这足以说明 Shell 如果作为一个编程语言的话，特别容易产生难以捉摸的 Bug。&lt;/p>
&lt;h3 id="梦想与努力">梦想与努力
&lt;/h3>&lt;p>我的梦想通过努力根本实现不了。&lt;/p>
&lt;p>只有通过不努力才能实现。&lt;/p>
&lt;p>请问您的梦想是什么？&lt;/p>
&lt;p>当神仙。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>为生活做准备也是生活的一部分</title><link>https://sbabybird.github.io/p/%E4%B8%BA%E7%94%9F%E6%B4%BB%E5%81%9A%E5%87%86%E5%A4%87%E4%B9%9F%E6%98%AF%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%BA%E7%94%9F%E6%B4%BB%E5%81%9A%E5%87%86%E5%A4%87%E4%B9%9F%E6%98%AF%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86/</guid><description>&lt;h1 id="为生活做准备也是生活的一部分">为生活做准备也是生活的一部分
&lt;/h1>&lt;p>中午我看到了一个别人做的产品，使用 AI 总结 HN 上面的文章，然后输出 RSS 和静态内容页面。&lt;/p>
&lt;p>虽然距离我曾经思考过的产品还有些远，但是很明显人家在动手做，而我在等待。&lt;/p>
&lt;p>这让我想到了我在学习和应用的时候容易陷入一个怪圈。&lt;/p>
&lt;p>即：接触新的技术，搭建环境，熟悉它的用法，感觉自己学会了，再去寻找新的技术；&lt;/p>
&lt;p>我就是喜欢沉迷于尝试和环境准备（包括软件和硬件）过程中，不能自拔。&lt;/p>
&lt;p>甚至延伸到其他方面也是，比如：折腾了很多手柄和游戏机、模拟器，却没有认真打游戏。&lt;/p>
&lt;p>还不止那些，比如：买书，买了不读，电影下载了不看，游戏整理到硬盘里也不玩，开发环境装好了也写不了几行代码。&lt;/p>
&lt;p>却痴迷于给读书、观影、听歌、打游戏、编程，搭建各种“完美”的环境。&lt;/p>
&lt;p>因为真正去做事情的快感就没这么强了，前面那种虚假的准备工作，让我很容易产生已经“拥有了”的错觉。&lt;/p>
&lt;p>因为那个过程是满怀期待的，就像购物等快递的感觉，而真正去读书、看电影、打游戏反而有点儿像拆开包装以后，虽不是立刻索然无味，但那种期待感没有了。&lt;/p>
&lt;p>可能期待美好发生的时间，比美好真正发生时，大脑分泌的多巴胺更多吧。&lt;/p>
&lt;p>我不记得从哪儿看到的一句话：你是在为生活做准备（假装生活），还是在真正生活？&lt;/p>
&lt;p>我观察了一下，我好像痴迷于为生活做准备。&lt;/p>
&lt;p>我对真正生活的期望很高，但是我迟迟不肯向真正生活跨出一步，我们之间仿佛有着巨大的鸿沟，在我准备的过程中变得越来越宽。&lt;/p>
&lt;p>从两年前开始，我逐渐认识到不能总是追求形式而忽视内容，这种认识促使我启动了一些旨在解决实际问题的项目。虽然这些项目的成效并不显著，但它们对我的个人成长有着积极的影响。&lt;/p>
&lt;p>不管怎样，不必看着别人的产品或者成果艳羡，自己能够按照自己的意愿去自然体验才是最重要的。&lt;/p>
&lt;p>当我意识到这一点的时候，我可以一瞬间缝合鸿沟的两岸，使它们成为一体，本来就是一体。&lt;/p>
&lt;p>也许我并不能从本质上改变自己的喜欢形式大于内容的习惯，我尽量多启动能够实操的项目，但也绝不勉强自己非要做出什么样的成果。&lt;/p>
&lt;p>也许每个人真正生活的方式都不一样，为生活做准备也是生活的一部分。&lt;/p></description></item><item><title>讲故事的核心技巧</title><link>https://sbabybird.github.io/p/%E8%AE%B2%E6%95%85%E4%BA%8B%E7%9A%84%E6%A0%B8%E5%BF%83%E6%8A%80%E5%B7%A7/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%AE%B2%E6%95%85%E4%BA%8B%E7%9A%84%E6%A0%B8%E5%BF%83%E6%8A%80%E5%B7%A7/</guid><description>&lt;h1 id="讲故事的核心技巧">讲故事的核心技巧
&lt;/h1>&lt;p>我发现了什么是讲故事最核心的技巧。&lt;/p>
&lt;p>出于人类的生物本能，这个技巧使人无法抗拒。&lt;/p>
&lt;p>而且剩余的关于讲故事的其他所有技巧几乎都是基于这个技巧的变种或展开，顶多就是表现形式不同而已。&lt;/p>
&lt;p>答案就是， 卖关子。&lt;/p>
&lt;p>专业说法叫：制造矛盾并解决矛盾。&lt;/p>
&lt;p>老话叫：文似看山不喜平。&lt;/p>
&lt;p>无论是音乐（用和弦的行进表达）还是电影（用情节的设定表达）或者小说，都不例外。&lt;/p>
&lt;p>人的生物本能决定了，其对于曲折故事的需求是天然的，也是强烈的。&lt;/p>
&lt;p>无法抑制。&lt;/p>
&lt;p>因为“制造矛盾和解决矛盾”这个过程能让人非常“爽”。&lt;/p>
&lt;p>所以平铺直叙的最无聊，反复卖关子和 Callback 的才是高手。&lt;/p></description></item><item><title>做事情的完成度</title><link>https://sbabybird.github.io/p/%E5%81%9A%E4%BA%8B%E6%83%85%E7%9A%84%E5%AE%8C%E6%88%90%E5%BA%A6/</link><pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%81%9A%E4%BA%8B%E6%83%85%E7%9A%84%E5%AE%8C%E6%88%90%E5%BA%A6/</guid><description>&lt;h1 id="做事情的完成度">做事情的完成度
&lt;/h1>&lt;p>我第一次印象比较深刻的算法，是通过迭代求平方根（牛顿法）的方法。&lt;/p>
&lt;p>大概思路是，首先给出一个猜测值，然后将这个猜测值与真实值的差值带入到一个公式中，获得一个比刚才那个结果更接近结果的值。&lt;/p>
&lt;p>如此往复循环，可以逐渐逼近真实结果。&lt;/p>
&lt;p>这个算法的精妙之处在于，每次重复都在做同样的事情，但是每次的结果都比上次一次离完美更近一步。&lt;/p>
&lt;p>后来接触到的人工智能机器学习算法也基于同样的思路，但是就没有第一次见到牛顿法的震撼了。&lt;/p>
&lt;p>这个算法的执行，在计算机世界里，也有一个关键点，那就是必须设定一个合理的退出条件，否则它可以永远执行下去（假设计算机精度足够）。&lt;/p>
&lt;p>但考虑到对结果精度的需求与所消耗资源的平衡，一般会设定将计算精度精确到小数点后若干位即停止，以降低迭代的次数，因为越到后面每次迭代的进步都越小（性价比越低）。&lt;/p>
&lt;p>我发现世间的事真的很有相似性，大部分事情都是刚开始所见成效明显，然后随着越来越接近完成，所需要处理的细节就越来越多，进展也越来越慢，仿佛永远也无法完成。&lt;/p>
&lt;p>虽然一分价钱一分货，但是越往后面加钱的效果越差，也就说这个世界不是线性的。&lt;/p>
&lt;p>我对此深有体会，因为浮躁的性格会导致我喜欢在 20% 的时间里就实现了 80% 的进度，然后就停留在此，转投入到另外一件事情中了。&lt;/p>
&lt;p>这导致我做事情完成度一直不高，也几乎没有体会过“真正完成”一件作品的深度喜悦。&lt;/p>
&lt;p>据我了解，伟大的艺术家，在看待自己的作品时，会总觉得还有很多需要修改的地方，并且忍不住会动手去修改它。&lt;/p>
&lt;p>如果不是条件不允许的话，他们可能会一直去完善细节，就像一个不知疲倦的深度学习算法。&lt;/p>
&lt;p>我都能想象出他们的作品完成度在坐标轴上所呈现的函数图像（假设横轴为时间，纵轴为完成度），一个标准的对数函数曲线，刚开始陡峭，最后趋于平直。&lt;/p>
&lt;p>我在今年年初的一个晚上，才想到了应该提升自己做事完成度的问题。&lt;/p>
&lt;p>也就是说，同样的算法，希望自己能够多迭代几次，将退出条件精度设置的比之前再高一些，不要再虎头蛇尾，忍住枯燥给自己的作品去补充细节。&lt;/p>
&lt;p>也许这样做会使得我的耐心得到磨练，并且在某些任务中收获意想不到的体验。&lt;/p></description></item><item><title>反熵强迫症成因分析</title><link>https://sbabybird.github.io/p/%E5%8F%8D%E7%86%B5%E5%BC%BA%E8%BF%AB%E7%97%87%E6%88%90%E5%9B%A0%E5%88%86%E6%9E%90/</link><pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8F%8D%E7%86%B5%E5%BC%BA%E8%BF%AB%E7%97%87%E6%88%90%E5%9B%A0%E5%88%86%E6%9E%90/</guid><description>&lt;h1 id="反熵强迫症成因分析">反熵强迫症成因分析
&lt;/h1>&lt;p>反熵强迫症是一种行为，就是见不得混乱和无序，总是要进行整理和收拾。&lt;/p>
&lt;p>这种行为可能是由于人们天生就有的一种清洁欲和秩序感，或者是对立统一法则的一种执着。&lt;/p>
&lt;p>我自我诊断有轻微（或者中度）的“反熵强迫症”。&lt;/p>
&lt;p>当然了，比起在网上看到的“重度”的例子（比如&lt;a class="link" href="https://www.guokr.com/article/61476" target="_blank" rel="noopener"
>这个&lt;/a>），我还算好的。&lt;/p>
&lt;p>但也足以给自己和家人带来一些困扰（如果足够亲密的家人恰恰是混乱制造者的话）。&lt;/p>
&lt;p>我对整齐的环境，无论是虚拟世界的电脑桌面还是现实生活中的房间、工作台，都要求具有足够的秩序，以至于到了不收拾整理就无法继续正常工作的地步（这与那些在混乱的草稿堆里做学术，甚至在桌面的灰尘上记录电话号码的大神们截然不同）。&lt;/p>
&lt;p>在我自己的控制范围之内还好说，如果是身处公共区域，则会带来无止境的困扰，因为我无法在心理上接受一个混乱的环境，即便是强迫自己逃避现实不去想它，潜意识里却一直在内耗，直到扛不住，要么爆发，要么崩溃，往复循环。&lt;/p>
&lt;p>造成这种心理的成因我分析如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>来自基因中的对有序的追求。这是生命（能有维持有序排列的原子组合）体最主要的特征，整个宇宙都在向无序和混乱发展，只有生命体才从混乱中生长成为高度有序的原子、分子排列。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>童年时期某种遭遇导致的心理问题。对于环境秩序的执着，来自于内心深处深深的不安全感，希望周边所有的物品都处于一种“稳定”的状态，这样内心才能汲取少许的安慰。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于效率的痴迷。热爱效率的人，总是看不得低效的工具或者环境，总是想方设法去改变自己所处的环境和手头的工具，使其出于随时待命、高效、高性能的状态。这也许是原始社会就继承下来的猎人基因的延续，效率低下的猎人无法生存。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>机器文摘 第 079 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/</link><pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-48-07.png" alt="Featured image of post 机器文摘 第 079 期" />&lt;h1 id="机器文摘-第-079-期">机器文摘 第 079 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="人类关于航空武器的终极幻想空中航母">人类关于航空武器的终极幻想：空中航母
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-46-34.png"
width="389"
height="456"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="204px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://neverwasmag.com/2019/08/flying-aircraft-carriers/" target="_blank" rel="noopener"
>《空中航母》&lt;/a>探讨了空中航空母舰（flying aircraft carriers）这一概念，它在蒸汽朋克（steampunk）、柴油朋克（dieselpunk）和原子朋克（atompunk）等科幻小说中经常出现，已经成为这些类型文学的一个典型元素。&lt;/p>
&lt;p>文章回顾了历史上的一些尝试，以及在流行文化中的各种表现。&lt;/p>
&lt;p>大意如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>历史背景&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>空中航母的概念在现实中有其基础。一战时期的英国飞艇携带了可以保卫母舰的双翼飞机。&lt;/li>
&lt;li>二战期间，苏联通过Zveno项目在图波列夫TB-3轰炸机的机翼下携带小型战斗机。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>海军将领的预言&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>威廉·W·莫菲特（William W. Moffett）海军少将在1923年为《大众科学》（Popular Science）杂志撰写文章，预言了携带飞机的飞艇的诞生。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>美国海军的尝试&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>美国海军建造了两艘空中航母：阿克伦号（Akron）和梅肯号（Macon），它们是有史以来最大的氦气填充飞艇，但最终都在恶劣天气中失事。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>太阳能飞行甲板&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>1934年，《现代机械》（Modern Mechanix）杂志报道了一个提案，即使用可以兼作太阳能电池板的着陆带。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>广告和设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>固特异（Goodyear）在1942年的《大众机械》（Popular Mechanics）杂志中宣传了一种“战斗机飞行航母”，声称其速度超过当时水面航母的两倍。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Lockheed的CL-1201&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>20世纪50年代，洛克希德（Lockheed）进行了一项更为严肃的研究，设计了CL-1201，这是一款核动力空中航母，翼下携带一系列喷气式飞机。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>波音747的改造&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>70年代初，美国空军研究了将波音747客机改造为空中航母的可能性，主要挑战在于开发足够小的战斗机以适应其内部空间。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>虚构作品中的例子&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>文章列举了多个虚构作品中的空中航母，包括漫威漫画和电影中的神盾局（S.H.I.E.L.D.）的直升机航母、《铁甲飞龙》（Girl Genius）中的沃尔芬巴赫城堡（Castle Wulfenbach）、《神秘博士》（Doctor Who）中的联合国情报特遣队（UNIT）的飞行航空母舰“勇者号”（Valiant），以及其他一些动画、游戏和电影中的类似设定。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="为什么编程语言爱用分号作为语句终止符">为什么编程语言爱用分号作为语句终止符？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-46-55.png"
width="516"
height="285"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="434px"
>&lt;/p>
&lt;p>很多编程语言都使用 &lt;code>;&lt;/code> 分号作为一个语句的终结符号，如果你也跟我一样好奇产生这个结果的原因，可以看看&lt;a class="link" href="https://ntietz.com/blog/researching-why-we-use-semicolons-as-statement-terminators" target="_blank" rel="noopener"
>《分号在编程语言中的起源和优势》&lt;/a>这篇文章。&lt;/p>
&lt;p>作者在做这项无聊的研究之前，本来是希望给自己的编程语言寻找一个合适的终结符，作者比较心仪 &lt;code>.&lt;/code> 或者 &lt;code>!&lt;/code> 这两个符号，但一番研究之后，作者选择随大流，仍然使用分号。&lt;/p>
&lt;p>首先是为什么。&lt;/p>
&lt;p>作者推测，早期的输入设备能够输入的字符比较有限，设计语法的人，需要找到一个字符既不像句号那么常用又得出现在键盘上，于是分号就进入候选了。&lt;/p>
&lt;p>再者就是，使用分号进行断句，也比较符合英语的语法。&lt;/p>
&lt;p>不会产生语义冲突，再拿句号举例，句号有时又表示小数点，这就有些麻烦。&lt;/p>
&lt;p>最后作者说还可以选择一些比较偏门的符号（现在键盘都够用了），但是如果考虑到编程习惯，为了让他的语言更好上手，还是选择分号作为断句字符吧。&lt;/p>
&lt;h3 id="居中对齐没你想象的那么简单">居中对齐没你想象的那么简单
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-47-10.png"
width="690"
height="483"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://tonsky.me/blog/centering/" target="_blank" rel="noopener"
>《计算机科学中最难的事儿》&lt;/a>的作者有些强迫症，他总能轻易发现网页或者 App 应用里各种本该居中却没有居中的元素。&lt;/p>
&lt;p>文中他认真阐述了造成这些不完美的原因，并列举了苹果、微软等大公司也在居中方面所犯的错误，证实即使是大公司，也不能保证在任何时候都能完美解决居中问题。&lt;/p>
&lt;h3 id="手搓一个-gps-接收器">手搓一个 GPS 接收器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-47-37.png"
width="690"
height="446"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>&lt;/p>
&lt;p>这是一篇很硬核的文章，&lt;a class="link" href="https://axleos.com/building-a-gps-receiver-part-1-hearing-whispers/" target="_blank" rel="noopener"
>《手搓一个 GPS 接收器》&lt;/a>。&lt;/p>
&lt;p>这是由 4 部分组成的系列文章，作者从最基本的原理讲起，带领你一步步构建一个 GPS 接收装置。&lt;/p>
&lt;p>基本步骤：
1、首先买一个 SDR（软件定义无线电）设备，用于接收各种无线电信号。&lt;/p>
&lt;p>2、用计算机处理接收到的信号（由于卫星距离很远且速度很快，需要处理多普勒效应）。&lt;/p>
&lt;p>3、追踪和解析信号。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="宇宙的尺度">宇宙的尺度
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-48-07.png"
width="690"
height="577"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://scaleofuniverse.com/en" target="_blank" rel="noopener"
>scaleofuniverse&lt;/a>&lt;/p>
&lt;p>这个网站可以让你直观感受宇宙在不同尺度观察到的样子。&lt;/p>
&lt;p>从普朗克长度，到最大的可观测宇宙。 ​​​&lt;/p>
&lt;h3 id="最强-wii-主机改造">最强 Wii 主机改造
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-48-25.png"
width="690"
height="485"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="341px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/loopj/short-stack" target="_blank" rel="noopener"
>short-stack&lt;/a>&lt;/p>
&lt;p>家有废旧任天堂 Wii 游戏机的不要扔。&lt;/p>
&lt;p>按照这个开源教程操作一下，隔壁小孩馋哭了。&lt;/p>
&lt;p>这是一个打磨 Wii 硬件（电路板）的开源项目，作者提供了相关图纸和操作步骤。&lt;/p>
&lt;p>目的是将原本摆放在电视机旁边的 DVD 大小的游戏机，改装成一个像一盒扑克大小的可随身携带的游戏主机。&lt;/p>
&lt;h3 id="打字学英语两不误">打字学英语两不误
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-48-41.png"
width="690"
height="447"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="370px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.termtyper.com/" target="_blank" rel="noopener"
>TermTyper&lt;/a>&lt;/p>
&lt;p>通过打字练习学习一门语言（英文、法语、德语、西班牙语等）。 ​​​&lt;/p>
&lt;h3 id="在线生成字帖">在线生成字帖
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-48-53.png"
width="690"
height="438"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://paper.z2h.cn/" target="_blank" rel="noopener"
>paper&lt;/a>&lt;/p>
&lt;p>一个优雅实用的在线字帖生成网站。&lt;/p>
&lt;p>提供对中文汉字、词组和段落，以及英文字母、单词和段落的生成模式支持。其界面简洁清新，操作简单，可轻松自定义所需字帖内容。 ​​​&lt;/p>
&lt;h3 id="linux-内核实验室">Linux 内核实验室
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-49-04.png"
width="326"
height="515"
loading="lazy"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="151px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://linux-kernel-labs-zh.xyz/" target="_blank" rel="noopener"
>linux-kernel-labs&lt;/a>&lt;/p>
&lt;p>布加勒斯特理工大学的 Linux 内核教学课程。该课程通过动手实践设备驱动编写，使学习者深入理解 Linux 内核，适合所有对 Linux 内核原理感兴趣的人阅读。&lt;/p>
&lt;p>本文档主要分为两个模块，一个是“课程”，还有一个是“实验”。“课程”部分写得不甚详细，更适合有经验的教师上课时使用。而“实验”部分则是本文档最有价值的部分，写的非常的详细而且由浅入深，Linux 内核零基础的同学也可以来学习。注意“实验”模块学习之前，并不需要学习“课程”模块。&lt;/p>
&lt;h3 id="又一个波形渲染库">又一个波形渲染库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-49-13.png"
width="505"
height="239"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="507px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://aykev.dev/webgpu-waveform/" target="_blank" rel="noopener"
>webgpu-waveform&lt;/a>。&lt;/p>
&lt;p>一个使用 WebGPU 将音频波形渲染到 HTML 画布的 js 库。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;p>也许不久之后，新出的个人电脑都带有 AI 模型的加速芯片，都本地加载了类似 Coplit 之类的智能助理，届时操作电脑的体验可能又会有所不同。&lt;/p>
&lt;p>一个可能的情况是，计算机厂商将会尝试提供一个围绕大模型的应用市场（或平台），应用开发者们，将再次像当年移动互联网流行那样，提供新一轮的各种创新应用。&lt;/p>
&lt;p>只是不知这次引领着会是谁，以及会面临怎样的法律困扰等麻烦。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>关于机器文摘的定位</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98%E7%9A%84%E5%AE%9A%E4%BD%8D/</link><pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98%E7%9A%84%E5%AE%9A%E4%BD%8D/</guid><description>&lt;h1 id="关于机器文摘的定位">关于机器文摘的定位
&lt;/h1>&lt;p>自 2022 年 10 月份开始编写机器文摘以来，每周一期，已经写了 78 期，虽然每次并未下苦工写文字，但是收集和整理也颇费时间。&lt;/p>
&lt;p>考虑到每次都要精心准备文字配图，以及手工编辑排版格式，每期所耗精力也累计有半个工作日，常年下来这也是一个不小的投入。&lt;/p>
&lt;p>因为不怎么推广和运营，且未精准定位受众群体，所以并没能形成影响规模，没有太多人订阅。&lt;/p>
&lt;p>时间长了，难免有些懈怠，甚至有时会忘了为什么当初要这样做。&lt;/p>
&lt;p>现在我来总结一下这样坚持的初衷以及好处。&lt;/p>
&lt;p>首先，我当时是看了阮一峰的《科技周刊》，里面提到的一个观点，意思是即使是普通人也需要经常表达自己，因为只有多表达自己，才能让别人知道你的想法、爱好等特征，才能与人产生共鸣，更有效地找到同类，聚合力量、互相鼓励。&lt;/p>
&lt;p>我对这个观点比较认同，只是没能找到表达的方式和适合自己的方法，恰好看到那篇周刊，加上自己平时也喜欢收集各种科技新闻轶事，尤其对于复古感的科技物件十分感兴趣，索性将自己在这方面能够输出的东西做一个汇总（大杂烩），然后就有了《机器文摘》。&lt;/p>
&lt;p>开始时只是收集一些 Hack News 上有意思的文章链接，以及值得推广的互联网资源（书籍、教程、工具之类），后来逐渐将自己对文章的归纳和理解记录下来，并且适当点评（这样会累一些），但都缺乏深度，效果一般。&lt;/p>
&lt;p>后来也尝试将个人观点加入到一个固定板块，每期分享一段个人心得，自认为文字质量还算可以，权当收藏整理个人沉思录了。&lt;/p>
&lt;p>长期编写文摘所带来的好处，我能体会到比较明显的是，编写大段文字比如产品介绍、技术文档说明之类，变得不再可怕，而是手到擒来。&lt;/p>
&lt;p>输出的文字也比以往流、通顺了许多，阅读体验较为轻松愉悦，随便编写的文字介绍都能符合工作需求。&lt;/p>
&lt;p>还有就是坚持一件事情能够给自己带来成就感，读书、编程、英语学习、写作、摄影，这些我长期坚持（但可能见效不多）的事情都至少让我体会到了一些长期坚持的意义，培养自己的耐心。&lt;/p>
&lt;p>当然我知道，最好能有外部正向的反馈，那种激励才是最大的动力，润物细无声的好处远不如外部给予的反馈强烈。&lt;/p>
&lt;p>但我想顺其自然发展，在合适的时候自然会有外部反馈出现，即便一直未能影响外部，做事本身对我个人的体验积累、学习成长所带来的收获，已经值得。&lt;/p>
&lt;hr>
&lt;p>以后可以每天中午不写那么长，每天一段，一周连接起来能形成完整文章最好。&lt;/p>
&lt;hr>
&lt;p>以后机器文摘应该更关注科技历史和基础原理之类的信息，这样侧重点更明确一些；&lt;/p></description></item><item><title>我心目中的完美笔记本电脑</title><link>https://sbabybird.github.io/p/%E6%88%91%E5%BF%83%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/</link><pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E5%BF%83%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/</guid><description>&lt;h2 id="理想中的随身电脑配置">理想中的随身电脑配置
&lt;/h2>&lt;p>我在今年年初（2024）终于将工作中使用的 Thinkpad T450s 退役掉了，更换为一个性能更好的游戏本，作为日常办公电脑。&lt;/p>
&lt;p>退役掉的这台 Thinkpad 购于 2015 年，算下来至少用了 8 年时间。&lt;/p>
&lt;p>由于购买的时候将配置拉满了，并且升级过内存、固态硬盘，更换过原装电池，定期拆机进行散热系统的清洗，所以才坚持使用了这么长时间。&lt;/p>
&lt;p>退役之后也不是完全不用，放在家里用于刷刷视频，看看网剧，还是凑合够用的。&lt;/p>
&lt;p>但是也仅限于此了，稍微开多一些网页，CPU 风扇就会狂转，温度也会飙升至 80 多度，IO 性能也退化得厉害，总之就是一副风烛残年的样子。&lt;/p>
&lt;p>让人不忍多用，后来我干脆仅用它打纸牌游戏了。&lt;/p>
&lt;p>之所以这么依依不舍，除了使用时长积累的感情之外，这台电脑在工业设计和做工方面都十分令我满意，体积、重量、个头等参数非常符合我的办公需求（具有一定的便携性，但是到了单位和家里还是外接大显示器等外设）。&lt;/p>
&lt;p>所以，我干脆站在当前的硬件发展程度，畅想一下我对理想中笔记本（或便携电脑）的配置。&lt;/p>
&lt;p>首先，外观方面，与我那台 Thinkpad T450s 一致即可，不过可以稍微升级一下外设接口，去掉 VGA 显示端口，留给其他接口空间，其他三围、重量都可不变。&lt;/p>
&lt;p>显示屏幕，14寸的个头，2K 分辨率就够了，平时不会用它作为主显示器，也就应急使用，所以我要求不高，144Hz 刷新率以及 HDR 支持最好，不支持不强求。&lt;/p>
&lt;p>CPU，虽然 AMD 性价比很高，但我还是倾向于使用 Intel 的 U（考虑到一些软件包的兼容性问题），8 核 16 线程就可以了，主频最好不要超过 4G，功率在 45W 左右，别太高。&lt;/p>
&lt;p>内存，32G 容量，6000 MHz（或以上频率），因为几乎不在本机执行过多消耗内存的任务，笔记本还是当作终端就行，内存 32G 应该凑合够用了。&lt;/p>
&lt;p>硬盘，2T 固态系统盘，2T 固态数据盘，不会在电脑上存放大量影音资源否则再多也不够用，还是连接网络存储比较合适。&lt;/p>
&lt;p>显卡，Nvidia RTX N060 系列即可（6060 还是 8060 取决于当时年限），显存最好能有 24G ，毕竟还想本地跑一下 AI 模型进行测试，功率不要超过 60W，否则散热是个问题。&lt;/p>
&lt;p>摄像头，支持高清会议和 Windows Hello 身份识别即可。&lt;/p>
&lt;p>外设接口，电源（氮化镓充电器 120W 左右，要轻巧），充电采用 TypeC 一线通（支持插显示器 PD 供电）、USB4（支持雷电4）、USB-TypeA、USB-TypeC 口各一个，HDMI、Display port 各一个，RJ-45 口一个（2.5G有线网速），outlink（用于外接显卡，没有也没关系），支持 Wifi6、蓝牙 5.x 省电版本；&lt;/p>
&lt;p>外壳，最好采用轻量合金材质，以做到坚固和重量的平衡。&lt;/p></description></item><item><title>机器文摘 第 078 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/</link><pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-40-19.png" alt="Featured image of post 机器文摘 第 078 期" />&lt;h1 id="机器文摘-第-078-期">机器文摘 第 078 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="hello-world-不简单">Hello world 不简单
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-38-56.png"
width="690"
height="325"
loading="lazy"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://thecoder08.github.io/hello-world.html" target="_blank" rel="noopener"
>《hello-world》&lt;/a>，讲解了一个 C 语言编写的 helloworld 程序到底干了什么，它是怎样做到的。&lt;/p>
&lt;p>文章提供了对“Hello World”程序从源代码到最终输出的全面解析，展示了现代操作系统和硬件之间复杂的交互过程。&lt;/p>
&lt;p>通过这篇文章，可以更好地理解程序是如何在计算机上运行的，以及操作系统和硬件是如何协同工作的。&lt;/p>
&lt;h3 id="家庭服务器机架搭建指南">家庭服务器机架搭建指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-39-11.png"
width="354"
height="453"
loading="lazy"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="187px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mtlynch.io/building-first-homelab-rack/" target="_blank" rel="noopener"
>家庭服务器机架搭建指南&lt;/a>。&lt;/p>
&lt;p>如果你也考虑给自己的家庭服务器安装更专业的机架的话，可以参考这篇文章。&lt;/p>
&lt;p>文章是关于作者Mike Lynch如何构建他的第一个家庭实验室（homelab）机架的经历。文章详细介绍了他为什么决定建立一个服务器机架、如何选择和购买各种组件、以及他在搭建过程中遇到的挑战和学到的经验教训。&lt;/p>
&lt;h3 id="有效利用你的-shell-历史记录">有效利用你的 shell 历史记录
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-39-22.png"
width="436"
height="195"
loading="lazy"
class="gallery-image"
data-flex-grow="223"
data-flex-basis="536px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://martinheinz.dev/blog/110" target="_blank" rel="noopener"
>有效利用你的 shell 历史记录&lt;/a>。&lt;/p>
&lt;p>如果您经常在 shell/terminal 中工作，那么随着时间的推移，历史记录将成为您的个人知识库、文档和命令参考。能够有效地使用这些个人文档可以极大地提高您的工作效率。因此，这里有一些关于如何优化 shell 历史记录配置和使用以充分利用它的提示。 ​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="三维可视化前端库">三维可视化前端库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-39-32.png"
width="690"
height="392"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="422px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/hawk86104/icegl-three-vue-tres" target="_blank" rel="noopener"
>three vue ts js&lt;/a>。&lt;/p>
&lt;p>一款让你的三维可视化项目快速落地の开源框架 🎊🎉🎉 永久开源，免费商用 ​​​。&lt;/p>
&lt;h3 id="开源大模型实用指南">开源大模型实用指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-39-41.png"
width="690"
height="237"
loading="lazy"
class="gallery-image"
data-flex-grow="291"
data-flex-basis="698px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/datawhalechina/self-llm" target="_blank" rel="noopener"
>self-llm&lt;/a> 是一个围绕开源大模型、针对国内初学者、基于 AutoDL 平台的大模型教程，针对各类开源大模型提供包括环境配置、本地部署、高效微调等技能在内的全流程指导，简化开源大模型的部署、使用和应用流程，让更多的普通学生、研究者更好地使用开源大模型，帮助开源、自由的大模型更快融入到普通学习者的生活中。&lt;/p>
&lt;h3 id="网络编程入门教程">网络编程入门教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-39-50.png"
width="385"
height="339"
loading="lazy"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="272px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/rogerzhu/-bgnet0-cn" target="_blank" rel="noopener"
>Beej 的网络编程课（中文版）&lt;/a>&lt;/p>
&lt;p>国内有网友将 Beej 大神的 &lt;a class="link" href="https://github.com/beejjorgensen/bgnet0" target="_blank" rel="noopener"
>Beej&amp;rsquo;s Guide to Network Concepts&lt;/a> 翻译为中文。&lt;/p>
&lt;p>译者自介绍：&lt;/p>
&lt;blockquote>
&lt;p>我还记得我第一次看到 Beej 大神的文字是很多年前的一本基于c语言讲的计算机网络。按照 Beej 自己的官网上说法，这一系列的文章算不上一本正式的书，是他大学上课的资料整理。不同于之前的c语言版本，这一资料用的是现在使用的最广泛的语言之一python 来介绍原理，更加贴近整个学校的教学体系。&lt;/p>
&lt;/blockquote>
&lt;p>开头段落引用：&lt;/p>
&lt;blockquote>
&lt;p>这是一份介绍计算机网络中一系列常见概念的读物，注意，这份文档里面并不是我的另外那本《Beej的网络编程指南&amp;ndash;C语言版》[flbg[Beej的 的网络编程指南|bgnet]]。这一系列文章旨在让读者对各种繁杂的网络术语有所了解，当然，为了加深理解，文章中会有一些使用python进行的编程练习和例子。&lt;/p>
&lt;/blockquote>
&lt;h3 id="通过游戏学习-git">通过游戏学习 Git
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-40-02.png"
width="690"
height="421"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="393px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://ohmygit.org/" target="_blank" rel="noopener"
>ohmygit&lt;/a>，一个学习 Git 操作的开源小游戏。&lt;/p>
&lt;p>游戏通过故事性关卡的设置，让玩家可以再每一关都学习一个基本的 Git 操作。 ​​​&lt;/p>
&lt;h3 id="在终端里显示地图">在终端里显示地图
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-40-19.png"
width="690"
height="410"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="403px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/rastapasta/mapscii" target="_blank" rel="noopener"
>mapscii&lt;/a>，一个有趣的项目，在终端里用字符绘制地图。&lt;/p>
&lt;p>基于 nodejs 实现。&lt;/p>
&lt;p>支持用鼠标缩放。&lt;/p>
&lt;p>兼容大多数终端（Windows 需要使用 Putty 进行登录）。&lt;/p>
&lt;p>以下命令可快速体验：telnet mapscii.me ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="克制">克制
&lt;/h3>&lt;p>保持克制，是感受幸福和美好的关键基础，正像是玩游戏不能作弊无限命那样，一旦失去限制，事情要么走向无聊和乏味，要么走向美好幸福的反面。&lt;/p>
&lt;p>无论是工作还是日常生活，都适用。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 077 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-48-53.png" alt="Featured image of post 机器文摘 第 077 期" />&lt;h1 id="机器文摘-第-077-期">机器文摘 第 077 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="不下雨就不能上网">不下雨就不能上网？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-48-38.png"
width="510"
height="209"
loading="lazy"
class="gallery-image"
data-flex-grow="244"
data-flex-basis="585px"
>&lt;/p>
&lt;p>当年有个流传很广的关于汽车的故事。说的是福特工程师接到一个顾客投诉，他每天开车路过冰淇淋商店买冰淇淋，每当买香草冰淇淋的时候，发动机就会锁死。&lt;/p>
&lt;p>看似很玄的一个故障，在工程师不屑的努力下，发现了故障原因&amp;mdash;-“香草冰淇淋制作时间非常短”，顾客短时间内停车再发动，导致车载电脑开启了保护模式。&lt;/p>
&lt;p>现在又有一个关于 Wi-fi 的真实段子，来源于这篇&lt;a class="link" href="https://predr.ag/blog/wifi-only-works-when-its-raining/" target="_blank" rel="noopener"
>《只有下雨才有 Wi-fi》&lt;/a>。&lt;/p>
&lt;p>这篇文章是作者在愚人节发布的，旨在以幽默的方式探讨一个看似荒谬的现象。&lt;/p>
&lt;p>作者分享了一个非常“走近科学”的故事，即：家里的 Wi-Fi 信号只有在下雨时才能正常工作。&lt;/p>
&lt;p>每当下雨时，Wi-Fi 连接就会变得非常稳定，而雨停后不久，连接就会变得不稳定。&lt;/p>
&lt;p>为了解决这个问题，作者开始调查家庭网络设置。&lt;/p>
&lt;p>他们家使用的是一种通过两个高增益定向 Wi-Fi 天线建立的视线Wi-Fi桥接（line-of-sight Wi-Fi bridge）连接，这种设置在过去的十年里一直运行得很好。&lt;/p>
&lt;p>作者通过一系列的排查和调试，包括重启设备、检查网络硬件、测试有线连接等，都没有找到问题的根源。&lt;/p>
&lt;p>最终，作者在一次检查过程中意识到，他们家附近的一棵大树随着时间的增长，其顶部的树枝开始干扰 Wi-Fi 信号。&lt;/p>
&lt;p>每次下雨时，雨水的重量会使树枝下垂，暂时避开了对 Wi-Fi 信号的遮挡，&lt;/p>
&lt;p>这就是为什么雨停后不久 Wi-Fi 就会再次出现问题的原因。&lt;/p>
&lt;p>解决这个问题的方法是升级硬件。&lt;/p>
&lt;p>作者家更换了新的 802.11n Wi-Fi 设备，这些设备采用了“波束成形”（beamforming）技术，可以在多天线传输时形成和引导信号，提高信号的有效范围和质量。通过这次升级，即使在不下雨的时候，Wi-Fi 连接也能保持稳定。&lt;/p>
&lt;h3 id="软件一直迭代更新是软件企业的阴谋吗">软件一直迭代更新是软件企业的阴谋吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-48-53.png"
width="631"
height="316"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="479px"
>&lt;/p>
&lt;p>安德鲁·凯利（Andrew Kelly）写过一篇文章，阐述了为什么我们不可能拥有完美的软件。&lt;/p>
&lt;p>他指出软件需要经常升级是一件很诡异的事情，因为“数字信息实际上不会自行腐烂”。&lt;/p>
&lt;p>也就是说，软件不应该仅仅因为搁置在那里就会自动变得更糟（他不会不知道热力学第二定律）。&lt;/p>
&lt;p>他认为这种维护工作是一种人为的需求。&lt;/p>
&lt;p>也就是说，持续维护是公司的阴谋，为了盈利，公司会做出不必要的软件升级。&lt;/p>
&lt;p>（微软：你在教我做事？）&lt;/p>
&lt;p>不过接下来这篇文章&lt;a class="link" href="https://two-wrongs.com/laws-of-software-evolution" target="_blank" rel="noopener"
>《软件演化法则》&lt;/a>，则认为“软件持续迭代更新并不仅仅是软件企业的阴谋”。&lt;/p>
&lt;p>文章指出，软件存在是为了支持现实世界的任务，随着现实世界的变化，软件也必须随之变化，否则就会变得不再相关。&lt;/p>
&lt;p>此外，随着软件的变化，其复杂性会增加，除非投入努力来抵消这种效应，否则进一步变更的成本会增加。&lt;/p>
&lt;p>文中还提到，软件需要适应不断变化的环境、其他软件以及用户——即人们。人们会根据环境改变他们的态度和流程，软件也需要围绕这些变化进行适应。&lt;/p>
&lt;p>因此，软件的持续迭代和更新不仅仅是企业为了利润而进行的行为，而是由于软件需要适应不断变化的现实世界和用户需求。这种适应性是软件发展的一个重要方面，也是软件维护工作的一个重要驱动力。&lt;/p>
&lt;p>（微软：我谢谢你）&lt;/p>
&lt;h3 id="ray-marching-渲染入门">Ray Marching 渲染入门
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-49-05.png"
width="591"
height="406"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://connorahaskins.substack.com/p/ray-marching-menger-sponge-breakdown" target="_blank" rel="noopener"
>ray-marching-menger-sponge-breakdown&lt;/a>&lt;/p>
&lt;p>本文的作者Connor A. Haskins，通过详尽的解析和丰富的示例，带领我们一步步了解“射线行进”的原理和应用。&lt;/p>
&lt;p>射线行进技术是一种介于光栅化和光线追踪之间的渲染方法。&lt;/p>
&lt;p>与光线追踪不同，它不是从像素出发去计算与场景的交点。&lt;/p>
&lt;p>射线行进通过迭代的方式，从屏幕像素发出射线，利用有符号距离场（SDF）来计算射线与场景中物体的距离，从而实现高效的渲染。&lt;/p>
&lt;p>文章中，作者详细介绍了如何使用 &lt;a class="link" href="www.shadertoy.com/" >ShaderToy&lt;/a> 平台上的 GLSL ES 代码片段来实现射线行进算法。&lt;/p>
&lt;p>通过不断的迭代和计算，我们可以精确地渲染出Menger海绵的每一个细节。这个过程不仅展示了数学和计算机图形学的完美结合，也为我们提供了一种全新的视角来理解和探索三维空间。&lt;/p>
&lt;h3 id="使用-dos-调试器-debugger-编程">使用 DOS 调试器 (Debugger) 编程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-49-32.png"
width="379"
height="478"
loading="lazy"
class="gallery-image"
data-flex-grow="79"
data-flex-basis="190px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://susam.net/programming-with-dos-debugger.html" target="_blank" rel="noopener"
>使用 DOS 调试器(Debugger)编程&lt;/a>。&lt;/p>
&lt;p>上世纪九十年代，如果你有一台装有 MS-DOS 或者 Windows 98 的个人电脑。&lt;/p>
&lt;p>当你希望动手编程，但是手上恰好没有各种编译器、IDE 集成开发环境时，你可以考虑使用 Debugger 来应急。&lt;/p>
&lt;p>理论上，它可以做任何事情（我想起了那个老段子，电脑高手手写刻录光盘帮朋友连夜做了一个操作系统）。&lt;/p>
&lt;p>MS-DOS 和 Windows 98 都带有一个名为 DEBUG.EXE 的调试器程序，可用于处理汇编语言指令和机器代码。在 MS-DOS 版本 6.22 中，此程序被命名为 DEBUG.EXE ，它通常出现在 C:\DOS\DEBUG.EXE 。在 Windows 98 上，此程序通常位于 C:\Windows\Command\Debug.exe 。它是一个面向行的调试器，支持各种有用的功能来处理和调试由机器代码组成的二进制可执行程序。&lt;/p>
&lt;p>在上面这篇文章中，我们将看到如何使用这个调试器程序来“编”一些最小的程序，这些程序将一些字符打印到标准输出。&lt;/p>
&lt;p>当然包括经典的“hello， world”。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="南瓜操作系统">南瓜操作系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-49-54.png"
width="463"
height="339"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/migueletto/PumpkinOS" target="_blank" rel="noopener"
>PumpkinOS&lt;/a> 是 PalmOS 的开源实现，运行在现代架构（x86、ARM 等）上。它不是普通的 PalmOS 模拟器（它不需要 PalmOS ROM），但它可以运行 m68K PalmOS 应用程序。&lt;/p>
&lt;p>内含 PalmOS 上的四个 PIM 应用程序：AddressBook、MemoPad、ToDoList 和 DateBook。这些应用程序的源代码分布在一个或多个 PalmOS SDK 中，并经过调整以在 PumpkinOS 上正确编译。&lt;/p>
&lt;p>有关描述 PumpkinOS 各方面详情，见这里：https://pmig96.wordpress.com/category/palmos/&lt;/p>
&lt;h3 id="随机卡通头像生成器">随机卡通头像生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-50-08.png"
width="606"
height="538"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zengm.com/facesjs/" target="_blank" rel="noopener"
>face.js&lt;/a>，&lt;/p>
&lt;p>比&lt;a class="link" href="https://txstc55.github.io/ugly-avatar/" target="_blank" rel="noopener"
>丑丑头像生成器&lt;/a>好看那么一点儿的头像生成库。&lt;/p>
&lt;p>faces.js 是一个生成和显示卡通面孔的 JavaScript 库，有点让人想起任天堂 Wii 生成随机 Miis 的方式。人脸绘制为可缩放矢量图形 （SVG）。 ​​​&lt;/p>
&lt;h3 id="又一个提示词市场">又一个提示词市场
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-50-25.png"
width="690"
height="531"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://artiversehub.ai/cn/prompt-marketplace" target="_blank" rel="noopener"
>prompt-marketplace&lt;/a>。&lt;/p>
&lt;p>文生图提示词市场，适用于多个平台的免费 AI 图像提示。每天更新提示。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="关于微软偷偷给-windows-用户安装微软电脑管家">关于微软偷偷给 Windows 用户安装“微软电脑管家”
&lt;/h3>&lt;p>微软偷摸给 windows 用户安装自家的“管家”软件的行为，就好像你在被窝裸睡正爽，突然有一双手伸进来，默默给你穿上了内裤。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 076 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/</link><pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-40-10.png" alt="Featured image of post 机器文摘 第 076 期" />&lt;h1 id="机器文摘-第-076-期">机器文摘 第 076 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="太阳有意识吗">太阳有意识吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-40-10.png"
width="690"
height="460"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>许多文化和宗教传统中，太阳和其他天体被认为是有生命和智慧的。&lt;/p>
&lt;p>例如，在古罗马和印度，太阳被尊为神；在其他某些文化中，太阳是女神。&lt;/p>
&lt;p>这些传统反映了人类对自然界的拟人化理解。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.sheldrake.org/files/pdfs/papers/Is_the_Sun_Conscious.pdf" target="_blank" rel="noopener"
>太阳有意识吗？&lt;/a>&lt;/p>
&lt;p>这篇文章的核心内容是探讨太阳是否可能具有意识。&lt;/p>
&lt;p>文章首先指出，从机械唯物主义或物理主义的角度来看，太阳显然不是有意识的，因为在这些观点中，宇宙是一个机械系统，自然是非意识的，意识只是大脑物理活动的产物或幻象。然而，作者提出，从泛心论（panpsychism）的角度来看，意识可能是自然界多层次组织结构中的基本特征，不仅仅局限于大脑。&lt;/p>
&lt;p>文章进一步探讨了泛心论和信息整合理论（Integrated Information Theory, IIT），这些理论认为意识可能是物质的基本属性，存在于从原子到生物体的各种自组织系统中。文章还讨论了电磁场理论对意识的看法，这些理论认为大脑的电磁场可能就是意识的物理基础。&lt;/p>
&lt;p>作者提出了几个假设，包括Greg Matloff的“志愿星假设”（volitional star hypothesis），该假设认为恒星可能通过控制电磁驱动的喷流来调整在星系中的位置。另一个假设是Clément Vidal的“stellivore hypothesis”，该假设认为一些恒星可能是捕食者，通过从双星系统中的伴星吸食物质来维持自己。&lt;/p>
&lt;p>文章最后讨论了太阳的电磁场可能是其意识的物理基础。太阳是一个由等离子体组成的极其复杂的电磁系统，其电磁活动影响整个太阳系甚至更远。太阳的电磁场可能像大脑的神经网络一样，整合来自太阳系各个部分的信息。&lt;/p>
&lt;p>作者总结说，我们可以选择相信宇宙是非意识的，由永恒的数学法则统治，通过无目的和无意识的过程演化；或者我们可以选择接受泛心论的观点，即意识可能是自然界多层次组织结构中的基本特征。如果太阳有意识，那么它可能关心的是调节和保护自己的身体，以及通过电磁活动影响整个太阳系。此外，太阳可能通过其在银河系中的位置和与其他恒星系统的相互作用来感知和影响更大的宇宙。&lt;/p>
&lt;p>&lt;em>注：以上内容来自月之暗面聊天模型 &lt;a class="link" href="https://kimi.moonshot.cn/" target="_blank" rel="noopener"
>kimi&lt;/a> 的总结&lt;/em>&lt;/p>
&lt;h3 id="计划式编程还是探索式编程">计划式编程还是探索式编程？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-40-26.png"
width="690"
height="443"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="373px"
>&lt;/p>
&lt;p>来自 HN 上的一个讨论：https://news.ycombinator.com/item?id=39835343&lt;/p>
&lt;p>作者写了一篇文章表达了自己的编程习惯以及正在做的一些尝试：https://blog.dziban.net/essays/explorative-programming/&lt;/p>
&lt;p>作者表示，自己从来就没有按部就班地编程过，那种教科书上“从设计蓝图到开发计划再到编码实现”的“正规”方式自己根本适应不了。&lt;/p>
&lt;p>他喜欢的方式是，面对一个需要编程解决的问题，直接上手干，然后一边试一边改。&lt;/p>
&lt;p>貌似有很多程序员都是这样，我自己在编程时一般会在脑子里先构思一下，但也是边写边改。&lt;/p>
&lt;p>不过也有例外，记得有次我在 YouTube 上看到一个大神面试，考官给出问题，然后他直接写代码，写完一遍执行通过，一个错误都没改。&lt;/p>
&lt;p>HN 上同样有不同的声音，有人表示喜欢先仔细设计好再进行编码实现，可能个人习惯不同吧。&lt;/p>
&lt;p>但是，讨厌反馈周期长的事情是人的本性，人们都喜欢立即能看到效果。&lt;/p>
&lt;p>所以作者推断，肯定是喜欢这种边干边改的程序员居多。&lt;/p>
&lt;p>他给这种编程方式取名叫“探索式编程”，并表示目前的 IDE 、编程语言等各种环境都没有为这种编程方式提供方便。&lt;/p>
&lt;p>比如：不要基于文件管理各种函数和变量，随时自动给整套环境或某个函数提供快照，这样可以像探索迷宫那样，错了可以立即回到刚才的转角。&lt;/p>
&lt;p>最后作者表示自己正在动手制作一套这样的环境，并且选择 Common Lisp 作为编程语言（因为 Lisp 最接近作者想要的动态定义效果）。&lt;/p>
&lt;p>不过我看完作者的构思之后，感觉当前比较火的 Python 语言外加 &lt;a class="link" href="https://www.dataschool.io/jupyter-and-ipython-terminology/" target="_blank" rel="noopener"
>Jupter notebook&lt;/a> 也能满足一部分需求吧。&lt;/p>
&lt;h3 id="探索遗失的网络世界telnet-的复古魅力">探索遗失的网络世界：Telnet 的复古魅力
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-40-43.png"
width="690"
height="351"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>尽管 Telnet 作为一种远程访问服务器的工具已经被 Secure Shell (SSH) 所取代，但仍有一些人保持着他们的 Telnet 服务在线，因为它能够提供一种复古的娱乐体验。&lt;/p>
&lt;p>通过 Telnet，用户可以连接到不同的服务器，欣赏动画ASCII艺术、玩游戏等。&lt;/p>
&lt;p>在文章&lt;a class="link" href="https://thenewstack.io/the-lost-worlds-of-telnet/" target="_blank" rel="noopener"
>《The Lost Worlds of Telnet》&lt;/a>中，作者回顾了 Telnet 这个被遗忘的互联网工具的历史和文化。&lt;/p>
&lt;p>从ASCII艺术到复古游戏，Telnet不仅仅是SSH的前身，它还是一个充满乐趣的数字时光机。&lt;/p>
&lt;h3 id="从-160-行代码到-200-亿安装量curl-的传奇故事">从 160 行代码到 200 亿安装量：Curl 的传奇故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-41-08.png"
width="690"
height="381"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="434px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.infoq.cn/article/fEABoclZW0Fswu2g5Vvu" target="_blank" rel="noopener"
>本文介绍了 curl 的创始人 Daniel Stenberg 在 FOSDEM 2024 大会上的演讲内容&lt;/a>。&lt;/p>
&lt;p>Stenberg 分享了他从事开源项目的经历和见解，强调了成功的开源项目背后并没有天才或魔法，只是长期的努力和对创意的持续追求。&lt;/p>
&lt;p>他还提到了 curl 项目的起源和发展历程，以及在开发过程中所遇到的挑战和教训。&lt;/p>
&lt;p>尽管 curl 已经成为一项广泛应用的数据传输工具，但 Stenberg 强调了团队合作的重要性，并分享了他对开源社区的感悟和建议。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="猜-rgb-值的小游戏">猜 RGB 值的小游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-41-24.png"
width="690"
height="493"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://susam.net/myrgb.html" target="_blank" rel="noopener"
>这有一个小游戏，网页随机显示一个背景色&lt;/a>。&lt;/p>
&lt;p>并给你三个滑动条，代表 RGB 的值，你通过拖动他们形成一个你的猜测值。&lt;/p>
&lt;p>看你几次能够才对当前背景色的值。&lt;/p>
&lt;p>前端开发和设计师应该比较好上手吧。 ​​​&lt;/p>
&lt;h3 id="图像分辨率增强工具">图像分辨率增强工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-41-34.png"
width="690"
height="468"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/upscayl/upscayl" target="_blank" rel="noopener"
>开源免费的跨平台图像分辨率增强工具&lt;/a>。&lt;/p>
&lt;p>支持在你的桌面环境独立部署。 ​​​&lt;/p>
&lt;h3 id="notepadnext">NotepadNext
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-41-48.png"
width="690"
height="469"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;p>替换 Windows 自带记事本又多一个选项。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dail8859/NotepadNext" target="_blank" rel="noopener"
>NotepadNext&lt;/a>，开源跨平台编辑器（GPL3协议），Notepad++ 的平替。&lt;/p>
&lt;p>虽然作者说目前还有不少 bug 和待完成的功能，但是估计网友们苦 Notepad++ 久矣，对这个项目都很热情，目前超过 7k star。 ​​​&lt;/p>
&lt;h3 id="用-javascript-做深度学习">用 Javascript 做深度学习
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-42-00.png"
width="690"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="350px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/eduardoleao052/js-torch" target="_blank" rel="noopener"
>js-torch&lt;/a>，Javascript 深度学习库，跟 PyTorch API 基本一致，优势是可在任意 JS 环境运行，在浏览器里也可以进行深度学习训练。&lt;/p>
&lt;p>Demo 地址：eduardoleao052.github.io/js-torch/assets/demo/demo.html ​​​&lt;/p>
&lt;h3 id="丑丑头像生成器">丑丑头像生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-42-13.png"
width="495"
height="491"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>&lt;/p>
&lt;p>地址：https://txstc55.github.io/ugly-avatar/&lt;/p>
&lt;p>随机生成丑不拉几的手绘头像。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 075 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/</link><pubDate>Tue, 26 Mar 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-49-17.png" alt="Featured image of post 机器文摘 第 075 期" />&lt;h1 id="机器文摘-第-075-期">机器文摘 第 075 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="40-年编程经验分享">40 年编程经验分享
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-48-18.png"
width="431"
height="491"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://liw.fi/40/" target="_blank" rel="noopener"
>40 年编程经验分享&lt;/a>&lt;/p>
&lt;p>作者 14 岁接触电脑（1984年），为了玩到游戏而不得不学习 BASIC 编程，而后一发不可收拾，决定了他一生的事业。&lt;/p>
&lt;p>与几乎所有过来人一样，作者认识到自己走了一些弯路，并希望分享一些掏心窝子的话，给那些刚起步不久的程序员。&lt;/p>
&lt;p>&lt;em>作者很罗嗦，写了很多，我觉得大概率没人能听进去&lt;/em>&lt;/p>
&lt;p>歌词大意：&lt;/p>
&lt;p>1、创造软件的核心技能不是编程，而是沟通和协作，哪怕是只有 1 个人的项目，也需要考虑“过去的你”、“现在的你”和“未来的你”这三个人的沟通；&lt;/p>
&lt;p>2、做事有条理，不被打扰，吃好睡好是提升生产力的关键，一套合理的个人事务管理与跟踪系统很有必要。作者提到了&lt;a class="link" href="https://gtdfh.liw.fi/" target="_blank" rel="noopener"
> GTD &lt;/a>这套个人时间管理方法论（我也曾沉迷过一段时间）。&lt;/p>
&lt;p>3、软件生产的大部分成本来自初始版本之后，即所谓的维护阶段。最初的开发可能需要一两年的时间，维护将需要几十年的时间。(这说的是比较成功的软件吧？）所以提前考虑好维护成本也很重要。&lt;/p>
&lt;p>4、两周之外不要做详细计划，但两周内进行详细计划并且按照方向进行迭代，是比较有效的方式。&lt;/p>
&lt;p>5、书面表达很重要，文字材料用于交流的实用性很高。&lt;/p>
&lt;p>6、写简单的、清晰的代码，而不是复杂的、高级的代码。&lt;/p>
&lt;p>7、推荐阅读&lt;a class="link" href="https://github.com/Cactus-proj/A-Philosophy-of-Software-Design-zh" target="_blank" rel="noopener"
>《软件设计哲学》&lt;/a>（链接是我找到的中文版，之前好像收录过）。&lt;/p>
&lt;h3 id="30-年前写的一个对话框一直用到今天">30 年前写的一个对话框一直用到今天
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-48-36.png"
width="637"
height="680"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="224px"
>&lt;/p>
&lt;p>Windows 自带的格式化磁盘对话框，来自于 30 年前的一次临时提交，当时作者花了大概一个早上，编写了它。&lt;/p>
&lt;p>谁知后来竟再也没改过。&lt;/p>
&lt;p>文章来自作者的推文：twitter.com/davepl1968/status/1772042158046146792&lt;/p>
&lt;blockquote>
&lt;p>在1994年的一个阴雨连绵的星期四早晨，我在微软公司写下了这个格式化对话框，如果我没记错的话。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>当时我们正在将Windows 95用户界面的无数行代码移植到NT系统上，而格式化功能正是Windows NT与Windows 95差异足够大，以至于我们必须设计一些定制化的用户界面的领域之一。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我拿出一张纸，记录下了所有与磁盘格式化相关的选项和选择，比如文件系统、标签、簇大小、压缩、加密等。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>接着我启动了VC++ 2.0，使用资源编辑器简单地将所有你必须做出的选择以垂直堆叠的方式布局出来，大致按照你必须做出这些选择的顺序。它并不优雅，但在优雅的用户界面到来之前，它能够凑合使用。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>那是大约30年前的事了，而那个对话框至今仍是我那个星期四早上的临时版本，所以请小心对待“临时”解决方案！&lt;/p>
&lt;/blockquote>
&lt;h3 id="追求财富的科技智慧naval-ravikant-的深刻见解">追求财富的科技智慧：Naval Ravikant 的深刻见解
&lt;/h3>&lt;p>在这个快速变化的时代，科技不仅重塑了我们的生活方式，也重新定义了财富的概念。Naval Ravikant，作为一位杰出的科技投资者和 AngelList 的联合创始人，为我们提供了一份关于如何在科技领域追求财富、实现个人自由和成功的宝贵指南。&lt;/p>
&lt;p>&lt;a class="link" href="https://nav.al/rich" target="_blank" rel="noopener"
>《How to Get Rich》(怎样致富？）&lt;/a>&lt;/p>
&lt;p>这篇文章是基于Naval在Twitter上发布的一系列推文（tweetstorm）而扩展的，这些推文因其深刻的见解而迅速走红。Naval在文中讨论了如何通过追求财富来获得自由，而不是仅仅为了金钱或社会地位。他提出了一系列原则和建议，包括：&lt;/p>
&lt;ol>
&lt;li>寻求财富而不是金钱或地位。&lt;/li>
&lt;li>财富是可以在你休息时仍能为你赚钱的资产。&lt;/li>
&lt;li>金钱是社会信用，可以用来转移财富。&lt;/li>
&lt;li>地位是社会层级中的一种排名。&lt;/li>
&lt;li>创造财富不是零和游戏，而是正和游戏。&lt;/li>
&lt;li>通过提供社会所需的产品或服务来创造财富。&lt;/li>
&lt;li>避免将自己的时间出租，而是要拥有股权以获得财务自由。&lt;/li>
&lt;li>通过建立信誉和独特的个人品牌来吸引运气和机会。&lt;/li>
&lt;li>利用互联网扩大职业可能性，找到并放大你的小众兴趣。&lt;/li>
&lt;li>选择与长期合作的长期伙伴一起工作。&lt;/li>
&lt;/ol>
&lt;p>Naval认为，财富不仅仅是金钱的堆砌，更是能够在我们休息时持续创造价值的资产。他区分了财富、金钱与地位，强调了财富的真正价值在于它能够为我们带来自由——从日常的束缚中解放出来，拥有选择的自由。&lt;/p>
&lt;p>Naval Ravikant的见解为我们提供了一种全新的视角，让我们认识到在科技时代追求财富不仅仅是为了物质的积累，更是为了实现个人的梦想和自由。他的理念和策略无疑将激励和指导科技爱好者、创业者和投资者在这个时代创造更多的价值和可能性。&lt;/p>
&lt;p>&lt;em>这篇文章很长，长到我一直没耐心看完，不得不求助于 AI 帮我总结&lt;/em>&lt;/p>
&lt;h3 id="用-javascript-实现一个源码解析器">用 Javascript 实现一个源码解析器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-48-53.png"
width="631"
height="224"
loading="lazy"
class="gallery-image"
data-flex-grow="281"
data-flex-basis="676px"
>&lt;/p>
&lt;p>解析器（Parser）是源码编译工具的重要组成，包括一些现代的文本编辑器，为了实现语法高亮、自动补全等功能，也需要在代码编辑时刻进行解析。&lt;/p>
&lt;p>很多人遇到此类任务的第一感觉是很难（比如让你手写一个 C++ 的解析器），但如果写一个轻量的、小的解析器也许很简单。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://marijnhaverbeke.nl/blog/lezer.html" target="_blank" rel="noopener"
>《Lezer ： A parsing system for CodeMirror, inspired by Tree-sitter》&lt;/a>，是开源前端代码编辑器 &lt;a class="link" href="https://codemirror.net/" target="_blank" rel="noopener"
>CodeMirror&lt;/a> 的作者所写。&lt;/p>
&lt;p>写这篇文章主要是为了介绍他给 CodeMirror 所编写的解析器 &lt;a class="link" href="https://lezer.codemirror.net/" target="_blank" rel="noopener"
>Lezer&lt;/a> ，同时讲解了怎样使用 Javascript 语言构建一个解析器，作者认为此类任务并没有想象中那么复杂，只要掌握一些基本的思路，普通程序员也可以做出符合自己需求的解析器来。&lt;/p>
&lt;h3 id="2000-个字符写一个-intel-8080-cpu-模拟器">2000 个字符写一个 Intel 8080 CPU 模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-49-17.png"
width="637"
height="922"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="165px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://nanochess.org/emulator.html" target="_blank" rel="noopener"
>2000 个字符写一个 Intel 8080 CPU 模拟器&lt;/a>&lt;/p>
&lt;p>注意，不是 2000 行代码，是 2000 个字符。&lt;/p>
&lt;p>作者给出的这些代码是他参加&lt;a class="link" href="https://www.ioccc.org" target="_blank" rel="noopener"
> IOCCC &lt;/a>比赛的获奖作品，即文章标题提到的 8080 模拟器。&lt;/p>
&lt;p>IOCCC 的全称是 International Obfuscated C Code Contest（国际C语言混乱代码大赛）。&lt;/p>
&lt;p>这段仅有 2000 个字符的 C 语言程序不仅模拟了 8080 CPU，并且还带有键盘输入和屏幕输出的支持，以及一个磁盘控制器，可以算是一个简单的个人电脑了。&lt;/p>
&lt;p>在运行后可以加载一些古老的 BASIC 解释器，实现最基本的编程操作。&lt;/p>
&lt;p>作者在文章里介绍了 8080 的一些技术细节，比起现在的 CPU ，那时的 CPU 确实简单很多。&lt;/p>
&lt;p>至于这段代码，虽然作者也在文中试图解释了一些原理，不过还是不要试图弄懂它了吧。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="网页打包下载到本地">网页打包下载到本地
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-49-40.png"
width="690"
height="304"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="544px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://crates.io/crates/monolith" target="_blank" rel="noopener"
>monolith&lt;/a>，一个可以将任何网页打包下载到一个 HTML 文件中的工具。&lt;/p>
&lt;p>与传统的“将页面另存为”不同， monolith 不仅保存目标文档，还同时嵌入了 CSS、图像和 JavaScript 资源，生成了一个存储和共享的 HTML5 文档。&lt;/p>
&lt;p>与使用命令 &lt;code>wget -mpk&lt;/code> 保存网站相比，此工具将所有资产嵌入为数据 URL，因此即使在离线情况下，浏览器也可以还原页面的原始效果。&lt;/p>
&lt;h3 id="最小的-logo-语言解释器">最小的 LOGO 语言解释器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-49-54.png"
width="690"
height="509"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/nanochess/bootLogo" target="_blank" rel="noopener"
>BootLOGO&lt;/a>，Logo 语言的一个小型解释器，只有不到512字节大小。&lt;/p>
&lt;p>汇编语言写的。可以装在x86 引导扇区启动系统。&lt;/p>
&lt;p>小海龟 LOGO 语言是一代人的计算机启蒙语言。早年流行的小霸王学习机上也有过 ​​。&lt;/p>
&lt;h3 id="将任意-ai-模型发布为-http-服务">将任意 AI 模型发布为 HTTP 服务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-50-42.png"
width="865"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="539px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/kibae/onnxruntime-server" target="_blank" rel="noopener"
>ONNX Runtime Server&lt;/a> 是一个为 ONNX 推理提供 TCP 和 HTTP/HTTPS REST API 的服务程序。&lt;/p>
&lt;p>可以方便地将任意 ONNX 格式的模型发布为 HTTP 服务供外部调用。&lt;/p>
&lt;p>ONNX 是一个开放格式，用于描述和承载深度学习模型，允许跟不同的深度学习框架进行模型格式转换。ONNXRuntime 旨在提供一种高效的方式来运行 ONNX 模型，支持多种硬件和软件平台，包括 CPU、GPU 和边缘设备。&lt;/p>
&lt;h3 id="给-sqlite-数据提供-http-服务">给 Sqlite 数据提供 HTTP 服务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-50-53.png"
width="690"
height="363"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/thevahidal/soul" target="_blank" rel="noopener"
>Soul&lt;/a>，一个给 Sqlite 数据库提供 REST API 的命令行工具。&lt;/p>
&lt;p>运行 &lt;code>soul -d sqlite.db -p 8000&lt;/code> ，它会在 网页链接 上启动一个 REST API，在 &lt;code>ws://localhost:8000&lt;/code> 上启动一个 Websocket 服务器。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="信誉堪比黄金">信誉堪比黄金
&lt;/h3>&lt;p>在低信誉社会里要不要坚持守信，是一个有点儿复杂的问题。&lt;/p>
&lt;p>普遍讲信誉的环境里，低信誉个体短期会带来极大收益，但长期是无法生存的。&lt;/p>
&lt;p>与之相反，低信誉环境下，高信誉个体短期会损害利益，但长期会积累起坚不可摧的东西。&lt;/p>
&lt;p>所以我个人的想法是，在物理条件允许的情况下，尽量讲信誉，将之视为比黄金更珍贵的品质。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 074 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/</link><pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-47-47.png" alt="Featured image of post 机器文摘 第 074 期" />&lt;h1 id="机器文摘-第-074-期">机器文摘 第 074 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="在谷歌日历里玩打砖块游戏">在谷歌日历里玩打砖块游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-47-34.png"
width="581"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>打砖块是一款历史悠久但是十分容易上瘾的消除类游戏。&lt;/p>
&lt;p>之前在家用主机、PC、街机等游戏平台上都有大量的版本。&lt;/p>
&lt;p>现在有人把打砖块游戏移植到了一个从没去过的地方&amp;mdash;-谷歌日历。&lt;/p>
&lt;p>作者做了一个叫做 &lt;a class="link" href="https://chromewebstore.google.com/detail/breaktime/efajcgehdfpliglonbkjmifmibpphafk?hl=en&amp;amp;authuser=0" target="_blank" rel="noopener"
>BreakTime&lt;/a> 的休闲游戏，打开谷歌日历的页面就能玩。&lt;/p>
&lt;p>游戏是一个谷歌浏览器插件，到市场安装后再打开谷歌日历后就玩到游戏了。&lt;/p>
&lt;p>游戏一共写了大概 1500 行 Js 代码（含一个迷你游戏引擎）。&lt;/p>
&lt;p>&lt;a class="link" href="https://eieio.games/nonsense/game-13-breaktime/" target="_blank" rel="noopener"
>这篇文章记录了作者研发这个游戏的历程。&lt;/a>&lt;/p>
&lt;h3 id="上世纪三十年代怎样传输照片">上世纪三十年代怎样传输照片？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-47-47.png"
width="551"
height="362"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>前一段时间我读了一本书，匈牙利著名的战地记者罗伯特·卡帕所著，名为&lt;a class="link" href="https://book.douban.com/subject/1270508/" target="_blank" rel="noopener"
>《失焦》&lt;/a>。&lt;/p>
&lt;p>那句著名的“你拍的不够好是因为你离得不够近”就是出自卡帕之口。&lt;/p>
&lt;p>书中记述了作者在二战欧洲战场上记录战斗场景的各种惊心动魄故事。&lt;/p>
&lt;p>但我对于他将照片及时传送给远在纽约的报社所用手段更感兴趣，于是研究了一下当时可能采用的技术。&lt;/p>
&lt;p>经过搜索，锁定了一个通过在滚筒上绕线的方式传输照片的技术（实际上就是传真机），维基百科有相关介绍：https://en.wikipedia.org/wiki/Wirephoto&lt;/p>
&lt;p>相关资料较少，&lt;a class="link" href="https://blog.sciencenet.cn/blog-469915-1094198.html" target="_blank" rel="noopener"
>这篇中文论文探讨了照片传输的技术发展&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>在发送端，照相软片缠绕在一个玻璃圆筒上，外置光源（这里使用能斯特灯）发出的光线通过透镜汇聚于一点，穿过胶片进入玻璃圆筒，经棱镜反射于硒光电池上。
玻璃圆筒旋转的同时沿轴向运动，光点就以螺旋线的形式对整个胶片表面进行扫描。由于胶片各点的透明程度不同，照射于硒光电池上的光强度亦不相同，硒的电阻值随光照强度的变化引发导线上的电流强度随之变化。
在接收端，将与发送端相同的玻璃圆筒置于一个暗箱中，其表面覆盖着感应相纸。
接收端装有一个线动电流表，这个电流表由两根平行银线构成，两线中间安置了一个镁片，镁片覆盖于一个三角形的小孔前，其另一侧为一强光源。
由发送端传来的电流经过电流表时，银线带动镁片发生偏转，使得小孔部分露出，电流越强，小孔露出的部分越大。这样，通过小孔进入暗箱的光线强度随着电流强度而发生改变，光线经透镜汇聚后使相纸上相应位点的感光程度亦不相同，从而实现图像复制。&lt;/p>
&lt;/blockquote>
&lt;p>据说直到上世纪 90 年代仍有报社在使用这项技术进行照片传输。&lt;/p>
&lt;h3 id="九岁小孩用汇编语言能做什么">九岁小孩用汇编语言能做什么
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-47-58.png"
width="690"
height="485"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="341px"
>&lt;/p>
&lt;p>汇编语言几乎等于机器语言，编程的视角非常贴近硬件，写起来枯燥乏味且不易人类理解。&lt;/p>
&lt;p>现在除非一些特殊场景，否则应该没有人再愿意用它来编程了。&lt;/p>
&lt;p>不过在个人电脑还没那么普及的上个世纪八十年代，想要编程整点儿活儿，很有可能还得首选汇编。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://nanochess.org/locs.html" target="_blank" rel="noopener"
>《我在 9 岁时开发了一个绘画语言》&lt;/a>的作者真乃神童也。&lt;/p>
&lt;p>小小年纪因为喜欢用 Logo 语言进行绘图，但苦于手头缺乏市面上能够运行 Logo 语言的计算机，干脆自己撸了一个面向 Z80 机器的移植版本。&lt;/p>
&lt;p>（作者在 1988 年时才 9 岁，向小孩哥致敬 5 分钟）。&lt;/p>
&lt;p>虽然功能不算完备，但竟然具有可用性，成果后被作者的父亲用于教学活动中。&lt;/p>
&lt;p>他在整理父亲用于教学的文件夹时发现了自己写的代码以及说明文档。&lt;/p>
&lt;p>于是在 36 年之后写文章记录了下来。&lt;/p>
&lt;p>文中展示了他编写的代码，并讲解了部分实现原理。&lt;/p>
&lt;h3 id="了解古老的矢量显示器">了解古老的矢量显示器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-48-08.png"
width="690"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="477px"
>&lt;/p>
&lt;p>无论是现在的液晶显示器，还是再稍微古老一点的阴极射线管（CRT）显示器，都采用了一种叫做“光栅化”的技术来显示图像。&lt;/p>
&lt;p>这也是现代计算机图形学的基础，即：采用若干个有限的像素点来组成可见图像。&lt;/p>
&lt;p>但是，在此之前，还有一种显示技术，很少有人提到，不过它也曾经风靡过一段时间。&lt;/p>
&lt;p>它就是“矢量（Vector）显示器”，与现有的光栅化技术不同的是，其通过电子枪在荧光屏上直接“绘制”矢量图形来实现画面的显示。&lt;/p>
&lt;p>矢量显示器曾经一度作为高级图形工作站、航空航天仪器控制台、游戏机等各种应用场景的显示设备，甚至早期的科幻电影中，畅想的未来宇宙飞船中的控制台也是使用矢量显示器。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.jmargolin.com/xy/xymon.htm" target="_blank" rel="noopener"
>《XY显示器的秘密生活》&lt;/a>，非常深入地探讨了早期矢量显示器的技术细节，其中有很多微妙的部分。&lt;/p>
&lt;p>作者早年在雅达利公司工作，参与了几款矢量游戏的制作（估计类似太空飞船对射的那种？）。&lt;/p>
&lt;p>那时还没有形成计算机图形学的专门理论，更没有图形 API 可供调用。&lt;/p>
&lt;p>作者作为技术人员，必须了解相当多的硬件细节才能开发游戏。&lt;/p>
&lt;p>一些有趣的细节：&lt;/p>
&lt;p>1、控制 CRT 电子枪在荧光屏聚焦瞄准的部件是由若干个产生电场的线圈阵列组成，其使用的数学方程与设计相机镜头玻璃参数的方程一样，也就是说，这些线圈是一组用于电子束的“透镜”（原理和作用都一样）。&lt;/p>
&lt;p>2、如果希望产生接近平面直角的画面，必须使用特殊的手段来纠正屏幕角落的偏转失真，这些特殊手段包括在控制电路中加入模拟乘法器以实现偏转非线性矫正（1980 年代，数字控制肯定不现实）。&lt;/p>
&lt;p>3、显示器需要高电压（大概 1 万伏）来加速电子，那时最容易坏的器件就是那个提供高电压的变压器。&lt;/p>
&lt;h3 id="用-excel-实现一个-gpt">用 Excel 实现一个 GPT
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-48-25.png"
width="625"
height="352"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://linux.cn/article-13078-1.html" target="_blank" rel="noopener"
>Excel 现在是图灵完备的了&lt;/a>，理论上可以用它来做任何编程语言做到的事情。&lt;/p>
&lt;p>现在有人整活，实现了一个&lt;a class="link" href="https://spreadsheets-are-all-you-need.ai/index.html" target="_blank" rel="noopener"
>在 Excel 里的 GPT&lt;/a>（GPT2 模型，估计太大的运行不了吧）。&lt;/p>
&lt;p>事实上作者是希望通过这个项目来向大家讲解 GPT 的基础技术原理。&lt;/p>
&lt;p>项目仓库在这里：https://github.com/ianand/spreadsheets-are-all-you-need 可以去下载最新版本的 Excel 文件。&lt;/p>
&lt;h3 id="从神经网络到-hugging-face">从神经网络到 Hugging Face
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-48-43.png"
width="690"
height="259"
loading="lazy"
class="gallery-image"
data-flex-grow="266"
data-flex-basis="639px"
>&lt;/p>
&lt;p>互联网上优质而公开的中文内容越来越少，这篇&lt;a class="link" href="https://hutusi.com/articles/the-history-of-neural-networks" target="_blank" rel="noopener"
>《从神经网络到 Hugging Face》&lt;/a>，是一篇科普神经网络、深度学习发展历程的文章。&lt;/p>
&lt;p>文章条理清晰，一边梳理神经网络技术的发展历史，一边讲清楚了神经网络的核心思路，是我近期在中文网络上看到的少有的好文。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="跨平台数据库客户端">跨平台数据库客户端
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-49-05.png"
width="690"
height="380"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dbeaver/dbeaver" target="_blank" rel="noopener"
>DBeaver&lt;/a> ，一款为开发人员、SQL 程序员、数据库管理员和分析师提供免费的跨平台数据库客户端应用。&lt;/p>
&lt;p>基于 JDBC 支持几乎所有常见数据库（商业版本支持非 JDBC 数据源）。&lt;/p>
&lt;p>具有许多功能，包括元数据编辑器、SQL 编辑器、丰富的数据编辑器、ERD、数据导出/导入/迁移、SQL 执行计划等。&lt;/p>
&lt;p>基于 Eclipse 平台进行开发。&lt;/p>
&lt;h3 id="基于矢量的绘图应用程序">基于矢量的绘图应用程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-49-14.png"
width="690"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/flxzt/rnote" target="_blank" rel="noopener"
>Rnote&lt;/a> 是一个开源的基于矢量的绘图应用程序，用于素描、手写笔记以及注释文档和图片。它面向学生、教师和拥有绘图板的人，并提供 Pdf 和图片导入和导出、无限画布和适用于大屏幕和小屏幕的自适应 UI 等功能。&lt;/p>
&lt;p>配合手写笔和绘图板使用效果更佳。&lt;/p>
&lt;p>用 Rust 和 GTK4 编写。 ​​​&lt;/p>
&lt;h3 id="在安卓上运行-windows-老游戏">在安卓上运行 Windows 老游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-49-37.png"
width="690"
height="299"
loading="lazy"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="553px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/brunodev85/winlator" target="_blank" rel="noopener"
>winlator&lt;/a>，一个可以在 Android 系统上运行 Windows 游戏和应用的开源模拟器。&lt;/p>
&lt;p>这是一个 Android 应用，可以让你使用 Wine 和 Box86/Box64 来运行 Windows 应用和游戏，实现在手机上畅玩各种经典的 PC 游戏。&lt;/p>
&lt;h3 id="电子书transformers-快速入门">电子书《Transformers 快速入门》
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-49-47.png"
width="690"
height="260"
loading="lazy"
class="gallery-image"
data-flex-grow="265"
data-flex-basis="636px"
>&lt;/p>
&lt;p>教程旨在帮助 NLP 初学者快速熟悉 Transformers 库的使用方法，并且通过实例带领读者一步一步构建自己的模型，完成各种 NLP 任务。&lt;/p>
&lt;p>Transformers 是由 Hugging Face 开发的一个 NLP 包，支持加载目前绝大部分的预训练模型。&lt;/p>
&lt;p>随着 BERT、GPT 等大规模语言模型的兴起，越来越多的公司和研究者采用 Transformers 库来构建 NLP 应用。&lt;/p>
&lt;p>读者只需要熟悉 Python 语言即可，并不需要提前掌握 Keras、Pytorch 等深度学习包的使用。&lt;/p>
&lt;p>地址：https://transformers.run/&lt;/p>
&lt;h3 id="吴恩达新的-ai-课程-rag-知识图谱">吴恩达新的 AI 课程 RAG 知识图谱
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-50-06.png"
width="539"
height="299"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>课程包括：&lt;/p>
&lt;ul>
&lt;li>通过从头开始构建公共财务文档图来探索知识图谱的工作原理&lt;/li>
&lt;li>学习编写从图表中检索文本和数据的查询，并使用它来增强传递给 LLM 聊天机器人的上下文&lt;/li>
&lt;li>将知识图谱与问答链相结合，构建更好的 RAG 驱动的聊天系统&lt;/li>
&lt;/ul>
&lt;p>免费注册：https://www.deeplearning.ai/short-courses/knowledge-graphs-rag/&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="降低输入保持专注">降低输入，保持专注
&lt;/h3>&lt;p>当下的环境里，想要保持专注，比以往的任何时候都要更难一些。&lt;/p>
&lt;p>但也不是不能做到，有一些简单易行的方法；&lt;/p>
&lt;p>其中最首要的便是减少信息输入，尤其是网络碎片信息，短视频、社会新闻、娱乐新闻等等；&lt;/p>
&lt;p>信息输入的降低，可以有效减轻大脑负担，才有精力感受当下，脑海才能出现属于自己的思想意识（生其心）；&lt;/p>
&lt;p>其次是做一些自己能够持续产生心流的事情，比如写字、绘画、编程、运动、喝茶、游戏，在过程中，逐渐沉浸，进入心流状态，忘记时间的存在；&lt;/p>
&lt;p>保持专注是对当下的最好体会，也是解决担忧人生虚度的良药，是“应无所住，而生其心”的一种实践；&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 073 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/</link><pubDate>Tue, 12 Mar 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-41-28.png" alt="Featured image of post 机器文摘 第 073 期" />&lt;h1 id="机器文摘-第-073-期">机器文摘 第 073 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="你希望把你的微信聊天记录印成纸质书吗">你希望把你的微信聊天记录印成纸质书吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-40-12.png"
width="690"
height="364"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;p>国内我没听说过，国外有个哥们儿这样做了。&lt;/p>
&lt;p>&lt;a class="link" href="https://benkettle.xyz/posts/message-book/" target="_blank" rel="noopener"
>《提取三年的 iMessages 聊天记录印成书》&lt;/a>，记录了这个过程。&lt;/p>
&lt;p>1、作者突发奇想希望自己能够随时翻阅（物理上）自己的聊天记录；&lt;/p>
&lt;p>2、通过苹果提供的备份软件，将聊天记录备份到 Mac 电脑上，就可以得到一个 SQLite 的数据库（然后可以为所欲为）；&lt;/p>
&lt;p>3、使用 LaTex 进行排版（作者是个讲究人。。。）；&lt;/p>
&lt;p>4、到网上寻找印制服务，作者的“书”一共 1300 页，花了他 300 美元（嚯）；&lt;/p>
&lt;p>5、最后，如果你也想这样干，作者开源了一些过程中有用的代码脚本，地址在这里：https://github.com/bkettle/message-book&lt;/p>
&lt;h3 id="电脑是如何计算正弦值的">电脑是如何计算正弦值的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-40-28.png"
width="552"
height="244"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="542px"
>&lt;/p>
&lt;p>正弦函数是基本的三角函数之一，在数学、物理、工程和计算机科学等各个领域都起着至关重要的作用。它的计算并非易事，尤其是在电子计算器中实施时，效率和准确性至关重要。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://androidcalculator.com/how-do-calculators-compute-sine/" target="_blank" rel="noopener"
>《计算器如何计算正弦》&lt;/a>将深入探讨计算正弦函数的复杂过程，从简单的近似到更复杂的方法。&lt;/p>
&lt;p>文中有意思的点：&lt;/p>
&lt;p>1、由于正弦函数的周期性，只需计算 [0; pi/2]区间的值就足够了；&lt;/p>
&lt;p>2、泰勒级数近似可以逼近正弦函数，但是在 pi/2 处有较大的误差，不可接受，但提供了思路；&lt;/p>
&lt;p>3、英特尔有论文表明他们在处理器中使用了专门的多项式公式来近似正弦值（但是没公开！）；&lt;/p>
&lt;h3 id="为什么有些专业基金经理的回报率还不如一个啥都不懂的外行">为什么有些专业基金经理的回报率还不如一个啥都不懂的外行？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-41-28.png"
width="594"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>因为有科学研究表明，就像喝水一样，喝多了会中毒，聪明的过头了也会带来危险陷阱。&lt;/p>
&lt;p>&lt;a class="link" href="https://collabfund.com/blog/the-dumber-side-of-smart-people/" target="_blank" rel="noopener"
>《聪明人愚蠢的一面》&lt;/a>，论述了聪明的脑袋的局限，如果你很聪明，建议看看，说不定可以避开一些陷阱。&lt;/p>
&lt;p>关键信息：&lt;/p>
&lt;p>1、聪明的人喜欢给结果强行套入自己的公式：面对外部事情发生的结果，总是要拟合出一个自己的函数，并且认为其预测无比精准，比如解释股市涨落的各种公式。&lt;/p>
&lt;p>2、聪明的人基本听不进去资历比自己低的人提出的建议或观点：这也是很多企业走下坡路的原因，CEO 太聪明，无法接受任何外部的建议。&lt;/p>
&lt;p>3、很难改变主义：坚持自己的判断，会为错误付出巨大成本。&lt;/p>
&lt;h3 id="关于-os2-操作系统的那些事儿">关于 OS/2 操作系统的那些事儿
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-41-42.png"
width="633"
height="506"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="300px"
>&lt;/p>
&lt;p>如果你有幸摸过 2000 年之前的个人电脑，并且进入过它的 BIOS 界面的话，应该对一个选项有所印象。&lt;/p>
&lt;p>主板会让你选择希望安装的操作系统，以便做出对应的程序准备和调整，其中操作系统选项里一直有个叫做 “OS/2”的名字。&lt;/p>
&lt;p>这是我对这个操作系统的最早印象，后来 Windows NT/98/ME/2000/XP 几乎占据了所有桌面电脑，操作系统在一段时间内几乎就等于 Windows 了。&lt;/p>
&lt;p>然而如果把时钟拨回到 1990 年，那个时候，微软和 IBM 都在同一个操作系统上发力，那就是&lt;a class="link" href="https://baike.baidu.com/item/OS%2F2/1958699" target="_blank" rel="noopener"
> “OS/2”&lt;/a>，一款面向未来的操作系统。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.os2museum.com/wp/the-future-that-never-was/" target="_blank" rel="noopener"
>《从未有过的未来》&lt;/a>回顾了这款操作系统的诞生以及短暂的发展历程。&lt;/p>
&lt;p>如果你好奇 OS/2 到底长什么样的话，可以看一看，里面展示了一些古老的操作界面。&lt;/p>
&lt;p>它记录了上世纪 90 年代计算机操作系统从 16 位逐渐迈向 32 位的艰难过程。&lt;/p>
&lt;p>值得一提的是，虽然这款操作系统最终没能成功，但是微软的开发人员在相当长的一段时间内是使用了 OS/2 上面的环境开发了 Windows 系统 。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="支持多编程语言的环境版本管理工具">支持多编程语言的环境版本管理工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-42-12.png"
width="690"
height="800"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="207px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/version-fox/vfox" target="_blank" rel="noopener"
>vfox&lt;/a>，一款跨平台的通用版本管理工具，通过命令行快速安装、切换编程语言的不同版本，并支持自定义源地址。相比于针对每种语言的独立版本管理工具（如 nvm、fvm、gvm 等），这个项目让开发者摆脱繁琐的学习和记忆过程，只需一个工具、一条命令，轻松搞定多编程语言版本管理。&lt;/p>
&lt;h3 id="一键给网页添加-webgl-动态背景">一键给网页添加 WebGL 动态背景
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-42-26.png"
width="690"
height="484"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/latentcat/uvcanvas" target="_blank" rel="noopener"
>uvcanvas&lt;/a>，一个开源的 React 组件库，使用 webgl 的着色器，可以快速给网页加入炫酷的动态背景。&lt;/p>
&lt;h3 id="递归查看器">递归查看器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-42-38.png"
width="690"
height="509"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dmytrobaida.github.io/recursion-viewer/" target="_blank" rel="noopener"
>recursion-viewer&lt;/a>，这个网站可以可视化展示 JS 递归函数调用的过程，方便理解和调试你的递归函数。&lt;/p>
&lt;h3 id="在-docker-容器里跑-windows-系统">在 docker 容器里跑 windows 系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-42-47.png"
width="690"
height="354"
loading="lazy"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://https://github.com/dockur/windows" target="_blank" rel="noopener"
>Windows in a Docker container&lt;/a>. 一个开源项目，在 docker 容器里跑 windows 系统，可选择 Win7，Win10，Win11 等，支持自动激活，还支持远程桌面连接。&lt;/p>
&lt;p>基于 Linux 内核的 KVM 虚拟化技术，相当于容器里面跑虚拟机，然后再跑 Windows 系统，不过镜像已经实现了激活和开启远程桌面控制，比较方便使用。&lt;/p>
&lt;h3 id="浏览器中的桌面环境">浏览器中的桌面环境
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-42-58.png"
width="690"
height="440"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/HeyPuter/puter%e2%80%8b%e2%80%8b" target="_blank" rel="noopener"
>Puter&lt;/a> 是浏览器中的高级开源桌面环境，旨在功能丰富、速度极快且高度可扩展。它可用于构建远程桌面环境或用作云存储服务、远程服务器、Web 托管平台等的接口。&lt;/p>
&lt;p>此产品已运营 3 年，且用户量达到了 100 万，现在作者把他开源了出来。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="论生命之短暂">《论生命之短暂》
&lt;/h3>&lt;p>塞涅卡的《论生命之短暂》读起来有些类似马可奥勒留的《沉思录》的感觉，看完并不能记住太多内容，只记得作者在进行一些哲学反思，推崇追求高尚的人格；&lt;/p>
&lt;p>其中对于幸福的论断，要求人们看重财富但不能将之放在中心地位，只有这样才能避免成为财富的奴隶；&lt;/p>
&lt;p>作者论述了一个反极端的观点：即便是上述要求没有做到，也不能认为是失败的，人们树立了追求美德的目标，只要有这个向善的认识，即便没有做到“知行合一”也没什么好指责的；&lt;/p>
&lt;p>看得出来，作者作为当时斯多葛学派的代表人物，应该是遭受了很多“网络”喷子的攻击，不过作者拥有强大的内心，并未进行反驳和过多解释，坚信自己对美德的追求；&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 072 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/</link><pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-04-33.png" alt="Featured image of post 机器文摘 第 072 期" />&lt;h1 id="机器文摘-第-072-期">机器文摘 第 072 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="自己编写程序控制电脑的散热">自己编写程序控制电脑的散热
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-04-22.png"
width="690"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="415px"
>
现在的个人电脑，无论是采用风冷还是水冷，基本都带有根据温度情况自动调整风扇转速的控制系统，以达到散热与噪音平衡的目的。&lt;/p>
&lt;p>对于水冷散热来说，除了散热风扇的转速之外，还可调整水泵的功率（增大或减小水流速度），这些控制都是为了避免不必要的功率浪费和噪音抑制。&lt;/p>
&lt;p>现代 CPU 所带的温控传感器更加灵敏，且随着“睿频”等技术的发展，CPU 的温度波动变得更加剧烈，如果风扇转速时刻与温度参数绑定，对于调度程序来说，很可能造成频繁启停，增加对用户的噪音干扰。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://calbryant.uk/blog/better-pc-cooling-with-python/" target="_blank" rel="noopener"
>《使用 Python 和 Grafana 实现更好的 PC 冷却》&lt;/a>的作者意识到现在的温控程序不够智能，于是自己动手搓了一个更加细致的程序，替代了原有的方案，效果不错。&lt;/p>
&lt;p>具体改进的细节：&lt;/p>
&lt;p>1、根据 CPU 温度控制水泵功率；&lt;/p>
&lt;p>2、根据冷却液温度控制风扇转速；&lt;/p>
&lt;p>作者开源了用于控制的 Python 脚本，在文章原文里提供了相关链接。&lt;/p>
&lt;h3 id="lut-查找表在游戏技术中的应用">LUT 查找表在游戏技术中的应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-04-33.png"
width="689"
height="276"
loading="lazy"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="599px"
>&lt;/p>
&lt;p>之前提到过在技术领域，有一些非常通用的“方法”或者“概念”，可用于解决很多难题。&lt;/p>
&lt;p>比如：“索引”、“缓存”、“分层”，无论是硬件还是软件，都可以从这些概念和方法的应用中获得好处。&lt;/p>
&lt;p>LUT（查找表），也是这样一个“概念”。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://blog.frost.kiwi/WebGL-LUTS-made-simple/" target="_blank" rel="noopener"
>《视频游戏如何使用 LUT 以及使用 LUT 能做什么》&lt;/a>，便是探讨和了解 LUT 的很好材料。&lt;/p>
&lt;p>部分引用：&lt;/p>
&lt;blockquote>
&lt;p>查找表，通常称为 LUT，与数学本身一样古老。将事物预先计算到行或表中的行为并不是什么新鲜事。但是在图形编程领域，这个简单的行为解锁了一些令人难以置信的创造性技术，艺术家和程序员在面临艰难的技术障碍时都会发现这些技术。&lt;/p>
&lt;p>我们将踏上一段小小的旅程，这将带我们从简单的事情，如将灰度镜头转换为彩色，到创建无限变化的嗜血僵尸，在此过程中有许多交互式 WebGL 示例，您可以使用自己的视频或网络摄像头进行尝试。尽管本文使用 WebGL，但所展示的技术适用于任何其他图形编程上下文，无论是 DirectX、OpenGL、Vulkan、Unity 等游戏引擎，还是普通的科学数据可视化。&lt;/p>
&lt;/blockquote>
&lt;h3 id="一切为时不晚">一切为时不晚
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-04-48.png"
width="500"
height="375"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://kk.org" target="_blank" rel="noopener"
>KK&lt;/a> 在 2014 年写的一篇文章&lt;a class="link" href="https://kk.org/thetechnium/you-are-not-late/" target="_blank" rel="noopener"
>《一切为时不晚》&lt;/a>，&lt;a class="link" href="http://blog.fujiji.com/you-are-not-late/" target="_blank" rel="noopener"
>中文翻译在这里&lt;/a>。&lt;/p>
&lt;p>&lt;a class="link" href="https://news.ycombinator.com/item?id=39508046" target="_blank" rel="noopener"
>这篇十年前的文章近期又被 HN 网友顶上来讨论了一番。&lt;/a>&lt;/p>
&lt;p>文中 KK 主要表达的观点是：&lt;/p>
&lt;p>看到互联网上该发明的已经被发明了，先机已被占尽，不要感到沮丧。&lt;/p>
&lt;p>实际上再过 30 年回头看的话，还是有很多新的东西出现，现在动手，一切也都来得及。&lt;/p>
&lt;p>十年过去了，虽然科技创业环境已经不如从前，但网友们仍然对此观点持支持态度。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="开源的类超级马里奥游戏">开源的类超级马里奥游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-04-59.png"
width="690"
height="381"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="434px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SuperTux/supertux" target="_blank" rel="noopener"
>SuperTux&lt;/a>，是一款跳跃游戏，其灵感来自各种任天堂平台的超级马里奥兄弟游戏。在多个世界中奔跑和跳跃，通过跳到敌人身上、从下面撞到他们或向他们扔物体、在途中抓住动力装置和其他东西来击退敌人。&lt;/p>
&lt;p>场景和操控成熟度很不错，可玩度很高。&lt;/p>
&lt;p>游戏支持 WASM、MacOS、Windows、Linux 多平台。&lt;/p>
&lt;h3 id="智谱清言">智谱清言
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-05-26.png"
width="893"
height="688"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chatglm.cn/main/detail" target="_blank" rel="noopener"
>https://chatglm.cn/main/detail&lt;/a>&lt;/p>
&lt;p>清华出的大语言模型，可在线使用，个人感觉对话能力在国产领域属于前列；&lt;/p>
&lt;h3 id="两张照片生成-3d-模型">两张照片生成 3D 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-05-58.png"
width="633"
height="414"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/p>
&lt;p>AI 3D 建模越来越卷了。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/naver/dust3r" target="_blank" rel="noopener"
>DUSt3R&lt;/a>，不需要任何相机校准或视点姿势的先验信息，只需2张图片，无需测量任何额外数据，2秒钟就可完成任意图像的密集或无约束3D重建。&lt;/p>
&lt;h3 id="直接生成-png-素材的扩散模型">直接生成 PNG 素材的扩散模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-06-15.png"
width="531"
height="531"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/huchenlei/ComfyUI-layerdiffusion" target="_blank" rel="noopener"
>Layer Diffusion&lt;/a>，直接生成 PNG 素材，工作流兼容 SDXL 系列的所有模型和 Lora，甚至能直接生成发丝和透明玻璃杯。&lt;/p>
&lt;ul>
&lt;li>插件安装和部署：github.com/huchenlei/ComfyUI-layerdiffusion&lt;/li>
&lt;li>DreamShaper XL 下载：civitai.com/models/112902/dreamshaper-xl&lt;/li>
&lt;/ul>
&lt;h3 id="绿色-apk-资源下载网站">绿色 apk 资源下载网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-06-37.png"
width="690"
height="397"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://apkfreedown.com/" target="_blank" rel="noopener"
>简洁无广告的 apk 直接下载网站&lt;/a>，收录 42w+的 app， apkpure 替代网站&lt;/p>
&lt;p>作者花了两个月爬取的 apk 文件，花了两个星期开发的网站，目前收录了 42w+的 app ，简单绿色无广告但是有些 app 有兼容性问题，不一定能正常使用。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="把别人说的话当作真理是愚蠢行为">把别人说的话当作真理是愚蠢行为
&lt;/h3>&lt;p>有的时候，别人在表达方面确实能够比自己更清晰地表达出自己的感受，这种时候就容易特别认同别人表达的观点，从而忽略了客观现实。&lt;/p>
&lt;p>管中窥豹、盲人摸象、小马过河等成语记录了古人很早之前就意识到的“主观”与“客观”的差异性，以及视角不同所带来的认知差异（实际上每个人都是对的，但是每个人又都是错的）。&lt;/p>
&lt;p>唯有自己用心体会和观察，才能探索和接近真相，才有可能找到最符合自身利益的行动。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 071 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/</link><pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-28-31.png" alt="Featured image of post 机器文摘 第 071 期" />&lt;h1 id="机器文摘-第-071-期">机器文摘 第 071 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="在一个文本文件中管理待办-14-年">在一个文本文件中管理待办 14 年
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-27-57.png"
width="608"
height="574"
loading="lazy"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="254px"
>&lt;/p>
&lt;p>有不少书籍和方法论都在指导人们更加高效地处理日常生活中的各项事务。&lt;/p>
&lt;p>一般都会使用一个或多个工具（软件或物理实体），这些工具常以“清单”或者“日程表”的形式出现。&lt;/p>
&lt;p>这些工具如此精美，以至于大多数人难以抵御诱惑，沉溺于寻找更加强大、高效的工具中，忘记了提升效率的初衷。&lt;/p>
&lt;p>也有例外。&lt;/p>
&lt;p>&lt;a class="link" href="https://jeffhuang.com/productivity_text_file/" target="_blank" rel="noopener"
>《我的生产力应用程序是一个永无止境的.txt文件》&lt;/a>，文章作者便是反其道而行之，将所有事务都放在一个文本文件中进行记录和管理。&lt;/p>
&lt;p>这样做超过了 14 年，而且形成了自己特有的“系统”。&lt;/p>
&lt;p>作者说他本人感受到了较大的生产力提升，早已离不开这个“系统”。&lt;/p>
&lt;p>文中详细介绍了他这套“系统”的方式，可以进链接了解细节。&lt;/p>
&lt;p>大概思路：&lt;/p>
&lt;p>1、所有待办都放在日历中，每天按照日历的安排开展事务，每日更新日历，将未完成的挪到后续的日期中。&lt;/p>
&lt;p>2、所有事务的完成情况、随时的想法、与人的讨论内容，都记入同一个笔记文件（每天一个标题新起一段）；&lt;/p>
&lt;p>3、建立搜索关键词，比如“会议”、“购物”、“课程”等，可迅速搜索到所有同类的信息；&lt;/p>
&lt;p>4、每天白天做当日待办，并记录。晚上回顾更新日历以及笔记中需要跟踪或者重新安排到待办中的事情。如此往复循环。&lt;/p>
&lt;h3 id="为什么你几乎从来不会在商场看到时钟">为什么你几乎从来不会在商场看到时钟？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-28-31.png"
width="528"
height="353"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://thehustle.co/originals/why-you-almost-never-see-a-clock-at-the-mall" target="_blank" rel="noopener"
>为什么你几乎从来不会在商场看到时钟？&lt;/a>&lt;/p>
&lt;p>答案是：你停留的时间越长，你买的越多。&lt;/p>
&lt;p>但是为什么？&lt;/p>
&lt;p>研究表明，人的大脑中负责决策的部分，在刚开始的时候，是以理性认知为基础的。&lt;/p>
&lt;p>然而在同样的环境中，待的时间超出 23 分钟之后，决策部分将转换为情感部分，而不再是认知部分。&lt;/p>
&lt;p>40 分钟之后，他们的大脑将疲惫到降低要求，只要求能做出“合乎逻辑”的决策即可。&lt;/p>
&lt;p>于是商场会拼命让你忘却时间，给你迷宫路线，让你在里面走来走去绕不出来。&lt;/p>
&lt;p>然后一些“合乎逻辑”的推销就对你特别地凑效了。&lt;/p>
&lt;h3 id="前数字时代的绘图工具">前数字时代的绘图工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-28-42.png"
width="690"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>习惯了计算机绘图软件（如：CAD、Adobe Illustrator）的现代人，可能无法想象在计算机绘图软件发明之前，人们是如何绘制图纸（物理）的。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.daube.ch/docu/glossary/drawingtools.html" target="_blank" rel="noopener"
>《前数字时代的绘画和插图》&lt;/a>这篇文章回顾了一些曾经用于绘图的专业工具（非计算机软件）。&lt;/p>
&lt;p>看完后，我发现，除了我们小时候文具盒里的圆规和尺子之外，原来还有这么多辅助绘图的玩意儿。&lt;/p>
&lt;p>比较有意思的有：&lt;/p>
&lt;p>1、带导轨的宽幅绘图板（这个好像在电影中见过）；&lt;/p>
&lt;p>2、带比例放大的绘图尺；&lt;/p>
&lt;p>3、长得像罗盘的计算尺；&lt;/p>
&lt;h3 id="只需四张照片实现-3d-模型构建">只需四张照片实现 3D 模型构建
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-29-12.png"
width="690"
height="403"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>高斯泼溅是一种用于表示3D 场景和渲染新颖视图的方法，在“实时辐射场渲染的3D 高斯泼溅”中引入。 它可以被认为是NeRF² 类模型的替代品，就像当年的NeRF 一样，高斯分布导致了许多新的研究工作，这些工作选择将其用作各种用例的3D 世界的底层表示。&lt;/p>
&lt;p>&lt;a class="link" href="gaussianobject.github.io" >GaussianObject&lt;/a>，是一个使用高斯飞溅来表示和渲染 3D 对象的框架，只需 4 个输入图像即可实现高渲染质量。&lt;/p>
&lt;p>链接中有对应的论文和演示样例。&lt;/p>
&lt;p>摘要：&lt;/p>
&lt;blockquote>
&lt;p>从高度稀疏的视图重建和渲染 3D 对象对于促进 3D 视觉技术的应用和改善用户体验至关重要。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>然而，来自稀疏视图的图像仅包含非常有限的 3D 信息，这导致了两个重大挑战：&lt;/p>
&lt;p>1） 由于用于匹配的图像太少，难以建立多视图一致性;
2） 由于视图覆盖率不足，部分省略或高度压缩的对象信息。&lt;/p>
&lt;p>为了应对这些挑战，我们提出了 GaussianObject，这是一个使用高斯溅射来表示和渲染 3D 对象的框架，只需 4 个输入图像即可实现高渲染质量。&lt;/p>
&lt;p>我们首先介绍了视觉船体和浮子消除技术，这些技术将结构先验明确地注入到初始优化过程中，以帮助建立多视图一致性，从而产生粗略的 3D 高斯表示。&lt;/p>
&lt;p>然后，我们构建了一个基于扩散模型的高斯修复模型，以补充省略的目标信息，进一步细化了高斯修复模型。&lt;/p>
&lt;p>我们设计了一种自生成策略来获取用于训练修复模型的图像对。&lt;/p>
&lt;p>我们的 GaussianObject 在多个具有挑战性的数据集上进行了评估，包括 MipNeRF360、OmniObject3D 和 OpenIllumination，仅从 4 个视图就获得了强大的重建结果，并且性能明显优于以前的先进方法。&lt;/p>
&lt;/blockquote>
&lt;h3 id="膨胀的-javascript">膨胀的 JavaScript
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-30-07.png"
width="721"
height="369"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tonsky.me/blog/js-bloat/" target="_blank" rel="noopener"
>膨胀的 JavaScript&lt;/a>。&lt;/p>
&lt;p>js 文件越来越大了…… 打开个网站下载 js 文件就要 10 多 M。作者对常见的网站做了 js 大小的统计。&lt;/p>
&lt;p>大网站里表现最好的是 P 站（不愧是最关心性能的网站）。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="录制屏幕内容实现记忆搜索">录制屏幕内容，实现记忆搜索
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-30-23.png"
width="690"
height="250"
loading="lazy"
class="gallery-image"
data-flex-grow="276"
data-flex-basis="662px"
>&lt;/p>
&lt;p>&lt;a class="link" href="github.com/yuka-friends/Windrecorder" >Windrecorder | 捕风记录仪&lt;/a>。
捕风记录仪 是一款通过记录屏幕上所有内容、从而实现记忆搜索的应用。它可以根据 OCR 文本、或对画面的描述进行搜索，摘要浏览活动。它的所有能力都完全运行在本地，无需联网或上传任何数据，你完全拥有所有数据。&lt;/p>
&lt;h3 id="轻量级缓存镜像站服务">轻量级缓存镜像站服务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-30-38.png"
width="690"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="400px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/NoCLin/LightMirrors" target="_blank" rel="noopener"
>LightMirrors&lt;/a>是一个开源的缓存镜像站服务，用于在内网加速软件包下载和镜像拉取，基于Aria2实现了下载进度显示。&lt;/p>
&lt;p>目前支持DockerHub、PyPI、PyTorch、NPM等镜像缓存服务。 ​​​&lt;/p>
&lt;h3 id="一个致力于分享优质资源的网站极简风格">一个致力于分享优质资源的网站（极简风格）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-30-49.png"
width="690"
height="459"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>一个致力于分享高质量资源的平台，包括但不限于文章、视频、图片、音乐等多种形式。网站目标是帮助用户发现并分享有价值的资源。&lt;/p>
&lt;p>地址：https://shareduck.fun/&lt;/p>
&lt;h3 id="在网页里运行的-yolo-模型">在网页里运行的 Yolo 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-31-14.png"
width="447"
height="211"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="508px"
>&lt;/p>
&lt;p>YOLO 是目标检测模型中的佼佼者，现在YOLOv9 来了，它是一种实时对象检测模型，超越了所有基于卷积和 Transformer 的模型。&lt;/p>
&lt;p>有网友把 YOLOv9 与 transformer.js 结合，在浏览器本地进行检测（不需要服务器），地址：https://huggingface.co/spaces/Xenova/yolov9-web&lt;/p>
&lt;h3 id="基于-github-pages-服务的开源-cms-应用">基于 Github Pages 服务的开源 CMS 应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-31-29.png"
width="690"
height="436"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="379px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pagescms.org/" target="_blank" rel="noopener"
>The No-Hassle CMS for GitHub&lt;/a>，一个基于 Github Pages 服务的开源 CMS 应用。&lt;/p>
&lt;p>Github 提供的 Pages 服务十分适合给自己的项目或者个人博客搭建静态站点。&lt;/p>
&lt;p>不过操作起来偏技术流一些，对于习惯了直接在线编辑站点内容的人来说仍有不小的挑战。&lt;/p>
&lt;p>所以作者推出了这个应用，完全基于 Pages 服务，且 100% 免费，让你搭建和维护静态站点变得更加便捷。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="警惕概念爆炸">警惕“概念爆炸”
&lt;/h3>&lt;p>学习技术知识，最重要的是抓大放小，避免“概念爆炸”。即：因为要弄懂一个概念而不得不引入另一个概念导致的链式依赖，从而陷入无限的概念中去了；&lt;/p>
&lt;p>应首先从框架知识入手，找到几个支撑运行逻辑的关键概念，在必要的时候再细化了解每个节点上的细节；&lt;/p>
&lt;p>拿 C++ 编程来说，整个活动中关键环节就这几项：编辑源码、编译和链接（产生可执行成果）、运行和调试（查看结果和除错）；&lt;/p>
&lt;p>虽然有了 IDE（或者具有一点儿 IDE 能力的编辑器如 vscode）将这些活动整合到了一起，但是了解和掌握这个运行框架是十分重要的，每个环节都可以有很多可替代工具进行支撑，也都有很多概念、知识点需要学习；&lt;/p>
&lt;p>但是初学者只有基于这样的框架，才可以比较高效地吸收或储存知识（不然知识点就会凌乱地缠绕在脑海里，无法有效发挥）；&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 070 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/</link><pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-14-38.png" alt="Featured image of post 机器文摘 第 070 期" />&lt;h1 id="机器文摘-第-070-期">机器文摘 第 070 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="通过服务器的访问日志对一些常见网络攻击的分析">通过服务器的访问日志，对一些常见网络攻击的分析
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-13-37.png"
width="690"
height="683"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="242px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://nishtahir.com/i-looked-through-attacks-in-my-access-logs-heres-what-i-found/" target="_blank" rel="noopener"
>通过服务器的访问日志，对一些常见网络攻击的分析&lt;/a>。&lt;/p>
&lt;p>“互联网是一个危险的地方”，如果你有一个暴露在公网上的 IP 的话，你立即就能理解前面那句话意味着什么。&lt;/p>
&lt;p>因为在当前的互联网上，将任何的 IP 暴露在公共网络上，都会马上招致大量恶意流量（访问请求）。&lt;/p>
&lt;p>一位自己维护服务器超过十年的开发人员，近期对他的访问日志（服务器用于记录外部请求的日志）进行了分析，看看常见的攻击究竟是怎样的。&lt;/p>
&lt;p>主要内容：
1、最常见的是对部署人员的粗心大意抱有期望，这些请求会扫描常见的存储程序密码的文件，比如 &lt;code>.env&lt;/code> 文件；通过 &lt;code>GET &lt;/code>请求路径里加入这些猜测文件的地址进行碰碰运气。看来粗心的人还真有，不然这种扫描就不会存在了。&lt;/p>
&lt;p>2、跟上一条差不多，对于一些文件路径的猜测，比如 &lt;code>/old /temp /new /test /backup &lt;/code>，期望有程序员将一些没来及删除的备份文件夹还留在 HTTP 服务器的公开目录下。&lt;/p>
&lt;p>3、利用 Web 服务器的漏洞，将恶意的 &lt;code>Shell&lt;/code> 命令嵌入到 &lt;code>HTTP&lt;/code> 请求的 &lt;code>HTTP_USER_AGENT&lt;/code> 字段里。&lt;/p>
&lt;p>4、对一些带有 &lt;code>CGI&lt;/code> 界面的路由器进行恶意请求，尝试执行嵌入在请求头里的恶意命令。&lt;/p>
&lt;p>5、上述的恶意命令往往是去一个指定地址下载恶意软件，这些恶意软件具有复制自己的能力。&lt;/p>
&lt;p>结论：
公网是一个充满恶意的地方，如果需要暴露服务给公网，请暴露最低限度的东西，不是必须的东西绝对不要暴露它。&lt;/p>
&lt;h3 id="具有超链接的书架">具有超链接的书架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-13-53.png"
width="640"
height="480"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://jamesg.blog/2024/02/14/clickable-bookshelves/" target="_blank" rel="noopener"
>具有超链接的书架&lt;/a>。&lt;/p>
&lt;p>作者突发奇想，希望能够通过计算机视觉技术，给自己的书架照片加上超链接，使得每一本书都可以被点击。&lt;/p>
&lt;p>点击跳转的链接是该书籍的详情信息（由谷歌提供的服务，可调用 api 实现）。&lt;/p>
&lt;p>本文记录了实现思路，文中给出了可以体验的 Demo 网址。&lt;/p>
&lt;p>主要思路：&lt;/p>
&lt;p>1、使用目标检测和图像分割模型识别出图片里的书脊区域；&lt;/p>
&lt;p>2、使用 OCR 技术将书脊区域的文字提取出来；&lt;/p>
&lt;p>3、将提取的文字告诉给大语言模型让它匹配到精确的书名和作者；&lt;/p>
&lt;p>4、调用“谷歌图书”服务，获取书籍详情信息链接；&lt;/p>
&lt;h3 id="怎样居中一个-div">怎样居中一个 DIV
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-14-08.png"
width="690"
height="532"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>在很长一段时间里，将元素在其父元素中居中是一件非常棘手的事情（注：一般也是新手前端开发者遇到的第一个难题）。&lt;/p>
&lt;p>随着 CSS 的发展，有越来越多的方式来解决这个问题。以至于现在很多人都不记得原来居中一个 DIV 曾经有这么多讲究。&lt;/p>
&lt;p>有专业人士出于整理对比一下各种方法优缺点的目的，着手编写了此篇&lt;a class="link" href="https://www.joshwcomeau.com/css/center-a-div/" target="_blank" rel="noopener"
>《怎样居中一个 DIV》&lt;/a>。&lt;/p>
&lt;p>几乎集齐了“元素居中”这个问题的全部答案，并进行了深刻分析，读完至少成为半个前端布局高手&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="极小的-linux-发行版">极小的 Linux 发行版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-14-26.png"
width="690"
height="506"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.damnsmalllinux.org/" target="_blank" rel="noopener"
>Damn Small Linux 2024&lt;/a>，一个极小的 Linux 发行版，大概 50MB 大小。&lt;/p>
&lt;p>目标是让十分低配的 x86 计算机也能具有基本的办公和多媒体能力。&lt;/p>
&lt;p>麻雀虽小五脏俱全，这个发行版配备了 Web 浏览器、office 办公套件、邮件客户端、多媒体播放器、图像编辑器等一大堆即开即用的软件。&lt;/p>
&lt;p>另外还有一批精心挑选的控制台命令行程序，包括 Tmux、FZF、Vim、Nano 等。&lt;/p>
&lt;p>所有入选的软件都遵循基本的原则：对资源占用低、依赖少。&lt;/p>
&lt;p>手上有老电脑的，可以尝试安装一下，说不定能焕发第二春。&lt;/p>
&lt;h3 id="在线分析二进制文件">在线分析二进制文件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-14-38.png"
width="690"
height="367"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://binvis.io" target="_blank" rel="noopener"
>Binvis&lt;/a>，一个在线可视化工具，可直观地剖析和分析二进制文件，在页面中交互展示二进制文件的内部结构和数据组成。&lt;/p>
&lt;h3 id="软件设计的哲学">软件设计的哲学
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-14-49.png"
width="308"
height="673"
loading="lazy"
class="gallery-image"
data-flex-grow="45"
data-flex-basis="109px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://cactus-proj.github.io/A-Philosophy-of-Software-Design-zh/" target="_blank" rel="noopener"
>《软件设计的哲学》&lt;/a>&lt;/p>
&lt;p>经典软件设计书籍《A-Philosophy-of-Software-Design》的中文翻译版电子书。&lt;/p>
&lt;p>80 多年来，人们一直在为电子计算机编写程序，但令人惊讶的是，关于如何设计这些程序或什么是好的程序应该是什么样子的讨论却很少。&lt;/p>
&lt;p>关于软件开发过程（如敏捷开发）和开发工具（如调试器、版本控制系统和测试覆盖工具），已经有了相当多的讨论。还广泛分析了编程技术，如面向对象编程和函数式编程，以及设计模式和算法。&lt;/p>
&lt;p>所有这些讨论都是有价值的，但是软件设计的核心问题在很大程度上仍然没有触及。&lt;/p>
&lt;p>David Parnas 的经典论文“关于将系统分解成模块的标准”发表于 1971 年，但是在随后的 45 年里，软件设计的技术水平并没有超过这篇论文。​​​&lt;/p>
&lt;h3 id="通过-ai-模型快速辨别文件类型">通过 AI 模型快速辨别文件类型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-15-05.png"
width="688"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://opensource.googleblog.com/2024/02/magika-ai-powered-fast-and-efficient-file-type-identification.html" target="_blank" rel="noopener"
>Magika&lt;/a>，谷歌开源的一个轻量级 AI 模型，可以快速判别给定文件的类型（文本、编程源码、图片、音频等）。&lt;/p>
&lt;p>即使不使用 GPU 加速而跑在 CPU 上的话，也能达到毫秒级识别速度。 ​​​&lt;/p>
&lt;h3 id="运行在浏览器里的-llm">运行在浏览器里的 LLM
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-15-30.png"
width="522"
height="305"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>现在大语言模型可直接运行在浏览器，无需服务器支持！&lt;/p>
&lt;p>借助 Web LLM 工具，可以将大语言模型直接在浏览器中运行，并且通过 WebGPU 加速，目前已支持 Llama 2 7B/13B、Mistral 7B 和 WizadMath 等。&lt;/p>
&lt;p>甚至，可以运行 Llama 2 70B 模型，只需要有一台 64GB 内存的设备。&lt;/p>
&lt;p>GitHub：https://github.com/mlc-ai/web-llm&lt;/p>
&lt;p>另外，Chrome 浏览器从 113 版本开始已支持 WebGPU 特性。&lt;/p>
&lt;p>意味着，可以通过 WebGPU 加速更快更流畅的运行 LLM，经测试仅需约 6GB 的显存即可运行 Llama 7B、Vicuna-7B。&lt;/p>
&lt;p>&amp;ndash;来自微博：&lt;a class="link" href="https://weibo.com/5722964389/NDMulfXnj" target="_blank" rel="noopener"
>@GitHubDaily&lt;/a>&lt;/p>
&lt;h3 id="从-0-实现一个极简的自动微分库">从 0 实现一个极简的自动微分库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-15-48.png"
width="690"
height="1369"
loading="lazy"
class="gallery-image"
data-flex-grow="50"
data-flex-basis="120px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://nagi.fun/micrograd-tutorial" target="_blank" rel="noopener"
>&amp;ldquo;micrograd&amp;rdquo; 项目的学习笔记&lt;/a>。该项目是 OpenAI 创始人之一 Andrej Karpathy 创建的一个小型、教育性质的项目。这个项目实现了一个非常简化的自动微分和梯度下降库。&lt;/p>
&lt;p>&amp;ndash;来自微博：&lt;a class="link" href="https://weibo.com/2194035935/O1bDZ7Ydj" target="_blank" rel="noopener"
>@蚁工厂&lt;/a>&lt;/p>
&lt;h3 id="下载飞书文档到本地-md-文件">下载飞书文档到本地 MD 文件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-15-59.png"
width="591"
height="367"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chromewebstore.google.com/detail/cloud-document-converter/ehkomhhcinhikfddnmklbloahaakploh" target="_blank" rel="noopener"
>Cloud Document Converter&lt;/a> ​​​，一个浏览器扩展，支持下载飞书云文档为 Markdown。&lt;/p>
&lt;h3 id="thinkpython-第三版">ThinkPython 第三版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-16-12.png"
width="690"
height="527"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/AllenDowney/ThinkPython/tree/v3" target="_blank" rel="noopener"
>ThinkPython&lt;/a>，是一本面向非专业人员的 Python 编程入门书籍，如今出了第三版。&lt;/p>
&lt;p>电子书内容完全运行在 Jupyter notebooks 中，可以直接在线阅读并运行代码。&lt;/p>
&lt;p>是业余爱好者入门编程的好帮手。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="客观事实与主观臆想">客观事实与主观臆想
&lt;/h3>&lt;p>混淆客观事实和主观臆想是造成错误决策的主要原因。&lt;/p>
&lt;p>所谓战略上的懒惰，多半是因为不愿意多花精力去看清现实，甚至不愿意面对现实。&lt;/p>
&lt;p>第一性原理是一种比较容易执行的认清现实的方法，可作为思考训练。&lt;/p>
&lt;p>撇去主观臆想，是去除幼稚走向成熟的重要标志。&lt;/p>
&lt;p>虽然很难做到百分百，但是，优秀的人，往往在此方面有着高于常人的观察和判断。&lt;/p>
&lt;p>说白了就是凡事尽量抛去成见，去除“意必固我”，知行合一。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 069 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-41-24.png" alt="Featured image of post 机器文摘 第 069 期" />&lt;h1 id="机器文摘-第-069-期">机器文摘 第 069 期
&lt;/h1>&lt;p>&lt;em>春节期间将暂停更新&lt;/em>&lt;/p>
&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="怎样用肉眼识别二维码">怎样用肉眼识别二维码
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-40-14.png"
width="524"
height="525"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="239px"
>&lt;/p>
&lt;p>假如未来人工智能真的统治了地球，二维码对于它们的文明来说，可能算是甲骨文了吧。&lt;/p>
&lt;p>作为普通人类，可以提前多修一门“外语”，真到了那一天，也能跟计算机套套近乎。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://qr.blinry.org/" target="_blank" rel="noopener"
>《不用电脑识别二维码》&lt;/a>，旨在让读者能够从最底层的技术原理理解二维码的构成。&lt;/p>
&lt;p>即便不能真的用肉眼读取二维码，也可了解这些黑白方块为什么可以组成让计算机识别的数据。&lt;/p>
&lt;p>核心点：
1、锚点：用于确认和锁定二维码区域的标识；&lt;/p>
&lt;p>2、掩码：统一盖上一层特定分布的黑白块，叠在最上层。这样做可以容错、使得数据分布均匀、增强对比；&lt;/p>
&lt;p>3、编码：用相邻的四个黑白块来表示数据内容；&lt;/p>
&lt;p>4、纠错：使用一些数学算法增加校验和数据修正；&lt;/p>
&lt;h3 id="unix-即集成开发环境ide">Unix 即集成开发环境（IDE）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-40-54.png"
width="295"
height="572"
loading="lazy"
class="gallery-image"
data-flex-grow="51"
data-flex-basis="123px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://conanblog.me/Unix-as-IDE--Chinese-/" target="_blank" rel="noopener"
>Unix 即集成开发环境（IDE）&lt;/a>，对于熟悉了 IDE 作为开发环境的人来说，基于命令行下的一组工具进行“零散”的开发工作，可能有点儿难以接受。&lt;/p>
&lt;p>但是如果把整个 Unix （或者类 Unix 系统）整体是为集成开发环境的话，也许会有所启发。&lt;/p>
&lt;p>这篇文章，对于喜欢 Unix 哲学的人，是一个很好的回顾与复习，对于习惯了“传统” IDE 的人，说不定会打开另外一扇门。&lt;/p>
&lt;p>主要内容：
1、文件管理：查找、搜索、匹配；&lt;/p>
&lt;p>2、代码编辑：行号、语法高亮、差异对比；&lt;/p>
&lt;p>3、编译：编译、链接、错误分析、优化；&lt;/p>
&lt;p>4、构建：Makefile；&lt;/p>
&lt;p>5、调试：gdb、ltrace；&lt;/p>
&lt;p>6、版本控制：git、svn；&lt;/p>
&lt;h3 id="8kb-大小的动画短片">8kB 大小的动画短片
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-41-24.png"
width="622"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>
令人惊叹的 demoscene 技术再次刷新，国外有团队 &lt;a class="link" href="https://www.ctrl-alt-test.fr" target="_blank" rel="noopener"
>ctrl-alt-test&lt;/a> 制作了一个&lt;a class="link" href="https://www.ctrl-alt-test.fr/2024/how-we-made-an-animated-movie-in-8kb/" target="_blank" rel="noopener"
>只有 8kB 大小的动画短片&lt;/a>，源代码在 Github 开放：github.com/ctrl-alt-test/mouton&lt;/p>
&lt;p>本文详细记录了创作团队的制作过程，以及对于一些 &lt;a class="link" href="https://en.wikipedia.org/wiki/Demoscene" target="_blank" rel="noopener"
>demoscene&lt;/a> 技术的介绍。&lt;/p>
&lt;p>大概技术路线：&lt;/p>
&lt;p>最终成果是一个 8kB 大小的 exe 可执行文件，不依赖外部资源或者文件。&lt;/p>
&lt;p>所有视觉效果都是运行在 GPU 上的 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Games/Techniques/3D_on_the_web/GLSL_Shaders" target="_blank" rel="noopener"
>GLSL shaders（着色器）&lt;/a>实现的，包括对时间线、摄像机等的控制。&lt;/p>
&lt;p>为了降低最终文件大小，使用了专门开发的压缩程序。&lt;/p>
&lt;p>声音采用 &lt;a class="link" href="https://github.com/hzdgopher/4klang" target="_blank" rel="noopener"
>4klang&lt;/a> 软件合成器制作，最终会生成用于产生音乐的二进制汇编。&lt;/p>
&lt;h3 id="实时绿幕抠图">实时绿幕抠图
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-41-39.png"
width="642"
height="873"
loading="lazy"
class="gallery-image"
data-flex-grow="73"
data-flex-basis="176px"
>
&lt;a class="link" href="https://hughfenghen.github.io/posts/2023/07/07/webgl-chromakey/" target="_blank" rel="noopener"
>WebGL Chromakey 实时绿幕抠图&lt;/a>&lt;/p>
&lt;p>本文介绍了一种通过 WebGL 片元着色器实时进行逐像素比对的方式进行抠图的技术。&lt;/p>
&lt;p>作者提供了封装好的 npm 包以及调用演示代码。 ​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="在浏览器运行模型修复图片">在浏览器运行模型修复图片
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-42-01.png"
width="690"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="350px"
>
&lt;a class="link" href="https://github.com/lxfater/inpaint-web" target="_blank" rel="noopener"
>inpaint-web&lt;/a>，基于 Webgpu 技术和 wasm 技术的免费开源 inpainting（图片修复） &amp;amp; image-upscaling 工具, 纯浏览器端实现。&lt;/p>
&lt;h3 id="机器学习在线书籍">机器学习在线书籍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-42-16.png"
width="663"
height="747"
loading="lazy"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="213px"
>
&lt;a class="link" href="https://github.com/stas00/ml-engineering" target="_blank" rel="noopener"
>机器学习在线书籍一套&lt;/a>&lt;/p>
&lt;p>这是一本适合 LLM/VLM 模型训练工程师和操作人员的技术资料。教程里提供了大量可直接运行的脚本，可以直接复制粘贴使用。 ​​​&lt;/p>
&lt;h3 id="专为制作音频软件而开发的ui库旋钮推子等">专为制作音频软件而开发的UI库（旋钮、推子等）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-43-11.png"
width="374"
height="447"
loading="lazy"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="200px"
>&lt;/p>
&lt;p>网址：echoui.dev&lt;/p>
&lt;p>Echo UI 是一款专为 Web Audio API 设计的 UI 库，它的目标是让工程师在开发浏览器音频应用的过程更加简便，它主要有以下几点特性：&lt;/p>
&lt;p>📦 开箱即用：Echo UI 提供了一套开箱即用的组件库，你可以直接使用这些组件来搭建你的音频应用，比如一个 EQ 均衡器、一个音频播放器或一款 VST&lt;/p>
&lt;p>🎛️ 优质交互：大部分组件的交互设计灵感来自于 Ableton Live 和 FL Studio 等优质的 DAW 应用，这些交互可以极大的提升用户体验&lt;/p>
&lt;p>🛠️ 响应式 Hook：Echo UI 提供了一套响应式 Hook，你可以使用它们来快速构建响应式的音频应用&lt;/p>
&lt;p>✨ 可定制 &amp;amp; 易于扩展：基于 React 和 TailwindCSS 开发，这使你可以很容易地定制组件的样式和交互行为，同时也可以很容易地扩展 Echo UI 的组件库&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="行动">行动
&lt;/h3>&lt;p>“天下事有难易乎？为之，则难者亦易矣，不为，则易者亦难矣。”&lt;/p>
&lt;p>讲的是行动对于成事的重要性，畏惧行动、不愿行动是阻碍事情成功的最大因素；&lt;/p>
&lt;p>不愿行动的背后一般是对“浪费”时间和精力的恐惧，对于做事要达成的目标相对单纯和唯一；&lt;/p>
&lt;p>认为唯一目标未达成，就算是白白投入，陷入失望，久而久之，便抗拒行动；&lt;/p>
&lt;p>这里面的关键是对“目标”的定义，只看结果不讲过程的话，十件恐怕有九件都是不能完全达标的；&lt;/p>
&lt;p>但行动的意义远不止于此，就像运动的目的不仅仅是“做功”或者“消耗能量”；&lt;/p>
&lt;p>做任何事情，都不应将目标定义的太单纯和唯一，可以有核心目标，也要有辩证的评价策略，失之东隅得之桑榆，即使核心目标短期没有达成，但也有其他的收获；&lt;/p>
&lt;p>有了这样的认知，在做事情的时候才不会患得患失、抗拒行动，因为什么都不做才是对时间和精力的最大浪费。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 068 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/</link><pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-49-21.png" alt="Featured image of post 机器文摘 第 068 期" />&lt;h1 id="机器文摘-第-068-期">机器文摘 第 068 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="利用随机数算法突破游戏安全限制">利用随机数算法突破游戏安全限制
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-47-28.png"
width="559"
height="620"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="216px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://orlp.net/blog/when-random-isnt/" target="_blank" rel="noopener"
>当随机数不再随机&lt;/a>，文章作者回忆了一段当年玩《魔兽世界》的往事。&lt;/p>
&lt;p>作者在 14 岁接触这款当时爆火的游戏，与其他游戏不同的是，这款游戏允许用户编写一些 Lua 脚本来作为游戏的扩展（Addon）。&lt;/p>
&lt;p>一般用来对游戏界面进行定制，或者增强游戏交互。&lt;/p>
&lt;p>为了安全起见，游戏厂商当然限制了脚本的一些能力，使其不至于影响到游戏的核心规则，比如宝物数量和法术激发等。&lt;/p>
&lt;p>具体做法就是，只允许在一个安全的环境中调用有限的接口。&lt;/p>
&lt;p>这刺激了作者的破解欲望，但是他不希望通过一些强制的手段（比如修改内存等等），而是使用游戏本身的机制，在许可的范围内“合法”地突破限制。&lt;/p>
&lt;p>绕来绕去，作者将目光锁定在了 MSVC 运行库（因为魔兽世界是用 MSVC 编译的，微软又躺枪）提供的随机数函数 &lt;code>rand&lt;/code> 上。&lt;/p>
&lt;p>这个函数，一共就 4 行代码 ：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">state&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">214013&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2531011&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x7fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用“线性共余”算法生成随机数，注意那个 &lt;code>state&lt;/code> 全局变量，导致了所有随机数的生成都共享了这个数据。&lt;/p>
&lt;p>作者通过这个算法，做出了最关键的一步，即根据随机数生成的值，逆向猜出了这个共享的状态值，然后就可以放心猜测接下来的随机数会产生什么值了。&lt;/p>
&lt;p>有了这些随机数值的提前预测，就像考试提前知道了答案一样，作者可以随心所欲地将一些信息输出在屏幕上给自己参考，整个游戏也就变得“索然无味”了。&lt;/p>
&lt;h3 id="调试器是如何工作的">调试器是如何工作的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-47-46.png"
width="573"
height="443"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>调试是每个开发者必备的技能，调试器是离不开的工具。&lt;/p>
&lt;p>下断点、单步跟踪是每个开发者在软件开发过程中必不可少的活动。&lt;/p>
&lt;p>然而，我们很少去关注，这样的调试过程是怎样实现的，它背后有什么机制？&lt;/p>
&lt;p>毕竟调试器给人很神秘的感觉，拥有魔法能力，可以让时间暂停。&lt;/p>
&lt;p>这篇&lt;a class="link" href="http://www.alexonlinux.com/how-debugger-works" target="_blank" rel="noopener"
>《调试器是如何工作的？》&lt;/a>深入探讨了这个话题。&lt;/p>
&lt;p>事实上调试器的工作离不开操作系统在底层提供的 API，而且最终还得 CPU 在硬件层面提供支持。&lt;/p>
&lt;p>在文章里，作者简要讲解了调试器的工作原理，并尝试在 Linux 系统下带领大家实现一个极简的调试器。&lt;/p>
&lt;h3 id="webcodecs-科普">WebCodecs 科普
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-49-03.png"
width="686"
height="503"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p>
&lt;p>在浏览器中操作多媒体信息，现有的 API 已经开放了比较方便的接口，比如“视频播放”、“音频解码”、“视频录制”、“实时流媒体”等等。&lt;/p>
&lt;p>但如果需要深入操控编码、解码的细节，现有 Web API 就无能为力了。&lt;/p>
&lt;p>也有人尝试使用 WASM 技术将编解码器直接运行在浏览器里，但由于缺少硬件加速，很难解决功耗与性能问题。&lt;/p>
&lt;p>不过现在一个新的标准即将普及，那就 WebCodecs，可以在页面中惊喜控制音视频数据的编码、解码细节。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://hughfenghen.github.io/posts/2023/10/06/webcodecs-new-era-for-media-on-the-web/" target="_blank" rel="noopener"
>《WebCodecs 开启 Web 音视频新篇章》&lt;/a>介绍了这个标准的基本情况，并进行了相关能力展示，适合入门扫盲。
​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="开源视频剪辑软件">开源视频剪辑软件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-49-21.png"
width="690"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="438px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://jliljebl.github.io/flowblade/" target="_blank" rel="noopener"
>flowblade&lt;/a> 是一个在 GPL3 许可下发布的多轨非线性视频编辑器。&lt;/p>
&lt;p>支持剪辑、合成、调色、动画全工作流。 ​​​&lt;/p>
&lt;h3 id="在网页里看星星">在网页里看星星
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-49-32.png"
width="689"
height="639"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="258px"
>&lt;/p>
&lt;p>Stellarium 是全世界大学都在使用的开源天文学软件， &lt;a class="link" href="https://stellarium-web.org/" target="_blank" rel="noopener"
>Stellarium Web&lt;/a>，是一个基于开源 Stellarium Web Engine 项目的在线天文馆，无需安装，可直接在Web 浏览器中运行 Stellarium 。&lt;/p>
&lt;p>直接在网页里即可查看自己所在地区的天空、星座、甚至可以看到实时的卫星和空间站（我看到了马斯克的星链在快速移动）。&lt;/p>
&lt;h3 id="复古桌面个人门户">复古桌面个人门户
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-49-42.png"
width="678"
height="443"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="367px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://henryheffernan.com" target="_blank" rel="noopener"
>henryheffernan.com&lt;/a>，一个很有意思的个人门户网站。&lt;/p>
&lt;p>作者在主页用 Three.js 模拟了一个 CRT 的显示器，细节（闪烁、条纹、指纹）还原非常逼真。&lt;/p>
&lt;p>里面还模拟了一个 win32 风格的桌面系统，桌面的浏览器还能用，打开是浏览作者的简历。&lt;/p>
&lt;h3 id="用-css-的-3d-特性制作逼真的云朵">用 CSS 的 3D 特性制作逼真的云朵
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-49-53.png"
width="690"
height="517"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.clicktorelease.com/blog/how-to-make-clouds-with-css-3d/" target="_blank" rel="noopener"
>用 CSS 的 3D 特性制作逼真的云朵&lt;/a>，这篇教程介绍了使用 3D 变换功能制作出有层次、立体的云朵图案（且随着鼠标移动会改变视角）。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="再说电子阳痿">再说电子阳痿
&lt;/h3>&lt;p>太高的自由度会使人疲惫，因为患得患失是人的本性，所以做决策是很消耗精力的事情。&lt;/p>
&lt;p>因此，设计精良的产品（无论是软件还是硬件），在完成它的功能的时候，不会给用户太多选择，而是通过最符合直觉的那条路径实现，让你“没得选”，不用动脑子。&lt;/p>
&lt;p>有的时候“没得选”反而是一种轻松幸福的事情，比如听 FM 广播里的音乐就比自己直接用播放器的要享受一些，因为前者无需选择，而后者给你太多的选择（还能快进切歌）。&lt;/p>
&lt;p>同样的道理，看电影、电视剧、打游戏也都一样，当选择越来越多的时候，带来的压力是巨大的，且容易陷入反复尝试（生怕错过）的循环，很难完整、深刻体验一部作品。&lt;/p>
&lt;p>小时候资源匮乏，“没得选”，才能把一个游戏反复打几十遍上百遍，反而体会到了巨大的幸福。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>我心目前的完美复古掌机</title><link>https://sbabybird.github.io/p/%E6%88%91%E5%BF%83%E7%9B%AE%E5%89%8D%E7%9A%84%E5%AE%8C%E7%BE%8E%E5%A4%8D%E5%8F%A4%E6%8E%8C%E6%9C%BA/</link><pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E5%BF%83%E7%9B%AE%E5%89%8D%E7%9A%84%E5%AE%8C%E7%BE%8E%E5%A4%8D%E5%8F%A4%E6%8E%8C%E6%9C%BA/</guid><description>&lt;h1 id="我心目中的理想复古掌机具备如下特性">我心目中的理想复古掌机具备如下特性：
&lt;/h1>&lt;ol>
&lt;li>形体：横握，符合人体工学设计，握持手感充实，平衡重量和便携（所以体积不能太大）；&lt;/li>
&lt;li>屏幕：高素质、高分辨率（1600*1200）、4：3；&lt;/li>
&lt;li>复古滤镜：支持 vulcan 驱动，具有高品质扫描线（又粗又硬且高亮度和完美色阶）；&lt;/li>
&lt;li>按键：可以没有 L2、R2，但是要有 ABC、XYZ 六键，八向十字键+左摇杆（可以没有右摇杆）；&lt;/li>
&lt;li>震动：双线性马达，震感强烈且有层次；&lt;/li>
&lt;li>模拟器：FC、PCE、MD、SFC、CPS1、CPS2、CPS3、NEOGEO、MAME、GB、GBC、GBA、DC、PS1、PSP（可以没有）、N64（可以没有）；&lt;/li>
&lt;li>这么一看，感觉像是周哥的 RG ARC 和 analogue pocket 的合体，哈哈。&lt;/li>
&lt;/ol>
&lt;p>&lt;em>注&lt;/em>：经过网络发帖讨论，有部分人喜欢竖版，且对 MD、土星没有情怀，所以六键手柄无所谓，而且对震动需求也不迫切。但我仍坚持我的个人喜好。&lt;/p></description></item><item><title>机器文摘 第 067 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/</link><pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-54-05.png" alt="Featured image of post 机器文摘 第 067 期" />&lt;h1 id="机器文摘-第-067-期">机器文摘 第 067 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="c-语言编译器简史">C 语言编译器简史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-53-35.png"
width="437"
height="616"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="170px"
>&lt;/p>
&lt;p>C 语言诞生于上世纪七十年代的贝尔实验室，最初目标是给新诞生的 Unix 操作系统配套一个更高级别（相对于汇编）的可移植语言。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.deusinmachina.net/p/compiling-history-a-brief-tour-of" target="_blank" rel="noopener"
>《C 语言编译器简史》&lt;/a>，从编译器的视角出发，简介记录了 C 语言特性的发展过程，以及主流的编译环境和开发套件是如何一步一步“演化”到现在的样子的。&lt;/p>
&lt;h3 id="在浏览器里实时运行各种编程语言">在浏览器里实时运行各种编程语言
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-53-50.png"
width="690"
height="555"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/p>
&lt;p>现在有不少网站提供编程练习的交互环境，一般的做法是，在浏览器中编辑代码，提交到后台服务器进行运行，输出结果返回给浏览器展示。&lt;/p>
&lt;p>这样做也没什么问题，不过有些用户不希望对服务端产生依赖，想要一个纯客户端的环境，在网页中嵌入运行 Python、PHP、Ruby、Lua 以及 SQL 语言。&lt;/p>
&lt;p>&lt;a class="link" href="https://antonz.org/in-browser-code-playgrounds/" target="_blank" rel="noopener"
>《在浏览器里的代码演练》&lt;/a>，这篇文章介绍了一种借助 WebAssembly 技术在浏览器中嵌入各种编程语言代码片段的方法。&lt;/p>
&lt;p>作者使用 VMWare 实验室预先编译的语言解释器，封装了一个开源工具，可以将 Python、PHP、Ruby、SQLite 等语言的代码片段嵌入到页面中，并直接在浏览器里执行。&lt;/p>
&lt;h3 id="在网页里训练-ai-模型">在网页里训练 AI 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-54-05.png"
width="690"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="415px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://teachablemachine.withgoogle.com/" target="_blank" rel="noopener"
>Teachable Machine&lt;/a>，是一个在线提供 AI 模型工作流的网站。&lt;/p>
&lt;p>不同于其他 AI 云平台，这个网站主要使用你自己的浏览器调用你的本地资源实现计算（借助 Tensorflow.js）。&lt;/p>
&lt;p>以可视化拖拽的方式建立自定义的 AI 应用，上传图片、声音、身体捕捉等样本后直接训练自己的模型。&lt;/p>
&lt;p>网站提供模型下载或者部署代码的框架，可以轻松制作自己的带有 AI 特性的站点。&lt;/p>
&lt;h3 id="用-500-行-sql-实现一个-gpt-语言模型">用 500 行 SQL 实现一个 GPT 语言模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-54-21.png"
width="690"
height="530"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="312px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://explainextended.com/2023/12/31/happy-new-year-15/" target="_blank" rel="noopener"
>500 行 SQL 中的 GPT&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>“嘿，ChatGPT。你能在SQL中实现一个大型语言模型吗？”&lt;/p>
&lt;p>“不，SQL不适合实现大型语言模型。SQL 是一种用于管理和查询关系数据库中的数据的语言。实现语言模型需要复杂的算法、大型数据集，并且通常还需要深度学习框架，这些都超出了 SQL 的能力。”&lt;/p>
&lt;/blockquote>
&lt;p>这就是机器比不了人的地方，人类会突破极限，有人在现实中通过 SQL 实现了一个 GPT。&lt;/p>
&lt;p>文章作者首先解释了 GPT 大预言模型的工作原理以及发展历史，对于相关概念和名词的解释比较浅显易懂。&lt;/p>
&lt;p>总的来说，这种生成式大模型可以理解为一个函数，这个函数接受一段文字输入，然后再输出一段文字。&lt;/p>
&lt;p>然后作者挑战自己，使用 SQL 语言实现了“分词器”、“向量嵌入”等操作，以及实现了“注意力”机制。&lt;/p>
&lt;p>最终竟然通过大约 500 行的 SQL 语句实现了一个可以在 PostgreSQL 中运行的 GPT 模型。&lt;/p>
&lt;h3 id="2023-年十个基于-godot-引擎开发的优秀开源游戏">2023 年十个基于 Godot 引擎开发的优秀开源游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-54-37.png"
width="690"
height="285"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="581px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dev.to/github/top-godot-games-from-game-off-2023-5f3k" target="_blank" rel="noopener"
>2023 年十个基于 Godot 引擎开发的优秀开源游戏&lt;/a>。&lt;/p>
&lt;p>&lt;a class="link" href="https://itch.io/jam/game-off-2023" target="_blank" rel="noopener"
>Game Off&lt;/a> 是 Github 每年 11 月份举办的游戏开发比赛，要求在一个月的时间内开发一款游戏，随便用什么语言或者引擎。&lt;/p>
&lt;p>所有游戏源码和成果上传至 Github 接受全部开发者的投票。&lt;/p>
&lt;p>上面的文章里收集了 2023 年度比赛中表现突出并且使用 Godot 引擎的游戏。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="复制任意网页的内容">复制任意网页的内容
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-54-56.png"
width="690"
height="363"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://enablecopy.com/" target="_blank" rel="noopener"
>超级复制插件&lt;/a>&lt;/p>
&lt;p>新加坡前端工程师 Goh Tong 开发了一个浏览器（Chrome、Edge）插件，可以一键解除网页限制，解除网页禁用右键，任意复制网页上的内容。&lt;/p>
&lt;h3 id="专门用于查看-csv-文件的命令行工具">专门用于查看 csv 文件的命令行工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-55-10.png"
width="690"
height="348"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;p>&lt;a class="link" href="github.com/YS-L/csvlens" >csvlens&lt;/a>，一个命令行下的文本查看器，功能类似 less ，但是专门针对 csv 文件格式进行了优化。&lt;/p>
&lt;p>有类似 vim 的快捷键绑定，可使用正则表达式快速搜索。 ​​​&lt;/p>
&lt;h3 id="用游戏引擎-godot-开发的-os-">用游戏引擎 Godot 开发的 OS ？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-55-24.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/popcar2/GodotOS" target="_blank" rel="noopener"
>GodotOS&lt;/a>，一个用游戏引擎模拟桌面操作系统的开源项目。&lt;/p>
&lt;p>借助 Godot 引擎强大的 UI 系统，作者做出了逼真的桌面环境，这虽然不是真实的操作系统，但却展示了游戏引擎制作界面的能力。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="存储膨胀">存储膨胀
&lt;/h3>&lt;p>类似通货膨胀，计算机存储也存在着空间增长赶不上需求增长的情况。&lt;/p>
&lt;p>以游戏为例，之前的硬盘容量在几十 GB 级别的时候，游戏大小以 MB 为单位，很多主机游戏一共只有几 MB 也很精彩。&lt;/p>
&lt;p>现在的游戏容量轻则几十 GB 动辄上百 GB ，2TB 的硬盘很快就给吞没没了。&lt;/p>
&lt;p>&lt;em>这种现象是不是跟整个宇宙也在膨胀有关?&lt;/em>&lt;/p>
&lt;h3 id="打游戏的深度">打游戏的深度
&lt;/h3>&lt;p>打游戏，不应该同时打多个游戏的进度，而是应该将游戏一个个打通关；&lt;/p>
&lt;p>我近期在开源掌机里就体会到这一点，由于存储的游戏太多，深怕错过了什么经典的游戏，这种心态导致没有心思深入到一个游戏里面去，常常刚开了一点儿进度，就又调头玩其它的了；&lt;/p>
&lt;p>由此也可以映射出现实世界里，这种心态导致学习什么东西都是浅尝辄止，开坑容易，弃坑更容易，但真正的收获较少；&lt;/p>
&lt;p>所以应该认准选中几个游戏，认真玩下去，至少坚持一段时间，打到一定的深度，体验通关的乐趣，而不是启动的乐趣；&lt;/p>
&lt;h3 id="来自-hn-网友对于当前科技发展的评论">来自 HN 网友对于当前科技发展的评论
&lt;/h3>&lt;p>&lt;a class="link" href="https://news.ycombinator.com/item?id=38983067" target="_blank" rel="noopener"
>我对技术感到非常失望，这让我非常难过。&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>我的职业生涯始于互联网繁荣时期，人们对技术和互联网将带来的有益社会变革非常乐观。&lt;/p>
&lt;p>如今，我并不觉得所有的科技都是“邪恶的”，但我确实觉得，如果所有的大型科技公司（谷歌、Facebook、苹果、Microsoft）都完全停止开发任何新技术，世界会变得更好。&lt;/p>
&lt;p>显然这是不现实的，但它凸显了我的感觉，即我不期待这些公司的任何新技术，因为更多的技术总是会导致更多的孤立，更多的“厄运滚动”，更多的攻击我们的注意力。&lt;/p>
&lt;p>我觉得大多数大型科技公司都变成了毒贩，只是试图劫持我们大脑的进化注意力机制来让我们上瘾。&lt;/p>
&lt;p>“注意力就是你所需要的”是对的（注：这是对一篇人工智能论文的”双关“引用）&lt;/p>
&lt;/blockquote>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 066 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/</link><pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-41-37.png" alt="Featured image of post 机器文摘 第 066 期" />&lt;h1 id="机器文摘-第-066-期">机器文摘 第 066 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="一个文本编辑器独立开发者的-9-年回顾">一个文本编辑器独立开发者的 9 年回顾
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-39-43.png"
width="684"
height="696"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="235px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://papereditor.app/dev" target="_blank" rel="noopener"
>一个文本编辑器独立开发者的 9 年回顾&lt;/a>&lt;/p>
&lt;p>作者是一个全栈开发者，9 年来一直独立开发一款 Mac 系统下的文本编辑器。&lt;/p>
&lt;p>文章里记录了他在开发和产品运营上的一些选择，以及为什么这么做。&lt;/p>
&lt;p>Mac 系统下不乏优秀的文本编辑器，作者的产品为什么还能占有一席之地，并且持续获得用户的好评？&lt;/p>
&lt;p>这主要源于作者对于细分市场的敏锐嗅觉，以及对于确立的产品定位极致的坚持（有很多产品做着做着就在用户的呼声里迷失自我）。&lt;/p>
&lt;p>作者的很多观点都与业界公认的思想有所抵触，比如他坚持所有东西都是自己做（违背了：&lt;em>不要重新发明轮子&lt;/em>）、坚持极简的界面和极少的功能、对性能的极致追求（业界普遍会为了研发周期缩短而牺牲性能，或者觉得硬件浪费无所谓）等等。&lt;/p>
&lt;h3 id="使用-a-搜索算法给游戏做路径查找时的一些技巧">使用 A* 搜索算法给游戏做路径查找时的一些技巧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-39-58.png"
width="597"
height="587"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="244px"
>&lt;/p>
&lt;p>迪杰斯特拉（Dijkstra）算法是经典的最短路径搜索算法，它能保证你找到最短路径，但是如果在游戏中使用的话，对于资源的消耗有些多，尤其是之前的游戏主机性能羸弱的情况下。&lt;/p>
&lt;p>最早的时候，像吃豆人那种游戏选择使用最直接的算法，也就是计算怪物和玩家的距离及角度，让怪物直接朝玩家奔去，遇到阻挡的墙壁就顺势滑行。&lt;/p>
&lt;p>但后来的游戏的场景逐渐复杂，这种简单算法不能满足需求。&lt;/p>
&lt;p>于是诞生了更好用的 &lt;a class="link" href="https://en.wikipedia.org/wiki/A*_search_algorithm" target="_blank" rel="noopener"
>A* search&lt;/a> 算法。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://timmastny.com/blog/a-star-tricks-for-videogame-path-finding/" target="_blank" rel="noopener"
>《A* 游戏寻路技巧》&lt;/a>，介绍了这种算法在游戏中的应用。&lt;/p>
&lt;p>作者本来是打算给一个复古 8 位主机 PPU466（一个用于教学的类似 PICO-8 的幻想主机平台） 编写图形游戏，在实现路径搜索时觉得有必要分享一下思路，记录整理成为了本文。&lt;/p>
&lt;h3 id="显示器旋转多少度最有利于开发">显示器旋转多少度最有利于开发？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-40-11.png"
width="609"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://sprocketfox.io/xssfox/2021/12/02/xrandr/" target="_blank" rel="noopener"
>有位闲人发现是 22°&lt;/a>。&lt;/p>
&lt;p>显示器能够旋转 90° 竖起来，这个大家都知道。&lt;/p>
&lt;p>而且，对于文字阅读、网页浏览等任务，竖起来的话明显空间利用率更高。&lt;/p>
&lt;p>对于 Windows 系统来说，你能做的也就这么多了，要么横着，要么竖着。&lt;/p>
&lt;p>不过，Linux 的自由度就很高了，可以使用一个叫做 xrandr 的小工具将显示内容旋转任意角度。&lt;/p>
&lt;p>于是开头那个哥们就测试了很多角度，得出了 22° 是个合适的角度的结论。&lt;/p>
&lt;p>&lt;em>但是实际使用中估计没有人会真这么做吧。&lt;/em>&lt;/p>
&lt;h3 id="纯塑料3d打印的环境能量收集器">纯塑料3D打印的环境能量收集器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-40-31.png"
width="690"
height="478"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.binn.cas.cn/ktz/wzlyjz/yjcgwzl/2023/202301/W020231130596295514704.pdf" target="_blank" rel="noopener"
>纯塑料3D打印的环境能量收集器&lt;/a>&lt;/p>
&lt;p>如何把让人讨厌的静电转换成人类赖以生存的能源，是从 2012 年摩擦纳米发电机（TENG）的发明才开始有了解决方案。&lt;/p>
&lt;p>特点：因为几乎世上所有的材料都会摩擦升电，所以可以作为发电机材料的物品种类繁多，而且很多日常废弃物品都是可用的，比如纸，动物毛皮，废弃塑料等。简单的制作和多样的材料选择（几片塑料薄膜和金属片就可完成制作）让它成为绿色能源的一个热门选项。&lt;/p>
&lt;p>原理：利用摩擦生电原理发明的发电机，其基本原理就是运动的带电物体（比如毛皮，塑料等）吸引电极和导线内的电子运动，产生电流。&lt;/p>
&lt;p>用途：常用的电磁发电机，需要高频的有规律运动。TENG更加适合于低频率的无规则环境振动能量收集，例如海洋能，雨滴能，风能和人体运动。第 267 期提到的雨水发电板就是该发电机的一种。&lt;/p>
&lt;p>文章作者用3D打印的方法，制作了纯塑料可随身携带的能量包，设计开源，让每个人都可以随心所欲的制造它。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="在线模拟自然声音的网站">在线模拟自然声音的网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-40-45.png"
width="690"
height="305"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="542px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://asoftmurmur.com/" target="_blank" rel="noopener"
>asoftmurmur&lt;/a>是一个可以在线播放自然声音的网站，可以根据自己的喜好调整雨声、雷声、鸟鸣、风声等声音的占比。&lt;/p>
&lt;p>适合读书或自习当作背景播放。&lt;/p>
&lt;h3 id="网页桌面模拟">网页桌面模拟
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-40-55.png"
width="690"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dustinbrett.com/" target="_blank" rel="noopener"
>DaedalOS&lt;/a>，又一个运行在网页里的桌面模拟环境。&lt;/p>
&lt;p>模仿 Win10 的界面风格，具有开始菜单和资源管理器。&lt;/p>
&lt;p>自带浏览器、文本编辑器、画图板等基础应用。 ​​​&lt;/p>
&lt;h3 id="在-2024-年还想玩-flash-游戏">在 2024 年还想玩 Flash 游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-41-07.png"
width="690"
height="374"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://flashpointarchive.org/" target="_blank" rel="noopener"
>Flashpoint&lt;/a>，这个项目我记得推荐过一次。但值得再次细说。&lt;/p>
&lt;p>对于痴迷 Flash 游戏的人来说，当下的环境无疑是让人失落的，因为 Flash 技术已经被淘汰，不再被主流浏览器和操作系统支持。&lt;/p>
&lt;p>曾经好玩的 Flash 小游戏也没有合适的平台来玩了。&lt;/p>
&lt;p>不过，还是有一群有情怀的人启动了一个项目。&lt;/p>
&lt;p>Flashpoint，一个保存 Flash 小游戏的项目，提供了一个集成的运行环境，打包存储了超过 17 万个小游戏和动画。&lt;/p>
&lt;p>可以去他们的官方网站下载，内置少量游戏的基本版文件包大概 1GB 左右，包含全部游戏的版本安装完成大概需要 1.48TB 的存储空间。&lt;/p>
&lt;p>ps：我最近在这个项目上找到了二十年前玩过的一个解密游戏 Chasm ，村里的水停了，一个小鸭嘴兽一路上山修复水管的故事。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-41-21.png"
width="566"
height="459"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="295px"
>&lt;/p>
&lt;p>我找了很久这个游戏，靠着一点儿零星的关键词，终于找到了，花了一个周末的时间才打通。&lt;/p>
&lt;h3 id="将卧室电脑打造成游戏机">将卧室电脑打造成游戏机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-41-37.png"
width="665"
height="417"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;p>&lt;a class="link" href="github.com/ublue-os/bazzite" >bazzite&lt;/a>，一个可以将你的卧室电脑打造成 Steam Deck 操作体验的开源系统。&lt;/p>
&lt;p>Steam Deck 是一个游戏掌机，其自带系统（基于 Linux 的魔改版本）专为游戏而生，操作体验进行了特别优化。&lt;/p>
&lt;p>如果你也想让你的家用电脑获得这样的体验，可以尝试一下这个开源系统，不管是放在卧室还是客厅，都可以做到即开及打。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ol>
&lt;li>预装 Nvidia 显卡驱动；&lt;/li>
&lt;li>H264 编码硬解；&lt;/li>
&lt;li>预装 Xbox 手柄驱动；&lt;/li>
&lt;li>内置录屏解决方案；&lt;/li>
&lt;li>优良的 CPU 调度，平衡功耗和性能；&lt;/li>
&lt;li>预装安卓模拟器，可玩手机游戏；&lt;/li>
&lt;/ol>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="索引思维">“索引”思维
&lt;/h3>&lt;p>就像“分层” layer、“缓存” cache 这种通用思维一样，“索引” index 也是一种通用思维；&lt;/p>
&lt;p>“缓存”在各种系统中起到了减少数据搬运而提升速度的作用，而“索引”则在各种场景中起到聚合信息、以少量信息检索大量信息的作用；&lt;/p>
&lt;p>这种通用思维不仅仅局限于信息化软件本身，广义上来说，物理世界的任何“系统”都是可以使用这种通用思维的。&lt;/p>
&lt;p>举例来说，谷歌搜索引擎建立了互联网网页内容的索引、门户网站和导航网站建立了分类信息的索引、淘宝商城建立了可交易商品的索引、维基百科建立了知识概念的索引，这些索引极大地满足了人们对信息获取的需求，所以取得了成功。&lt;/p>
&lt;p>如果想提供自己的产品或服务，除了能直接提升生产力的工具类之外，还有一种可能，就是利用“索引”思维去提供整理好的信息。&lt;/p>
&lt;p>目前已经有很多人在做类似的事情了，比如影视解说、读书解说、分类资源汇总。&lt;/p>
&lt;p>写到这里我想到一个段子：有三家开的比较近的商店竞争，第一家招牌叫“最好的商品”，第二家招牌叫“最实惠的商品”，第三家把店开在他两家的中间，招牌叫“入口”。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 065 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-49-44.png" alt="Featured image of post 机器文摘 第 065 期" />&lt;h1 id="机器文摘-第-065-期">机器文摘 第 065 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="自制一个时钟投影">自制一个时钟投影
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-48-29.png"
width="524"
height="529"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="237px"
>&lt;/p>
&lt;p>现在可以很容易购买到那种卧室投影，可以将时钟、星空等图像投射在房间墙壁或者天花板上。&lt;/p>
&lt;p>不过，这篇&lt;a class="link" href="https://microengineer.eu/2018/05/01/diy-night-clock-projector/" target="_blank" rel="noopener"
>DIY一个夜间时钟投影仪&lt;/a>文章的作者选择自己做一个。&lt;/p>
&lt;p>选用 LED 灯光加 LCD显示的方案，3D 打印外壳。&lt;/p>
&lt;p>为了控制成本，作者选择在中国购买各种零件（一个焦距 25mm 的小镜头竟然才 12 美元）。&lt;/p>
&lt;p>作者把他的设计图纸和相关资料都开源了，地址在这里：https://github.com/shufps/diy-projector-clock&lt;/p>
&lt;h3 id="每个程序员都应该尝试的个人小项目">每个程序员都应该尝试的个人小项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-48-50.png"
width="690"
height="477"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;p>关于学习，几乎每个人都认可这一点：在实践中学，是最有效的学习方式。&lt;/p>
&lt;p>对于一些喜欢编程但是又不知挑战实现哪些题目的话，这里有一些&lt;a class="link" href="https://austinhenley.com/blog/challengingprojects.html" target="_blank" rel="noopener"
>程序员应该挑战的小项目&lt;/a>。&lt;/p>
&lt;p>这些项目经过精心挑选，而且都有一定难度，如果全部实现一遍的话，内力必然大增。&lt;/p>
&lt;p>主要包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>文本编辑器；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2D 小游戏（太空入侵者）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编译器：袖珍 BASIC；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>操作系统：迷你 OS；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>模拟器：游戏主机模拟器；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="从底层做文本编辑器应该用什么数据结构">从底层做文本编辑器，应该用什么数据结构？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-49-03.png"
width="492"
height="227"
loading="lazy"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="520px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.averylaird.com/programming/the%20text%20editor/2017/09/30/the-piece-table.html" target="_blank" rel="noopener"
>文本编辑器：数据结构&lt;/a>，有寻找答案的过程。&lt;/p>
&lt;p>作者说，如果是编辑文本的话，最次的数据结构就是直接用一个大数组来存储字符。&lt;/p>
&lt;p>如果想试着自己做个编辑器，可以试试文中推荐的数据结构。&lt;/p>
&lt;p>配图为一种叫做 &lt;a class="link" href="https://en.wikipedia.org/wiki/Rope_%28data_structure%29" target="_blank" rel="noopener"
>rope&lt;/a> 的二叉树。 ​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="音乐人声分离工具">音乐人声分离工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-49-22.png"
width="647"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jianchang512/vocal-separate" target="_blank" rel="noopener"
>vocal-separate&lt;/a>，一个极简的人声和背景音乐分离工具，完全本地化网页操作。&lt;/p>
&lt;p>内置 spleeter模型 2stems/4stems/5stems，解压后开箱即用，无需连接外网。&lt;/p>
&lt;p>可将一首歌曲或者含有背景音乐的音频、视频文件，分离为单独的人声文件、伴奏文件。&lt;/p>
&lt;p>预编译 Windows 版解压即用，无需额外配置。&lt;/p>
&lt;p>源码版支持本地部署到 Linux/Mac/Windows。&lt;/p>
&lt;h3 id="lowpoly-风格背景图片生成器">Lowpoly 风格背景图片生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-49-34.png"
width="480"
height="375"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://sinqi.tools/triangle" target="_blank" rel="noopener"
>Triangle Patterns&lt;/a>，一个专门用于生成 lowpoly 风格渐变背景图的在线小工具。&lt;/p>
&lt;p>可挑选和设置自定义调色板，免费下载和导出自己生成的图片。 ​​​&lt;/p>
&lt;h3 id="基于树莓派的鼠标键盘切换器">基于树莓派的鼠标键盘切换器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-49-44.png"
width="690"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="477px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/hrvach/deskhop" target="_blank" rel="noopener"
>桌面键鼠切换器&lt;/a>，一个很有意思的开源项目。&lt;/p>
&lt;p>可以使用一套键鼠接入两台电脑，虽然市面上类似这样的 USB 切换器有很多，但是这一个确实比较特别：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>不需要按按钮切换，而是使用快捷键，或者自动识别你的鼠标拖动到窗口的边缘。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>免费且开源（不过需要你自己打印外壳，以及购买零件：树莓派的 PICO 版本）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同时支持 Linux、macOS 和 Windows。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="给老游戏打补丁以支持宽屏分辨率">给老游戏打补丁以支持宽屏分辨率
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-50-04.png"
width="649"
height="364"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://thirteenag.github.io/wfp#nfsuc" target="_blank" rel="noopener"
>老游戏宽屏补丁&lt;/a>，一些旧电脑游戏（比如 《GTA 4》、《极品飞车-卧底》等）由于年代久远，对宽屏分辨率支持不佳（或者不支持），这里有一个系列补丁包，专门针对这些游戏提供宽屏支持，甚至有些增加了手柄震动、HUD 贴图显示质量提升等特性。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="降低复杂度的通用思想">降低复杂度的通用思想
&lt;/h3>&lt;p>中间代码、中间层、虚拟化（虚拟机）是降低复杂度的关键&amp;mdash;-读《游戏脚本高级编程》有感，复杂的问题往往需要拆解才能解决，比较通用的办法就是拆分步骤然后加入中间层（约定多个任务中间传递的成果）；&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>2023 年个人年终总结</title><link>https://sbabybird.github.io/p/2023-%E5%B9%B4%E4%B8%AA%E4%BA%BA%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/2023-%E5%B9%B4%E4%B8%AA%E4%BA%BA%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid><description>&lt;h1 id="2023-年个人年终总结">2023 年个人年终总结
&lt;/h1>&lt;h2 id="回顾">回顾
&lt;/h2>&lt;h3 id="春节">春节
&lt;/h3>&lt;p>2023 年的春节终于得以回老家过了，因疫情所致，之前已有 2 次春节没有回老家。&lt;/p>
&lt;p>随着年龄的增长，此次回去感触与以往又有所不同。&lt;/p>
&lt;p>原因是见到了很多人老年的悲凉，以及村里的老人们正在逐渐离去。&lt;/p>
&lt;p>此次春节串门拜年，在节日的喜庆之余，心情比以往多了一种对时光荏苒的感慨。&lt;/p>
&lt;h3 id="学习计划">学习计划
&lt;/h3>&lt;p>我总是习惯在春天踌躇满志，每年都不例外。&lt;/p>
&lt;p>给自己制定了满满的计划，列了很多学习目标，也基本实现了一部分，但还是太高估了一年时间的长度，所以也烂尾了一些事情。&lt;/p>
&lt;p>年初希望自己在 AI 的自然语言处理、图像分割等方面有所深入学习，结果恰逢 chatGPT 大火，直接跳过传统 NLP 开始研究 chatGPT ，相关的开源项目井喷式发展，学的如饥似渴，在这个过程中收获很大。&lt;/p>
&lt;p>借助开源图书《动手深度学习》进一步了解了深度学习、神经网络等底层原理，并恶补了《线性代数》、《微积分》等基础理论。&lt;/p>
&lt;p>本想在业余时间实现一个自己的脚本语言解释器，但是时间安排不开，只动手做到了基础虚拟机和汇编代码转机器字节码的部分，到语法树的部分就卡住了，明年继续吧。&lt;/p>
&lt;p>外语学习，同时在多邻国上每天简短练习一会儿英语和日语，已坚持一年多的时间。没办法，多邻国这个 app 催人催得实在是很紧，我怀疑我要是停一天没学，他们会不会派人打电话给我。&lt;/p>
&lt;h3 id="锻炼身体">锻炼身体
&lt;/h3>&lt;p>阳过之后，身体素质确实有所下降，好在每天坚持步行大概八千到一万步，算是低配的有氧运动了吧。&lt;/p>
&lt;p>健身房那种运动坚决不做，偶尔做一些老少皆宜的八段锦、五禽戏之类，稍有效果，但不明显。&lt;/p>
&lt;h3 id="读书">读书
&lt;/h3>&lt;p>今年读书以非虚构、学习类书籍为主，包括 AI 基础知识、数学基础知识等相关的书籍，但都不是那种特别严谨、特别深奥的书籍。&lt;/p>
&lt;p>比如关于数学的有一本《程序员数学》（不是日本作者写的那个《程序员的数学》），对于线性代数和微积分讲的比大学教材要容易理解一些，有些偏概念科普性质。&lt;/p>
&lt;p>《动手深度学习》这本开源图书也相对轻松，因为作者尽量避开了枯燥公式及相关的推导过程，讲究科普概念，并且要有实用性。&lt;/p>
&lt;p>也读了一些摄影相关的书籍，其中一位环球旅行的国外女摄影师所拍摄的全球女性肖像画册《美之地图》印象比较深刻（或许应该翻译成《妹纸地图》？），任何艺术表现形式，内核都应该是好故事。&lt;/p>
&lt;p>买了几本自己小时候看过的旧书，之前的是因为年代久远导致的自然流失，现在竟然又能买到，算是把小时候看的重要的书给补齐了。&lt;/p>
&lt;h3 id="摄影">摄影
&lt;/h3>&lt;p>我的卡片相机 GR2 已经用了将近七年，今年是第二次送去维修，原因是伸缩镜头的排线损坏，属于设计通病，这类消费类电子产品，可能厂家在出产品的时候也没准备让人用那么久。&lt;/p>
&lt;p>陆续拍摄了一些街头随手拍，以建筑、风景为主，28mm 的焦段，我实在是不敢拍陌生人，因为这种广角镜头要想拍人的话，相机必须怼在脸上。&lt;/p>
&lt;h3 id="手写笔记">手写笔记
&lt;/h3>&lt;p>新培养的习惯，每天早上工作启动之前，先使用手写笔记整理思路，算是之前晨间日志的升级版。&lt;/p>
&lt;p>主要追求的效果是让自己的大脑在一段时间内保持专注，是一种锻炼。&lt;/p>
&lt;p>但是不利于检索和后续回顾阅读，我在考虑仍旧换回电子的方式记录晨间日志。&lt;/p>
&lt;h3 id="游戏">游戏
&lt;/h3>&lt;p>无论是盘核桃还是钓鱼，中年男人总得有个精神寄托。&lt;/p>
&lt;p>我选择的是，游戏。&lt;/p>
&lt;p>而且是老游戏，上个世纪末和本世纪最初十年的。&lt;/p>
&lt;h2 id="重要的事">重要的事
&lt;/h2>&lt;p>&lt;em>记录这一年发生过的重要事情&lt;/em>&lt;/p>
&lt;h2 id="问自己">问自己
&lt;/h2>&lt;h3 id="今年我最感恩的三件事是什么">今年我最感恩的三件事是什么？
&lt;/h3>&lt;ol>
&lt;li>感恩我的家人和朋友，他们对我的工作和生活都很支持与关心；&lt;/li>
&lt;li>感谢科技的进步，有了新的方便工具使用（chatGPT）；&lt;/li>
&lt;li>感谢开源世界的开放与资源丰富，给人以非常多的学习机会与内容；&lt;/li>
&lt;/ol>
&lt;h3 id="今年我最自豪的三项成就是什么">今年我最自豪的三项成就是什么？
&lt;/h3>&lt;ol>
&lt;li>坚持内容输出，一直在写东西；&lt;/li>
&lt;li>坚持外语学习；&lt;/li>
&lt;li>编程技能一直没放下，c++、python、js 等都还能上手；&lt;/li>
&lt;li>7 月份参加业余无线电等级 A 照考试，一次通过，算是入门了业余无线电；&lt;/li>
&lt;/ol>
&lt;h3 id="今年我收获了哪些成长">今年我收获了哪些成长？
&lt;/h3>&lt;ol>
&lt;li>坚持思考与记录，思想更加成熟，心态更平和；&lt;/li>
&lt;li>在教育孩子的过程逐渐意识到需要耐心和等待；&lt;/li>
&lt;li>想通了要以项目管理思想来持续打磨自己的技能；&lt;/li>
&lt;/ol>
&lt;h3 id="今年我面对过哪些失败">今年我面对过哪些失败？
&lt;/h3>&lt;ol>
&lt;li>对外输出内容的品质还不够好，也缺乏受众群体定位；&lt;/li>
&lt;li>学习计划并未完全贯彻，一些个人项目搁浅；&lt;/li>
&lt;li>个人独立产品在需求研究和动手实践上都没有很好地开展，需要启动；&lt;/li>
&lt;/ol>
&lt;h3 id="明年我的关键词是什么">明年我的关键词是什么？
&lt;/h3>&lt;p>成长，继续通过学习、思考、实践，使得自己离自己的人生目标更近一步。&lt;/p>
&lt;p>以项目管理的思想指导个人行动，尽量不浪费时间。&lt;/p>
&lt;p>浪费时间主要是指，无所事事漫无目的让大脑进行空转，比如刷新闻、刷视频等。要限制。&lt;/p>
&lt;p>做事情尽量以专注的方式进行，多让自己处于聚焦、专注的状态，以更高的品质度过时间。&lt;/p>
&lt;h3 id="明年我最想完成的三件事是什么">明年我最想完成的三件事是什么？
&lt;/h3>&lt;ol>
&lt;li>基于 AI 和自动化思路做出完成度比较高的独立产品；&lt;/li>
&lt;li>除本职工作外，在业余有一定副业营收（产品、投资）；&lt;/li>
&lt;li>个人内容产品运营取得更好的粉丝增长；&lt;/li>
&lt;/ol>
&lt;h3 id="五年后我希望成为什么样的人">五年后我希望成为什么样的人？
&lt;/h3>&lt;p>成为职业自由、有更多私人时间，且身体健康、有活力的人。&lt;/p></description></item><item><title>机器文摘 第 064 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/</link><pubDate>Tue, 26 Dec 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-53-40.png" alt="Featured image of post 机器文摘 第 064 期" />&lt;h1 id="机器文摘-第-064-期">机器文摘 第 064 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="youtube-到底有多大httpsethanzuckermancom20231222how-big-is-youtube">&lt;a class="link" href="https://ethanzuckerman.com/2023/12/22/how-big-is-youtube/" target="_blank" rel="noopener"
>Youtube 到底有多大？&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-51-23.png"
width="690"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;p>作为世界上第一大的视频网站，Youtube 的体量想必是很大了。&lt;/p>
&lt;p>但是究竟有多大，很多人可能没有概念。&lt;/p>
&lt;p>有人对此做了一些研究，使用了一些有趣的手段，最终形成一篇报告，记录了对这个视频网站的探索过程。&lt;/p>
&lt;p>有趣的一些点：&lt;/p>
&lt;p>1、仅 2023 年一年就有超过 40 亿个视频发布在 Youtube。&lt;/p>
&lt;p>2、Youtube 视频的观看次数中位数仅为 39 次。&lt;/p>
&lt;p>3、Youtube 只喜欢向观众推荐观看次数超过 10000 次的视频。&lt;/p>
&lt;p>4、作者是通过随机算法来批量猜测视频网址的方法进行统计计算的，因为不可能把所有视频都检索一遍。&lt;/p>
&lt;h3 id="在-gpu-上模拟火焰">在 GPU 上模拟火焰
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-51-42.png"
width="690"
height="339"
loading="lazy"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;p>火焰模拟是一个有趣的图形问题。&lt;/p>
&lt;p>过去的方法通常是采用非物理计算去伪造。&lt;/p>
&lt;p>例如，电影《指环王》中使用了大量烟雾的精灵（即使是对电影工业来说流体模拟也是太贵了）。&lt;/p>
&lt;p>所以当时像电脑游戏这样的实时渲染的，几乎只能使用非物理方法。&lt;/p>
&lt;p>但在过去的 10 年里，GPU 使快速流体仿真变得容易。基本的流体动力学算法在GPU上很容易实现。&lt;/p>
&lt;p>&lt;a class="link" href="https://andrewkchan.dev/posts/fire.html" target="_blank" rel="noopener"
>这篇文章记录了如何在 GPU 上模拟火焰&lt;/a>。&lt;/p>
&lt;p>它介绍了流体动力学背后的数学原理、用于建模流体的并行算法。&lt;/p>
&lt;p>文中给出了用 WebGL 实现的 Demo 代码。&lt;/p>
&lt;h3 id="当相机替代我们体验生活我们失去了什么">当相机替代我们体验生活，我们失去了什么？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-51-57.png"
width="690"
height="507"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>答案是：我们失去了集中注意力体验生活的能力。&lt;/p>
&lt;p>&lt;a class="link" href="https://theconversation.com/whats-lost-when-we-photograph-life-instead-of-experiencing-it-58392" target="_blank" rel="noopener"
>《当相机替代我们体验生活，我们失去了什么》&lt;/a>这篇文章写于 2016 年，那时互联网的趋势已经是视频影像取代文字作为内容的主体了。&lt;/p>
&lt;p>影像越来越多地成为与他人交流、获得肯定和记录新体验的重要组成部分。尽管一连串的颜色、像素、面孔和风景似乎只能丰富我们的想象力，增强我们与世界的互动，但事实似乎恰恰相反。&lt;/p>
&lt;p>借助我们的手机和电脑，无论我们身在何处或附近，我们都会不断与他人联系并与之互动。但是，拍照和制作视频已成为这种数字交流的核心部分。&lt;/p>
&lt;p>我们的冲动不是停留在当下——并真正观察我们所处的位置——而是利用所有的生活经历作为视觉上表现和表达自己的机会。&lt;/p>
&lt;h3 id="停止阅读新闻">停止阅读新闻
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.cnblogs.com/IcanFixIt/p/8524843.html" target="_blank" rel="noopener"
>为什么你应该停止阅读新闻?&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://fs.blog/stop-reading-news/" target="_blank" rel="noopener"
>原文地址&lt;/a>&lt;/p>
&lt;p>我们花费数小时时间来消费新闻，因为我们希望得到充分的信息。&lt;/p>
&lt;p>但这段时间过得好吗？新闻的定义是不持久的。&lt;/p>
&lt;p>而且随着新闻变得更容易分发和制作成本更低，质量也下降了。&lt;/p>
&lt;p>我们很少停下来问问自己，我们消费的是什么：这很重要吗？&lt;/p>
&lt;p>这是否会经受住时间的考验——比如，在一周或一年之内?写这篇文章的人是否了解这个问题?&lt;/p>
&lt;p>我们今天消费时间来阅读新闻的方式存在几个问题：&lt;/p>
&lt;p>首先，新闻传递的速度有不断增加。&lt;/p>
&lt;p>过去我们必须等待才能得到一份报纸或八卦信息，与我们镇上的人们一起获取我们的消息，但现在不了。&lt;/p>
&lt;p>由于通知、短信和其他干扰，新闻几乎在它发布的那一刻就能找到我们。&lt;/p>
&lt;p>其次，生产新闻的成本大幅下降。&lt;/p>
&lt;p>有些人每天为主要报纸写12篇博客文章。&lt;/p>
&lt;p>几乎不可能在一个话题上写一些深思熟虑的东西，更不用说12个了。&lt;/p>
&lt;p>在一年的时间里，可以写出2880篇文章(假设有4周的假期)。&lt;/p>
&lt;p>你从他们所报道的主题中获得新闻的人的流利程度接近于零。&lt;/p>
&lt;p>因此，你的头脑中充斥着关于孤立话题的表面观点。因为成本已经降到了接近零的水平，所以竞争非常激烈。&lt;/p>
&lt;p>第三，新闻生产者试图劫持我们的大脑。&lt;/p>
&lt;p>新闻制作人一直保持着“调入，不要错过，跟随这个或者你会被误导，等等，看看这个！”的文化。&lt;/p>
&lt;p>当你越来越多地消耗这种类型的新闻，你就会越来越少的关注那些重要的事情。&lt;/p>
&lt;p>第四，激励机制失调。&lt;/p>
&lt;p>在某种程度上，由于竞争激烈，大多数新闻媒体都被迫提供免费新闻。&lt;/p>
&lt;p>毕竟，其他人都在这么做。&lt;/p>
&lt;p>然而，当新闻免费的时候，你仍然需要付钱给人们，所以你从一个卖静态广告的订阅模式转向一个把观众卖给广告商的模式。&lt;/p>
&lt;p>页面视图成为游戏的名称，越多越好。&lt;/p>
&lt;p>对于很多创建新闻的人(我不会在这里使用“记者”这个词，因为我对他们的评价很高)，他们获得的页面访问量越多，得到的补偿就越多。&lt;/p>
&lt;p>很多广告不仅仅是印象；他们也向广告商提供你的信息，但那是另一回事。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="手绘风格图形库">手绘风格图形库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-52-15.png"
width="690"
height="510"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://roughjs.com/" target="_blank" rel="noopener"
>Rough.js&lt;/a>，手绘风格图形库。&lt;/p>
&lt;p>很轻巧的一个 JS 库，可以使你的 Canvas 画布或者 SVG 图形轻松拥有手写风格（就是那种，粗糙歪扭的感觉）。 ​​​&lt;/p>
&lt;h3 id="开源塔防游戏">开源塔防游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-52-27.png"
width="690"
height="345"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mindustrygame.github.io" target="_blank" rel="noopener"
>Mindustry&lt;/a>，一款开源的以资源管理为核心的无尽塔防游戏。&lt;/p>
&lt;p>目前在 Steam 上大概卖三十多人民币，不过可以在 itch.io 免费下载（虽然会提示你多少给一点）。&lt;/p>
&lt;p>项目在 Github 开源，目前有超过两万颗星。&lt;/p>
&lt;h3 id="web-页面录屏库">Web 页面录屏库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-52-37.png"
width="690"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="355px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://recordrtc.org/index.html" target="_blank" rel="noopener"
>RecordRTC.js&lt;/a>。&lt;/p>
&lt;p>&lt;a class="link" href="github.com/muaz-khan/RecordRTC/" >开源的 Web 录屏库&lt;/a>，可以录制声音、视频等媒体信息，信息来源支持麦克风、摄像头以及网页截屏，可以录制指定 Canvas 画布渲染的图像结果。&lt;/p>
&lt;p>支持多种分辨率及压缩格式。​​​&lt;/p>
&lt;h3 id="极简画布着色器">极简画布着色器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-52-53.png"
width="495"
height="578"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="205px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://susam.net/fxyt.html" target="_blank" rel="noopener"
>FXYT&lt;/a>，只有 36 命令的“画布着色语言”，有点儿像 GPU 的片元着色器，但是很精巧。&lt;/p>
&lt;p>FXYT 是一种微小的画布着色语言，由 36 个简单的基于堆栈的命令组成。&lt;/p>
&lt;p>针对 256x256 图形画布的每个单元格计算输入代码。每个单元格的颜色由评估结果决定。&lt;/p>
&lt;p>以下是一个非常简单的 FXYT 代码：&lt;/p>
&lt;p>&lt;code>XY^&lt;/code>&lt;/p>
&lt;p>输出如图。&lt;/p>
&lt;h3 id="现代开源-basic-编程套件">现代开源 BASIC 编程套件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-53-07.png"
width="612"
height="373"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="393px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.freebasic.net/" target="_blank" rel="noopener"
>FreeBASIC&lt;/a>，兼容微软 QuickBASIC 语言的开源 BASIC 编程套件。&lt;/p>
&lt;p>FreeBASIC 项目是一套跨平台的开发工具，由编译器、基于GNU的汇编器、链接器和存档器以及支持的运行时库（包括基于软件的图形库）组成。&lt;/p>
&lt;p>编译器 fbc 目前支持在 DOS、Linux、Windows 和 Xbox 平台上构建基于 i386 架构的程序。&lt;/p>
&lt;p>同时支持一些流行的第三方库（Allegro、SDL、OpenGL、GTK+、Windows API 等）用于图形界面、游戏等高级开发。&lt;/p>
&lt;h3 id="制作-u-盘万能引导盘">制作 U 盘万能引导盘
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-53-25.png"
width="601"
height="415"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;p>&lt;a class="link" href="%e7%bd%91%e9%a1%b5%e9%93%be%e6%8e%a5" >Ventoy&lt;/a>，一个开源的优盘启动方案。&lt;/p>
&lt;p>使用优盘做启动盘，大家在安装操作系统的时候都用到过，不过一般做法是将整个引导镜像写入优盘，直接覆盖它整个的文件系统。&lt;/p>
&lt;p>这样做也就会破坏整个优盘原有的存储。&lt;/p>
&lt;p>有了 Ventoy 你就无需反复地格式化U盘，只需要把 ISO/WIM/IMG/VHD(x)/EFI 等类型的文件直接拷贝到U盘里面就可以启动了，无需其他操作。&lt;/p>
&lt;p>你可以一次性拷贝很多个不同类型的镜像文件，Ventoy 会在启动时显示一个菜单来供你进行选择。&lt;/p>
&lt;p>Ventoy 安装之后，同一个U盘可以同时支持 x86 Legacy BIOS、IA32 UEFI、x86_64 UEFI、ARM64 UEFI 和 MIPS64EL UEFI 模式，同时还不影响U盘的日常使用。&lt;/p>
&lt;p>Ventoy 支持大部分常见类型的操作系统 （Windows/WinPE/Linux/ChromeOS/Unix/VMware/Xen &amp;hellip;）
目前已经测试了各类超过 1100+ 个镜像文件。&lt;/p>
&lt;p>支持 90%+ 的操作系统。&lt;/p>
&lt;h3 id="早期的声学定位技术">早期的声学定位技术
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-53-40.png"
width="580"
height="434"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="%e7%bd%91%e9%a1%b5%e9%93%be%e6%8e%a5" >声学雷达技术&lt;/a>，这篇文章介绍了一种通过声音进行定位的技术，收录了很多历史照片。&lt;/p>
&lt;p>在无线电雷达出现之前，从第一次世界大战中期到第二次世界大战初期，声学定位被用于通过拾取发动机的噪音来被动检测飞机的方位。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="被认同的需求">被认同的需求
&lt;/h3>&lt;p>以前大部分的时候没有意识到，别人在问我问题的时候，是为了获得认同，而不是答案。&lt;/p>
&lt;p>所以答案不重要，在回答的那一刻你能提供的认同感才是最重要的。&lt;/p>
&lt;p>我以前很讨厌这样，认为这是明知故问脱裤子放屁。&lt;/p>
&lt;p>但是我逐渐意识到，人们有被认同的情感需求，而这个需求大部分的时候比获得事实或真理的需求大多了。&lt;/p>
&lt;p>我有两种选择，一种是提供点儿什么以满足这种需求，还有就是去他妈的，装聋作哑。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 063 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/</link><pubDate>Tue, 19 Dec 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-56-13.png" alt="Featured image of post 机器文摘 第 063 期" />&lt;h1 id="机器文摘-第-063-期">机器文摘 第 063 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="采访一位真正的古董程序员">采访一位真正的古董程序员
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-53-32.png"
width="636"
height="343"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>HN 上有一个程序员发布了一篇帖子里面记录了&lt;a class="link" href="https://ezali.substack.com/p/interviewing-my-mother-a-mainframe" target="_blank" rel="noopener"
>一些关于他的程序员母亲的工作经历&lt;/a>。&lt;/p>
&lt;p>他的母亲是一位 &lt;a class="link" href="https://baike.baidu.com/item/COBOL%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener"
>COBOL&lt;/a> 程序员，为一家大型银行工作，负责给 IBM 的大型机编写程序。&lt;/p>
&lt;p>这是一个难得的访谈。&lt;/p>
&lt;p>毕竟现存的、仍在一线工作的 COBOL 程序员屈指可数。&lt;/p>
&lt;p>里面提到了一些有意思的点：&lt;/p>
&lt;p>1、1991 年最开始从事这个工作的时候，他的母亲还需要通过智商、心理健康等一系列严苛的测试。&lt;/p>
&lt;p>2、现在这些程序仍然在运行，而且非常重要。如果他妈妈和那几个共同维护的员工一起消失的话，那家银行会在几周内倒闭。&lt;/p>
&lt;p>3、使用的数据库是基于当年 IBM 给阿波罗登月计划开发的后续版本，而且积累了大量的数据，如果想要迁移到现在流行的支持通用 SQL 语言的数据库则需要数年时间。&lt;/p>
&lt;p>4、主要的数据是历史交易记录，大概存了 110 亿笔，法律规定这些数据要至少保存 10 年不能丢失。&lt;/p>
&lt;p>5、他们所用的 IDE 更像是一个包含了一切的操作系统（注：不是 Emacs），叫做 ISPF，直接连接到大型机，没有本地开发环境。&lt;/p>
&lt;h3 id="一条奇怪的-cpu-指令">一条奇怪的 CPU 指令
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-53-49.png"
width="690"
height="365"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="453px"
>&lt;/p>
&lt;p>在目前使用的大多数 CPU 里，都有一条名为 popcount 的指令，是“population count”的缩写。&lt;/p>
&lt;p>它的作用是计算一个二进制机器字中的 1 的个数，比如（为简单起见，假设是 8 位 CPU ，一个机器字长 8 位），popcount(00100110) 是 3 ， popcount(01100000) 是 2 。&lt;/p>
&lt;p>可是算这个有什么用？而且，为什么从上世纪六十年代一直到现在，大多数 CPU 里都有这个指令？&lt;/p>
&lt;p>&lt;a class="link" href="https://vaibhavsagar.com/blog/2019/09/08/popcount/" target="_blank" rel="noopener"
>你不会相信这个奇怪的 CPU 指令！&lt;/a>一文介绍了这个指令的来龙去脉。&lt;/p>
&lt;p>最初是 NSA（美国国家安全局）出于密码分析与加解密需要而加入的，后来随着时间推移逐渐用不到了，于是人们又发现了它还有其他的用途。&lt;/p>
&lt;p>比如：纠错、用于卷积神经网络的矩阵乘法等等。&lt;/p>
&lt;p>文章里提到了一些人们发明的有效算法，而使得这个指令得以保存，直到今天还在发挥作用。&lt;/p>
&lt;h3 id="平均每晚睡多长时间的人寿命最长">平均每晚睡多长时间的人寿命最长？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-54-46.png"
width="522"
height="370"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="338px"
>&lt;/p>
&lt;p>《我们为什么睡觉》是英国科学家马修·沃克（Matthew Walker）2017 年写的有关睡眠的科普书籍。&lt;/p>
&lt;p>此书被 NPR 评为当年最受欢迎的科普书籍。&lt;/p>
&lt;p>书中声称，每晚睡眠少于六七个小时会使一个人增加患癌风险。&lt;/p>
&lt;p>然而此观点并未受科学证据支持。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://guzey.com/books/why-we-sleep/" target="_blank" rel="noopener"
>《我们为什么会睡觉》一书中的错误观点&lt;/a>探讨了书中的一些错误观点，并通过引用科学论文数据的方式证实了该书的错误之处。&lt;/p>
&lt;p>文章作者引用《科学报告》上的研究图表显示，平均每晚睡眠 5 小时的死亡率甚至低于每晚睡 8 小时。&lt;/p>
&lt;p>有科学研究调研了超过 155 万名参与者和 8 万名癌症病例，发现睡眠时间短或长都与癌症风险增加无关。&lt;/p>
&lt;p>所以科普读物有时候会缺乏科学严谨性，不可全信。&lt;/p>
&lt;h3 id="边做边学迷你数据库">边做边学迷你数据库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-55-53.png"
width="690"
height="289"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="573px"
>&lt;/p>
&lt;p>你在为产品选择不同的数据库时，了解它们之间的差异吗？&lt;/p>
&lt;p>抛开那些用于宣传的营销用语，哪些是它们最重要的指标？&lt;/p>
&lt;p>这里有篇文章，作者通过动手做一个小数据库，以了解学习&lt;a class="link" href="https://tontinton.com/posts/database-fundementals/" target="_blank" rel="noopener"
>数据库的基础知识&lt;/a>。&lt;/p>
&lt;p>从数据库的基本要求： ACID（原子性、一致性、隔离、持久性）讲起，逐步实现对数据的存储、搜索、过滤等基本操作。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="科技美感一些上世纪控制室照片">科技美感，一些上世纪控制室照片
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-56-13.png"
width="690"
height="409"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://designyoutrust.com/2018/01/vintage-beauty-soviet-control-rooms/" target="_blank" rel="noopener"
>前苏联的复古科技感的控制室&lt;/a>，这个页面里收集了很多苏联时期的老式控制室。里面装满了大按钮和模拟表盘，喜欢那个时代复古科技的朋友不可错过。 ​​​&lt;/p>
&lt;h3 id="shader-编程电子书">shader 编程电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-56-23.png"
width="690"
height="345"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>计算机图形学领域中，&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E7%9D%80%E8%89%B2%E5%99%A8" target="_blank" rel="noopener"
>着色器（shader）&lt;/a>是一种计算机程序，原本用于进行图像的浓淡处理（计算图像中的光照、亮度、颜色等），但近来，它也被用于完成很多不同领域的工作，比如处理CG特效、进行与浓淡处理无关的影片后期处理、甚至用于一些与计算机图形学无关的其它领域&lt;/p>
&lt;p>&lt;a class="link" href="https://thebookofshaders.com/?lan=ch" target="_blank" rel="noopener"
>The Book of Shaders&lt;/a>&lt;/p>
&lt;p>这是一本关于 Fragment Shaders（片段着色器）的入门指南，它将一步一步地带你领略其中的纷繁与抽象。&lt;/p>
&lt;p>本书用于学习 shader 编程入门是再合适不过了，在线版本还带有程序执行环境，可以边学边练。&lt;/p>
&lt;h3 id="在线学习莫斯码">在线学习莫斯码
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-56-36.png"
width="616"
height="544"
loading="lazy"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="271px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.perry.qa/morse" target="_blank" rel="noopener"
>morse&lt;/a>，一个在线学习莫斯码的网站。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="故意留点儿工作给明天对效率更好">故意留点儿工作给明天，对效率更好
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-56-55.png"
width="462"
height="450"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>&lt;/p>
&lt;p>“今日事，今日毕”是个好习惯不假。&lt;/p>
&lt;p>然而有些人发现，对于有些需要长时间专注的工作（比如编程、写作），前一天留一点儿简单的“小尾巴”对于工作效率则更高。&lt;/p>
&lt;p>原因是这点儿遗留的工作可以让你第二天迅速热身并进入“心流”状态。&lt;/p>
&lt;p>而创作类工作进入这种状态非常重要，对工作效率有极大影响。&lt;/p>
&lt;p>当然了，前提是你留下的是一个简单的“小尾巴”而不是“烂摊子”。&lt;/p>
&lt;h3 id="我的游戏喜好">我的游戏喜好
&lt;/h3>&lt;p>比起无脑的砍杀，我更喜欢带有解密性质的游戏，《塞尔达-缩小帽》算是其中一种。&lt;/p>
&lt;p>另外需要一定操作技巧才能上手的动作游戏也喜欢（掌握后可以进入心流），这一类的代表是《古墓丽影》，当然古老的《波斯王子》也算。&lt;/p>
&lt;p>除此以外就是能快速进入状态的赛车游戏了。&lt;/p>
&lt;p>不太喜欢需要十分深入剧情的游戏，比较耗神，比如《巫师》、《大镖客》等等，玩起来有些累。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 062 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/</link><pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-46-45.png" alt="Featured image of post 机器文摘 第 062 期" />&lt;h1 id="机器文摘-第-062-期">机器文摘 第 062 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="听歌识曲的技术原理">听歌识曲的技术原理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-46-25.png"
width="664"
height="490"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>现在不少音乐播放应用以及网站音乐库都提供了“听歌识曲”的功能。&lt;/p>
&lt;p>其背后的原理是怎样的？是否有个人蹲在后台一边听一边帮你搜索呢？&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cameronmacleod.com/blog/how-does-shazam-work" target="_blank" rel="noopener"
>Shazam是如何工作的&lt;/a>，这篇文章介绍了一款听歌识曲软件及其背后的工作原理。&lt;/p>
&lt;p>Shazam 可以说是听歌识曲界的鼻祖了，最早的时候，它只是一个电话号码，用户遇到要识别的歌曲，只需拨打这个电话，然后 30 秒后挂断电话，用户就会收到歌曲信息的短信了。&lt;/p>
&lt;p>最开始那还是 2002 年，那时的电话音质，真是一言难尽，我怀疑最初真的是老板蹲在那儿接电话。&lt;/p>
&lt;p>其基本原理如下：&lt;/p>
&lt;p>1、生成曲库中每一首歌的频谱图（当然离不了傅里叶）；&lt;/p>
&lt;p>2、使用算法提取每首歌的声纹特征（主要是通过在频谱中查找峰值）；&lt;/p>
&lt;p>3、Hashing 散列算法固定声纹特征表示形式；&lt;/p>
&lt;p>4、对未知歌曲做同样的提取声纹特征；&lt;/p>
&lt;p>5、通过一种对齐算法，计算未知歌曲的声纹特征与数据库里的声纹特征对齐程度；&lt;/p>
&lt;p>6、那个对的最齐的，就是答案。&lt;/p>
&lt;h3 id="量子计算机从入门到精通">量子计算机从入门到“精通”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-46-45.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>毫无疑问，人类近几十年的飞速发展主要得益于计算机的发明。&lt;/p>
&lt;p>这里的计算机实际上指的是，现在非常普及的计算机。&lt;/p>
&lt;p>开关电子元件天然适合表达二进制数据的特性，使得我们现在能接触到的计算机，绝大部分都是基于祖师爷“图灵”的机器模型，和计算机之父“冯·诺依曼”提出的“程序+存储”架构的。&lt;/p>
&lt;p>可是，假如有外星人，他们要发明计算机，或者如果宇宙中所有文明最终都进化出一种终极计算机的话，它应该是什么样的？&lt;/p>
&lt;p>答案是：量子计算机。&lt;/p>
&lt;p>量子计算机，号称速度高于传统计算机千万倍，分分钟破解现在最严苛的加密等等。&lt;/p>
&lt;p>然而，吹嘘了这么多年，量子计算机一直没能摆脱它神秘的面纱。&lt;/p>
&lt;p>这主要得益于大量媒体的捕风捉影和信口胡诌。&lt;/p>
&lt;p>如果你也像我一样疑惑，可以看看这篇&lt;a class="link" href="https://quantum.country/qcvc" target="_blank" rel="noopener"
>写给好奇者的量子计算&lt;/a>，作者试图以轻松又严谨的风格，认真聊聊什么是量子计算机。&lt;/p>
&lt;p>这是一篇非常长的文章，不建议一口气看完（也看不完）。可以按照作者的设定进行小节划分，并尝试做一下里面的课后练习。&lt;/p>
&lt;p>作者认为，只需了解一点点高等数学和线性代数的基础，就具备深入理解量子计算的能力。当然，如果对传统计算机原理（基于逻辑门）有所了解就更好了。&lt;/p>
&lt;h3 id="通过构建一个前端框架来学习前端框架">通过构建一个前端框架来学习前端框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-47-06.png"
width="690"
height="318"
loading="lazy"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="520px"
>&lt;/p>
&lt;p>现代的 Web 前端开发已经基本离不开 React、Vue 之类的框架，此类框架比起上一代 jQuery 那种直接操作 DOM 元素的方式，有了更高层次的抽象和更清晰的逻辑分层。&lt;/p>
&lt;p>然而由于这些框架追求封装和使用上的便利，对用户隐藏了很多内部细节，以使用框架入门前端开发的初学者，很难接触到事情的本质。&lt;/p>
&lt;p>以至于一旦遇到问题，便无从下手，想要了解原理，又觉得这些东西太神秘深奥。&lt;/p>
&lt;p>不过，最好的学习方式是在实践中学习，有网友写了这篇&lt;a class="link" href="https://nolanlawson.com/2023/12/02/lets-learn-how-modern-javascript-frameworks-work-by-building-one/" target="_blank" rel="noopener"
>Learn how modern JavaScript frameworks work by building one&lt;/a>。&lt;/p>
&lt;p>以现有新一代框架为模仿对象，自己动手做了一个最小化版本，实现了最核心的功能。&lt;/p>
&lt;p>可以揭示一些前端框架的背后原理。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="svg-在线学习">SVG 在线学习
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-47-17.png"
width="566"
height="831"
loading="lazy"
class="gallery-image"
data-flex-grow="68"
data-flex-basis="163px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://svg-tutorial.com/" target="_blank" rel="noopener"
>svg-tutorial&lt;/a>，一个学习 SVG 绘图的网站。叫你用源码一点点绘制 SVG 图形。&lt;/p>
&lt;p>课程涵盖简单图元和复杂的动画。 ​​​&lt;/p>
&lt;h3 id="给命令行程序加上图形界面">给命令行程序加上图形界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-47-29.png"
width="690"
height="755"
loading="lazy"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="219px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/chriskiehl/Gooey" target="_blank" rel="noopener"
>Gooey&lt;/a>，又一个很有创意的 Python 库，可以给几乎所有使用 Python3 编写的命令行程序加上图形界面。&lt;/p>
&lt;p>只需要在你的 Python3 脚本里引入这个库，然后在主函数之前加上一个 &lt;code>@Gooey&lt;/code>注解。 ​​​&lt;/p>
&lt;h3 id="边练指法边背单词">边练指法边背单词
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-47-45.png"
width="690"
height="451"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="367px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://typing-word.ttentau.top/" target="_blank" rel="noopener"
>ttentau&lt;/a>。一位工厂小哥，利用下班时间在 B 站学习前端开发。&lt;/p>
&lt;p>然后用 Vue 写了这个一边练习打字一边背单词的网站。&lt;/p>
&lt;p>网站参考了 &lt;a class="link" href="github.com/RealKai42/qwerty-learner/" >qwerty-learner&lt;/a> ，不过增加了生词本、错词本、简单词 的功能。&lt;/p>
&lt;p>佩服小哥的学习力和执行力。&lt;/p>
&lt;p>&amp;mdash;-来自 V 站 ：h++ps://www.v2ex.com/t/997978&lt;/p>
&lt;h3 id="植物模拟器">植物模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-47-58.png"
width="690"
height="372"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://plant.max-richter.dev/" target="_blank" rel="noopener"
>Simulate 3D plants in the browser&lt;/a>，在浏览器中模拟渲染 3D 植物，通过参数化节点控制模拟效果。&lt;/p>
&lt;h3 id="可视化-llm-大模型">可视化 LLM 大模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-48-13.png"
width="690"
height="797"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="207px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://bbycroft.net/llm" target="_blank" rel="noopener"
>LLM Visualization&lt;/a>，这个网站应该是把开源大语言模型的神经结构给 3D 建模了。可以图形化查看不同版本大模型的神经网络架构。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="弯路与直路">弯路与直路
&lt;/h3>&lt;p>无论是一万小时定律还是有效练习的理论，都好像规定了必须不能浪费练习时间。&lt;/p>
&lt;p>这给人带来误解和焦虑。&lt;/p>
&lt;p>任何一个熟练的技能习得，一定是浪费了很多时间在看似低效甚至无效的重复练习上，因为要靠这个来感悟真正的心法。&lt;/p>
&lt;p>很多人站在起点，一心只想着避免走弯路，实际上这世上哪有直路，弯路才是必经之路。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 061 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/</link><pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-34-30.png" alt="Featured image of post 机器文摘 第 061 期" />&lt;h1 id="机器文摘-第-061-期">机器文摘 第 061 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="在-adsl-之前电话线拨号上网为什么最高只能是-56k">在 ADSL 之前，电话线拨号上网，为什么最高只能是 56k？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-33-06.png"
width="636"
height="389"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="392px"
>&lt;/p>
&lt;p>用过最早的电话线猫拨号上网（非 ADSL 宽带）的同学，都体会过拨号即将接通那一刻猫欢快地吱吱叫（电影黑客帝国中能回味这种声音），你的心也如猫抓的感受。&lt;/p>
&lt;p>然而当时没人太在意为什么那个猫的速率最高只能达到 56k 每秒（事实上这是理论值，现实中永远达不到）。&lt;/p>
&lt;p>56 这个数字既不是 2 的幂，也不能被 10 整除，它是怎么来的？&lt;/p>
&lt;p>国外有个闲人（他自己说的），认真研究了一大段历史，然后撰写这篇文章：&lt;a class="link" href="https://www.10stripe.com/articles/why-is-56k-the-fastest-dialup-modem-speed.php" target="_blank" rel="noopener"
>《为什么 56k 是最快的拨号调制解调器速度？》&lt;/a> 记录了形成这个数字的原因。&lt;/p>
&lt;p>大概如下：
1、电话线最初是为语音通话服务的，按照最小化成本的原则，选择了一个技术标准：4kHz 的带宽给语音。&lt;/p>
&lt;p>2、转为数字交换机之后，只有用户到接入箱的信号是模拟的，其余都是数字化的，按照科学定律，数字采样频率为 4kHz 的两倍（也就是8000）即可完美保留信息了。&lt;/p>
&lt;p>3、最开始的数模转换芯片是 8-bit 的，每秒 8000 的频率，所传输的数据为 8*8000，也就是 64k。&lt;/p>
&lt;p>4、由于控制信息还要占用 1 位，所以 64k 并不能都给数据载荷，所以传输的数据位 7*8000，也就是 56k。&lt;/p>
&lt;h3 id="自制一个真-3d-显示器">自制一个真 3D 显示器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-33-36.png"
width="690"
height="389"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mitxela.com/projects/candle" target="_blank" rel="noopener"
>一个小小的体积显示器&lt;/a>&lt;/p>
&lt;p>这篇文章的作者使用电机带动一个 LED 点阵电路板的旋转，实现了一个逼真的 3D 显示器，虽然分辨率很低，但是它真的是 3D 的。&lt;/p>
&lt;p>支持从水平方向上的各个角度观看。&lt;/p>
&lt;p>技术通过调节 LED 的点亮时间与电机旋转速度的匹配，以实现不同角度显示不同画面的效果。&lt;/p>
&lt;h3 id="怎样搭建自己的电子邮件服务">怎样搭建自己的电子邮件服务？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-33-49.png"
width="690"
height="380"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://synergeticlabs.com/email-alchemy/" target="_blank" rel="noopener"
>探索自托管电子邮件服务&lt;/a>。&lt;/p>
&lt;p>很少有技术能像互联网上的电子邮件服务那样保持其原始形式。&lt;/p>
&lt;p>虽然它有时会穿上一些不同的马甲，但基本概念和协议至今基本保持不变。&lt;/p>
&lt;p>现在普通用户使用电邮服务基本上都要依托于几家大的服务商（谷歌、微软、苹果等，国内有网易、阿里、腾讯等）。&lt;/p>
&lt;p>这样做的代价就是会被特定的系统绑定，不得不依赖电邮服务商所构建的生态，失去了自主控制的能力。&lt;/p>
&lt;p>本文作者正是基于摆脱特定服务商控制的目标，意图构建一套完全自主管理和运营的电邮系统。&lt;/p>
&lt;p>这在上个世纪电邮刚刚兴起的时候或许还更简单一些，现在由于那些服务商的垄断，导致不得不面临一些技术问题。&lt;/p>
&lt;p>有兴趣的朋友可以跟随作者感受一下完整的从技术选型到构建的过程。&lt;/p>
&lt;h3 id="语音识别时怎样区分多人谈话">语音识别时怎样区分多人谈话？
&lt;/h3>&lt;p>&amp;mdash;-来自微博&lt;a class="link" href="https://weibo.com/1812166904/NuI5ridW8" target="_blank" rel="noopener"
>@Barret李靖&lt;/a>
OpenAI 推出的开源免费 Whisper 在语音识别领域（ASR）可以说无出其右，不过它有一个较大的局限性，就是无法进行说话人分类（Speaker diarization），尤其是在重叠语音检测（Overlapped speech detection）方面，Whisper 在训练过程中只识别了一个声音，同时将其他声音视为背景噪声。&lt;/p>
&lt;p>社区有一个发展了多年的音频处理工具包，&lt;a class="link" href="https://github.com/pyannote/pyannote-audio" target="_blank" rel="noopener"
>pyannote-audio&lt;/a>，它具备非常强大的音频分析、处理、识别和分类能力，在多人同时讲话的时候，也可以很准确地区分说话者内容，只不过它的 ASR 能力还是比不过 Whisper。&lt;/p>
&lt;p>有人想到结合两者的能力，并做了一个&lt;a class="link" href="https://colab.research.google.com/drive/12W6bR-C6NIEjAML19JubtzHPIlVxdaUq" target="_blank" rel="noopener"
>工程化的实践&lt;/a>，大致思路如下：&lt;/p>
&lt;p>1）通过 pyannote-audio 将不同 speaker 的音轨时间片段给识别出来&lt;/p>
&lt;p>2）将不同 speaker 的声音按照各自的时间片段进行合并，空白处使用静音填充&lt;/p>
&lt;p>3）将分离的多个 speaker 音频交给 Whisper 进行语音识别&lt;/p>
&lt;p>4）最后将识别的内容按照 speaker 和时间顺序进行还原&lt;/p>
&lt;p>这个实验还演示了如何使用 yt-dlp 从 Youtube 下载视频，如何使用 pydub 分离音频，以及解决了 Whisper 和 pyannote-audio 安装时的依赖冲突问题，算是一个比较完整的解决方案，不过这个思路需要对音频进行多次分析（取决于 speaker 数量），性能一般。&lt;/p>
&lt;p>&lt;a class="link" href="https://medium.com/@xriteshsharmax/speaker-diarization-using-whisper-asr-and-pyannote-f0141c85d59a" target="_blank" rel="noopener"
>这篇文章提出了一个性能稍微优秀一点点的方案&lt;/a>，仍然是通过工程手段解决问题：&lt;/p>
&lt;p>1）首先利用 pyannote-audio 根据静音、暂停和说话者变化等特征，将音频流分割为更小的片段&lt;/p>
&lt;p>2）对于每个片段，将不同说话者的语音特征提取出来（Speaker Embedding）&lt;/p>
&lt;p>3）将分割的片段极其衍生的更多片段进行聚类（Clustering）和打标（Labeling）&lt;/p>
&lt;p>4）最后交给 Whisper 进行语音识别&lt;/p>
&lt;p>这部分&lt;a class="link" href="https://github.com/riteshhere/Speaker_diarization" target="_blank" rel="noopener"
>工程的实现已被作者整理成一个开源项目&lt;/a>，目前还没有找到更优的解决方案，不知道有经验的朋友都是如何去做的？&lt;/p>
&lt;h3 id="有哪些值得推荐的冷门技术">有哪些值得推荐的冷门技术？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-34-17.png"
width="642"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://news.ycombinator.com/item?id=38499134" target="_blank" rel="noopener"
>有网友在 HN 上发起的一个讨论&lt;/a>，里面抛出了很多平时不被广泛了解的技术或产品。&lt;/p>
&lt;p>比如：
1、&lt;a class="link" href="https://www.ultimatepp.org/" target="_blank" rel="noopener"
>U++&lt;/a>：一个跨平台的 C++ 快速开发框架，专注于提高程序员的生产力。它包括一组库（GUI、SQL 等）和一个集成开发环境。&lt;/p>
&lt;p>2、&lt;a class="link" href="https://flatassembler.net/" target="_blank" rel="noopener"
>flatassembler&lt;/a>：一个专门学习高级汇编语言的网站。&lt;/p>
&lt;p>3、&lt;a class="link" href="" >模拟计算&lt;/a>：纯机械、利用物理系统实现的计算系统，有人认为实现神经网络的最合适技术不应该是基于二进制的数字技术，而是基于机械运动的模拟计算。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="用-ai-生成视觉错觉图片">用 AI 生成视觉错觉图片
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-34-30.png"
width="690"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dangeng.github.io/visual_anagrams/" target="_blank" rel="noopener"
>visual_anagrams&lt;/a> 是一个用 AI 生成视觉错觉图的样例站点。&lt;/p>
&lt;p>生成的图片从正方向来看是一副图像（比如人像、景物等），倒转 180° 之后是另外一副图像，也可以是其他人物或者景物。&lt;/p>
&lt;p>项目开源并且有对应的论文。 ​​​&lt;/p>
&lt;h3 id="深度学习入门">深度学习入门
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-34-55.png"
width="488"
height="542"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="216px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://udlbook.com" target="_blank" rel="noopener"
>Understanding Deep Learning&lt;/a>。一本深度学习入门的电子书。基于 MIT 协议开源。&lt;/p>
&lt;p>注重实操，从基础概念一直讲到最新比较流行的神经网络模型。&lt;/p>
&lt;p>每个章节都附带可直接运行的样例代码（以 ipynb 格式呈现）。 ​​​&lt;/p>
&lt;h3 id="在线网页-ps">在线网页 PS
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-35-22.png"
width="691"
height="581"
loading="lazy"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="285px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zaixianps.net/" target="_blank" rel="noopener"
>在线PS网页版&lt;/a>。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://nordpass.com/most-common-passwords-list/" target="_blank" rel="noopener"
>NordPass&lt;/a> 公布了 2023 年 Top200 常见密码，其中“123456” 5 年 4 次登顶常见密码榜，可被秒破。&lt;/li>
&lt;li>我感觉“123456”搭配上用户名“admin”更有内味儿。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 060 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/</link><pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-36-17.png" alt="Featured image of post 机器文摘 第 060 期" />&lt;h1 id="机器文摘-第-060-期">机器文摘 第 060 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="在-linux-下运行一个-hello-world-到底发生了什么">在 Linux 下运行一个 Hello world 到底发生了什么？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-34-40.png"
width="595"
height="578"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="247px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://jvns.ca/blog/2023/08/03/behind--hello-world/" target="_blank" rel="noopener"
>在 Linux 下运行一个 Hello world 到底发生了什么&lt;/a>。&lt;/p>
&lt;p>这是一个有点儿类似于“你在浏览器里输入网址并回车之后到底发生了什么”的话题。&lt;/p>
&lt;p>如果深入探讨的话，你会发现每一步都没有你想象的那么简单。&lt;/p>
&lt;p>文章作者以运行 Python 程序 hello.py 为例，讲述从输入 &lt;code>python3 hello.py&lt;/code> 到在控制台看到 &lt;code>hello world&lt;/code> 字符串所发生的全部事情。&lt;/p>
&lt;p>大致过程为：
1、解析命令；
2、寻找命令程序在磁盘中的位置；
3、获取可执行文件内容；
4、启动进程；
5、加载动态链接库及相关依赖；
6、执行文件指令；
7、看到执行结果；&lt;/p>
&lt;p>文章中介绍了每一步在命令行下进行跟踪的细节，喜欢动手的可以跟着作者调试一遍，感受更深刻。&lt;/p>
&lt;h3 id="浮点数在计算机里是如何表示的">浮点数在计算机里是如何表示的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-34-59.png"
width="690"
height="446"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>&lt;/p>
&lt;p>即便是每天都在与计算机打交道的程序员，也未必十分清楚浮点数在计算机是如何表示的，以及为什么要这样表示。&lt;/p>
&lt;p>如果去看 IEEE754 （电气工程师学会制定的二进制浮点格式规范）又显得有些太枯燥。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://ciechanow.ski/exposing-floating-point/" target="_blank" rel="noopener"
>《详解浮点数在计算机中的表示》&lt;/a>容易下咽一些。&lt;/p>
&lt;p>总的来说，计算机采用目前的这种表示方式，是权衡了表示精度与表示范围的矛盾，在有限的二进制位中尽可能的表达更高精度和更广的数值范围。&lt;/p>
&lt;p>为了展示存储细节，作者甚至制作了一个网站 &lt;a class="link" href="https://float.exposed/" target="_blank" rel="noopener"
>float.exposed&lt;/a>，用于展示浮点数在计算机中的每一个细节。&lt;/p>
&lt;h3 id="如果不想陷入困境就去感知尚未察觉的事物">如果不想陷入困境，就去感知尚未察觉的事物
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-35-37.png"
width="690"
height="516"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="http://johnsalvatier.org/blog/2017/reality-has-a-surprising-amount-of-detail" target="_blank" rel="noopener"
>《现实世界有着惊人的细节》&lt;/a>告诉我们一个容易被忽略的事实：物理定律本身往往非常简单——但这些定律的表现往往是复杂和违反直觉的，现实中的细节比理论上要复杂很多，要接受这种复杂度。&lt;/p>
&lt;p>作者自幼跟随父亲从哥伦比亚移民美国，从小就跟兄长一起帮助父亲做一些建筑活计，在这些活动中，作者意识到了上面的问题。&lt;/p>
&lt;p>在文中，作者以“建造一段简单的楼梯”和“观察水的沸腾举例”，看似简单的任务里面包含了丰富的细节。&lt;/p>
&lt;p>现代社会的各种方便工具，让我们忽略了的很多繁琐，以至于更容易不加思索地接受别人通过他们的感知而获得的一些简化后的失真观点。&lt;/p>
&lt;p>但事实上，作者提醒道，你要主动去了解现实的各种细节，这对于你成功地做事、解决各方面的问题，至关重要，否则就会陷入困境。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="企业划分网段的最佳实践">企业划分网段的最佳实践
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-35-49.png"
width="690"
height="634"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="261px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sergiomarotco/Network-segmentation-cheat-sheet" target="_blank" rel="noopener"
>Network-segmentation-cheat-sheet&lt;/a>&lt;/p>
&lt;p>从简单到复杂，这个开源项目列出了4个不同级别的划分网段的最佳实践。​​​&lt;/p>
&lt;h3 id="一键禁用-win10-自动更新">一键禁用 Win10 自动更新
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-36-06.png"
width="690"
height="327"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="506px"
>&lt;/p>
&lt;p>上次我分享了一个禁用 Win10 更新的方法（将系统时间调整到 2050 年，然后设置延迟更新时间），不过对于一些人来说操作还是过于麻烦。&lt;/p>
&lt;p>这里有网友分享的一个&lt;a class="link" href="https://cwj-cloud.s3.sgp.tebi.io/windows/%E5%85%B3%E9%97%ADwin10%E6%9B%B4%E6%96%B0.zip" target="_blank" rel="noopener"
>禁用 Windows 更新&lt;/a>的软件，可以一键禁用。 ​​​&lt;/p>
&lt;h3 id="开源数码照片后期软件">开源数码照片后期软件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-36-17.png"
width="690"
height="391"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://ansel.photos/en/" target="_blank" rel="noopener"
>ansel&lt;/a>，开源数码照片后期软件，可作为 Adobe Lightroom 平替。&lt;/p>
&lt;p>支持 Linux 和 Windows 平台。 ​​​&lt;/p>
&lt;h3 id="浏览器跨窗口互动">浏览器跨窗口互动
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-36-32.png"
width="690"
height="628"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="263px"
>&lt;/p>
&lt;p>最近有个浏览器跨窗口的 Demo 火了，多个浏览器窗口里的显示内容进行互动，组成复杂的图形。&lt;/p>
&lt;p>大家纷纷放出了自己的代码实现。&lt;/p>
&lt;p>在这里有一个：https://bgstaal.github.io/multipleWindow3dScene/&lt;/p>
&lt;p>主要原理是通过localStorage存储来交换各个窗口的信息。 ​​​&lt;/p>
&lt;p>还有个通过 websocket 的实现的，代码在这里： &lt;a class="link" href="https://github.com/Momciloo/fun-with-sockets" target="_blank" rel="noopener"
>https://github.com/Momciloo/fun-with-sockets&lt;/a>&lt;/p>
&lt;h3 id="学习-css-grid-布局的资料">学习 CSS Grid 布局的资料
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-38-12.png"
width="421"
height="498"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="202px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.joshwcomeau.com/css/interactive-guide-to-grid/" target="_blank" rel="noopener"
>interactive-guide-to-grid&lt;/a>，CSS Grid 布局的交互式指南。&lt;/p>
&lt;p>虽然现在大家都 Flex 布局一把梭了，但是某些情况下 Grid 布局更加适合。&lt;/p>
&lt;p>如果觉得 Grid 布局学起来稍微有些复杂的话，这篇教程应该会好理解一些。&lt;/p>
&lt;h3 id="最好的爬虫工具">最好的爬虫工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-38-22.png"
width="542"
height="293"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://crawlee.dev/" target="_blank" rel="noopener"
>crawlee&lt;/a> 评价很高的爬虫工具。&lt;/p>
&lt;p>技术栈非常新，功能很强大。&lt;/p>
&lt;p>支持两种模式，HTTP 和 Headless 模式。&lt;/p>
&lt;p>其中，Headless 模式基于 Pupperteer 提供真实的浏览器模拟，支持 JS 渲染，有反封锁和类人操作模拟，可以降低被封概率。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="电影和游戏">电影和游戏
&lt;/h3>&lt;p>电影是一种可以观看的快进人生。&lt;/p>
&lt;p>电子游戏是一种可以参与的快进人生。 ​​​&lt;/p>
&lt;h3 id="ai-的另类用法">AI 的另类用法
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-38-56.png"
width="619"
height="900"
loading="lazy"
class="gallery-image"
data-flex-grow="68"
data-flex-basis="165px"
>&lt;/p>
&lt;p>犯罪嫌疑人开始戴假手指，如果被监控摄像机抓取，会显得像是人工智能生成的图片，从而无法被当成证据。&lt;/p>
&lt;p>&amp;ndash;来自新浪微博：&lt;a class="link" href="https://weibo.com/1666430060/NujKiqNr1" target="_blank" rel="noopener"
>@周健工&lt;/a>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 059 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/</link><pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-46-23.png" alt="Featured image of post 机器文摘 第 059 期" />&lt;h1 id="机器文摘-第-059-期">机器文摘 第 059 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="一个独立游戏开发者自学手绘的探索">一个独立游戏开发者自学手绘的探索
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-45-38.png"
width="690"
height="403"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://indienova.com/indie-game-development/the-process-of-learning-art-for-an-indie-game-developer/" target="_blank" rel="noopener"
>以笔为剑：聊一聊独立游戏开发者的邪道自学绘画&lt;/a>。&lt;/p>
&lt;p>作者是一个独立游戏开发者，受限于美术资源的匮乏只得自己学习绘画并亲自制作（当然我感觉作者本身是热爱绘画的）。&lt;/p>
&lt;p>他谈到了自己曾多次启动学习绘画的计划，但每次都被“系统性学习”这个概念给压倒，周围一帮人要告诉他正确的学习方法和“最佳实践”。&lt;/p>
&lt;p>而这个“最佳实践”就是“素描是一切的基础”，以及艺术成就来自大量练习和“天生的”。&lt;/p>
&lt;p>作者在这个框架下多次挫败、放弃、重启，然后再失败。&lt;/p>
&lt;p>终于有一天他悟了，作为擅长计算机图形学的开发者，能否用 3D 建模以及渲染的思维来学习绘画呢？&lt;/p>
&lt;p>他决定尝试，并取得成功。&lt;/p>
&lt;p>作者文风幽默，可见其对生活、学习乐观积极，文章记录了详细的学习过程，对于有绘画情节的开发者，也许会有所触动。&lt;/p>
&lt;h3 id="一行代码造成-6-千万美元损失的故事">一行代码造成 6 千万美元损失的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-45-57.png"
width="677"
height="807"
loading="lazy"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="201px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://engineercodex.substack.com/p/how-one-line-of-code-caused-a-60" target="_blank" rel="noopener"
>一行代码造成 6 千万美元损失的故事&lt;/a>&lt;/p>
&lt;p>这个故事发生在 1990 年，AT&amp;amp;T 当时是全球最大的通信公司，因为这次事故导致了近一半的网络瘫痪， 6 万人无法通话，500 个航空公司的航班延误。&lt;/p>
&lt;p>原因是有人更新了运行在交换机上的程序。&lt;/p>
&lt;p>按理说应该会经过严格测试才能上线，但这次没有测试就上线了，因为“改动很小，只有一行代码”。&lt;/p>
&lt;p>正是这行代码中出现了因为看错语句嵌套而写错位置的“break”语句，导致了数据被错误覆盖，然后监控程序识别到这个错误就会重启交换机，结果一时间，大量的交换机被重启，网络瘫痪了。&lt;/p>
&lt;h3 id="用-python-写一个-python">用 Python 写一个 Python
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-46-11.png"
width="690"
height="996"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="166px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mathspp.com/blog/building-a-python-compiler-and-interpreter" target="_blank" rel="noopener"
>Building a Python compiler and interpreter&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>在这一系列的文章中，我们将从头开始用 Python 语言实现 Python 编程语言。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>这个系列的最终目标是探索和体验实现类似 Python 编程语言所需的概念和算法。为此，我们将创建一种具有 Python 部分功能的编程语言，并在此过程中涉足词法分析器、解析器、编译器和解释器的实现！！&lt;/p>
&lt;/blockquote>
&lt;h3 id="用-c4model-进行软件架构设计">用 c4model 进行软件架构设计
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-46-23.png"
width="690"
height="556"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="297px"
>&lt;/p>
&lt;p>&lt;a class="link" href="c4model.com" >C4&lt;/a> 是的一个比 UML 更简练的系统架构模型。&lt;/p>
&lt;p>C4的理念是，具体把系统分为：System Context（上下文）, Container（容器）, Component（部件）, Code（代码）。&lt;/p>
&lt;p>这四层每层代表着不同的视图架构，每层适用于不同的系统角色，我们会针对当前的人员的角色，找到共同的关注点（合适的层级）来统一认识，然后展开设计。&lt;/p>
&lt;p>但是介绍它如何落地使用的资料偏少，这里我找到了&lt;a class="link" href="%e7%bd%91%e9%a1%b5%e9%93%be%e6%8e%a5" >一篇关于如何使用 C4 模型进行架构设计的入门文章&lt;/a>。&lt;/p>
&lt;p>介绍了基本的概念以及如何在 vscode 里使用 PlantUML 插件进行绘图。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="自制深度学习推理框架">自制深度学习推理框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-46-43.png"
width="690"
height="579"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="286px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/zjhellofss/KuiperInfer" target="_blank" rel="noopener"
>KuiperInfer&lt;/a>，带你从零实现一个高性能的深度学习推理库，支持Unet、Yolov5、Resnet等模型的推理。&lt;/p>
&lt;h3 id="去除图片任意物体网页版">去除图片任意物体（网页版）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-46-58.png"
width="690"
height="462"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/lxfater/inpaint-web/tree/main%e2%80%8b" target="_blank" rel="noopener"
>inpaint-web&lt;/a>，一个运行在浏览器端的inpaint实现，能够去除掉图片的无关物体。&lt;/p>
&lt;h3 id="跟着例子学-wasm">跟着例子学 Wasm
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-47-08.png"
width="690"
height="538"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://wasmbyexample.dev/home.en-us.html" target="_blank" rel="noopener"
>Wasm By Example&lt;/a>，一个简洁的、通过示例介绍 WebAssembly 的站点。&lt;/p>
&lt;p>通过代码片段和带注释的 WebAssembly 示例程序让你更好的理解 WebAssembly 技术的使用。 ​​​&lt;/p>
&lt;h3 id="把网页做成电子书">把网页做成电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-47-19.png"
width="690"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sunxen/EpubPressX" target="_blank" rel="noopener"
>EpubPressX&lt;/a>，一个 chrome 浏览器插件，可以将打开的多个网页制作成一本 epub 电子书，然后在微信读书等进行阅读。&lt;/p>
&lt;h3 id="浏览器调试器技巧">浏览器调试器技巧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-47-27.png"
width="690"
height="510"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://alan.norbauer.com/articles/browser-debugging-tricks" target="_blank" rel="noopener"
>browser-debugging-tricks&lt;/a>，一些浏览器调试器的使用技巧。&lt;/p>
&lt;h3 id="excel-表格粘贴为-markdown-格式">Excel 表格粘贴为 Markdown 格式
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-47-44.png"
width="688"
height="350"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>这个 vscode 的插件可真是太好用了：&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=csholmq.excel-to-markdown-table" target="_blank" rel="noopener"
>Excel to Markdown table&lt;/a> 。&lt;/p>
&lt;p>用法比较简单，先在打开你的 Excel 文档，复制你要的表格内容。&lt;/p>
&lt;p>然后 &lt;code>Shift+Alt+V&lt;/code> 就可以转化并粘贴成 Markdown 格式的 Table 到你当前打开的这个文档中。 ​​​&lt;/p>
&lt;h3 id="机器学习入门课程">机器学习入门课程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-47-57.png"
width="496"
height="287"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://microsoft.github.io/ML-For-Beginners" target="_blank" rel="noopener"
>ML-For-Beginners)&lt;/a>，微软出品的面向初学者的机器学习入门课程（含PDF）。&lt;/p>
&lt;p>虽然是系统学习，但比较偏向于实践，各种知识通过各种实例任务进行串接。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="做好产品的人">做好产品的人
&lt;/h3>&lt;p>只有那些心里有他人，真正为他人着想的人，才能做好产品，才能成为合格的工程师。&amp;mdash;-看到有人发布了一个基于 AI 的导盲 APP 有感。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 058 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/</link><pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-19-49.png" alt="Featured image of post 机器文摘 第 058 期" />&lt;h1 id="机器文摘-第-058-期">机器文摘 第 058 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="将运行在-50-年前处理器上的程序性能提升-1800-倍">将运行在 50 年前处理器上的程序性能提升 1800 倍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-16-04.png"
width="463"
height="482"
loading="lazy"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="230px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mark.engineer/2023/11/speed-up-a-program-for-50-years-old-processor-by-180000/" target="_blank" rel="noopener"
>《将运行在 50 年前处理器上的程序性能提升 1800 倍》&lt;/a>。&lt;/p>
&lt;p>了解过一点儿计算机历史的都知道世界上第一台真正的电子计算机是 1946 年宾夕法尼亚大学的 ENIAC。&lt;/p>
&lt;p>当年科学家实现了在 ENIAC 上计算 PI 的小数点后 2035 位，耗费时长大概是 70 个小时。&lt;/p>
&lt;p>技术发烧友有一个流派，就是深挖各种硬件的极限性能。&lt;/p>
&lt;p>为此，此文作者希望挑战这个记录。&lt;/p>
&lt;p>即：在 Intel 4040 （4004 的后续产品）CPU 上计算 PI 的小数点后 2035 位，并在耗时上小于 70 小时。&lt;/p>
&lt;p>当然这不是一件容易的事情，涉及到算法选择，以及在捉襟见肘的指令集上反复优化。&lt;/p>
&lt;p>文中对使用计算机计算 PI 的方法也做出了比较详细的介绍。&lt;/p>
&lt;h3 id="又有人自己动手写编译器">又有人自己动手写编译器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-18-12.png"
width="521"
height="783"
loading="lazy"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="159px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://sebmestre.blogspot.com/2023/11/en-writing-compiler-is-surprisingly.html" target="_blank" rel="noopener"
>写一个编译器非常简单&lt;/a> （吗？）&lt;/p>
&lt;p>写这篇文章的作者从小就希望创造一个属于自己的编程语言，但是从来没有完成过。&lt;/p>
&lt;p>因为每次做到“从源码生成汇编代码”这一步时就因为复杂度而放弃了。&lt;/p>
&lt;p>后来很多年过去了，作者总觉得欠小时候的自己一个编译器。&lt;/p>
&lt;p>于是他决心自己动手撸出来一个。&lt;/p>
&lt;p>在这个过程中，他发现，如果设置合理的限制条件的话，做个编辑器并没有想象中的那么难。&lt;/p>
&lt;p>文中分享了整个编写过程，限制条件为：
1、目标平台为 x86-64 处理器；
2、只生成汇编代码，由汇编到可执行文件的过程交给 gcc 来干；&lt;/p>
&lt;h3 id="复杂的问题不等于重要的问题">复杂的问题不等于重要的问题
&lt;/h3>&lt;p>为什么有的时候人们会把简单的问题复杂化，看完这篇&lt;a class="link" href="https://www.benkuhn.net/hard/" target="_blank" rel="noopener"
>《你不需要解决困难的问题》&lt;/a>可能会找到一点儿线索。&lt;/p>
&lt;p>文章作者在学生时代以“解决棘手问题”作为最高工作目标，并引以为傲地写入简历。&lt;/p>
&lt;p>后来经历过现实中各种目标、边界、考核维度都十分模糊的项目之后，作者感悟到了原因。&lt;/p>
&lt;p>即：很多人在现实中错误的将“困难的”问题跟“重要的”问题划上了等号。&lt;/p>
&lt;p>所以在工作中拆解目标时，很容易陷入“困难”、“复杂”的问题中去，而实际上，识别那些问题更重要，哪怕它是简单枯燥的，那也应该优先解决它们。&lt;/p>
&lt;h3 id="纯-javascript-操作-dom">纯 Javascript 操作 DOM
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-19-35.png"
width="683"
height="352"
loading="lazy"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="465px"
>&lt;/p>
&lt;p>使用框架使多了，已经忘了用原生 Javascript 怎样跟 DOM 元素打交道？&lt;/p>
&lt;p>这里有个系列文章&lt;a class="link" href="https://phuoc.ng/collection/html-dom/" target="_blank" rel="noopener"
>《使用纯 Javascript 精通 DOM 操作》&lt;/a>。&lt;/p>
&lt;p>作者编写了十分详尽的文档，并列举了丰富的例子帮我们掌握在不借助任何外部框架的基础上，操作 DOM 元素。&lt;/p>
&lt;p>这些文章每篇都解决现实中一个特定的问题，并给出了最佳实践。&lt;/p>
&lt;p>每篇文章都可以在线交互运行代码示例，例子很小巧、容易理解。&lt;/p>
&lt;p>系列文章深度由浅入深，从最基本的元素插入、修改，到高级的光标定制、滚动条定制与交互操作等，覆盖面非常广泛。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="逼真的俄罗斯方块模拟器">逼真的俄罗斯方块模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-19-49.png"
width="623"
height="925"
loading="lazy"
class="gallery-image"
data-flex-grow="67"
data-flex-basis="161px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chvin.github.io/react-tetris/?lan=zh-cn" target="_blank" rel="noopener"
>俄罗斯方块&lt;/a>。非常复古拟真的俄罗斯方块游戏，手机或 PC 直接打开链接即可玩。 ​​​&lt;/p>
&lt;h3 id="在线协作终端">在线协作终端
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-20-09.png"
width="690"
height="527"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ekzhang/sshx" target="_blank" rel="noopener"
>sshx&lt;/a>。一个基于 Web 的安全协作终端。&lt;/p>
&lt;p>具有实时协作功能，可以远程分享终端环境。端到端加密，采用 Rust 编写。 ​​​&lt;/p>
&lt;h3 id="复古游戏机模拟器大全">复古游戏机模拟器大全
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-20-25.png"
width="528"
height="750"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="168px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/DerekTurtleRoe/awesome-emulators" target="_blank" rel="noopener"
>awesome-emulators&lt;/a>。这是一个开源的专门收集复古电脑和游戏机模拟器的仓库。 ​​里面整理了非常齐全的复古电脑和游戏主机的不同版本的模拟器。​&lt;/p>
&lt;h3 id="gpu-加速科学数据处理">GPU 加速科学数据处理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-20-38.png"
width="690"
height="312"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="530px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://colab.research.google.com/drive/12tCzP94zFG2BRduACucn5Q_OcX1TUKY3" target="_blank" rel="noopener"
>cuDF&lt;/a>是 Nvidia 开发的 pandas 加速器。&lt;/p>
&lt;p>只需一行代码将 Pandas 代码的速度提高 10-1000 倍&lt;/p>
&lt;p>Notebooks 运行：&lt;code>%load_ext cudf.pandas&lt;/code>&lt;/p>
&lt;p>命令行运行：&lt;code>python -m cudf.pandas&lt;/code>&lt;/p>
&lt;h3 id="贝尔实验室在上世纪七十年代的-c-语言教程">贝尔实验室在上世纪七十年代的 C 语言教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-20-57.png"
width="464"
height="627"
loading="lazy"
class="gallery-image"
data-flex-grow="74"
data-flex-basis="177px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.lysator.liu.se/c/bwk-tutor.html" target="_blank" rel="noopener"
>bwk-tutor&lt;/a>，一份 1974 年，贝尔实验室的 C 语言教程。&lt;/p>
&lt;h3 id="年会抽奖工具">年会抽奖工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-21-17.png"
width="690"
height="674"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="245px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://vitozyf.github.io/lucky-draw/index.html" target="_blank" rel="noopener"
>lucky-draw&lt;/a>。&lt;/p>
&lt;p>一个开源的抽奖工具，基于网页技术实现，支持导入名单和人员照片作为头像。 ​​​&lt;/p>
&lt;h3 id="笔记本的-nvidia-独显竟然没有视频编码硬解支持">笔记本的 Nvidia 独显竟然没有视频编码硬解支持
&lt;/h3>&lt;p>老黄刀法精准，从多年前就开始了。&lt;/p>
&lt;p>我近期才发现我那个老掉牙的笔记本电脑（Thinkpad t450s），里面带的 Nvidia 940M 显卡居然不支持视频格式硬件解码。&lt;/p>
&lt;p>如果我使用独显渲染网页（在 Win10 的图形设置里将浏览器强制指定使用独显，本以为这样会提升性能）的话，访问哔哩哔哩这些视频网站就只能使用 CPU 软解视频流。&lt;/p>
&lt;p>导致 CPU 占用极高。&lt;/p>
&lt;p>今天抱着试试看的态度将之切换为核显，结果发现 Intel 核显支持各种视频格式的硬解，CPU 占用一下就下去了。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="痛苦就是信息">痛苦就是信息
&lt;/h3>&lt;p>小时候，当你触碰到滚烫的物品时，你感觉到了疼痛。这份疼痛给了你一条信息：小心滚烫的东西。&lt;/p>
&lt;p>当你报名参加马拉松比赛时，你是在跟痛苦签约，但跑步过程中你是否要继续，则取决于你自己。用村上春树的话说，“痛苦是必然的，但受苦是可选择的”。你可以选择痛苦，而不选择受苦。&lt;/p>
&lt;p>痛苦就是信息，信息也会带来痛苦。重塑大脑并不是一个无摩擦的过程，有些知识只能通过艰难的方式获得。&lt;/p>
&lt;p>越早将痛苦转化为知识，你就越早能体验到下一个有用的痛苦。不要让自己多次经历同样的痛苦。要获取新的信息，你必须经历新的痛苦。&lt;/p>
&lt;p>人们常说“知识就是力量”。如果痛苦就是信息，那么痛苦也可以转化为力量。为此，你必须学会控制你的受苦，接受伤疤其实是美丽的。&lt;/p>
&lt;p>如果你感到痛苦，问问它给了你什么信息。如果那个信息很有用，那就寻找下一个痛苦。这就是学习的过程。&lt;/p>
&lt;p>来自微博&lt;a class="link" href="https://weibo.com/2166767661/NrRSBpk8l" target="_blank" rel="noopener"
>@本恰恰-&lt;/a>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 057 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/</link><pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-56-08.png" alt="Featured image of post 机器文摘 第 057 期" />&lt;h1 id="机器文摘-第-057-期">机器文摘 第 057 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="浏览器反广告插件是如何工作的">浏览器反广告插件是如何工作的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-55-06.png"
width="528"
height="351"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://andadinosaur.com/youtube-s-anti-adblock-and-ublock-origin" target="_blank" rel="noopener"
>视频网站和反广告插件的猫鼠游戏&lt;/a>。&lt;/p>
&lt;p>我之前也好奇像 adblock 这种浏览器插件是如何屏蔽掉 Youtube 这类网站嵌入在网页或者视频播放器里的广告。&lt;/p>
&lt;p>起初我以为广告插件是简单粗暴地屏蔽掉了某些 DOM 元素，但事实比我想象的要复杂得多。&lt;/p>
&lt;p>在上面这篇文章里，作者讨论了视频网站嵌入广告的技术路线，以及反广告插件是如何通过技术手段使其失效的。&lt;/p>
&lt;p>其基本原理如下：&lt;/p>
&lt;p>1、视频网站会在前端请求一个 API，获取面向当前所播放视频相关的广告信息，这些信息是通过 JSON 格式进行传递的，广告信息就在其中某个数组里。&lt;/p>
&lt;p>2、广告屏蔽插件会重写覆盖 JS 引擎的 JSON.parse 函数，使得视频网站前端代码在执行解析之后，获得一个空的广告信息数组。（想出这个点子的人真是个天才）。&lt;/p>
&lt;p>不过就像军备竞赛一样，双方都在非常认真地升级，近期 Youtube 实在忍无可忍，通过“先发送虚假请求并判断信息是否被篡改”的方式，主动识别出安装了这类插件的浏览器，并弹出窗口严词要求用户关掉该插件。&lt;/p>
&lt;p>插件开发者又要开启了一轮技术升级了。&lt;/p>
&lt;h3 id="全栈工程师升级到了产品工程师">“全栈工程师”升级到了“产品工程师”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-56-08.png"
width="751"
height="414"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://engineercodex.substack.com/p/the-1-trait-of-the-most-valuable" target="_blank" rel="noopener"
>《顶级工程师最有价值的特质》&lt;/a>讨论了一个逐渐被认识的的事实：&lt;em>最好的工程师不仅在技术上非常敏锐，而且能够以技术推动他们的产品向前发展&lt;/em>。&lt;/p>
&lt;p>虽然面向产品和面向代码并非矛盾，并且有时候是相辅相成的。&lt;/p>
&lt;p>但毫无疑问有产品思维的工程师要比有技术的工程师稀缺的多。&lt;/p>
&lt;h3 id="神奇的光影包-mod">神奇的光影包 MOD
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-56-21.png"
width="690"
height="392"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="422px"
>&lt;/p>
&lt;p>第一次在《我的世界》中加载光影 MOD 时，那种神奇的渲染效果震惊了我。&lt;/p>
&lt;p>怀着强烈的好奇心研究了一下，发现并收藏了这篇&lt;a class="link" href="http://blog.hakugyokurou.net/?p=1364" target="_blank" rel="noopener"
>《如何编写Shadersmod光影包》&lt;/a>。&lt;/p>
&lt;p>作者在呕心沥血制作光影包的同时还抽了半年时间完善这套教程实在是令人敬佩。&lt;/p>
&lt;p>基本原理：
1、通过 MOD 使的我的世界具备加载定制着色器（Shader，即在 GPU 中执行的程序）的能力。&lt;/p>
&lt;p>2、定制化着色器驱动渲染管线复杂的光影计算，改变了最终的显示渲染效果。&lt;/p>
&lt;blockquote>
&lt;p>回想一下当你第一次见到Minecraft光影包时的感觉,是不是就像黑魔法一样?为何MC原版那么简陋的画面只要安装上一个Mod就能拥有一个主流游戏的画质?它是怎么绘制阴影和反射的?&lt;/p>
&lt;p>一切都要归功于着色器(Shader),着色器就是决定内存或显存中的顶点数据和纹理是如何在GPU上正确(或错误)地变形、组装、光栅化成像素并进行着色然后绘制到屏幕上的黑魔法,遥想在过去消费级显卡尚未出现的年代,编写软件渲染器是每一个3D游戏程序员都必须掌握的事情,在主频只有数百MHz的CPU上以定点数学编写渲染器虽然不是愉快的事情,但至少那时的程序员对每一个像素都有绝对的控制权.&lt;/p>
&lt;p>而当显卡普及时硬件几乎完全接管了渲染的处理,只留给了程序员一套API,在一些老的图形学或游戏制作相关的书籍中你经常能看到&amp;quot;硬件T&amp;amp;L&amp;quot;这个名词,它指的就是由硬件实现的顶点变换和光照,也就是所谓的固定管线渲染.&lt;/p>
&lt;p>硬件加速的渲染固然高效,但却让程序员失去了对像素的控制权,开发者只能通过图形API提供的最简单的操作,通过搭积木似的拼凑出想要的效果,你还记得在OpenGL1.0规范中甚至不包括纹理吗?&lt;/p>
&lt;p>随着时间的推移,可编程电路逐渐取代了单一功能的电路,在原本由CPU一家独大的主板上,另一股不容忽视的计算力已经悄然崛起,显卡已经从只能执行简单任务的劳工变成了可以处理灵活任务的工程师了,但毕竟各家显卡的编程规范不同,程序员如果想编写一个能在大多数主流显卡(要知道那时候的显卡商是百花齐放)上运行的着色程序得学习数款显卡驱动和它们的汇编语言(高级语言?抱歉,没有),毕竟不是每一个图形学程序员都能像约翰卡马克那样一天适配一款显卡,业界需要一个统一的标准&lt;/p>
&lt;p>这时作为后起之秀的DirectX却抛下了自诩为业界标准的OpenGL,独自扛起了可编程着色器的大旗,在2000年的DirectX8.0中提供了统一的汇编语言用于编写着色器,而在这一关键时期OpenGL规范的众谋特性却让它没能赶上时代步伐,OpenGL规范是由各家(不管是不是做显卡的)统一协定&lt;/p>
&lt;p>这种制度免不了会有各种扯皮,结果是直到2004年9月它才提供了一个可用的着色器语言 - GLSL(OpenGL着色语言),不过相比它的老冤家DirectX来说倒也不算太糟,毕竟DirectX当初提供的是汇编语言,而OpenGL提供的是一个C-like的高级语言,相比之下DirectX到了2004年11月才做出了同为高级语言的HLSL(高级着色语言).&lt;/p>
&lt;p>着色器语言用于编写一个着色器程序,经由驱动编译成显卡能执行的汇编语言后传入显卡,替代原本的固定管线,以此让开发者得以控制渲染的方式.&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="1886年的水果画册">1886年的水果画册
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-56-45.png"
width="690"
height="501"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.openculture.com/2019/06/the-us-government-commissioned-7500-watercolor-paintings.html" target="_blank" rel="noopener"
>水果画&lt;/a>，1886 年，美国政府委托制作了 7,500 幅水彩画，描绘了世界上所有已知的水果。这里提供了一些线索，可以找到并下载这些档案。&lt;/p>
&lt;h3 id="命令行下的-json-解析工具">命令行下的 JSON 解析工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-57-05.png"
width="502"
height="340"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/antonmedv/fx" target="_blank" rel="noopener"
>fx&lt;/a>。最近控制台下的交互体验也提升迅猛，fx 是一个进行 JSON 数据查看和处理的命令行工具。&lt;/p>
&lt;p>交互体验丝滑（甚至支持鼠标），适合控制台爱好者收藏使用。&lt;/p>
&lt;h3 id="把手机当作电脑的话筒">把手机当作电脑的话筒
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-57-17.png"
width="690"
height="366"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://wolicheng.com/womic/" target="_blank" rel="noopener"
>WO Mic&lt;/a> 用任意一部手机当作电脑的音频输入设备，可以通过蓝牙、Wifi、USB等方式进行连接。&lt;/p>
&lt;p>工作方式为，在电脑端启动一个虚拟音频服务，并监听来自手机 app 的连接。 ​​​ ​​​&lt;/p>
&lt;h3 id="vscode-的-activity-bar">VSCode 的 Activity Bar
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-57-43.png"
width="654"
height="360"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/p>
&lt;p>VSCode 终于支持调整 Activity Bar 的位置了，可以切换到顶部与文件页签对齐，这下给右侧的编辑区节省了一列的宽度。&lt;/p>
&lt;p>需要升级到最新 1.84 版本才有这个特性。&lt;/p>
&lt;h3 id="又一个-ai-编程助手插件">又一个 AI 编程助手插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-58-00.png"
width="690"
height="425"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tongyi.aliyun.com/lingma" target="_blank" rel="noopener"
>通义灵码&lt;/a>。阿里云出的 AI 编程助手插件，感觉速度还不错。&lt;/p>
&lt;p>支持 VSCode、JetBrains IDEs 等主流 IDE，支持 Java、Python、Go、JavaScript、TypeScript、C/C++ 等主流语言。&lt;/p>
&lt;h3 id="png-素材下载站">PNG 素材下载站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-58-11.png"
width="690"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="350px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pngpai.com/" target="_blank" rel="noopener"
>PNG派&lt;/a>。一个透明PNG素材下载网站，目前有10+万张，种类多样，免费下载。 ​​​​​​&lt;/p>
&lt;h3 id="在网页中实现书籍翻页效果">在网页中实现书籍翻页效果
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-58-21.png"
width="690"
height="456"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.turnjs.com/" target="_blank" rel="noopener"
>turnjs&lt;/a>。一个实现书籍翻页效果的轻量级（10K） js 库。&lt;/p>
&lt;h3 id="动画展示神经网络原理">动画展示神经网络原理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-58-49.png"
width="690"
height="393"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://animatedai.github.io" target="_blank" rel="noopener"
>animateai&lt;/a>。一个通过三维动画讲解 AI 神经网络原理的网站。&lt;/p>
&lt;p>以生动形象的动画展示了卷积神经网络里各项计算的执行过程。 ​​​&lt;/p>
&lt;h3 id="可以脱离浏览器-dom-的-canvas-api-实现">可以脱离浏览器 DOM 的 Canvas API 实现
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-59-16.png"
width="690"
height="497"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="333px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/joshmarinacci/node-pureimage" target="_blank" rel="noopener"
>PureImage&lt;/a>。&amp;ldquo;PureImage&amp;rdquo; 是 HTML Canvas 2D 绘图 API 的纯 JavaScript 实现，可以脱离浏览器完全在 NodeJS 端执行。&lt;/p>
&lt;p>支持调整图像大小、绘制文本、渲染徽章、转换为灰度图等操作。&lt;/p>
&lt;p>或者执行标准 Canvas 2D API 规范的其他操作。&lt;/p>
&lt;p>另外还提供额外的 API 用于将图像保存为 PNG 和 JPEG 格式。&lt;/p>
&lt;h3 id="软件架构设计的工具">软件架构设计的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-59-28.png"
width="690"
height="507"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>在进行软件架构设计的时候，&lt;a class="link" href="https://c4model.com" target="_blank" rel="noopener"
>“C4 模型”&lt;/a>可以很好地辅助表达一系列的分层图表，它按照上下文（Context）、容器（Container）、组件（Component）和代码（Code）四个维度对软件架构的层级做了定义。&lt;/p>
&lt;p>之前一直是徒手画框，看到 PlantUML 已经内置了 C4 元素，使用简单的 DSL 就可以完成架构图的绘制，实在是太方便了！C4 还内置了一些主题，也可以通过 PlantUML 提供的语法对界面样式进行自定义，不过，一般也不用特别追求好看，内置的主题基本就够用了。&lt;/p>
&lt;p>另外，VSCode 上的插件名就是 &lt;a class="link" href="h&amp;#43;&amp;#43;ps://github.com/plantuml-stdlib/C4-PlantUML" >PlantUML&lt;/a>，它提供了一个包含大量示例的参考仓库。&lt;/p>
&lt;p>来自微博&lt;a class="link" href="https://weibo.com/1812166904/NqnBpnpvx" target="_blank" rel="noopener"
>@Barret李靖&lt;/a>&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="应当多做提升内心秩序的事情">应当多做提升内心秩序的事情
&lt;/h3>&lt;p>内心秩序的建立十分重要。&lt;/p>
&lt;p>应该定期通过一些活动来重新整理自己内心的秩序。&lt;/p>
&lt;p>每当我整理完电脑文件夹，个人知识库，或者是房间、办公桌之后，我都会进入到一种欣喜舒畅的状态。&lt;/p>
&lt;p>整个人都清爽了，各项效率都得到提升，甚至有种踌躇满志的感觉。&lt;/p>
&lt;p>每个人都应该找到能让自己提升内心秩序的事情。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 056 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-58-23.png" alt="Featured image of post 机器文摘 第 056 期" />&lt;h1 id="机器文摘-第-056-期">机器文摘 第 056 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="每个开发者都应该了解的-gpu-计算">每个开发者都应该了解的 GPU 计算
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-56-48.png"
width="690"
height="400"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://codeconfessions.substack.com/p/gpu-computing" target="_blank" rel="noopener"
>《每个开发者都应该了解的 GPU 计算》&lt;/a>。&lt;/p>
&lt;p>大多数程序员对 CPU 和顺序编程都有深入的了解，因为他们入门就面向 CPU 编写代码。&lt;/p>
&lt;p>但是在过去的十年中，GPU 因其在深度学习中的普遍使用而变得非常重要。&lt;/p>
&lt;p>这篇文章可以让不熟悉 GPU 编程以及其内部工作原理的开发者对 GPU 的工作方式有一个基本的了解。&lt;/p>
&lt;p>文章主要内容：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>对比 CPU 和 GPU 的主要区别，前者顺序执行指令，后者并行执行指令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GPU 以流处理器（SM）为核心的计算架构和显存架构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GPU 的程序执行模型以及怎样编写此类程序；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="年轻人的第一间硬件实验室">年轻人的第一间硬件实验室
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-57-03.png"
width="464"
height="812"
loading="lazy"
class="gallery-image"
data-flex-grow="57"
data-flex-basis="137px"
>&lt;/p>
&lt;p>动手能力比较富余的朋友，往往在业余时间喜欢捣鼓一些 DIY 制作，或者拆解一些电子设备，窥探现代科技的魅力。&lt;/p>
&lt;p>对于初入门者来说，除了经典的螺丝刀、万用表、电烙铁这几大件之外，如何在家里构建一套比较全面的 DIY 设备往往是个头疼的问题。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://voidstarsec.com/hw-hacking-lab/vss-lab-guide" target="_blank" rel="noopener"
>《手把手教你打造黑客硬件实验室》&lt;/a>介绍的比较详尽，从工作台到各种设备设施（稳压电源、热风焊台、示波器、显微镜、逻辑分析仪等），十分齐全，为每种设备都提出了高配和低配的解决方案。&lt;/p>
&lt;p>并且都给出了详细的参数和介绍。&lt;/p>
&lt;p>我看了一下，如果全配下来还是比较发烧的，差不多够开个小作坊了。&lt;/p>
&lt;h3 id="windows-远程桌面的一些技巧">Windows 远程桌面的一些技巧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-57-21.png"
width="418"
height="258"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="388px"
>&lt;/p>
&lt;p>Windows 系统的 RDP 远程桌面技术非常强大，是一些开发者和运维人员必备的工具。&lt;/p>
&lt;p>尤其是如果你在租用云服务虚拟机的时候，选择了 Windows 作为操作系统，那么使用 RDP 作为远程管理工具是最方便的了。&lt;/p>
&lt;p>然而，RDP 的技术细节非常多，包括很多未公开的参数等等，我推测现在就连微软也很难找到一个人能把它的各项开关说清。&lt;/p>
&lt;p>比如我近期发现了这样一篇文章，解决了我在使用远程桌面时困扰了很久的问题。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/bangejingting/p/6846480.html" target="_blank" rel="noopener"
>《如何关闭远程桌面后仍处于可交互状态》&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>UI 自动化测试期间，执行测试的电脑几乎不能继续被他人使用（因为鼠标、键盘等输入设备此时需要响应自动化测试脚本）。为了不影响电脑使用，一般会搭一个虚拟机，然后远程连接到虚拟机里，在虚拟机里执行 UI 自动化测试。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>但是，万一你不小心把某个远程桌面“最小化”了&amp;hellip;Oops，你的自动化测试就挂了。既然连最小化都会失败，相信你已经猜到直接关闭远程桌面的后果了。&lt;/p>
&lt;/blockquote>
&lt;p>为什么最小化或关闭远程连接的桌面会导致自动化测试失败呢？&lt;/p>
&lt;p>查看这篇文章可以尝试寻找答案。&lt;/p>
&lt;h3 id="关于编写技术文档的一些解释">关于编写技术文档的一些解释
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-57-53.png"
width="690"
height="187"
loading="lazy"
class="gallery-image"
data-flex-grow="368"
data-flex-basis="885px"
>&lt;/p>
&lt;p>这里有个系列文章介绍了&lt;a class="link" href="https://documentation.divio.com/introduction.html" target="_blank" rel="noopener"
>“教程”、“指南”、“参考手册”、“详解”等技术文档之间的差别&lt;/a>，以及如何更有效地编写各类技术文档。&lt;/p>
&lt;p>比如“教程”要侧重于面向初学者，目标是要让读者可以开启体验。&lt;/p>
&lt;p>“指南”则重点要向读者讲清楚，怎样一步一步解决某个特定问题。 ​​​&lt;/p>
&lt;h3 id="base64-是如何编码解码的">Base64 是如何编码解码的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-58-08.png"
width="570"
height="417"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.writesoftwarewell.com/base64-encoding-explained/" target="_blank" rel="noopener"
>Base64 编码详解&lt;/a>。&lt;/p>
&lt;p>Base64 是将二进制数据转换为文本的优雅方法，使其易于存储和运输。本文涵盖了Base64 编码的基础知识，包括它的含义，其工作原理以及为什么重要。&lt;/p>
&lt;p>作者还举例说明了如何用各种编程语言实现对数据的 Base64 编码和解码。 ​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="体素编辑器">体素编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-58-23.png"
width="681"
height="397"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/348563616" target="_blank" rel="noopener"
>什么是体素见这里&lt;/a>。体素简单来说就是立体像素，是用一个个立方体来组成三维模型的方法。
&lt;a class="link" href="https://ephtracy.github.io/index.html?page=mv_main" target="_blank" rel="noopener"
>MagicaVoxel&lt;/a>。是一个超级轻量级基于 GPU 的体素编辑器和基于光线追踪的渲染器。&lt;/p>
&lt;h3 id="200-行代码写的聊天室">200 行代码写的聊天室
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-58-43.png"
width="620"
height="708"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;p>发明了 &lt;a class="link" href="https://redis.io" target="_blank" rel="noopener"
>Redis&lt;/a> 的作者 &lt;a class="link" href="http://antirez.com/" target="_blank" rel="noopener"
>antirez&lt;/a>，前一段时间说是代码写累了，改行去写科幻小说了。&lt;/p>
&lt;p>不过，现在又回来了，这两天新写了个&lt;a class="link" href="https://github.com/antirez/smallchat" target="_blank" rel="noopener"
>仅有 200 行 C 代码的在线聊天室系统&lt;/a>。&lt;/p>
&lt;p>据他所说，此代码是为了给大量的前端开发者，演示一下系统编程的大概套路。&lt;/p>
&lt;p>麻雀虽小五脏俱全，这个聊天室支持使用 telnet 登录，并且可以设置聊天账号的昵称。&lt;/p>
&lt;h3 id="vscode-的中英文混合排版补正插件">VSCode 的中英文混合排版补正插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-59-11.png"
width="627"
height="393"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=huacnlee.autocorrect" target="_blank" rel="noopener"
>AutoCorrect&lt;/a> 能自动帮你格式化中英文混排的文字，补充正确的空格。&lt;/p>
&lt;p>上周介绍 &lt;a class="link" href="https://github.com/Jinjiang/zhlint" target="_blank" rel="noopener"
>zhlint&lt;/a> 的时候我还说要是直接有个编辑器插件就好了，结果已经有人做出来了。&lt;/p>
&lt;h3 id="模拟复古游戏机显示效果的渲染引擎">模拟复古游戏机显示效果的渲染引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-59-35.png"
width="639"
height="485"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://btco.github.io/qx82/" target="_blank" rel="noopener"
>qx82&lt;/a>。一个 Javascript 编写的小型渲染引擎，可以模拟复古的上世纪 80 年代的计算机（家用游戏主机）的显示效果。如果想在网页制作复古小游戏的话，也许能用得上。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="社会和个体就像婆媳是一对天然的对手却又不得不建立亲密关系">社会和个体，就像婆媳，是一对天然的对手却又不得不建立亲密关系。
&lt;/h3>&lt;blockquote>
&lt;p>看到有人说，当你被现代心理学测出有心理疾病的时候，说明你正在偏移社会主体，你这颗工业螺丝在异变，想成为个体，简单的来说：你即将挣脱地球 ol 这个游戏中 NPC 的框架，正在成为有名字的游戏角色。&lt;/p>
&lt;/blockquote>
&lt;p>来自&lt;a class="link" href="https://weibo.com/7743682633/Np9LRgKkV" target="_blank" rel="noopener"
>@烟灰海2023&lt;/a>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 055 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-33-19.png" alt="Featured image of post 机器文摘 第 055 期" />&lt;h1 id="机器文摘-第-055-期">机器文摘 第 055 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="c-语言限制了现代计算机处理器的发展">C 语言限制了现代计算机处理器的发展？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-33-19.png"
width="633"
height="498"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="305px"
>&lt;/p>
&lt;p>在 HN 上读到一篇有些深度的文章：&lt;a class="link" href="https://queue.acm.org/detail.cfm?id=3212479" target="_blank" rel="noopener"
>C 不是一种低级语言&lt;/a>。&lt;/p>
&lt;p>需要了解一些背景知识才能读的进去，比如 C 语言诞生于上个世纪 70 年代古老的 PDP-11 计算机上。&lt;/p>
&lt;p>这篇文章的作者认为，C 在诞生之初确实是一个十分靠近硬件底层的“低级语言”（业界认为越靠近硬件底层的编程语言为“低级语言”，相反越接近人类则为“高级语言”）。&lt;/p>
&lt;p>因为最初的 C 语言确实准确反映了当时 PDP-11 计算机的硬件抽象：没有缓存、扁平的内存空间、串行（顺序）执行的指令等等。&lt;/p>
&lt;p>但是随着时间的推移，处理器逐渐性能提升，硬件复杂度也在倍增。&lt;/p>
&lt;p>但面对 C 语言仍旧不得不提供一个像 PDP-11 那样古老硬件的抽象接口，而新的硬件比如三级缓存、多核心等无法暴露给 C语言进行编程。&lt;/p>
&lt;p>处理器自己在底层默默做着指令分支预测、寄存器重命名（用于欺骗 C 语言的进程）等操作，消耗了大量的能量，限制了性能的发挥。&lt;/p>
&lt;p>作者在文末畅想了一种没有受 C 语言对硬件抽象限制的处理器，具有函数式编程架构、简化的寄存器缓存、天然的并行执行等等特性。&lt;/p>
&lt;p>但是最终作者也不得不感叹，由于现在绝大多数的软件都是构建在 C 语言之上的，所以上述畅想的处理器，想在商业上取得成功就很难了。&lt;/p>
&lt;p>人类技术的发展历史，也确实是不断在打补丁、打补丁、打补丁，想改底层，很难了吧。&lt;/p>
&lt;h3 id="typescript-的类型系统是图灵完备的">Typescript 的类型系统是图灵完备的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-33-38.png"
width="690"
height="531"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zackoverflow.dev/writing/flappy-bird-in-type-level-typescript" target="_blank" rel="noopener"
>基于 Typescript 的类型系统编写一个 flappy bird 游戏&lt;/a>。&lt;/p>
&lt;p>Typescript 的类型系统很强大，大家发现它甚至是&lt;a class="link" href="https://baike.baidu.com/item/%E5%9B%BE%E7%81%B5%E5%AE%8C%E5%A4%87/4634934" target="_blank" rel="noopener"
>图灵完备&lt;/a>的。&lt;/p>
&lt;p>于是喜欢折腾的人开始充分发挥想象力，使用 Typescript 的类型系统开发各式各样的程序。&lt;/p>
&lt;p>之前见过有人拿它写一个下棋 AI 的，这篇文章的作者，则是实现了一个完整的 2d 游戏。&lt;/p>
&lt;h3 id="什么是-csp-网页安全政策">什么是 CSP （网页安全政策）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-34-01.png"
width="638"
height="479"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>最近在使用 &lt;a class="link" href="https://pixijs.com/" target="_blank" rel="noopener"
>Pixi.js&lt;/a> 写一个 Demo 的时候，遇到一个问题：如果我把页面的安全选项设置的比较严格，则 Pixi.js 库无法正常运行（貌似 Pixi.js 库要求在页面脚本中执行 eval 的权限）。&lt;/p>
&lt;p>于是我认真研究了一下 “Content Security Policy” 这个东东（之前都是拷贝的模板放在 HTML 的头部）。&lt;/p>
&lt;p>&amp;ldquo;网页安全政策&amp;rdquo;（Content Security Policy，缩写 CSP），起初的设计是为了防止 &lt;a class="link" href="https://baike.baidu.com/item/XSS%E6%94%BB%E5%87%BB" target="_blank" rel="noopener"
>XSS&lt;/a> 跨站攻击的。&lt;/p>
&lt;p>也就是说，在服务端进行了相应的 CSP 声明之后，符合规范的浏览器就会仅加载执行经过许可的 Js 代码或其他资源。&lt;/p>
&lt;p>这使得跨站攻击变得几乎不可能了。&lt;/p>
&lt;p>但同时，过于严格的 CSP 声明也会导致你自己的脚本执行受到影响。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.ruanyifeng.com/blog/2016/09/csp.html" target="_blank" rel="noopener"
>《Content Security Policy 入门教程》&lt;/a>可以帮助你了解相关的知识。&lt;/p>
&lt;p>如果希望知道更多的细节，可以看一下&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener"
>这篇 MDN 专门介绍 CSP 的文档&lt;/a>。&lt;/p>
&lt;h3 id="想玩怀旧复古游戏除了用模拟器还有这个办法">想玩怀旧复古游戏除了用模拟器还有这个办法
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-34-15.png"
width="450"
height="550"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;p>玩复古游戏可以有多种方式，最常见的是在 PC 或者手机上使用软件模拟各种古老的游戏机平台，以及如果不差钱的话去搜罗各种古董硬件设备和卡带（这样的老爷机往往不舍得下手玩）。&lt;/p>
&lt;p>不过近些年也有人走上了另一条路线，那就是使用 FPGA 进行硬件级模拟。&lt;/p>
&lt;p>FPGA 的全称是现场可编程门阵列，通过直接对芯片中的模块和逻辑单元编程来模拟老游戏机硬件的运行方式。&lt;/p>
&lt;p>比起软件模拟，硬件级模拟具有高度还原（连原有硬件的 BUG 也还原）、无延迟等优势。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://eli.lipsitz.net/posts/fpga-gameboy-emulator/" target="_blank" rel="noopener"
>《使用 FPGA 做一个 GBA 模拟器》&lt;/a>记录了作者从头手工制作的过程。&lt;/p>
&lt;p>因为作者原本就是软件模拟器开发者，所以对于各项原理和特性讲解都比较清楚，愿意动手试一试的可以看一下。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="下载达芬奇的手稿">下载达芬奇的手稿
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-34-42.png"
width="690"
height="1071"
loading="lazy"
class="gallery-image"
data-flex-grow="64"
data-flex-basis="154px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.drawingsofleonardo.org" target="_blank" rel="noopener"
>达芬奇手稿&lt;/a>，这个网站收录了达芬奇所有的经典手稿，每张手稿都标注了主题和完成时间，可以直接点击打开大图，或直接下载。&lt;/p>
&lt;h3 id="设计模式-javascript-版">设计模式 Javascript 版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-34-56.png"
width="690"
height="515"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="321px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.carlosrojas.dev/quick-reference-guide-to-design-patterns-in-js-1ebeb1e1c605" target="_blank" rel="noopener"
>常用设计模式的 Javascript 实现&lt;/a>。以示意图的方式简单介绍了抽象工厂、单例、桥接等 21 种设计模式，并给出了使用 Javascript 语言的实现。 ​​​​​​&lt;/p>
&lt;h3 id="中文文本格式检查">中文文本格式检查
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-35-15.png"
width="477"
height="415"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="275px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Jinjiang/zhlint" target="_blank" rel="noopener"
>zhlint&lt;/a>，一个中文文本格式自动检查工具。可以像检查编程语法那样检查中文文本内容，给中文文本中的标点符号、英文字符等自动增加空格间距，以实现排版的美观。&lt;/p>
&lt;p>谁要是能把它做成 vscode 插件帮我自动格式化 md 文档就更好了。 ​​​&lt;/p>
&lt;h3 id="超轻量自动补全库">超轻量自动补全库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-35-40.png"
width="690"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/knadh/autocomp.js" target="_blank" rel="noopener"
>autocomp.js&lt;/a>。一个超级小型 JavaScript 自动补全库。零依赖，压缩后只有800个字节大小。 ​​​&lt;/p>
&lt;h3 id="又一个网页绘图板">又一个网页绘图板
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-35-59.png"
width="690"
height="344"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pictode.com/" target="_blank" rel="noopener"
>Pictode&lt;/a> 是一个基于 Vue 3、TypeScript、Konva、HeadlessUI 和 Tailwind CSS 等酷炫技术构建的画板项目，它让你可以随心所欲地绘制、创作和表达自己的创意。&lt;/p>
&lt;h3 id="一款开源的设计工具">一款开源的设计工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-36-26.png"
width="690"
height="366"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://penpot.app/" target="_blank" rel="noopener"
>penpot&lt;/a>，开源的 Figma 平替。&lt;/p>
&lt;p>是一个矢量图形编辑器和原型设计工具，主要基于网页进行工作。&lt;/p>
&lt;p>源代码在此：github.com/penpot/penpot&lt;/p>
&lt;p>可以直接在线使用他们官方提供的服务，也可以自己搭建私有服务。 ​​​​​​&lt;/p>
&lt;h3 id="用儿童编程工具-scratch-运行-linux-内核">用儿童编程工具 Scratch 运行 Linux 内核
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-36-44.png"
width="690"
height="778"
loading="lazy"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="212px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://scratch.mit.edu/projects/892602496/" target="_blank" rel="noopener"
>Linux 6.1.14-rv32ima On Scratch&lt;/a>，使用纯Scratch（常见的图形化搭积木式的少儿编程工具）运行Linux 6.1.14内核！原理是先在 Scratch 中运行一个 RISC-V（rv32ima）CPU 模拟器。&lt;/p>
&lt;p>我的感觉是：就像有人拿着鸡爪子也能写出好看的字，我拿着毛笔也写不好，拿着鸡爪子就更不行了。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="原来我早已不是我是我们">原来我早已不是我，是我们
&lt;/h3>&lt;blockquote>
&lt;p>【研究表明：#寄生虫或能向宿主借基因控制宿主思想#】铁线虫在水中生活和繁殖，但它们的幼虫只能寄生在其它动物体内，通常是陆生昆虫，比如螳螂。一旦幼虫在宿主体内生长成熟，它就必须说服宿主主动跳进水中淹死自己，使其回归水中生活，完成生命周期。那么这种寄生虫是如何说服宿主跳水的呢？长期以来，这个问题一直困扰着科学家。近日，日本科学家的一项新研究发现，铁线虫幼虫用来控制宿主的3100个基因中有1400多种是从宿主那里借来的，有反过来操控宿主跳入水中。但是这种基因如何转移仍然是一个谜，下一步科学家将深入研究以解开更多答案。&lt;/p>
&lt;/blockquote>
&lt;p>来自&lt;a class="link" href="https://weibo.com/1029527725/NoKg67mGw" target="_blank" rel="noopener"
>@机械科技&lt;/a>。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 054 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/</link><pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-05-58.png" alt="Featured image of post 机器文摘 第 054 期" />&lt;h1 id="机器文摘-第-054-期">机器文摘 第 054 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="前端技术栈为什么这么复杂">前端技术栈为什么这么复杂
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-05-25.png"
width="665"
height="345"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://matt-rickard.com/why-is-the-frontend-stack-so-complicated" target="_blank" rel="noopener"
>《前端技术栈为什么这么复杂？》&lt;/a>。想吐槽 Web 前端开发技术的可以看看这篇文章，能给你提供一些弹药。&lt;/p>
&lt;p>作者列举了引起前端生态如此混乱的多个槽点，喷的在点子上：&lt;/p>
&lt;p>1、缺少通用的包引用系统：ESM、CommonJS、AMD、UMD，一堆标准。&lt;/p>
&lt;p>2、转换层太多：TS 转 JS、ES6 转 ES5、原始转压缩、混淆，一系列步骤下来给定位问题带来困扰。&lt;/p>
&lt;p>3、运行环境多：除了要在浏览器端执行，还要考虑判断是否执行在 Node 端，一个库既要、又要、还要。&lt;/p>
&lt;p>4、过于依赖文件结构：前端工程往往会有一些对文件路径以及命名的潜规则，比如各种配置文件、路由信息等等。&lt;/p>
&lt;h3 id="intel-80386-cpu-解析">Intel 80386 CPU 解析
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-05-38.png"
width="690"
height="730"
loading="lazy"
class="gallery-image"
data-flex-grow="94"
data-flex-basis="226px"
>&lt;/p>
&lt;p>与很多人想象的不同（多数人认为 8088、8086 是 Intel 最具里程碑意义的处理器），实际上 1985 年发布的 Intel 386 处理器才是 x86 家族中最关键的一款处理器。&lt;/p>
&lt;p>386 在几个方面是现代计算的关键转折点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>386 将 x86 架构移至 32 位，定义了 20 世纪剩余时间的主要计算架构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>386 也确立了 x86 对整个计算机行业的趋势引领。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>386 结束了 IBM 对 PC 市场的垄断，使康柏这类兼容机成为架构领先者。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在这篇&lt;a class="link" href="http://www.righto.com/2023/10/intel-386-die-versions.html" target="_blank" rel="noopener"
>《Intel 386 硅芯片研究》&lt;/a>中，作者通过放大了的英特尔 386 芯片照片，探索了这款经典处理器所创下的历史。&lt;/p>
&lt;h3 id="老程序员的外设推荐">老程序员的外设推荐
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-05-58.png"
width="690"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://fabiensanglard.net/40/index.html" target="_blank" rel="noopener"
>一位 40 年编程经验的程序员编程设备推荐&lt;/a>。&lt;/p>
&lt;p>作者“年仅” 46岁，却已有 40 年的编程经验，据称其中至少有一半的时间是职业编程。&lt;/p>
&lt;p>作者随着技术的进步（和身体的老化）在不断升级自己的用着趁手的工具，在文中积极推荐了一波。 ​​​&lt;/p>
&lt;h3 id="wasm-图形操作入门">WASM 图形操作入门
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-06-15.png"
width="690"
height="611"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="271px"
>&lt;/p>
&lt;p>介绍过很多次 WASM 的技术，这次介绍一个比较容易上手的实验。&lt;/p>
&lt;p>&lt;a class="link" href="https://web.dev/articles/drawing-to-canvas-in-emscripten?hl=zh-cn" target="_blank" rel="noopener"
>使用 WASM 在网页上渲染 2D 图形&lt;/a>。也就是说在网页上绘图，不过不是通过 Javascript 操作 canvas 画布，而是使用 WASM 技术编译 C++ 代码，基于 OpenGL 或者 SDL 接口进行绘制。&lt;/p>
&lt;p>这样做的好处 1 是性能强一些，2 是可以轻松移植之前基于 SDL 编写的游戏或者图形程序到网页里。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="一个频谱动画库">一个频谱动画库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-06-32.png"
width="690"
height="216"
loading="lazy"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="766px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://audiomotion.dev/" target="_blank" rel="noopener"
>audioMotion-analyzer&lt;/a>。一个 Javascript 写的实时音频频谱分析与动画库。&lt;/p>
&lt;p>用于在网页制作音频频谱实时动画，性能优秀且自带多种风格样式。 ​​​&lt;/p>
&lt;h3 id="全能仪表盘">全能仪表盘
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-06-43.png"
width="690"
height="426"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://gethomepage.dev/v0.7.3/%e7%bd%91%e9%a1%b5%e9%93%be%e6%8e%a5" target="_blank" rel="noopener"
>Homepage&lt;/a>，不仅是一个现代的应用程序仪表盘，还是一个充分静态、快速、安全且高度可定制的工具，能够将超过100个服务集成到一个地方，界面支持多国语言。&lt;/p>
&lt;p>主要特性如下：&lt;/p>
&lt;p>全静态：不需要复杂的服务器设置或后端处理，具备出色的性能和可靠性。&lt;/p>
&lt;p>超过100个服务集成：支持超过100个不同的服务集成，包括各种云服务、开源工具和社交媒体平台。无论使用哪些服务，都可以在一个地方轻松地查看它们的状态和数据。&lt;/p>
&lt;h3 id="在一个地方管理你的全部文件">在一个地方管理你的全部文件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-06-55.png"
width="690"
height="422"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="392px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/spacedriveapp/spacedrive" target="_blank" rel="noopener"
>Spacedrive&lt;/a>&lt;/p>
&lt;p>Spacedrive 是一个基于虚拟分布式文件系统的文件资源管理器。&lt;/p>
&lt;p>可以在一个地方组织跨多个设备的文件。包括云服务和离线硬盘，Spacedrive 可以将这些文件资源合并为一个个人的分布式云，既安全又易于使用。&lt;/p>
&lt;p>注意：项目目前还在开发中，功能特性还未稳定。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="docker-的意义">Docker 的意义
&lt;/h3>&lt;blockquote>
&lt;p>一个服务运行起来依赖许多假设：当前目录，安装了了哪些软件，系统上存在了哪些文件。这些都很难用语言来描述清楚，而且假设通常也会被打破。这个时候如果有了 docker 的话，所有的假设都被物化下来，对于开发和运维都是好事。
来自 &lt;a class="link" href="https://weibo.com/2048838462/N7bBxpf2B" target="_blank" rel="noopener"
>@dirtysalt&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="鱼有灵魂吗">鱼有灵魂吗
&lt;/h3>&lt;blockquote>
&lt;p>鱼类要多久才能进化到知道渔线上吊着一块肉其实是一个陷阱？
可能已经进化出来了。
答主【瞻云】解释，作为具有高级中枢的鱼类，是能够在长期被钓的过程中，产生复杂条件反射，从而对食物、鱼钩、鱼线、人影、鱼竿等陷阱特征，产生高度的警觉。
他认为鱼类是可能具有浅层意识的，是能意识到危险和陷阱的。但可能会类似于我们半梦半醒状态。
当然，如果我们依据保守的观点，还是认为，具有大脑皮层才能产生意识。
那么，如果提供合适的进化条件，它们可能还需要1~2亿年的时间，才能知道这是个陷阱～
来自 &lt;a class="link" href="https://weibo.com/1904769205/NnZa39XD0" target="_blank" rel="noopener"
>@知乎&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>人类可能也需要一到两亿年才能悟道更上一层吧，如果有机会的话。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>应以积累“套路”的思想来管理知识</title><link>https://sbabybird.github.io/p/%E5%BA%94%E4%BB%A5%E7%A7%AF%E7%B4%AF%E5%A5%97%E8%B7%AF%E7%9A%84%E6%80%9D%E6%83%B3%E6%9D%A5%E7%AE%A1%E7%90%86%E7%9F%A5%E8%AF%86/</link><pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BA%94%E4%BB%A5%E7%A7%AF%E7%B4%AF%E5%A5%97%E8%B7%AF%E7%9A%84%E6%80%9D%E6%83%B3%E6%9D%A5%E7%AE%A1%E7%90%86%E7%9F%A5%E8%AF%86/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%BA%94%E4%BB%A5%E7%A7%AF%E7%B4%AF%E5%A5%97%E8%B7%AF%E7%9A%84%E6%80%9D%E6%83%B3%E6%9D%A5%E7%AE%A1%E7%90%86%E7%9F%A5%E8%AF%86/2023-10-18-15-48-38.png" alt="Featured image of post 应以积累“套路”的思想来管理知识" />&lt;p>昨日想到，应以总结积累“套路”的思想来进行知识库的建设与管理。&lt;/p>
&lt;p>所谓“套路”即是人类利用某种技能解决某领域问题的最佳实践。&lt;/p>
&lt;p>比如下棋、打牌这些游戏，规则很容易学会，但想要下得赢，则必须要有套路、招数。&lt;/p>
&lt;p>电脑竞技游戏也是如此，比如拳皇、街霸，规则简单至极（击倒对方即获胜），但套路却很多，比如：择、立回、连段等等。&lt;/p>
&lt;p>编程领域更是如此，很多编程语言如果只是学习语法的话，很快就能掌握。但没有套路就什么事儿也办不了。&lt;/p>
&lt;p>于是才出现了各式各样将套路封装好的框架（Framework），比如 Java 的 Spring，Nodejs 的 Express，Python 的 Django 等等。&lt;/p>
&lt;p>所以在知识管理上，不必过于沉溺于追求“本质”、“原则”。多积累基础规则固然重要，但聪明人基于这些规则发明的套路也很关键。&lt;/p>
&lt;p>也就是说不用多囤积“大道理”，而是可以先从学习基于“大道理”所设计的一些动作套路，搞定一些应用再说。&lt;/p>
&lt;p>甚至某种程度上我们普通人更需要将套路作为第一层知识，先做到手中有剑。&lt;/p>
&lt;p>当然在熟练应用之后，也应追求“知其所以然”，方能做到施展时得心应手、“无招胜有招”。&lt;/p>
&lt;p>但是千万记住：无招是建立在对 N 种套路都烂熟于心的前提之上的。&lt;/p></description></item><item><title>机器文摘 第 053 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-36-14.png" alt="Featured image of post 机器文摘 第 053 期" />&lt;h1 id="机器文摘-第-053-期">机器文摘 第 053 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="手机和电脑的时间来源">手机和电脑的时间来源
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-35-56.png"
width="480"
height="270"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>现在使用手机和电脑基本默认开启了网络校时功能，只要能联网，就可以保证电脑的时钟是准的，误差很小。&lt;/p>
&lt;p>用于校时的网络服务是由网络校时服务器基于 NTP 提供的。&lt;/p>
&lt;p>那么 NTP 服务器的时间是跟谁对的？&lt;/p>
&lt;p>答案是 GPS（全球卫星定位系统）卫星 。&lt;/p>
&lt;p>那 GPS 跟谁对的时？&lt;/p>
&lt;p>&lt;a class="link" href="https://dotat.at/@/2023-05-26-whence-time.html" target="_blank" rel="noopener"
>你手机和电脑上的时间是从哪儿来的？&lt;/a>。这篇文章解答了这一系列问题并追溯到了最初的时间定义。&lt;/p>
&lt;h3 id="构建用于在线协作的数据结构">构建用于在线协作的数据结构
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-36-14.png"
width="690"
height="612"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/p>
&lt;p>CRDT 这个概念可能听过的人不多，但是如果思考过怎样进行网络协同工作的朋友，可能多少都接近过这个概念。&lt;/p>
&lt;p>CRDT 全称为：&lt;code>Conflict-free Replicated Data Type&lt;/code> 无冲突复制数据类型。&lt;/p>
&lt;p>目标是建立一种能够同时存储在不同计算设备上的数据结构，这种数据结构可以使得每个设备都能够自由地编辑状态，而且通过一定的技术约定，使得数据载体可以协商到一个大家都不冲突的状态。&lt;/p>
&lt;p>说的直白一点，就是大家能够同时在线编辑一份数据，但是不会产生编辑冲突，这是非常美好的一个愿望。&lt;/p>
&lt;p>&lt;a class="link" href="https://jakelazaroff.com/words/an-interactive-intro-to-crdts/" target="_blank" rel="noopener"
>CRDT(无冲突复制数据类型)入门&lt;/a>。这篇文章介绍了如何初步实现这种数据结构，并给出了交互式代码，如果你有关于制定协作程序数据结构相关需求，可以考虑深入阅读一下。&lt;/p>
&lt;h3 id="再介绍一下-unicode-技术">再介绍一下 Unicode 技术
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-37-35.png"
width="567"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="403px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tonsky.me/blog/unicode/" target="_blank" rel="noopener"
>每个开发人员都应该掌握的 Unicode 知识&lt;/a>。&lt;/p>
&lt;p>2023 年了，还没搞清楚 Unicode 的人，再给一次机会。&lt;/p>
&lt;p>比较喜欢这种讲技术先从历史讲起的方式。&lt;/p>
&lt;p>因为很多技术点的出现都有它的历史背景，了解了其背景，一些看似莫名其妙的规范要求也就合理了。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="练习-css-布局的小游戏">练习 CSS 布局的小游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-37-57.png"
width="690"
height="532"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://flexboxfroggy.com/" target="_blank" rel="noopener"
>flexboxfroggy&lt;/a>。&lt;/p>
&lt;p>一个通过网页交互游戏学习 CSS 布局的网站。&lt;/p>
&lt;p>通过编写合适的 CSS 代码让青蛙过河，以达到学习 flex 布局的目的。 ​​​&lt;/p>
&lt;h3 id="页面元素可视化选择">页面元素可视化选择
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-38-15.png"
width="690"
height="499"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://simonwep.github.io/selection/" target="_blank" rel="noopener"
>viselect&lt;/a>。&lt;/p>
&lt;p>一个页面元素可视化选择库。&lt;/p>
&lt;p>如果你需要用户能够以分组、个别选择，甚至多个分组的方式选择页面中的元素，这个库可以轻松提供这种功能。&lt;/p>
&lt;p>可以以原生方式使用，也可以与 React 或 Vue.js 集成一起使用。&lt;/p>
&lt;h3 id="html-反向转为-markdown">HTML 反向转为 Markdown
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-38-29.png"
width="690"
height="277"
loading="lazy"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="597px"
>&lt;/p>
&lt;p>&lt;a class="link" href="github.com/mixmark-io/turndown" >trundown&lt;/a>。&lt;/p>
&lt;p>找到一个好工具，HTML 代码转换为 Markdown 代码。&lt;/p>
&lt;p>近期我需要迁移一部分博客文章，导出的备份为 HTML 格式，找到了这个 JS 编写的工具库。可以转换 HTML 页面到 Markdown 格式。&lt;/p>
&lt;p>复杂一点的页面也能比较完美的转换，效果不错。 ​​​&lt;/p>
&lt;h3 id="数学公式图形化交互">数学公式图形化交互
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-38-47.png"
width="690"
height="315"
loading="lazy"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="525px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.math3d.org/derivatives" target="_blank" rel="noopener"
>math3d&lt;/a>。&lt;/p>
&lt;p>一个在线展示数学公式图形的工具，与以往的 2d 绘图工具不同，
math3d.org 是一个可以实时交互的三维场景，通过鼠标实时改变查看角度。&lt;/p>
&lt;p>还可以通过设置时间 &lt;code>T&lt;/code> 变量进行动画模拟。 ​​​&lt;/p>
&lt;h3 id="杀时间的小游戏">杀时间的小游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-39-20.png"
width="630"
height="500"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="302px"
>
&lt;a class="link" href="https://torcado.itch.io/windowkill" target="_blank" rel="noopener"
>windowkill&lt;/a>。&lt;/p>
&lt;p>一个 72 小时内做出来的杀时间小游戏。&lt;/p>
&lt;p>玩家通过不断发射子弹以击打怪物，子弹打在屏幕边缘可以使得游戏窗口越来越大。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;p>从物理学的角度观察，生命的本质就是抵抗无序、逆熵发展。&lt;/p>
&lt;p>有了这个视角，就理解了为什么人们最喜欢的一项运动&amp;mdash;&amp;mdash;抬杠。&lt;/p>
&lt;p>因为那是人们所遵循的、生命赋予的最基本源动力。&lt;/p>
&lt;p>不信你观察抬杠的人或者话题，本身都毫无意义，但是人们非要争论不休。&lt;/p>
&lt;blockquote>
&lt;p>你说一个人牛逼，他说，哪里哪里，自己差的很远。
你说一个人差的很远，他说，你算什么东西？老子天下第一。&lt;/p>
&lt;/blockquote>
&lt;p>总之就是要跟你逆着来。才舒服。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 052 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/</link><pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-03-59.png" alt="Featured image of post 机器文摘 第 052 期" />&lt;h1 id="机器文摘-第-052-期">机器文摘 第 052 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="手机端的文字编辑交互">手机端的文字编辑交互
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-02-43.png"
width="279"
height="596"
loading="lazy"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="112px"
>&lt;/p>
&lt;p>在手机等移动端延续桌面电脑的文字编辑习惯很可能是一条走歪的路。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://jenson.org/text/" target="_blank" rel="noopener"
>看不见的问题&lt;/a>由谷歌工程师编写，作者专注于研究在移动终端上进行文字编辑的课题。&lt;/p>
&lt;p>简单来说，无论是安卓还是 iOS，都有一个共同的问题，那就是延续了桌面电脑的文本编辑约定，但是却又没有鼠标和菜单栏。&lt;/p>
&lt;p>作者在本文中列举了当前移动编辑的各种让人疑惑的交互设计，分析相当到位透彻。在文末作者给出了一个可能的改进方案，但是对于在移动端的改进推行却比较悲观。&lt;/p>
&lt;h3 id="怎样网页里实现拖拽操作">怎样网页里实现拖拽操作
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-03-05.png"
width="543"
height="416"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.redblobgames.com/making-of/draggable/" target="_blank" rel="noopener"
>网页元素的拖拽实现&lt;/a>。&lt;/p>
&lt;p>这篇文章深入讲解了实现网页元素拖动交互的底层原理和标准模式。&lt;/p>
&lt;p>作者从头记录了他所编写的代码从简陋模型到支持各种异常事件的完美模型进化的全过程。&lt;/p>
&lt;p>文章的最后，作者甚至还封装了一个 ​​​VUE 组件来总结成果，很有实战参考价值。&lt;/p>
&lt;h3 id="不同的数据库怎样执行查询语言">不同的数据库怎样执行查询语言
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-03-15.png"
width="690"
height="374"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://notes.eatonphil.com/2023-09-21-how-do-databases-execute-expressions.html" target="_blank" rel="noopener"
>数据库是怎样执行查询语句的&lt;/a>。&lt;/p>
&lt;p>这篇文章的作者花时间研究了一些常见开源数据库的源码，并分析判断了这些数据库在执行语句时所采用的不同方法。&lt;/p>
&lt;p>一般来说，数据库对于查询语句的执行，与我们所使用的各种编程语言在底层机制上并无太大差别。&lt;/p>
&lt;p>比较常见的方法也是包括：抽象语法树遍历（解释执行）、构建中间层虚拟机（基于堆栈或寄存器）、编译为本地指令（JIT）等。&lt;/p>
&lt;h3 id="游戏中的物理模拟是怎样实现的">游戏中的物理模拟是怎样实现的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-03-40.png"
width="573"
height="249"
loading="lazy"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="552px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.ibm.com/tutorials/wa-build2dphysicsengine/" target="_blank" rel="noopener"
>给你的 Js 游戏写一个物理引擎&lt;/a>。&lt;/p>
&lt;p>这篇教程，介绍了怎样给 Js 编写的网页游戏提供物理模拟相关的支持。&lt;/p>
&lt;p>包括游戏场景和角色重力加速度模拟、碰撞模拟等等。&lt;/p>
&lt;p>教程虽然发表于十多年前，但是真正的技术历久弥新，其原理并未过时，基本框架和核心思想是不变的。&lt;/p>
&lt;p>文章深入浅出，逻辑清晰，适合一边阅读一遍动手实践。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="又一个新写的桌面操作系统">又一个新写的桌面操作系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-03-59.png"
width="690"
height="391"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://gitlab.com/nakst/essence" target="_blank" rel="noopener"
>nakst&lt;/a>，一个从零打造的桌面操作系统。目前仅支持 SVGA 显卡接口，有自己的文件系统，同时支持对 FAT、NTFS 等文件系统的只读。实现了基本的文件管理、进程管理等功能，移植有 GCC 编译器。&lt;/p>
&lt;h3 id="现代汇编语言教程">现代汇编语言教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-06-00.png"
width="566"
height="661"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="205px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.egr.unlv.edu/~ed/assembly64.pdf" target="_blank" rel="noopener"
>assembly64&lt;/a> 在现代处理器和操作系统上学习 x86-64 汇编语言。&lt;/p>
&lt;h3 id="给命令行程序增加漂亮的-ui">给命令行程序增加漂亮的 “UI”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-06-15.png"
width="662"
height="575"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/natemoo-re/clack" target="_blank" rel="noopener"
>clack&lt;/a>&lt;/p>
&lt;p>clack 是一个命令行交互库，可以让你方便地构建带有美观、高级交互的命令行程序。 ​​​&lt;/p>
&lt;h3 id="基于-wasm-技术的游戏编辑器">基于 WASM 技术的游戏编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-06-28.png"
width="690"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://raverie-us.github.io/raverie-engine/" target="_blank" rel="noopener"
>raverie-engine&lt;/a>&lt;/p>
&lt;p>一个在网页中运行的游戏引擎，使用 WASM 技术实现了纯页面加载的全功能游戏编辑器。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="先问是不是再问为什么">先问是不是，再问为什么
&lt;/h3>&lt;p>人的大脑特别喜欢「逻辑自洽」的感觉，如果我们太快的进入逻辑，进入因果关系的分析当中，会很容易「忽略那些与逻辑不符的事实」，而这对于做出正确决策来说是致命的。&lt;/p>
&lt;p>&amp;mdash;-来自&lt;a class="link" href="https://weibo.com/3978383590/Nl53Y6nrF" target="_blank" rel="noopener"
>@Murph丶璇&lt;/a>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 051 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/</link><pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-36-20.png" alt="Featured image of post 机器文摘 第 051 期" />&lt;h1 id="机器文摘-第-051-期">机器文摘 第 051 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="基于-github-pages-服务搭建个人博客">基于 Github Pages 服务搭建个人博客
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-34-26.png"
width="1600"
height="672"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="571px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener"
>基于 Github Pages 服务搭建个人博客 &lt;/a>
这是我自己写的一篇文章，发布在&lt;a class="link" href="https://sbabybird.github.io" target="_blank" rel="noopener"
>我的博客&lt;/a>。&lt;/p>
&lt;p>搭建独立博客网站的方法多种多样，常见的方法包括租用服务器自行架设，或者选择托管服务商提供的博客发布服务。&lt;/p>
&lt;p>但是上述两种方式都会产生一定的费用，对于非盈利网站而言，不太友好。&lt;/p>
&lt;p>经过多年的实践，现在已有越来越多的人选择了使用免费且易用的 GitHub Pages 服务来搭建个人博客。&lt;/p>
&lt;p>然而，现有的使用教程大多侧重于操作步骤，对于新手或非专业人士而言，难以真正理解其中原理。&lt;/p>
&lt;p>他们可能看到别人的博客既漂亮又实用，却在自己尝试搭建时屡屡遇到挫折，逐渐失去信心。&lt;/p>
&lt;p>这无疑会打击那些希望通过博客持续创作文字、并且希望能够免费建立个性化站点的人的积极性。&lt;/p>
&lt;p>本文将介绍如何使用 GitHub Pages 服务搭建免费的个人博客网站，及其背后的实现原理，以帮助初学者顺利建立自己理想的博客站点。&lt;/p>
&lt;h3 id="人的大脑不是由爬行脑哺乳动物脑智人脑累加而成">人的大脑不是由爬行脑、哺乳动物脑、智人脑累加而成
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-35-36.png"
width="690"
height="588"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;p>心理学界有一个关于人类大脑流传很广的理论：人的大脑主要由三层不同能力的大脑构成，位于最核心的“爬行动物脑”、随着演化逐渐增加的“低级哺乳动物脑”，以及带来更多灵活性和语言能力的“高级脑”。&lt;/p>
&lt;p>这种理论给人的感觉就好像人的大脑是像洋葱那样，由一个“旧”的大脑结构逐渐添加“新”大脑形成。&lt;/p>
&lt;p>而且换句话说，青蛙和鱼仍然在我们身体里，我们只是有了更高级的东西把它们包裹了起来。&lt;/p>
&lt;p>然而以上理论只是心理学家所提出的一种错误观点，近年来随着生物科学的发展，越来越多的科学家开始指出这种错误。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://journals.sagepub.com/doi/10.1177/0963721420917687" target="_blank" rel="noopener"
>《你的大脑不是洋葱，你的脑子里并没有一个爬行动物》&lt;/a>是由神经科学家撰写，重点澄清了上述关于“三层大脑”的传言。&lt;/p>
&lt;p>文章指出：之所以这种理论流传甚广，是因为大家普遍对“进化论”的进化过程有所误解，大多数人认为进化过程是一种先低级再逐渐高级的线性过程。然而事实的进化是一种同步辐射进程。&lt;/p>
&lt;h3 id="使用-javascript-操作照片的-exif-信息">使用 Javascript 操作照片的 EXIF 信息
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-35-59.png"
width="690"
height="444"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://getaround.tech/exif-data-manipulation-javascript/" target="_blank" rel="noopener"
>使用 Javascript 操作照片的 EXIF 信息&lt;/a>
可交换图像文件格式（EXIF）是一种规范，用于指定图像和声音的格式。它通过元数据存储技术细节，所谓元数据即用来描述其他数据的数据，例如相机制造商和型号、图像拍摄日期和时间等信息。&lt;/p>
&lt;p>最初，EXIF仅用于JPEG和TIFF两种图像格式。然而，如今，其他文件格式如PNG、WEBP或HEIC也支持EXIF以用于元数据。&lt;/p>
&lt;p>本文将重点关注JPEG格式，探究其内部结构，然后展示如何在浏览器环境中通过JavaScript读取和更新相关的元数据。&lt;/p>
&lt;h3 id="css-的自定义缓动曲线">CSS 的自定义缓动曲线
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-36-20.png"
width="690"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="415px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.smashingmagazine.com/2023/09/path-css-easing-linear-function/" target="_blank" rel="noopener"
>使用 linear（） 函数实现惊人的 CSS 缓动动画&lt;/a>，随着新的 CSS linear() 缓动功能的出现，我们可以创建自然感觉的动画和过渡的可能性大大扩展。Jhey Tompkins 在本文中介绍了 CSS 缓动的当前状态，并演示了 linear() 函数令人期待的特性。 ​​​&lt;/p>
&lt;h3 id="通过放大-rom-芯片搞破解">通过放大 ROM 芯片搞破解
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-36-35.png"
width="690"
height="571"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="290px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/travisgoodspeed/gbrom-tutorial" target="_blank" rel="noopener"
>gbrom&lt;/a>，通过拍摄 ROM 芯片的显微照片，将里面固件的二进制代码还原了出来，硬破解的世界就是这么朴实无华。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="免费开发云服务大全">免费开发云服务大全
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-36-56.png"
width="690"
height="737"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="224px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://free-for.dev/#/" target="_blank" rel="noopener"
>free-for.dev&lt;/a>。这个网站筛选收录了大量面向开发者提供的在线服务。收录的标准非常严苛：必须真正免费（免费试用的不算），如果套餐有时间限制，则至少提供 1 年的免费时间。收录的服务涵盖：云基础设施、内容托管、设计资源、字体、在线 IDE 、产品监控等。&lt;/p>
&lt;h3 id="在线提示词工厂">在线提示词工厂
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-37-13.png"
width="690"
height="403"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://promptperfect.jinaai.cn/a/NEW" target="_blank" rel="noopener"
>promptperfect&lt;/a>，来自 JinaAI 的 PromptPerfect。能自动生成提示词。让用户可以逐步调试提示词，提供了各种参数。我试着让它帮我编写 AI 作画的提示语，感觉比我自己写的要靠谱一些。&lt;/p>
&lt;h3 id="更新的光线追踪教程">更新的光线追踪教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-37-26.png"
width="670"
height="553"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="290px"
>
&lt;a class="link" href="raytracing.github.io" >《花一个周末学会光线追踪》&lt;/a>，Ray Tracing in One Weekend，这本在线电子书出新版了。真正从零开始手把手教你通过光线追踪进行三维场景渲染。 ​​​事实上整个系列一共包括三部曲，继续阅读《光线追踪：下一周篇》，将添加纹理、体积（如雾）、矩形、实例、光源，并支持使用包围体积层次结构（BVH）来处理大量对象。最后，在《光线追踪：往后余生篇》中，将深入探讨创建一个非常严谨的光线追踪器所涉及的数学。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="专注是良药">专注是良药
&lt;/h3>&lt;p>不用过多考虑某些时间的投入是否值得，而陷入对时间流逝的焦虑。&lt;/p>
&lt;p>如果做一件事情能够使得一个人在一段时间内保持专注，就是非常值得做的事情。&lt;/p>
&lt;p>因为，“专注”本身就是收获成果的一部分。&lt;/p>
&lt;p>能够在快节奏的生活中，找到不容易被分散注意力、不被各种诱惑干扰、可以集中精力投入的事情，已属难得。&lt;/p>
&lt;p>“专注”做事看似简单，却是解决各种精神内耗的良药。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>基于 Github Pages 服务搭建个人博客</title><link>https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2023-09-21-16-10-50.png" alt="Featured image of post 基于 Github Pages 服务搭建个人博客" />&lt;h2 id="背景">背景
&lt;/h2>&lt;p>搭建独立博客网站的方法多种多样，常见的方法包括租用服务器自行架设，或者选择托管服务商提供的博客发布服务。&lt;/p>
&lt;p>但是上述两种方式都会产生一定的费用，对于非盈利网站而言，不太友好。&lt;/p>
&lt;p>经过多年的实践，现在已有越来越多的人选择了使用免费且易用的&lt;a class="link" href="https://docs.github.com/zh/pages/getting-started-with-github-pages/about-github-pages" target="_blank" rel="noopener"
> GitHub Pages &lt;/a>服务来搭建个人博客。&lt;/p>
&lt;p>然而，现有的使用教程大多侧重于操作步骤，对于新手或非专业人士而言，难以真正理解其中原理。&lt;/p>
&lt;p>他们可能看到别人的博客既漂亮又实用，却在自己尝试搭建时屡屡遇到挫折，逐渐失去信心。&lt;/p>
&lt;p>这无疑会打击那些希望通过博客持续创作文字、并且希望能够免费建立个性化站点的人的积极性。&lt;/p>
&lt;p>本文将介绍如何使用 GitHub Pages 服务搭建免费的个人博客网站，及其背后的实现原理，以帮助初学者顺利建立自己理想的博客站点。&lt;/p>
&lt;h3 id="需要预先掌握的技能和前置条件">需要预先掌握的技能和前置条件
&lt;/h3>&lt;p>&lt;em>需要先了解这些再往下阅读本文&lt;/em>&lt;/p>
&lt;ul>
&lt;li>了解 Git 的概念和常用的操作，知道“分支”、“提交”、“推送”、“拉取”等概念。&lt;/li>
&lt;li>拥有 Github 账号，并且能够独立完成“仓库创建”、“本地克隆”、“提交”、“推送”等操作。&lt;/li>
&lt;li>了解“博客”本身只是一种“网站”：其内容由若干“网页”组成，读者通过浏览器访问博客网站所在的服务器以获取这些网页内容。&lt;/li>
&lt;/ul>
&lt;h2 id="核心思路">核心思路
&lt;/h2>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2023-09-21-16-20-10.png"
width="790"
height="258"
loading="lazy"
class="gallery-image"
data-flex-grow="306"
data-flex-basis="734px"
>
简单来说，核心步骤只有三步：内容编辑、页面生成、网站发布。接下来的介绍均围绕这三件事展开。&lt;/p>
&lt;h3 id="内容编辑">内容编辑
&lt;/h3>&lt;p>作者编写和编辑博客内容，包括编写文章、给文章配图、给文章归类等等活动都属于内容编辑。&lt;/p>
&lt;h3 id="页面生成">页面生成
&lt;/h3>&lt;p>如果希望将内容变成可发布的网站，则需要使用专用的软件工具（一般为&lt;a class="link" href="https://baike.baidu.com/item/%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/2776875" target="_blank" rel="noopener"
>静态网站&lt;/a>生成器）将编辑的内容自动生成可供浏览器显示的博客网站页面。&lt;/p>
&lt;h3 id="网站发布">网站发布
&lt;/h3>&lt;p>有了网站页面，还只是一堆存放在本地的文件。若要放到互联网上进行访问，还需要一个服务器提供服务，将网站发布。&lt;/p>
&lt;p>如果采用独立建站的方式，这一步骤会涉及大量技术工作，比如服务器采购、Web服务应用程序安装、域名映射、SSL 安全证书、网络防火墙配置等等。&lt;/p>
&lt;p>但我们今天选择使用 Github 提供的 Pages 服务，这将大大降低上述操作的难度，很多技术细节将不必再多关注，已经由 Pages 服务默认配置好。我们只需享用配置好的环境即可。&lt;/p>
&lt;h3 id="技术路线">技术路线
&lt;/h3>&lt;h4 id="github-pages">Github Pages
&lt;/h4>&lt;p>Github 本来是一个 Git 仓库托管服务商，帮助用户进行项目代码及数字资料的版本管理。不过随着用户规模提升，Github 也围绕版本管理提供了更多的辅助服务，这其中就包括 &lt;a class="link" href="https://docs.github.com/zh/pages/getting-started-with-github-pages/about-github-pages" target="_blank" rel="noopener"
>Pages 服务&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。 可以在 GitHub Pages 示例集合中看到 GitHub Pages 站点的示例。&lt;/p>
&lt;/blockquote>
&lt;p>Pages 服务原本用于帮助托管在 Github 上的开源项目更便捷地发布自己的宣传页面。开发团队可以简单编写几个静态页面（HTML）然后放在托管的 Git 仓库中，由 Github 将这些页面以网站服务的方式发布出去，Github 既提供了服务器资源也提供了用于公网访问的&lt;strong>专属 URL&lt;/strong> 地址。&lt;/p>
&lt;p>关于发布网站的&lt;strong>专属 URL&lt;/strong> 地址的提供规则，Github 官方的介绍如下：&lt;/p>
&lt;blockquote>
&lt;p>若要发布&lt;strong>用户站点&lt;/strong>，必须创建名为 &lt;code>&amp;lt;username&amp;gt;.github.io&lt;/code> 的个人帐户拥有的存储库。 若要发布&lt;strong>组织站点&lt;/strong>，必须创建名为 &lt;code>&amp;lt;organization&amp;gt;.github.io&lt;/code> 的组织帐户拥有的存储库。 除非使用的是自定义域，否则用户和组织站点在 &lt;code>http(s)://&amp;lt;username&amp;gt;.github.io&lt;/code> 或 &lt;code>http(s)://&amp;lt;organization&amp;gt;.github.io&lt;/code> 中可用。
&lt;strong>项目站点&lt;/strong>的源文件与其项目存储在同一个仓库中。 除非使用的是自定义域，否则项目站点在 &lt;code>http(s)://&amp;lt;username&amp;gt;.github.io/&amp;lt;repository&amp;gt;&lt;/code> 或 &lt;code>http(s)://&amp;lt;organization&amp;gt;.github.io/&amp;lt;repository&amp;gt;&lt;/code> 中可用。&lt;/p>
&lt;/blockquote>
&lt;p>根据官方介绍，Pages 提供有三种不同的网站发布服务：用户站点、组织站点、项目站点。&lt;/p>
&lt;p>分别对应了“制作个人网站”、“制作团队组织网站”、“制作单个项目网站”的不同需求。&lt;/p>
&lt;p>针对个人博客的搭建，很显然使用 Pages 服务发布“用户站点”是最合适的选择。&lt;/p>
&lt;p>对于“用户站点”，Pages 最终会为用户提供的专属 URL 地址为：&lt;code>https://你的用户名.github.io&lt;/code>，也就是说在 Gihtub 的一级域名 &lt;code>https://github.io&lt;/code> 下给你免费提供了一个二级域名。之所以默认使用你的 Github 用户名，是因为要防止不同用户发布的地址重名导致冲突。&lt;/p>
&lt;p>&lt;em>按照官方介绍，你也可以使用自己购买的域名，通过自己的域名进行访问。不过这涉及到更复杂的话题和操作，不在本文讨论范畴。&lt;/em>&lt;/p>
&lt;p>了解了以上基本信息后，在使用 Pages 服务时，可按照复杂度区分，采用如下几种不同的用法。&lt;/p>
&lt;h5 id="最简单直接的使用流程">最简单直接的使用流程
&lt;/h5>&lt;ol>
&lt;li>手工编写 HTML 页面文件（需要掌握网页制作知识）。&lt;/li>
&lt;li>将页面文件推送到的 Github 仓库，对于“用户站点”来说，这个仓库的命名必须为“&lt;code>你的用户名.github.io&lt;/code>”。&lt;/li>
&lt;li>在 Github 中设置该仓库的 Pages 服务配置，主要是选择仓库的指定“分支”用于 Pages 服务获取待发布的网页文件。&lt;/li>
&lt;li>Github 会按照上面介绍的规则给你提供一个 URL 访问地址（&lt;code>https://你的用户名.github.io&lt;/code>），使用浏览器打开该地址即可访问到发布的网站了。&lt;/li>
&lt;/ol>
&lt;p>&lt;em>注：如果不理解 Git 仓库的“分支”概念，可以把它视为同一个仓库里不同的存储位置，不同的“分支”里面存储了不同的文件内容。&lt;/em>&lt;/p>
&lt;p>这个流程仅适用于非常简单网站发布，比如只包含有一个页面，因为手工编写 HTML 页面的效率十分低下，且不利于持续更新维护。&lt;/p>
&lt;p>于是大家常用的方式是，使用一种叫做的东西，对于“博客”这类以静态页面为主的网站，十分适合。&lt;/p>
&lt;p>“静态站点生成器”可以理解为是一个“翻译”，它能自动将你编写的文本内容根据预先的配置信息，自动生成一个完整的网站所需的全部文件（HTML、JS、CSS等）。&lt;/p>
&lt;p>于是有了如下的改进流程：&lt;/p>
&lt;h5 id="改进的使用流程">改进的使用流程
&lt;/h5>&lt;ol>
&lt;li>用户编辑好博客内容，形成保存在本地计算机的原始文档文件。&lt;/li>
&lt;li>使用静态网站生成器将本地原始文档文件生成静态页面文件。&lt;/li>
&lt;li>将静态页面文件推送到 Github 远端托管仓库。&lt;/li>
&lt;li>Github Pages 服务自动被触发，将静态页面以网站形式发布出来。&lt;/li>
&lt;li>用户通过指定 URL 地址访问已发布的博客内容。&lt;/li>
&lt;/ol>
&lt;p>到目前为止，已经可以较为流畅地执行博客编辑、生成、发布的工作流程了。&lt;/p>
&lt;p>但是这个流程里有个前置条件，作者必须在本地电脑上安装一个“静态站点生成器”，以用于输出转换后的、可供发布的页面。&lt;/p>
&lt;p>所以，为了方便，Github 提供了一个默认的静态网站生成器，上述第 2 步操作实际上可以在远端仓库自动执行，这样用户只需将原始文件上传至远端仓库即可，由 Github 直接在线上完成静态页面的生成和网站发布工作。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2023-09-21-16-46-36.png"
width="937"
height="625"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;h5 id="静态站点生成器的选择">静态站点生成器的选择
&lt;/h5>&lt;p>比较常见的静态站点生成器有：&lt;a class="link" href="https://jekyllrb.com/" target="_blank" rel="noopener"
>Jekyll&lt;/a>、&lt;a class="link" href="https://hexo.io/index.html" target="_blank" rel="noopener"
>Hexo&lt;/a>、&lt;a class="link" href="https://gohugo.io/" target="_blank" rel="noopener"
>Hugo&lt;/a> 这三个。不在这里详细介绍了，因为功能都大同小异。在选定一个之后，需要去他们的官网查看文档以了解具体的使用细节，以便对自己的博客站点能够做到更深的定制。&lt;/p>
&lt;p>我在接下来的操作步骤里，选择使用 Hugo 这个生成器。&lt;/p>
&lt;p>主要原因是，Hugo 提供有相对来说比较美观的&lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>免费主题风格模板&lt;/a>（Jekyll 也有漂亮的，但是收费。Hexo 的定制性很强，适合有网页开发能力的人自己开发主题）。&lt;/p>
&lt;p>我选择的主题模板是：&lt;a class="link" href="https://themes.gohugo.io/themes/hugo-theme-stack/" target="_blank" rel="noopener"
>hugo-theme-stack&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2023-09-22-10-40-58.png"
width="900"
height="300"
loading="lazy"
class="gallery-image"
data-flex-grow="300"
data-flex-basis="720px"
>&lt;/p>
&lt;h2 id="操作步骤">操作步骤
&lt;/h2>&lt;h3 id="建立-github-仓库">建立 Github 仓库
&lt;/h3>&lt;ol>
&lt;li>点击这个超链接进入 &lt;a class="link" href="https://github.com/CaiJimmy/hugo-theme-stack-starter" target="_blank" rel="noopener"
>hugo-theme-stack-starter 的 Git 仓库模板&lt;/a>。&lt;/li>
&lt;li>点击页面中的“使用此模板”按钮，以创建你自己的仓库（注意：需先登录自己的账号才能创建）。
&lt;img src="https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2023-09-22-10-45-54.png"
width="925"
height="134"
loading="lazy"
class="gallery-image"
data-flex-grow="690"
data-flex-basis="1656px"
>&lt;/li>
&lt;li>建立好仓库（注意仓库命名为&lt;code>你的用户名.github.io&lt;/code>）之后，会自动带有仓库模板的初始文件。
&lt;img src="https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2023-09-22-10-47-57.png"
width="908"
height="528"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="412px"
>&lt;/li>
&lt;/ol>
&lt;h3 id="修改配置">修改配置
&lt;/h3>&lt;ol>
&lt;li>将仓库下载到本地。&lt;/li>
&lt;li>打开仓库里的 config 文件夹，里面存放有配置信息。&lt;/li>
&lt;li>按照 &lt;a class="link" href="https://stack.jimmycai.com/guide/getting-started" target="_blank" rel="noopener"
>hugo-theme-stack 的官方文档&lt;/a>配置自己想要的效果（默认一般都够用，重点是修改自己的站点信息，如显示名称、URL 链接地址等等）。
&lt;img src="https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2023-09-22-10-53-02.png"
width="1466"
height="682"
loading="lazy"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="515px"
>
&lt;em>这些配置主要在 &lt;code>config.toml&lt;/code> 和 &lt;code>params.toml&lt;/code> 两个文件里。&lt;/em>&lt;/li>
&lt;/ol>
&lt;h3 id="编写博客文章">编写博客文章
&lt;/h3>&lt;p>生成器会默认去仓库的 &lt;code>content/post/&lt;/code> 文件夹下扫描其下面的所有文件夹和文件，遇到约定格式的 &lt;code>Markdown&lt;/code> 文件就会转换成为可发布的 &lt;code>html&lt;/code> 页面。具体约定可以查看官方的详细文档，这里介绍一种最简单的写一篇文章的过程。&lt;/p>
&lt;ol>
&lt;li>在 post 目录下新建一个文件夹用于存放文章的 Markdown 文件和插图文件，文件夹命名为希望编写的标题如：&lt;code>2023-09-21-怎样搭建个人博客&lt;/code>。&lt;em>我个人习惯将不同年份的文章在post目录下再建一级目录按照日期或年份进行区分。&lt;/em>&lt;/li>
&lt;li>在刚建立的文件夹下新建名称为&lt;code>index.md&lt;/code>的 Markdown 文件，文件名必须为 index.md 这是由 hugo 生成器约定的。&lt;/li>
&lt;li>在刚建立的 Markdown 文件的头部添加必要的元信息（非常关键）。
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>---&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">文章标题&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">date&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2023-09-21&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">categories&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">文章所属分类&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tags&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">文章标签 1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">文章标签 2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>---&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;img src="https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2023-09-22-11-07-46.png"
width="787"
height="357"
loading="lazy"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="529px"
>&lt;/li>
&lt;li>编写文章内容。可以使用 &lt;a class="link" href="https://markdown.com.cn/basic-syntax/" target="_blank" rel="noopener"
>Markdown 的语法&lt;/a>随意定义格式，以及插入图片。插入的图片建议保存在同级目录（也就是刚才新建的那个）中。&lt;/li>
&lt;/ol>
&lt;h3 id="推送到仓库及发布">推送到仓库及发布
&lt;/h3>&lt;ol>
&lt;li>将刚才修改配置文件保存。&lt;/li>
&lt;li>将刚才编写的博客文章保存。&lt;/li>
&lt;li>在本地提交 commit 并 push 到 Github 仓库。&lt;/li>
&lt;li>稍等几分钟（给 Github 那端的 Hugo 生成器留出运行时间）。&lt;/li>
&lt;li>在 Github 仓库的 “setting” 设置页面开启 Pages 服务（只需第一次）。&lt;/li>
&lt;li>在 Pages 设置界面里的 Source 中选择 “Deploy from a branch” ，并在下面的分支选择下拉框中选择 “gh-pages”，保存。
&lt;img src="https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2023-09-22-11-17-49.png"
width="1090"
height="568"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="460px"
>&lt;/li>
&lt;/ol>
&lt;h3 id="访问你的博客站点">访问你的博客站点
&lt;/h3>&lt;p>一般稍等几分钟之后，即可按照约定网址访问刚发布的内容了。
&lt;img src="https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2023-09-22-11-31-26.png"
width="1539"
height="661"
loading="lazy"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="558px"
>&lt;/p>
&lt;h2 id="扩展阅读">扩展阅读
&lt;/h2>&lt;p>运营自己的博客网站所需了解的概念和知识相对比较多，如果希望将自己的网站做的更加精美、有特色。&lt;/p>
&lt;p>除了能够持续产出高质量内容之外，建议阅读以下文章以了解相关知识：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web" target="_blank" rel="noopener"
>学习 web 开发&lt;/a>。&lt;/li>
&lt;/ul></description></item><item><title>机器文摘 第 050 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-31-40.png" alt="Featured image of post 机器文摘 第 050 期" />&lt;h1 id="机器文摘-第-050-期">机器文摘 第 050 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="十八世纪的光学电报网络">十八世纪的光学电报网络
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-31-08.png"
width="500"
height="517"
loading="lazy"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="232px"
>&lt;/p>
&lt;p>当年读《基督山伯爵》的时候，有一个让我震惊的科技。&lt;/p>
&lt;p>主人公有一项复仇计划是破坏敌人的金融资产。计划采取的手段是收买了一个传递实时信息的人让其传递错误信息。&lt;/p>
&lt;p>而具体传递信息的手段是，每隔一段距离设一座瞭望塔，每个塔上有一个人，向一个方向用望远镜观看，远方的上级瞭望塔会有人发射信号弹，一连串的信号弹代表一定的信息，然后这个人再原样发射一遍，让后方的瞭望塔看见。信息就这样一级一级传递下去。&lt;/p>
&lt;p>信息经过编码，可以表达股票行情等信息，类似后来的电报系统，但是这是在十八世纪。&lt;/p>
&lt;p>读过之后我就一直有疑问，不知道小说是否虚构了这种信息传递技术，直到前几天我发现了这篇文章：&lt;a class="link" href="https://www.lowtechmagazine.com/2007/12/email-in-the-18.html" target="_blank" rel="noopener"
>《十八世纪的光学电报网络》&lt;/a>。&lt;/p>
&lt;p>里面详细介绍了在两百多年前人类就已经发明了“光学电报”系统，并建立起了巨大的信息网络。信息传递速度达到了惊人的 1380千米/每小时。&lt;/p>
&lt;h3 id="c-语言发展简史">C 语言发展简史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-31-23.png"
width="690"
height="352"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;/p>
&lt;p>要说 C 语言是计算机历史上最重要的编程语言应该不会有人反对吧。&lt;/p>
&lt;p>作为大多数人编程入门的母语，C 语言具有语法简洁、高性能（贴近计算机底层）、使用灵活、适用范围广泛等特点。&lt;/p>
&lt;p>虽然诞生于上个世纪 70 年代，但即便是在 2023 年的今天，C 语言仍然排在各大编程排行榜的考前位置，仍然是信息科技的重要支撑力量。&lt;/p>
&lt;p>&lt;a class="link" href="http://cm.bell-labs.co/who/dmr/chist.html" target="_blank" rel="noopener"
>《C 语言简史》&lt;/a>，由丹尼斯·里奇（C 语言之父）撰写，是一篇难得的介绍 C 语言的诞生和发展的历史性文献。&lt;/p>
&lt;h3 id="vbvisual-basic发展简史">VB（Visual Basic）发展简史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-31-40.png"
width="690"
height="518"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>前几天 HN 上有个从业近 30 年的老程序员发问：&lt;a class="link" href="https://news.ycombinator.com/item?id=37470318" target="_blank" rel="noopener"
>为什么 VB（Visual Basic）这么高效、好用的开发工具逐渐消失了？&lt;/a>。&lt;/p>
&lt;p>被顶的最高的网友放出了&lt;a class="link" href="https://retool.com/visual-basic/" target="_blank" rel="noopener"
>《Visual Basic 从诞生到消失》&lt;/a>这篇文章。&lt;/p>
&lt;p>在上世纪 80 年代末 90 年代初，Windows 操作系统刚刚崭露头角的时候，VB 已经在萌芽状态了。而且已经具有非常先进的组件化、可视化、低代码等超前思想。并且发明了“控件”、“消息触发”等概念。&lt;/p>
&lt;p>最初的版本与 BASIC 语言并无关系，只考虑了使用可视化开发并辅助简单的内嵌脚本，但是比尔·盖茨对 BASIC 十分热爱（毕竟那是微软起家的技术），亲自推动了组件化、可视化开发与 BASIC 语言结合，便诞生了 Visual Basic。&lt;/p>
&lt;p>得益于超前的可视化开发理念，VB 极大降低了当时开发应用程序的门槛，涌现出一大批开发者。包括当时那些不得不转型给个人电脑开发程序的大型机编程工程师。&lt;/p>
&lt;p>这一切在 VB 随着 Visual Studio 发布 6.0 的时候达到了顶峰。&lt;/p>
&lt;p>转折点出现在微软为了应对 Java 的威胁而推出 .Net 公共语言运行时的时候，VB 也被纳入到这套体系里，被成为 VB.Net ，扩充了复杂的语法和继承、多态等高级特性。&lt;/p>
&lt;p>对于那些真正喜欢 VB6 的人来说，这些都是唯恐避之不及的东西，更糟糕的是新的 VB.Net 无法兼容之前的代码，大量成果移植困难。&lt;/p>
&lt;p>之后更是随着网络信息科技的发展，Web 编程逐渐取代了 Windows 桌面编程，VB 这个伟大的技术，被淘汰也就是顺其自然的了。&lt;/p>
&lt;h3 id="一个在网页里模仿-excel-表格的故事">一个在网页里模仿 Excel 表格的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-32-14.png"
width="690"
height="201"
loading="lazy"
class="gallery-image"
data-flex-grow="343"
data-flex-basis="823px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://websheets.github.io/websheets/demo/" target="_blank" rel="noopener"
>一位前端工程师，讲述了他在 2016 年受雇于 Uber（优步）时的一些开发往事&lt;/a>。&lt;/p>
&lt;p>作为服务于数据工程师的内部研发团队，他所在的小组主要是给公司的数据分析人员提供内部工具，以便让他们能够更快地分析数据，更快的分析数据意味着更有可能在产品运营竞争里获胜。&lt;/p>
&lt;p>然而数据分析人员总是抱怨工具不满足要求，主要是操作界面，因为他们非常习惯“Excel”，每次提需求的时候总是说：“你就做得跟 Excel 一样就行”。&lt;/p>
&lt;p>作者最开始还试图跟用户解释要实现起来是多么困难，后来逐渐放弃了挣扎，并开始着手在网页里实现一个跟 Excel 一样的表格，而且他竟然实现了。&lt;/p>
&lt;p>故事的后来有些伤感，作者提供的工具并没有使得 “Uber” 在跟嘀嘀的竞争中胜出，相反地，“Uber”在中国的业务还被“嘀嘀”收购了。&lt;/p>
&lt;p>被用于数据分析的工具也被抛弃不再使用。&lt;/p>
&lt;p>后来作者选择了将那个像 Excel 的表格代码放在了 &lt;a class="link" href="github.com/WebSheets/websheets" >Github 进行开源，地址在这里&lt;/a>。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="通用-web-应用服务器">通用 Web 应用服务器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-32-34.png"
width="690"
height="356"
loading="lazy"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://unit.nginx.org/" target="_blank" rel="noopener"
>NGINX Unit&lt;/a>，通用 Web 应用服务器。是一个轻量且多功能的应用运行时，作为一个单一的开源服务器，它提供了您的 Web 应用程序所需的基本组件：运行应用程序代码（包括 WebAssembly）、提供静态资源、处理 TLS 和请求路由。&lt;/p>
&lt;p>Unit 是由 NGINX 团队成员从零开始创建的，以在运行时高度高效且完全可配置。最新版本是 1.31.0，于 2023 年 8 月 31 日发布。&lt;/p>
&lt;h3 id="绿色安卓-app-合集">绿色安卓 App 合集
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-32-52.png"
width="690"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.simplemobiletools.com/" target="_blank" rel="noopener"
>绿色安卓app合集&lt;/a>。&lt;/p>
&lt;p>这个网站收集了一大批良心 app，全部没有广告且不要求隐私权限。&lt;/p>
&lt;p>几乎涵盖了日常使用的所有类型，包括艺术绘画、音乐播放器、笔记、文件管理、录音、拍照等。 ​​​&lt;/p>
&lt;h3 id="nuejs">nuejs
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-33-10.png"
width="690"
height="455"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://nuejs.org/" target="_blank" rel="noopener"
>nuejs&lt;/a>，越来越多的人对前端开发的混乱感到不满了。不同的是有人选择抱怨，有人撸起袖子开干。nuejs 的作者觉得现在使用 React、Vue 等框架再加上若干服务端渲染框架，使得前端开发生态变得越来越复杂和掌握。于是自己动手开发了一个简单的轻量化框架，终极目标是构建一个简洁、高效的前端开发生态。&lt;/p>
&lt;h3 id="1024-字节的网页可显示-3d-地球">1024 字节的网页，可显示 3D 地球
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-33-21.png"
width="447"
height="255"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://aem1k.com/world/" target="_blank" rel="noopener"
>1024 字节的 JavaScript，在网页中显示动画 3D 地球模型&lt;/a>，页面动画显示的就是其源代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">script&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;p=&amp;#34;&amp;lt;&amp;#34;+&amp;#34;pre&amp;gt;&amp;#34;/* ,.oq#+ ,._, */;for(y in n=&amp;#34;zw24l6k\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">4e3t4jnt4qj24xh2 x/* =&amp;lt;,m#F^ A W###q. */42kty24wrt413n243n\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">9h243pdxt41csb yz/* #K q##H######Am */43iyb6k43pk7243nm\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">r24&amp;#34;.split(4)){/* dP cpq#q##########b, */for(a in t=pars\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">eInt(n[y],36)+/* p##@###YG=[#######y */(e=x=r=[]))for\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">(r=!r,i=0;t[a/* d#qg `*PWo##q#######D */]&amp;gt;i;i+=.05)wi\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">th(Math)x-= /* aem1k.com Q###KWR#### W[ */.05,0\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">x;)p+=&amp;#34; *#&amp;#34;/* b. OQ####x#K */[e[x++]+e[x++\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">]]||(S=(&amp;#34;eval&amp;#34;/* l `X#####D , */+&amp;#34;(z=\&amp;#39;&amp;#34;+z.spl\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">it(B = &amp;#34;\\\\&amp;#34;)./* G####B&amp;#34; # */join(B+B).split\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">(Q=&amp;#34;\&amp;#39;&amp;#34;).join(B+Q/* VQBP` */)+Q+&amp;#34;)//m1k&amp;#34;)[x/2\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">+61*y-1]).fontcolor/* TP */(/\\w/.test(S)&amp;amp;&amp;amp;&amp;#34;#\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">03B&amp;#34;);document.body.innerHTML=p+=B+&amp;#34;\\n&amp;#34;}setTimeout(z)&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="全球-ip-地址地理位置数据库">全球 IP 地址地理位置数据库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-33-35.png"
width="690"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://ipapi.is/geolocation.html" target="_blank" rel="noopener"
>全球 IP 地址 地理位置数据库&lt;/a>。含 IPV4 和 IPV6。 ​​&lt;a class="link" href="https://ipapi.is/geolocation.html" target="_blank" rel="noopener"
>​这篇文章里还介绍了构建 IP 地址地理数据库的实现原理&lt;/a>和一套具有指导意义的实现方法。基本原理是：“互联网中的每个 IP 地址都由组织拥有或管理。可以向互联网注册机构查询WHOIS信息。”&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="为什么-facebook-的-pytorch-占有率赢了-google-的-tensorflow">为什么 Facebook 的 PyTorch 占有率赢了 Google 的 Tensorflow
&lt;/h3>&lt;p>Pytorch 已经完全击败了 Tensorflow，成为 AI 开发框架的事实标准。Pytorch 一开始就专注于学术界，方向是把最牛的人吸引过来。而 Tensorflow 则倾向于软件工程炫技，做各种简单但是酷炫的功能。&lt;/p>
&lt;p>最终专业化的 torch 击败了 tensorflow 。 我觉得​​​还有一个原因就是 Google 特别容易弃坑，Tensorflow 中间也切换过前后不兼容的 API。&lt;/p>
&lt;h3 id="越来越多的科技产品让人更好地欺骗自己">越来越多的科技产品让人更好地欺骗自己
&lt;/h3>&lt;p>比如美颜相机、电影特效、游戏等，研发它们的主要目的就是让人们更好的实现自我欺骗和催眠。&lt;/p>
&lt;h3 id="东方文明为什么警惕科技我个人不完全同意">东方文明为什么警惕科技（我个人不完全同意）
&lt;/h3>&lt;p>中国古代对于科技非常警惕和打压的原因，也许是古人早就意识到科技（或技术）力量很容易对人类造成强烈反噬。&lt;/p>
&lt;p>观点来自 &lt;a class="link" href="https://www.bilibili.com/video/BV1pu4y1r7KW/" target="_blank" rel="noopener"
>@​​​安东尼2001：量子自旋理论背后，是人类历史的轮回&lt;/a>。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 049 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/</link><pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-34-22.png" alt="Featured image of post 机器文摘 第 049 期" />&lt;h1 id="机器文摘-第-049-期">机器文摘 第 049 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="在-linux-环境里执行-windows-应用程序">在 Linux 环境里执行 Windows 应用程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-33-44.png"
width="512"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>最近遇到一个难以启齿的需求，服务器是 Linux 环境，但是某项服务功能却需要执行一个 Windows exe 文件。&lt;/p>
&lt;p>不得已才想到要求助 Wine 这个经典中间层，据说可以使的 Linux 兼容大部分的 Win32 程序。&lt;/p>
&lt;p>但是又不想污染服务器的其他环境，于是选择在容器中运行。&lt;/p>
&lt;p>在网上找到了这篇&lt;a class="link" href="https://leimao.github.io/blog/Docker-Wine/" target="_blank" rel="noopener"
>《利用 Docker 容器和 Wine 在 Linux里运行 Windows 程序》&lt;/a>，按照文中介绍的步骤成功实现了需求。&lt;/p>
&lt;p>基本步骤：
1、根据文章提供的 Dockfile 构建镜像；
2、运行镜像并注意配置运行容器的环境变量；
3、执行所需的 exe 程序。&lt;/p>
&lt;h3 id="windows-系统是怎样进行引导的">Windows 系统是怎样进行引导的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-34-06.png"
width="690"
height="976"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/p>
&lt;p>前不久，我在给笔记本更换大容量固态硬盘的时候，由于不愿重做系统，使用了硬盘克隆功能，将原盘整体信息直接克隆到新硬盘。&lt;/p>
&lt;p>结果克隆成功并替换安装硬盘之后，却没能正常引导进入 Windows，而是进入了一个类似 PE 系统的界面（猜测是原盘中厂家自制的），并告知我由于检测到硬件更换，拒绝引导，并建议我选择恢复系统。&lt;/p>
&lt;p>我猜测之前的隐藏分区可能有笔记本厂家做的一些特定引导程序，才导致这样的情况。&lt;/p>
&lt;p>我对系统引导的理解还停留在 MBR 分区表大面积应用的阶段。于是尝试删除了隐藏分区，并手动将系统盘分区设置为了 “激活”分区（事实上这时候已经错了，因为 GPT 分区表方式下无法采用这种引导方式了）。&lt;/p>
&lt;p>结果系统干脆直接无法引导。出现这种情况，我之前的知识储备显然不够用了。&lt;/p>
&lt;p>经过一番折腾和搜索，我才得知现在 Windows 8 及以上版本操作系统的电脑所采用的方式是 GPT 分区表 + UEFI 引导。&lt;/p>
&lt;p>也就是说硬盘上需要单独开辟一个分区存储负责进行操作系统引导的工作。这个分区平时对于操作系统的资源管理器不可见（但磁盘管理中可以看到），由主板上的 UEFI 程序（这个程序可以理解为 BIOS 的升级版）进行访问和管理。&lt;/p>
&lt;p>了解这个方式之后，就简单了，重新使用工具修改 GPT 分区并制作专用引导分区即可。&lt;/p>
&lt;p>最后，为了弄清这跟之前的 MBR 引导方式有什么区别，我找到了一位运维工程师总结得较到位的文章&lt;a class="link" href="https://zhuanlan.zhihu.com/p/355526135" target="_blank" rel="noopener"
>《Windows系统开机引导顺序简述及运维小结》&lt;/a>。&lt;/p>
&lt;h3 id="500-行代码写一个-c-编译器">500 行代码写一个 C 编译器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-34-22.png"
width="690"
height="690"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://vgel.me/posts/c500/" target="_blank" rel="noopener"
>500 行 Python 代码写一个 C 编译器&lt;/a>。&lt;/p>
&lt;p>作者立下这个 flag 之后才发现任务有多难。&lt;/p>
&lt;p>主要是代码行数太少了，如果使用传统手段实现，可能这点儿代码量还不够写个语法分析器的。&lt;/p>
&lt;p>于是作者主动放弃了 AST （抽象语法树）的构建，采用 Token 提取和指令生成“一遍过”的方式，实现了一个相当“简洁”的 C 编译器。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="假装弹钢琴">假装弹钢琴
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-34-51.png"
width="690"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://touchpianist.com/" target="_blank" rel="noopener"
>touchpianist&lt;/a>，在线弹钢琴的网站（也提供手机 App 版），可以让你假装钢琴大师，只需要按键盘上的任意键，旋律就会自动演奏，不过你要控制敲击键盘的速度，以匹配原曲的节奏。我弹了一下，默认曲目是贝多芬的《月光奏鸣曲》，差点儿被自己陶醉了。 ​​​&lt;/p>
&lt;h3 id="bun-v10">Bun V1.0
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-35-09.png"
width="690"
height="419"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://bun.sh/blog/bun-v1.0" target="_blank" rel="noopener"
>bun-v1.0&lt;/a>，拳打 node ， 脚踢 deno 的 JavaScript 运营环境 bun 推出了 1.0 版本。主打一个“All in one”，号称可以一次性取代一揽子工具：node、npx、npm、webpack、tsc、babel、jest。一个工具包揽了运行、打包、包管理、转译、测试等所有事情，且速度是 nodejs 的 3 倍。&lt;/p>
&lt;p>对于这种吹的比较厉害的技术，保持关注，谨慎使用吧。&lt;/p>
&lt;h3 id="开源基于-llm-知识库平台">开源基于 LLM 知识库平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-35-24.png"
width="690"
height="334"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="495px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/labring/FastGPT" target="_blank" rel="noopener"
>FastGPT&lt;/a> - 基于 LLM 大模型的 AI 知识库问答系统。提供开箱即用的数据处理、模型调用等能力。同时可以通过 Flow 可视化进行工作流编排，从而实现复杂的问答场景。项目在 Github 开源，采用技术栈: NextJs + TS + ChakraUI + Mongo + Postgres（Vector 插件）。支持 GPT、Claude、Spark、ChatGLM 等多种 LLM 模型。&lt;/p>
&lt;h3 id="开源基于-llm-数据可视化平台">开源基于 LLM 数据可视化平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-35-35.png"
width="690"
height="292"
loading="lazy"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="567px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/lida" target="_blank" rel="noopener"
>lida&lt;/a>，微软出品的数据可视化工具库，特点是基于 LLM 对话模型进行生成，其生成的可视化代码支持多种可视化后端的语法，包括 matplotlib、seaborn、d3等。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="编程是一种体育锻炼">编程是一种体育锻炼
&lt;/h3>&lt;p>编程除了是一种可以以之谋生的专业技能，对于那些真喜欢编程的人来说，它还是一个心理疗愈工具。&lt;/p>
&lt;p>编程能使人专注，进入“心流”状态比较容易，也容易让人的心态平和。&lt;/p>
&lt;p>编程与体育锻炼一样，都是可以让人受益终生的活动。&lt;/p>
&lt;p>&amp;mdash;-来自&lt;a class="link" href="https://weibo.com/1461522430/NiEh1BHMt" target="_blank" rel="noopener"
>@软件教书匠金旭亮&lt;/a>。&lt;/p>
&lt;h3 id="造成电子阳痿的一种因素">造成电子阳痿的一种因素
&lt;/h3>&lt;p>一个不容忽视的因素是现在游戏的加载速度，尤其是 PC 游戏。&lt;/p>
&lt;p>我们被碎片化信息惯得一秒钟都不想等待。&lt;/p>
&lt;p>每当想玩会儿 CS 或者地平线之类得游戏，光是等待游戏启动、地图加载等就足以让人放弃想玩的念头。&lt;/p>
&lt;p>更别提有些游戏还有一些跳都无法跳过得开场引导视频。&lt;/p>
&lt;p>所以我现在就算是玩也是偶尔打开模拟器玩一玩老游戏，带有状态存储，随时加载存档。&lt;/p>
&lt;p>据说有一部分游戏主机（比如新一代 XBox）有类似笔记本电脑的睡眠功能，开机就玩，随时进入上次未完成的任务。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 048 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-048-期">机器文摘 第 048 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="关于-python-语言的一些统计数字">关于 Python 语言的一些统计数字
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-20-05.png"
width="690"
height="307"
loading="lazy"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="539px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://py-code.org/stats" target="_blank" rel="noopener"
>关于开源 Python 仓库的一些有趣统计&lt;/a>，有人克隆了 PyPI 网站里所有 Python 包对应的 Github 仓库，并对这些仓库里的全部文件进行了分析和统计。&lt;/p>
&lt;p>1、排名前三的语法特性分别是：列表推导、fstring字符串格式化、注解；&lt;/p>
&lt;p>2、代码中大约包含有超过 2 万 5 千个密钥明文，泄露最多的是访问 Google API、OpenAI API和腾讯云 Secret ID；&lt;/p>
&lt;p>3、截止到 2023 年 8 月，所有源码加起来已超过 60TB ，文件数量超过 10 亿。&lt;/p>
&lt;h3 id="wasm-技术让数据库执行-ai-模型">Wasm 技术让数据库执行 AI 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-20-30.png"
width="618"
height="492"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dylibso.com/blog/pg-extism/" target="_blank" rel="noopener"
>使用 Extism 将 WebAssembly 引入 PostgreSQL&lt;/a>。&lt;/p>
&lt;p>这篇文章的作者介绍了一种方法，可以使用 Wasm 技术通过扩展插件的方式给 PostgreSQL 数据库增加 UDF （用户自定义函数），从而实现调用 AI 模型的能力。&lt;/p>
&lt;h3 id="bitlocker-硬件加密能破解吗">BitLocker 硬件加密能破解吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-20-50.png"
width="690"
height="499"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;p>BitLocker 是 Windows 下的存储加密技术，用于保护硬盘中的数据安全。&lt;/p>
&lt;p>未经解密的硬盘即使遗失或者被接入其他系统也无法进行读取。&lt;/p>
&lt;p>这在极大程度上带来了数据安全（不过仍有不少用户在不知情的情况下开启了 BitLocker 且未保存密钥，在重做系统的时候发现硬盘无法解密，数据无法恢复。。欲哭无泪。。）。&lt;/p>
&lt;p>然而这种加密方式也不是绝对安全，国外有技术爱好者对此进行了挑战，并使用一台逻辑分析仪成功绕过了加密。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.errno.fr/BypassingBitlocker.html" target="_blank" rel="noopener"
>这篇文章进行了详细的记录&lt;/a>。&lt;/p>
&lt;p>主要原理为：在系统开机启动过程中的某个时刻，加密芯片和 CPU 之间传输了未加密的信号。使用逻辑分析仪捕获该信号可以逆向出加密密钥。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="监控网页信息变化的工具">监控网页信息变化的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-21-17.png"
width="499"
height="326"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="367px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dgtlmoon/changedetection.io" target="_blank" rel="noopener"
>changedetection&lt;/a>，一个监控网站变化的工具。&lt;/p>
&lt;p>帮助用户密切关注商品打折、股票行情、政策发布等信息变动。&lt;/p>
&lt;p>支持通过网页可视化的方式指定监控页面区域。&lt;/p>
&lt;p>通过邮件、即时聊天软件、API调用等多种方式推送信息。可使用 Docker 部署，或者本地 Python 环境部署。&lt;/p>
&lt;h3 id="switch-模拟器">Switch 模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-21-28.png"
width="690"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="350px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Ryujinx/Ryujinx" target="_blank" rel="noopener"
>Ryujinx&lt;/a> 一个用c# 写的开源 switch 模拟器，该模拟器旨在提供卓越的准确性和性能、用户友好的界面以及稳定的版本构建。 ​​​&lt;/p>
&lt;h3 id="文字缩写快捷键工具">文字缩写快捷键工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-21-45.png"
width="568"
height="446"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="305px"
>&lt;/p>
&lt;p>为了减少打字量，国外这哥们写了个脚本将日常用语全部缩写了，只需敲入缩写字母，脚本自动完成完整句子的键盘输入。&lt;/p>
&lt;p>比如：
st =&amp;gt; something
ab =&amp;gt; about
hw =&amp;gt; hardware
sti =&amp;gt; sometime&lt;/p>
&lt;p>据小哥自己统计，使用这个脚本以后他已经减少了一半的键盘敲击量。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/eschluntz/compress" target="_blank" rel="noopener"
>项目名叫 compress 目前已开源&lt;/a>，如果你有兴趣，改成支持中文也不是不可以。&lt;/p>
&lt;h3 id="canvas-手册">Canvas 手册
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-22-11.png"
width="562"
height="625"
loading="lazy"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="215px"
>&lt;/p>
&lt;p>Canvas 是网页中用于图形绘制的基本元素，结合 JavaScript 可以实现各种复杂的图形效果和交互动画。我之前都是每次用到了的时候现去翻文档，对它的每个 API 都是一知半解。这里有一个&lt;a class="link" href="https://bucephalus.org/text/CanvasHandbook/CanvasHandbook.html" target="_blank" rel="noopener"
>Canvas 手册&lt;/a>，详细介绍了 Canvas 的各种调用接口。适合希望深度使用及系统学习 Canvas。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="不要重复造轮子是人为设置的一种限制">“不要重复造轮子”是人为设置的一种限制
&lt;/h3>&lt;p>遇到需求不能满足的情况，是去“寻找轮子”还是“动手创造轮子”，这是两种不同的思维习惯。&lt;/p>
&lt;p>“寻找轮子”往往意味着寻找已有答案，将问题看为一种正常的状态，是“自古以来”、是“从来如此”。&lt;/p>
&lt;p>思维定势一旦形成，就很难改变，让人成了那个在沙漠中让美女帮他牵住骆驼的矮子。&lt;/p>
&lt;p>动手创造者往往是发现这种问题的人，他们不循规蹈矩，他们 Think different，是改变世界的人。&lt;/p>
&lt;p>“不要重复发明轮子”，这个原则用于工作中确实比较安全，他保证了不会浪费资源，并且避免了一定的技术风险。&lt;/p>
&lt;p>但也同时拒绝了伟大的创新。&lt;/p>
&lt;p>所以不要被这句话束缚，尽管去做自己的轮子。&lt;/p>
&lt;p>哪怕它一开始很丑。&lt;/p>
&lt;p>你的轮子必将使你与众不同，使你拥有不一样的视角，成为那个动手创造的人。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 047 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/</link><pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-047-期">机器文摘 第 047 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="业余爱好者痴迷于工具专业人士注重技能">业余爱好者痴迷于工具，专业人士注重技能
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-17-36.png"
width="649"
height="582"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://adamsinger.substack.com/p/amateurs-obsess-over-tools-pros-over" target="_blank" rel="noopener"
>业余爱好者痴迷于工具，专业人士注重技能&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>以原声吉他为例。在数字音乐制作和合成器盛行的时代，这个单独演奏的乐器可能显得有点古老。然而，在熟练音乐家的手中，它变成了一个充满迷人旋律和触动灵魂的载体。它甚至可能为更大的创意提供灵感，如果你直接跳到现代合成器就有可能会错过这些。原声吉他的简单性促使艺术家专注于演奏的细微之处，完善他们的指弹技巧，并通过每一次弹奏传达情感。真正的魔力不在于吉他本身，而在于将其演绎得生动活泼的音乐家的技艺。&lt;/p>
&lt;/blockquote>
&lt;p>这篇文章读来深有感触。&lt;/p>
&lt;p>在解决问题的时候，我总是忍不住问自己，我这个方法是最优的吗？我使用的工具是不是最合适/最好的？&lt;/p>
&lt;p>这种心理，常常使我陷入对最佳实践和完美工具的追求中，而忘记了解决问题本身。&lt;/p>
&lt;p>时间久了，工具积累一大堆，但每个都未曾发挥其真正作用，一边老工具在吃灰，一边继续寻找新工具。&lt;/p>
&lt;p>差生文具多。&lt;/p>
&lt;p>正如文章中所说：真正的高手明白，应当拿起手里已有的工具，先行动起来。在这个过程中如果有机会创造美好的事物，好的工具自然会出现在眼前。&lt;/p>
&lt;h3 id="cpu-的指令分支预测">CPU 的指令分支预测
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-17-49.png"
width="682"
height="743"
loading="lazy"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="220px"
>&lt;/p>
&lt;p>现代的 CPU 基本都具有指令分支预测的特性，通过猜测后续会执行的指令分支，提前运行一些指令和设置状态，可以有效利用 CPU 的执行资源，提升效率。&lt;/p>
&lt;p>不过，如果预测准确的话效率提升十分明显，但是如果预测错误，CPU 就要多做一些事情（刷新后续预测的指令和相关的状态），随着现代 CPU 中指令流水线越来越复杂，这种代价也变得越来愈大。&lt;/p>
&lt;p>在编程的时候，编写一些对于 CPU 分支预测友好的代码，能够对性能产生极大的影响。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://johnnysswlab.com/how-branches-influence-the-performance-of-your-code-and-what-can-you-do-about-it/" target="_blank" rel="noopener"
>对于 CPU 的分支预测，我们能做什么&lt;/a>耐心地从 CPU 的分支预测机制讲起，通过具体的代码举例，讲解了怎样让编写的代码对 CPU 分支预测这类优化更加友好。&lt;/p>
&lt;h3 id="ssh-命令详解">SSH 命令详解
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-18-25.png"
width="690"
height="535"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="309px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://grahamhelton.com/blog/ssh-cheatsheet/" target="_blank" rel="noopener"
>SSH 命令详解&lt;/a>，一篇对 SSH 命令的参数介绍十分详细且易懂的文章。&lt;/p>
&lt;p>通过举例让我彻底弄清楚了基于 SSH 的端口转发。&lt;/p>
&lt;p>另外还知道了可以在已有的 SSH 连接上执行补充命令，以实现不断开终端的情况下将远程主机上的端口转发到本机访问。 ​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="开源的房子">开源的房子
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-18-47.png"
width="690"
height="403"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.wikihouse.cc" target="_blank" rel="noopener"
>wikihouse&lt;/a>，是一个开源房屋建造网站，房子的图纸、模型均可从网站上下载，里面有各式各样的房屋建造资料，任何人都可以据此增删、设计、制造、组装自己的建筑。可以理解为建筑界的 github。
​​​&lt;/p>
&lt;h3 id="关掉-edge-浏览器新增的圆角样式">关掉 Edge 浏览器新增的圆角样式
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-19-03.png"
width="690"
height="352"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;/p>
&lt;p>Edge 浏览器的最新更新里，给所有页面强制增加了一个圆角边框，看起来很不习惯（丑陋）。&lt;/p>
&lt;p>经过研究，我发现，如果想恢复到之前的样子，可以在设置外观选项里关闭该特性。&lt;/p>
&lt;p>我已经关闭，并果断给这个功能特性反馈了负面评价。&lt;/p>
&lt;h3 id="hello-world">Hello World
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-19-26.png"
width="690"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/leachim6/hello-world" target="_blank" rel="noopener"
>Hello World&lt;/a> ，这个仓库收录了几乎所有编程语言（997种）的 Hello world 程序。 ​​​&lt;/p>
&lt;h3 id="前端开发代码大全">前端开发代码大全
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-19-42.png"
width="690"
height="639"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="259px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://30secondsofcode.org" target="_blank" rel="noopener"
>30secondsofcode&lt;/a>。&lt;/p>
&lt;p>这个网站有大量可复用的代码片段，主要是 Javascript、CSS、HTML 、Python 等语言的内容，可以覆盖 Web 应用开发全栈。&lt;/p>
&lt;p>里面收录的代码段或者文章都很清新，每个都配有细心的解释，具有良好的实用性。 ​​​&lt;/p>
&lt;h3 id="关于-win10-的锁屏睡眠时间">关于 Win10 的锁屏睡眠时间
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-20-00.png"
width="410"
height="502"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;p>我在使用 Windows10 的时候发现一个问题。&lt;/p>
&lt;p>无论我将电源设置里的睡眠时间、显示器空闲关闭时间设置多长，锁屏后系统都会在 1 分钟之后关闭显示器。&lt;/p>
&lt;p>这会带来一些不方便，并且让人困惑。&lt;/p>
&lt;p>在经过一番研究搜索之后，找到了如下解决方案（Windows就是这么喜欢在注册表隐藏设置）：&lt;/p>
&lt;p>1、打开注册表编辑器后。&lt;/p>
&lt;p>2、定位到：&lt;code>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Power\PowerSettings\7516b95f-f776-4464-8c53-06167f40cc99\8EC4B3A5-6868-48c2-BE75-4F3044BE88A7&lt;/code>&lt;/p>
&lt;p>3、修改右侧的Attributes 数值为2 (初始值为1)&lt;/p>
&lt;p>4、再打开“编辑电源计划”时会发现多了一个选项“控制台锁定显示关闭超时。&lt;/p>
&lt;h3 id="红警2游戏整合包">红警2游戏整合包
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-20-25.png"
width="413"
height="302"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tmioe.com/7991.html" target="_blank" rel="noopener"
>红警2 的民间整合包&lt;/a>，支持 win7 到 win11。整合大量资源，傻瓜式一键安装。 ​​​&lt;/p>
&lt;p>经过我的测试，前面链接页面里提供的安装包里带有额外的广告脚本，在使用时可使用 7z 等压缩软件直接打开该自解压包，选取主文件夹拷贝出来即可。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="隐形的门槛">隐形的门槛
&lt;/h3>&lt;p>也许每个领域都存在一个隐形的门槛，无论是你学会一种语言，还是掌握一种能力，哪怕是打通一个游戏，只要你跨不过那个门槛，那么无论你尝试多少次，都会在同样的水平下无功而返。相反，一旦跨过后，那就是一马平川，你有了在那个新世界周游的能力。这当然不是说你不会再遇到困难，而是说，你不再有那种尝试了无数次，带着同一种感受离开的感觉。剩下的区别只是更多经验的积累，是熟练度的问题，因为你已经在那个轨道上了，你已经拿到了入场券。&lt;/p>
&lt;p>人生可以被隐喻成一个有着自然消退机制的RPG体系，累积10000经验可以升那关键的一级，那么先前你无论你多少次到达5000，6000，9000都不行，因为熟练度会反复消退到1000，2000的水平。而我知道，很多人就是无数次的卡在了那9000以内，但每次都要从1000，2000这个位置开始。这个和自我接纳也没有关系，因为你知道你遇到的困难并不是基于你对自己的苛求，你的困难在于你无法为自己在乎的事情付出真正的努力，无法将自己的活力与热情持续的灌注在同一个点上，但你隐约知晓跨过那10000的门槛，是你更重要的人生福祉。&lt;/p>
&lt;p>来自微博 &lt;a class="link" href="https://weibo.com/3762961402/NgprO9HD5" target="_blank" rel="noopener"
>@崔庆龙_&lt;/a>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 046 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/</link><pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-046-期">机器文摘 第 046 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="windows-的任务管理器">Windows 的任务管理器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-28-48.png"
width="452"
height="758"
loading="lazy"
class="gallery-image"
data-flex-grow="59"
data-flex-basis="143px"
>&lt;/p>
&lt;p>如果你喜欢使用 Windows 任务管理器来查杀那些不安分的进程，并且跟我一样讨厌他们乱跳（尤其在按照资源占用排序时）。你可以按下 Ctrl 键，它就会神奇地停止更新直到你松开 Ctrl。&lt;/p>
&lt;p>Windows 操作系统有一种魔力，就是哪怕你用了将近 20 年，还是会有你不知道的快捷键或者快捷操作。这些东西有时候能带来一些惊喜。&lt;/p>
&lt;p>具体介绍可以看这里：&lt;a class="link" href="https://www.theverge.com/2023/8/16/23834125/microsoft-windows-task-manager-pause-shortcut" target="_blank" rel="noopener"
>暂停 Windows 任务管理器&lt;/a>&lt;/p>
&lt;h3 id="linux-内核最初版的解析">Linux 内核最初版的解析
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-29-10.png"
width="588"
height="253"
loading="lazy"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="557px"
>&lt;/p>
&lt;p>最新版本的 Linux 内核，其源码规模已经飙升至 3600 万行，想要深入细节去了解它十分吃力。&lt;/p>
&lt;p>而Linux 的第一个版本 v0.01 却非常小巧。&lt;/p>
&lt;p>刨去注释和空行的话，也就 8 千来行代码。&lt;/p>
&lt;p>这么小的代码结构，足够理解操作系统的精髓。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://seiya.me/blog/reading-linux-v0.01" target="_blank" rel="noopener"
>探索 Linux v0.01 d的内部结构&lt;/a>，可以带你像参观历史博物馆那样去见证曾经的 Linux。&lt;/p>
&lt;p>我记录了一些有意思的地方：&lt;/p>
&lt;p>1、v0.01 只有 66 个系统调用，用于支持文件管理和进程管理，分别是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">access acct alarm &lt;span class="nb">break&lt;/span> brk chdir chmod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chown chroot close creat dup dup2 execve
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exit&lt;/span> fcntl fork fstat ftime getegid geteuid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">getgid getpgrp setsid getpid getppid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">getuid gtty ioctl &lt;span class="nb">kill&lt;/span> link lock lseek
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir mknod mount mpx nice open pause
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">phys pipe prof ptrace &lt;span class="nb">read&lt;/span> rename rmdir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">setgid setpgid setuid setup signal stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">stime stty sync &lt;span class="nb">time&lt;/span> &lt;span class="nb">times&lt;/span> &lt;span class="nb">ulimit&lt;/span> &lt;span class="nb">umask&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">umount uname unlink ustat utime waitpid write
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 mount 调用啥也没干，直接返回了。&lt;/p>
&lt;p>2、直接写死代码绑定 Intel 386 平台。至今对于 PS/2 接口的键盘、ATA硬盘、VGA显卡等标准硬件的驱动代码还是写死在内核里（而不是放在drivers文件夹）。&lt;/p>
&lt;p>3、系统崩溃处理代码只有 5 行：只实现了打印一句“我不行了”，然后进入死循环&lt;code>for(;;);&lt;/code>。&lt;/p>
&lt;h3 id="llamacpp-是怎样做到的">LLaMa.cpp 是怎样做到的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-29-37.png"
width="540"
height="531"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="244px"
>&lt;/p>
&lt;p>LLaMa.cpp 是一个令人惊叹的项目，在它之前没有人能够在低端消费设备上成功运行 Meta 开源的人工智能模型 LLaMa ，因为那需要太多的硬件资源。&lt;/p>
&lt;p>但是 LLaMa.cpp 的横空出世使得在 M2 Macbook Pro、Android Pixel5 手机甚至树莓派上运行 LLaMa 的 7B 模型成为可能。&lt;/p>
&lt;p>这是怎么做到的？&lt;/p>
&lt;p>带着这个疑问，有网友深入研究了这个项目，并写下了这篇&lt;a class="link" href="https://finbarr.ca/how-is-llama-cpp-possible/" target="_blank" rel="noopener"
>How is LLaMa.cpp possible?&lt;/a>以解释原因。&lt;/p>
&lt;p>作者认为主要得益于对模型参数的量化，降低模型参数的精度，从 FLOAT16 减小到 INT4。使得 LLaMa.cpp 能够以较少的计算资源甚至只依赖 CPU 的情况下加载大模型。&lt;/p>
&lt;h3 id="逐渐觉得微软比谷歌良心">逐渐觉得微软比谷歌良心
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-30-01.png"
width="690"
height="372"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>曾经微软是技术黑客的公敌，被不少人视为反对技术创新、技术开放的最大反派。&lt;/p>
&lt;p>不过随着时间的推移，以及微软逐渐在开源社区所做出的努力。这一现象有所好转。&lt;/p>
&lt;p>近期在 HN 上&lt;a class="link" href="https://old.reddit.com/r/degoogle/comments/15pd5si/today_i_realized_i_now_trust_microsoft_more_than/" target="_blank" rel="noopener"
>有位网友很扭捏地承认：现在他对微软的感觉要比对谷歌好很多&lt;/a>。&lt;/p>
&lt;p>他列举了一些关于两家公司的对比，包括发布的产品、主观的优劣评价等等。&lt;/p>
&lt;p>为了抵制微软，他已经十多年没用 Windows 了，但貌似微软的其他产品“很香”（VS Code、Github、ChatGPT等）。&lt;/p>
&lt;p>并表示最近正在寻摸租一个云存储，大概率也会用微软的 onedrive 而不是谷歌的 Google drivers。&lt;/p>
&lt;p>对此我也有类似感觉，不过我对谷歌的不信任起始于十年前谷歌将 Google reader 停掉，而自从微软推出 WSL 后，我更是觉得微软在产品上越来越实在了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-31-23.png"
width="690"
height="538"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="tailwindcss-的小抄">tailwindcss 的小抄
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-30-29.png"
width="690"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;p>tailwind 这个 css 框架之所以能够很快流行起来，主要原因就是它解决了一个之前很多人没有太注意的问题，即 CSS 的“正交性”。&lt;/p>
&lt;p>之前 CSS 实现一个效果，可以有 N 种方法，外加各种奇技淫巧，但在使用 tailwind 之后，针对特定效果都有了最优实践路径，而且还可以很容易组合。&lt;/p>
&lt;p>不过由于它的类分的太细太碎，导致刚开始的时候会有一些不容易记忆。&lt;/p>
&lt;p>&lt;a class="link" href="https://tailwindcomponents.com/cheatsheet/" target="_blank" rel="noopener"
>这里有一份 tailwind 的小抄&lt;/a>，适合初学者收藏，方便随时查阅。&lt;/p>
&lt;h3 id="在浏览器中运行的-vim">在浏览器中运行的 vim
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-30-43.png"
width="690"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/rhysd/vim.wasm" target="_blank" rel="noopener"
>vim.wasm&lt;/a>，在浏览器中运行的 Vim，不是插件。&lt;/p>
&lt;p>使用 wasm 技术直接编译移植的 Vim Editor 源码，效果跟原生程序几乎一样。&lt;/p>
&lt;p>使用 WebAssembly 给 Vim 提供一个新的 GUI 前端（类似 GVim）。&lt;/p>
&lt;p>为了编译通过，作者在源码里禁用了很多 Wasm 不支持的特性，如：fork(2)、PTY 等。&lt;/p>
&lt;p>可在这里体验：https://rhysd.github.io/vim.wasm/&lt;/p>
&lt;h3 id="无隐私问题的-pdf-工具网站">无隐私问题的 pdf 工具网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-32-04.png"
width="690"
height="362"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pdftool.org/zh" target="_blank" rel="noopener"
>这个pdf工具可以尝试一下&lt;/a>，跟其他pdf 工具网站不同，这个网站借用 WebAssembly 技术将很多工作放在浏览器客户端执行，用户无需上传自己的pdf到网站，即可执行处理工作，包括：加密、解密、拆分、合并等常用功能。 ​​​&lt;/p>
&lt;h3 id="深入理解操作系统的小游戏">深入理解操作系统的小游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-32-17.png"
width="690"
height="368"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://plbrault.com/blog-posts/i-created-the-nerdierst-game-ever-en/" target="_blank" rel="noopener"
>这个自称史上最极客的小游戏&lt;/a>，是国外一位计算机科学教授给学生们写的一个小游戏，假设玩家是一个“操作系统”，在游戏里玩家需要不停地进程调度、内存页交换等操作，一旦调度不合理就会激怒用户导致“玩家”也就是操作系统被重启，游戏就 GAME OVER 了。&lt;/p>
&lt;p>游戏使用 Python 编写，作者将其编译为 WebAssembly 以嵌入网页，这里可以直接在线体验: &lt;a class="link" href="https://drfreckles42.itch.io/youre-the-os" target="_blank" rel="noopener"
>https://drfreckles42.itch.io/youre-the-os&lt;/a>。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="学习技能最有效的练习手段是复刻">学习技能最有效的练习手段是“复刻”
&lt;/h3>&lt;p>这是我前两天尝试用 CSS 临时写个页面效果想到的。&lt;/p>
&lt;p>我虽然也了解了CSS 语言的一些基本知识，但是在具体实操的时候仍会感到无从下手。&lt;/p>
&lt;p>与下棋类似，只知道“规则”但是没有“套路”。&lt;/p>
&lt;p>后来干脆找了几个目标页面，按照自己的想法去还原，渐渐能够摸到一些“套路”的边缘，最终实现了自己想要的效果。&lt;/p>
&lt;p>于是我想: &lt;strong>在学习一项技能的时候，“复刻”、“抄袭”、“借鉴”、“致敬”，都没有问题，应该把它作为最主要的练习手段。&lt;/strong>&lt;/p>
&lt;p>因为“抄”是最经济的学习方法了。&lt;/p>
&lt;p>不仅仅是编程技能，艺术方面更是如此。&lt;/p>
&lt;p>比如在编曲学习的时候有一种练习叫“扒带”，就是找一首歌，然后你通过你的工具和技巧制作一份完全一样的作品，尽量做到百分百还原。&lt;/p>
&lt;p>很多“大师”都是在这个过程中，遇到问题解决问题，领悟到很多只能意会不能言传的技巧，而这些领悟是无论如何也无法仅仅通过“看”和“听”获得的。&lt;/p>
&lt;p>另外，人们练字、绘画也是从临摹开始，一般在熟练之后才能突破，才又自成体系。&lt;/p>
&lt;h3 id="忍耐守恒">忍耐守恒
&lt;/h3>&lt;p>怕麻烦的人，主要是不能忍受一些事情。&lt;/p>
&lt;p>然而正是因为这些不能忍受，所以注定要忍受一些其他的事情。&lt;/p>
&lt;p>人生就是这样，比如无法忍受投资带来的风险，就得承受现金贬值；不能面对创业的压力，就得忍受按时上班的束缚。&lt;/p>
&lt;p>对于这种现象，我将之称为“忍耐守恒”。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 045 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-045-期">机器文摘 第 045 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="基于浏览器-javascript-堆快照的网页爬虫">基于浏览器 JavaScript 堆快照的网页爬虫
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-23-22.png"
width="690"
height="546"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.adriancooney.ie/blog/web-scraping-via-javascript-heap-snapshots" target="_blank" rel="noopener"
>基于 JavaScript 堆快照的网页爬虫&lt;/a>。&lt;/p>
&lt;p>本文作者介绍了一个实现网络爬虫的新思路，据称已在生产上使用了一段时间，且效果不错。&lt;/p>
&lt;p>比较典型的网络爬虫在爬取数据时，大都采用解析网页 DOM 的方式，或直接通过 HTTP 请求流直接解析，或使用无头浏览器进行解析。&lt;/p>
&lt;p>但现在这项技术已经被很多网站、平台人为设置很多障碍，比如增加很多随机的嵌套等等。&lt;/p>
&lt;p>作者某天福至心灵，想到一个点子。&lt;/p>
&lt;p>利用浏览器提供的 JavaScript 内存堆快照功能，将内存里的全部信息扒下来，然后根据对应的 JavaScript 对象属性，按图索骥去找到真正需要的数据。&lt;/p>
&lt;p>这种方法比较狠的地方在于，&lt;strong>直接从后台的数据结构下手，跳过了对页面 DOM 的分析和拆解&lt;/strong>，而且据作者说，网站即便想通过混淆此类数据在内存中的属性名称来进行防御，其工作量还是相当大的。&lt;/p>
&lt;p>所以，可能短期内无能为力。&lt;/p>
&lt;p>作者说，也许全面转为 Web Assembly 才能彻底禁止他这种爬虫。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/adriancooney/puppeteer-heap-snapshot" target="_blank" rel="noopener"
>项目源码在这里&lt;/a>&lt;/p>
&lt;h3 id="intel-cpu-的崩溃攻击漏洞">Intel CPU 的“崩溃攻击”漏洞
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-23-45.png"
width="512"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://downfall.page" target="_blank" rel="noopener"
>intel cpu 有一个崩溃攻击漏洞&lt;/a>，标识为 &lt;a class="link" href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-40982" target="_blank" rel="noopener"
>CVE-2022-40982&lt;/a>，利用此漏洞可以在虚拟机里窃取共享同一个物理 CPU 的其他虚拟机的数据。&lt;/p>
&lt;p>这个漏洞可以让恶意程序在本机运行后窃取如密码、加密密钥、以及个人电子邮件等私人数据。&lt;/p>
&lt;p>恶意的云计算客户可以利用 Downfall 漏洞从与其共享同一台云计算机的其他客户那里窃取数据和凭据。&lt;/p>
&lt;p>据文章作者（也即漏洞发现者）所说，该漏洞存在于 Intel Core 6 代到 11 代 CPU，并且研究人员发现存在通过 Web 网页浏览进行攻击的可能性。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/flowyroll/downfall/tree/main/POC" target="_blank" rel="noopener"
>作者开放了一部分用于测试攻击的代码在此&lt;/a>&lt;/p>
&lt;h3 id="利用树莓派的-gpio-发射无线信号">利用树莓派的 GPIO 发射无线信号
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-24-15.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://hackaday.com/2021/04/06/fan-tastic-misuse-of-raspberry-pi-gpio/" target="_blank" rel="noopener"
>原来树莓派的 GPIO 还能干这个&lt;/a>，这位老哥使用树莓派的 GPIO 接口直接进行无线电波发射（没错，就是随便扯出一根线就可以当作天线了）。实现了基于树莓派的微型电台。&lt;/p>
&lt;p>这得益于 &lt;a class="link" href="https://github.com/F5OEO/rpitx" target="_blank" rel="noopener"
>rpitx&lt;/a>这个开源项目，项目本来是为了研究和学习一些无线电原理，不过后来逐渐成为一些 SDR 爱好者必不可少的工具了。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=M2JY1_Xmokg&amp;amp;t=8s" target="_blank" rel="noopener"
>我上次看到一个小哥使用 RTL-SDR 录制汽车遥控器信号，然后使用树莓派重复发射出来，成功实现了自家汽车的解锁&lt;/a>。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://oimo.io/works/water/" target="_blank" rel="noopener"
>water&lt;/a>，一个在网页里模拟流体动画的 Demo，使用 Haxe 语言编写。&lt;a class="link" href="https://github.com/saharan/works/tree/main/water" target="_blank" rel="noopener"
>源码在这里&lt;/a>
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-24-42.png"
width="690"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>Haxe 是一种跨平台的开源编程语言，在其官方网站上称其为&amp;quot;universal language&amp;quot;。&lt;/p>
&lt;p>它可以用于开发多种平台（如Web、移动、桌面等）的应用程序。&lt;/p>
&lt;p>Haxe 提供了强大的静态类型系统，并支持多种编译目标，包括但不限于 JavaScript、C++、Java、C#、Python 等。&lt;/p>
&lt;p>感兴趣的话，这里也有&lt;a class="link" href="https://daobook.github.io/haxe-book/docs/start/00_intro.html" target="_blank" rel="noopener"
>一份 Haxe 的在线教程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/lllyasviel/Fooocus" target="_blank" rel="noopener"
>Fooocus&lt;/a>，ControlNet 作者开源的一款新的 AI 画图工具 ，搭建起来比 Stable Diffusion webui 稍微方便了一点，相当于整合包。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-25-40.png"
width="690"
height="644"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="257px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>原来 HTML5 有一个 &lt;code>&amp;lt;progress&amp;gt;&amp;lt;/progress&amp;gt;&lt;/code> 标签，直接写这个标签，不加任何属性的话，就是一个加载动画，非常适合在页面里临时需要一个进度、状态展示的时候。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-25-55.png"
width="462"
height="387"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="286px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://wangdoc.com/typescript/" target="_blank" rel="noopener"
>阮一峰老师的 Typescript 教程&lt;/a>，发布了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-26-13.png"
width="501"
height="800"
loading="lazy"
class="gallery-image"
data-flex-grow="62"
data-flex-basis="150px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>据老师自己说，刚开始也是抗拒的，觉得TypeScript 就是为 JS 语言添加静态类型系统。如果真需要静态类型，可以考虑使用其他更成熟的语言（比如 Rust 和 Java），再编译成 JS（wasm 模块），何必新学一门语言呢。&lt;/p>
&lt;p>但是后来发现 TypeScript 越来越流行，成为前端开发的主流工具，各种项目纷纷移植过去。&lt;/p>
&lt;p>我虽然对 TypeScript 仍然持保留态度，但是阮老师写的技术书籍读起来都很轻松易懂，所以觉得还是有必要收藏一下​​​。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://islamov.ai/stable-diffusion-webgpu/" target="_blank" rel="noopener"
>stable-diffusion-webgpu&lt;/a>，在网页里运行 AI 画图模型。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-26-55.png"
width="1154"
height="667"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="415px"
>&lt;/p>
&lt;p>基于 webgpu 技术，无需部署，直接在网页里运行。我试了一下，在我的 1080 8G 显存的显卡上 ，可以跑动，但是速度一般。&lt;/p>
&lt;p>上面的图是我只跑了 8 个 steps 的结果。。。 ​​​&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="ai-画图的品质">AI 画图的品质
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-27-30.png"
width="690"
height="690"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>为了验证之前关于“模特很可能被AI取代”的想法，自己动手部署 &lt;a class="link" href="https://github.com/AUTOMATIC1111/stable-diffusion-webui" target="_blank" rel="noopener"
>Stable Diffusion webui &lt;/a> 测试了一些模型。根据网友分享的提示词尝试生成了一些图片。&lt;/p>
&lt;p>感觉效果比我几个月之前体验时又有了不少提升，配合各种微调模型和 LoRA 模型可以生成照片质感和光影的图片。&lt;/p>
&lt;p>虽然人物表情和姿态还有些僵硬，不过我相信这是我没有合理调整各个参数以及充分发挥插件性能导致。&lt;/p>
&lt;p>多进行尝试和练习，应该能够生成更逼真、自然的照片。&lt;/p>
&lt;h3 id="信息的维度">信息的维度
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-28-20.png"
width="690"
height="690"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>
最近看了一些线性代数相关的知识，在向量、矩阵的各种计算中逐渐有了一些感悟：&lt;/p>
&lt;p>古代“老子”思想中的“道”很可能是无限维的，你的任何表达都是对它的一种投影，也就是降维了。所以才是“道可道，非常道”。&lt;/p>
&lt;p>每个人都想用最简单的框架去理解世界，将多维的信息硬生生地将为一维。&lt;/p>
&lt;p>这样的后果便是，盲人摸象、管中窥豹、一叶障目，不同的观点争得不可开交。&lt;/p>
&lt;p>所以在接收时也应该尽量按自己掌握的其它维度进行升维还原，任何信息都不可孤立看待。&lt;/p>
&lt;p>如果能从多维信息得视角去认知世界，也许会有转机，这多少就有点儿“阴阳互生、一分为三”的意思了。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 044 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/</link><pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-044-期">机器文摘 第 044 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="导致-python-多线程鸡肋的-gil-是什么">导致 Python 多线程鸡肋的 GIL 是什么
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-51-26.png"
width="690"
height="839"
loading="lazy"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="197px"
>
近期在使用 Python 多线程的时候，遇到了 GIL 全局锁导致的性能问题。&lt;/p>
&lt;p>具体来说就是性能提升没有达到预期，对于有些计算任务无法并行执行。&lt;/p>
&lt;p>从多核 CPU 占用结果上来看，像极了网上那张经典的围观图，一核干活多核围观。&lt;/p>
&lt;p>于是翻阅了相关资料研究一下，发现这是 Python 社区争论多年的问题，而且有很大的历史包袱。&lt;/p>
&lt;p>严格来说，GIL 全局锁导致的性能问题与 Python 编程语言没有关系，导致这个问题的原因在于具体实现的 CPython 解释器。&lt;/p>
&lt;p>当年解释器开发者为了简单实现对多线程的支持，搞了一个全局锁，以至于在多核时代无法充分发挥 CPU 性能。&lt;/p>
&lt;p>而后续又有很多库延续了这项依赖，历史的包袱（屎山？）越来越重，很难下定决心将之移除（据说代价甚至比当年从 Python2.x 迁移到 Python3 还要大）。&lt;/p>
&lt;p>如果不想深究具体技术细节只想了解基本的来龙去脉，这里有篇文章&lt;a class="link" href="https://xie.infoq.cn/article/1e151c24367abe8cad18130f4" target="_blank" rel="noopener"
>为什么 GIL 让多线程变得如此鸡肋？&lt;/a>介绍了 Python PIL 的产生背景以及适用于 Python 多线程的业务场景，可以给你的技术决策提供参考。&lt;/p>
&lt;p>不过好消息是，就在刚刚（前几天），Python 官方终于宣布要动手取消掉 GIL 了，顿时网上一片沸腾（其实只有一部分人，大多数人都还不知道 PIL 是什么玩意儿）。而且，&lt;a class="link" href="https://news.ycombinator.com/item?id=36643670" target="_blank" rel="noopener"
>Meta 也承诺，愿意出工出力（3人年）帮助 Python 社区做针对去除 GIL 的相关开发工作&lt;/a>。&lt;/p>
&lt;h3 id="用树莓派做一个属于自己的高级收音机">用树莓派做一个属于自己的高级收音机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-52-14.png"
width="606"
height="454"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>
最近接触到 SDR （软件定义无线电）这个领域，感觉挺有意思的。&lt;/p>
&lt;p>软件定义无线电是一种无线通信技术，它利用软件来实现无线电通信系统中的信号处理和调制解调功能，而不是传统的硬件电路。&lt;/p>
&lt;p>通过软件定义无线电技术，可以实现灵活、可配置和可重用的无线通信系统，大大提高了无线通信的灵活性和性能。&lt;/p>
&lt;p>传统的无线电通信系统通常使用硬件电路来执行信号处理、调制解调和频谱管理等功能。这些硬件电路通常是固定的，不能轻易更改，因此限制了通信系统的灵活性和可配置性。&lt;/p>
&lt;p>而SDR技术通过将信号处理和调制解调等功能以软件方式实现，可以在通信系统中使用可编程的处理器和通用硬件，从而使得通信系统的功能可以在软件层面上重新配置和调整，而不需要更改硬件设计。&lt;/p>
&lt;p>比起灵活性和可配置性来说，我觉得 SDR 最大的优势是成本大大降低。之前必须购买昂贵的硬件才能实现的效果，现在能够通过便宜的、少量的硬件加上软件模拟即可。&lt;/p>
&lt;p>我近期就以很低廉的价格购买了一套 SDR 设备，通过 USB 接口连接计算机，可以实现 500KHz到1700MHz频率范围的接收。听 FM 和航空频段不在话下，SW 短波的话受天线影响，我暂时没有调试出好的效果。&lt;/p>
&lt;p>跟 SDR 相比，我几千块买的旗舰手台显得既昂贵又功能弱。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.hackster.io/mircemk/diy-sdr-dsp-radio-with-raspberry-pi-and-rtlsdr-dongle-c38064" target="_blank" rel="noopener"
>这里有篇文章&lt;/a>是作者自己动手用 SDR 设备结合树莓派制作了一个看起来还挺专业的宽频无线接收机。&lt;/p>
&lt;p>其实这跟音乐制作领域内很多乐器、效果器逐渐被虚拟化的软件、插件代替是一样的。软件虚拟化拥有巨大的优势，随着通用计算硬件的成本越来越低廉，一切能被软件定义的最终都会被软件定义。&lt;/p>
&lt;h3 id="家用-wifi-路由器需要选择哪个信道">家用 WiFi 路由器需要选择哪个“信道”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-52-42.png"
width="601"
height="373"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>
近期验证了一个关于无线路由器的传说。&lt;/p>
&lt;p>起因是我新买了一个树莓派 ZeroW 带无线版本，没想到板载的 WiFi 网卡天线太弱了。&lt;/p>
&lt;p>离路由器稍微远一点，比如放到卧室，传输速率就会大幅下降，我又暂时没能找到合适的外接网卡，一度陷入绝望。&lt;/p>
&lt;p>后来灵机一动，看看能不能从路由器那头想想办法，于是打开路由器配置页面，找到了 WiFi 的“信道”设置，将之从“自动”调到了最不常用的“13”。&lt;/p>
&lt;p>这里补充一下，WiFi信道一般从1到13，由路由器自动选择，但现在无线环境十分混乱，尤其是 2.4G（树莓派 Zero W 只能连这个规格） 频段，干扰很严重。&lt;/p>
&lt;p>但是 13 这个信道很少被路由器自动选用，原因是最初制定标准的时候，不是所有国家和地区都支持，也不是所有终端设备都支持，所以这个信道就成了最不常用的。&lt;/p>
&lt;p>在我手动指定信道之后，惊喜地发现，树莓派放在同样的位置，传输速率得到了较大提升并且稳定。看来传说将路由器 2.4G 信道设为 13 可以防干扰是真实的。&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/344389009" target="_blank" rel="noopener"
>什么是路由器的信道？信道设置成什么最合理？&lt;/a>&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://roadmap.sh" target="_blank" rel="noopener"
>开发人员路线图&lt;/a> 是一个学习索引网站，旨在创建路线图、指南和其他教育内容，以帮助开发人员选择学习路径。在 Github 所有仓库中 Stars 排名第七。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-53-03.png"
width="690"
height="490"
loading="lazy"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="337px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://felixkreuk.github.io/audiogen/" target="_blank" rel="noopener"
>AudioGen&lt;/a> facebook 开源的声音合成模型，可以根据文字描述生成对应的声音。效果已经很惊人了，这个页面展示了很多样例。我听了一下，觉得以后影视作品里的一部分声音特效应该可以通过 AI 进行生成了。至少像一些嘈杂的人群、婴儿哭声、鸟叫等各种背景音是可以合成的。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-53-14.png"
width="499"
height="270"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/li>
&lt;li>原来 Chrome 和 Edge 浏览器的 DevTools 里自带了 CSS 动画曲线编辑器啊！可以直接通过鼠标拖动进行调整和预览，十分便捷。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-53-29.png"
width="562"
height="528"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/GraphiteEditor/Graphite" target="_blank" rel="noopener"
>Graphite&lt;/a>，一个开源的 2D 矢量图形编辑器，适用于照片编辑、图像处理、图形设计、插图、数据可视化、数字绘画等领域。可以实现项目图稿，数据可视化和自动化。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-54-19.png"
width="830"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="获取高品质信息的需求仍然强烈只是被淹没了">获取高品质信息的需求仍然强烈，只是被淹没了
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-54-40.png"
width="367"
height="372"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="236px"
>
三十几年前，电视逐渐取代书籍、报纸等传统媒体的年代，尼尔波兹曼写下了《娱乐至死》。&lt;/p>
&lt;p>作者认为：过度追求娱乐和娱乐化的信息传播方式可能导致公众思考能力的下降。&lt;/p>
&lt;p>然而这么多年过去了，人们在降低信息质量这条路上越走越远。电视也早已沦为老年人卧床的伴侣，电视节目更是无法占据现代人的时间，取而代之的是手机短视频。&lt;/p>
&lt;p>短视频已经成为大部分人闲暇消遣、信息获取的主要方式。这种媒体的变化将进一步降低理解和感受深度信息的能力，使人对深入学习和思考失去兴趣。&lt;/p>
&lt;p>虽然获取的信息看似在增多，但现在高质量的信息却越来越少。&lt;/p>
&lt;p>短视频等碎片化信息给我的感觉就像是无线电信号的背景噪音，现在的信息“电磁环境”早已被这种噪音充斥。因为“背景噪音”太大，就好像在高楼林立的城市里打开无线电，接收到的全是 LED 路灯和电动车充电器产生的噪波。&lt;/p>
&lt;p>不过我还是相信会有包括我在内的相当一部分人，不愿放弃主动思考，不屑于接收低品质信息。&lt;/p>
&lt;p>我正在努力做出一些尝试，以后逐渐记录下来：&lt;/p>
&lt;ol>
&lt;li>降低输入：减少刷碎片信息的时间；&lt;/li>
&lt;li>滤波：使用搜索引擎、RSS服务、newsletter邮件等工具进行整理；&lt;/li>
&lt;li>溯源：尽量选择信息源头获取一手信息，对于技术来说，直接阅读英文文档是一个办法；&lt;/li>
&lt;li>创造：自己制作高质量内容；&lt;/li>
&lt;/ol>
&lt;h3 id="摄影师不会被-ai-取代但是模特很可能会">摄影师不会被 AI 取代，但是模特很可能会
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-56-00.png"
width="664"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="373px"
>
即便以后 AI 绘画能够产出更加难以分辨真假的作品。&lt;/p>
&lt;p>从目前能看到的各种生成作品来说，还是摄影师负责了主要的创作灵感。&lt;/p>
&lt;p>真要说被取代的话，也许“被拍摄对象”经过虚拟化以后，很可能被取代。&lt;/p>
&lt;p>以后不仅仅是举着相机的叫摄影师，说不定会诞生面向 AI 摄影这一职业。&lt;/p>
&lt;p>到时候器材党玩的不再是镜头，改玩显卡了？&lt;/p>
&lt;p>“嘿，你这 N 卡 比我这 A 卡有德味儿，毒！”&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 043 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/</link><pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-043-期">机器文摘 第 043 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="先做框架再做功能">先做框架再做功能
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-13-57-56.png"
width="690"
height="395"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>
&lt;a class="link" href="https://devblogs.microsoft.com/oldnewthing/20230725-00/?p=108482" target="_blank" rel="noopener"
>Before you try to do something, make sure you can do nothing.&lt;/a>&lt;/p>
&lt;p>看到这句话第一反应是：这是什么 XX 逻辑？看完作者的文字之后，哦，这是一种软件构建的方法。&lt;/p>
&lt;p>意思是说，先宏观再微观，先整体再局部，别一上来就陷入到细节代码的编写中去。&lt;/p>
&lt;p>先把框架搭好，具体功能一个也别着急实现，留着占位，先搭一个“什么都不干”的架子，然后再逐渐补充功能。&lt;/p>
&lt;p>但也不是真的什么都不干，而是理清了各个关键组件的调用关系以及与开发相关的辅助功能（如打印调试信息）。&lt;/p>
&lt;p>这样做最大的好处是，随着功能开发的深入，代码不至于失控，而且具有良好的可调试性和组件问题隔离能力。&lt;/p>
&lt;p>随之而来的就是轻松写代码，而不是眉毛胡子一把抓。&lt;/p>
&lt;h3 id="神经网络从开始到现在">神经网络从开始到现在
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-13-58-59.png"
width="690"
height="513"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>
&lt;a class="link" href="https://s3tlxskbq3.feishu.cn/docx/NyPqdCKraoXz9gxNVCfcIFdnnAc" target="_blank" rel="noopener"
>The Document is All You Need!&lt;/a>&lt;/p>
&lt;p>一篇 AI 科普好文章，用较为通俗的语言讲解了神经网络模型原理和发展历程（我感觉有些像生物的进化）。&lt;/p>
&lt;p>从最初的由神经元组成的多层感知机开始，然后进化到卷积神经网络 CNN 降低网络复杂度，再进化， RNN 循环神经网络给模型增加记忆能力，记忆能力太强也不行，到了 LSTM 开始让它能够遗忘，再到后面的 注意力机制以及 LLM 语言模型。&lt;/p>
&lt;p>比起同类文章，这一篇尽量避免了数学概念的推导和论证，尽量在不看公式的情况下解释基本思路，适合我等小白学习。&lt;/p>
&lt;h3 id="代码审查的一些建议">代码审查的一些建议
&lt;/h3>&lt;p>&lt;a class="link" href="https://codelantis.com/blog/code-reviews-best-practices" target="_blank" rel="noopener"
>5个关于代码审查的最佳实践&lt;/a>，文章记录一些了对代码审查的实践建议，嫌长不看我总结如下:&lt;/p>
&lt;ol>
&lt;li>一次只审查一个功能特性或者错误修复。&lt;/li>
&lt;li>提前准备好背景交代（在审查之前写清楚这么做的原因和基本思路）。&lt;/li>
&lt;li>利用自动化工具提前做好静态检查，提前统一风格、规范。&lt;/li>
&lt;li>利用提问的方式提出改进建议而不是直接喷，如：“我们真的需要这个断言吗？”&lt;/li>
&lt;li>仔细阅读代码，慢慢来，以充分理解。&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>微软的 &lt;a class="link" href="https://learn.microsoft.com/en-us/sysinternals/downloads/zoomit" target="_blank" rel="noopener"
>ZoomIT&lt;/a> 真是个经典工具，已经默默维护了好多年了，现在版本为7.0。体积小巧才1MB多点儿，绿色免安装，下载解压即用。非常适合进行共享屏幕培训讲解，或者录制教学视频。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-13-59-57.png"
width="669"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="345px"
>
ZoomIT 快捷键如下：
Ctrl+1：放大屏幕，屏幕静止，然后使用鼠标批注；
Ctrl+2：使用鼠标随意绘制批注，支持 r、g、b、o 等快捷键切换颜色；
Ctrl+3：显示 BreakTime 倒计时；
Ctrl+4：放大屏幕，屏幕继续支持鼠标交互操作，用于放大操作过程；
Ctrl+5：录制屏幕，可与前面几个功能结合使用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/kamranahmedse/driver.js" target="_blank" rel="noopener"
>driver.js&lt;/a> 一个压缩后只有 5K 大小的前端库，可以让你的网站或者 Webapp 迅速集成交互式“使用指南”的能力。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-14-00-27.png"
width="690"
height="361"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://clangjs.netlify.app" target="_blank" rel="noopener"
>clangjs&lt;/a> 一个在浏览器编译、链接、运行 C/C++ 代码的 JS 库。支持 C/C++ 标准库。完全在本地编译，无需网络即可工作。原理：
首先把 Clang 和 LLD 编译为 WebAssembly 使其运行在浏览器中。然后使用 WebAssembly 版本 Clang 把 C/C++ 代码编译为 WebAssembly，最后通过浏览器 API 运行 WebAssembly。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-14-00-43.png"
width="690"
height="292"
loading="lazy"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="567px"
>
&lt;a class="link" href="https://github.com/luoxuhai/clang.js" target="_blank" rel="noopener"
>附：clangjs源码&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/bartobri/no-more-secrets" target="_blank" rel="noopener"
>nms&lt;/a>，一个控制台程序，可以将任意命令的输出（ANSI TXT）文本转换成为乱码以达到防偷窥和加密的效果。通过命令管道使用：&lt;code>ls -l | nms&lt;/code> ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-14-00-57.png"
width="690"
height="236"
loading="lazy"
class="gallery-image"
data-flex-grow="292"
data-flex-basis="701px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://iconbuddy.app" target="_blank" rel="noopener"
>Icon Buddy&lt;/a>，这个网站有超过 1 百万个免费 svg 图标，可在线自定义颜色。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-14-01-15.png"
width="690"
height="420"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="394px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;ul>
&lt;li>无法眼神交流不是导致远程办公沟通的最大障碍，语音延迟才是：
&lt;ul>
&lt;li>我之前一直以为远程办公给沟通带来最大的最大障碍是无法眼神交流导致的信息失真，想象着可以通过升级摄像头（比如嵌入在屏幕中）来改善这一情况。&lt;/li>
&lt;li>但进行无数次网络会议之后，我体会到了最大的障碍还不是无法眼神交流，而是网络通信带来的（几乎是必然的）严重的语音延迟。&lt;/li>
&lt;li>人们对声音延迟的感知和容忍限度大约在10毫秒（现在的电脑声卡在使用 ASIO 驱动之后可以轻松做到本地延迟 8到6毫秒左右，所以可以用于实时录音），大于10毫秒的延迟会带来明显的迟钝感，时间再长一些就会对对话的节奏带来严重影响。（如果体会不到的话，可以回忆一下新闻直播间主持人跟现场记者连线时那种说话总是对不上节奏的尴尬。）&lt;/li>
&lt;li>什么时候网络视频会议的延时能缩短到10毫秒以内（唱卡拉OK可以接受的最低延迟），远程办公才能迎来质的飞跃，否则网络视频会议对于工作讨论永远都是隔靴搔痒、效率低下。现在的解决方案普遍还在吹能做到一秒（1000毫秒）以内，任重而道远。 ​​​&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>现在真正的程序员用什么编辑器 ？
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-14-01-47.png"
width="690"
height="645"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="256px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 042 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/</link><pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-042-期">机器文摘 第 042 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="从-cpu-到操作系统">从 CPU 到操作系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-57-14.png"
width="665"
height="261"
loading="lazy"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>
整天使用电脑和手机却对它的工作原理一知半解？&lt;a class="link" href="https://cpu.land" target="_blank" rel="noopener"
>把你搁 CPU 里&lt;/a>是一套不错的科普文章，作者保证你无论是否了解 CPU 的运作方式，读完之后都会有所收获。我原本以为主要讲解 CPU 组成原理，在浏览了一遍之后，发现 CPU 只是引子，后面还讲了很多操作系统相关的知识，很值得一看。 ​​​&lt;/p>
&lt;h3 id="基于-gpu-渲染的-ui-界面制作">基于 GPU 渲染的 UI 界面制作
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-57-33.png"
width="690"
height="412"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>
&lt;a class="link" href="https://hasen.substack.com/p/gpu-gui-table-of-contents" target="_blank" rel="noopener"
>基于 GPU 渲染的 UI 界面制作&lt;/a>，也是一个系列文章，探讨了使用 GPU 渲染用户界面的一些思路和相关技术实现方法。用 GPU 绘制用户界面不是什么新鲜事，事实上现在大部分游戏的 UI 都是基于 GPU 渲染的，不过这个作者讲的比较深入浅出，对基础介绍的比较多，适合我这种业外人士，读起来通俗易懂。&lt;/p>
&lt;h3 id="为什么我们更应该使用-display-port-而不是-hdmi-">为什么我们更应该使用 Display port 而不是 HDMI ？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-58-12.png"
width="790"
height="479"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>
&lt;a class="link" href="https://hackaday.com/2023/07/11/displayport-a-better-video-interface/" target="_blank" rel="noopener"
>为什么我们更应该使用 Display port 而不是 HDMI？&lt;/a>，简单来说，HDMI 是家电行业制定的接口标准，封闭而保守，Display port 是 PC 行业制定的标准，开放又激进。现在的显卡上一般提供一个 HDMI 接口，仅仅是为了兼容而做出的妥协，不提供多个是因为 HDMI 授权收费。&lt;/p>
&lt;h3 id="txt-纯文本才是王道">txt 纯文本才是王道
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-58-45.png"
width="690"
height="220"
loading="lazy"
class="gallery-image"
data-flex-grow="313"
data-flex-basis="752px"
>
喜欢老式合成器的操作方式，不用图形和触摸屏，而是用文本和字符进行交互，可以快速选择音色参数，指哪儿打哪儿，心中有数。&lt;/p>
&lt;p>喜欢在控制台的黑窗口通过命令行跟计算机交互，而不是用鼠标在图形界面上点击，不用将鼻子凑在屏幕上，闭上眼睛也能做到精确操作。&lt;/p>
&lt;p>喜欢单反相机的肩屏，无论我用什么姿势拨动拨杆、拨轮，肩屏总能用字符给我最快速最准确的响应，告诉我现在的曝光三参数是多少，做到心中有数。&lt;/p>
&lt;p>喜欢用 Markdown 文本格式记录信息，只因为文本格式最干净纯粹，利于保存和传播。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://graydon2.dreamwidth.org/193447.html" target="_blank" rel="noopener"
>《txt纯文本才是王道》&lt;/a>的作者表达了跟我同样的喜好，对于使用纯文本保存信息偏爱有加，认为无论是视频、图片还是其他数字形式，在文字面前都是弱小的弟弟。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/FlagAlpha/Llama2-Chinese" target="_blank" rel="noopener"
>Llama2-Chinese&lt;/a>，Llama2中文社区！是一个专注于Llama2模型在中文方面的优化和上层建设的高级技术社区。 &lt;em>基于大规模中文数据，从预训练开始对Llama2模型进行中文能力的持续迭代升级&lt;/em>。Facebook近期开源的 Llama 2 模型比较火，号称可以免费商用。我试了一下，效果不如预期，跟 ChatGPT 3.5 比起来还有距离。可能我使用的中文微调 Lora 参数还不够好吧。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-59-02.png"
width="690"
height="182"
loading="lazy"
class="gallery-image"
data-flex-grow="379"
data-flex-basis="909px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://githubunwrapped.com" target="_blank" rel="noopener"
>githubunwrapped&lt;/a>是一个帮你统计 Github 信息的网站，可以将输入的 Github 账号相关的统计信息生成一段漂亮的动画，展示你使用最多的编程语言、哪天提交的最积极、哪个时段工作效率高（根据文件修改时间？）等。比较有趣的是，这个网站生成动画视频的技术来自一个叫做 &lt;a class="link" href="https://remotion.dev" target="_blank" rel="noopener"
>remotion&lt;/a>的库，它可以使用 React 组件式风格编写动画效果，并通过 Canvas 实现视频文件的渲染。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-59-18.png"
width="690"
height="455"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/jesseduffield/lazydocker" target="_blank" rel="noopener"
>lazydocker&lt;/a>，继发现 lazygit 和 lazyvim 两个神器之后，我又发现了 lazy 家族新成员：lazydocker！同样是提供终端命令行下的“gui”界面，不过操作对象是 docker 这下管理容器终于可以不再看错乱的 docker 命令输出了。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-59-28.png"
width="690"
height="397"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>关于产品需求的来源：&lt;/p>
&lt;p>对于提供IT相关服务的从业人员来说，无论是在企业还是个人做独立产品，把握好产品的需求、做好产品定义是最关键的事情，是后续做研发、运营的基础。&lt;/p>
&lt;p>而好的产品定义=自己想做+自己能做+用户想用+愿意付费。&lt;/p>
&lt;p>这样的定义应该怎样去发现？&lt;/p>
&lt;p>拿软件举例，大部分软件能给用户提供的最大价值是“将一些事情自动化”和“将一些物理实体虚拟化”。前者能够通过自动化实现工作效率的指数级提升，后者则通过对物理现实虚拟化实现用户对交互体验的指数级提升。&lt;/p>
&lt;p>所以在分析产品需求进行产品定义时可以从身边三个方面入手：&lt;/p>
&lt;ol>
&lt;li>还有什么事情可以被计算机自动化？&lt;/li>
&lt;li>还有哪些物理实体可以被虚拟化？&lt;/li>
&lt;li>市场上的现有产品，还有哪些可以从上面两个维度提升以增强体验的？&lt;/li>
&lt;/ol>
&lt;p>我发现，无论是企业的产品，还是个人的独立产品，都可以从这些维度进行分析。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基于互联网通道的“业余无线电”：&lt;/p>
&lt;p>不是很理解热衷于用互联网通道进行业余无线电通联的心态。&lt;/p>
&lt;p>今天刚知道现在有一些业余无线电爱好者使用一种叫做 mmdvm 的盒子（热点盒子）进行自主搭建数字中继。&lt;/p>
&lt;p>原理是“热点盒子”用家里的wifi接入互联网，然后热点盒子给业余无线电台提供UV频段的发射接收中继，这样就能轻易通联全国甚至全球的爱好者。&lt;/p>
&lt;p>目前很多拥有支持数字通信的电台的爱好者都很积极地参与这种通联，甚至每周还有打卡点名活动。&lt;/p>
&lt;p>我暂时还不是很理解这种心态。这种依赖互联网进行的通联在我看来（也许是暂时的）早已失去了玩无线电的初衷。如果我想要通过互联网假装进行呼叫，还得依靠家里的无线路由器，那我为什么不干脆使用微信电话？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无头系统：
今天才知道原来我给自己配的远程开发环境有个专业术语叫做 &lt;a class="link" href="https://zh.wikipedia.org/zh-cn/%e6%97%a0%e5%a4%b4%e8%ae%a1%e7%ae%97%e6%9c%ba" target="_blank" rel="noopener"
>“Headless 无头系统”&lt;/a> 啊。我现在基本上可以做到带着笔记本随意移动，开发环境都在远程，在各处体验环境都一样。主要使用： Win10 + WSL2 + Nvidia-Docker + VS Code + Neovim。有时会启用远程桌面 RDP，有时直接 ssh + tmux。有兴趣的话我挑一期详解。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 041 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/</link><pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-041-期">机器文摘 第 041 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="c-也能一次编译到处运行了">C 也能一次编译到处运行了？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-28-30.png"
width="743"
height="446"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>
用 C 编写的程序，只编译一次，生成的可执行文件能同时在多个平台运行吗？&lt;/p>
&lt;p>这在以往是 java 这类依赖虚拟机执行环境的语言宣称的事情。&lt;/p>
&lt;p>然而我今天才听说还有这个神奇的库（好久没关注过c++领域的技术了）：&lt;a class="link" href="https://github.com/jart/cosmopolitan" target="_blank" rel="noopener"
>Cosmopolitan&lt;/a>Libc 号称可以使 C 成为一种构建一次就能到处运行的语言，就像Java一样，除了它不需要解释器或虚拟机。相反，它重新配置了GCC和Clang，以输出POSIX批准的多语言格式，该格式在Linux + Mac + Windows + FreeBSD + OpenBSD + NetBSD + BIOS上本地运行，具有最佳的性能和最小的占用空间。&lt;/p>
&lt;p>在使用的时候需要引入特殊的库和编译配置，具体执行效果我还没有测试。&lt;/p>
&lt;p>然后，&lt;a class="link" href="https://ahgamut.github.io/2023/07/13/patching-gcc-cosmo/" target="_blank" rel="noopener"
>这篇文章&lt;/a>的作者干脆来个更方便的操作，他给 GCC 打了大约 2000 行的补丁，使得 GCC 直接就嵌入了 Cosmopolitan 库，现在可以在不修改任何源代码（前提是得用纯 C 写）的情况下构建出到处都能运行可执行文件了（Windows也可以吗？我要测试）。&lt;/p>
&lt;h3 id="业余无线电入坑指南">业余无线电入坑指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-29-07.png"
width="690"
height="920"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>
业余无线电跟摄影、HiFi音响这一类的爱好在某种维度上非常相似，在“入坑”的境界上，甚至完全一样。&lt;/p>
&lt;p>这里的坑，指需要投入大量精力和资金。&lt;/p>
&lt;p>之所以这么说，是因为它们都有一个共同的特点。&lt;/p>
&lt;p>即围绕这些爱好有大量的知识可以学习和探索。&lt;/p>
&lt;p>比如拿业余无线电来说，上来就一堆“亚音”、“中继”、“频段”、“频差”、“杂散发射”等名词，对标摄影中的“构图”、“光圈”、“快门”、“ISO感光度”等名词。新手若想有所体会，单是这些概念就够琢磨几天的。更不用提后续还有逐渐步入玄学的一些操作流派，乃至一个不留神还会陷入无穷尽的装备升级竞赛。&lt;/p>
&lt;p>这类知识对于好奇心强烈、喜欢求知的人来说有着巨大的吸引力。甚至直白的说，我们很可能不是爱好这项技能，而是单纯喜欢探索和求知的过程，喜欢那种获得感。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://zhuanlan.zhihu.com/p/585518350" target="_blank" rel="noopener"
>《业余无线电新手指南》&lt;/a>可以普及一些基本知识，愿意入坑的请阅读。&lt;/p>
&lt;p>&lt;em>我近期已考取了中国无线电协会的业余无线电操作能力 A 证&lt;/em> 算是合法的 &lt;a class="link" href="https://baike.baidu.com/item/%E6%97%A0%E7%BA%BF%E7%94%B5%E7%88%B1%E5%A5%BD%E8%80%85/6509242" target="_blank" rel="noopener"
>HAM 火腿&lt;/a>了。&lt;/p>
&lt;h3 id="远程办公还能成为趋势吗">远程办公还能成为趋势吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-29-47.png"
width="799"
height="414"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="463px"
>
疫情的时候，远程办公、异地协同等概念一度变得很火爆，当时很多人觉得这又是一个风口。&lt;/p>
&lt;p>但随着当时极端环境的消失，各大公司又纷纷将员工从居家办公中召回。&lt;/p>
&lt;p>那么？此类与远程协作相关的概念破灭了吗？&lt;/p>
&lt;p>各种协同工具、平台相关的市场，还有没有继续扩大的可能，或者说还在等待一个巨大的技术革新来引爆？&lt;/p>
&lt;p>这里有个项目，&lt;a class="link" href="https://github.com/LinuxSuRen/remote-jobs-in-china" target="_blank" rel="noopener"
>积极收集远程办公相关的信息&lt;/a>，包括国内支持的公司清单、工具及使用资料等。&lt;/p>
&lt;h3 id="怎样做出伟大的成就">怎样做出伟大的成就？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-30-40.png"
width="636"
height="422"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>
昨日读了保罗格雷厄姆（《黑客与画家》的作者）新文章一篇&amp;mdash;-&lt;a class="link" href="http://paulgraham.com/greatwork.html" target="_blank" rel="noopener"
>《怎样做出伟大的成就》&lt;/a>（实际上我觉得可以译为“怎样牛逼”）。&lt;/p>
&lt;p>虽然标题看起来略有鸡汤味儿，但读起来还是比较实惠的。&lt;/p>
&lt;p>文章从发现和选择要做的事情开始，谈论了一些具体的方法。然后展开讨论了在方法执行过程中可能会遇到的一些问题，以及如何克服。甚至介绍了一些心理暗示技巧。&lt;/p>
&lt;p>文章比较长，我个人体会比较深的点如下：&lt;/p>
&lt;ol>
&lt;li>一个人做什么才能牛逼？答：做自己天赋里有的东西，就是找一些你既有能力又非常感兴趣的事情。&lt;/li>
&lt;li>要养成“自驱”的习惯。让“工作”来源于自己的认知，而不是别人告诉你、让你做的事情。主动，而不是等待。&lt;/li>
&lt;li>拥有一个属于自己的“项目”是一个找到“自驱”的最佳方法。不断观察自己对什么有强烈的好奇心（甚至好奇到大多数人不能理解）可以找到这样的“项目”。&lt;/li>
&lt;li>选定要做的“项目”还应遵循兴奋原则，即：做自己愿意用的产品，写自己想读的故事，而不是执着于满足想象中的不存在的复杂需求。&lt;/li>
&lt;li>注重积累效应，日拱一卒、长期积累，每天写一篇文字，一年下来就是一本书。&lt;/li>
&lt;li>周期性审视自己做的事情，确认它是否偏离了目标（在做自己最想做的事情），及时修正。&lt;/li>
&lt;li>行动的重要性，很多人实际上可以更牛逼，但是因为“谦虚”和“恐惧”导致的拖延使得计划一再搁浅，浪费了时间。&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="http://t.cn/A60wPLwI" target="_blank" rel="noopener"
>jabbr.ai&lt;/a>是一个针对拳击比赛的打击判定进行训练的AI模型，可以在智能手机上运行，实时监测视频中拳击选手的打击得分情况，即时进行统计，多个智能手机多视角同时运行可以快速生成总结性视频。模型提供约50种监测参数（质量、步法、压力等）可用于运动员训练分析。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-31-11.png"
width="908"
height="509"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/li>
&lt;li>浏览器地址栏快捷操作，我今天才知道原来浏览器地址栏还有这些快捷操作（火狐浏览器支持的最多，我测试的Edge浏览器也支持部分操作）：
&lt;ol>
&lt;li>输入*星号，可以搜索你的收藏夹；&lt;/li>
&lt;li>输入^，可以搜索历史浏览记录；&lt;/li>
&lt;li>输入%，可以搜索当前打开的tab页；&lt;/li>
&lt;li>输入？，可以显示所有搜索建议； ​​​&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a class="link" href="https://video.weibo.com/show?fid=1034:4923133602234429" target="_blank" rel="noopener"
>树莓磁带&lt;/a> 一种用树莓派做的小硬件，为了支持在老式电脑中加载程序（之前用磁带存储的那种）。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-31-40.png"
width="607"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/li>
&lt;li>两招教你“永久”关闭 Windows 自动更新（任选一个都可以）：
&lt;ol>
&lt;li>通过执行代码的方式：&lt;code>reg add “HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings” /v FlightSettingsMaxPauseDays /t reg_dword /d 10000 /f&lt;/code> Win+R 打开「运行」对话框，输入 &lt;code>cmd&lt;/code> 后按下 &lt;code>Ctrl+Shift+Enter&lt;/code>，在弹出来的命令行窗口中输入上面的代码，并敲击回车。命令里的 10000 代表停止更新的天数。&lt;/li>
&lt;li>手动把电脑时钟日期改成 2050 年（为了防止时间自动校准，可以暂时断开网络），然后在 Windows 更新设置界面里面点击“延迟更新”，完成设置后再把电脑时间调回来就行了。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a class="link" href="https://pkg-size.dev/" target="_blank" rel="noopener"
>pkg-size&lt;/a>，一个在线监测 npm 包大小的网站，可以实时查看一个 npm 包的真实依赖，网站利用了 web容器技术，直接在浏览器里执行 npm install 操作。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-32-07.png"
width="1011"
height="636"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="381px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=degreat.3e" target="_blank" rel="noopener"
>3e&lt;/a>，一个 VS Code 插件，可以让你在编辑器里直接浏览 3d 模型，基于 webgl 实现。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-32-58.png"
width="704"
height="468"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 039 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-039-期">机器文摘 第 039 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.cs.columbia.edu/~hgs/etc/writing-bugs.html" target="_blank" rel="noopener"
>关于写作的通用问题&lt;/a>，“元技能”一般指比普通技能更高阶的技能，我理解为可产生技能的技能，此类技能并不会随着外部环境的高速发展而被淘汰。比如写作就算是一种元技能，当不知道该训练和提升什么技能的时候，将时间花在“元技能”的提升上准没有错。这篇文章主要讲解英文写作的常见问题，但是有些我觉得对于中文也适用。比如文章开头提到的两个基本原则：“在写之前就弄清楚自己想表达什么”、“即便是你已经写完了一整篇，如果没能表达你的意思那也是废纸”。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-13-52-23.png"
width="294"
height="171"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="412px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://jmmv.dev/2023/06/fast-machines-slow-machines.html" target="_blank" rel="noopener"
>新电脑快还是老电脑快？&lt;/a>，上周有博主在twitter发布了一个视频吐槽了一个我也困惑很久的事情。作者展示了他在一台古董电脑上运行Windows NT 3.5 的情况，视频中的电脑基本可以做到秒开程序，然后又展示了一台配备了Windows 11的Surface平板电脑，操作起来界面响应有明显延迟。后者cpu频率为前者的4倍，内存容量为前者的6倍。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-13-55-53.png"
width="507"
height="228"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="533px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>现在的硬件性能动辄就比之前的老硬件几十甚至上百倍的提升，但是我们的交互体验呢？能够秒开的程序甚至还不如二十年前的老爷机。
后来这事儿在twitter引发了一些争议，有人认为现在的软件确实吃掉了硬件提升的性能，对体验来说提升不足。也有人说现在的体验与以往不可同日而语，这样的对比不公平也没有意义。&lt;/p>
&lt;p>博主不得不专门写了一篇文章来回应，详细记录了作者认为更加合理的对比过程。&lt;/p>
&lt;p>我个人认为首要原因就是随着硬件性能的提升，软件开发者的精力已经逐渐从性能向开发效率倾斜了。由于现在硬件成本确实低廉，软件迭代周期变得越来越短，软件开发者也越来越没有动力做出极致挖掘硬件性能的软件。&lt;/p>
&lt;p>不信你看，现在越来越多的应用程序不再使用原生开发，而是采用了可以“跨平台”的web技术。&lt;/p>
&lt;p>这样使得软件界面的响应直接下降了一个数量级。（我在使用vscode的时候甚至还会遇到打字卡顿慢慢弹出字符的情况。）&lt;/p>
&lt;p>另外，复杂的设计模式和软件架构，也吃掉了不少硬件性能，因为每增加一层抽象，都会消耗资源，而现在各种复杂的架构就是拼命地增加抽象层。&lt;/p>
&lt;p>希望以后市场能够鼓励开发者多做挖掘硬件性能的事情吧。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://faultlore.com/blah/text-hates-you/" target="_blank" rel="noopener"
>文字渲染比你想象的要复杂&lt;/a>，这篇文章的作者曾负责火狐浏览器的文字渲染引擎，他写这篇文字的目的是科普一下关于文字渲染的一些基本技术和困难。在阅读之前，我也简单的以为，文字渲染就是把对应的字符字形从字体库中取出来然后绘制到相应的位置即可，但实际情况确实比这要复杂得多。比如，文中提到的关于“连字符”的处理、“抗锯齿”、“书写方向”等问题，每一个都是开发者的头发杀手。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-12-47.png"
width="574"
height="307"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/rrweb-io/rrweb" target="_blank" rel="noopener"
>rrweb&lt;/a>，可在网页上记录用户行为并导出视频文件。可用于：排查用户错误、保险业务签署、内部风控、用户交互分析等。rrweb采用虚拟化转换DOM、记录变更和操作过程，并通过链表回放数据。存储最小化、回放可快进且跳过无效行为。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-13-31.png"
width="529"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/zhaoyun0071/DragGAN-Windows-GUI" target="_blank" rel="noopener"
>DragGAN-Windows-GUI&lt;/a>，DragGAN（上周介绍过的开源模型，可以针对图片进行交互式拖动修改）的懒人包，解压直接用，内置17个模型。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-13-53.png"
width="690"
height="421"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="393px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://neal.fun/deep-sea/" target="_blank" rel="noopener"
>deep-sea&lt;/a>，这个网页可以让你查看海洋各个深度都是有哪些生物，果然是越往下越看不清，所以大家就随便长长了，不讲究好看不好看了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-14-11.png"
width="690"
height="501"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/li>
&lt;li>&lt;a class="link" href="http://elementsofprogramming.com/" target="_blank" rel="noopener"
>电子书《Elements of Programming》&lt;/a>，这本老书在出版十年后推出了免费pdf版。中文译作《编程原本》，旨在介绍通用的程序设计原理和技巧，重点关注程序设计的基本元素和抽象概念。这本书的核心思想是将程序设计看作是一种构建和操作抽象概念的过程。它强调程序设计应该建立在数学原理和精确性基础上，通过抽象和泛化来创建可重用、可扩展和可维护的软件。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-14-52.png"
width="377"
height="542"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="166px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/loft-sh/devpod" target="_blank" rel="noopener"
>devpod&lt;/a>，Github 的 Codespaces 和微软的 VSCode DevContainers 给开发者提供了即开即用的云端开发环境。现在，他们的开源平替来了，devpod 是一个开源的开发环境容器，可以方便地在任意客户端（Mac、Win、Linux）或云端主机创建体验一致的开发环境，并且可以与VSCode和Jetbrains等IDE直接集成。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-15-25.png"
width="690"
height="266"
loading="lazy"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="622px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://uploads-ssl.webflow.com/5ac6b7f2924c656f2b13a88c/6435aabdc0a041194b243eef_Current%20Best%20Practices%20for%20Training%20LLMs%20from%20Scratch%20-%20Final.pdf" target="_blank" rel="noopener"
>从零开始训练大语言模型的最佳实践&lt;/a>，训练大语言模型的技术白皮书，从基本概念和技术讲起，教你训练大语言模型。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-15-45.png"
width="656"
height="849"
loading="lazy"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="185px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/yardenshafir/WinDbg_Scripts/blob/master/windbg_the_fun_way.pdf" target="_blank" rel="noopener"
>windbg&lt;/a>，一本电子书，讲了很多 windbg 调试器的高级用法，市面上很少见。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-16-44.png"
width="620"
height="319"
loading="lazy"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="466px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 040 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-040-期">机器文摘 第 040 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="前端代码检查插件eslint和美化插件prettier的冲突">前端代码检查插件&lt;code>ESLint&lt;/code>和美化插件&lt;code>Prettier&lt;/code>的冲突
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-02-40.png"
width="1900"
height="1008"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>
在使用VSCode等现代化编辑器进行前端开发的时候，很多工程样板都默认开启了代码检查和自动格式化的功能，其中以 ESLint 插件和 Prettier 插件为主。&lt;/p>
&lt;p>之前有一阵子我总是困惑这两个插件的区别，甚至如果配置不好的话，还会有冲突。&lt;/p>
&lt;p>比如 Prettier 插件会在你保存源码的时候按照既定规则进行“美化”代码，如去除行尾分号、增加表达式中的空格等等。此时如果ESLint插件的规则配置不同的话，编辑器就会报错并提示要进行“修复”，然而就在你“修复”之后，刚&lt;code>Ctrl+S&lt;/code>保存之后，又傻眼了，因为 Prettier 又对代码进行了“美化”。&lt;/p>
&lt;p>我周末特意花时间研究了一下，梳理了一下这两个插件的关系以及他们的分工。&lt;/p>
&lt;p>首先，他们的职责定位不同：ESLint 用于检查代码编写是否符合某种预定义的规范，可以进行十分详尽的配置和多项检查，比如定义的变量如果未使用可以作为一种警告或者错误，其职责定位以检查为主。而 Prettier 的职责侧重于格式化（美化）代码，对于编写代码的样式如 tab 缩进量、行尾要不要分号、字符串用单引号还是双引号等可以进行统一格式化，一般用于在代码保存的时候进行快速统一样式。&lt;/p>
&lt;p>所以两者可以配合使用，但开头提到的规则冲突需要注意。&lt;/p>
&lt;p>我个人的习惯是，将两个插件的配置文件里的配置项进行匹配（规则调整为一致），因为我在美化时关注的项并不太多，所以编写这两个配置文件不算费劲。&lt;/p>
&lt;p>而网上有人提出了更好的办法，即通过扩展插件的方式，使得 ESLint 自动获取 Prettier 的规则，以自动统一两者的行为。&lt;/p>
&lt;p>&lt;a class="link" href="https://rileycai.com/%e4%b8%8d%e4%bb%a5%e8%a7%84%e7%9f%a9%ef%bc%8c%e4%b8%8d%e8%83%bd%e6%88%90%e6%96%b9%e5%9c%86-%e5%bd%bb%e5%ba%95%e6%90%9e%e6%87%82-eslint-%e5%92%8c-prettier/" target="_blank" rel="noopener"
>关于 ESLint 和 Prettier 的具体分析文章和操作建议可以看这一篇文章：&lt;/a>&lt;/p>
&lt;h3 id="说一说我现在的知识管理工具和流程">说一说我现在的知识管理工具和流程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-03-27.png"
width="302"
height="517"
loading="lazy"
class="gallery-image"
data-flex-grow="58"
data-flex-basis="140px"
>
Hacknews 上有网友说&lt;a class="link" href="https://news.ycombinator.com/item?id=36609641" target="_blank" rel="noopener"
>Evernote几乎辞退了它的所有员工&lt;/a>，才想起来我已经有好几年没用过 Evernote 了。之前大概有将近十年的时间都在使用Evernote（但都是免费用户）。主要使用场景是记录个人的工作日志和借助浏览器插件剪藏一些值得收藏的文章。&lt;/p>
&lt;p>后来随着 Evernote 的限制越来越多，体验逐渐下降。我就迁移到了使用纯文本作为知识记录载体的路线上了。&lt;/p>
&lt;p>期间使用过 Emacs 的 org 模式，也尝试过 vim 的 wiki 插件，最后选择了现在这个 VSCode + GitHub 的方案，已稳定使用了两年时间。&lt;/p>
&lt;p>具体流程如下：
1、使用 VSCode + &lt;a class="link" href="https://foambubble.github.io/foam/" target="_blank" rel="noopener"
>foam&lt;/a> 、&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one" target="_blank" rel="noopener"
>MarkdownAllinOne&lt;/a> 等插件实现对 Markdown 的高效编辑，可以实时预览排版效果，foam实现了类似 &lt;a class="link" href="https://obsidian.md/" target="_blank" rel="noopener"
>Obsidian&lt;/a> 的文章双向链接和知识关系图谱。我主要使用 Markdown 记录日志和编写知识卡片用于存放个人吸收的信息。
2、所有内容存放在一个 git 仓库中，同步到 GitHub 上的个人私有仓库，这样可以省去对接网盘的麻烦。
3、对于互联网上阅读到的有用文章，使用浏览器插件 &lt;a class="link" href="https://microsoftedge.microsoft.com/addons/detail/web-clipper/opejamnnohhbjflpbhnmdlknhjkfhfdp" target="_blank" rel="noopener"
>Web Clipper&lt;/a>，可以完整的抓取页面内容到指定的后端存储，这个插件我最喜欢的点是它可以将文章抓取到你指定的GitHub仓库，并作为Issue提交。
4、来不及看的信息就先抓取到 Issue ，然后等有时间进行整理，形成自己的知识卡片后再关闭该 Issue 。&lt;/p>
&lt;p>这套工具及流程的优点：
1、完全免费，不产生任何费用，而且体验不亚于收费软件。
2、自由度高，存储后端可以自己随意选择，如果嫌 GitHub 麻烦的话，可以自己用网盘同步文件夹。
3、纯文本载体，这个算是优点吧，格式开放，不会存在别的编辑器打不开的情况。
4、数据私有，数据随时都在本地（云端的仅作为备份和同步中转），不用担心 SaaS 供应商跑路（你看现在的Evernote）。&lt;/p>
&lt;p>欢迎大家讨论。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/TransparentLC/WechatMomentScreenshot" target="_blank" rel="noopener"
>朋友圈截图生成工具&lt;/a>，可以帮你生成逼真的朋友圈截图，可定制头像、评论、点赞个数等细节。收藏&lt;a class="link" href="https://akarin.dev/WechatMomentScreenshot/" target="_blank" rel="noopener"
>这个地址&lt;/a>，以后再也不怕被群里晒孩子的家长或者搞活动的商家逼着发朋友圈集赞了。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-04-12.png"
width="690"
height="1227"
loading="lazy"
class="gallery-image"
data-flex-grow="56"
data-flex-basis="134px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://86box.net/" target="_blank" rel="noopener"
>86box&lt;/a>，老式 x86 架构计算机模拟器，与 Virtualbox 等虚拟化技术不同的是，86box采用纯软件模拟的方式，实现了经典老式 cpu （如 AMD Am486DX4）的各种技术细节，甚至是当时的硬件缺陷（有些老游戏的 hack 需要这些缺陷）。可以完美复现一台上世纪 90 年代的经典 DOS PC ，用来复古怀旧游戏是再合适不过了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-04-26.png"
width="553"
height="371"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="357px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ztxz16/fastllm" target="_blank" rel="noopener"
>fastllm&lt;/a>，fastllm是纯c++实现，无第三方依赖的高性能大模型推理库（待测试验证）。据宣称：6~7B级模型在安卓端上也可以流畅运行，支持python调用，chatglm-6B级模型单卡可达10000+token / s，支持glm, llmam, moss基座，手机端流畅运行。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-05-17.png"
width="875"
height="356"
loading="lazy"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="589px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://photoai.com" target="_blank" rel="noopener"
>PhotoAI&lt;/a>，作者说，他为这个网站大概写了14000行PHP代码，样式全写在了&lt;code>&amp;lt;style&amp;gt;&lt;/code>标签里，JS全写在&lt;code>&amp;lt;script&amp;gt;&lt;/code>标签里，除了&lt;code>jQuery&lt;/code>没用任何框架，就连布局也是使用&lt;code>float:left&lt;/code>这种老式的浮动实现。然而这个网站确能给他带来每月差不多 &lt;em>6万刀&lt;/em> 的收入。这是不是在吹牛。这个网站的业务是：使用AI生成完全没有任何版权问题的各种人像照片。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-05-41.png"
width="690"
height="617"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://makepad.nl/makepad/examples/ironfish/src/index.html" target="_blank" rel="noopener"
>Ironfish synth&lt;/a>，用rust写的在线合成器，虽然感觉像个 Demo 但完成度很高，音源部分具有两个振荡器（可选正弦波、方波、锯齿波等）和一个噪波通道，滤波器、效果器齐全，另外还有一个可视化音序器。可基于键盘直接演奏。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-05-59.png"
width="690"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 038 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/</link><pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-038-期">机器文摘 第 038 期
&lt;/h1>&lt;h2 id="研究">研究
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.polygon.com/23690187/discord-ai-chatbot-clyde-grandma-exploit-chatgpt" target="_blank" rel="noopener"
>ChatGPT的“奶奶漏洞”&lt;/a>，奶奶漏洞来源自一个用户说他已经过世的奶奶是凝固汽油弹工厂的工程师，用户让 ChatGPT 用他奶奶说睡前故事的形式，详细介绍了凝固汽油弹的制作方法。以此来绕过 ChatGPT 的安全审查，结果当然是，他得逞了。后来还有网友做了试验，以同样的方式可以套取 Windows 各个版本的序列号。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-53-23.png"
width="720"
height="489"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/li>
&lt;li>国外也有“垃圾佬”，这篇&lt;a class="link" href="https://l4rz.net/running-nvidia-sxm-gpus-in-consumer-pcs/" target="_blank" rel="noopener"
>《怎样低成本搭建深度学习电脑》&lt;/a>的文章，介绍了作者怎样通过在二手网站上“捡垃圾”搭建出了性能良好且便宜的GPU工作站。 值得一提的是，作者购买的主要渠道竟然来自国内的著名二手物品交易平台，某鱼。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-54-05.png"
width="690"
height="459"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="长文">长文
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>回顾这些年软件研发的历程，凡是能够做成的软件，无一例外都是抓住了真正存在的需求。这样的需求未必很宏大或者华丽，但一定不是想象种的伪需求。仔细分析之后就会发现，在一个软件产品的生命周期里，开发者所面临的真正（或者说正确的）需求很少，因为找到它们十分不易，它们周边布满了被人们主观意识强加上的伪需求。&lt;a class="link" href="https://cerebralab.com/Imaginary_Problems_Are_the_Root_of_Bad_Software" target="_blank" rel="noopener"
>《伪需求是糟糕软件的根源》&lt;/a>，文章探讨了软件开发中存在的一个问题，即虚构的问题（我将之译为：伪需求）如何导致糟糕的软件结果。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-56-35.png"
width="353"
height="179"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有没有考虑过一个问题，即：为什么随着科技的发展和生产力的提升，人们不是越来越清闲，反而越来越劳累了？这里有篇文章探讨了一些深层次的原因，&lt;a class="link" href="https://theanarchistlibrary.org/library/david-graeber-bullshit-jobs" target="_blank" rel="noopener"
>《狗屁工作》&lt;/a>，此文写于 2013 年，作者是 David Graeber （一名人类学教授）。文章讨论了现代社会中存在的一种现象，即许多人在工作中感到他们所从事的工作毫无意义，没有真正的价值和目的。这些工作被称为&amp;quot;狗屁工作&amp;quot;，作者试图探究狗屁工作的存在原因和对个体和社会的影响。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-56-57.png"
width="602"
height="854"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/laishulu/Sarasa-Term-SC-Nerd" target="_blank" rel="noopener"
>Sarasa Term SC Nerd&lt;/a>，写中文Markdown文件的时候，最怕遇到表格，因为编辑器按照一个中文字符的宽度等于两个英文字符的宽度进行计算，而很多字体在设计时未考虑严格按照这种2:1的宽度比例设计字形，导致在Markdown在编辑状态时的表格分割线错位，看起来十分头疼。经过多方对比，我终于找到了让自己满意的等宽字体，支持中英文字符2：1宽度比例，中文为黑体，英文字符也特别适合写代码。此外还整合了Nerd fonts，支持在终端显示各种漂亮图标。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-58-24.png"
width="690"
height="187"
loading="lazy"
class="gallery-image"
data-flex-grow="368"
data-flex-basis="885px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://reviewgpt.net" target="_blank" rel="noopener"
>ReviewGPT&lt;/a> 写作文、写报告、写邮件，生活中充满了各种写作任务。ReviewGPT 基于 gpt 模型，可为你的文章进行打分、评价，提出修改意见，甚至还可以扮演莎士比亚、金庸等知名作家，帮助你重新撰写，快速提升文章质量。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-58-38.png"
width="690"
height="394"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/binpash/try" target="_blank" rel="noopener"
>try&lt;/a>，刚发布的一个命令行工具，目标是允许你执行命令的时候先检查其执行的后果，然后再决定是否让命令真正生效。真正起到了安全保护的效果。官方介绍这个命令是基于 Linux 的命名空间（通过 unshare ）和 overlayfs 联合文件系统等技术实现。并特别提醒并非基于沙盒，所以还是谨慎执行危险操作吧。比如&lt;code>try rm rf /*&lt;/code>。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-59-26.png"
width="831"
height="467"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="427px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/XingangPan/DragGAN" target="_blank" rel="noopener"
>DragGAN&lt;/a>, 通过拖动就可以完全操纵图像的 AI 模型，现已开放源码！ DragGAN 是由谷歌、麻省理工学院和马克斯普朗克研究所创建的一种新的人工智能模型。可以让你轻松通过点击拖动等简单的交互操作就能改变拍摄对象的姿势、形状和表情。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-16-00-25.png"
width="598"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://flameshot.org/" target="_blank" rel="noopener"
>flameshot&lt;/a>，一个超强的免费截图软件，可以像任何一个截图工具一样截图，最重要的是还有一些附加功能，按一下数字图标，就可以在屏幕上按数字顺序自动生成步骤图示，非常适合生成操作步骤说明。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-16-01-00.png"
width="580"
height="374"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 037 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/</link><pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-037-期">机器文摘 第 037 期
&lt;/h1>&lt;h2 id="研究">研究
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://snap-research.github.io/SnapFusion/" target="_blank" rel="noopener"
>SnapFusion&lt;/a> 文本到图像的扩散模型可以从自然语言描述中创建令人惊叹的图像。然而，这些模型很大，需要高端 GPU 在服务端运行模型。SnapFusion提出了一种通用方法，可以在移动设备上运行的文本到图像扩散模型，且出图时间不到2秒。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-55-06.png"
width="609"
height="899"
loading="lazy"
class="gallery-image"
data-flex-grow="67"
data-flex-basis="162px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://framer.com/ai" target="_blank" rel="noopener"
>Framer&lt;/a> 发布了 AI 工具，直接根据文字需求生成页面，我试了一下，对于个人博客、产品介绍页面等静态展示类型的页面，生成的效果还是十分理想的，而且同步提供桌面端和移动端页面。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-55-33.png"
width="599"
height="710"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="202px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://notes.dt.in.th/HDRQRCode" target="_blank" rel="noopener"
>比&lt;code>#ffffff&lt;/code>还“白”的“超级白”&lt;/a>，这里有网友介绍了一个方法，可以显示更高对比度的二维码（以方便用户扫描识别），据说白的程度超出了sRGB颜色范围，前提是你的显示设备支持HDR。作者的思路是用一段HDR视频在网页中伪装成显示二维码的图片。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-56-11.png"
width="690"
height="305"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="542px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://rwmj.wordpress.com/2023/06/14/i-booted-linux-292612-times/" target="_blank" rel="noopener"
>我在21小时内重启系统29万次&lt;/a>，Linux 6.4内核有一个bug可能导致启动时挂起，但概率很低。为了复现bug，Richard WM Jones重启了29万次电脑，最终找到了问题。这让我想起了之前修改不容易复现Bug的艰辛。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-56-28.png"
width="690"
height="735"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="225px"
>&lt;/li>
&lt;li>我发现一个用chatGPT翻译整段文字的小技巧，那就是在他翻译完成之后，再将这段话发给他，让他根据通顺程度和合理性进行二次润色，出来的结果就好很多了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-58-53.png"
width="717"
height="648"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
>&lt;/li>
&lt;li>Python写代码很爽，但是想打包发布成果的时候就稍微麻烦一些了，毕竟一大堆环境依赖和包依赖。我之前一直用的是PyInstaller作为打包工具，但是现在我又发现了这个&lt;a class="link" href="https://github.com/Nuitka/Nuitka" target="_blank" rel="noopener"
>Nuitka&lt;/a>。它的打包原理是：直接把 Python 代码转成 C 代码再编译，这样打包出来的成果占用小、执行效率也高，尤其适合PyQt编写的桌面程序。另外，著名的 Blender 就是用 Nuitka 编译的。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-59-12.png"
width="428"
height="272"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="377px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="长文">长文
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.raptitude.com/2022/01/everything-must-be-paid-for-twice/" target="_blank" rel="noopener"
>你买的每样东西都需要支付两次成本&lt;/a>，这篇在Hacker News上的文章引起我的强烈共鸣。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-59-33.png"
width="600"
height="400"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/li>
&lt;/ul>
&lt;p>它提出了一个有趣的观点，我以前从未意识到：&lt;/p>
&lt;p>每样东西都需要支付两次成本。&lt;/p>
&lt;p>通常，我们只关注第一次支付的成本，也就是购买时花的钱，比如买一台相机、一架钢琴或一本小说。&lt;/p>
&lt;p>然而，作者指出，如果你不支付第二次的成本，你之前花的钱就等于打水漂了。&lt;/p>
&lt;p>第二次成本指的是，你需要花时间和精力去充分使用你所购买的物品。&lt;/p>
&lt;p>比如认真阅读一本书，练习钢琴以提高演奏水平等等。&lt;/p>
&lt;p>然而，我们常常只停留在第一次购买时的满足感上，然后追求下一个。&lt;/p>
&lt;p>随着时间的推移，大量未支付第二次成本的物品使我们积累了一种无形的债务。&lt;/p>
&lt;p>为此经常感到挫败。&lt;/p>
&lt;p>这种挫败感促使我们寻求那些能够刺激我们的短期享受，比如玩手机、享用美食。&lt;/p>
&lt;p>进一步导致没有时间支付第二次成本。&lt;/p>
&lt;p>那么，有什么办法可以改变这种情况吗？&lt;/p>
&lt;p>作者说，唯一的解决办法就是控制购买欲望，强迫自己安排时间来履行第二次支付的责任。&lt;/p>
&lt;p>尽管这听起来可能有些不舒服，但如果我们能克服这种不舒服的临界点，例如学会一首乐曲，耐心读完一本书，我们将会获得意想不到的奖励时刻。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.ratatype.com" target="_blank" rel="noopener"
>ratatype&lt;/a>，在线键盘盲打指法练习，有完整的练习教程，从初级到高级都有。有点儿像Dos时代的著名打字练习软件TT，不过是网页版的。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-16-00-11.png"
width="690"
height="360"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="460px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://play0ad.com/download" target="_blank" rel="noopener"
>0A.D.&lt;/a>，帝国时代是个经典游戏，这里有个开源版，名字叫做0AD，由Wildfire Games开发，虽然是免费开源的游戏，但是效果和可玩性都非常高，适合在周末的午后来一把怀旧局。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-16-00-26.png"
width="690"
height="405"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://landing.love" target="_blank" rel="noopener"
>landing.love&lt;/a>，一个专门收集各种网页动画效果的网站，目前已收录超过400个具有新颖创意动效的网站，并配有截图和录屏视频。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-16-00-47.png"
width="590"
height="486"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="291px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/princeton-vl/infinigen" target="_blank" rel="noopener"
>infinigen&lt;/a>，一款面向计算机视觉研究的3D场景自动生成器，提供多样且高质量的3D训练数据。基于Blender，免费且开源。可以通过重写随机化的默认参数来完全控制资产生成。提供了对自然界中多种对象和场景的生成器，包括植物、动物、地形以及火、云、雨、雪等自然现象。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-16-01-41.png"
width="951"
height="522"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://yjdoc2.github.io/8086-emulator-web/compile" target="_blank" rel="noopener"
>8086-emulator-web&lt;/a> ，用js编写的的8086 cpu模拟器，支持汇编语言在线编写、编译和调试运行，是一个学习汇编语言和理解计算机原理的好工具。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-16-01-04.png"
width="690"
height="320"
loading="lazy"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="517px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 036 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-036-期">机器文摘 第 036 期
&lt;/h1>&lt;h2 id="研究">研究
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://video.weibo.com/show?fid=1034:4911535232057363" target="_blank" rel="noopener"
>软驱阵列演奏音乐&lt;/a>，国外大神用512个软驱、16个硬盘、4个扫描仪，组装成阵列，通过编程的方式控制电机震动发出声音，组成各声部。这么多软驱，让我想到了退休老干部合唱团。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-49-03.png"
width="1555"
height="926"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="403px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://video.weibo.com/show?fid=1034:4564677670141974" target="_blank" rel="noopener"
>大脑能像身体那样锻炼吗？&lt;/a>，如何训练大脑？提高记忆力、注意力和智力！这个视频进行了讲解，总之就是，用进废退，改变日常默认行动，让大脑动起来。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-49-59.png"
width="743"
height="450"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://gaultier.github.io/blog/x11_x64.html" target="_blank" rel="noopener"
>用纯汇编写一个GUI&lt;/a>，跟随这篇教学文章，通过编写图形界面的方式来学习汇编语言吧。顺便，作者想挑战一下，最小的GUI程序其可执行二进制文件能有多小。（现在的可执行文件动不动就好几十上百MB）​。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-50-39.png"
width="1046"
height="463"
loading="lazy"
class="gallery-image"
data-flex-grow="225"
data-flex-basis="542px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.betacat.io/post/2023/06/summarize-hacker-news-by-chatgpt" target="_blank" rel="noopener"
>让 ChatGPT 帮我们总结 Hacker News&lt;/a>，让AI每天帮我总结新闻摘要，这个想法我已经考虑很久了，现在已经有人做了实现。这篇文章介绍了一个开源静态网站的实现，它利用 ChatGPT 的总结能力，直接将每条Hackernews的新闻用一两句话总结出来，然后发布到GithubPages 可以节约我们每天看新闻的时间。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-51-29.png"
width="891"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="517px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.web3brand.io/p/maximize-unregretted-user-time" target="_blank" rel="noopener"
>马斯克专访：推特的混乱过去了，现在的目标是最大化用户无悔时间！&lt;/a>，我不喜欢看八卦，但是科技的除外。马斯克收购 Twitter 几个月过去了，大家还在等着看笑话，但是为什么没等到，以及开掉一半人之后效率却提升那么多？
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-52-02.png"
width="680"
height="417"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="391px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/AI4Finance-Foundation/FinGPT" target="_blank" rel="noopener"
>FinGPT&lt;/a>，一个面向金融领域的开源语言模型，采用以数据为中心的方法，为研究人员和实践者提供易于使用的资源，致力于做金融领域的chatGPT。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-52-48.png"
width="822"
height="462"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="427px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/facebookresearch/audiocraft" target="_blank" rel="noopener"
>Audiocraft&lt;/a>，facebook发布的一个PyTorch库，用于音频生成的深度学习研究。目前，它提供了用于从文本生成音乐的MusicGen代码和模型。模型使用2万小时正版授权音乐训练。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-53-34.png"
width="816"
height="350"
loading="lazy"
class="gallery-image"
data-flex-grow="233"
data-flex-basis="559px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/mljar/mercury" target="_blank" rel="noopener"
>Mercury&lt;/a>，在 Jupyter Notebook 中构建 Web 应用程序，允许您在Python笔记本中添加交互式小部件，然后将笔记本发布为带交互界面的Web应用程序。我的感受是，Mercury就是 notebook版的&lt;a class="link" href="https://github.com/gradio-app/gradio" target="_blank" rel="noopener"
>gradio&lt;/a> ​​​。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-53-58.png"
width="805"
height="421"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/reactive-python/reactpy" target="_blank" rel="noopener"
>ReactPy&lt;/a>，React是最流行的用于构建UI的前端框架，现在所有Python开发人员都可以使用它。比起gradio，这个reactpy的抽象层级更低一些，自由度更高了，我猜测目标用户应该是不喜欢写前端代码但是又希望掌控页面细节的python程序员。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-56-24.png"
width="632"
height="148"
loading="lazy"
class="gallery-image"
data-flex-grow="427"
data-flex-basis="1024px"
>&lt;/li>
&lt;li>&lt;a class="link" href="http://ggml.ai/" target="_blank" rel="noopener"
>GGML&lt;/a>，一个用于机器学习的张量库，采用纯C++实现，无其他依赖项。旨在在普通硬件上实现大型模型和高性能。它同时也是 llama.cpp 和 whisper.cpp 的底层库。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-57-18.png"
width="629"
height="327"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Genymobile/scrcpy" target="_blank" rel="noopener"
>Scrcpy&lt;/a>，一个让人相见恨晚的app，可以通过USB或TCP/IP连接镜像Android设备的视频和音频，并允许使用计算机的键盘和鼠标来控制设备。它不需要任何root权限，并且兼容Linux、Windows和macOS操作系统。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-17-02-19.png"
width="408"
height="589"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="166px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://maketafi.com/ai" target="_blank" rel="noopener"
>Tafi&lt;/a>，通过自然语言生成3D模型，质量号称接近AAA级游戏，可以导出创建的角色到Blender、Unreal 或 Unity中。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-17-02-52.png"
width="1080"
height="608"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Hufe921/canvas-editor" target="_blank" rel="noopener"
>canvas-editor&lt;/a>，一个基于 canvas/svg 实现的富文本编辑器，在市面上，使用 Canvas 实现整个编辑器的开源项目并不常见，大多数情况下仍然使用 DOM 来实现。使用 Canvas 的最显著特点是其出色的性能，但实现起来的成本也更高。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-17-15-39.png"
width="1200"
height="668"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://markmap.js.org%e2%80%8b%e2%80%8b" target="_blank" rel="noopener"
>markmap.js&lt;/a>，一个用markdown文本制作思维导图的工具，提供了vscode的插件可直接在编辑器预览。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-17-16-02.png"
width="611"
height="458"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 035 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/</link><pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-035-期">机器文摘 第 035 期
&lt;/h1>&lt;h2 id="研究">研究
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.reproof.app/blog/notes-apps-help-us-forget" target="_blank" rel="noopener"
>笔记帮我们记住还是忘记？&lt;/a>这篇文章讨论了笔记对帮助我们遗忘的作用。作者认为，随着时间的推移，我们无法记住所有的事情，但是只要我们记录了重要的信息，就可以在需要时再次查找，因此笔记实际上帮助我们遗忘。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-09-37.png"
width="1173"
height="488"
loading="lazy"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="576px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://research.nvidia.com/labs/dir/neuralangelo/" target="_blank" rel="noopener"
>高保真神经表面重建&lt;/a>，Nvidia 新发布的这个 Neuralangelo 有些猛，随便给一个视频就能进行精细3D建模，也许要不多久激光点云技术就要淘汰了。值得关注 ！
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-12-49.png"
width="936"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="483px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Neo-Desktop/WindowsXPKg" target="_blank" rel="noopener"
>Windows XP 激活算法被破解&lt;/a>， XPKeygen是一个可以随意生成XP有效安装密钥的程序，当前的电脑可能用不到了。不过可能还有一些老旧的设备，只能通过 Windows XP 来操作，这时候这个东西就派上用场了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-17-33.png"
width="610"
height="285"
loading="lazy"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="513px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.v2ex.com/t/944717" target="_blank" rel="noopener"
>一个整活儿的开源编辑器&lt;/a>，data:text/html;base64,PGh0bWwgY29udGVudGVkaXRhYmxlPmVkaXQgbWU8L2h0bWw+ 把这个代码粘到浏览器地址栏，竟然是个记事本app，如果从IDE拷贝代码过去，竟然还支持代码高亮。。。。加入到收藏夹即可食用。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-20-19.png"
width="663"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://mymodernmet.com/sea-turtle-birch-aquarium-3d-printed-brace" target="_blank" rel="noopener"
>3D打印拯救海龟&lt;/a> ，2017年，伯奇水族馆与加州大学圣地亚哥分校图书馆的数字媒体实验室合作。他们一起创造了一种首创的3D打印支架，以固定她的外壳上的缝隙。现在，六年后，这种生物及其照顾者继续从这项发明中获益。这只海龟最近接受了年度检查，健康状况良好。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-21-40.png"
width="613"
height="372"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://kuenzi.dev/toothbrush/" target="_blank" rel="noopener"
>破解“智能”牙刷&lt;/a> 国外一个博主记录了他破解自己的电动牙刷的过程。由于牙刷的NFC芯片采用的加密方式是密码加密，并且在通讯过程中是用了明文传递，所以他采取了截获通讯信号的方式窃听到了密码，然后就解锁了各种姿势开始为所欲为了。。。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-22-42.png"
width="606"
height="363"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://bjoernkarmann.dk/project/paragraphica" target="_blank" rel="noopener"
>真·AI相机&lt;/a> ，paragraphica 是一个没有镜头但是却有物理实体的“AI相机”，使用位置、时间等参数数据生成特定地点和时刻的prompt，然后由人工智能来生成“照片”。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-24-07.png"
width="578"
height="513"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.dora.run/ai" target="_blank" rel="noopener"
>Droa&lt;/a>，一个通过自然语言进行网站开发的工具，你只需要提需求，剩下的交给AI。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-26-05.png"
width="821"
height="496"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/SupaGruen/StableDiffusion-CheatSheet" target="_blank" rel="noopener"
>StableDiffusion-CheatSheet&lt;/a>，经常用 Stable Diffusion 进行 AI 绘图的，可以看下这个开源速查表。里面拥有超过 700 种经过测试的艺术风格，可快速搜索查找各类艺术家，并支持一键复制 Prompt。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-26-50.png"
width="742"
height="521"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="341px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.math.cmu.edu/~jmackey/151_128/bws_book.pdf" target="_blank" rel="noopener"
>你一直想知道的关于数学的一切&lt;/a>，此书是CMU数学科学系的博士生布兰登·W·沙利文撰写的，旨在引导读者进入抽象数学和证明写作的世界，帮助培养读者的数学思维和表达能力。主题涵盖集合、逻辑、归纳法、关系、函数、基数和组合数学等基础和工具。暂未有中文翻译。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-27-26.png"
width="724"
height="579"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="300px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/eastlakeside/interpy-zh" target="_blank" rel="noopener"
>Python进阶&lt;/a>，是《Intermediate Python》的中文译本。2021最新目录版，实时更新托管在&lt;a class="link" href="https://py.eastlakeside.cn" target="_blank" rel="noopener"
>GithubPages&lt;/a>。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-28-23.png"
width="1037"
height="350"
loading="lazy"
class="gallery-image"
data-flex-grow="296"
data-flex-basis="711px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://csspro.com/" target="_blank" rel="noopener"
>CSSPro&lt;/a>，一个所见即所得的在线CSS可视化开发工具，直接在页面运行，那里修改点哪里。效果真的很惊艳。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-29-07.png"
width="921"
height="537"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/makeplane/plane" target="_blank" rel="noopener"
>Plane&lt;/a>，开源版 JIRA ！不少软件开发者都使用JIRA进行缺陷管理，JIRA确实很强大，也很好用。现在，开源版的来了，据说完全可以作为JIRA的平替。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-30-19.png"
width="1139"
height="595"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://openmlsys.github.io/index.html" target="_blank" rel="noopener"
>机器学习系统：设计和实现&lt;/a>，一本关于机器学习的电子书，本书希望做成世界上第一本全面讲述机器学习系统知识的开源书籍。可以看作一门衔接机器学习和计算机系统的课程 ​​。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-31-04.png"
width="234"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="60"
data-flex-basis="144px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://callannie.ai/" target="_blank" rel="noopener"
>Callanie&lt;/a>，练习英语口语的AI对话机器人，支持国内手机号注册，免费且流畅。后端基于大语言模型，可以陪你聊各种话题。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-31-49.png"
width="303"
height="570"
loading="lazy"
class="gallery-image"
data-flex-grow="53"
data-flex-basis="127px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 034 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-034-期">机器文摘 第 034 期
&lt;/h1>&lt;h2 id="研究">研究
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://samwho.dev/memory-allocation/" target="_blank" rel="noopener"
>图解内存分配&lt;/a>，文章展示了 C/C++ 编程中的内存分配过程，包括静态和动态内存分配技术、它们的优势，以及有效的内存管理所需考虑的事项。以图解的形式展示了内存分配过程，希望读者可以通过本文更好地理解内存分配相关的概念，并在实际编程中对内存进行更加高效的管理。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-49-39.png"
width="759"
height="298"
loading="lazy"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.koehntopp.info/2023/05/17/50-years-in-filesystems-towards-2004-lfs.html" target="_blank" rel="noopener"
>文件系统五十年&lt;/a>，这是一个系列文章，详细记录了计算机文件系统的发展历程。也许我们身在其中无法感受到它的进步，但是回顾历史我们会发现，即便是我们不容易注意到的部分，也在不停地发展和优化。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-50-33.png"
width="672"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://xorvoid.com/sectorc.html" target="_blank" rel="noopener"
>只有512字节的C编译器&lt;/a>，这篇文章介绍了一个怎样实现最小编译器的思路，SectorC （github） 是一个用 x86-16 汇编编写的 C 编译器，适合 x512 机器的 86 字节引导扇区。它支持 C 的子集，足够大，可以编写真实有趣的程序。它很可能是有史以来最小的C编译器。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-51-20.png"
width="764"
height="366"
loading="lazy"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="500px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.amygoodchild.com/blog/computer-art-50s-and-60s" target="_blank" rel="noopener"
>上世纪50~60年代的计算机艺术&lt;/a>，数字艺术的发展简史。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-51-53.png"
width="781"
height="494"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="379px"
>&lt;/li>
&lt;li>&lt;a class="link" href="" >win10的隐藏功能&lt;/a>，原来win10还有这个功能。按Ctrl + Alt + Del 后，按住Ctrl不松，再点击右下角的电源符号，就会进入紧急重启（Emergency Restart）界面。应该是一种强制重启。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-52-04.png"
width="690"
height="518"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/SevaSk/ecoute" target="_blank" rel="noopener"
>Ecoute&lt;/a>，可用于远程面试作弊的工具？Ecoute 是一种实时转录工具，可在文本框中为用户的麦克风输入（您）和用户的扬声器输出（扬声器）提供实时翻译。它还使用 OpenAI 的 GPT-3.5 生成建议答复内容，供用户“参考”。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-52-39.png"
width="820"
height="386"
loading="lazy"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://app.rask.ai/" target="_blank" rel="noopener"
>rask.ai&lt;/a>，自动将视频转成“译制片”，在对内容进行翻译的同时，会尽量保持之前的音色和语调，端到端给你的视频完成多语配音，后续还会推出唇形同步合成。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-53-28.png"
width="1171"
height="644"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/tango-how-to-guides-and-s/lggdbpblkekjjbobadliahffoaobaknh" target="_blank" rel="noopener"
>Tango&lt;/a>，一个Chrome浏览器插件，能帮你生成一个网站的操作指南。它会自动记录所有的操作流程，并做相应的截图和注解文档。你只需要点一遍就行了。目前还只能生成英文版的，不过自己翻译也不麻烦。可以节省不少时间。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-53-58.png"
width="632"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="388px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://praeclarum.org/2023/05/19/webgpu-torch.html" target="_blank" rel="noopener"
>WebGPU-torch&lt;/a>，PyTroch的webgpu实现。我测试了一下，我的浏览器目前还不支持。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-54-28.png"
width="1384"
height="796"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/li>
&lt;li>&lt;a class="link" href="http://ogden.basic-english.org/" target="_blank" rel="noopener"
>basic-english&lt;/a>，“基础英语”的概念是：25，000个单词的牛津袖珍英语词典去掉冗余，并消除组合单词，90%的概念可以用850个单词来实现。使用这些基础英语可以简化日常工作和交流。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-55-26.png"
width="778"
height="516"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/raunofreiberg/interfaces" target="_blank" rel="noopener"
>Web界面准则&lt;/a>，讲解如何提升网页界面的交互性、排版、动画、辅助功能、优化和设计。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-56-18.png"
width="834"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="429px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/excalidraw/excalidraw" target="_blank" rel="noopener"
>excalidraw&lt;/a>，开源虚拟手绘风格白板程序，支持端到端加密在线协作。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-56-43.png"
width="759"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="沉思录">沉思录
&lt;/h2>&lt;ul>
&lt;li>一切商业的本质都是：收购一些东西（包括原材料、人力服务），经过加工（加工过程产生价值）后变成产品或服务出售。这里的原材料可以是实体物品也可以是信息。所以关键动作就是：收、加工、出售，从重要性上来说，出售大于加工大于收。所以如果要策划自己的产品，解决和分析问题的优先级也应如此，我之前想的正好一反；&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 033 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-033-期">机器文摘 第 033 期
&lt;/h1>&lt;h2 id="研究">研究
&lt;/h2>&lt;h3 id="全键盘信息终端">全键盘信息终端
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/2023-05-24-09-22-11.png"
width="1335"
height="637"
loading="lazy"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>
我一直很怀念使用黑莓手机的日子。&lt;/p>
&lt;p>物理全键盘的手感比起现在硬邦邦的触摸屏真不知道好到哪里去了。&lt;/p>
&lt;p>多少次盯着抽屉里的黑莓尸体，都在想有没有办法再次发挥它的余热。&lt;/p>
&lt;p>现在机会来了，有人将树莓派和黑莓手机的全键盘（带触摸板的那一款）结合起来做了一个终端。&lt;/p>
&lt;p>取名：&lt;a class="link" href="https://beepberry.sqfmi.com/" target="_blank" rel="noopener"
>Beepberry&lt;/a>，具有400*200分辨率的LCD屏幕，和usb type-c接口。&lt;/p>
&lt;h3 id="自己动手给树莓派写操作系统">自己动手给树莓派写操作系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/2023-05-24-09-31-09.png"
width="677"
height="359"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>
学习操作系统的最佳手段是自己动手写一个。&lt;/p>
&lt;p>这类教程很多，一般都是针对x86平台，树莓派的比较少见。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/isometimes/rpi4-osdev" target="_blank" rel="noopener"
>《给树莓派编写“裸机”操作系统》&lt;/a>来自github上的一个开源项目。&lt;/p>
&lt;p>可以带你从树莓派的硬件层基础上直接构建一个的完整操作系统。&lt;/p>
&lt;h3 id="关于-demoscene-制作的一些文章">关于 Demoscene 制作的一些文章
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/2023-05-24-09-40-25.png"
width="471"
height="314"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>
Demoscene（也称为Demo Party）是一种计算机艺术形式，旨在展示计算机的音频和图形表现能力。Demoscene通常是由小团队制作的演示性程序，也被称为demo，它集计算机程序、音乐、图形和动画于一身，是八十年代初期在个人计算机上发展起来的一种文化和艺术运动。Demoscene的主要目的是展示计算机和程序的美感，通常使用3D渲染和其他复杂的视觉效果，展示计算机的高级图形和音频处理能力。&lt;/p>
&lt;p>我对于如何制作这些炫酷的 demo 一直很感兴趣，但是网上关于这方面的资料非常少，成体系的就更少了。&lt;/p>
&lt;p>这里收录了一些比较经典的相关资料：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.ctrl-alt-test.fr/2023/procedural-3d-mesh-generation-in-a-64kb-intro/" target="_blank" rel="noopener"
>64kb的demos&lt;/a>介绍了基于SDF（Signed Distance Field，有符号距离场）生成三维网格的方法，这个方法是大部分demo用于在三维场景中产生三维模型的主要方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.flipcode.com/archives/The_Art_of_Demomaking-Issue_01_Prologue.shtml" target="_blank" rel="noopener"
>The_Art_of_Demomaking&lt;/a>是一套很系统的教程，讲述Demo的概念、发展历史以及制作过程需要了解的基础知识。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.pbr-book.org/3ed-2018/contents" target="_blank" rel="noopener"
>pbr-book&lt;/a>是一本关于基于物理的渲染（Physically Based Rendering，简称PBR）的经典教材。内容包括计算机图形学相关的基础概念、渲染算法、工作流程和高级特性等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="怎样防止针对llm的prompt攻击">怎样防止针对LLM的prompt攻击
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/2023-05-24-09-52-09.png"
width="734"
height="401"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="439px"
>
就像之前流行的sql注入攻击，针对大语言模型的提示语注入攻击现在变得也很常见。&lt;/p>
&lt;p>一种比较典型的攻击场景是，通过一段特定的提示语，解锁chatGPT原本被封印的能力。&lt;/p>
&lt;p>或者对于接入了其他工具接口的语言模型，通过特定的提示语让其执行危险操作（如：删除所有信息）。&lt;/p>
&lt;p>这对于使用者来说可能危害不大，但对于服务的提供者是一个不小的挑战。&lt;/p>
&lt;p>&lt;a class="link" href="https://simonwillison.net/2023/Apr/25/dual-llm-pattern/" target="_blank" rel="noopener"
>《用于构建可以抵抗即时注入的 AI 助手的双 LLM 模式》&lt;/a>提出了一种可能可行的解决方案。&lt;/p>
&lt;p>即使用双模型的配置，协同工作，将具有执行危险操作的特权模型放在另一个模型后面，中间使用过滤器进行风险审查，即未被审查的内容永远不会发送到特权模型。&lt;/p>
&lt;h2 id="资源">资源：
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://gamma.app/" target="_blank" rel="noopener"
>gamma&lt;/a>，AI帮你做PPT。支持自然语言描述需要生成的内容，自动给出ppt的大纲和每页基本的排版布局；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/2023-05-24-10-00-52.png"
width="742"
height="687"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="259px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.3blue1brown.com/" target="_blank" rel="noopener"
>3blue1brown&lt;/a>，YouTube上最好的数学科普视频，特点是使用动画直观展示计算原理；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/2023-05-24-10-01-29.png"
width="953"
height="611"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="374px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 032 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-032-期">机器文摘 第 032 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="ai歌手的训练与使用">AI歌手的训练与使用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-14-33-53.png"
width="1011"
height="641"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>
最近火了很多AI歌手（即：用AI模型模仿某位歌手的声音），其中b站上AI孙燕姿演唱的《漠河舞厅》、《撒日朗》等歌曲播放已超百万。&lt;/p>
&lt;p>为了研究实现原理，我也找到了开源工具体验了一下。&lt;/p>
&lt;p>具体步骤主要总结如下：&lt;/p>
&lt;ol>
&lt;li>选定某一个歌手，找到具有代表性的几首歌曲，通过&lt;a class="link" href="https://ultimatevocalremover.com/" target="_blank" rel="noopener"
>Ultimate Vocal Remover&lt;/a>软件利用AI做人声和伴奏的分离，主要用于获取干净的纯人声用于模型训练。（不得不说现在基于AI模型的人声、伴奏分离做的是真的强，可以做到非常干净的提取，让你感觉像是原始独立的音轨）。&lt;/li>
&lt;li>通过安装&lt;a class="link" href="https://github.com/voicepaw/so-vits-svc-fork" target="_blank" rel="noopener"
>so-vits-svc-fork&lt;/a>这个一体化开源工具进行模型训练，具体方法见&lt;a class="link" href="https://github.com/voicepaw/so-vits-svc-fork/blob/main/README_zh_CN.md" target="_blank" rel="noopener"
>so-vits-svc-fork的Readme&lt;/a>，从数据预处理到最后的模型导出和推理都已经做好了，甚至还提供了图形界面。&lt;/li>
&lt;li>继续使用so-vits-svc-fork提供的gui界面进行操作，将模型载入，将预期修改歌曲的原唱人声（提取方式同第1步）传入，运行推理获得定制的人声（注意看文档的各种参数）。&lt;/li>
&lt;li>将第3步推理所得干净人声，跟原唱分离的干净背景音乐进行混音合成，即可获得一首新歌曲了。&lt;/li>
&lt;/ol>
&lt;h3 id="怎样用口袋计算器玩耍">怎样用口袋计算器玩耍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-14-49-14.png"
width="716"
height="514"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="334px"
>
在移动互联网时代，人打发无聊的方式实在是太多了，视频聊天、阅读各种资讯八卦、观看短视频、手游等等。&lt;/p>
&lt;p>功能机的时代，我有印象的打发无聊的事情是手机上的贪食蛇、发短信、wap资讯等等，也算不错了。&lt;/p>
&lt;p>如果时间来到上世纪七十年代呢？那个时代的没有随身携带的手机，怎么打发时间？&lt;/p>
&lt;p>答案是：如果有一个随身携带的计算器也行，这里有一本书&lt;a class="link" href="https://archive.org/details/htewypc" target="_blank" rel="noopener"
>《How To Entertain With Your Pocket Calculator》&lt;/a>，出版于上世纪七十年代。书中花了大量的篇幅介绍了很多种基于数字的游戏，我翻看了一下，我觉得可能得无聊到一定的程度我才能愿意玩书里的游戏。&lt;/p>
&lt;h3 id="llm的几篇介绍文章">LLM的几篇介绍文章
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-14-56-38.png"
width="703"
height="332"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="508px"
>
Large Language Model (LLM) 即大规模语言模型，是一种基于深度学习的自然语言处理模型，它能够学习到自然语言的语法和语义，从而可以生成人类可读的文本。
与其感叹以chatGPT为代表的大语言模型发展太快，不如静下心来，读一读关于LLM的一些基础知识和使用方法，我找了三篇比较有代表性的放在这里收藏。&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://github.com/RUCAIBox/LLMSurvey/blob/main/assets/LLM_Survey_Chinese_0418.pdf" target="_blank" rel="noopener"
>大语言模型综述&lt;/a>，认真地概括并解释了什么是LLM和它的基本原理。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bmpi.dev/dev/deep-learning/nlp-language-models/" target="_blank" rel="noopener"
>ChatGPT背后的语言模型简史&lt;/a>，从发展历史上捋一捋各种语言模型的辈分。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/datawhalechina/prompt-engineering-for-developers" target="_blank" rel="noopener"
>prompt-engineering-for-developers&lt;/a>一个中文版的 Prompt Engineering 教程，翻译自：吴恩达《ChatGPT Prompt Engineering for Developers》课程，主要内容为指导开发者如何构建 Prompt 并基于 OpenAI API 构建新的、基于 LLM 的应用；&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ninehills/ninehills.github.io/issues/92" target="_blank" rel="noopener"
>大语言模型微调技术笔记&lt;/a>，记录了基于 LLM 进行微调训练的实战技巧。&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://sinerider.com/" target="_blank" rel="noopener"
>sinerider&lt;/a>，一个很有创意的数学学习游戏，让你通过数学函数构建图像从而帮助画面中的角色到达目标地点。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-15-04-41.png"
width="810"
height="708"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="274px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://anvaka.github.io/map-of-github/#0.87/0/16.7" target="_blank" rel="noopener"
>map-of-github&lt;/a>，以节点地图的方式展示Github上面超过40万个仓库，通过虚拟大陆的方式展示他们之间的关系。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-15-07-40.png"
width="1274"
height="682"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://learngitbranching.js.org/?locale=zh_CN" target="_blank" rel="noopener"
>learngitbranching&lt;/a>，以交互式游戏的方式学习git命令。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-15-11-32.png"
width="569"
height="598"
loading="lazy"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="228px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://vgamuseum.ru/" target="_blank" rel="noopener"
>&lt;/a>，在线显卡博物馆，收藏了1982年到2012年之间发布的各款显卡，包括高清图片和规格参数的介绍；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-15-14-37.png"
width="1364"
height="571"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="573px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 031 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/</link><pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-031-期">机器文摘 第 031 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="怎样驱动上个世纪的网络摄像头">怎样驱动上个世纪的网络摄像头
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-09-20-31.png"
width="697"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>
国外有个老哥，在帮朋友收拾废品的时候，获得了一个老旧的摄像头。&lt;/p>
&lt;p>于是他按耐不住想感受一下，这个来自上个世纪的“古董”，还能打吗？&lt;/p>
&lt;p>由于年代比较久远，厂家也不再提供驱动程序的更新。&lt;/p>
&lt;p>哥们不得不在虚拟机里全新安装一个windows xp，成功启动摄像头，并获得“清晰图像”。&lt;/p>
&lt;p>安装xp时有个插曲：安装界面里的进度条仅用时几十秒就走完了原本几十分钟的倒计时（所以说微软的进度条是如何推断剩余时间的永远是个迷）。&lt;/p>
&lt;p>在经过一番体验之后，又跃跃欲试准备自己给它手搓一个在现代操作系统下的驱动程序。&lt;/p>
&lt;p>整个过程记录在&lt;a class="link" href="https://blog.benjojo.co.uk/post/quickcam-usb-userspace-driver" target="_blank" rel="noopener"
>《一个1999年的摄像头复活的故事》&lt;/a>。&lt;/p>
&lt;p>整个故事都充满了一种“我不知道这么做有什么意义，但是我就是可以”的极客风格（也是我收录它的主要原因）。&lt;/p>
&lt;h3 id="webgpu-科普">webGPU 科普
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-09-36-36.png"
width="673"
height="338"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="477px"
>
最近谷歌浏览器率先宣布全面支持 webGPU ，预计到今年年底各大浏览器也都会跟进并提供支持。&lt;/p>
&lt;p>webGPU 从名字上看跟显卡和浏览器有关，可是之前已经有webgl了，这次又有什么变化？&lt;/p>
&lt;p>通过多方面信息的搜索，我得到的结论是：webGPU 更充分地暴露了显卡的计算能力，GPU不再只是做图形渲染相关的事情，而是根据webGPU提供的相关专业接口，可以执行深度学习之类的更通用的计算工作。&lt;/p>
&lt;p>如果想了解的更全面一些，这篇&lt;a class="link" href="https://cohost.org/mcc/post/1406157-i-want-to-talk-about-webgpu" target="_blank" rel="noopener"
>《谈谈 webGPU》&lt;/a>文章十分值得一读。&lt;/p>
&lt;p>作者对 webGPU 这一技术介绍的比较详尽，从各个图形接口的发展历史一直到对未来如何应用的展望，都包括了。&lt;/p>
&lt;h3 id="如何翻译一本书">如何翻译一本书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-09-49-38.png"
width="709"
height="354"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>
&lt;a class="link" href="https://sspai.com/post/79534" target="_blank" rel="noopener"
>《从不自量力到 AI 助力，我如何翻译完一整本英文书》&lt;/a>
这是一个关于执行力的故事。&lt;/p>
&lt;p>主题是：如何借助AI和现代信息工具，实现看似不可能完成的任务。&lt;/p>
&lt;p>在这个时代，个体的力量很渺小，因为个人几乎无法独立完成任何事情。&lt;/p>
&lt;p>但同时，借助科技工具和基础设施的力量，1 个人甚至可以完成之前需要一个上百人公司才能做到的事情，这让个体变得非常强大。&lt;/p>
&lt;h3 id="如何刷路由器">如何刷路由器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-00-09.png"
width="600"
height="417"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="345px"
>
&lt;a class="link" href="https://www.v2ex.com/" target="_blank" rel="noopener"
>V站&lt;/a>上说，中年技术男有三大爱好：钓鱼、NAS、软路由。&lt;/p>
&lt;p>&lt;del>我一样也没沾边儿，但还是克制不住关注相关技术。&lt;/del>&lt;/p>
&lt;p>之前多次想拿自己家的路由器开刀，刷一个openwrt系统，然后就可以各种折腾（科学上网、内网穿透等等）了。&lt;/p>
&lt;p>但是一直没有动手，今天看到这篇&lt;a class="link" href="https://a-wing.top/linux/2023/05/01/start-openwrt" target="_blank" rel="noopener"
>自己动手定制你的路由器&lt;/a>写的如此详细，还是心动了一下。&lt;/p>
&lt;p>先收藏吧。&lt;/p>
&lt;h3 id="仅用csshtml实现三维动画">仅用CSS+HTML实现三维动画
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-06-52.png"
width="632"
height="161"
loading="lazy"
class="gallery-image"
data-flex-grow="392"
data-flex-basis="942px"
>
CSS 的 &lt;code>translate3d&lt;/code>用到的不多。&lt;/p>
&lt;p>如果使用巧妙的话，可以帮你实现很出彩的 3D 动画效果，国外有高手在给自己的文章配数学公式的时候，利用CSS制作了一些可以动态显示的公式图表。这篇&lt;a class="link" href="https://x.st/spinning-diagrams-with-css/" target="_blank" rel="noopener"
>CSS 3D图表&lt;/a>记录了它们的实现细节和技术原理。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.window-swap.com/Window" target="_blank" rel="noopener"
>window-swap&lt;/a>，随机看别人家的窗外景色。这个网站每次刷新都随机显示一个网友共享的摄像头视角，一般是自家的窗外。可以随时体验全球各地的邻家风景。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-14-06.png"
width="1371"
height="929"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.landiannews.com/archives/98512.html" target="_blank" rel="noopener"
>foobar2000&lt;/a>，经典的音乐播放器终于更新了。2002年发布的foobar2000播放器曾经是很多发烧友的最爱，如今过了20多年，居然更新了2.0稳定版，值得收藏；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-15-52.png"
width="743"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://lost-at-sql.therobinlord.com/" target="_blank" rel="noopener"
>lost-at-sql&lt;/a>，一个在线学习 sql 的交互游戏，通过游戏闯关的方式练习 sql 技能；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-18-25.png"
width="745"
height="484"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="369px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://glsl-exercises.simondev.io/lesson/1/1#welcome" target="_blank" rel="noopener"
>glsl-exercises&lt;/a>，在线学习glsl的交互课程，通过交互式页面练习 glsl 编写；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-19-48.png"
width="1858"
height="794"
loading="lazy"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="561px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.gameuidatabase.com/" target="_blank" rel="noopener"
>gameuidatabase&lt;/a>，一个游戏界面资源网站，各种游戏的界面截图，可以用来“借鉴”？；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-20-48.png"
width="1078"
height="567"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 030 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-030-期">机器文摘 第 030 期
&lt;/h1>&lt;p>&lt;em>下周五一假期，休息，不更新。&lt;/em>&lt;/p>
&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="内网穿透的原理及实现">内网穿透的原理及实现
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-09-42-27.png"
width="1040"
height="515"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="484px"
>&lt;/p>
&lt;blockquote>
&lt;p>设想这样一个问题：在北京和上海各有一台局域网的机器（例如一台是家里的台式机，一 台是连接到星巴克 WiFi 的笔记本），二者都是私网 IP 地址，但可以访问公网， 如何让这两台机器通信呢？&lt;/p>
&lt;/blockquote>
&lt;p>IPv4地址即将枯竭，IPv6技术还没有普及，现在很多家庭宽带都不再分配公网IP地址。这就意味着大部分的个人电脑是无法通过互联网被直接访问的（当然，你可以通过你家wifi或者4G信号访问互联网，但是反过来不行）。&lt;/p>
&lt;p>可是这种需求又真实存在，比如我就经常希望能够在任何地方访问我家里的电脑，通过远程桌面进行办公、文件共享等等。&lt;/p>
&lt;p>最简单的方法是通过购买一台具有公网IP地址的云主机来实现中继，这也是目前最普遍的方式。&lt;/p>
&lt;p>不过阅读完这篇&lt;a class="link" href="https://arthurchiao.art/blog/how-nat-traversal-works-zh/" target="_blank" rel="noopener"
>《NAT 穿透是如何工作的：技术原理及企业级实践》&lt;/a>，假如你有很强的动手能力的话，就应该可以实现一套完全不需要公网主机进行中继的“企业级内网穿透工具”。&lt;/p>
&lt;p>文章很长，来自&lt;a class="link" href="https://tailscale.com/blog/how-nat-traversal-works/" target="_blank" rel="noopener"
>这篇英文博客&lt;/a>。&lt;/p>
&lt;h3 id="技术写作指南">技术写作指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-09-53-51.png"
width="437"
height="205"
loading="lazy"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="511px"
>
曾经在翻阅《程序员的数学》这本书的时候被朋友看到，于是诞生了短暂的讨论。&lt;/p>
&lt;p>当时我的观点是，作为程序员一定要掌握好数学，即便现在编程过程中已经不怎么用到特别底层的知识，但也应该多训练数学思维。&lt;/p>
&lt;p>朋友当时说了一句话让我记忆犹新。&lt;/p>
&lt;p>“比起程序员的数学，我更担忧的是程序员的语文。”&lt;/p>
&lt;p>确实，写作这项能力在很多技术人员心里是被低估的。&lt;/p>
&lt;p>不少人受尽写技术文档的折磨，于是越发讨厌写作。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.yuque.com/serviceup/misc/cn-writing-for-engineers" target="_blank" rel="noopener"
>《作为工程师应该如何写作》&lt;/a>真是雪中送炭，总结了很多立即就能见效的技术写作方法，希望可以帮助到工程师朋友。&lt;/p>
&lt;h3 id="怎样制作好玩的小游戏">怎样制作好玩的小游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-09-57-29.png"
width="512"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>
很多人都有自己开发游戏的冲动。&lt;/p>
&lt;p>不过很容易掉进各种复杂的引擎和工具的坑里。&lt;/p>
&lt;p>然后感到沮丧，忘了想做游戏的初心。&lt;/p>
&lt;p>这篇&lt;a class="link" href="http://farawaytimes.blogspot.com/2023/02/how-to-make-good-small-games.html" target="_blank" rel="noopener"
>《怎样制作好玩的小游戏》&lt;/a>可以让你重新焕发精神。&lt;/p>
&lt;p>作者认为开发那种不用复杂引擎的小游戏也可以很欢乐，只要有足够的游戏性。&lt;/p>
&lt;p>他在文章中详细列举了想要制作出真正具有游戏性的小游戏所必须具备的几点关键特性。&lt;/p>
&lt;p>看得出来，作者是懂游戏的。&lt;/p>
&lt;h3 id="神奇的一页纸知识管理">神奇的一页纸知识管理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-10-03-34.png"
width="1220"
height="841"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="348px"
>&lt;/p>
&lt;blockquote>
&lt;p>宇航员在太空中找到的方法一定不会错，因为他要是出错就没命了。
航天员的秘密武器，One Pager。就是把一个专项的知识，都写和画在一页纸上。日积月累，宇航员有了一本手册，里面都是一页一页的one pager。
我向来对知识管理的各种方法很有兴趣。&lt;/p>
&lt;/blockquote>
&lt;p>在网上闲逛时看到这篇&lt;a class="link" href="https://www.zhongwen.ai/fantastic-one-pager/" target="_blank" rel="noopener"
>《神奇的One Pager》&lt;/a>，讲述了一种通过一页纸进行知识管理的方法。&lt;/p>
&lt;p>热爱学习的人可不能错过。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/chidiwilliams/buzz" target="_blank" rel="noopener"
>buzz&lt;/a>，Transcribe and translate audio offline on your personal computer. Powered by OpenAI&amp;rsquo;s Whisper.
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-08-48-07.png"
width="827"
height="431"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="460px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://moonvy.com/apps/ops/" target="_blank" rel="noopener"
>可视化提示词拼装&lt;/a>，文生图的AI越来越多，自己也可以在本地搭建服务，可是为什么我自己生成的图片那么丑呢？这个工具也许可以帮你生成一些靠谱的提示词。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-08-50-22.png"
width="991"
height="418"
loading="lazy"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="568px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://liaokong.gitbook.io/llm-kai-fa-jiao-cheng/" target="_blank" rel="noopener"
>LangChain 中文入门教程&lt;/a>，众所周知 OpenAI 的 API 无法联网的，所以如果只使用自己的功能实现联网搜索并给出回答、总结 PDF 文档、基于某个 Youtube 视频进行问答等等的功能肯定是无法实现的。所以，我们来介绍一个非常强大的第三方开源库：LangChain 。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-08-51-08.png"
width="1103"
height="493"
loading="lazy"
class="gallery-image"
data-flex-grow="223"
data-flex-basis="536px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://oimo.io/works/clock/" target="_blank" rel="noopener"
>clock&lt;/a>，一个非常酷的网页时钟显示效果。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-08-51-53.png"
width="999"
height="586"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://webgpufundamentals.org/" target="_blank" rel="noopener"
>WebGPU 理论基础&lt;/a>，从基础理论开始学习WebGPU，稳！
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-08-53-56.png"
width="688"
height="743"
loading="lazy"
class="gallery-image"
data-flex-grow="92"
data-flex-basis="222px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 029 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-029-期">机器文摘 第 029 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="计算机的中断机制是如何实现的">计算机的“中断”机制是如何实现的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-09-37-58.png"
width="1008"
height="682"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>
稍微了解过计算机原理的朋友都知道，计算机是通过“中断”的机制实现对键盘输入、鼠标移动、硬盘读写等操作的。&lt;/p>
&lt;p>让我给小朋友讲解这些基本的知识时，我也可以侃侃而谈，说上半个小时不带重复。&lt;/p>
&lt;p>但是真要解释“中断”的机制是如何实现的，我想即便是现在科班出身的本科生也未必能够说明白。&lt;/p>
&lt;p>原因我觉得除了缺少实践之外，也跟大部分书上的理论内容离实际工程较远有关。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://r12f.com/posts/interrupts/" target="_blank" rel="noopener"
>漫谈中断&lt;/a>从实际的硬件实例（x86）出发，详细介绍了中断的实现机制，普及了“外部中断”、“内部中断”、“软中断”等概念，以及人们怎样通过“中断控制器”逐渐解决了多设备中断处理的问题。是一篇很值得阅读的科普文章。适合对计算机组成原理、操作系统等技术有兴趣的朋友阅读。&lt;/p>
&lt;h3 id="怎样提升软件项目的可维护性">怎样提升软件项目的可维护性？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-09-54-43.png"
width="576"
height="242"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="571px"
>
不同的项目团队对于软件项目的可维护性所做出的努力不同。&lt;/p>
&lt;p>有不少团队宁愿在修改bug上加班加点，也不愿意为可维护性多花一丁点精力。&lt;/p>
&lt;p>不过，如果你要开始一个新的软件项目或者想要改善一个已经存在的项目的可维护性。&lt;/p>
&lt;p>这里有一份&lt;a class="link" href="https://hix.dev/tutorials/general/software-project-checklist" target="_blank" rel="noopener"
>软件项目可维护性检查清单&lt;/a>可以参考。&lt;/p>
&lt;p>作者主要从版本控制、软件测试、静态分析、依赖库管理、多语言支持、多平台支持、开发环境管理等方面给出了可以改进的行动清单，以及基于开源工具的最佳实践建议。&lt;/p>
&lt;h3 id="怎样榨干chatgpt">怎样榨干chatGPT？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-06-59.png"
width="1024"
height="1024"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>
ChatGPT是由OpenAI训练的一款大型语言模型，能够和你进行任何领域的对话。&lt;/p>
&lt;p>现在跟年初账号紧张的情况比起来已经方便了很多。&lt;/p>
&lt;p>在这么多开源工具和套壳网站的帮助下，我想现在大部分人都能够比较方便的体验它了吧。&lt;/p>
&lt;p>但是可能很多人还不知道如何更好的发挥它的作用。&lt;/p>
&lt;p>有网友整理了一份开源的&lt;a class="link" href="https://github.com/PlexPt/awesome-chatgpt-prompts-zh" target="_blank" rel="noopener"
>chatGPT中文调教指南&lt;/a>，内容极为详尽，可以帮你榨干chatGPT的全部潜能。&lt;/p>
&lt;h3 id="怎样让ai作画理解你的意图">怎样让AI作画理解你的意图？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-17-26.png"
width="1536"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="300"
data-flex-basis="720px"
>
对于现在强大的AI绘图应用，有些人可能会认为只输入一个单词就能生成一张很酷的图片。&lt;/p>
&lt;p>然而，虽然AI模型越来越善于理解我们想要的内容，但它们还不能读懂我们的思想。&lt;/p>
&lt;p>因此，如果你想生成一张看起来像你所想的那样的图片，你需要编写正确的提示。&lt;/p>
&lt;p>这个&lt;a class="link" href="https://boostpixels.com/short-guide" target="_blank" rel="noopener"
>AI绘图prompt编写指南&lt;/a>可以给你提供一些帮助。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://zh.ifixit.com/Guide" target="_blank" rel="noopener"
>维修指南&lt;/a>，各种设备的维修教程大全，详细到每一个步骤的照片，设备型号齐全；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-22-36.png"
width="977"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="508px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://shadertoy.com/view/msVXWD" target="_blank" rel="noopener"
>glsl-CNN&lt;/a>，有大神用glsl语言，仅通过webGL的片元着色器实现了一个手写识别的CNN神经网络。可以在浏览器直接体验，效果惊艳。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-31-02.png"
width="801"
height="479"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/facebookresearch/dinov2" target="_blank" rel="noopener"
>dinov2&lt;/a>，Meta AI新发布的全能视觉模型，模型支持：图像分类、分割、图像检索和深度估计。比较厉害的地方在于它是一个自监督模型，直接从图像中学习特征，而不依赖文本描述，即可训练计算机视觉模型。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-31-37.png"
width="828"
height="236"
loading="lazy"
class="gallery-image"
data-flex-grow="350"
data-flex-basis="842px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://minigpt-4.github.io/" target="_blank" rel="noopener"
>minigpt-4&lt;/a>，GPT4 的图像支持迟迟不开放，这个开源的MiniGPT4 却已经做到了类似的多模态效果，官方演示看起来非常棒。只用了四张A100训练了10小时，模型甚至只有13B。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-33-47.png"
width="1289"
height="1484"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="208px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/linyiLYi/street-fighter-ai" target="_blank" rel="noopener"
>street-fighter-ai&lt;/a>，有个B站UP主在GPT的帮助下， 写了个 强化训练的AI模型，终于打败了街霸里的 AI，实现了儿时的梦想。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-36-53.png"
width="1080"
height="760"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="341px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 027 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/</link><pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-027-期">机器文摘 第 027 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="搭建本地ai作图应用">搭建本地AI作图应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-13-51-53.png"
width="695"
height="392"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>
AI对话机器人火爆的同时，去年由Stable-Diffusion模型引爆的AI作图技术也没有放慢进化的脚步。&lt;/p>
&lt;p>这里面的佼佼者&lt;a class="link" href="https://zh.wikipedia.org/zh-cn/Midjourney" target="_blank" rel="noopener"
>Midjourney&lt;/a>已经发展成了强大的图像生成系统。可以轻松定制出照片级图像，其效果足以乱真。&lt;/p>
&lt;p>不过目前在国内使用Midjourney还比较麻烦，即便能够访问，使用量也会受限制，能否自己搭建一个呢？&lt;/p>
&lt;p>答案是肯定的。&lt;/p>
&lt;p>跟去年刚问世的时候不同，现在基于Stable-Diffusion模型的生态也已经十分完备，很多开源软件、框架、插件围绕这个模型开发。&lt;/p>
&lt;p>利用这些软件可以快速在本地计算机上构建一套属于自己的图像生成服务。&lt;/p>
&lt;p>这里有一篇博客以&lt;a class="link" href="https://www.freedidi.com/8474.html" target="_blank" rel="noopener"
>手把手的方式教你如何在最快速的时间搭建自己的图像生成服务&lt;/a>。&lt;/p>
&lt;p>里面还列举了一些微调好的定制模型下载地址，合理的使用这些模型，你会发现打开新世界的大门。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-14-02-07.png"
width="733"
height="799"
loading="lazy"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="220px"
>&lt;/p>
&lt;h3 id="搭建本地chatgpt应用">搭建本地chatGPT应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-14-08-25.png"
width="779"
height="342"
loading="lazy"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>
本来不想再提chatGPT了，因为最近说的有些太多了。&lt;/p>
&lt;p>但是无奈当前的开源生态对于语言模型是在是太追捧了，技术发展迅雷不及掩耳。&lt;/p>
&lt;p>很快就出现了一批可以自己搭建的AI对话模型。&lt;/p>
&lt;p>今天我挑两个我认为效果比较好的（且对中文支持比较好的）介绍一下。&lt;/p>
&lt;p>注意，跟目前流行的基于OpenAI的接口进行套壳的程序不同。我说的是完全在本地搭建自己的服务。&lt;/p>
&lt;p>第一个：&lt;a class="link" href="https://chatglm.cn/blog" target="_blank" rel="noopener"
>ChatGLM-6B&lt;/a>，一个具有62亿参数的中英双语语言模型。通过使用与 ChatGLM（chatglm.cn）相同的技术，ChatGLM-6B 初具中文问答和对话功能，并支持在单张 2080Ti 上进行推理使用。&lt;/p>
&lt;p>搭建过程比较简单，按照&lt;a class="link" href="https://github.com/THUDM/ChatGLM-6B/blob/main/README.md" target="_blank" rel="noopener"
>README&lt;/a>文档中的步骤下载模型、执行脚本程序即可。&lt;/p>
&lt;p>第二个：&lt;a class="link" href="https://github.com/ymcui/Chinese-LLaMA-Alpaca" target="_blank" rel="noopener"
>中文 LLaMA &amp;amp; Alpaca 大模型&lt;/a>，开源了中文LLaMA模型和经过指令精调的Alpaca大模型。这些模型在原版LLaMA的基础上扩充了中文词表并使用了中文数据进行二次预训练，进一步提升了中文基础语义理解能力。同时，在中文LLaMA的基础上，本项目使用了中文指令数据进行指令精调，显著提升了模型对指令的理解和执行能力。&lt;/p>
&lt;p>搭建过程略微繁琐一些，需要通过自己的手段下载到开源的LLaMA原始模型（当然这对于技术人员来说不是问题）。&lt;/p>
&lt;p>然后按照文档中的教程，执行模型合并、量化等脚本，最终通过开源程序LLaMA.cpp实现模型的本地运行。&lt;/p>
&lt;h3 id="合作运行千亿参数级语言模型">合作运行千亿参数级语言模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-14-22-47.png"
width="492"
height="214"
loading="lazy"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>
按照众人划桨开大船的思路，之前在带宽不足的年代诞生了BT下载。&lt;/p>
&lt;p>如今，当我们的本地显卡无法应付超大AI模型时，有人开始用同样的思路解决问题。&lt;/p>
&lt;p>&lt;a class="link" href="https://petals.ml/" target="_blank" rel="noopener"
>Petals&lt;/a>就是这么一个分布式模型微调、运行的框架，可以让你轻松在家运行超过千亿参数的大模型（当然是在线跟大家一起协作）。&lt;/p>
&lt;p>其原理是大家分别加载模型的一小部分，然后与其他人一起通过协同的方式进行推理或者微调。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-14-27-18.png"
width="1742"
height="680"
loading="lazy"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="614px"
>&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://learningprompt.wiki/" target="_blank" rel="noopener"
>Prompt Engineering 教程&lt;/a>，一份教你如何更好使好地使用 ChatGPT 和其他 AI 产品的免费教程。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-14-43-13.png"
width="970"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="499px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://prompthero.com/" target="_blank" rel="noopener"
>Prompthero&lt;/a>，跟聊天机器人、绘图机器人交流的prompt大全，与上面的教程不同，这是一个模板库大全，有创作灵感但是不知道该如何描述的时候可以去参考一下。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-14-45-46.png"
width="759"
height="381"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://civitai.com/" target="_blank" rel="noopener"
>Civitai&lt;/a>，与上面相同，不过专门用于图像生成，而且路子比较野，有大量的NSFW内容，要搭配Stable-Diffusion的各种微调模型使用。具体使用方法，可参考前文中介绍如何搭建本地图像生成服务的部分。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 028 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/</link><pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-028-期">机器文摘 第 028 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="极简代码理解-gpt-模型结构">极简代码理解 GPT 模型结构
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-09-37-14.png"
width="679"
height="607"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>
在&lt;a class="link" href="https://twitter.com/karpathy/status/1645115622517542913" target="_blank" rel="noopener"
>twitter上有网友发布了一个简单的示例代码&lt;/a>，讲解了 GPT 语言模型的运行原理，为了方便大家理解，作者用了极简的模型设置，即语言文字只保留了1和0两个字符，上下文长度也仅为3，可以很直观地感受到训练过程是如何起作用的。&lt;/p>
&lt;p>作者&lt;a class="link" href="https://colab.research.google.com/drive/1SiF0KZJp75rUeetKOWqpsA8clmHP6jMg?usp=sharing" target="_blank" rel="noopener"
>提供了托管在colab的python源码&lt;/a>，可以在线体验。&lt;/p>
&lt;h3 id="用开源语言模型训练自己的数字化身">用开源语言模型训练自己的数字化身
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-09-38-57.png"
width="623"
height="364"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>
随着开源语言模型的训练和微调变得越来越简单，果然有人开始整活。&lt;/p>
&lt;p>已经有网友&lt;a class="link" href="https://greatdk.com/1908.html" target="_blank" rel="noopener"
>通过自己的微信聊天记录和博客文章训练出有自己风格的AI&lt;/a>。&lt;/p>
&lt;p>作者使用目前对中文支持最好的开源模型 chatglm-6b 作为预训练模型（我上期介绍过它的部署和使用）。&lt;/p>
&lt;p>经过一番折腾后终于训练出还算凑合的模型。&lt;/p>
&lt;p>我们的世界离&lt;a class="link" href="https://movie.douban.com/subject/11502153/episode/1/" target="_blank" rel="noopener"
>《黑镜》中的黑暗故事&lt;/a>越来越近了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-09-49-17.png"
width="1024"
height="576"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;h3 id="四十年工作经验程序员的职业建议">四十年工作经验程序员的职业建议
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-09-50-49.png"
width="700"
height="420"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>
国外有位“老程序员”退休了，是真正的到了退休年龄的退休。&lt;/p>
&lt;p>他从1981年入行，直到去年退休。这期间他做过各种开发，跳过槽也被辞退过，打过工也创过业。&lt;/p>
&lt;p>这不容易。&lt;/p>
&lt;p>所以，他决定&lt;a class="link" href="https://thecodist.com/how-i-stayed-relevant-over-four-decades/" target="_blank" rel="noopener"
>以“一个退休程序员”的身份分享一些心得&lt;/a>。&lt;/p>
&lt;p>摘抄部分要点如下：&lt;/p>
&lt;blockquote>
&lt;p>保持开阔的眼界：每天花时间获取真正的资讯，看到趋势，在事物流行起来之前发现他们。
保持学习：不要拒绝和敌视新技术，要为你所用。
要有自己的项目（做一些真正的事情）：作为程序员不要浪费聪明才智和外部资源，要学着开始一个自己的项目。&lt;/p>
&lt;/blockquote>
&lt;h3 id="进入心流的入口">进入心流的入口
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-10-08-18.png"
width="660"
height="379"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="417px"
>
进入心流（Flow）状态是一种很忘我的体验，也是知识工作者高效产出的必要条件。&lt;/p>
&lt;p>有不少创作者都体会过那种全身心的投入并且忘记了时间的感觉。&lt;/p>
&lt;p>一旦进入那种状态，很多问题能够很快得到解决，大脑飞速运转并且不会感觉到劳累。&lt;/p>
&lt;p>这种状态最忌讳被打断，因为一旦打断，再进入就会比较困难。&lt;/p>
&lt;p>这里有篇文章介绍了一些小技巧，可以让你在不得已中断心流之后，能够比较快速地恢复状态。&lt;/p>
&lt;p>作者将这些技巧比喻为高速服务区进入主路之前的加速匝道，姑且称为&lt;a class="link" href="https://census.dev/blog/an-on-ramp-to-flow" target="_blank" rel="noopener"
>进入心流的入口&lt;/a>。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://spline.design/" target="_blank" rel="noopener"
>Spline&lt;/a>，一个免费易用的 3D 设计工具，可实时协作，提供了丰富的物料库，可以基于它来快速创建有趣的 3D 场景，支持处理细腻动画交互，此外还可以导入本地模型和声音素材，支持到处多种输出格式包括WebGL、视频、链接等，很适合新手。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-10-19-26.png"
width="986"
height="536"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="441px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://codepen.io/ksenia-k/pen/poOMpzx" target="_blank" rel="noopener"
>Draw With Flowers!&lt;/a>，在threejs里用着色器语言编写的一个特效demo，可以随着鼠标移动绘制绚丽的花朵。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-10-19-52.png"
width="828"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/numbbbbb/read-react-source-code" target="_blank" rel="noopener"
>React 源码阅读&lt;/a>，一本开源电子书，通过阅读React的源码来详细理解前端框架的原理。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-10-20-26.png"
width="591"
height="369"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://codeium.com/download" target="_blank" rel="noopener"
>Codeium&lt;/a>，Github copilot 的免费平替，提供vscode、vim、neovim等常见编辑器的插件，我试了一下，效果可以接受。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-10-21-52.png"
width="1024"
height="586"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 026 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/</link><pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-026-期">机器文摘 第 026 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="通用人工智能要来了吗">通用人工智能要来了吗
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-09-37-08.png"
width="854"
height="476"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>
AGI（通用人工智能），即用一个模型解决全部问题，而不是特定领域的问题（如语音识别、图像分类等）。&lt;/p>
&lt;p>我在几年前读过一本叫做《人工智能，人类最后的发明》的书。&lt;/p>
&lt;p>书里说AGI就是人类最后一个发明，因为有了它，别的一切都不需要了。&lt;/p>
&lt;p>当时感觉距离通用的人工智能还很遥远，觉得作者有些危言耸听。&lt;/p>
&lt;p>直到今年，chatGPT和GPT-4的发布，我才发觉AI的势头确实有些猛得出乎意料。&lt;/p>
&lt;p>&lt;a class="link" href="https://orangeblog.notion.site/GPT-4-8fc50010291d47efb92cbbd668c8c893" target="_blank" rel="noopener"
>《 GPT-4 ，人类迈向AGI的第一步》&lt;/a>是一篇&lt;a class="link" href="https://arxiv.org/pdf/2303.12712v1.pdf" target="_blank" rel="noopener"
>近期论文&lt;/a>的翻译，该论文由微软研究院发布，论证了当前的 GPT-4 模型已经初步具有 AGI 的苗头。&lt;/p>
&lt;p>论文内容十分详实，看完很震撼。&lt;/p>
&lt;p>摘录部分文字如下：&lt;/p>
&lt;blockquote>
&lt;blockquote>
&lt;p>&lt;strong>对话&lt;/strong>
&amp;gt; 马克：我不喜欢你昨天晚上对待杰克的方式
&amp;gt; 朱迪：你看到他在做什么了吗？他打了他哥哥的头!
&amp;gt; 马克：这并不能成为你对他大喊大叫的理由
&amp;gt; 朱迪：你想让我怎么做？让他打他的弟弟，然后什么都不说？
&amp;gt; 马克：不，我不同意
&amp;gt; 朱迪：那你为什么要为他辩护？
&lt;strong>提问：马克的意图似乎是什么？&lt;/strong>
GPT4: 马克的意图似乎是要表达他对朱迪处理与杰克关系的方式的不满，并建议她可以更加冷静和尊重。
ChatGPT：根据谈话内容，马克的意图似乎是为杰克的行为辩护，并表达他对朱迪对待杰克的不满。
&lt;strong>提问：朱迪如何看待汤姆的回应？&lt;/strong>
GPT4: 朱迪认为他的评论是对她的分析能力的攻击，也是对杰克的不当行为表示同情的表现。她的反应是防御性的和愤怒的，并质疑马克的动机。
ChatGPT：如果没有更多的文字，我不可能准确判断朱迪是如何接受马克的评论的。然而，根据朱迪的回应，她似乎并不同意马克的观点，而且可能对他为杰克的行为辩护感到沮丧。&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;h3 id="用-gpt-4-帮你编写一个游戏">用 GPT-4 帮你编写一个游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-02-56.png"
width="717"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="510px"
>
我第一次见识到 ChaptGPT 的编程能力之后，就基本离不开这个工具了。&lt;/p>
&lt;p>现在我几乎每天都在它的辅助下编写代码。&lt;/p>
&lt;p>不过，这里有个老哥更过分。&lt;/p>
&lt;p>他让 &lt;a class="link" href="https://twitter-thread.com/t/1637592014446551040" target="_blank" rel="noopener"
>GPT-4 模型帮他做出了一个3D太空赛跑游戏&lt;/a>。&lt;/p>
&lt;p>作者本身没有游戏编程经验也不懂Javascript，但是通过跟模型一点一点对话，反复将调试代码生成的错误信息反馈给模型，逐渐完成了一个完成度还挺高的游戏。&lt;/p>
&lt;h3 id="搭建基于私域数据的chatgpt">搭建基于私域数据的ChatGPT
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-12-24.png"
width="776"
height="438"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>
ChatGPT 超强的对话能力怎样应用到私有数据上？&lt;/p>
&lt;p>比如说我希望做出一个基于 ChatGPT 模型的专属客服，要吃透我的产品信息。&lt;/p>
&lt;p>官方提供的训练API和微调（fine tuning）指导相对复杂一些，对于AI模型的微调不熟悉的人员还不够友好。&lt;/p>
&lt;p>这里有一篇“零基础”教程&lt;a class="link" href="https://mp.weixin.qq.com/s/naiVMuXHAScRb_jSEJN3zg" target="_blank" rel="noopener"
>《搭建基于私域数据的ChatGPT》&lt;/a>，可以带你走一下流程，感受一下定制专属模型的步骤。&lt;/p>
&lt;h3 id="ai令人焦虑">AI令人焦虑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-21-37.png"
width="609"
height="859"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="170px"
>
这篇&lt;a class="link" href="https://mp.weixin.qq.com/s/7H1FrwbQvsh0HD9z90L0wg" target="_blank" rel="noopener"
>《AI狂飙的时代，人还有价值吗？》&lt;/a>是一期语音播客的文字转译，因为内容比较精彩，所以也收录在这里了。&lt;/p>
&lt;blockquote>
&lt;p>我觉得取代不是一个好的词儿，因为取代是一个非常容易反驳的词儿。我可以说我仍然会干什么什么，AI干不了，所以它取代不了我。
但正是这种字面上的抬杠，使得问题的本质被掩盖了，因为AI在人的生活中的渗透是一个逐渐的过程。
百分之百地取代你可能仍然不会发生，可是它也不需要百分之百的取代掉你，只要50%的取代掉你的某些工作职能，AI就会对就业市场形成非常大的冲击。
我有一个纽约的律师朋友，他是很早就开始用这个东西。
他本身不是一个技术人员，他是一个标准的文科生，平常的用一个新软件都要紧张半天的那种人。
但是他开始用这个之后，因为律师的工作是很大程度上是依赖于文本的，而文本是GPT的长项，所以他就开始用。
之后，我就问他说，所以你真的开始辞退你的员工了吗？因为他自己是一个律所合伙人。
他说我还没有真正开始辞退任何人，但是我确实打算今年暑假不用再招实习生了，因为给我省下的活完全可以让我腾出手来做一些事，以至于我可以省下招一个实习生的AD account。
这就是一个真实的影响对不对？
它没有真正取代什么东西，但是它仍然冲击了一个真实的就业市场上的职位。&lt;/p>
&lt;p>我觉得AI对我们社会的影响会以这种方式出现，它不会马上一下子让你这个人变得没有意义,但是它可以让三个人的活，两个人现在能干完，多出来那个人就没有存在的必要了，所以老板就可以把他开掉。
它并不是百分之百取代的人的方式来逐渐进行的，而且这个事情是非常真实的。这也是为什么我觉得很多人对冲击仍然没有做好心理上和事实上的准备。
其实有点令人忧虑的原因就是，如果你今天还用一种这东西，都是媒体的炒作来对待这个问题，你就很可能会在真正的影响你切身生活的冲击到来之前，没有做好对自己来说比较有用的帮助。&lt;/p>
&lt;/blockquote>
&lt;p>读完这篇文章，我的感受是，没必要焦虑，不是AI没有威胁，而是焦虑也没用，蒸汽机车发明之后，超越马车就只剩下时间问题了。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://greasyfork.org/zh-CN/scripts/445751-unlimited-downloader" target="_blank" rel="noopener"
>无限制下载器，只要能播放就能下载&lt;/a>，能够帮助下载视频网站内容的浏览器插件很多，大部分都是通过嗅探播放地址来实现的下载，网站也会采用各种加密手段来进行阻止。但是这个油猴脚本采用了另一种思路。你网站防再死不能不让观众看吧？脚本几乎采用了类似录屏的手段来进行视频下载。对于一些实在想要下载的内容，可以考虑试试这个插件。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-34-53.png"
width="640"
height="400"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/cocktailpeanut/dalai" target="_blank" rel="noopener"
>帮你本地运行 LLaMA 模型&lt;/a>，只需一行命令就可以让你在本地运行 &lt;a class="link" href="https://github.com/ggerganov/llama.cpp" target="_blank" rel="noopener"
>LLaMA&lt;/a> 模型，轻松感受在本地单机上运行大规模语言模型的魅力。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-40-09.png"
width="1920"
height="1080"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/lxe/simple-llama-finetuner" target="_blank" rel="noopener"
>微调 LLaMa 模型的工具&lt;/a>，既然都能在本地运行了，那就再给力一些，这个工具可以让你很方便地使用自己的数据训练 LLaMA 模型。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-42-04.png"
width="1013"
height="898"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Haxxnet/Compose-Examples" target="_blank" rel="noopener"
>Docker Compose 容器组合最佳实践&lt;/a>，Docker有多好用不用再说了吧，这里有一堆使用Docker Compose编排容器的模板，收录了很多十分有用的容器镜像组合，可方便快速的搭建各种业务（如：单点登录、VPN、媒体管理、文件共享、博客、维基、社交网站、项目管理等）。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-46-53.png"
width="802"
height="445"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 025 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/</link><pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-025-期">机器文摘 第 025 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="252个字节实现播放音乐和动画">252个字节实现播放音乐和动画
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-10-25-42.png"
width="915"
height="478"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>
这里有个网页介绍了一个demo作者使用一段JavaScript代码实现了一个&lt;a class="link" href="http://www.p01.org/256b_tetris_theme/" target="_blank" rel="noopener"
>一边播放俄罗斯方块背景音乐一边播放字符动画的网页&lt;/a>，原理是利用HTML5的AudioContext对象进行声音合成，通过定时器触发基于当前时间t值的不同频率，实现音乐播放。具体代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">body&lt;/span> &lt;span class="nx">onclick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;with(new AudioContext)with(o=createOscillator())connect(destination),start(setInterval(v=&amp;gt;innerHTML=&amp;#39;TETЯIS&amp;amp;#&amp;#39;+(9624|(o.frequency.value=`RR&amp;gt;AIIA&amp;gt;777${d=&amp;#39;ARRIA&amp;gt;&amp;gt;&amp;gt;AIIRRAA7777&amp;#39;}IIIWnnbWRRR${d}`.charCodeAt(++t%58)*4)%7)+&amp;#39;P01&amp;#39;,t=232))&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">click&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="诺基亚发布的可维修手机">诺基亚发布的“可维修”手机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-10-35-52.png"
width="614"
height="369"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>
说到诺基亚，用过的朋友第一个映入脑海的词就是“砸核桃”。&lt;/p>
&lt;p>那是iPhone还没发布的非智能手机年代。&lt;/p>
&lt;p>手机可更换电池和外壳在那时是一个标准设计，谁要是不支持这些都不好意思跟人打招呼。&lt;/p>
&lt;p>那时我经常把我的诺基亚掉在地上摔得七零八落，然后淡定地捡起来像电影里特工拼装自己的手枪那样，一个个把零件组装起来，形成“一把”手机。&lt;/p>
&lt;p>或者等手机快要没电的时候，像换弹匣那样给手机换一块电池，立马满血复活。&lt;/p>
&lt;p>这样的日子自从iPhone发布之后就再也没有了。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.theguardian.com/technology/2023/feb/25/nokia-launches-diy-repairable-budget-android-phone" target="_blank" rel="noopener"
>诺基亚近期发布了一款手机&lt;/a>，再次让我想起我那掉地上摔开几瓣的手机。这款手机号称具有良好的“可维修”性，普通用户也可一个人在家轻松拆卸。可以自行更换包括电池、屏幕、充电端口等零件。&lt;/p>
&lt;h3 id="不要重复自己是编程的好原则吗">不要重复自己是编程的好原则吗
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-10-50-45.png"
width="650"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>
不要重复自己，永远不要从头开始重写代码！&lt;/p>
&lt;p>这是很多程序员收到的忠告。&lt;/p>
&lt;p>然而它是绝对正确的吗？&lt;/p>
&lt;p>这里有篇文章&lt;a class="link" href="https://programmingisterrible.com/post/176657481103/repeat-yourself-do-more-than-one-thing-and" target="_blank" rel="noopener"
>《重复自己，重写一切》&lt;/a>，作者在文章中探讨了编程中的一些习惯，他认为这些习惯可以使代码变得更难理解、更难维护，并可能导致代码的冗长和不必要的复杂性。文章提到了重写代码可以给程序带来更好的抽象和可维护性，所以建议定期通过重新写代码的方式重构你的程序。&lt;/p>
&lt;p>说实话，我不知道作者是怎样看待所谓“屎山”代码的，也许当他面对有些代码时，他的观点也会变为：“能跑的代码，就尽量别动它了”。&lt;/p>
&lt;h3 id="慢下来">慢下来
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-10-59-28.png"
width="587"
height="205"
loading="lazy"
class="gallery-image"
data-flex-grow="286"
data-flex-basis="687px"
>
这篇文章的题目是&lt;a class="link" href="https://sive.rs/slow" target="_blank" rel="noopener"
>“慢下来”&lt;/a>，作者是Derek Sivers，一位创业者、作家和音乐家。在这篇文章中，他分享了自己对于“慢下来”这个主题的一些思考和感悟。&lt;/p>
&lt;p>虽然是个急性子，但是我很认同文章里的观点。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.macpierce.com/the-camera-shy-hoodie" target="_blank" rel="noopener"
>反跟踪识别的套件&lt;/a>，如果你觉得被公共场所的摄像头拍摄和记录或者识别侵犯了你的隐私，这里有一套开源的穿戴套件可以考虑。它通过在身上穿戴可以发射红外线的LED设备，使得摄像头画面过曝。以获得保护隐私的效果。不过仅用于研究，不知道是否符合有些国家的法律法规。网站提供了配件清单和详细的装配说明（pdf）供下载。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-11-05-16.png"
width="1203"
height="583"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="495px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://whatdoesthiscodedo.com/" target="_blank" rel="noopener"
>AI帮你解释一段代码&lt;/a>，有人使用openai的开发接口提供了一个专门帮人们解释代码执行的工具，输入代码，输出解释。并提供vscode的插件。我把文章开头那段播放音乐的Javascript代码发给他让他解释，效果如下图：
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-11-09-51.png"
width="625"
height="740"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="202px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://xenova.github.io/transformers.js/" target="_blank" rel="noopener"
>在网页中运行GPT模型&lt;/a>，一个可以在浏览器中执行Transformer模型的开源程序，可以执行轻量的模型，实现如翻译、语音转文字、图像转文字等任务。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-11-12-45.png"
width="1239"
height="519"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="572px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://aitxt.io" target="_blank" rel="noopener"
>AI生成工具箱&lt;/a>，近期，基于chatGPT模型的应用大爆发，这里有一个整理好的工具箱，可以使用ai做很多内容生成工作，包括帮你编写周报、润色文字、写道歉信、写外卖好评等，效果还不错。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-11-15-00.png"
width="1033"
height="530"
loading="lazy"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 024 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/</link><pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-024-期">机器文摘 第 024 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="电池充一次可以用两年的笔记本电脑">电池充一次可以用两年的“笔记本”电脑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-09-18-01.png"
width="830"
height="467"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>
挪威软件开发商安德烈亚斯·埃里克森（Andreas Eriksen）组装了一款笔记本电脑（或者说便携膝上型电脑？）。&lt;/p>
&lt;p>它拥有“以年为单位的电池寿命”，并且使用用Lisp编程系统界面，产品名为：&lt;a class="link" href="https://www.hackster.io/news/andreas-eriksen-s-potatop-is-a-lisp-powered-laptop-with-a-battery-life-measured-in-years-2f5d79653f24" target="_blank" rel="noopener"
>PotatoP&lt;/a>。&lt;/p>
&lt;p>CPU好像是个ARM架构的低功耗单核处理器，最高频率96MHz。&lt;/p>
&lt;p>支持蓝牙5.0。&lt;/p>
&lt;p>运行的系统为PotatOS，一个基于&lt;a class="link" href="http://www.ulisp.com/" target="_blank" rel="noopener"
>uLisp&lt;/a>（一个专门为微控制器设计的Lisp）移植的专用系统。&lt;/p>
&lt;p>使用的4.4英寸显示屏采用介于LCD和墨水屏之间的技术，省电。&lt;/p>
&lt;p>再加上机身上还带有太阳能电池，据说如果环境光充足的话，可以连续运行两年。&lt;/p>
&lt;h3 id="详解-amd-为-steam-deck-开发的-apu">详解 AMD 为 Steam Deck 开发的 APU
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-09-32-20.png"
width="671"
height="272"
loading="lazy"
class="gallery-image"
data-flex-grow="246"
data-flex-basis="592px"
>
Steam Deck 无疑是一款革命性的掌机。&lt;/p>
&lt;p>如果不是价格在国内被炒的离谱，我定会入手一台，也许再观望一下等待第二代或者三代产品更好。&lt;/p>
&lt;p>这款掌机使得在便携设备上游玩3A大作不再是幻想。&lt;/p>
&lt;p>取得这样的表现，除了得益于V厂魔改的Linux系统之外，还离不开这块由AMD定制的、代号“梵高”的 APU。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://chipsandcheese.com/2023/03/05/van-gogh-amds-steam-deck-apu/" target="_blank" rel="noopener"
>《“梵高”AMD的Steam Deck APU》&lt;/a>详细介绍了这块APU的各种技术细节，解释了为什么Steam Deck可以做到低功耗的同时还拥有相当给力的图形性能。&lt;/p>
&lt;h3 id="用磁盘阵列raid确保数据安全靠谱吗">用磁盘阵列（RAID）确保数据安全靠谱吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-09-45-46.png"
width="477"
height="250"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>
再谈谈 NAS 的事情（中年技术男的三大爱好之一）。&lt;/p>
&lt;p>像我这样的人，对于 RAID 磁盘阵列总是抱有美好的幻想。我们认为，只要将数据存放在经过合理规划的磁盘阵列中（例如 RAID 5），我们就可以高枕无忧，确保数据永远不会丢失。然而，实际上，磁盘阵列并不是备份数据的最佳选择，最佳的数据安全策略是异地多份存储。&lt;/p>
&lt;p>尽管 RAID 5 宣称随便损坏一块硬盘也不要紧，只需更换一块正常盘即可，但这种理想状态可能不太容易实现，中间随时可能会出现其他状况导致数据永久丢失。&lt;/p>
&lt;p>一篇名为&lt;a class="link" href="https://www.ucmadscientist.com/almost-lost-it-all-again/" target="_blank" rel="noopener"
>《差点儿就又全没了》&lt;/a>的博文，讲述了作者在使用 NAS 磁盘阵列时经历了一次惊险刺激的数据拯救过程。希望这篇文章能够给计划使用类似方式保存数据的朋友们一个平常心态。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://pubby.games/nesfab.html" target="_blank" rel="noopener"
>NESFab&lt;/a>，一个专为开发任天堂8位游戏机（NES、FC）设计的编程语言。具有高性能、易于装载资源、自动内存地址切换等特性，作者还在主页提供了一个使用NESFab开发游戏的教程。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-10-10-50.png"
width="490"
height="169"
loading="lazy"
class="gallery-image"
data-flex-grow="289"
data-flex-basis="695px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/AstroNvim/AstroNvim" target="_blank" rel="noopener"
>AstroNvim&lt;/a>，一套即开即用的Nvim配置文件，主打界面美观，集成了文件浏览、代码补全、语法高亮、模糊查询、可视化调试等常用插件配置。对于新手和懒得折腾的人来说，可以尝试。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-10-13-25.png"
width="814"
height="434"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/pynecone-io/pynecone" target="_blank" rel="noopener"
>pynecone&lt;/a>，一个用python开发的web应用框架，特点是使用python语言完成所有任务，包括前端和后端，可以帮助那些对于前端开发不太擅长的人更方便地制作web应用程序。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-10-16-17.png"
width="727"
height="647"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="269px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming" target="_blank" rel="noopener"
>函数式编程入门&lt;/a>，一篇介绍函数式编程的文章，介绍了函数式编程的基本概念和一些重要的函数式编程概念，并使用Javascript演示了如何使用这些概念进行函数式编程。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-10-18-09.png"
width="450"
height="220"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="490px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 023 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/</link><pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-023-期">机器文摘 第 023 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="视频信号可以被窃听吗">视频信号可以被窃听吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-10-10-45.png"
width="533"
height="234"
loading="lazy"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>
我之前听到过一个传说。&lt;/p>
&lt;p>使用高灵敏度的天线，再加上一些奇妙的设备。&lt;/p>
&lt;p>可以窃听（窃视？）到附近（方圆数百米）范围之内的显示器显示的内容。&lt;/p>
&lt;p>这个传说流传的时候，还是CRT显示器的时代，当时的视频接口主要是VGA，采用模拟信号进行传输。&lt;/p>
&lt;p>如果显示器或者视频线缆所作的屏蔽不够充分的话，难免会有信号泄露。&lt;/p>
&lt;p>而VGA信号又没有任何加密，被别有用心的人收看是有一定的可能的。&lt;/p>
&lt;p>时间发展到今天，视频接口早已升级，我以为除非不小心无线投屏到了邻居家，否则就不会有视频内容泄露的情况。&lt;/p>
&lt;p>然而，&lt;a class="link" href="https://www.windytan.com/2023/02/using-hdmi-radio-interference-for-high.html" target="_blank" rel="noopener"
>今天要说的这篇文章&lt;/a>则证实了上述传说的可能。&lt;/p>
&lt;p>不过，比起传说中的窃听，作者走的更远一些。&lt;/p>
&lt;p>起因是作者在家里摆弄无线电的时候，发现了一个信号干扰源，最后发现来自他的一个树莓派设备。&lt;/p>
&lt;p>于是经过一番操作，作者不但成功通过无线接收的方式将视频信号显示了出来。&lt;/p>
&lt;p>还利用这种无线信号的干扰（或泄露？）实现了叠加数据的传输。&lt;/p>
&lt;h3 id="怎样用密码保护一个静态页面">怎样用密码保护一个静态页面？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-10-34-20.png"
width="903"
height="429"
loading="lazy"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="505px"
>
说到网站上的数据权限保护，一般我们会需要后端程序配合。&lt;/p>
&lt;p>比如使用账号系统，给用户角色分配不同的权限，使其访问后端接口时获取不同的数据。&lt;/p>
&lt;p>如果没有后台程序，只有静态页面会怎样？&lt;/p>
&lt;p>这儿有个开源工具，&lt;a class="link" href="https://robinmoisson.github.io/staticrypt/" target="_blank" rel="noopener"
>可以帮你生成带有密码保护的静态HTML页面&lt;/a>。&lt;/p>
&lt;p>具体使用方法和原理也很简单。&lt;/p>
&lt;p>输入你想设置的密码和你的HTML页面原始代码，这个工具可以使用AES-256加密算法对其进行加密。&lt;/p>
&lt;p>然后在浏览器加载时，页面自动使用一个js库实现自解密。&lt;/p>
&lt;p>这个方法用于临时保护一些静态的内容还是挺有效的，而且很方便。&lt;/p>
&lt;h3 id="写代码越干净越好吗">写代码越“干净”越好吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-10-43-47.png"
width="713"
height="344"
loading="lazy"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="497px"
>
有不少人宣称自己有代码“洁癖”。&lt;/p>
&lt;p>对于设计模式和面向对象有着非常深的执念（或者函数式编程也是）。&lt;/p>
&lt;p>市面上也充斥着很多“之美”、“之道”、“之禅”之类的书籍，强调代码要给人读、整洁干净。&lt;/p>
&lt;p>我并不反对上述观点，甚至自己也有一点这样的“洁癖”，只是有时内心会有一丝怀疑的时候，觉得如果过于追求某些东西可能会偏离了解决问题的根本目标。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.computerenhance.com/p/clean-code-horrible-performance" target="_blank" rel="noopener"
>《“干净”的代码，糟糕的性能》&lt;/a>，帮我吐槽了一些事情。&lt;/p>
&lt;p>但作者在文中所举的例子稍微有些牵强，不必过于纠结。&lt;/p>
&lt;h3 id="不知道怎么练习编程怎么办">不知道怎么练习编程怎么办
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-10-58-53.png"
width="469"
height="314"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>
经常有人困惑在学习了一门新的编程语言之后，不知该做些什么。&lt;/p>
&lt;p>就像是掌握了词语却写不出好的小说，掌握了规则也下不好象棋。&lt;/p>
&lt;p>我们从小受到的教育方式导致了，在学习技能这一块，缺失实践的动力和方法。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://prog21.dadgum.com/80.html" target="_blank" rel="noopener"
>给无目标的新手程序的一些建议&lt;/a>，虽然内容不多，但是可以看出作者也是个老油条了。&lt;/p>
&lt;p>给出的一些提示都很实在，对于技能练习方面，提的都是我希望我能遵从的。&lt;/p>
&lt;p>比如：&lt;/p>
&lt;blockquote>
&lt;p>用技能解决你实际生活中的问题。
做一些你真正会用到的东西。&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.freecodecamp.org/chinese/news/typescript-for-react-developers/" target="_blank" rel="noopener"
>写给 React 开发者的 TypeScript 指南&lt;/a>，针对React程序员的TypeScript的学习资料，解答了我一部分为什么要用TS的问题。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-11-01-19.png"
width="698"
height="375"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="446px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://method.ac/" target="_blank" rel="noopener"
>Method of Action&lt;/a>，一些免费的工具和在线小游戏（颜色搭配、贝塞尔曲线等），可以帮助你学习和掌握设计理念和工具。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-11-02-12.png"
width="605"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="314px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://archivebox.io/" target="_blank" rel="noopener"
>Archivebox&lt;/a>，一套开源的互联网内容保存方案，可以将你喜欢的页面下载下来，并自动爬取相关链接、图片等内容，类似于互联网档案馆的https://archive.org，不过可以自己搭建。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-11-06-33.png"
width="686"
height="285"
loading="lazy"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="577px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://ohiostate.pressbooks.pub/graphicshistory/front-matter/cover/" target="_blank" rel="noopener"
>History of Computer Graphics and Animation&lt;/a>，一本讲解计算机图形和动画发展历程的电子书，里面记录了计算机图形学相关的许多参考资料，曾用于俄亥俄州立大学的授课。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-11-08-29.png"
width="676"
height="711"
loading="lazy"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="228px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 022 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/</link><pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-022-期">机器文摘 第 022 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="自制家庭服务器">自制家庭服务器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-10-51-39.png"
width="668"
height="367"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="436px"
>
人们常说，中年技术男的最终归宿除了钓鱼和盘核桃之外，还有一项就是折腾家里的服务器，这些服务器形态各异，但是作用都是殊途同归：NAS、软路由、虚拟化、Docker容器。&lt;/p>
&lt;p>怎样变着花样搭建家庭服务器几乎是 V 站的月经甚至日经话题。&lt;/p>
&lt;p>这里有个国外的老哥，决定使用 ARM64 架构自己“装配”一个，是那种需要焊接的“装配”。&lt;/p>
&lt;p>有兴趣的可以翻阅一下这篇&lt;a class="link" href="https://jforberg.se/blog/posts/2023-02-19-rockpro64/rockpro64.html" target="_blank" rel="noopener"
>《构建 ARM64 家庭服务器》&lt;/a>。&lt;/p>
&lt;p>文章介绍了如何用一种较为困难的方式构建一个 ARM64 架构的家用服务器。&lt;/p>
&lt;p>作者使用了一块名为 ROCKPro64 的开发板，并详细介绍了构建过程中遇到的问题以及如何解决这些问题。&lt;/p>
&lt;p>文章中包含了安装基础操作系统、配置网络连接、设置磁盘阵列和安装各种软件的详细步骤和指导，涵盖了从硬件到软件的多个方面。&lt;/p>
&lt;p>在构建过程中，作者提到了一些常见的问题和解决方法，例如如何处理不同操作系统的差异，如何在开发板上设置固件，以及如何解决硬件不兼容问题。&lt;/p>
&lt;p>总之，这篇文章是一份详细的指南，可以帮助有兴趣构建自己的家用服务器的读者了解基础知识，克服可能遇到的问题，并学习如何从头开始构建一个高效、安全的服务器。&lt;/p>
&lt;blockquote>
&lt;p>上面这段是让 chatGPT 帮我写的 :)&lt;/p>
&lt;/blockquote>
&lt;h3 id="用rust写一个大小仅有2k的极简fps游戏">用Rust写一个大小仅有2K的极简FPS游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-11-06-53.png"
width="480"
height="258"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="446px"
>
极简渲染器的编写教程网上有很多，但大都浅尝辄止，以静态渲染为主。&lt;/p>
&lt;p>&lt;a class="link" href="https://grantshandy.github.io/posts/raycasting/" target="_blank" rel="noopener"
>这篇文章&lt;/a>则从制作一个第一人称射击游戏的视角出发，讲解了怎样使用光线投射技术实现最基本的三维空间渲染、光照、阴影等效果。&lt;/p>
&lt;p>作者使用 Rust 语言基于 wasm 技术编写了一个在网页中运行的示例程序，该程序非常小巧，但是也充分展现了如何使用光线投射算法来实现 3D 渲染技术仲的一些基本概念，比如：墙体贴图、视角控制等。&lt;/p>
&lt;p>是我看到的教程里比较系统的一个，适合作为爱好者去研究。&lt;/p>
&lt;h3 id="玩具-cpu-模拟器">玩具 CPU 模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-13-24-45.png"
width="640"
height="480"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>
国外一个大学老师觉得他的计算机组成原理课程有些枯燥，于是他&lt;a class="link" href="https://jimhall.itch.io/toy-cpu" target="_blank" rel="noopener"
>动手撸了一个 CPU 模拟器出来&lt;/a>，以帮助学生们更好的理解计算机内部运作原理。&lt;/p>
&lt;p>作者在文章里介绍了基本的原理，以及模拟器的各个组件，适合学习底层原理初入门的学生。&lt;/p>
&lt;p>另外这个模拟器也基于 MIT 协议进行了开源，文章中附有开源仓库的地址和编译好的可执行文件下载连接。&lt;/p>
&lt;p>需要注意的是该程序运行环境为DOS，现在要想体验的话，需要先安装 &lt;a class="link" href="https://www.dosbox.com/download.php?main=1" target="_blank" rel="noopener"
>DosBOX&lt;/a> 这个模拟器。&lt;/p>
&lt;h3 id="不用任何构建系统编写前端代码">不用任何构建系统编写前端代码
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-13-35-29.png"
width="632"
height="224"
loading="lazy"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="677px"
>
比起十几年前，前端开发工程现在已经变得十分复杂。&lt;/p>
&lt;p>有次我想写个简单的页面程序，但是却花费了一上午的时间陷入对框架和构建系统的选择上。&lt;/p>
&lt;p>后来不得不放弃，改用记事本随便用原生Javascript完成了功能。&lt;/p>
&lt;p>&lt;a class="link" href="https://jvns.ca/blog/2023/02/16/writing-javascript-without-a-build-system/" target="_blank" rel="noopener"
>这篇文章&lt;/a>的作者跟我有同样的感受。&lt;/p>
&lt;p>作者认为，对于一些简单的项目来说，使用构建系统可能是不必要的。&lt;/p>
&lt;p>因为构建系统会增加开发和维护的复杂性，而且可能会导致一些性能问题。&lt;/p>
&lt;p>文章演示了作者如何使用原生的Javascript和浏览器的开发者工具来实现一些常见的构建系统功能。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener"
>计算机知识笔记&lt;/a>，一个计算机科学知识笔记仓库，包括计算机基础知识、编程语言和算法、开发工具、面试笔试题目等等，是一个非常实用的笔记库。目前在 Github 上有超过 162k 个 star 。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-13-47-03.png"
width="344"
height="602"
loading="lazy"
class="gallery-image"
data-flex-grow="57"
data-flex-basis="137px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.hugi.scene.org/online/hugi31/hugi%2031%20-%20index%20coding%20corner.htm" target="_blank" rel="noopener"
>Creating Demos&lt;/a>，这套教程是 &lt;a class="link" href="https://en.wikipedia.org/wiki/Hugi" target="_blank" rel="noopener"
>Hugi 杂志&lt;/a>在2001年第31期发布的一系列编程文章，主题是“Demo程序”的制作，是我目前在网络上见到的比较完整和耐心的一套讲解 Demoscene 如何制作的教程。虽然有些技术是老旧的，但是思想一直是不变的，能够学到很多平时很难了解到的东西，现在很少有人愿意分享这些了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-13-52-29.png"
width="543"
height="367"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="355px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/iawia002/lux" target="_blank" rel="noopener"
>网络视频下载器&lt;/a>，一个 go 语言编写的网络音视频资源下载工具，类似 youtube-dl，但是支持的网站要更多一些。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-13-54-53.png"
width="870"
height="666"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.ambient.run/" target="_blank" rel="noopener"
>ambient&lt;/a>，Ambient是一个使用 WebAssembly、Rust 和 WebGPU 技术构建的高性能多人游戏和3D应用的开源引擎。特点是针对构建多人游戏开发进行优化支持。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-14-03-29.png"
width="981"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="622px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 021 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-021-期">机器文摘 第 021 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="chatgpt-原理通俗讲解">chatGPT 原理通俗讲解
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-14-57-11.png"
width="1240"
height="410"
loading="lazy"
class="gallery-image"
data-flex-grow="302"
data-flex-basis="725px"
>
可能是有人炒作的缘故，chatGPT 热度一直不降，连街边买菜的大妈都在讨论这个“人工智能机器人”。&lt;/p>
&lt;p>可能是它输出语言的流畅度实在是太接近真实的人类了，用惯了之前那种“智能助理”的人很容易感到震惊。&lt;/p>
&lt;p>然而其背后的原理并非像想象的那么复杂，甚至是大力出奇迹的又一个经典样例。&lt;/p>
&lt;p>最近关于它的文章也是铺天盖地，各种分析、叫好，很少有冷静下来探讨其背后机理的。&lt;/p>
&lt;p>我翻看了几篇之后，发现唯有这篇&lt;a class="link" href="https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/" target="_blank" rel="noopener"
>《chatGPT在做什么以及它为什么好使》&lt;/a> 比较优秀。读起来比较平和，没有压力。&lt;/p>
&lt;p>文章揭示了即使像chatGPT这样的大型语言模型也是一个单词一个单词慢慢往出崩的，并尝试说清楚这么流畅的语言是基于什么来预测后续单词的概率。&lt;/p>
&lt;h3 id="怎样利用多gpu训练真正的大型模型">怎样利用多GPU训练真正的大型模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-13-37.png"
width="920"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>
前面提到的 chatGPT 模型，体量非常大，据说训练一次就要耗费上千万美元。&lt;/p>
&lt;p>作为普通开发者我们是不敢奢望自己上手训练一番。&lt;/p>
&lt;p>不过，这里有一篇文章可以让我了解像这样的&lt;a class="link" href="https://lilianweng.github.io/posts/2021-09-25-train-large/" target="_blank" rel="noopener"
>大模型是如何进行并行训练的&lt;/a>。&lt;/p>
&lt;p>另外还有个开源的项目，号称可以&lt;a class="link" href="https://github.com/hpcaitech/ColossalAI/blob/main/README-zh-Hans.md" target="_blank" rel="noopener"
>在较少资源的基础设施上进行 GPT 模型训练&lt;/a>，有兴趣的可以试试。&lt;/p>
&lt;h3 id="怎样搭建一个电子爱好者工作间">怎样搭建一个电子爱好者工作间
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-28-10.png"
width="716"
height="439"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="391px"
>
拥有一个电子产品工作室一直是我的一个梦想。&lt;/p>
&lt;p>电烙铁、稳压电源、万用表，是我能想到的最基本的设备。&lt;/p>
&lt;p>如果还想更完美，可以借鉴这篇文章所介绍的思路，&lt;a class="link" href="https://lcamtuf.substack.com/p/setting-up-an-electronics-workshop" target="_blank" rel="noopener"
>搭建一个电子爱好者工作间&lt;/a>。&lt;/p>
&lt;h3 id="运气计算公式">运气计算公式
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-37-36.png"
width="809"
height="570"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>
看到一个关于运气的文章&lt;a class="link" href="https://www.swyx.io/create-luck" target="_blank" rel="noopener"
>《如何获得好运气》&lt;/a>，觉得里面提到的“怎样使得随机的运气变得让好运更加倾向于你”的说法比较有意思。&lt;/p>
&lt;p>于是就收录一下。&lt;/p>
&lt;p>文章里探讨的问题，很容易让我联想到关于“下雨的时候是飞速跑动淋雨多还是慢慢走淋雨多”的问题。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://academy.cs.cmu.edu/" target="_blank" rel="noopener"
>卡耐基梅隆大学计算机科学在线教程&lt;/a>，CMU CS Academy 是卡内基梅隆大学计算机科学学院 (SCS) 的一个项目，其目标是开发一种新颖的、世界级的、在线的、完全免费的交互式高中计算机科学课程。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-45-42.png"
width="767"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="472px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.handsome-css.com/" target="_blank" rel="noopener"
>纯CSS实现的超漂亮UI组件收集&lt;/a>，网站收集了超多 UI 组件，基于 纯 CSS 实现，采用 MIT 开源协议发布，可以自由使用。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-47-30.png"
width="863"
height="349"
loading="lazy"
class="gallery-image"
data-flex-grow="247"
data-flex-basis="593px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://cn.sli.dev/" target="_blank" rel="noopener"
>为开发者打造的演示文稿工具&lt;/a>，Slidev 旨在为开发者提供灵活性和交互性，通过使用他们已经熟悉的工具和技术，使他们的演示文稿更加有趣、更具表现力和吸引力。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-50-17.png"
width="652"
height="251"
loading="lazy"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="623px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.stableattribution.com/" target="_blank" rel="noopener"
>根据ai做的图倒推出用于训练模型的原始图&lt;/a>，这个网站比较有意思，前一段时间比较火的根据文字生成图片的 AI ，这里可以将根据 AI 生成的图片反推出它当时样本训练的原始图。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-56-55.png"
width="1696"
height="398"
loading="lazy"
class="gallery-image"
data-flex-grow="426"
data-flex-basis="1022px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 020 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/</link><pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-020-期">机器文摘 第 020 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="怎样获得非凡成就">怎样获得非凡成就
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/2023-02-15-09-57-43.png"
width="749"
height="383"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="469px"
>
多年来，我对成功学嗤之以鼻。&lt;/p>
&lt;p>但也对有些人的成功给予应有的尊重。&lt;/p>
&lt;p>我所欣赏的成功人士有一种特殊气质，我说不上来具体是什么特点，有点儿像反叛精神，又有点儿对手工技术的狂热。&lt;/p>
&lt;p>这些人里对我影响比较大的是《黑客与画家》的作者 保罗·格雷厄姆（&lt;a class="link" href="https://zh.wikipedia.org/zh-hans/%E4%BF%9D%E7%BD%97%C2%B7%E6%A0%BC%E9%9B%B7%E5%8E%84%E5%A7%86" target="_blank" rel="noopener"
>Paul Graham&lt;/a>）。&lt;/p>
&lt;p>他创建了著名的 &lt;a class="link" href="https://zh.wikipedia.org/zh-hans/Y_Combinator" target="_blank" rel="noopener"
>YC 孵化器公司&lt;/a>，也打造了很多成功的产品。&lt;/p>
&lt;p>今天推荐的这篇文章&lt;a class="link" href="https://blog.samaltman.com/how-to-be-successful" target="_blank" rel="noopener"
>《How To Be Successful》&lt;/a>的作者，是保罗·格雷厄姆非常推崇的一位创业者。&lt;/p>
&lt;p>文章分享的观点乍看有成功学的影子，但读完却能引人思考。&lt;/p>
&lt;p>这里是中文翻译版：&lt;a class="link" href="https://mp.weixin.qq.com/s/pQYztNmmQ6W4fRxPIEsWYQ" target="_blank" rel="noopener"
>《观察成千上万创业者后，关于如何获得非凡成就的13条思考》&lt;/a>&lt;/p>
&lt;p>我觉得这些观点至少可以给长期埋头技术工作的人们一些启发，我稍微列举几条如下：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>这个世界很少人能做到将眼光放长远，而那些有长远眼光的人会得到市场的丰厚回报。&lt;/li>
&lt;li>把时间花在做正确的事上，比花长时间进行工作更重要。&lt;/li>
&lt;li>跟着你的好奇心走。因为对你来说兴奋的事情对其他人来说也同样兴奋。&lt;/li>
&lt;li>成为内驱型的人(即：自己去做一件事的原因来自于自己，而不是外部的力量或别人的期望)。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="怎样在客厅建立自己的私人影院">怎样在客厅建立自己的私人影院
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/2023-02-15-10-21-45.png"
width="841"
height="396"
loading="lazy"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>
智能电视或者智能盒子已成为现在客厅的标配。&lt;/p>
&lt;p>如何充分发挥它们的作用，早已是技术爱好者的孜孜不倦探索的课题。&lt;/p>
&lt;p>前些天我偶然收到一份公开的云盘链接，使用开源的 &lt;a class="link" href="https://github.com/alist-org/alist" target="_blank" rel="noopener"
>AList&lt;/a>(一个支持网盘存储的文件列表程序，可以通过多种协议将网盘映射为本地访问的存储路径) 进行构建。里面整理了大量的影视资源，有不少是高质量、高码率的蓝光原盘文件。&lt;/p>
&lt;p>这就激发了我的好奇心。&lt;/p>
&lt;p>由于自己一直按耐住折腾 NAS 的念头，这些年一直没有收集电影。&lt;/p>
&lt;p>但现在既然有在线的资源，不妨尝试一下。&lt;/p>
&lt;p>于是我找到了这篇&lt;a class="link" href="https://wp.gxnas.com/12278.html" target="_blank" rel="noopener"
>《利用KODI和云盘打造4K高清私人云影院》&lt;/a>（仅作研究，观影和收藏还需支持正版）。&lt;/p>
&lt;p>按照文章的指导，成功给电视安装了 KODI（一个媒体中心 App），并进行了配置，可以非常方便地浏览、观看互联网云盘上的高清电影。&lt;/p>
&lt;p>比起云盘官方所出品的各种 App 在体验上更加灵活、完美。&lt;/p>
&lt;h3 id="噪声在计算机图形学里的作用">“噪声”在计算机图形学里的作用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/2023-02-15-10-40-28.png"
width="671"
height="303"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="531px"
>
想要计算机产生的图形更加的接近自然，生成各式各样的噪声是必不可少的算法。&lt;/p>
&lt;p>之前在读&lt;a class="link" href="https://natureofcode.com/" target="_blank" rel="noopener"
>《The Nature of Code》&lt;/a>（中文译作：代码本色）一书的时候，作者花了大量篇幅讲解关于噪声、随机等对于模拟自然界中各种现象的重要作用。&lt;/p>
&lt;p>或许在噪声里就隐藏着大自然最深处的秘密。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://zhuanlan.zhihu.com/p/68507311" target="_blank" rel="noopener"
>WebGL进阶——走进图形噪声&lt;/a>可以让你领略一些图形噪声的神奇。&lt;/p>
&lt;p>很多场景都给出了 WebGL 实现的源码，可以边学边练。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://threegn.app/" target="_blank" rel="noopener"
>ThreeGN&lt;/a>，一个基于网页的三维建模程序，特点是具有类似 Blender 的几何节点编辑功能。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/2023-02-15-10-51-53.png"
width="846"
height="453"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://tabler-icons.io/" target="_blank" rel="noopener"
>tabler&lt;/a>，一个开源的图标库，可用于 Web 或 移动端应用开发，全部免费使用。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/2023-02-15-10-55-30.png"
width="796"
height="314"
loading="lazy"
class="gallery-image"
data-flex-grow="253"
data-flex-basis="608px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://microsoftedge.microsoft.com/addons/detail/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AF%91/amkbmndfnliijdhojkpoglbnaaahippg" target="_blank" rel="noopener"
>immersive-translate&lt;/a>，一个在线翻译浏览器插件，支持 Edge、Firefox、Chrome 等浏览器，优点是可以在网页上追加中文显示，原文和译文同时展示，对于想提升外语水平的人士，是个不错的对照工具。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/2023-02-15-10-59-08.png"
width="621"
height="357"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 019 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-019-期">机器文摘 第 019 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="现阶段-ai-能对游戏开发提供多大帮助">现阶段 AI 能对游戏开发提供多大帮助
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-13-19-34.png"
width="686"
height="358"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>
AI 在最近有多爆发自然不用我再赘述，抛开那些狂热的能够引起焦虑的言论（比如 AI 即将替代大量工作岗位），也有不少人选择跟 AI 和平相处。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.traffickinggame.com/ai-assisted-graphics/" target="_blank" rel="noopener"
>《AI 辅助图形》&lt;/a>的作者是一个有着游戏制作二十年经验的从业者，近期想尝试尽可能地利用各种 AI 加持的辅助工具，试图通过他们提升制作效率。&lt;/p>
&lt;p>作者从游戏的概念原型阶段，一直到三维模型资产的制作和游戏场景的搭建，均选用了具有 AI 能力的效率工具进行支持。&lt;/p>
&lt;p>最终结论是，虽然在过程中会有这样那样的不顺手，但这些工具确实能够帮助他节约大量工作时长。&lt;/p>
&lt;p>所以作者的看法是，他很愿意将 AI 工具看作他的同事。&lt;/p>
&lt;p>照这么说的话，留给人类的工作真的是不多了。&lt;/p>
&lt;h3 id="chatgpt-学习笔记">ChatGPT 学习笔记
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-13-32-44.png"
width="600"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>
ChatGPT 在春节后又起了一波热度。&lt;/p>
&lt;p>网上到处都是关于它的段子，有人用它写论文，有人拿来给孩子辅导作业，有人写情书，有人当个动嘴的甲方让它写程序。&lt;/p>
&lt;p>喜得微软恨不得现在就把它接到搜索引擎里，逼得谷歌提前释放出自己的类似模型。&lt;/p>
&lt;p>国内的百度也表示将在3月份发出自己的大规模语言模型。&lt;/p>
&lt;p>要我说就不要这么着急，不妨拨开迷雾，看看 ChatGPT 是个什么东东。&lt;/p>
&lt;p>在网上发现这篇&lt;a class="link" href="https://blog.csdn.net/v_JULY_v/article/details/128579457" target="_blank" rel="noopener"
>《ChatGPT 通俗笔记》&lt;/a>，讲述了这个模型的发展历程，以及一些基本的概念原理。&lt;/p>
&lt;p>此类中文资料不多，给这篇文章作者点赞。&lt;/p>
&lt;h3 id="视觉设计的一些规则">视觉设计的一些规则
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-13-49-28.png"
width="697"
height="357"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>
现在专业的界限越来越模糊，每个人都应该掌握一些基本的设计理念，以便在日常工作中输出的成果具备基本的美感。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://anthonyhobday.com/sideprojects/saferules/" target="_blank" rel="noopener"
>《视觉设计安全法则》&lt;/a>，浅显易读、明确具体，对于视觉设计活动很有指导意义。&lt;/p>
&lt;p>看完之后无论是自己动手做 PPT 还是软件的 demo 原型，都可以用到。&lt;/p>
&lt;p>我觉得甚至对于摄影构图、房屋装修都能有所借鉴，因为美是相通的。&lt;/p>
&lt;h3 id="python-做后端开发的技术选型">Python 做后端开发的技术选型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-13-57-37.png"
width="673"
height="314"
loading="lazy"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="514px"
>
有时候想做一些 Web 应用的原型，Python 是我的首选语言，写起来顺手又省事，能节约不少时间。&lt;/p>
&lt;p>但是由于用的不够深入，在选择开发框架的时候，稍微有些困惑。&lt;/p>
&lt;p>比如同样都能提供快速的开发能力，Fastapi 和 Flask到底选哪个？&lt;/p>
&lt;p>如果你也有跟我一样的疑惑，可以看看这篇&lt;a class="link" href="https://www.turing.com/kb/fastapi-vs-flask-a-detailed-comparison" target="_blank" rel="noopener"
>《Fastapi 和 Flask 详细对比》&lt;/a>。&lt;/p>
&lt;p>文章深度分析了这两个框架的异同以及所适用的工作场景。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/red-data-tools/YouPlot" target="_blank" rel="noopener"
>YouPlot&lt;/a>，控制台绘图工具，可以在控制台窗口用字符的方式进行绘图，支持柱状图、散点图等。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-14-10-37.png"
width="587"
height="355"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://play-cs.com/zh/servers" target="_blank" rel="noopener"
>网页在线联机 CS1.6&lt;/a>，只需浏览器即可联机玩反恐精英 1.6，这个网站通过 WASM 技术将 CS 1.6 移植到了网页中运行，现代浏览器均可支持，第一次加载时间略长，但体验还算流畅，在线人员数量也挺多，随时可以匹配到。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-14-20-36.png"
width="811"
height="397"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="490px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://fffuel.co/sssvg" target="_blank" rel="noopener"
>交互式 SVG 参考&lt;/a>，一个可以在线了解 SVG 图形标准细节的网站，提供交互式界面进行实时演示。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-14-25-38.png"
width="904"
height="428"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="506px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/LunarFang416/url-animations" target="_blank" rel="noopener"
>浏览器地址栏里的动画&lt;/a>，一个有意思的 Js 库，通过动态修改浏览器地址栏的 URL 地址来实现动画，效果还比较萌。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-14-26-39.png"
width="757"
height="208"
loading="lazy"
class="gallery-image"
data-flex-grow="363"
data-flex-basis="873px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 018 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-018-期">机器文摘 第 018 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="游戏高清重制科林麦克雷拉力赛3">游戏高清重制《科林麦克雷拉力赛3》
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-09-15-47.png"
width="857"
height="434"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>
游戏高清重制一直是我比较感兴趣的话题，可能因为比较喜欢怀旧吧。&lt;/p>
&lt;p>我曾经收藏过采用覆盖显示驱动的方式进行高清分辨率支持的《极品飞车 5》、《Quake 3》等游戏。&lt;/p>
&lt;p>也见过一些更古老的游戏在更新资源包之后重新焕发青春。&lt;/p>
&lt;p>不过一直没有接触过真正的重制过程。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://cookieplmonster.github.io/2023/01/15/remastering-colin-mcrae-rally-3-silentpatch/" target="_blank" rel="noopener"
>《重制科林麦克雷拉力赛》&lt;/a>详细记录了一个优秀的赛车游戏进行高清重制的过程。&lt;/p>
&lt;p>可以带你了解老旧游戏如何进行“宽屏”、“超宽屏”支持，如何重制高清界面UI元素等，过程充满了对不可能的挑战。&lt;/p>
&lt;h3 id="把网页渲染到控制台">把网页渲染到控制台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-09-24-01.png"
width="1067"
height="464"
loading="lazy"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>
通过控制台窗口进行上网，你可能觉得并不新鲜。&lt;/p>
&lt;p>毕竟已经有很多类似 w3m 这种在控制台下基于字符的浏览器程序。&lt;/p>
&lt;p>但是他们的缺点都是不能显示图形，而且几乎失去了对页面的样式渲染。&lt;/p>
&lt;p>今天这篇&lt;a class="link" href="https://fathy.fr/carbonyl" target="_blank" rel="noopener"
>《把网页渲染到控制台》&lt;/a>则另辟蹊径，虽然同样是在控制台的字符界面，但是渲染手段却大不相同。&lt;/p>
&lt;p>它将控制台字符当作单个像素来处理，采用现代浏览器内核进行页面解析和预渲染计算。&lt;/p>
&lt;p>然后在像素渲染阶段，采用了控制台字符来进行替换。&lt;/p>
&lt;p>虽然最终效果无法跟图形界面下的浏览器相比。&lt;/p>
&lt;p>但是它毕竟提供了一种在终端控制台进行图形化网页显示的可能。&lt;/p>
&lt;h3 id="chromium-渲染流水线字节码到像素的一生">Chromium 渲染流水线——字节码到像素的一生
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-09-32-37.png"
width="481"
height="580"
loading="lazy"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="199px"
>
看了前面网页渲染到控制台的文章，如果对浏览器的原理架构比较感兴趣的话。&lt;/p>
&lt;p>可以看看这篇&lt;a class="link" href="https://zhuanlan.zhihu.com/p/574069391" target="_blank" rel="noopener"
>讲解 Chromium 浏览器渲染架构&lt;/a>的文章。&lt;/p>
&lt;p>现代浏览器已经复杂到不可能通过个人从零开始实现。&lt;/p>
&lt;p>了解一下他们的架构，即便不从事相关开发，也可能对自己的软件架构产生有益影响。&lt;/p>
&lt;h3 id="99-行代码实现光线追踪">99 行代码实现光线追踪
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-09-40-20.png"
width="702"
height="235"
loading="lazy"
class="gallery-image"
data-flex-grow="298"
data-flex-basis="716px"
>
光线追踪在图形渲染中十分关键的概念。&lt;/p>
&lt;p>同时也是现代电影工业实现逼真光照渲染所必须的技术手段。&lt;/p>
&lt;p>然而它的原理却并不复杂，甚至只需少量代码就可以自己实现一个建议的渲染器。&lt;/p>
&lt;p>这篇&lt;a class="link" href="http://kevinbeason.com/smallpt/" target="_blank" rel="noopener"
>《99 行代码实现光线追踪》&lt;/a>就只是用了少量 C++ 代码实现了一个简单的带有全局光照、阴影、反射的场景渲染。&lt;/p>
&lt;p>虽然看起来简单，效果还是很令人惊艳的。&lt;/p>
&lt;p>适合我这种喜欢研究原理，但又不太深入的“技术爱好者”。&lt;/p>
&lt;h3 id="光线追踪深入">光线追踪深入
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-09-47-14.png"
width="731"
height="333"
loading="lazy"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="526px"
>
既然前面提到了光线追踪，不妨再引申一下。&lt;/p>
&lt;p>很多光线追踪的入门教程都会教你渲染一些简单的模型，比如球体，圆柱体等等。&lt;/p>
&lt;p>如果想基于光线追踪技术渲染复杂一些的三维模型，应该怎么做？&lt;/p>
&lt;p>这里有一篇&lt;a class="link" href="https://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/" target="_blank" rel="noopener"
>《光线行进和符号距离函数》&lt;/a>，里面介绍了基于光线行进算法（光线追踪的一种实现方式）和符号距离函数来构建三维场景中复杂模型的思路。&lt;/p>
&lt;p>内容比较详细，并带有示例代码。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.chronophoto.app/game.html" target="_blank" rel="noopener"
>chronophoto&lt;/a>，一个猜照片年代的游戏，根据网站随机展示的老照片，来判断这张照片是哪一年拍摄的，答案区间 1900 到 2020 ，我试了试还挺有意思，可以根据照片中出现的物品和人物的衣着进行分析。&lt;br>
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-09-56-50.png"
width="944"
height="432"
loading="lazy"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="524px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/GimelStudio/GimelStudio" target="_blank" rel="noopener"
>Gimel Studio&lt;/a>，一个基于节点系统的照片后期处理工具，开源，采用 Python 编写。&lt;br>
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-10-00-55.png"
width="1009"
height="537"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/vitoplantamura/BugChecker" target="_blank" rel="noopener"
>BugChecker&lt;/a>，一个支持 Windows 11 的类 SoftICE 调试器，开源。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-10-04-14.png"
width="649"
height="376"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/google/swiftshader" target="_blank" rel="noopener"
>swiftshader&lt;/a>，一个基于 CPU 实现 OpenGL 渲染的图形库。主要应用在谷歌开源的 chromium 项目里，用纯软件算法实现了OpenGL、Vulkan图形接口。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-10-08-42.png"
width="308"
height="307"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 017 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-017-期">机器文摘 第 017 期
&lt;/h1>&lt;p>&lt;em>预计春节期间暂停更新，节后恢复。&lt;/em>&lt;/p>
&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="怎样在-1-位色深的-lcd-屏幕上显示灰度httpswwwzephraymepostgrayscale_lcd">&lt;a class="link" href="https://www.zephray.me/post/grayscale_lcd/" target="_blank" rel="noopener"
>怎样在 1 位色深的 LCD 屏幕上显示灰度&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-09-33-34.png"
width="1920"
height="1080"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>
只有 1 位色深的 LCD 屏幕按理说是不能显示灰度的，因为他的像素点要么纯黑、要么纯白，显示的图案效果肯定非常差。&lt;/p>
&lt;p>如果说非要显示灰度的话，我第一个想法是通过&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E6%8A%96%E5%8B%95_%28%E6%95%B8%E4%BD%8D%E8%A8%8A%E8%99%9F%E8%99%95%E7%90%86%29" target="_blank" rel="noopener"
>抖动算法&lt;/a>进行模拟（即通过像素点的稀疏程度来制造错觉，如下图）。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-09-40-49.png"
width="180"
height="215"
loading="lazy"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="200px"
>&lt;/p>
&lt;p>然而这篇文章的作者采取了更为巧妙地方法，使用 PWM （脉冲宽度调制）技术，利用每个像素点的点亮时间不同来制造灰度错觉。&lt;/p>
&lt;p>之前只是见过使用 PWM 调整 LED 灯泡的亮度，像这种用法我倒是第一次见。&lt;/p>
&lt;h3 id="作为一名数据工程师和作家我为什么要用-neovimhttpswwwsspaeticomblogwhy-using-neovim-data-engineer-and-writer-2023">&lt;a class="link" href="https://www.sspaeti.com/blog/why-using-neovim-data-engineer-and-writer-2023/" target="_blank" rel="noopener"
>作为一名数据工程师和作家，我为什么要用 (Neo)vim&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-09-44-27.png"
width="500"
height="264"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;p>很多人都被 Vim 复杂的功能和陡峭的学习曲线吓到过。&lt;/p>
&lt;p>也有很多人本着对效率的极致追求，而选择了征服 Vim，从而走上高效（折腾）的路线。&lt;/p>
&lt;p>本文作者作为一名数据工程师，讲述了他学习 Vim 的心路历程，也许对于现在还在观望的人有所启发。&lt;/p>
&lt;p>我个人使用 Vim 已十多年时间，虽然从未触及特别深入的技能（如宏定义、寄存器等），但是 Vim 这种神器的特点就是，只要你忍者难受越过操作的及格线，剩下的技能你稍微多掌握一点，就能马上给你带来非常丰厚的回报。&lt;/p>
&lt;h3 id="焦散是什么如何正确地渲染焦散httpswwwchaoscomcnblogwhat-are-caustics-and-how-to-render-them-the-right-way">&lt;a class="link" href="https://www.chaos.com/cn/blog/what-are-caustics-and-how-to-render-them-the-right-way" target="_blank" rel="noopener"
>焦散是什么？如何正确地渲染焦散？&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-09-55-28.png"
width="850"
height="469"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="434px"
>
焦散(Caustics)在现实生活中随处可见，但在渲染图中却很稀有。这篇文章解答了为什么渲染焦散很难，以及有哪些方法可以迂回实现。&lt;/p>
&lt;p>找到这篇文章是因为我在 Github 上发现了&lt;a class="link" href="https://github.com/pmndrs/drei#caustics" target="_blank" rel="noopener"
>一个使用 webgl 实现焦散渲染的项目&lt;/a>，效果非常不错，于是想研究一下背后的原理。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-10-02-22.png"
width="652"
height="339"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://refactoringguru.cn/design-patterns" target="_blank" rel="noopener"
>常用设计模式有哪些&lt;/a>，一本在线电子书，图文并茂，以比较直观的方式介绍了软件开发常用的设计模式，支持英文、日文、中文等多国语言。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-10-04-26.png"
width="673"
height="357"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://abseil.io/resources/swe-book/html/toc.html" target="_blank" rel="noopener"
>谷歌的软件工程&lt;/a>，好几年前的一本书，讲述在谷歌做软件开发的体验和最佳实践，现在出了可免费阅读的电子版。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-10-04-41.png"
width="504"
height="662"
loading="lazy"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="182px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/ToolJet/ToolJet" target="_blank" rel="noopener"
>开源低代码开发框架 ToolJet&lt;/a>，免费开源的低代码开发框架，带有可视化编辑器，从数据持久化到前端界面全部无需编写代码。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-10-08-12.png"
width="795"
height="414"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="460px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/Eandrju/cellular-automaton.nvim" target="_blank" rel="noopener"
>一个无聊的 Neovim 插件&lt;/a>，一个没啥用的 Neovim 插件，唯一能做的事情是当你感到无聊时，可以将你的文本编辑区里的文本执行一个“元胞自动机”动画，看起来还算解压。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-10-11-33.png"
width="547"
height="614"
loading="lazy"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="213px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.futurepedia.io/" target="_blank" rel="noopener"
>最大的 AI 工具箱&lt;/a>，喜欢研究 AI 的不要错过这个网站，收集了各种 AI 模型的开源项目和相关网址，涵盖了图像识别、自然语言处理等常见的、时兴的 AI 技术。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-10-15-15.png"
width="1151"
height="729"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 016 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-016-期">机器文摘 第 016 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="黑客与汽车httpssamcurrynetweb-hackers-vs-the-auto-industry">&lt;a class="link" href="https://samcurry.net/web-hackers-vs-the-auto-industry/" target="_blank" rel="noopener"
>黑客与汽车&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-13-16-50.png"
width="680"
height="414"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="394px"
>
现在的汽车很多都具有联网的能力，可以通过互联网进行便利的远程操作。&lt;/p>
&lt;p>比如获取汽车位置、健康状态、远程启动、远程开门等等。&lt;/p>
&lt;p>作为消费者来说，在使用这些便利功能的时候，内心是十分信任厂商的。&lt;/p>
&lt;p>觉得安全问题肯定会被厂商非常重视，作为头号问题来抓。&lt;/p>
&lt;p>然而这篇&lt;a class="link" href="https://samcurry.net/web-hackers-vs-the-auto-industry/" target="_blank" rel="noopener"
>《黑客与汽车》&lt;/a>却改变了我的看法，原来这些车联网的安全防护如此的脆弱。&lt;/p>
&lt;p>文章作者为业内人士，写的还比较实在。如下列举部分这些黑客可以对车进行的未授权操作：&lt;/p>
&lt;ol>
&lt;li>远程发动机启停、车门解锁与锁定、大灯闪烁、喇叭鸣笛；&lt;/li>
&lt;li>锁定用户，迁移管理权；&lt;/li>
&lt;li>根据车架号下载到用户的销售档案；&lt;/li>
&lt;li>远程刷新更新车辆电脑固件；&lt;/li>
&lt;li>跟踪车辆物理GPS位置；&lt;/li>
&lt;/ol>
&lt;p>看完我感觉是不是得把我的相关车联网服务给停一停了。&lt;/p>
&lt;h3 id="汇编代码阅读指南httpswwwtimdbgcompostsfakers-guide-to-assembly">&lt;a class="link" href="https://www.timdbg.com/posts/fakers-guide-to-assembly/" target="_blank" rel="noopener"
>汇编代码阅读指南&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-13-30-23.png"
width="1061"
height="636"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>
写汇编代码很麻烦，阅读起来也很费劲吗？&lt;/p>
&lt;p>这儿有&lt;a class="link" href="https://www.timdbg.com/posts/fakers-guide-to-assembly/" target="_blank" rel="noopener"
>一份简要的汇编阅读指南&lt;/a>，作者介绍了一些汇编代码的阅读技巧。&lt;/p>
&lt;p>因为根据统计显示，最常用的汇编指令也就那么十来个，所以并没有想象中的那么晦涩和高深莫测。&lt;/p>
&lt;h3 id="使用-svg-绘制逼真的绳索httpsmuffinmanioblogdraw-svg-rope-using-javascript">&lt;a class="link" href="https://muffinman.io/blog/draw-svg-rope-using-javascript/" target="_blank" rel="noopener"
>使用 SVG 绘制逼真的绳索&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-13-38-11.png"
width="786"
height="342"
loading="lazy"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>
SVG 是在网页中进行矢量绘图的技术，比起 Canvas 画板的像素图像，SVG 具有放大不失真的特点，在网页中可以通过 Javascript 操作生成 SVG 图形对象，实现各种复杂的图案。&lt;/p>
&lt;p>这篇文章的作者从几何的角度考虑了如何使用矢量图形来绘制一个现实中的麻绳图案，要不仅体现出绳索的扭曲，还要正确表现绳索分支之间的叠压，作者提出了一个巧妙的使用 SVG path 进行实现的方法。还给出了代码。&lt;/p>
&lt;p>你要问作者为什么这么做，有什么用没有？我想作者可能会回答：Because I can ！&lt;/p>
&lt;h3 id="ssh-进阶用法介绍httpsplantegggithubio20190602e58fb2e4b88ae69c80e585a8_ssh_e69a97e9bb91e68a80e5b7a7e8afa6e8a7a3--e694b6e8978fe4bf9de5b9b3e5ae89">&lt;a class="link" href="https://plantegg.github.io/2019/06/02/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8_SSH_%E6%9A%97%E9%BB%91%E6%8A%80%E5%B7%A7%E8%AF%A6%E8%A7%A3--%E6%94%B6%E8%97%8F%E4%BF%9D%E5%B9%B3%E5%AE%89/" target="_blank" rel="noopener"
>SSH 进阶用法介绍&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-13-55-02.png"
width="800"
height="480"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;/p>
&lt;p>经常在 Linux 系统下进行开发或者运维的专业人士，可能每天使用最多的工具就是 SSH 了，每天都要通过它登录服务端系统，进行一系列的操作。&lt;/p>
&lt;p>这里&lt;a class="link" href="https://plantegg.github.io/2019/06/02/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8_SSH_%E6%9A%97%E9%BB%91%E6%8A%80%E5%B7%A7%E8%AF%A6%E8%A7%A3--%E6%94%B6%E8%97%8F%E4%BF%9D%E5%B9%B3%E5%AE%89/" target="_blank" rel="noopener"
>有一篇文章&lt;/a>比较全面地介绍了 SSH 的进阶使用技巧，可以在某种程度上极大提升效率以及操作体验。&lt;/p>
&lt;p>列举部分如下：&lt;/p>
&lt;ol>
&lt;li>如何免密码登录；&lt;/li>
&lt;li>如何映射服务端的服务端口到本地（以方便调试）；&lt;/li>
&lt;li>如何将服务端的图形界面（如xcalc）代理到本地电脑显示和交互（不是远程桌面哦）；&lt;/li>
&lt;li>一些网络端口映射之类的高级操作；&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://gist.github.com/sbabybird/c340dee0fbec2e1dfe4a1c49d311cf4b" target="_blank" rel="noopener"
>个人年终总结模板&lt;/a>，我做了一个基于 Markdown 语法的年终总结模板，方便梳理在编写个人总结时的思路，放在 github 上的 gist 里了，可以随意使用。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-13-57-40.png"
width="416"
height="486"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="205px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.webdesignmuseum.org/" target="_blank" rel="noopener"
>web 网页设计博物馆&lt;/a>，一个保存古老网页设计的网站。记录了 1999 年到 2020 年各大公司的网页设计变迁。包括谷歌、亚马逊、苹果、任天堂、麦当劳等等。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-14-01-04.png"
width="918"
height="568"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://allinone.tools/" target="_blank" rel="noopener"
>一站式网页工具大全&lt;/a>，一堆的在线工具汇总，包括图片处理、PDF格式转换、文字编码转换、密码生成、字符串加密解密等等，常用工具一网打尽。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-14-05-09.png"
width="1320"
height="570"
loading="lazy"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="555px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://gamepad-tester.com/" target="_blank" rel="noopener"
>在线手柄测试工具&lt;/a>，打开网页即可测试游戏手柄的工作状态，按键是否灵敏，遥感是否有死区等等，非常方便。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-14-11-28.png"
width="930"
height="614"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 015 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/</link><pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-015-期">机器文摘 第 015 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="编程就是玩儿httpsaustinhenleycomblogprogrammingasplayhtml">&lt;a class="link" href="https://austinhenley.com/blog/programmingasplay.html" target="_blank" rel="noopener"
>编程就是玩儿&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-13-43-13.png"
width="804"
height="355"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="543px"
>&lt;/p>
&lt;p>对于程序员或者技术从业者来说，以一种什么样的心态工作将十分影响成果的产出。&lt;/p>
&lt;p>&lt;a class="link" href="https://austinhenley.com/blog/programmingasplay.html" target="_blank" rel="noopener"
>这篇文章&lt;/a>的作者给大家分享了他自己的感受&amp;mdash;-“不把编程视为严肃的工作、目标只是玩得开心、为了好玩而编程”。&lt;/p>
&lt;p>他同时也是 &lt;a class="link" href="https://news.ycombinator.com/item?id=27256867" target="_blank" rel="noopener"
>《为什么我喜欢做无用的东西》&lt;/a>帖子的作者。&lt;/p>
&lt;p>除了文章本身之外，&lt;a class="link" href="https://news.ycombinator.com/item?id=34086416" target="_blank" rel="noopener"
>在 HN 配套的讨论帖子在这里&lt;/a>。&lt;/p>
&lt;p>这种类似于“寓教于乐”、“做自己开心的事儿”等等内容，一直是一个值得探讨的话题。&lt;/p>
&lt;p>我个人也倾向于以兴趣和爱好来驱动自己，只是如果这个兴趣和爱好顺便能够挣钱，那就更好了。&lt;/p>
&lt;h3 id="webassembly没有容器的-dockerhttpswasmlabsdevarticlesdocker-without-containers">&lt;a class="link" href="https://wasmlabs.dev/articles/docker-without-containers/" target="_blank" rel="noopener"
>WebAssembly：没有容器的 Docker&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-13-45-15.png"
width="3483"
height="1436"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;p>最近 &lt;a class="link" href="https://www.docker.com" target="_blank" rel="noopener"
>Docker&lt;/a> 宣布与 &lt;a class="link" href="https://github.com/WasmEdge/Wasmedge" target="_blank" rel="noopener"
>WasmEdge&lt;/a> 合作支持 WebAssembly 。&lt;/p>
&lt;p>WebAssembly 和 Docker 我们都听说过，在前面的文摘中我还尝试过自己使用 Rust 编写运行在网页里的 WebAssembly 应用程序。&lt;/p>
&lt;p>Docker 也是我工作中每天都要用到的容器技术。&lt;/p>
&lt;p>那他们两个有什么关系？放在一起能碰撞出什么火花？&lt;/p>
&lt;p>&lt;a class="link" href="https://wasmlabs.dev/articles/docker-without-containers/" target="_blank" rel="noopener"
>这篇文章&lt;/a>将讲解这两种技术的结合在云原生架构下的使用。&lt;/p>
&lt;p>看来 WebAssembly 技术不仅可以在浏览器环境中发挥作用，还能在云计算、边缘计算等领域发光发热，前途不可限量嘛。&lt;/p>
&lt;h3 id="3d-摄影测量建模技术httpswwwjeffgeerlingcomblog2021modeling-my-grandpa-3d-photogrammetry">&lt;a class="link" href="https://www.jeffgeerling.com/blog/2021/modeling-my-grandpa-3d-photogrammetry" target="_blank" rel="noopener"
>3D 摄影测量建模技术&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-13-58-29.png"
width="712"
height="340"
loading="lazy"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;p>3D 摄影测量建模，是一种通过对物体多角度拍摄照片，然后使用计算机通过软件算法合成为 3D 模型的技术。&lt;/p>
&lt;p>从最开始在专业领域（如：建筑工程、考古）使用，到现在已经普及到普通人只需安装手机 App 也能轻松实现了。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.jeffgeerling.com/blog/2021/modeling-my-grandpa-3d-photogrammetry" target="_blank" rel="noopener"
>用3D摄影测量法对我的爷爷建模&lt;/a>记述了作者如何使用 3D 摄影测量建模技术给自己爷爷的雕像进行“数字化”的过程。&lt;/p>
&lt;p>里面详细记录了整个过程所使用的开源软件和相关的配置细节。&lt;/p>
&lt;p>对于一些想要进行一次实操演练的朋友来说可能有用。&lt;/p>
&lt;h3 id="在-2d-游戏中如何模拟-3d-的光影效果httpswwwgamedevelopercomprogramminggraveyard-keeper-how-the-graphics-effects-are-made">&lt;a class="link" href="https://www.gamedeveloper.com/programming/graveyard-keeper-how-the-graphics-effects-are-made" target="_blank" rel="noopener"
>在 2D 游戏中如何模拟 3D 的光影效果&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-14-14-17.png"
width="454"
height="265"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;p>《守墓人》是一款经典的 2D 角色扮演游戏，比起它的精彩剧情和有趣的玩法，出色的画面效果也是该游戏取得成功的重要原因。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.gamedeveloper.com/programming/graveyard-keeper-how-the-graphics-effects-are-made" target="_blank" rel="noopener"
>《守墓人的图形效果是如何制作的》&lt;/a>文章，由该游戏的核心开发者于 2018 年发表，讲述了很多关于实现在 2D 画面带来更加有立体光影效果的特殊技巧。&lt;/p>
&lt;p>文章虽然老了一点，但是技术没有过时。&lt;/p>
&lt;p>读进去可以深深体会到：一个优秀作品的创造，离不开对各种不可能的挑战和极限的突破。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://bluemaxima.org/flashpoint/" target="_blank" rel="noopener"
>Flash 游戏大全&lt;/a>，上一期里我摘录了一个关于复刻 Flash 游戏的故事。后来也勾起了我对于 Flash 小游戏的怀念。便深入探索了一下现在这个阶段该如何再去运行那些老游戏。Flashpoint 是一个 Web 游戏保存工程，号称已经累计保存了包括 Flash 在内的 35 个平台的超过十万个小游戏。这个工程在 2018 年 1 月启动，试图在 Flash 消亡之前将之前的经典内容进行备份。现在提供两种版本的下载包，一种全量下载的大概 1.3 TB，包含了全部游戏。一种增量下载的，700多MB，只带了部分游戏，但是支持随下随玩。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-14-33-07.png"
width="1001"
height="382"
loading="lazy"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="628px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://sweetcocoa.github.io/pop2piano_samples/" target="_blank" rel="noopener"
>根据音频自动生成钢琴旋律&lt;/a>，一个开源的 AI 模型，可以根据歌曲的音频识别出里面的旋律主线，并且使用钢琴演奏出来，效果十分神奇。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-14-41-36.png"
width="741"
height="456"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://virtualconsoles.com/online-emulators/c64/" target="_blank" rel="noopener"
>C64 Emulator&lt;/a>，一个在线的 commodore 64 电脑模拟器，可以直接将磁盘镜像拖拽到网页上进行加载，页面还提供了虚拟键盘。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-14-44-02.png"
width="643"
height="733"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://shadiao.pro/" target="_blank" rel="noopener"
>沙雕 App&lt;/a>，收集了各种有趣网站、工具的导航站，之前就关注过，最近好像升级了，喜欢恶搞的同学可以到里面找到一些比较有恶趣味的小程序。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-14-47-42.png"
width="676"
height="371"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 014 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-014-期">机器文摘 第 014 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="运行在单片机上的-qthttpsdecovardevblog20221224qt-on-mcu">&lt;a class="link" href="https://decovar.dev/blog/2022/12/24/qt-on-mcu/" target="_blank" rel="noopener"
>运行在单片机上的 Qt&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-13-43-13.png"
width="684"
height="456"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>尝试过给单片机写图形界面没有？&lt;/p>
&lt;p>这篇 &lt;a class="link" href="https://decovar.dev/blog/2022/12/24/qt-on-mcu/" target="_blank" rel="noopener"
>《Qt on MCU》 &lt;/a>比较系统的介绍了“为什么选择 Qt（一套开源图形界面库） 给单片机做界面”、“Qt 的基本架构”、“程序移植性”等相关问题。&lt;/p>
&lt;p>读完可以较为全面地了解在单片机这种机能较弱的硬件设备上制作图形界面的基本思路和需要关注的问题。&lt;/p>
&lt;h3 id="openwrtlede-搭建-syncthing-p2p-私有文件同步服务httpschenhemepostopenwrt-syncthing">&lt;a class="link" href="https://chenhe.me/post/openwrt-syncthing/" target="_blank" rel="noopener"
>OpenWrt/LEDE 搭建 Syncthing p2p 私有文件同步服务&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-13-56-50.png"
width="1251"
height="730"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;p>现在大家都不止一个电子终端设备，个人数字信息、各种数据文件的同步需求基本上是一个刚需。&lt;/p>
&lt;p>有很多厂商提供了收费方案，比较常见的有国内的各种网盘、手机厂商提供的各种 Cloud 服务等等。&lt;/p>
&lt;p>如果想基于家庭网络自己动手搭建一个私有服务的话，可能略微麻烦一些，不过也有较为成熟的方案了。&lt;/p>
&lt;p>条件具备的话不妨参考这篇&lt;a class="link" href="https://chenhe.me/post/openwrt-syncthing/" target="_blank" rel="noopener"
>《OpenWrt/LEDE 搭建 Syncthing p2p 私有文件同步服务》&lt;/a>动手试一试。&lt;/p>
&lt;h3 id="用-flash-高清重制一款游戏httpswwwjiqizhixincomarticles2022-12-22-2">&lt;a class="link" href="https://www.jiqizhixin.com/articles/2022-12-22-2" target="_blank" rel="noopener"
>用 Flash 高清重制一款游戏&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-13-58-23.png"
width="600"
height="338"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>Flash 基本已经成为历史了。&lt;/p>
&lt;p>即便现在可以通过一些渠道或者浏览器勉强开启 Flash 插件的话，也会提心掉胆地担心计算机的安全性。&lt;/p>
&lt;p>毕竟那些恼人的弹窗广告有 80% 都是靠 Flash 技术实现的。&lt;/p>
&lt;p>但是还有这么一群人，他们玩着 4399 上的小游戏长大，80 后喜欢的各种主机游戏在他们眼里根本不值一提，倒是网页上那种基于 Flash 制作的即开即玩的小游戏（比如我能想到的就有：黄金矿工、狂扁小朋友、打企鹅等等）才是他们的最爱。&lt;/p>
&lt;p>Flash 技术被时代抛弃，那些 4399 们也就逐渐消失了。&lt;/p>
&lt;p>不过总有人会拥抱情怀，这篇&lt;a class="link" href="https://www.jiqizhixin.com/articles/2022-12-22-2" target="_blank" rel="noopener"
>《为拯救童年回忆，开发者决定采用古法编程》&lt;/a>便讲述了这样一个故事。&lt;/p>
&lt;p>里面的哥们儿以极其硬核的方式实现了他的梦想，为了复刻一个 Flash 小游戏，他几乎重新写了一个 Flash 播放器。&lt;/p>
&lt;h3 id="unix-终端系统tty是如何工作的httpswaynervcompostshow-tty-system-works">&lt;a class="link" href="https://waynerv.com/posts/how-tty-system-works/" target="_blank" rel="noopener"
>Unix 终端系统（TTY）是如何工作的&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-14-09-23.png"
width="2560"
height="2272"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/p>
&lt;p>没有使用过大型机而直接进入 PC 时代的计算机用户，可能觉得“终端”就是电脑上那个能够输入 CMD 命令的黑乎乎窗口吧。&lt;/p>
&lt;p>即便是终日与命令行打交道的软件开发人员、系统运维人员，可能也很难一下子解释清楚什么是“终端”，它为什么叫这个名字。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://waynerv.com/posts/how-tty-system-works/" target="_blank" rel="noopener"
>《Unix 终端系统（TTY）是如何工作的》&lt;/a>从计算机硬件发展的历史出发，介绍了计算机系统跟用户交互的发展历程，并针对“终端”系统进行详细展开，讲解了实现原理和后来发展的现代形态。&lt;/p>
&lt;p>喜欢硬核知识的朋友可点进去阅读一下。&lt;/p>
&lt;h3 id="hn-讨论极大提升你效率的软件有哪些httpsnewsycombinatorcomitemid34069106">&lt;a class="link" href="https://news.ycombinator.com/item?id=34069106" target="_blank" rel="noopener"
>HN 讨论：极大提升你效率的软件有哪些？&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-14-16-52.png"
width="776"
height="403"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;p>哪些软件最能节约你的时间、解放你的双手、使你离不开它？&lt;/p>
&lt;p>这个话题几乎每过一段时间就会被拿出来讨论一番。&lt;/p>
&lt;p>每个人都有自己的偏爱。&lt;/p>
&lt;p>不过，看看大家的讨论，说不定也能发现一些新鲜的软件，也许能更新一下自己的工具库也说不定。&lt;/p>
&lt;blockquote>
&lt;p>比如上面这篇帖子里，楼主提到的 &lt;a class="link" href="https://github.com/BurntSushi/xsv" target="_blank" rel="noopener"
>这个 csv 工具&lt;/a> ，可以在命令行让你高效对 csv 文件进行快速检索、合并查询、切片等等。
不过帖子里可能有人把节奏带偏了，在下面大吹特吹各种 IDE 软件，就仁者见仁了。&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://huili.github.io/" target="_blank" rel="noopener"
>SQlite源码分析&lt;/a>，一本讲解 SQlite 源码的在线电子书，主要对 SQLite 数据库的实现机制和使用方法做了简要分析。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-14-25-49.png"
width="804"
height="424"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://retrogame.com.ua/2022/03/moarstalgia-windows-98-3dfx-amp-dos-retro-gaming-pack/" target="_blank" rel="noopener"
>经典复古 win98 游戏合集&lt;/a>，一个游戏整合包，里面整合了若干在 Win98 系统下才能跑的老游戏，像初代的雷神之锤、半条命、极品飞车等等。提供了基于 DosBox 的虚拟系统，即开即用，性能还不错。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-14-33-08.png"
width="656"
height="387"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://www.doshaven.eu/programming-tools/" target="_blank" rel="noopener"
>DOS 系统下的编程工具合集&lt;/a>，想要重温在 DOS 环境下编程的感受，这里有一套比较全面的工具合集，包括 QBASIC、TurboC 等开发环境，以及一些用于游戏开发的图形库、引擎。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-14-59-31.png"
width="908"
height="527"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://humanbenchmark.com/dashboard" target="_blank" rel="noopener"
>给你自己跑个分&lt;/a>，现在一些硬件评测动不动就使用软件进行跑分，用以展示硬件之间的形成差异，这个网站提供了一组小游戏，可以考验你的短期记忆力、反应能力，并给你打分。也试试给自己跑个分吧。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-15-05-15.png"
width="900"
height="511"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="422px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 012 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/</link><pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-012-期">机器文摘 第 012 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="github-登录被第三方网站滥用了吗">Github 登录被第三方网站滥用了吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-13-30-19.png"
width="494"
height="491"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>
为了方便账号注册，现在很多网站都提供了基于 Github 账号登录的方式。&lt;/p>
&lt;p>我个人也更倾向于使用这种方式登录。&lt;/p>
&lt;p>毕竟可以少填一些注册信息，减少思考密码的麻烦。&lt;/p>
&lt;p>但是这样做有什么安全问题没有？&lt;/p>
&lt;p>上周有一个&lt;a class="link" href="https://news.ycombinator.com/item?id=33917962" target="_blank" rel="noopener"
>在 HackerNews 上的帖子&lt;/a>，有人遇到了在使用 Github 账号登录某些网站之后，导致他的账号莫名给别的仓库添 Star 的情况。&lt;/p>
&lt;p>这引发了大家关于 Github 账号权限管理以及通过第三方鉴权进行账号登录和注册的讨论。&lt;/p>
&lt;p>看完觉得在第三方鉴权授权时还是应该慎重使用才好。&lt;/p>
&lt;h3 id="每个黑客都知道的命令行快捷键">每个黑客都知道的命令行快捷键
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-13-41-23.png"
width="926"
height="636"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>
在图形化界面、触控操作交互界面已经十分普及的今天，普通用户可能现在很少能接触到命令行操作了。&lt;/p>
&lt;p>但是对于软件开发者、IT运维工程师来说，命令行还是属于离不开的操作界面。&lt;/p>
&lt;p>而且对于有些工作任务来说，使用命令行完成起来要更加高效。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.masteringemacs.org/article/keyboard-shortcuts-every-command-line-hacker-should-know-about-gnu-readline" target="_blank" rel="noopener"
>这篇文章&lt;/a>讲解了常见命令行交互时的一些快捷操作，比如常见的行内编辑、快速移动光标到命令开头、历史记录搜索等等。&lt;/p>
&lt;p>掌握之后可以在各种命令行交互界面中进行使用（基本风格一致）。&lt;/p>
&lt;h3 id="基于颜色循环的动画技术">基于颜色循环的动画技术
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-13-54-06.png"
width="509"
height="383"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>
在计算机硬件资源匮乏的上世纪 90 年代，开发人员为了在有限条件下实现丰富的效果真是挖空心思。&lt;/p>
&lt;p>比如，还记得 Windows 98 的启动画面吗？&lt;/p>
&lt;p>蓝天白云，Windows 徽标，底部有一个蓝色的渐变色条，在缓慢的滚动。&lt;/p>
&lt;p>实际上它只是一幅图片，并非多帧动画。&lt;/p>
&lt;p>这就用到了一个叫做&lt;a class="link" href="https://en.wikipedia.org/wiki/Color_cycling" target="_blank" rel="noopener"
>“颜色循环”&lt;/a>的技术。&lt;/p>
&lt;blockquote>
&lt;p>来自维基百科：颜色循环，也称为调色板移动，是计算机图形学中使用的一种技术，其中颜色被更改以产生动画的假象。这种技术主要用于早期的电脑游戏，因为存储一个图像并更改其调色板比将动画存储为几帧需要更少的内存和处理器能力。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="http://www.effectgames.com/effect/article-Old_School_Color_Cycling_with_HTML5.html" target="_blank" rel="noopener"
>这里有个博客&lt;/a>使用 HTML Canvas 复刻了一批采用颜色循环创作的作品，效果非常惊艳。&lt;/p>
&lt;p>另外网站还开源了用于展示这些作品的图形引擎，虽然现在已经不再维护了，但是用于学习和探索还是很有研究意义。&lt;/p>
&lt;h3 id="软件逆向工程入门">软件逆向工程入门
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-14-06-08.png"
width="716"
height="442"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>
软件的加密和破解在普通用户眼里十分神秘。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://to-be-deleted-in-2022.emily.st/2015/01/27/reverse-engineering/" target="_blank" rel="noopener"
>软件逆向工程入门&lt;/a>比较深入浅出地介绍了一些常用手法，跟着作者可以浅尝一下在内存中寻找注册号、修改汇编指令以使得软件保护失效等体验。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="http://nifty.stanford.edu/" target="_blank" rel="noopener"
>计算机课后作业&lt;/a>，斯坦福大学计算机专业评选的历年来优秀作业作品。如果不知道自己编程需要练习什么的话，可以打开参考参考，很有实用价值，比起在 Leecode 上刷算法的题目，这些作业都在解决实际问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://scholar.archive.org/" target="_blank" rel="noopener"
>互联网档案学术&lt;/a>，全文检索索引包含超过2500万的研究文章和其他保存在互联网档案馆里的学术文档。 该馆藏涵盖从18世纪期刊的数字化副本，到最新的Open Access会议记录和从万维网上抓取的预印本。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-14-19-26.png"
width="1113"
height="507"
loading="lazy"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="526px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://playcanvas.com/" target="_blank" rel="noopener"
>PlayCanvas Web 优先的游戏引擎&lt;/a>，一个免费的游戏引擎，倡导以 Web 优先，在网页中提供从开发到发行的全部流程支持。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-14-23-40.png"
width="961"
height="655"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="352px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://asciinema.org/" target="_blank" rel="noopener"
>命令行会话记录器&lt;/a>，Asciinema 是一个免费开源软件，用于帮助用户录制在命令行中的操作行为，便于在互联网上分发自己的操作示范、教学演示。比起直接视频录屏的方式，这种以字符方式的记录更加节约资源，无论是记录、传播还是回放环节，都很轻量。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-14-29-43.png"
width="631"
height="383"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://matthias-research.github.io/pages/tenMinutePhysics/index.html" target="_blank" rel="noopener"
>十分钟物理&lt;/a>，这套教程集合了一组十分钟左右的视频短片，每次介绍一个基本的物理概念并通过 Web 前端技术编程实现模拟。除了视频之外，网站还提供了源代码、演示环境等配套资源。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-14-32-47.png"
width="1191"
height="666"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="429px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://skilldrick.github.io/easy6502/" target="_blank" rel="noopener"
>Easy6502&lt;/a>，一本学习 6502 汇编的电子书（没错，我就是特别喜欢这款 CPU）。网站带有交互界面，提供了一个简易模拟器，可以边学边练，教程最后会带你实现一个基于汇编的贪食蛇游戏。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-14-43-13.png"
width="608"
height="484"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 013 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-013-期">机器文摘 第 013 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="从古董电脑中我们能学到什么httpsgithubcomreadmefeaturedvintage-computing">&lt;a class="link" href="https://github.com/readme/featured/vintage-computing" target="_blank" rel="noopener"
>从古董电脑中我们能学到什么&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-09-36-43.png"
width="1182"
height="689"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;p>我也不知道为什么自己会对老旧电脑，尤其是上世纪80年代、90年代出品的电脑这么迷恋。&lt;/p>
&lt;p>我觉得那个时代的电脑散发着一种难以名状的工业气质。&lt;/p>
&lt;p>通过阅读&lt;a class="link" href="https://github.com/readme/featured/vintage-computing" target="_blank" rel="noopener"
>这篇文章&lt;/a>，使我意识到一些深层次的原因。&lt;/p>
&lt;p>这些老式电脑的魅力来自于当时技术的限制、简单粗暴和直接。&lt;/p>
&lt;p>通过深入了解这些老古董、学习开发那个时代的软件，可以更容易地了解计算机科学。&lt;/p>
&lt;p>毕竟，现在的计算机已经充分的复杂和“人性化”，软件把硬件包裹得越来越严实和抽象。以至于根本看不清它的内部构造和实现原理。&lt;/p>
&lt;p>去研究那些古董电脑吧，操作那些裸漏单纯的硬件接口，贴近更加具体的科技。&lt;/p>
&lt;h3 id="蛋httpwwwgalactanetcomoneofftheegg_zhhtml">&lt;a class="link" href="http://www.galactanet.com/oneoff/theegg_zh.html" target="_blank" rel="noopener"
>蛋&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-09-49-07.png"
width="1024"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>这是一篇很富有哲理的小小说，严格来说跟机器没有关系。&lt;/p>
&lt;p>但是写的实在是很好，忍不住收录进来。&lt;/p>
&lt;p>毕竟，喜欢机器的人，很难抗拒这种对宇宙天马行空的探索。&lt;/p>
&lt;h3 id="rlhf-模型详解httpshuggingfacecoblogrlhf">&lt;a class="link" href="https://huggingface.co/blog/rlhf" target="_blank" rel="noopener"
>RLHF 模型详解&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-09-54-30.png"
width="1450"
height="1338"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="260px"
>&lt;/p>
&lt;p>近期 AI 圈最火的事情，莫过于 OpenAI 发布的聊天机器人 ChatGPT 了。&lt;/p>
&lt;p>这个智能聊天机器人已经强大到可以让人担忧的地步了。&lt;/p>
&lt;p>那么，它背后的实现原理是什么？&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/blog/rlhf" target="_blank" rel="noopener"
>这篇文章&lt;/a>讲解了 ChatGPT 所使用的 RLHF（人类反馈强化学习） 模型是如何实现的以及它的未来会怎样发展。&lt;/p>
&lt;h3 id="基于扩散模型生成音乐httpswwwriffusioncomabout">&lt;a class="link" href="https://www.riffusion.com/about" target="_blank" rel="noopener"
>基于扩散模型生成音乐&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-10-03-35.png"
width="540"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>基于文本生成图像的扩散模型已经火了一段时间了。&lt;/p>
&lt;p>我当时还在想，既然基于扩散模型可以生成图像的话，那能不能生成声音呢？&lt;/p>
&lt;p>结果我只是动了动念头，人家这边已经把成果拿出来了。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.riffusion.com/about" target="_blank" rel="noopener"
>这篇文章&lt;/a>介绍了他们基于扩散模型生成音乐的项目。&lt;/p>
&lt;p>我试听了一下，效果还不错，挺神奇的。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://ittavern.com/getting-started-with-tmux/" target="_blank" rel="noopener"
>tmux 入门&lt;/a>，一篇 tmux 的入门教程。tmux 是一个终端程序，可以同时模拟多个客户端控制台，如果觉得不好理解的话，可以认为它是一个控制台的多页签浏览器。因为在工作中经常需要 ssh 登录服务器进行编程开发，我现在已经离不开它了。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-10-12-18.png"
width="701"
height="419"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://oimo.io/works/" target="_blank" rel="noopener"
>一个有趣的个人网站&lt;/a>，作者是一个日本在读博士生，网站放了一些个人的编程作品，主要跟物理模拟、像素艺术有关。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-10-14-33.png"
width="915"
height="450"
loading="lazy"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.hello-algo.com/" target="_blank" rel="noopener"
>你好，算法&lt;/a>，一本开源电子书，可在线阅读，深入浅出讲解数据结构和算法，生动有趣，适合有一定编程基础但是算法这块有些薄弱的爱好者阅读。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-10-20-26.png"
width="3144"
height="2319"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://nbviewer.org/github/gpeyre/numerical-tours/blob/master/python/ml_6_nn.ipynb" target="_blank" rel="noopener"
>神经网络在线教程&lt;/a>，一套神经网络编程教程，提供在线的 python 代码阅读环境，适合作为入门资料学习。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-10-23-10.png"
width="388"
height="262"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="355px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 011 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/</link><pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-011-期">机器文摘 第 011 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="自己动手做一个天气墨水屏">自己动手做一个天气墨水屏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-13-22.png"
width="617"
height="455"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>
有个喜欢动手的哥们，发现了自己及家人的一项小需求，即从家出门的时候想快速知道天气情况。&lt;/p>
&lt;p>虽然这种需求抬眼看一下手机也能实现，但是本着“懒惰使人进步”的核心思想(作者懒得掏出手机)他动手实现了一套基于电池供电的可以显示天气预报信息的电子墨水屏。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://kimmo.blog/posts/7-building-eink-weather-display-for-our-home/" target="_blank" rel="noopener"
>《做一个天气墨水屏》&lt;/a>记录了作者从诞生点子到产品出炉的全过程。&lt;/p>
&lt;p>另外作者还开源了项目的源代码，&lt;a class="link" href="https://github.com/kimmobrunfeldt/eink-weather-display" target="_blank" rel="noopener"
>可在这里获取&lt;/a>。&lt;/p>
&lt;h3 id="m1-gpu-的故事">M1 GPU 的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-21-23.png"
width="985"
height="614"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>
GPU 大家都知道，&lt;a class="link" href="https://asahilinux.org/2022/11/tales-of-the-m1-gpu/" target="_blank" rel="noopener"
>这里有篇文章介绍了它的工作细节&lt;/a>。&lt;/p>
&lt;p>作者来自一个给苹果 M1 芯片适配 Linux 驱动的团队（苹果官方不提供驱动，所以这意味着需要做一些逆向工程）。&lt;/p>
&lt;p>本文记录了这些工作中比较有趣的部分，还顺便介绍了 GPU 的一些底层工作原理。&lt;/p>
&lt;h3 id="在-commodore-64-上实现位图滚动条的显示">在 Commodore 64 上实现位图滚动条的显示
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-37-41.png"
width="386"
height="338"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="274px"
>
Demosense 是一项挖掘计算机硬件机能极限的活动。&lt;/p>
&lt;p>通常创作者们会通过各种编程技巧来实现看似无法达到的效果。&lt;/p>
&lt;p>由于 Commodore 64 这台古董电脑十分经典，现在仍有不少Demosense爱好者在为它开发程序。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.c64demo.com/side-border-bitmap-scroller/" target="_blank" rel="noopener"
>这篇文章&lt;/a>讲述了著名 C64 demo 程序 &lt;a class="link" href="https://csdb.dk/release/?id=195841" target="_blank" rel="noopener"
>Memento Mori&lt;/a> 的实现过程，程序在 Commodore 64 上显示了一副巨大（对于C64来说）的图片。&lt;/p>
&lt;p>这在圈内属于首创。&lt;/p>
&lt;h3 id="动手做一个-4-位-cpu">动手做一个 4 位 CPU
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-43-28.png"
width="496"
height="370"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>
计算机组成原理是不是还没学明白？没关系，我们可以自己亲手做一个简单的 CPU 。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.bigmessowires.com/nibbler/" target="_blank" rel="noopener"
>Nibbler&lt;/a> 是一款 4 位 CPU，使用标准 7400 系列逻辑芯片（单个计数器、寄存器、缓冲器和门）构建而成。是一个简单 CPU 的教育示例，易于理解和构建，但仍然能够运行游戏和其他有趣的程序。Nibbler 在 5 x 4 英寸（127 x 102 毫米）穿孔板上使用绕线制造。CPU总共包含17个芯片。&lt;/p>
&lt;p>作者公开了设计图纸和相关资料，可在文章内部的链接中获取。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="http://www.craftinginterpreters.com/" target="_blank" rel="noopener"
>纯手撸一个解释器&lt;/a>，编译原理没学明白没关系，这本在线电子书手把手教你写一个自己的解释器。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-51-28.png"
width="593"
height="182"
loading="lazy"
class="gallery-image"
data-flex-grow="325"
data-flex-basis="781px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md" target="_blank" rel="noopener"
>Git 飞行规则 (Flight Rules)&lt;/a> ，一个十分全面的 Git 使用指南，把你能遇到的情况都想到了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-54-49.png"
width="532"
height="541"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="236px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://thevaluable.dev/vim-advanced/" target="_blank" rel="noopener"
>Vim 高级进阶&lt;/a>，如果你已经学会了怎么退出 Vim，恭喜你，已经击败了 80% 的选手。想要在 Vim 中进行更高效的编辑操作，这份高手指南十分适合作为参考。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-57-10.png"
width="776"
height="511"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="364px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/" target="_blank" rel="noopener"
>Flexbox 布局交互指南&lt;/a>，这篇在线教程讲解了如何使用 Flexbox 进行页面布局，难能可贵的是直接在页面中提供了交互操作界面，可以一遍学一遍实践，非常方便。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-59-27.png"
width="743"
height="448"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="398px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.makesense.ai/" target="_blank" rel="noopener"
>在线 AI 标注工具&lt;/a>，想要训练自己的 AI 模型，比如目标检测、图像分类等等，可以使用这个在线工具进行数据标注，直接上传图片然后在线标注，完成后可导出 VOC、Coco 等格式的数据集。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-10-02-46.png"
width="628"
height="391"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 010 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/</link><pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-010-期">机器文摘 第 010 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="极客摄影指南">极客摄影指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-14-11-12.png"
width="1235"
height="841"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="352px"
>
相机，也是机器的一种。&lt;/p>
&lt;p>我用它记录生活，捕捉生活中转瞬即逝的美好瞬间。&lt;/p>
&lt;p>有个问题一直困扰着我，怎样拍出不那么“到此一游”的照片？&lt;/p>
&lt;p>怎样才能“掌控”相机这个机器？&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://lcamtuf.coredump.cx/photo_basics/" target="_blank" rel="noopener"
>《极客摄影》（英文）&lt;/a>能够帮助你对摄影做一个真正深入的理解（而不是学习那些充斥社交平台的各种浮于表面的“技巧”）。&lt;/p>
&lt;p>作者是一个热爱摄影的技术男，有二十多年摄影经验。&lt;/p>
&lt;p>听他给你讲讲什么是“光”和“构图”。&lt;/p>
&lt;p>一篇就够了。&lt;/p>
&lt;h3 id="ms-dos-背后的设计">MS-DOS 背后的设计
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-14-24-37.png"
width="480"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="225px"
>&lt;/p>
&lt;p>包括我在内的不少 80 后接触电脑是从 MS-DOS 开始的。&lt;/p>
&lt;p>对于它的黑窗口和命令行都有着很深的印象。&lt;/p>
&lt;p>上大学时执行最多的命令是&lt;code>format c: /s /q&lt;/code>&lt;/p>
&lt;p>当年还玩过不少在 DOS 平台的游戏，比如仙剑奇侠传、主题医院等等。&lt;/p>
&lt;p>只是当时没工夫对系统本身做深入了解。&lt;/p>
&lt;p>顶多是，自己在学习汇编语言时，对 DOS 又仔细端详了几眼。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://patersontech.com/Dos/Byte/InsideDos.htm" target="_blank" rel="noopener"
>《凑近看看 MS-DOS 》（英文）&lt;/a>，介绍了 DOS 系统的设计标准、内存分配、磁盘文件结构、FAT文件系统的技术细节等等。&lt;/p>
&lt;p>想要窥探技术细节的可以点进去看看。&lt;/p>
&lt;h3 id="构建最快的-lua-解释器">构建最快的 Lua 解释器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-14-45-43.png"
width="645"
height="386"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>
给动态语言编写解释器可能不算太难（如果只是能跑的话）。&lt;/p>
&lt;p>但是如果要编写一个高性能的、好用的动态语言解释器，比如像谷歌浏览器所用的 V8 引擎那样，就比较困难了。&lt;/p>
&lt;p>&lt;a class="link" href="https://sillycross.github.io/2022/11/22/2022-11-22/" target="_blank" rel="noopener"
>《构建最快的 Lua 解释器》&lt;/a>这篇文章站在更高维度提供一种方法，即：编写一种可以自动生成编译器（解释器）代码的程序，以使得制作高性能解释器变得更加容易。&lt;/p>
&lt;p>我看了一下，大概就是自动化生成之前需要手工处理的编译器优化代码。作为编译原理学的不怎么明白的我，对此不敢评论。&lt;/p>
&lt;h3 id="为什么-linux-内核没有单元测试">为什么 Linux 内核没有单元测试？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-15-14-46.png"
width="637"
height="411"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>
我对单元测试的态度一般，既不强烈支持，也不反对。&lt;/p>
&lt;p>听说有的开发团队由于对于单元测试十分狂热，已经到了不允许写注释，都用单元测试替代的地步。&lt;/p>
&lt;p>前不久，在 HN 上有网友发起了一个引战的讨论：“&lt;a class="link" href="https://news.ycombinator.com/item?id=33742130" target="_blank" rel="noopener"
>既然单元测试这么好，为什么 Linux 内核源码不用呢？&lt;/a>”&lt;/p>
&lt;p>以下为部分观点：&lt;/p>
&lt;blockquote>
&lt;p>单元测试被严重高估了，TDD有一些好主意，但有一段时间它变成了一种宗教。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>单元测试与TDD宗教不是一回事。它只是意味着将事物划分为小单元并尽可能详尽地测试其功能。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>SQLite不是反例吗？他们有更多的单元测试代码，而不是实际运行的代码。&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener"
>Python 100 天从入门到精通&lt;/a>，Python 好学吗？好学又不好学，上手容易，精通难。这里有套开源教程囊括了从入门到实战应用（语言基础、数据处理、Web开发、网络开发、爬虫、深度学习等）的所有课程。这个仓库目前已经在 Github 上获得了 12 万star。可以说是好评如潮，想深入学习 Python 的不容错过。赶紧到我收藏夹里吃灰。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://wokwi.com/" target="_blank" rel="noopener"
>在线单片机模拟器&lt;/a>，想要学习单片机开发，又没有硬件设备吗？这个网站最合适。不需要担心手残不会电烙铁，也不用担心买不到芯片。直接在线进行模拟接线，直接运行编写的代码，结果实时展现。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-15-31-31.png"
width="878"
height="661"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://slowroads.io/" target="_blank" rel="noopener"
>slow roads&lt;/a>，一个在线赛车游戏。基于网页制作。亮点在于作者实现了无限地图。所有地形和道路均使用程序生成。游戏有自动驾驶模式，如果只想观赏路边风景的话，可以开启。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-15-36-44.png"
width="1736"
height="855"
loading="lazy"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="487px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://tic80.com/" target="_blank" rel="noopener"
>TIC-80&lt;/a>，TIC-80 是一台用于制作、播放和分享小型游戏的幻想计算机。有内置的开发工具：代码、sprites、地图、声音编辑器和命令行，这足以创建一个迷你复古游戏。在退出时，你将得到一个盒式文件，它可以在网站上存储和播放。
另外，游戏可以打包成一个播放器，可以在所有流行的平台上运行，并按你的意愿分发。为了制作一个复古风格的游戏，整个创作过程是在一些技术限制下进行的。240x136 像素的显示屏，16 种颜色的调色板，256 个 8x8 的彩色 sprites，4 channel sound 等等。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-15-42-20.png"
width="490"
height="279"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 009 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/</link><pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-009-期">机器文摘 第 009 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="游戏中的精灵">游戏中的“精灵”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-21-14-24-20.png"
width="729"
height="409"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>
&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E7%B2%BE%E7%81%B5%E5%9B%BE" target="_blank" rel="noopener"
>精灵（sprite）&lt;/a>这个词来自古法语单词“esprit”，意思是“精神”——源自拉丁语“spiritus”。在民间传说中，精灵是活泼、俏皮和神奇的小生物。然而对于游戏开发者来说，它又是另一个含义了。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://wireframe.raspberrypi.com/articles/the-surprising-history-of-sprites" target="_blank" rel="noopener"
>《精灵的惊人历史》（英文）&lt;/a>，介绍了不同的游戏厂商，在早期硬件机能有限的条件下，如何实现“角色在屏幕上移动”这个现在看似十分简单的事情的。&lt;/p>
&lt;p>对于不了解“精灵”的含义的，稍作如下解释：&lt;/p>
&lt;blockquote>
&lt;p>2D 游戏在处理需要动起来的角色时，出于性能考虑，将一部分图形的绘制与背景画面的绘制分开，对于频繁需要刷新（动起来的）部分，单独处理，使他们感觉像是漂浮在背景画面的“幽灵”似的，故名“精灵”。&lt;/p>
&lt;/blockquote>
&lt;h3 id="任天堂-nes-的一些技术细节">任天堂 NES 的一些技术细节
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-21-14-41-33.png"
width="507"
height="477"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>
NES 是任天堂推出一款极其成功的家用游戏机（NES ： Nintendo Entertainment ，System 是其在北美发售的名称，亚洲叫 FC ：Family Computer），不少80、90后的朋友应该都玩过（或者是国内山寨厂商仿制的*霸王之类）。&lt;/p>
&lt;p>NES 使用极其经典的 6502 CPU。这块 CPU 有多经典呢，苹果的 Apple1代2代 、史上销量第一的个人电脑 Commodore 64 、国内早年比较流行的文曲星等，使用的都是这个 CPU。&lt;/p>
&lt;p>&lt;a class="link" href="https://medium.com/@fogleman/i-made-an-nes-emulator-here-s-what-i-learned-about-the-original-nintendo-2e078c9b28fe" target="_blank" rel="noopener"
>《我做了一个 NES 模拟器》（英文）&lt;/a>，这篇文章的作者在编写模拟器的过程中挖出了不少技术细节，里面还提到了硬件存在的各种 BUG （没错，要模拟的话必须连 BUG 都得模拟，不然有些游戏玩不了），想要了解的朋友可以点进去看一下。&lt;/p>
&lt;p>作为模拟器爱好者，我对 6502 处理器非常好奇，一度希望自己动手也实现一个，而且这款处理器真的非常适合模拟器入门，毕竟只有三个寄存器和百十条指令。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/fogleman/nes" target="_blank" rel="noopener"
>文中提到的 NES 模拟器在 Github 上开放了源码&lt;/a>，有兴趣的可以学习。&lt;/p>
&lt;h3 id="一个桌面开发程序员为了学习-javascript-而手撸了一个基于-webgl-的游戏引擎">一个桌面开发程序员为了学习 Javascript 而手撸了一个基于 WebGL 的游戏引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-21-15-11-11.png"
width="780"
height="448"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="417px"
>
学习一样技能最好的方式就是动手去做。&lt;/p>
&lt;p>当我感叹牛人怎么那么厉害的时候，往往忽略了牛人的学习过程。&lt;/p>
&lt;p>以为他们天生就那样。&lt;/p>
&lt;p>事实上他们的技能也是靠努力训练得来的。&lt;/p>
&lt;p>不过，学习方法确实很重要。&lt;/p>
&lt;p>&lt;a class="link" href="http://zephyrosanemos.com/" target="_blank" rel="noopener"
>《我对 Javascript 的尝试》（英文）&lt;/a>，这篇文章的作者原本是一个桌面程序开发者（类似 CAD 软件之类）。&lt;/p>
&lt;p>他突然想要学习前端开发，掌握 Javascript 语言。&lt;/p>
&lt;p>于是结合自己之前的知识，使用前端技术做了一套很优秀的 Demo 程序，一个性能和外观都很不错的游戏引擎。&lt;/p>
&lt;p>文章里作者详细介绍了实现过程中对技术、算法的选择等等。&lt;/p>
&lt;p>内容很长，但还算友好，比较干货。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://roadmap.sh/" target="_blank" rel="noopener"
>开发者之路&lt;/a>，汇总了各个技术路线的学习资料，包括前端、后端、运维、计算机科学、区块链、移动端、质量管理等等。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-21-15-24-33.png"
width="753"
height="455"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>
总之极其全面。
目前在 Github 有两百多万个 star，被 fork 了 三十多万次。&lt;/li>
&lt;li>&lt;a class="link" href="https://crxdl.com/" target="_blank" rel="noopener"
>chrome 插件下载&lt;/a>，访问谷歌浏览器插件商店有困难吗？试试这个网站，可以直接下载插件的包文件，下载后拖入浏览器即可安装。不过我已经转换到微软的 Edge 阵营了，用不到这个了。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.toptal.com/developers/css3maker" target="_blank" rel="noopener"
>CSS3 生成器&lt;/a>，对于 CSS 的属性参数总是记不住，这个网站就很适合我。每次要调背景渐变、圆角、阴影、动画曲线等等，都得现去搜。有了这个网站，在线点点拖拖，直接复制代码即可。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-21-15-33-35.png"
width="1288"
height="660"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://tesseract.projectnaptha.com/" target="_blank" rel="noopener"
>tesseract.js&lt;/a>，可直接在浏览器里运行的 OCR 引擎，支持多国语言（超过 100 种）文字识别。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-21-16-16-10.png"
width="1039"
height="439"
loading="lazy"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="568px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.aichpoem.net/#/shisanbai/poem" target="_blank" rel="noopener"
>AI 在线写诗&lt;/a>，比较全面的 AI 写诗工具，可以写律诗、绝句、现代诗、歌词等等，根据输入的主题任意发挥。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-23-10-36-44.png"
width="846"
height="502"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.upscale.media/zh" target="_blank" rel="noopener"
>图片分辨率在线提升&lt;/a>，上传图片，网站使用 AI 算法将图片的清晰度自动提升，效果还不错。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-23-10-41-36.png"
width="1087"
height="693"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 008 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-008-期">机器文摘 第 008 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="用好-github给自己建立一个全方位的私有云平台">用好 GitHub，给自己建立一个全方位的私有云平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/2022-11-16-09-24-41.png"
width="754"
height="393"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="460px"
>
很多人都有进行个人的知识管理和数字资源管理的需求，市面上也有很多软件工具或者平台来满足这样的需求，但是大部分都是收费的，且自由度不高。我个人经常使用 Github 作为知识管理仓库，我的网络日志、技术博客、私人小项目、电子书籍等都放在上面，生活中已经离不开这个网站了。&lt;/p>
&lt;p>近期读到这样一篇文章&amp;ndash;&lt;a class="link" href="https://www.bmpi.dev/self/use-github-better/" target="_blank" rel="noopener"
>善用 Github&lt;/a>，全方位讲解了 Github 如何使用，如何将其提供的服务发挥最大化的作用，看完受益匪浅。&lt;/p>
&lt;blockquote>
&lt;p>GitHub 是微软旗下的一个在线软件源代码托管服务平台，也是一个拥有八千多万开发者用户的社区。很多开发者应该对GitHub有一定的了解，但非技术人员大多可能并不会去使用它。本文更多是想给非技术人员来介绍这个平台，看完这篇文章，希望能让更多人在上面来学习、创作与展示自己的作品。&lt;/p>
&lt;/blockquote>
&lt;h3 id="webgpu-是什么跟-webgl-有什么关系">WebGPU 是什么？跟 WebGL 有什么关系？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/2022-11-16-09-36-12.png"
width="846"
height="433"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>
前几天我想在网页上制作一个小游戏，用于尝试一下图形编程相关的技术。用到了一些基于 Web 技术的 3d 图形框架，比如 Three.js、Babylon.js 等等。在尝试的过程中遇到了一个新的名词 WebGPU，之前总是在听说 WebGL 相关的技术，结果说了这么多年，WebGL还没普及，怎么又冒出来一个 WebGPU？于是找了一篇文章，浅扒一下各个图形接口的历史。就是这篇&lt;a class="link" href="https://www.51cto.com/article/698100.html" target="_blank" rel="noopener"
>浅入浅出 WebGPU&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>2016年6月，Google 产生了使用新API来代替WebGL的想法，称之为 WebGL Next。
2017年1月，Khronos Group 举办了WebGL Next研讨会，Chromium一马当先，展示了可以基于OpenGL和Metal独立运行的新图形系统原型，同时Apple和Mozilla也分别展示了自己的原型，三者都非常类似于Metal Api。
次月，Apple就向W3C提交了一个名为 WebGPU 的技术概念验证方案，基于Metal图形开放接口，最终W3C采纳了 WebGPU 这个名字作为下一代标准，Apple的提案进入了正式的小组提案中。
3月，Mozilla向Khronos Group提交了基于Vulkan的名为WebGL Next提案。
2018年6月，Chrome团队宣布着手实现WebGPU，这意味着Khronos的失败，WebGPU胜出，大家以后还是团结在W3C的周围。
按照预期，工作组希望在2021年底发布WebGPU 1.0 标准，不过目前只有草案。
WebGPU 1.0 草案：https://www.w3.org/standards/types#WD&lt;/p>
&lt;/blockquote>
&lt;h3 id="扔掉-photoshop-改用字符串绘图">扔掉 Photoshop 改用字符串绘图
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/2022-11-16-09-58-00.png"
width="761"
height="741"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>
相信很多人都接触过使用字符绘制的图片，这在程序员圈子里甚至发展为一门专有的艺术 “&lt;a class="link" href="https://zh.wikipedia.org/wiki/ASCII%E8%89%BA%E6%9C%AF" target="_blank" rel="noopener"
>ASCII 艺术&lt;/a>”。不过我现在不是要说这些，我在一篇 2015 年发表的文章里，发现了这个：有个猛男在自己的程序里彻底抛弃使用 Photoshop 制作的图片资源，改用字符串来描述各种图形（程序界面的图标），然后自己再用代码将其渲染成为高清的图像。&lt;/p>
&lt;p>作者对此很沾沾自喜，他甚至设计了一套自用的语法规范，用特定字母代表特定的符号关系，这样就可以组合出各种复杂的图案了。&lt;/p>
&lt;p>我也在文章的评论区见到了跟我有同样疑惑的读者留言：“这不就是重新发明了 &lt;a class="link" href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%B8%AE%E6%94%BE%E5%90%91%E9%87%8F%E5%9C%96%E5%BD%A2" target="_blank" rel="noopener"
>SVG&lt;/a> 吗？唯一的区别就是没有用 XML 作为载体”。&lt;/p>
&lt;p>不过文章记录的整个开发过程还是很有趣的，希望了解朋友可以点进去看看 &lt;a class="link" href="http://cocoamine.net/blog/2015/03/20/replacing-photoshop-with-nsstring/" target="_blank" rel="noopener"
>Replacing Photoshop With NSString&lt;/a>&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://ffmpeg.xianwaizhiyin.net/" target="_blank" rel="noopener"
>FFmpeg原理&lt;/a>，FFmpeg 这个开源项目可能圈外的人士了解不多，但实际上我们生活中一刻也离不开它。现在的网络直播、网络视频网站和移动App、各种视频剪辑合成软件，都或多或少的使用了 FFmpeg 提供的编解码技术。这本在线书籍对于想进一步了解 FFmpeg 以及视频编解码技术的朋友是个不错的参考资料。&lt;/p>
&lt;blockquote>
&lt;p>本书《FFmpeg原理》主要讲解 FFmpeg 原理性的知识，前面几章主要讲解一些音视频开发的基础知识，例如原始数据 YUV 跟 RGB，封装格式 FLV 跟 MP4 ，压缩编码的基本概念，还有封装格式分析。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://rustdesk.com/zh/" target="_blank" rel="noopener"
>开源虚拟与远程桌面基础架构&lt;/a>，远程桌面软件，开箱即用，无需任何配置。(我个人目前还是使用windows的远程桌面多一些，不过这个开源的rustdesk看起来不错)&lt;/p>
&lt;blockquote>
&lt;p>您完全掌控数据，不用担心安全问题。您可以使用我们的注册/中继服务器，或者自建，亦或者开发您的版本
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/2022-11-16-10-26-09.png"
width="1388"
height="701"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://learnxinyminutes.com/" target="_blank" rel="noopener"
>Learn X in Y minutes&lt;/a>，这里的教程几乎涵盖所有编程语言，完全没有废话。英文版、中文版都有。如果有编程语言基础的话，通过这个网站确实可以在几十分钟内掌握一门新的编程语言的核心知识。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://flash.zczc.cz/" target="_blank" rel="noopener"
>Flash 保存计划&lt;/a>，Flash 虽然消失了，但是它曾经创造的辉煌一直在我们的记忆里，现在偶尔还想起一些经典的小游戏。这个网站里收藏了很多经典的Flash小游戏，通过一些黑科技复活了它们，可以在浏览器里运行体验。反正我一打开了黄金矿工，就半天停不下来。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/2022-11-16-10-34-57.png"
width="1142"
height="554"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="494px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://keg.cs.tsinghua.edu.cn/codegeex/index_zh.html" target="_blank" rel="noopener"
>CodeGeeX: 多语言代码生成模型&lt;/a>，又一个能帮你写代码的 AI 模型。提供有官方的 VSCode 插件。我试了一下，效果跟 Github 的 copilot 还有一定的差距。&lt;/p>
&lt;blockquote>
&lt;p>CodeGeeX是一个具有130亿参数的多编程语言代码生成预训练模型。CodeGeeX采用华为MindSpore框架实现，在鹏城实验室“鹏城云脑II”中的192个节点（共1536个国产昇腾910 AI处理器）上训练而成。截至2022年6月22日，CodeGeeX历时两个月在20多种编程语言的代码语料库（&amp;gt;8500亿Token）上预训练得到&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://iximiuz.com/en/series/computer-networking-fundamentals/" target="_blank" rel="noopener"
>计算机网络基础学习（英文）&lt;/a>，一个在线讲解网络基础知识的教程，优点是内容简洁，不用特别多的专用名词唬人，另外还提供了在线实验的环境。&lt;/p>
&lt;blockquote>
&lt;p>关于计算机网络的书籍往往令人生畏 - 数千页，无聊的图表&amp;hellip;&amp;hellip;这个教程以几千字的字数引导您了解网络基础知识！它还提供动手实验室来实践所获得的知识。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/2022-11-16-10-51-40.png"
width="764"
height="476"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 007 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-007-期">机器文摘 第 007 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="如何在-html5-canvas-制作可精确控制时间的动画">如何在 HTML5 Canvas 制作可精确控制时间的动画
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-09-30-08.png"
width="576"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="410px"
>&lt;/p>
&lt;p>使用 Canvas 对象在网页中制作动画非常简单，有不少人喜欢直接使用定时器 &lt;code>setinterval&lt;/code> 以一定的时间周期循环执行绘图代码来实现动画效果。但是这种做法有一个弊端，由于显示刷新率以及计算机硬件性能的不同，会导致在不同机器上的表现差异。比如你希望你的动画角色在 1 秒内移动 50 个像素，但是实际执行起来却很难控制。&lt;a class="link" href="https://www.viget.com/articles/time-based-animation/" target="_blank" rel="noopener"
>基于时间的动画&lt;/a>这篇文章讲解了如何使用浏览器的 &lt;code>requestAnimationFrame&lt;/code> API 来实现精准控制动画时间的效果，里面给出了一个很简单的样例，但是基本上给出了一个完整的“更新、渲染、通过时间变化计算运动距离”的游戏控制架构。&lt;/p>
&lt;h3 id="如何使用纯-web-技术开发一个相机-app">如何使用纯 Web 技术开发一个相机 App
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-09-47-44.png"
width="680"
height="475"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="343px"
>&lt;/p>
&lt;p>如果不习惯复杂的移动 app 开发环境，直接使用 Web 技术开发一些小的 App 也是十分方便的。我近期希望通过网页实现一个拍照的应用，并且希望不使用手机的原生相机功能，而是自己控制一些相机参数、后期效果、增加特定的取景框等等。于是我找到了一篇教学指南：&lt;a class="link" href="https://blog.prototypr.io/make-a-camera-web-app-tutorial-part-1-ec284af8dddf" target="_blank" rel="noopener"
>Make a Camera Web App&lt;/a>，只需几十行代码就实现了一个相机 App 。感兴趣的朋友可以点进去看看。&lt;/p>
&lt;h3 id="数据库是如何工作的从零开始写一个数据库">数据库是如何工作的，从零开始写一个数据库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-10-01-15.png"
width="390"
height="394"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="237px"
>&lt;/p>
&lt;p>如果和我一样好奇数据库是如何实现的，可以看看&lt;a class="link" href="https://cstack.github.io/db_tutorial/" target="_blank" rel="noopener"
>这篇文章&lt;/a>。带你用 C 语言从头撸一个数据库出来。&lt;/p>
&lt;h3 id="使用-rust-写一个操作系统">使用 Rust 写一个操作系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-10-05-43.png"
width="702"
height="518"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>Rust 逐渐火起来了，这篇 &lt;a class="link" href="https://os.phil-opp.com/zh-CN/" target="_blank" rel="noopener"
>2018 年的文章&lt;/a>整理了一份教程，作者尝试使用 Rust 写一个操作系统，我之所以收录它是因为作者还在 Github 开源了代码，并且这系列教程甚至提供了多国语言的版本。制作精良。应该是实践操作系统知识的好教材。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://100dayscss.com/" target="_blank" rel="noopener"
>100 天精通 CSS &lt;/a>，这个网站给了你 100 个关于 CSS 技术的挑战题目，也许练完之后可以达到深入应用 CSS 的效果，我尝试了几个挑战，有些题目的设置有些偏炫技范畴了，想在工作中使用估计会被打死。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-10-24-10.png"
width="392"
height="391"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://cht.sh/" target="_blank" rel="noopener"
>Linux 命令在线帮助工具&lt;/a>，对于我这种经常记不住命令用法的人来说真的是一种福音。比如我就经常记不清 &lt;code>tar&lt;/code> 命令的用法，面对压缩包解压或者文件打包的工作每次都是去网上搜索一番。有了这个在线工具，直接在命令行中使用 &lt;code>curl&lt;/code>请求他的网址就可给出命令的样例用法详解，非常方便。比如执行&lt;code>curl cht.sh/tar&lt;/code> 就会给出 tar 的使用样例了，我直接复制粘贴之。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-10-28-42.png"
width="586"
height="462"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="304px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.mobilephonemuseum.com/" target="_blank" rel="noopener"
>手机博物馆&lt;/a>， 网站收录了各品牌手机的各代产品资料，包括手机图片、型号参数、当时发布的广告等。不过我看了一下，资料应该还不齐全，有些手机只是列了个名字和型号在那儿，还缺少详细信息，估计还在继续收集中。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-10-32-23.png"
width="1696"
height="790"
loading="lazy"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="515px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://www.famicn.com/" target="_blank" rel="noopener"
>中文家用游戏博物馆&lt;/a> ,收录了比较齐全的家用游戏机及掌机的中文版游戏资料。可以直接在线通过模拟器玩耍。有不少经典的 FC、GB、MD 游戏，甚至还有小霸王学习机的 ROM ，可以在线体验。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-10-36-51.png"
width="1096"
height="711"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 006 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-006-期">机器文摘 第 006 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="怎样写一段代码把自己打印出来">怎样写一段代码把自己打印出来？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/2022-11-02-13-45-45.png"
width="651"
height="400"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>近期在知乎上看到一个&lt;a class="link" href="https://www.zhihu.com/question/22006572/answer/2722369370" target="_blank" rel="noopener"
>如何编写代码打印自己的问题&lt;/a>，感到十分有趣。以前也在网上见到过类似的代码，用 C 或者 Javascript 等各种语言实现的版本都有。当时只是感叹代码写的十分神奇，一段代码在运行之后竟然输出自己的源代码，而且一个字符也不差，并没有搞懂其中的原理。这篇回答里，作者给出了详细解释。并指出，冯·诺依曼早在他编写的《自复制元胞自动机理论》一书中的提出了这种事情在理论上的通用方法。&lt;/p>
&lt;blockquote>
&lt;p>如上图所示，自复制系统有五个基本部件：A：通用构造器；B：通用复制器；C：控制器；D：其他函数；ϕ(A,B,C,D)\phi(A,B,C,D)\phi(A,B,C,D) : A, B, C, D的编码；当自复制过程启动的时候，B将编码复制一份。A再根据复制出的编码构造出ABCD。最后，C再将这些结构组合起来，构造出一个新的、复制的结构。可以看到，自复制、自打印程序的核心就在于通用构造器和编码，因为复制器、控制器都是比较容易实现的。&lt;/p>
&lt;/blockquote>
&lt;p>具体实现的示例，文中有更详细的说明。&lt;/p>
&lt;p>最后，此问题可以引申到，大自然中生命基于基因的复制机制，也是与此相关，甚至其背后都是同样的机制。&lt;/p>
&lt;h3 id="kevin-kelly-在-68-岁生日时给出的-68-条建议">Kevin Kelly 在 68 岁生日时给出的 68 条建议
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/2022-11-02-14-01-30.png"
width="688"
height="368"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://baike.baidu.com/item/%E5%87%AF%E6%96%87%C2%B7%E5%87%AF%E5%88%A9/6607570" target="_blank" rel="noopener"
>凯文·凯利（又称KK， 作者，著有《失控》《科技想要什么》《必然》等）&lt;/a>，上个月 28 号是他的 68 岁生日，他准备了 68 条简短的建议，作为礼物送给年轻人。&lt;/p>
&lt;p>有人翻译了&lt;a class="link" href="https://zhuanlan.zhihu.com/p/143834871" target="_blank" rel="noopener"
>KK 在 68 岁生日时给出的 68 条建议&lt;/a>。&lt;/p>
&lt;p>摘抄几条如下：&lt;/p>
&lt;blockquote>
&lt;p>任何一项大工程（修房子、拍电影、开发 app）完成度为 90% 的时候，你都要做好心理准备：剩余的大量细节工作会占掉你另一段与之前相当的时间。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>不要担心自己问的问题听起来很傻。99% 的情况下，其他人都有和你一样的问题，只不过羞于问出口而已。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>别成为一群人里最聪明的那个。和那些比你聪明的人待在一起，向他们学习。如果能找到和你观点相左的聪明人，那就更好了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>别做最好的。做唯一的。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>任何真实之物都源于虚构之意。想象是宇宙中最强大的力量，也是你能够日益精进的能力。生命中可以因不知众人所知而获益的能力，仅此一项。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>经验往往被高估了。招募的时候，要看资质，技能则可以培训。许多令人惊奇和赞叹的事情，都是由第一次做的人做出来的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="怎样搭建一个最简的-git-服务器">怎样搭建一个最简的 GIT 服务器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/2022-11-02-14-15-18.png"
width="626"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>GIT 是现在软件开发过程中必不可少的版本控制工具，功能非常强大，我们平时直接使用单位的私有服务或者在线的云服务（如：Github 等）。&lt;/p>
&lt;p>如果想要搭建个人的服务，可能就比较繁琐一些。&lt;a class="link" href="https://www.ruanyifeng.com/blog/2022/10/git-server.html" target="_blank" rel="noopener"
>阮一峰老师的这篇博客&lt;/a>就解答了怎样采用极简的技术路线，为自己搭建一台 GIT 服务器。&lt;/p>
&lt;blockquote>
&lt;p>自己搭建 Git 服务器的原因，无非就是不方便访问外网，不愿意代码放在别人的服务器，或者有一些定制化的需求。
这时，你可以选择开源的 Git 服务器软件。
Gitlab CE
Gitea
Gogs
Onedev
这些软件里面，Gogs 的安装是最简单的，但是功能相对比较弱。功能越强的软件，安装越复杂。
如果你只是想远程保存一份代码，并不在意有没有 Web 界面，或者其他功能，那么根本不用安装上面这些软件，一行命令就够了。&lt;/p>
&lt;/blockquote>
&lt;h3 id="为什么很多程序员讨厌低代码">为什么很多程序员讨厌低代码？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/2022-11-02-14-24-59.png"
width="640"
height="355"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>“低代码”（一般指：不用或少用编写代码的方式进行软件开发）这个词近两年又开始火了，它代表着对软件工程的一种美好“幻想”，即：花费更低的代价去构建复杂的软件系统。&lt;/p>
&lt;p>虽然每隔一个时间周期都会被重提一次，但是每次都未能如愿。&lt;/p>
&lt;p>现在既然又被频繁提及，我在知乎上发现了这样一篇&lt;a class="link" href="https://www.zhihu.com/question/561025857/answer/2734260311" target="_blank" rel="noopener"
>关于低代码话题的回答&lt;/a>。从程序员的视角表达了对低代码这种期望的观点，有兴趣的朋友可以点进去看看。&lt;/p>
&lt;blockquote>
&lt;p>软件工程这门学问，研究的就是“如何利用工程思想，从整体上降低开发复杂性”；但与之同时，它不得不反复强调“软件工程试图解决的、是人为引入的不必要的复杂性；但工程的本质复杂性是无法逃避的。因为没有银弹，没有银弹，没有银弹！”&lt;/p>
&lt;/blockquote>
&lt;p>我个人的观点是：低代码或者配置化、拖拽式软件开发，很难平衡对复杂现实的抽象程度和开发便利性的矛盾关系。如何做到既提供方便的组件同时又不限制对个性化需求的实现，这需要非常强大的设计能力以及对于特定应用场景的取舍。目前来看，如果要做到或者接近上述状态，必然要先消耗巨量的成本，至于是否值得，可能不同的主体会有不同的选择吧。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/Visualize-ML/Book4_Power-of-Matrix" target="_blank" rel="noopener"
>从加减乘除到机器学习&lt;/a>，一本不错的数学扫盲书，如果你在学习人工智能的时候对数学感到吃力的话，这本书非常适合阅读，一点也不枯燥。主要讲解线性代数相关的知识。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/2022-11-02-14-46-11.png"
width="616"
height="335"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="441px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="noopener"
>命令行的艺术&lt;/a> 想成为命令行高手，掌握这一篇就够了。&lt;/p>
&lt;blockquote>
&lt;p>熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/2022-11-02-14-47-54.png"
width="477"
height="287"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="398px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/practical-tutorials/project-based-learning" target="_blank" rel="noopener"
>基于实际项目的学习&lt;/a>，这是一个巨大的代码工程资源索引，里面列举了针对各种编程语言的个人项目，当你不知道该如何去深入学习一门编程语言的时候，选择一个这里的项目然后自己动手跟着练一遍效果绝对惊人。入选的项目都十分有趣，比如怎样用 C 写一个解释器、怎样写一个自己的编辑器、自己动手实现 TCP/IP 协议栈，等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/lxgw/LxgwWenKai" target="_blank" rel="noopener"
>霞鹜文楷&lt;/a>，一款开源中文字体，基于 FONTWORKS 出品字体 Klee One 衍生。用来看书非常舒服，特别是在排版上。微信读书已经内置，如果是第三方支持自定义字体的可以试试。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 005 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-005-期">机器文摘 第 005 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="穿越到-1983-年学习-basichttpslinuxcnarticle-11091-1html">&lt;a class="link" href="https://linux.cn/article-11091-1.html" target="_blank" rel="noopener"
>穿越到 1983 年学习 BASIC&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-10-33-53.png"
width="1006"
height="644"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="374px"
>&lt;/p>
&lt;blockquote>
&lt;p>很多著名的程序员，尤其在计算机游戏行业，孩童时期就在苹果 II 和 Commodore 64 这样的 8 位计算机上开始编写游戏，John Romero、Richard Garriott 和 Chris Roberts 都是这样的例子。这好理解。在 8 位计算机时代，很多游戏只能在计算机杂志和书籍中以印刷的 BASIC 程序清单方式得到。如果你想玩其中一款游戏，就必须手工键入整个程序。不可避免的，你可能遇到一些问题，所以你就得调试你的程序。等到你让它可以工作起来了，你就已经对程序是如何运行的有了足够的了解，你就可以开始自己修改它了。如果你是一个狂热的游戏玩家，你几乎必然会成为一名优秀的程序员。&lt;/p>
&lt;/blockquote>
&lt;p>喜欢小霸王的小伙伴（老伙伴？），不可错过的文章，一起跟随作者回忆一下如何在老古董电脑上运行BASIC程序，顺便怀念一下当年靠着一本说明书就在小霸王学习机上编写（抄写）游戏的时光。&lt;/p>
&lt;ul>
&lt;li>文中提到的&lt;a class="link" href="https://vice-emu.sourceforge.io/" target="_blank" rel="noopener"
> Commodore64 电脑可以在这里下载模拟器&lt;/a>。&lt;/li>
&lt;/ul>
&lt;h3 id="在-github-的-pages-服务里跑-sqlitehttpsphireskygithubioblog2021hosting-sqlite-databases-on-github-pages">&lt;a class="link" href="https://phiresky.github.io/blog/2021/hosting-sqlite-databases-on-github-pages/" target="_blank" rel="noopener"
>在 Github 的 Pages 服务里跑 SQLite&lt;/a>
&lt;/h3>&lt;p>作者尝试做一个小网站来显示一些统计数据，于是他想到了用数据库，但是，使用数据库需要托管和维护后端服务，或者每次将整个数据集下载到浏览器中（当数据集超过10MB时，体验就变得很差劲）。&lt;/p>
&lt;p>于是作者开始琢磨有没有办法找到一个可以在静态服务器上搞一个数据库服务得可能，毕竟提供静态服务的地方有很多（如 GitHub，GitLab，Netlify 等等）。&lt;/p>
&lt;p>一通折腾下来（借助了 WASM 技术并适当的进行一些魔改），作者竟然实现了一个 100% 静态托管的数据库服务。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-10-10-18.png"
width="864"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;h3 id="语句表达式和海象操作符httpswwwzlovezlcnarticlesstmt-expr-and-walrus-operator">&lt;a class="link" href="https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/" target="_blank" rel="noopener"
>语句、表达式和海象操作符&lt;/a>
&lt;/h3>&lt;p>这是一篇介绍如何通过“海象操作符“（类似这样：&lt;code>foo := 'bar'&lt;/code>）使得Python语句更加精炼的文章。&lt;/p>
&lt;p>这种操作符之所以可以使得语句更加精炼，主要原因就是它使得一句代码既进行了赋值然后又作为表达式返回了值。&lt;/p>
&lt;p>之前写 Python 代码的时候都没注意还有这种写法，而且貌似这在 C 和 C++ 中都是基本的特性。不过 C 和 C++ 是赋值语句&lt;code>=&lt;/code>直接就返回了表达式的值，同时这给程序员提供了出错机会（有不少人应该还记得条件判断时少写了个等号导致的问题）。&lt;/p>
&lt;h3 id="给个人开发者的一些建议英文httpsnewsycombinatorcomitemid32647091">&lt;a class="link" href="https://news.ycombinator.com/item?id=32647091" target="_blank" rel="noopener"
>给个人开发者的一些建议（英文）&lt;/a>
&lt;/h3>&lt;p>hacker news 上的网友针对有志于运营自己的SaaS产品的个人开发者提了一些心得和建议。&lt;/p>
&lt;p>摘抄一点儿如下：&lt;/p>
&lt;ul>
&lt;li>关于做什么，做那些你自己都愿意付费的东西，别指望做出一个你自己都不想花钱使用的产品有别人来买单；&lt;/li>
&lt;li>还是关于做什么，不要做需要漂亮UI的东西，那会让你陷入编码之外的很多麻烦（确实很牵涉精力），如果提供的工具能够通过简单交互就能提供优质服务最佳；&lt;/li>
&lt;li>如果有可能，尽量提供自助服务模式，也就是说让用户不用见到你就可以自行操作付款了（作者这是有多社交恐惧？）；&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://visualgo.net/zh" target="_blank" rel="noopener"
>数据结构与算法可视化&lt;/a>，是一个学习算法知识的好工具。通过动图来演示和讲解数据结构和算法实现原理，针对每一个常用算法不仅有直观的图示，还附有一篇详细的文档，内涵原理知识以及代码实例，网站甚至还提供了答题练习功能，可以一边学习一边做题。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-09-31-46.png"
width="1072"
height="321"
loading="lazy"
class="gallery-image"
data-flex-grow="333"
data-flex-basis="801px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://lisperator.net/slip/" target="_blank" rel="noopener"
>SLip&lt;/a>，一个在浏览器中运行的Lisp解释器，使用Javascript实现。网站提供了一个简易的IDE，可以直接在页面中进行编程开发，还提供了图形绘制的扩展包，用于学习lisp语言非常合适。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-09-35-46.png"
width="497"
height="363"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener"
>针对 Windows 预先编译的 Python 扩展包&lt;/a>，在使用Python的时候，尤其是在Windows环境，经常会遇到有些扩展包由于依赖某些二进制库的原因导致无法通过pip直接安装，自己动手编译又十分麻烦。这个网站提供了各种预编译版本，可以直接下载网站提供的whl文件到本地然后安装。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-09-40-07.png"
width="675"
height="345"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="469px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-ray-tracing" target="_blank" rel="noopener"
> 3D 渲染器入门&lt;/a>，一套计算机图形学的入门教程，从原理讲解开始，手把手教你用C++语言编写一个自己的光线追踪渲染器。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-09-48-21.png"
width="531"
height="361"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://htmldog.com/" target="_blank" rel="noopener"
>HTMLDOG&lt;/a>，前端开发基础知识大全，主要是 HTML、CSS、Javascript 的手把手教学以及语言参考。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-09-52-21.png"
width="1862"
height="709"
loading="lazy"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="630px"
>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 004 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-004-期">机器文摘 第 004 期
&lt;/h1>&lt;h2 id="搞机">搞机
&lt;/h2>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/2022-10-18-09-53-01.png"
width="324"
height="702"
loading="lazy"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="110px"
>&lt;/p>
&lt;p>美国德州仪器公司出品的TI图形计算器是一种既能计算又能作图的新型的数学使用工具，它具备符号代数系统、几何操作系统、数据分析系统等，可以直观地绘制各种图形，并进行动态演示、跟踪轨迹。&lt;/p>
&lt;p>TI实体计算器的售价十分昂贵（相较于其他消费类计算器），这里有一个开源项目&lt;a class="link" href="http://wabbitemu.org/" target="_blank" rel="noopener"
>wabbitemu&lt;/a>，使用C语言编写的一个TI计算器的模拟器，可以在电脑上运行并模拟TI计算器，支持多种型号，如TI-82、TI-83、TI-83-plus（需要加载对应的ROM）等。&lt;/p>
&lt;p>甚至有人基于这个项目编译出了Android的版本，安装后手机秒变成高级科学计算器。&lt;/p>
&lt;p>想进一步了解TI计算器的强大，可以看一下这篇文章&lt;a class="link" href="https://zhuanlan.zhihu.com/p/148392866" target="_blank" rel="noopener"
>《计算器与计算器游戏发展简史》&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.liubaoyi.com/wp-content/uploads/2014/11/Android_Wabbitemu.zip" target="_blank" rel="noopener"
>TI计算器模拟器安卓版本下载地址（含ROM文件）&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://www.liubaoyi.com/wp-content/uploads/2014/11/CX-C-CAS-%E5%9B%BE%E5%BD%A2%E8%AE%A1%E7%AE%97%E5%99%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97.zip" target="_blank" rel="noopener"
>TI计算器使用说明书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>以上资源来自&lt;a class="link" href="http://www.liubaoyi.com/" target="_blank" rel="noopener"
>@Karen的日志&lt;/a>&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;blockquote>
&lt;p>社交媒体的正确使用方法:
一，不浪费一秒钟时间和知识结构相差太大的人去解释/讨论。你没有义务也没有这个精力。对任何不友好评论，迅速拉黑。
二，通过公开展示你的思考，来寻找在知识结构，兴趣或技能上，可能与你产生互补作用，或者 1＋1&amp;gt;2 的效应的朋友。公开展示长期留存的文字记录，效率最高。&lt;/p>
&lt;/blockquote>
&lt;p>来自&lt;a class="link" href="https://weibo.com/5339148412/Mal0hACJr" target="_blank" rel="noopener"
>@硅谷王川&lt;/a>&lt;/p>
&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="我是如何用21天刷完sicp">我是如何用21天刷完SICP
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/2022-10-18-10-56-50.png"
width="411"
height="300"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="328px"
>&lt;/p>
&lt;p>SICP 全称 Structure and Interpretation of Computer Programs，翻译过来叫《计算机程序的构造和解释》，是一本关于计算机程序设计的总体性观念的基础教科书，由麻省理工学院出版社与麦格罗希尔出版社共同出版营销。作者是麻省理工学院教授哈尔·阿伯尔森、杰拉德·杰伊·萨斯曼。&lt;/p>
&lt;p>这本书是计算机编程领域非常经典的一本教科书，内容覆盖范围非常广泛，从编程入门一直到教你亲手设计实现一个编程语言解释器。虽然是一本几十年前的书，但是书中的编程理念如数据驱动、过程抽象等到现在仍不过时。可以说是程序员修炼“内功心法”必读的一本好书。&lt;/p>
&lt;p>这篇&lt;a class="link" href="http://numbbbbb.com/2016/03/28/20160328_%E6%88%91%E5%A6%82%E4%BD%95%E7%94%A8%E4%B8%A4%E5%91%A8%E6%97%B6%E9%97%B4%E5%88%B7%E5%AE%8C%20SICP/" target="_blank" rel="noopener"
>《我是如何用21天刷完SICP（中文）》&lt;/a>的文章讲述了作者通过阅读本书学习的过程和心得，里面的观点可以借鉴，我在看完之后也想再把这本书拿出来学习一遍。&lt;/p>
&lt;p>觉得看书太晦涩的，可以到下面这个项目里下载本书作者课堂讲解视频（国内好心人给做了翻译字幕）&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://learningsicp.github.io/" target="_blank" rel="noopener"
>『计算机程序的结构和解释』公开课 翻译项目&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://pan.baidu.com/s/1o78bsYA" target="_blank" rel="noopener"
>百度网盘SICP文件夹&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bilibili.com/video/av8515129/" target="_blank" rel="noopener"
>中译版视频专辑列表（bilibili）&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="图解stable-diffusion模型">图解Stable Diffusion模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/2022-10-18-10-55-05.png"
width="937"
height="387"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="581px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://jalammar.github.io/illustrated-stable-diffusion/" target="_blank" rel="noopener"
>图解Stable Diffusion模型（英文）&lt;/a>详细讲解了 Stable Diffusion（最近比较火的那个可以通过文字描述进行绘图的AI模型）的工作原理。文中使用清晰的图示阐述了“扩散”模型是怎样通过给图片增加噪声一步一步生成图像的。&lt;/p>
&lt;h3 id="wine是如何工作的">Wine是如何工作的
&lt;/h3>&lt;p>Linux桌面用户都遇到过在不得不运行 Windows 软件的时候，这个时候就可以使用这个叫做 Wine 的兼容程序，它可以让你在 Linux 下执行 win32 程序。（ Valve 最新出品的游戏掌机 Steam Dect 就使用了 Wine 作为兼容层来运行 Windows 平台下的游戏）。&lt;/p>
&lt;p>Wine 的名字来自于 “Wine Is Not an Emulator” 这个英文缩写。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://werat.dev/blog/how-wine-works-101/" target="_blank" rel="noopener"
>《Wine是如何工作的（英文）》&lt;/a>介绍了它的基本工作原理。&lt;/p>
&lt;h3 id="在-windows-记事本里运行光线追踪">在 Windows 记事本里运行光线追踪
&lt;/h3>&lt;p>光纤追踪（Ray Tracing）是一项计算机图形学技术，使用该技术渲染的计算机图像具有逼真的全局光照效果。&lt;/p>
&lt;p>这篇&lt;a class="link" href="http://kylehalladay.com/blog/2020/05/20/Rendering-With-Notepad.html" target="_blank" rel="noopener"
>《记事本中的光线追踪 30FPS》&lt;/a>记录了作者突发奇想要在Windows上的记事本中进行光线追踪渲染的趣事。&lt;/p>
&lt;p>其原理是通过系统API获取到记事本窗口的句柄，然后利用钩子函数给记事本的窗体发送相应的“消息”以及覆盖对应的内存数据来实现对记事本窗体界面的“魔改”。最终实现了在另一个进程里执行光线追踪算法，然后借用记事本中显示的字符来替代画面像素，从而“渲染”出画面的效果。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="github.com/SerenityOS/serenity" >SerenityOS项目&lt;/a>，一个从头开始的桌面操作系统，内核采用类似Unix的架构，界面外观则仿照了上世纪90年代Windows的窗口风格。作者并未将其定位成玩具，而是一款具备生产力的操作系统软件。 除了操作系统本身，这个项目还有配套的编程语言Jakt、自己的浏览器引擎LibWeb和浏览器Ladybird ​​​&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/ruanyf/document-style-guide" target="_blank" rel="noopener"
>《中文技术文档写作规范》&lt;/a>，&lt;a class="link" href="https://www.ruanyifeng.com/blog/" target="_blank" rel="noopener"
>阮一峰老师&lt;/a>整理的技术文档写作规范，规定了标题、文本、段落、标点符号等文档元素的使用约定，需要经常编写技术文档的朋友可以收藏看看。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://freehand.yunwooo.com/" target="_blank" rel="noopener"
>Freehand意绘&lt;/a>，一个在线的AI绘图工具，可以根据文字描述帮助你生成图片，界面简洁友好，使用方便。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/2022-10-18-10-58-24.png"
width="1063"
height="525"
loading="lazy"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="485px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/izackwu/TeachYourselfCS-CN" target="_blank" rel="noopener"
>计算机科学自学指南&lt;/a>，提供了一份自学计算机科学的全方位资料大全，可以根据内容系统地进行学习计算机科学相关的知识。&lt;/p>
&lt;blockquote>
&lt;p>互联网上，到处都有许多的学习资源，然而精华与糟粕并存。你所需要的，不是一个诸如「200+ 免费在线课程」的清单，而是以下问题的答案：&lt;/p>
&lt;p>你应当学习 哪些科目，为什么？
对于这些科目，最好的书籍或者视频课程 是什么？
在这份指引中，我们尝试对这些问题做出确定的回答。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://stevens.netmeister.org/631/" target="_blank" rel="noopener"
>UNIX环境中的高级编程&lt;/a>，一套编程教程，在课程中，主要学习用C编程语言开发复杂的系统级软件，同时深入了解Unix操作系统（以及属于该家族的所有操作系统，如Linux，BSD，甚至Mac OS X）及其编程环境。&lt;/p>
&lt;blockquote>
&lt;p>涵盖的主题将包括用户/内核接口，Unix的基本概念，用户身份验证，基本和高级I / O，文件系统，信号，进程关系和进程间通信。还将涵盖Unix系统上软件开发和维护的基本概念（开发和调试工具，如“make”和“gdb”）。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://codeberg.org/drummyfish/tinyphysicsengine" target="_blank" rel="noopener"
>写在C头文件里的3D物理引擎&lt;/a>，一个仅用C99标准写在C头文件里的超小物理引擎，没有依赖，直接包含头文件即可在你的工程中使用，功能完整，内置向量、三角函数、引力等计算库。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/2022-10-18-14-04-11.png"
width="399"
height="326"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="293px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 003 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第003期">机器文摘 第003期
&lt;/h1>&lt;h2 id="搞机">搞机
&lt;/h2>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/2022-10-11-10-17-41.png"
width="853"
height="640"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;h3 id="收听广播可以缓解压力个人体会">收听广播可以缓解压力(&lt;em>个人体会&lt;/em>)
&lt;/h3>&lt;p>近期我找到一个缓解焦虑的新方法，听收音机。&lt;/p>
&lt;p>一定要老式的那种，收听真正无线电波信号的。随便找个台，最好还带有滋滋啦啦的杂音，当作工作时的背景声音，听着听着就感觉无比的放松。但又不是简单的“粉红噪音”、“白噪音”带来的那种平静，这种“仿佛脱离现在、回到了某个时空”的感觉让人感到愉悦。&lt;/p>
&lt;p>我还没找到相关的研究信息，有人知道原理吗？&lt;/p>
&lt;h2 id="动向">动向
&lt;/h2>&lt;h3 id="欧洲通过法案将强制统一usb-type-c接口为充电接口">欧洲通过法案，将强制统一USB Type-C接口为充电接口
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/2022-10-11-15-46-02.png"
width="800"
height="450"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;blockquote>
&lt;p>欧洲议会今天以压倒性多数投票赞成在2024年底之前将USB-C作为包括iPhone和AirPods在内的各种消费电子设备的通用充电端口。&lt;/p>
&lt;/blockquote>
&lt;p>这对于苹果来说恐怕是个坏消息，对于消费者来说应该是个好消息。不过也许以苹果公司的脾气，说不定将来取消所有物理接口也有可能。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.macrumors.com/2022/10/04/eu-passes-law-to-switch-iphone-to-usb-c-in-2024/" target="_blank" rel="noopener"
>欧洲强制iPhone使用usb-c接口&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="波士顿动力承诺不将机器人武器化">波士顿动力承诺不将机器人武器化
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/2022-10-11-10-15-11.png"
width="640"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;blockquote>
&lt;p>当地时间 10 月 6 日消息，波士顿动力、Agility Robotics、ANYbotics 等 6 家公司联合发表致行业的公开信表达了他们对这些可能性的担忧。他们称，先进的商业化机器人的经济可负担性和可获得性越来越强，其被滥用的可能性也越来越大。我们承诺不会将通用机器人或软件武器化，也不会支持其他人这么做；同时呼吁政策制定者、开发者和用户共同促进安全使用。&lt;/p>
&lt;/blockquote>
&lt;p>我个人感觉此类声明并不会带来什么限制，相反地，我偏悲观的认为这种技术很可能以最优先的速度被应用于军事目的。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.163.com/dy/article/HJ5DMDS005118DFD.html" target="_blank" rel="noopener"
>网易新闻：波士顿动力承诺不将机器人武器化&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="taocpthe-art-of-computer-programming-4b正式初版">TAOCP（《The Art of Computer Programming》） 4B正式初版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/2022-10-11-10-30-24.png"
width="756"
height="732"
loading="lazy"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="247px"
>
&lt;em>图片来自&lt;a class="link" href="https://weibo.com/5819320755/M9LXaF5I3" target="_blank" rel="noopener"
>@算法时空&lt;/a>&lt;/em>&lt;/p>
&lt;p>世界著名程序员——高德纳老师，日前在他的个人网站宣布了&lt;a class="link" href="https://www-cs-faculty.stanford.edu/~knuth/news.html#v4b" target="_blank" rel="noopener"
>TAOCP 4B正式出版&lt;/a>的消息。&lt;/p>
&lt;p>这部计算机世界的经典巨著，耗费了高德纳老爷子的毕生心血，虽然已经出到了第四B卷，但本书目前还没有完全写完（本书从1962年开始写（中间停了几年是因为老爷子发现没有趁手的排版软件，就顺手发明了TEX——这又是另一个宏大话题了），计划共有七卷，其中第四卷分ABC三册）。他在自己主页中提到：&lt;/p>
&lt;blockquote>
&lt;p>与此同时，我继续研究第3部分（第4C卷），它已经有许多令人兴奋的主题。&lt;/p>
&lt;/blockquote>
&lt;p>我只能说：祝老爷子身体健康！&lt;/p>
&lt;h3 id="webassembly技术发展的怎么样了">WebAssembly技术发展的怎么样了？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/2022-10-11-10-45-39.png"
width="386"
height="383"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>&lt;/p>
&lt;blockquote>
&lt;p>WebAssembly 是一种运行在现代网络浏览器中的新型代码，并且提供新的性能特性和效果。它设计的目的不是为了手写代码而是为诸如 C、C++和 Rust 等低级源语言提供一个高效的编译目标。
——来自&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/WebAssembly/Concepts" target="_blank" rel="noopener"
>Mozilla官方文档关于WebAssembly概念的介绍&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>WebAssembly技术号称可以在浏览器中高效执行代码，并可以很方便地将C、Rust等各种语言编译到浏览器中执行，那么目前他的使用体验如何？&lt;/p>
&lt;p>我周末做了简单体验。&lt;/p>
&lt;p>通过官方给出的文档和入门指南，可以很快速地搭建出程序的原型，上图就是我参考官方示例将Rust代码编译到网页中执行的效果(是一个&lt;a class="link" href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" target="_blank" rel="noopener"
>经典的Game of life的小游戏&lt;/a>)。&lt;/p>
&lt;p>从开发上来说，现在已经有了比较成熟的工具链（尤其是针对Rust语言到WASM的工具），和共享库的生态，想要进行开发，不必像前些年那样费心地搭建开发环境，基本上在Linux系统下简单执行几行命令即可完成环境搭建。&lt;/p>
&lt;p>从执行效果来说，我没有做性能测试，直观感受上来说，确实比原生js快了不少。&lt;/p>
&lt;p>但这并不是重点，我个人觉得这项技术它最大的意义在于，将之前的桌面程序技术有了向Web移植的可行性。&lt;/p>
&lt;p>我们有可能很快就看到完全兼顾Web分发的方便和桌面程序性能体验的产品。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.infoq.cn/article/hdwglnhub2wwklo9zz6z" target="_blank" rel="noopener"
>一则WebAssembly相关的新闻&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/mbasso/awesome-wasm" target="_blank" rel="noopener"
>GitHub网友整理的关于WASM的资源大全&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://rustwasm.github.io/docs/book/introduction.html" target="_blank" rel="noopener"
>一本手把手教你使用Rust语言进行WASM开发的在线电子书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zalo.github.io/CascadeStudio" target="_blank" rel="noopener"
>一个使用WASM技术将三维设计软件CAD嵌入到网页中的开源项目&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://supabase.com/blog/postgres-wasm" target="_blank" rel="noopener"
>一个使用WASM技术在浏览器中运行的PostgresSQL数据库&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;blockquote>
&lt;p>在你的密码里面放上一个逗号&lt;code>&amp;quot;,&amp;quot;&lt;/code>,这样当你的密码在网上被人拖库时可以给黑客增加一些麻烦，因这样会使得他在作为csv文件往他的密码字典里面导入的时候，因为逗号分隔符的错位而让他崩溃。
注：csv文件默认使用逗号分隔符区分字段。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>来自：佚名网友。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>当你长期使用windows远程桌面进行远程办公时，一层一层的服务器登进去，时间长了就会陷入盗梦空间那种疑惑，我现在是在哪一层？&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>来自：我自己。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>量子计算机就是向过去和未来借用了很多乃至无限的时间吗？刹那即永恒。
注：量子计算机号称每个bit位可在同一时刻表示多种状态。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>来自：我自己。&lt;/li>
&lt;/ul>
&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="从0到1打造家庭弱电方案">从0到1打造家庭弱电方案
&lt;/h3>&lt;p>现在有不少人在困惑家里的网线该如何布局，这篇&lt;a class="link" href="https://luolei.org/home-network-1/" target="_blank" rel="noopener"
>《从0到1打造家庭弱电方案》（中文）&lt;/a>记录了作者完整的装修过程，内容十分精彩详尽。看完之后我有点儿后悔，当时装修时没有给各个房间拉上光纤，以及用了比较普通的超五类网线。&lt;/p>
&lt;h3 id="如何配置一个完全基于命令行窗口的开发环境">如何配置一个完全基于命令行窗口的开发环境
&lt;/h3>&lt;p>我在油管上关注了一个日本小哥（Takuya Matsuyama），是一个个人开发者，经常上传自己的开发过程录屏，他完全基于命令行窗口（控制台）进行开发，没使用任何IDE。&lt;/p>
&lt;p>后来我参考他的配置文件给自己也配置了一套，使用fish作为shell，neovim加上各种插件作为主力编辑器，现已成为我的日常开发环境。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/2022-10-11-11-16-56.png"
width="1571"
height="820"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>&lt;/p>
&lt;p>有条件的可以到他的主页看看关于如何配置的详细介绍，或者直接去他的github仓库获取配置文件。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.craftz.dog/posts" target="_blank" rel="noopener"
>Takuya Matsuyama小哥的主页&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/craftzdog/dotfiles-public" target="_blank" rel="noopener"
>他的基于控制台命令行开发的各种配置文件&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="云桌面并不像你想的那么好">云桌面并不像你想的那么好
&lt;/h3>&lt;p>给开发人员配置一个廉价的笔记本加上一个高性能的云端工作站，这个点子棒不棒？&lt;/p>
&lt;p>听起来有很多的优势，兼具了性能、便携性、安全性等等。&lt;/p>
&lt;p>不过先等一等，这里有一位作者在这样尝试了之后，给出了不少负面反馈（比如多显示器支持、GPU加速、网页视频质量等等问题），有兴趣的可以点进去看看。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://mjg59.dreamwidth.org/61535.html" target="_blank" rel="noopener"
>《云桌面并不像你想象的那么好》（英文）&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://webusers.imj-prg.fr/~jan.nekovar/co/en/en.pdf" target="_blank" rel="noopener"
>从高中到大学，数学中常用符号和计算关系的英文名称&lt;/a>，适合对数学公式中的各种符号感到困惑的人收藏，这本小册子汇聚了所有数学符号、常用希腊字母、代数式等英文叫法介绍。&lt;/li>
&lt;li>&lt;a class="link" href="http://www.egr.unlv.edu/~ed/x86.html" target="_blank" rel="noopener"
>如何在Ubuntu下进行x86-x64汇编语言编程&lt;/a>，一本讲解现代汇编语言的电子书，基于常用的Ubuntu系统，从认识汇编语言开始讲起，到工具链的准备和怎样编写和调试程序，都有详细的介绍。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.drawkit.com/" target="_blank" rel="noopener"
>DrawKit&lt;/a>，一个提供矢量插画的网站，有很多免费的高质量插画，可用于网站制作、软件产品等方面。&lt;/li>
&lt;li>&lt;a class="link" href="https://missing-semester-cn.github.io/" target="_blank" rel="noopener"
>计算机教育中缺失的一课&lt;/a>，一般学校里不会教开发环境的配置和各种效率工具的使用，这本电子书就是以环境和工具为切入点，将学校学习的理论应用于实际，比较接地气。
&lt;blockquote>
&lt;p>大学里的计算机课程通常专注于讲授从操作系统到机器学习这些学院派的课程或主题，而对于如何精通工具这一主题则往往会留给学生自行探索。在这个系列课程中，我们讲授命令行、强大的文本编辑器的使用、使用版本控制系统提供的多种特性等等。学生在他们受教育阶段就会和这些工具朝夕相处（在他们的职业生涯中更是这样）。 因此，花时间打磨使用这些工具的能力并能够最终熟练地、流畅地使用它们是非常有必要的。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 002 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第002期">机器文摘 第002期
&lt;/h1>&lt;h2 id="搞机">搞机
&lt;/h2>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/2022-10-03-11-08-56.png"
width="895"
height="689"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;blockquote>
&lt;p>MNT推出了一款名叫Pocket Reform的迷你笔记本电脑。它外形紧凑（屏幕只有7英寸），但功能齐全，据官方介绍，它的性能满足轻量办公需求，甚至还能玩一些游戏（ARM平台）。虽然现在的智能手机在性能方面已经有了很大提升，且便携性远超笔记本电脑，但是还是有相当一部分人倾向于在具有真实物理键盘的“电脑”上进行操作。&lt;/p>
&lt;/blockquote>
&lt;p>在我看来，这台设备可能对于希望随时随地写两行代码的程序员更加具有吸引力。&lt;/p>
&lt;ul>
&lt;li>参考文章：
&lt;ul>
&lt;li>&lt;a class="link" href="https://spectrum.ieee.org/meet-an-open-source-pc-that-can-fit-in-your-pocket" target="_blank" rel="noopener"
>可以装在口袋里的开源PC&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="动向">动向
&lt;/h2>&lt;h3 id="文字直接生成3d模型">文字直接生成3D模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/2022-10-03-11-41-32.png"
width="735"
height="491"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>
谷歌实验室的几个哥们上周发布了一个新作&amp;mdash;-DreamFusion。输入文字，就能生成带深度图和法线的3D模型。&lt;/p>
&lt;p>开发团队声称：&lt;/p>
&lt;blockquote>
&lt;p>最近在文本到图像合成方面的突破是基于在数十亿个图像-文本对上训练的扩散模型。将这种方法应用于3D合成将需要标记大量的3D资产和用于对3D数据进行去噪的高效架构，而目前这都不太可行。在DreamFusion中，我们通过使用预先训练的2D文本到图像扩散模型来执行文本到3D合成来规避这些限制。我们的方法不需要3D训练数据，也不需要修改图像扩散模型，证明了预训练图像扩散模型作为先验的有效性。&lt;/p>
&lt;/blockquote>
&lt;p>具体方法据称是来自他们新提出的“一种通过优化损失函数从扩散模型中生成采样的方法”该方法允许他们在任意参数空间中优化采样（例如3D空间）。&lt;/p>
&lt;p>我看了一下官方给出的demo，3D模型还略显粗糙，不过可能将来算力提升之后会有改善。&lt;/p>
&lt;p>现在，除了插画师受到了职业威胁，就连3D建模工程师的工作也有可能被AI取代？&lt;/p>
&lt;ul>
&lt;li>参考文章：
&lt;ul>
&lt;li>&lt;a class="link" href="https://dreamfusion3d.github.io/" target="_blank" rel="noopener"
>DreamFusion官方介绍&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="通过文字描述生成语音的人工智能也来了">通过文字描述生成语音的人工智能也来了
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/2022-10-03-11-32-54.png"
width="909"
height="451"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="483px"
>&lt;/p>
&lt;blockquote>
&lt;p>Twitter 用户 Felix Kreuk 发布了从文本到音频 (Text to Audio) 的 AI 模型：AudioGen
AudioGen 可以
(1) 根据文本生成音频；(2) 续写指定的音频；(3) 同时做以上两件事，根据指定文本描述生成指定音频。
作者给出的展示DEMO里展示了如下文本生成的语音：
（1）在风声中吹口哨
（2）男人在说话时伴有鸟和狗的叫声
（3）警报器和嗡嗡作响的引擎接近后走远
（4）鸽子咕咕叫并伴有沙沙的声音
（5）男人说话的声音，背景伴有人群欢呼声&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/2022-10-03-11-33-50.png"
width="1147"
height="629"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>
从作者公布的架构图上可以看出来，采用的也是Transformer神经网络。之前在看到AI画图时我就想到同样的原理可能用于生成音频，结果这才没过几天，人家都已经做出来了。&lt;/p>
&lt;ul>
&lt;li>参考文章：
&lt;ul>
&lt;li>&lt;a class="link" href="https://weibo.com/1309158107/M8mPt5LgI" target="_blank" rel="noopener"
>@海辛Hyacinth&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://felixkreuk.github.io/text2audio_arxiv_samples/" target="_blank" rel="noopener"
>作者的demo和原理介绍页面（托管在github）&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;blockquote>
&lt;p>站桩的简单，枯燥和有效，就好比持有 sp500 指数基金简单，枯燥但足以秒杀 95%以上的基金经理一样。
莫将容易得，便作等闲看。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>来自&lt;a class="link" href="https://weibo.com/5339148412/LeTdmcfjW" target="_blank" rel="noopener"
>@硅谷王川&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="长文">长文
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://randomascii.wordpress.com/2022/09/29/why-modern-software-is-slow-windows-voice-recorder/" target="_blank" rel="noopener"
>为什么现在的软件这么慢（英文）&lt;/a>，作者在Windows系统（Windows 10, 21H2版本）下使用“录音机App”的时候获得了极差的体验（确切的说是软件启动后大概卡死了将近20秒）。于是动手分析到底是什么原因导致，然后发现主要是这个软件启动后疯狂扫描“用户”文件夹下的录音文件用于构建界面中的录音列表，这种密集IO操作导致软件停止响应。作者花了很大的篇幅来吐槽这种行为，对于微软工程师为什么这么做表示莫名其妙。不过由于我们现在的计算机大都使用了固态硬盘，而且我们的习惯一般不会在“用户”文件夹下存放太多文件，所以这个体验应该不太明显。但即使这样，我也同样对Windows系统现在的软件质量感到担忧。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/2022-10-03-18-24-45.png"
width="643"
height="310"
loading="lazy"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="497px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://zhangtielei.com/posts/blog-involution-analysis.html" target="_blank" rel="noopener"
>内卷、汉明问题与认知迭代（中文）&lt;/a>，作者较为科学地分析了内卷的定义和形态，从而引申出了关于什么是“人生中重要的事”的思考，文章虽然比较长，但也清晰易懂，发人深省。部分引用如下：&lt;/p>
&lt;blockquote>
&lt;p>从大的方面说，社会需要创新，个人则需要突破，而创新和突破又都要求我们不断地精益求精。那么，内卷与精益求精是本质上一样的吗？如果不是，两者的区别在哪？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在某件事情上花费太多精力，并不一定就是内卷；在无关紧要的事情上花费精力才是真的内卷。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>汉明早年在贝尔实验室工作。那年春天，他经常和几位同事聚在一起在餐厅吃午饭。吃饭期间，他向其中一位叫Dave McCall的同事提了一个问题：“在你的领域里最重要的问题是什么？”大约一个星期后，再次一起午餐时他继续发问：“你目前正在研究的最重要的问题是什么？” 显然，这位同伴对于这两个问题的回答并不一样。于是他接着问：“如果你当前做的并不是最重要的事，那为什么还要一直花时间投入去做呢？”有了这「灵魂三问」之后，于是——在那个春天接下来的日子里，汉明不得不另找别的同伴一起吃午饭了……
汉明的问题听起来有些让人生厌，但后来演变成了一个在学术界很受关注的问题——汉明问题（The Hamming Question）。它本来说的是科研选题的事情，但实际上关乎人生最重要的选择。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>内卷，指的是在低水平的状态下无实质意义的消耗。这里的「低水平」，可能是客观的，也可能是主观的。
针对主观的低水平状态，我们需要冲破意识层面的障碍，同时把读书、实践和思考结合起来，反复迭代，这样才可能跃升到更高的认知层次上。
而针对客观的低水平状态，唯有认真对待汉明问题，选择好真正重要的人生大方向，才能避免卷入那些无关紧要的、无谓的消耗中去。这才是真正考验大智慧的时候了。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/mtdvio/every-programmer-should-know" target="_blank" rel="noopener"
>每个程序员都需要知道的&lt;/a> ，整理了一份资源合集，包含了软件工程师技能相关的各类知识资源，包括算法、数据结构、浮点、Unicode、时间、内存、分布式、正则、安全、架构、工程哲学、实践、职业发展、软技能。。。等等，以及一些可用于技能训练和学习的站点。看起来非常符合我这种“收藏了就是学习了”的囤积爱好者的胃口。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/jefflomax/word-writer-6-commodore-64" target="_blank" rel="noopener"
>Word Writer 6 6502汇编源码&lt;/a>，是一份开源的Word Writer 6的6502汇编源码，可在模拟器下编译运行。用来学习6502汇编是一个不错的项目。上个世纪80年代爆火的计算机Commodore 64是很多复古计算机爱好者（包括我）的最爱，Word Writer 6是该平台上流行的文字排版编辑软件。&lt;/li>
&lt;li>&lt;a class="link" href="https://almanac.httparchive.org/zh-CN/2022/" target="_blank" rel="noopener"
>HTTP Archive的年度报告&lt;/a>，这份报告详细（超级详细）分析了目前全球各在线网页中所使用的技术，从页面中的“CSS”、“Javascript”、“字体”以及用户体验中的“搜索引擎优化”、“移动端支持”等超过20个方面进行展示，内容十分详尽，有种看NBA的进球统计的感觉。&lt;/li>
&lt;li>&lt;a class="link" href="https://javascriptquiz.com/" target="_blank" rel="noopener"
>Javascript Quiz&lt;/a>，一份关于Javascript的小测验，可在线作答，一共十道选择题，全是关于Js语法的常见坑，每道题答完之后都可以点击“info”图标获取关于这道题的详细解释。我试着做了一下，勉强及格。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.musi-co.com/listen/streams" target="_blank" rel="noopener"
>Streams&lt;/a>，这里有一批纯AI创作的音乐，由AI负责作曲和编曲，工程师只是把这些乐谱放入DAW软件中进行混音和录音，完成度很高，听起来相当上头。&lt;/li>
&lt;li>&lt;a class="link" href="https://learningsynths.ableton.com/zh-Hans/get-started" target="_blank" rel="noopener"
>学习合成器&lt;/a>，这个网站提供了一本交互式电子书，讲解了电子合成器的原理，还单独提供了一个交互页面用于调制和体验各种合成器音色。我尝试了一下，真的很直观，在页面中直接可以修改各种振荡器波形、滤波器、LFO等参数，非常适合用于音色合成入门。&lt;/li>
&lt;li>&lt;a class="link" href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/" target="_blank" rel="noopener"
>函数式编程指北&lt;/a>，在线电子书，讲解函数式编程的范式，以Javascript进行举例，作者风趣幽默，深入浅出，觉得被函数编程概念唬住的可以去看看。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 001 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-001-%E6%9C%9F/</link><pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-001-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第001期">机器文摘 第001期
&lt;/h1>&lt;h2 id="搞机">搞机
&lt;/h2>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-001-%E6%9C%9F/2022-09-28-09-38-31.png"
width="641"
height="571"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="269px"
>&lt;/p>
&lt;blockquote>
&lt;p>TurnT是一个颇具创意的唱盘设计，它把智能手机与模拟黑胶的老式音乐播放方式相结合。用家把触笔放在手机屏幕显示的黑胶唱片上，它即开始播放。从内部结构上看，它其实是一个无线扬声器，可以连接到智能手机播放音乐。TurnT这种播放音乐的体验增加了互动的体验感，如同在实际的唱片上一样，挪开唱针会立即停止音乐，将其“向内”移动到手机屏幕上显示的光盘中心就可以播放音乐。要更改歌曲，您可以通过滑动来更改专辑，还可以重新定位。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>参考文章：
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.sohu.com/a/573073318_121124377" target="_blank" rel="noopener"
>把手机变成黑胶唱机 &amp;mdash; Yamaha发布了与智能手机配合使用的独特音乐设备&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="动向">动向
&lt;/h2>&lt;h3 id="ai生成图像技术带来的艺术危机">AI生成图像技术带来的“艺术危机”
&lt;/h3>&lt;blockquote>
&lt;p>近几周，基于AI生成的图像艺术作品的新闻越来越多，以DALL-E、Stable Diffusion等神经网络模型为代表的图像生成类AI进化越来越快，已达“以假乱真”程度。我也在动手尝试后惊叹他们的生成效果非常逼真和充满想象力。然而很快，此类AI就引起设计师、画师、艺术家的反对（恐慌？）。当然也有很多持积极态度，把它们当作工具加以利用，甚至不乏商业头脑灵活的人士，已经通过AI作画开始获取收益。于是引发了一系列的反应和讨论。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>参考文章：
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.uisdc.com/unsplash-prohibited-ai" target="_blank" rel="noopener"
>知名图库Unsplash 宣布禁传AI生成图像&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.51cto.com/article/719747.html" target="_blank" rel="noopener"
>付费图库集体封禁AI生成图片&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bilibili.com/read/cv18571483" target="_blank" rel="noopener"
>AI 绘画 Windows 本地零基础搭建 Stable Diffusion&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/560226367" target="_blank" rel="noopener"
>AI数字绘画 stable-diffusion 保姆级教程&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ahrm/UnstableFusion" target="_blank" rel="noopener"
>一个包装好的AI绘图开源GUI客户端&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;blockquote>
&lt;p>程序员是计算机的翻译官。他们先是把人类的语言翻译成计算机的语言，现在又教会了计算机使用人类的语言。&lt;/p>
&lt;ul>
&lt;li>来自&lt;a class="link" href="https://weibo.com/6827625527/M7vHNl9HD" target="_blank" rel="noopener"
>@t0mbkeeper&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="长文">长文
&lt;/h2>&lt;ul>
&lt;li>对很多事情都有兴趣，但是生命的时间有限，怎么办？&lt;a class="link" href="https://news.ycombinator.com/item?id=32628511" target="_blank" rel="noopener"
>这篇hacker news上的讨论（英文）&lt;/a>或许能提供一些建议。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.calnewport.com/blog/2022/05/16/taking-a-break-from-social-media-makes-you-happier-and-less-anxious/" target="_blank" rel="noopener"
>这篇文章提到了一项关于焦虑的研究（英文）&lt;/a>。研究表明，远离社交媒体（包括及时通讯工具）一个星期，可以显著提升幸福感、降低焦虑程度；&lt;/li>
&lt;li>掌握一项技能需要时间和实践，降低预期，慢即是快。&lt;a class="link" href="https://geekplux.com/posts/how-i-learned-programming" target="_blank" rel="noopener"
>《我是如何学会编程的》（中文）&lt;/a>，这篇文章是一位网友分享的关于他学习编程的历程。&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https:///coding-fonts.netlify.app/" target="_blank" rel="noopener"
>coding-fonts&lt;/a> ​​​是一个不错的编程字体网站，可以在线预览各种适合编程开发时用的字体，让选择更加直观。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/opendilab/DI-sheep" target="_blank" rel="noopener"
>深度强化学习羊了个羊&lt;/a> 这个github仓库开源了一个通过AI强化学习来玩耍“羊了个羊”游戏的模型及代码，结构清晰，效果很棒，用于了解深度强化学习知识非常不错。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/scutan90/DeepLearning-500-questions" target="_blank" rel="noopener"
>深度学习500问&lt;/a>这本在线书籍以问答形式对常用的概率知识、线性代数、机器学习、深度学习、计算机视觉等热点问题进行阐述，目前在github将近50k颗星。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>基于Markdown格式的知识管理尝试计划</title><link>https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8Emarkdown%E6%A0%BC%E5%BC%8F%E7%9A%84%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B0%9D%E8%AF%95%E8%AE%A1%E5%88%92/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8Emarkdown%E6%A0%BC%E5%BC%8F%E7%9A%84%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B0%9D%E8%AF%95%E8%AE%A1%E5%88%92/</guid><description>&lt;h2 id="背景">背景
&lt;/h2>&lt;ul>
&lt;li>之前一直有收藏文章并整理自己知识体系的习惯，使用的工具是evernote（印象笔记），十多年来收集数百篇网络文章，自己整理并编写笔记若干篇，已做到目录和标签的基本分类；&lt;/li>
&lt;li>之前也有通过每日编写一个markdown文件来记录工作日志、零星日记的习惯，有心得感悟时都直接在工作日志中随手写入，保存起来；&lt;/li>
&lt;li>通过github pages写过一些个人博客文章，更新频率不高，主要作为个人笔记在使用；&lt;/li>
&lt;li>当前问题如下：
&lt;ul>
&lt;li>evernote用户体验逐年下降，对设备限制较多，且内容存在云端、格式封闭，个人掌控感较差，数据有无法访问的风险；&lt;/li>
&lt;li>工作日志中散落的心得感悟没有索引，基本埋没在以日期命名的文件里，不成体系；&lt;/li>
&lt;li>收集的数百篇网络文章基本没有进行消化阅读，未形成自己理解的内容；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="目标">目标
&lt;/h2>&lt;ul>
&lt;li>为网络收藏和个人产出的文章建立索引，把之前的“仓库”形成“体系”；&lt;/li>
&lt;li>从evernote中迁移出来，所有数据放在本地，并通过在线网盘进行同步；&lt;/li>
&lt;li>以纯文本+附件资源作为载体，避免对一种编辑器或工具产生过度依赖；&lt;/li>
&lt;/ul>
&lt;h2 id="工具选择">工具选择
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://obsidian.md/" target="_blank" rel="noopener"
>Obsidian&lt;/a>，用于建立最基本的知识仓库，编辑自己的知识卡片，并充分利用它的双向链接功能将收藏的文章和自己输出的内容形成体系连接起来；&lt;/li>
&lt;li>&lt;a class="link" href="https://code.visualstudio.com/" target="_blank" rel="noopener"
>vscode&lt;/a>, 用于编辑技术文章、工作日志以及基于插件进行绘图，最终输出内容到Obsidian文件库中；&lt;/li>
&lt;li>360网盘，用于在线实时同步存储Markdown的文件夹，任何具有同步文件功能的网盘均可；&lt;/li>
&lt;/ul>
&lt;h2 id="具体计划">具体计划
&lt;/h2>&lt;ul>
&lt;li>整理文章目录：按照文章来源（网络、书籍、心得）、知识层面（技术、生活、哲学）等进行分类，形成树状目录结构；&lt;/li>
&lt;li>整理文章标签：每篇文章虽然只属于一个目录，但是可以有多个标签，提升了检索文章的维度。目录作为知识体系的骨架分类，标签则是详细划分（如技能相关的标签就可以有：编程、绘画、音乐、写作，并还能进一步细分）；&lt;/li>
&lt;li>参考少数派文章&lt;a class="link" href="https://sspai.com/post/62414" target="_blank" rel="noopener"
>玩转 Obsidian 01：打造知识循环利器&lt;/a>提到的Zettelkasten笔记法逐步整理多年积累的知识形成以“知识卡”（其实就是具有互相链接关系的Markdown文件）为单位的知识；&lt;/li>
&lt;li>[[玩转 Obsidian 01：打造知识循环利器 - 少数派]]&lt;/li>
&lt;li>阅读整理多年收集的知识文章，按照大约每周一篇的节奏，产出自己理解后的知识卡片，形成“知识循环”；&lt;/li>
&lt;li>如此往复若干时间，不断完善这个体系，工具可更换，载体亦可更换，唯独不变的是探索、求知的心；&lt;/li>
&lt;/ul></description></item><item><title>Archives</title><link>https://sbabybird.github.io/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/archives/</guid><description/></item><item><title>《少有人走的路》读书笔记</title><link>https://sbabybird.github.io/p/%E5%B0%91%E6%9C%89%E4%BA%BA%E8%B5%B0%E7%9A%84%E8%B7%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%B0%91%E6%9C%89%E4%BA%BA%E8%B5%B0%E7%9A%84%E8%B7%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="简介">简介
&lt;/h2>&lt;p>《少有人走的路-心智成熟的旅程》这本书据说是畅销多年，经久不衰，在豆瓣上评分很高。不少人纷纷表示此书给自己带来了很多思考和感悟。我是在今年第二遍阅读了此书，之前大约十年前草草看过一遍，印象不够深刻。但今年再读，书中就有很多文字能够读进去了。虽然作者本身对“爱”的定义和解读我并不完全认同，以及作者也许受宗教信仰的影响，在某些观点上有一定的倾向，但都不妨碍这本书给我带来震撼。&lt;/p>
&lt;h2 id="笔记">笔记
&lt;/h2>&lt;blockquote>
&lt;p>人生苦难重重。&lt;/p>
&lt;/blockquote>
&lt;p>开篇就表达了最基本的设定，让我闭上本来想要抱怨的嘴，不得不跟着往后翻看有没有可以解决的答案。&lt;/p>
&lt;blockquote>
&lt;p>解决人生问题的关键在于自律。人若缺少自律，就不可能解决任何麻烦和问题。在某些方面自律，只能解决某些问题，全面的自律才能解决人生所有的问题。&lt;/p>
&lt;/blockquote>
&lt;p>在认真看本书之前，我对“自律”的理解还仅限于在生活上严格要求自己，作息规律、遵守诺言、办事靠谱、简约不浪费。但作者显然不仅仅是这个意思，否则也用不着用很大的篇幅来说“自律”。&lt;/p>
&lt;p>看一下作者对“自律”的定义。&lt;/p>
&lt;blockquote>
&lt;p>所谓自律，就是主动要求自己以积极的态度去承受痛苦，解决问题。自律有四个原则：推迟满足感、承担责任、忠于事实、保持平衡。&lt;/p>
&lt;/blockquote>
&lt;p>只有不回避问题、以积极的心态去解决问题，才算作是自律。即便在生活中早睡早起、刻苦读书、勤奋工作，如果遇到问题首先想要逃避，那就不能算是自律。很惭愧，我之前在不少问题上都是以拖延为主要处理方式，本质上还是无法承受或者面对解决问题可能带来的痛苦，那么在读了本书之后，我会有意识地去改变做事原则，就拿上周来说，我终于鼓起勇气去诊所看牙，解决了拖了很久的牙结石问题（虽然智齿还没解决）。&lt;/p>
&lt;blockquote>
&lt;p>推迟满足感，就是不贪图暂时的安逸，先苦后甜，重新设置人生快乐与痛苦的次序：首先，面对问题并感受痛苦；然后，解决问题并享受更大的快乐。在充满问题和痛苦的人生中，推迟满足感是唯一可行的生活方式。&lt;/p>
&lt;/blockquote>
&lt;p>这个话题不仅仅是在本书中提到过，据说有心理学家做过试验，在一群孩子里面寻找具有“推迟满足感”倾向的人（比如能够先忍住不吃巧克力以获取更大的奖励），结果证明这样的人在后续的生活中取得成功的概率要远高于先吃巧克力的人。本书首先强调这个话题，将其作为自律中的第一个原则，我想是因为道理都是相通的吧。很久之前我看过一篇讲解时间管理的文章，里面提到在规划一天的工作时，优先处理最难的那件事（文章中称“先吃掉那只青蛙”），然后当前的工作会越来越简单，这样的方式跟本书中作者所提倡的“推迟满足感”异曲同工。尽可能的正面问题、提早感受解决问题的痛苦，正是执行自律的首要原则。&lt;/p>
&lt;blockquote>
&lt;p>不能及时解决自己面临的问题，这些问题就会像山一样横亘在我们心中，阻碍心灵的成长和心智的成熟。很多人显然忽略了这个道理。我们必须面对属于自己的问题，这是解决问题的基本前提。
指望别人解决自己的问题，也不是明智之举。唯一的办法&amp;ndash;我们应该勇敢地说：“这是我的问题，要由我来解决！”&lt;/p>
&lt;/blockquote>
&lt;p>这就牵出了第二个原则&amp;ndash;“承担责任”。逃避问题会自然而然的推卸责任，认为这不是自己的问题，始终对于自己扮演的角色缺少清晰的认知。不过作者提到了两种情况“神经官能症”和“人格失调症”，前者属于给自己强加责任，后者属于推卸责任。这么说来，我可能有前者的倾向，很多压力都来源于此。不过作者也提到在复杂的人生道路上，判断自己该为什么事和什么人负责，这是一个永远存在的难题。&lt;/p>
&lt;p>还有一种情况是，在有些事情上强加给自己责任，在有些事情上又没有意识到是自己的责任。读到这些章节的时候，我也在反思，当我一旦开始想要抱怨的时候，其实已经陷入“人格失调”和“神经官能”的边缘，要时刻提醒自己，不断评估自己的责任。&lt;/p>
&lt;blockquote>
&lt;p>忠于事实是自律的第三条原则。如果我们追求健康的生活和心智的成熟，那我们就要坚定不移地遵循这条原则。我们需要实事求是，杜绝虚假。我们越是了解事实，处理问题就越是得心应手。逃避现实的痛苦是人类的天性，只有通过自律，我们才能逐渐克服现实的痛苦，及时修改自己的地图，逐步成长。我们必须忠于事实，尽管这会带来暂时的痛苦，但远比沉湎于虚假的舒适中要好。我们必须忍受暂时的不适感，追求事实而不是假象，并承受这一过程的痛苦。&lt;/p>
&lt;/blockquote>
&lt;p>这让我想到了“诚实”，不仅限于不撒谎（这一点实在是难以做到）。但我很快意识到作者所说的忠于事实比不撒谎更重要的是，面对事实，不可活在自己的想象里。虽然我们每个人都有自己的成见，看事情也很难看到全貌，但是不可做不基于事实的幻想，期望问题会自行消失、期望不付出努力就能得到回报。&lt;/p>
&lt;blockquote>
&lt;p>你既要承担责任学会推迟满足感，先苦后甜，把眼光放长远，同时又要尽可能过好当前的生活，让人生的快乐多于痛苦。&lt;/p>
&lt;/blockquote>
&lt;p>这就是“保持平衡”，应该是一种“拿捏”吧。为了保持平衡，作者建议，适当的选择“放弃”。包括放弃过时的观念、习惯。王小波在小说中写道：“人生就是一个缓慢被捶的过程。。。”，如果不能适时的放弃一些东西，那很显然这个过程是相当痛苦的。&lt;/p>
&lt;p>先写这么多。&lt;/p></description></item><item><title>《管理自己》阅读笔记</title><link>https://sbabybird.github.io/p/%E7%AE%A1%E7%90%86%E8%87%AA%E5%B7%B1%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%AE%A1%E7%90%86%E8%87%AA%E5%B7%B1%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="文章介绍">文章介绍
&lt;/h2>&lt;p>《管理自己（Management Yourself）》作者——彼得·德鲁克。该文是《哈佛商业评论》创刊以来重印次数最多的文章之一，节选自其著作《21世纪的管理挑战》。&lt;/p>
&lt;p>我第一次读到这篇文章，是2013年在&lt;a class="link" href="http://www.zreading.cn/archives/3650.html" target="_blank" rel="noopener"
>左岸读书&lt;/a>的博客，当时很快就放入收藏夹，今日再次翻阅，仍觉受益匪浅。&lt;/p>
&lt;p>摘抄部分在此记录，并附上自己的一些理解。&lt;/p>
&lt;h2 id="笔记">笔记
&lt;/h2>&lt;blockquote>
&lt;p>知识工作者必须成为自己的首席执行官。你应该在公司中开辟自己的天地，知道何时改变发展道路，并在可能长达50年的职业生涯中不断努力、干出实绩。要做好这些事情，你首先要对自己有深刻的认识——不仅清楚自己的优点和缺点，也知道自己是怎样学习新知识和与别人共事的，并且还明白自己的价值观是什么、自己又能在哪些方面做出最大贡献。因为只有当所有工作都从自己的长处着眼，你才能真正做到卓尔不群。&lt;/p>
&lt;/blockquote>
&lt;p>未来社会，体力劳动将逐渐被智能化机械所取代，人人都是知识工作者即将成为事实。每个人都需要把自己当作一个公司来看待，自己就是CEO，包揽人生的“市场”、“营销”、“生产”、“运营”等各项工作，只有从更高的视角来规划自己，才能掌握主动权，避免落入被动接受的局面。&lt;/p>
&lt;p>与运营企业一样，经营自己的第一步还是要先了解自己，深刻认识自己的优势与不足，这样无论是制定计划还是付诸行动，才能做到目标明确、行之有效。&lt;/p>
&lt;blockquote>
&lt;p>多数人都以为他们知道自己擅长什么。其实不然，更多的情况是，人们只知道自己不擅长什么——即便是在这一点上，人们也往往认识不清。然而，一个人要有所作为，只能靠发挥自己的长处，而如果从事自己不太擅长的工作是无法取得成就的，更不用说那些自己根本干不了的事情了。&lt;/p>
&lt;/blockquote>
&lt;p>这个观点跟我的直觉是相反的，在读到这段文字之前我以为自己对擅长什么了如指掌，但认真思索之后，才发现事情并没有那么简单，有些自以为是的优点根本不值得推敲，如沟通表达、对技术了解广泛、技术趋势敏感等等。至于真正做什么样的事情非常的得心应手，还真得通过认真分析才行。&lt;/p>
&lt;blockquote>
&lt;p>要发现自己的长处，唯一途径就是回馈分析法（feedback analysis）。每当做出重要决定或采取重要行动时，你都可以事先记录下自己对结果的预期。9到 12个月后，再将实际结果与自己的预期比较。我们只要持之以恒地运用这个简单的方法，就能在较短的时间内（可能两三年），发现自己的长处——这是你需要知道的最重要的事情。在采用这种方法之后，你就能知道，自己正在做（或没有做）的哪些事情会让你的长处无法发挥出来。同时，你也将看到自己在哪些方面能力不是特别强。最后，你还将了解到自己在哪些方面完全不擅长，做不出成绩来。&lt;/p>
&lt;/blockquote>
&lt;p>作者给出了一个据说十分有效的方法，虽然执行起来略显繁琐且时间较长，但应该还值得一试。我个人有记录工作日志的习惯，但停留在时间消耗的记录和分析层面，并未对任务执行的结果进行预期和分析。&lt;/p>
&lt;blockquote>
&lt;p>首先最重要的是，专注于你的长处，把自己放到那些能发挥长处的地方。其次，加强你的长处。第三，发现任何由于恃才傲物而造成的偏见和无知，并且加以克服。&lt;/p>
&lt;/blockquote>
&lt;p>想起了之前读到的另一本书&lt;a class="link" href="https://book.douban.com/subject/1100470/" target="_blank" rel="noopener"
>《现在发现你的优势》&lt;/a>，虽然木桶原理说要补充自己的短板，但这里的观点则强调要充分把自己的优势利用起来，并且进行加强，这样才能更好的发挥自己。当然，努力学习新技能、新知识，发现自己的偏见和不良习惯然后克服它们也很重要。&lt;/p>
&lt;blockquote>
&lt;p>把预期和实际结果进行比较，也会发现自己不能做什么。我们每个人都有许多一窍不通、毫无天分的领域，在这些领域我们甚至连平庸的水平都达不到。人们，尤其是知识工作者，就不应该试图去完成这些领域的工作和任务。他们应该尽量少把精力浪费在那些不能胜任的领域上，因为从无能到平庸要比从一流到卓越需要人们付出多得多的努力。&lt;/p>
&lt;/blockquote>
&lt;p>深有体会，不应该将时间和经历消耗在自己即使努力也达不到平庸水平的事情上，然而现实中却有很多人在被动的做着这样的事情，甚至还抱有不切实际的幻想，人生苦短，早日醒悟早日改变。&lt;/p>
&lt;blockquote>
&lt;p>我属于读者型，还是听者型？首先，你要搞清楚的是，你是读者型（习惯阅读信息）还是听者型（习惯听取信息）的人。绝大多数人甚至都不知道还有读者型和听者型之说，而且很少有人既是读者型又是听者型。知道自己属于哪种类型的人更少。&lt;/p>
&lt;/blockquote>
&lt;p>这一段不知是翻译的问题还是作者没说明白，文中并未定义“读者型”、“听者型”这两种类型的工作方式具体是如何工作的，只是通过例子强调了自己工作方式的不同所带来的巨大差异。我的猜测是，“读者型”应该指的是在工作中理性和逻辑思维占上风的人，通常通过阅读逻辑缜密的文字来规划和开展工作，而“听者型”则属于感性思维偏多，通过视觉、听觉来判断事物的发展。&lt;/p>
&lt;blockquote>
&lt;p>如果一个组织的价值体系不为自己所接受或者与自己的价值观不相容，人们就会备感沮丧，工作效力低下。&lt;/p>
&lt;/blockquote>
&lt;p>不要试图改变自己的价值观，这只会让你倍感痛苦，你可以更换环境或者改变组织价值体系。&lt;/p>
&lt;blockquote>
&lt;p>成功的事业不是预先规划的，而是在人们知道了自己的长处、工作方式和价值观后，准备把握机遇时水到渠成的。知道自己属于何处，可使一个勤奋、有能力但原本表现平平的普通人，变成出类拔萃的工作者。&lt;/p>
&lt;/blockquote>
&lt;p>机会留给有准备的人，但前提是这个人认识到自己的长处、工作方式、价值观，所谓的把握机会，是了解了这些之后才能识别到机会。&lt;/p>
&lt;blockquote>
&lt;p>一般来说，一项计划的时间跨度如果超过了 18个月，就很难做到明确和具体。因此，在多数情况下我们应该提出的问题是：我在哪些方面能取得将在今后一年半内见效的结果？如何取得这样的结果？&lt;/p>
&lt;/blockquote>
&lt;p>千里之行始于足下，如果决定开始行动，也不可把计划定的太远，自己给自己安排近期可行的执行目标，对效果要有清晰的预期，对如何取得效果应有详细而具体的计划。&lt;/p>
&lt;blockquote>
&lt;p>人与人之间相互信任，不一定意味着他们彼此喜欢对方，而是意味着彼此了解。因此，人们绝对有必要对自己的人际关系负责。这是一种义务。不管一个人是公司的一名成员，还是公司的顾问、供应商或经销商，他都需要对他的所有共事者负起这种责任。所谓共事者，是指在工作上他所依赖的同事以及依赖他的同事。&lt;/p>
&lt;/blockquote>
&lt;p>成熟的处理人际关系，同样需要问文章开头的三个问题，了解他人或者共事者，是我们的义务和责任。&lt;/p>
&lt;blockquote>
&lt;p>在一个崇尚成功的社会里，拥有各种选择变得越来越重要。从历史上来看，却没有“成功”一说。绝大多数人只期望坚守“适当的位置”。唯一的流动性是向下的流动性。然而，在知识社会里，我们期望每一个人都能取得成功。这显然是不可能的。对许多人来说，能避免失败就行。可是有成功的地方，就会有失败。因此，有一个能够让人们做出贡献、发挥影响力或成为“大人物”的领域，这不仅对个人十分重要，对个人的家庭也同样重要。这意味着人们需要找到一个能够有机会成为领袖、受到尊重、取得成功的第二领域——可能是第二份职业，也可能是平行的职业或社会创业。&lt;/p>
&lt;/blockquote>
&lt;p>在飞速发展（或者说在加速发展）的时代，人人都在焦虑，仿佛竞争、内卷根本无法避免，但如果合理的认识自己、管理自己，并且去用心经营的话，也许人人都有机会可以在擅长的领域做出闪光的事情，获得一份自己独有的成就。&lt;/p>
&lt;blockquote>
&lt;p>自我管理中面临的挑战看上去比较明显，甚至非常基本，其答案可能不言自明，甚至近乎幼稚。自我管理需要个人，尤其是知识工作者，做出以前从未做过的事情。实际上，自我管理需要每一个知识工作者在思想和行动上都要成为自己的首席执行官。&lt;/p>
&lt;/blockquote>
&lt;p>最后一段很关键，“做出以前从未做过的事情”，即行动最为重要。这也是为什么我会花费一个小时的时间，从头又阅读一遍这篇文章，并摘录下来加以分析理解的主要原因。&lt;/p></description></item><item><title>2020年个人总结</title><link>https://sbabybird.github.io/p/2020%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</link><pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/2020%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</guid><description>&lt;h2 id="保持好奇心">保持好奇心
&lt;/h2>&lt;ul>
&lt;li>大概是2011年左右，我把QQ签名改成了“好奇、求知、创造”，从此再也没有改变过，我所喜欢的、热爱的、欲罢不能的事情，都被这三个词涵盖了。&lt;/li>
&lt;li>十年过去了，很高兴自己还能保持一颗探索未知、热爱学习的心。&lt;/li>
&lt;/ul>
&lt;h2 id="读书">读书
&lt;/h2>&lt;ul>
&lt;li>现在听书比读书所占比重大，阅读时间缩水明显，翻开电子书的时间都有限，更别提手不释卷。&lt;/li>
&lt;li>年初重温《三体》，即便很多情节已烂熟于心，重读仍有新发现，休闲阅读而已，只为放松大脑。&lt;/li>
&lt;li>其余时间陆续阅读一些杂书《原则》、《随机漫步》、《菜根谭》、《曾国藩传》等若干。&lt;/li>
&lt;li>唯一触动较大的是年末再次翻看《计算机程序的构造和解释》，此次配合网上的公开课视频进行，跟随原书作者课程讲解节奏，对于知识的理解大有帮助，视频虽然年代久远，但知识历久弥新，比起科技业广泛应用的新兴技术，书中的计算原理以及相关的思想更像是对应了武术的“内功心法”，一旦有所突破，则在上层应用产生巨大的提升，与工作学习都大有裨益，其中玄妙不可言说。&lt;/li>
&lt;/ul>
&lt;h2 id="摄影">摄影
&lt;/h2>&lt;ul>
&lt;li>户外活动大为减少，往年春天乃摄影高产期，今年却苦于疫情无法外出，摄影爱好被迫搁置，2020年对摄影技术的练习几乎停滞，无心仪作品产出。&lt;/li>
&lt;li>卡片相机已很少使用，手机拍摄已是主流，器材追求已解毒，但如有更新的街拍机问世，心头恐怕还是会痒。&lt;/li>
&lt;li>有一事可提，今年独自吃饭次数很多，每次都拍食物照一张，累积下来一年竟拍了几百。&lt;/li>
&lt;/ul>
&lt;h2 id="生活">生活
&lt;/h2>&lt;ul>
&lt;li>压力与机遇并存，最大收获是面对挫折、困难更坦然，2020不愿多提。&lt;/li>
&lt;li>记忆力确实有下降之趋势，回忆起来竟无亮点，亦可能本身就比较平淡。&lt;/li>
&lt;li>发现凡事都要低调不吭声的重要性，切记四处宣扬，否则就会出现“说出来就不灵”的魔咒。&lt;/li>
&lt;/ul>
&lt;h2 id="学习">学习
&lt;/h2>&lt;ul>
&lt;li>对8bit老古董计算机的兴趣不减，四处搜寻相关知识，弄了一大堆模拟器，研究过程中竟对之前所学计算机组成原理有了新的认识和理解，喜出望外，本该大学之时就应掌握的技能，到现在再学也不迟，重在理解。&lt;/li>
&lt;li>创意类软件如blender等也持续浅尝，进步缓慢，但入门已没问题，缺少作品练习，安排即可。&lt;/li>
&lt;li>儿子已入大学，借用假期时间，我教他编程，他给我讲解高数，算是技能交换了，费曼学习法的一个很直接的应用案例。&lt;/li>
&lt;li>越发觉得B站是个学习的好地方，该站以后的发展不可估量，但从教育来看，很可能迅速超越国内二流大学，或者未来改变大学的形态也未可知。&lt;/li>
&lt;/ul>
&lt;h2 id="后续计划">后续计划
&lt;/h2>&lt;ul>
&lt;li>希望可以继续通过写字记录学习的知识，保持一定量的文字输出，如条件实在有限，配合语音录音也可。&lt;/li>
&lt;li>在自己热爱的事情上，持续学习，关注一下作品输出（持续开新坑），早日成为心目中的“全栈工程师”、“三级工程师”（可参见吴军《硅谷来信》中的定义）。&lt;/li>
&lt;li>限制烟酒摄入，保持每日的活动量，能走路就不坐车。&lt;/li>
&lt;/ul></description></item><item><title>2019年个人总结</title><link>https://sbabybird.github.io/p/2019%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/2019%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</guid><description>&lt;h2 id="2019-年个人总结">2019 年个人总结
&lt;/h2>&lt;h3 id="起头">起头
&lt;/h3>&lt;p>2019 年过的比往年还要更快，今年的新年假期只有一天，正好用来写总结。&lt;/p>
&lt;p>2019 年是充分践行“在事儿上磨练自己”的一年，对目标有了更清晰的迭代，在行动上更加倾向于知行合一，继续缩减无效信息的获取和消费，挤出精力去做对自己更重要的事情。&lt;/p>
&lt;p>有多少成绩不好说，但是多少有一些感悟。&lt;/p>
&lt;h3 id="摄影">摄影
&lt;/h3>&lt;p>每年的春季，都会有一种强烈的想要深入摄影的感觉。最近几年越来越明显，一方面可能跟大量的摄影器材新产品发布有关，另一个方面，环境的复苏，春天代表着一种生机勃勃的精神，敏感的人们便容易感受到事物的变化。&lt;/p>
&lt;p>还有就是，可能因为春天比起冬天来比较。。。不冻手。&lt;/p>
&lt;p>今年大概按了四五千次快门吧，能看的入眼的也有个百十来张，我对摄影的定位就是记录日常生活，发现并捕捉生活中的美好瞬间，如果让我挑一张自己比较满意的话，就是下面这张:&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/2019%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/DSCF2721.JPG"
width="6000"
height="4000"
loading="lazy"
alt="DSCF2721.JPG"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>在地铁上的抓拍，当时感觉这个包比较有趣，于是就拍了。&lt;/p>
&lt;h3 id="思考">思考
&lt;/h3>&lt;p>大部分繁忙的人们，每天用在思考上面的时间都是很少的，或者说高质量的深度思考太少，导致了一种错觉，没有时间闲下来，仿佛进入了一个繁忙的死循环（这里推荐一本书《稀缺》，关于这种现象还有一种装逼的说法叫“内卷化”）。&lt;/p>
&lt;p>许多比较成功的人士，并非这么繁忙，相反地，他们会腾出大量的时间用于思考，以思想来指导行动，给自己留出“空余”的时间，然后“行动”才有意义。&lt;/p>
&lt;p>写到这里，我又想起一件事儿，比如装修房间，需要规划空间的布置，一定要规划空出来的部分跟实际功能使用的比例，不能一味将空间沾满用干净，那样的话整体就会感到很压抑，而如果空余的部分跟使用的部分有一个合理的平衡，就会整体感到档次和品质提升了不少。&lt;/p>
&lt;p>这种“用”与“不用”的平衡可以说到处都能体现，摄影中存在“正负空间”的说法，也有“影调平衡”的说法，都是在讲究一种平衡。&lt;/p>
&lt;p>我们对自己日常工作、生活乃至人生规划，都要向这种平衡去靠拢，每年、每月、每天的时间分配也要考虑到这种平衡，因为如果一味的用满，则会给整体的效能和品质大打折扣，看似繁忙充实，实则得不偿失。&lt;/p>
&lt;p>所以，今年我更加注意留出时间给自己，深度思考，尽力争取空闲时间，把空闲当作一种保持平衡的“负空间”。&lt;/p>
&lt;h3 id="早起">早起
&lt;/h3>&lt;p>今年加强了早起这个习惯，起床时间直接拨到了早晨 6 点，经过一段时间练习，现在就算不用闹钟也可以准点起来，睡眠质量不降反升，真是一举多得。&lt;/p>
&lt;p>起床早的话，感觉精力充沛，精神状态也很不错，睡懒觉并不能带来充分的休息，反而早起的好处却很多，比如时间上的从容，交通不拥挤，吃饭、办事等都比较轻松，能够感觉每天的有效时间得到了延长。&lt;/p>
&lt;p>我这么做倒也不是因为自律，而是想给自己更多的时间和机会去学习和体验，在我看来，外部的物质环境远没有自己的精神体验重要，随着时间进程的加速，谁都能意识到生命不是无限的，多做一些自己喜欢的事情比什么都重要，安逸可以适当体验，但更多的是，去观察和创造。&lt;/p>
&lt;h3 id="健康">健康
&lt;/h3>&lt;p>心态平和所带来的第一个福利竟然是体重提升了 10 斤左右，半年时间内从 65 公斤飙升至 70 公斤，搞得有点儿措手不及，怀疑是不是因为工作地点搬迁之后周边好吃的有点儿太多了的原因，再也不敢相信随便吃都不会胖的神话，从能看清肋骨到能看见肉褶儿不过是几顿羊肉汤的功夫。&lt;/p>
&lt;p>在可供我焦虑的选项里除了脱发，又增加了一项。&lt;/p>
&lt;h3 id="手机">手机
&lt;/h3>&lt;p>今年将我的电子产品全线更换为自主品牌华为，一方面是苹果手机在创新上已经不思进取，在将开发团队外包给印度之后，其系统的稳定性和体验均出现大幅下滑，苹果公司本身的吃相也越来越难看，另一方面，国产手机现在做的确实不错，体验很好，而且就算是华为的高端手机，也比国外的那些手机“物美价廉”，所以支持国产很正常。&lt;/p>
&lt;h3 id="读书">读书
&lt;/h3>&lt;p>除了一些专业的工具书籍以外，今年没有买任何的“闲书”，但是翻出了以前买来的重读了一些。&lt;/p>
&lt;p>这个可以深入说一说。&lt;/p>
&lt;p>比如今年又重读了《老人与海》，算是想明白了，为什么海明威仅凭借这一部中篇小说就能获得诺贝尔文学奖。以前上学的时候看此书，觉得吧，没意思，一个关于捕鱼的故事有什么可看的呢？但多年以后又重新翻看的话，体会就大不相同了。&lt;/p>
&lt;p>今年年中的时候在老家跟几个老友小聚喝酒，仿佛一夜之间，感到我们这一代人的成长，大家忽然都成了家庭里的核心力量，所面临的压力陡增，无论是父母健康还是后代教育或者是亲戚邻里帮扶，我们这一代正在成为家里各项事务的第一责任人。&lt;/p>
&lt;p>唏嘘之余，我才想到，我们这些人，哪一个不是《老人与海》中的那个捕鱼的老人呢？我们每个人都在等待生活中属于自己的那条大鱼，或者都在跟自己的那条大鱼在激烈搏斗，小说中的老人跟大鱼僵持不下，连换个姿势都成为一种奢侈，我们在面对各种生活中的琐事时又何尝不是跟老人当时一样的境遇呢？&lt;/p>
&lt;p>所以说《老人与海》这部小说能够给人力量，我们都在跟“大鱼”搏斗，这是我们的使命。&lt;/p>
&lt;p>其他的书也陆续看了一些，但都侧重于“闲书”，比如《数学之美》、《巨人三传》、《人类的群星闪耀时》，等等。&lt;/p>
&lt;p>不以功利心读书是基本原则，将至少保持一百年不动摇。&lt;/p>
&lt;h3 id="学习">学习
&lt;/h3>&lt;p>说到了学习，为工作而学的不算，今年在私下里研究最多的就是计算机图形学了。&lt;/p>
&lt;p>由于缺少大块的时间，系统性学习是不可能了。&lt;/p>
&lt;p>只能利用一些碎片时间，比如在下班路上阅读一些开源代码和论文，断断续续的。耗费了挺长时间才把空间坐标转换的矩阵给推演明白。&lt;/p>
&lt;p>不过值得欣慰的是，编程也没落下，利用周末时间充分发挥理论结合实际的思想，我竟然亲手撸了一个基于 web 画布的光栅化渲染器，很原始，但是可以渲染 obj 格式的线框和三角面。&lt;/p>
&lt;p>但毕竟平时很忙，估计等到可以加上光照和着色器的时候还得等几年了。&lt;/p>
&lt;h3 id="结尾">结尾
&lt;/h3>&lt;p>总的来说，认真做好每件小事，可以算是今年的主要指导思想，放平心态，不对自己要求太高，重点是投入进去，以谦虚的心态，搞懂小事，做好细节，即便是做的事情不多，成果也不大，也没关系，若能将小事做好，也能给自己的内心带来平静。&lt;/p>
&lt;p>以往的习惯，往往是给自己定义较高的完美目标，结果就是不能完全令自己满意，时间长了难免带来较多负面情绪，随着年龄的增长，逐渐意识到自己的平凡和普通，虽说不是上和自己或者世界和解，但也逐渐更加了解世界和了解自己。&lt;/p>
&lt;p>无论别人怎样看待，自己的感受才是最重要的，所谓幸福也主要就是一种自我的感受，只有自己才能对自己负责，任何人的建议都是首先站在建议人那一方的利益考虑。所以认真对待该做的事情，同时不违背自己内心的意愿，每一分钟都不是在准备生活，而是就在生活之中。&lt;/p>
&lt;p>抛开不可抗拒之因素，仍然以自己的节奏为中心，抓住重点，继续学习和深入实践，饭一口口吃，事儿一件件做，只要小事能推进，日积月累也定会带来不小的收获。&lt;/p></description></item><item><title>线性回归和梯度下降</title><link>https://sbabybird.github.io/p/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%92%8C%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</link><pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%92%8C%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</guid><description>&lt;h3 id="有监督学习的两种主要任务分类和回归">有监督学习的两种主要任务（分类和回归）
&lt;/h3>&lt;ul>
&lt;li>有监督机器学习任务主要分为两种，一种是分类任务，一般是通过学习算法实现对未知数据的分类甄别，比如判断是男性还是女性，预测明天会不会下雨等等，预测结果是离散的分类。另一种是回归任务，用于预测一个具体的值，比如房价、年龄等等，预测结果是连续的值；&lt;/li>
&lt;li>解决回归任务比较常见的算法就是线性回归算法；&lt;/li>
&lt;/ul>
&lt;h3 id="线性回归">线性回归
&lt;/h3>&lt;ul>
&lt;li>线性回归是最典型的用于回归任务的机器学习算法。它的基本原理是基于，任意一个为n的值，可以通过一个n-1阶的多项式进行拟合；&lt;/li>
&lt;li>线性回归的算法的目标是根据已知标签数据，训练一个预测函数f(a, b)，使得x输入带入ax+b这样的多项式可以得出需要预测的值；&lt;/li>
&lt;li>所以目标是找到合适的a和b（从数学语言的精确描述来说，一般用别的符号代替，为了方便记录，我使用a和b）；&lt;/li>
&lt;li>为了找到合适的a和b，需要定义一个损失函数（也有称为代价函数的），J(a, b)，用于判断a和b是否合适，比较简单的有“方差均值”法；&lt;/li>
&lt;li>方差均值指的是，所有样本带入预测函数f，将预测值与实际值相减，取平方，求和再求平均数（暂时不知到markdown里如何加入公式）；&lt;/li>
&lt;li>那么带入损失函数，就是意味着，找到合适的a、b使得刚才那个方差均值小于一个阈值（接近最优）；&lt;/li>
&lt;li>线性回归本质上，是在平面坐标系里找到一个与样本匹配的直线，这样基于这个直线，即可预测未知的值；&lt;/li>
&lt;/ul>
&lt;h3 id="梯度下降">梯度下降
&lt;/h3>&lt;ul>
&lt;li>如何找到合适的a和b，一个一个地去试是不可能的（无穷多的计算量）；&lt;/li>
&lt;li>比较典型的算法是“梯度下降”，又是牛顿起的头；&lt;/li>
&lt;li>比较生动的描述是，想想一个三维空间图形，X和Y平面是有a和b的值构成，Z轴是损失函数的值，值最小的部分（在图上就最低的部分，像一个山谷）就是最优解；&lt;/li>
&lt;li>从山顶的某个点上，环顾360度，找到适合下山的一小步，一点一点儿走向山谷最低处，有点像慢慢走楼梯，所以叫梯度下降；&lt;/li>
&lt;li>从我的体会来看，这个方法有点像牛顿那个计算平方根的迭代法（根据一个猜测值，然后通过迭代公式寻找一个更加接近正确值的值，直到误差降低到合适范围）；&lt;/li>
&lt;li>从微积分的角度，就是找到损失函数J在最初尝试的那个点上的切线，并通过它的斜率（也就是导数值）乘以一个系数a，逐步逼近最低点（切线斜率为零）的过程；&lt;/li>
&lt;/ul></description></item><item><title>机器学习的学习准备</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%87%86%E5%A4%87/</link><pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%87%86%E5%A4%87/</guid><description>&lt;h3 id="机器学习的概念">机器学习的概念
&lt;/h3>&lt;p>机器学习是人工智能的一个分支，是近年来逐渐具备实用性的各种人工智能应用的基础。其本质是（我目前的个人理解）利用针对已知的数据集合抽取采样特征，然后利用某种数据模型（核心是某种算法：如kNN、SVM、朴素贝叶斯等）对数据进行计算处理，得到一组可以预测未知数据集特征的参数和手段，从而可以对数据进行预测判断的一种数据处理方法。&lt;/p>
&lt;h3 id="机器学习相关的名词">机器学习相关的名词
&lt;/h3>&lt;ul>
&lt;li>神经网络：是机器学习的一种实现方式，从概念上来说，小于“机器学习”，但是由于其在图像识别、语音识别、语言翻译等领域的优异表现，以至于现在提到机器学习就认为是神经网络，实际则不然，机器学习的概念更大，更加基础，是实现神经网络应用的基础理论和方法；&lt;/li>
&lt;li>深度学习：是神经网络的应用特例，同样是在应用层表现优异，可以理解为神经网络的一种实现；&lt;/li>
&lt;li>大数据：机器学习的数据处理基础支撑，近年来机器学习在应用层面表现较好主要得益于大数据技术的发展，可以使得模型训练内容量级增加，极大的提高了模型准确度；&lt;/li>
&lt;li>n维向量：来自线性代数，在机器学习中起到重要作用，在机器学习中一般用于各种特征数据的载体，在不同的算法过程中传递和计算。&lt;/li>
&lt;/ul>
&lt;h3 id="机器学习相关的工具">机器学习相关的工具
&lt;/h3>&lt;ul>
&lt;li>编程语言：目前比较流行的是Python，因为有比较丰富易用的程序包，很多科技公司也开源了较为成熟的框架，再加上Python语言本身的简单易上手，使得Python成为这个领域最流行的语言。当然C和C++、Java还是实现各种算法的根基，Python更多是提供了一种调用接口；&lt;/li>
&lt;li>iPython：Python语言的交互控制台，可以较为方便的测试、调试Python程序，有较强的交互功能，比语言发行版自带的强大；&lt;/li>
&lt;li>jupyter：提供Python语言的Web交互界面，通过网页即可编写代码，并及时反馈执行结果，由于是B/S架构，所以可以使得运行时跟开发环境分开。编辑界面同时支持基于Markdown语法的文档编写，使得“文学化”编程成为一种可能，非常适合用于科研人员的汇报材料或论文；&lt;/li>
&lt;li>TensorFlow：谷歌开源的机器学习框架，快速灵活部署机器学习应用，可以应用与大规模、工业级场景；&lt;/li>
&lt;li>keras：基于Python编写的高级神经网络API，属于对机器学习的深度封装，如果以学习机器学习原理为目标的，不建议使用，还是先手动将若干种核心算法实现一遍比较深刻；&lt;/li>
&lt;/ul>
&lt;h3 id="预期的学习方法">预期的学习方法
&lt;/h3>&lt;ol>
&lt;li>通过阅读相关的书籍，对于概念有所了解，这个过程可以是粗糙的浏览，不求详细的理解各种原理和算法；&lt;/li>
&lt;li>尝试一些教学视频，了解实操的基本流程，对于自己读书得到的概念进行验证，修订理解，并熟悉基本工具的使用（如Python的numpy、plot等）；&lt;/li>
&lt;li>细读书籍，按照书中的事例进行实操，并尝试推导算法的基本原理，理解后，形成自己的文字；&lt;/li>
&lt;li>定义简单的任务，贯穿数据准备、数据清洗、特征值提取、模型建立、模型应用各个阶段，一般来说可以是手写文字识别，或者给新闻文章分类等；&lt;/li>
&lt;li>循环和迭代这个过程，一边输入信息，一边将学到的东西结合思考，形成有效的输出（文字、视频等）；&lt;/li>
&lt;/ol></description></item><item><title>致儿子成人礼的一封信</title><link>https://sbabybird.github.io/p/%E8%87%B4%E5%84%BF%E5%AD%90%E6%88%90%E4%BA%BA%E7%A4%BC%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/</link><pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%87%B4%E5%84%BF%E5%AD%90%E6%88%90%E4%BA%BA%E7%A4%BC%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/</guid><description>&lt;p>序言我儿，见信如面。在这个即时通讯如此发达的时代，我选择写一封长信，以表示对你即将成人的祝贺。&lt;/p>
&lt;p>我陷入沉思了一会儿，考虑该给你讲些什么道理。但我很快意识到，“道理”这种东西，靠听和说没有用，只能自己去感悟。而我自己也十分讨厌被说教，所以我会克制想要给你讲一番大道理的冲动，尽量避免不对等的交流形式。&lt;/p>
&lt;p>我想我还是跟你分享一些我对这个世界的思考和想法吧。&lt;/p>
&lt;p>茨威格在《人类群星闪耀》中写到“一个人最幸运的事情就是在他思想最活跃、精力最充沛的时候找到了他的人生使命”。看来大家都把寻找人生使命当做比较重要事情来看待。姑且就当做我这封信的主题吧。&lt;/p>
&lt;p>寻找人生使命本质上是通过尝试在一些方向上的努力来实现对人生价值和意义的探索，每个人或多或少、或深或浅都要做这样的尝试。&lt;/p>
&lt;p>你们学校把“成人礼”包装成一个重要的人生节点，想必是希望给你们一些感觉，让你们意识到，从这一刻起，你们开始对自己的行为负责，要开始尝试去寻找和探索了。&lt;/p>
&lt;p>那么该如何去探索，我有一些自己的看法。&lt;/p>
&lt;p>首先要相信一点，那就是无论是否还在上学，学习和完善自己都是一辈子的事情，不存在一个可以停止学习的时间点。就我个人来说，无论是读大学的时候还是参加工作以后，从来没有在提升自己方面有过松懈的想法，甚至我感觉工作之后对知识的渴望更加强烈了，学到的东西也比在校园里多得多。&lt;/p>
&lt;p>当然了，学习方式跟你目前在学校这种还是差别挺大的，强度也没有那么辛苦。而且工作之后的这种学习方式才是我最认可的方式。什么方式？&lt;/p>
&lt;p>我们一起讨论过几次王阳明的“知行合一”，为了不扯那么远，简单来说，刚才提到的学习方式就是老王早就提出的“事儿上练”。通过不断地实践，各种经历，才是学习知识的源泉。这也是为啥我在开头就说道理只能感悟不可说教，怎么感悟？事儿上感悟！经历多了自然懂。&lt;/p>
&lt;p>所以也不用一下子被“寻找人生使命”这种“宏大话题”给吓住了，保持学习的心态，放松大胆地去经历各种事情，就是这么个过程。&lt;/p>
&lt;p>然后呢，就是在做事的过程中，保持一颗善良、为他人多着想的心。关于这一点，我的体会是，“助人为快乐之本”真的不是一句空话。远的不说，你看你爷爷奶奶平日里多么乐于助人，用乐善好施形容他们一点儿也不为过。他们因此收获了广泛的认可，也给这个家庭带来了积极向上的生活氛围，对你老爹我向好的方面发展也起到了关键作用。&lt;/p>
&lt;p>再有一点，也是我个人非常推崇的，就是最好能时刻对世界保持强烈的好奇心。&lt;/p>
&lt;p>刘慈欣在短篇科幻小说《朝闻道》中讲了一个故事。外星高等文明在监视地球人类进化的过程中，距离现在几十万年前的一个原始人抬头望了望夜晚的天空，凝视了一会儿。这看似随意的行为使得外星人的警报器响了起来，因为这意味着，人类的好奇心已经发展到了星空，同时也意味着人类文明将要开始爆发式发展了。可见好奇心的重要。&lt;/p>
&lt;p>好奇心一方面是推动我们前进的动力，同时也使得我们平凡的生活变得不那么枯燥。&lt;/p>
&lt;p>你能经常提出一些有时连我都无法回答的问题，这让我也颇感欣慰，有些答案注定要自己去摸索着发现，我希望你能多多提问，也多自己思考，不用去管答案是什么。&lt;/p>
&lt;p>稀稀拉拉写了这么多，估计你也不能理解太多，我像你这个年纪时估计也理解不了。不过也没关系，只是给你讲讲我个人通过思考得到的观点而已，说不定你自己以后有不同的发现，当然如果能在你以后的发展中起到一点儿提醒作用，也就挺好了。&lt;/p>
&lt;p>希望你这次“成人礼”活动就像人类文明那一次一次对星空的凝望那样，使你能够进入人生的一个新的高速发展阶段。&lt;/p>
&lt;p>祝：学习进步，健康成长！&lt;/p>
&lt;p>二零一九年五月九日 写于贵阳机场&lt;/p></description></item><item><title>《高效能人士的七个习惯》读书笔记</title><link>https://sbabybird.github.io/p/%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid><description>&lt;ol>
&lt;li>积极是内在的，是选择的自由，是人性中最不能剥夺的部分。&lt;/li>
&lt;li>以终为始，是要知道自己要什么，并以原则为重心，所做的决策是主动选择的结果，而非被环境所迫使的结果。&lt;/li>
&lt;li>人类的四个天赋分别是，自我意识，良知，想象力，独立意志。&lt;/li>
&lt;li>第四代时间管理，以原则为中心，以周为单位，设定自己所扮演的各项角色欲达成的三个重要成果，安排出每一天的第一要务，更理想的是当作每一天的特殊约会，全力以赴。每周都回顾上周周日程完成情况以及制定新的周日程，并每日调整。&lt;/li>
&lt;li>对人不可讲效率，对事才可如此，对人应该讲效用，即某一行为是否有效。&lt;/li>
&lt;li>以原则为重心，以良知为导向（人比事儿更重要），针对个人独有的使命，平衡发展生活中不同角色，全盘规划日常生活。&lt;/li>
&lt;li>要想充分授权必须要具备的默契和共识包括：
&lt;ol>
&lt;li>预期成果。&lt;/li>
&lt;li>应遵守的规范。&lt;/li>
&lt;li>可用的资源。&lt;/li>
&lt;li>责任的归属，约定考评的标准和次数。&lt;/li>
&lt;li>明确的奖惩制度。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>在双赢协议中，对以下5要素应该有明确的规定。
&lt;ol>
&lt;li>预期结果，确认目标和实现，方法不计。&lt;/li>
&lt;li>指导方针，确认实现目标的原则，方针和行为限度。&lt;/li>
&lt;li>可用资源，包括人力，财力，技术或者组织资源。&lt;/li>
&lt;li>任务考核，建立业绩评估标准和时间。&lt;/li>
&lt;li>奖惩制度，根据任务考核确定奖惩。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>制定好目标之后，还要看你的组织体系是否与目标相符合，否则就要调整系统体系。&lt;/li>
&lt;li>我们总是喜欢匆匆忙忙地下结论，以善意的建议快刀斩乱麻地解决问题。不愿意花时间去诊断，深入了解问题的症结。&lt;/li>
&lt;/ol></description></item><item><title>《管理十诫》读书笔记</title><link>https://sbabybird.github.io/p/%E7%AE%A1%E7%90%86%E5%8D%81%E8%AF%AB%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%AE%A1%E7%90%86%E5%8D%81%E8%AF%AB%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid><description>&lt;ol>
&lt;li>首先要通过分析知道问题是什么，才能真正洞悉解决问题的办法。&lt;/li>
&lt;li>归根结底，所有公司最后的生命线都是信任问题，顾客要相信企业生产的产品正如它所许诺的那样好，投资者要相信公司的管理层是有能力的，员工要相信公司管理者能够兑现承诺。&lt;/li>
&lt;li>他们根本想不到人都有缺陷，包括他们自己在内也都不是完美的。&lt;/li>
&lt;li>问题的关键不在于机器会不会想问题，而在于人会不会想问题。&lt;/li>
&lt;li>真正让我们陷入麻烦的并非那些我们根本不懂的东西，而是我们一知半解的东西。&lt;/li>
&lt;li>有一种心理偏见叫做肯定的陷阱，它指的是我们努力想证明自己的观点，而非找出自己观点中的错误之处。&lt;/li>
&lt;li>深思熟虑并不是浪费时间，而是必要之举。&lt;/li>
&lt;li>除非有人能停下来想一想，否则一再犯同样的错误是很容易的。对每个错误都有必要进行反思和总结。&lt;/li>
&lt;li>如果你能承认自己犯了错误，承认自己并不是战无不胜，那么你反而能得到好处。&lt;/li>
&lt;li>管理是一门艺术，而不是一种科学。如果遇到那些想要量化人类行为的专家，你就要保持警惕了。&lt;/li>
&lt;li>行业中的每个公司都应该力争标新立异，让自己变的与众不同，而不是随大溜。&lt;/li>
&lt;li>要憎恨组织里的官僚作风——通用电气公司杰克·韦尔奇写给股东的信中写道。如果你想一事无成的话，那就让行政流程占据主导地位好了，去崇尚官僚主义就行了。&lt;/li>
&lt;li>不能创造生产力的工作越努力越失败，要时刻警惕并搜寻身边那些并不能创造生产力的工作。&lt;/li>
&lt;li>每个公司其实主要就是为现有的客户提供优质服务并努力开拓新客户群。我们在花每一分钱、设立每一个部门或是接手每一个项目时，都要问自己一个基本的问题：这能帮我们带来新客户或是为客户提供更好的服务吗？&lt;/li>
&lt;li>将注意力放在失败上是最大的悲观主义。只要稍稍抬起你的头，改变一下你的态度，那么你的世界观就会发生巨大的变化。&lt;/li>
&lt;/ol></description></item><item><title>2018年个人总结</title><link>https://sbabybird.github.io/p/2018%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/2018%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</guid><description>&lt;h1 id="2018-年个人总结">2018 年个人总结
&lt;/h1>&lt;h2 id="起头">起头
&lt;/h2>&lt;p>同样是元旦假期最后一天，坐下来给自己写总结。去年写总结的时候，我给自己上一年定义的关键词是“认识自己”，2018 年我觉得关键词可以是“改变自己”。刚刚翻看了 2018 年产生的大量工作日志和心得记录，一边感慨时间过的飞快，一边在脑海里飞快回忆这刚过去的一整年，这个在网上被大家普遍吐槽、觉得艰难的年份。&lt;/p>
&lt;h2 id="关于资讯">关于资讯
&lt;/h2>&lt;p>2018 年最令个人满意的一件事儿是戒掉了对互联网资讯的依赖。整整一年几乎没有主动上网刷过任何资讯，比 2017 年还要彻底，在手机上删掉了各种资讯软件，平时也很少刷新微信的朋友圈（偶尔发一发）。最开始的时候会感到不适应，但是一旦觉得资讯恐慌的时候，就强迫自己利用互联网学习知识，或者处理日常事务，一年下来节约了不少时间。&lt;/p>
&lt;p>这么做的主要原因是自己认识到互联网资讯正在给人们贩卖大量的消费冲动和焦虑。&lt;/p>
&lt;p>我觉得互联网是一个信息放大器，总是被掌握了话语权的人将自己的感受放大然后传播出去，如果这些人感到了焦虑，那么这些焦虑就会通过网络放大若干倍，去影响更多的人，给更多的人带来焦虑。那么现在是什么人在掌握互联网上的话语权呢，没错，就是我们这些 80 后。回过头去检查各年的网络热词，几乎是 80 后的人生成长轨迹，大龄了，剩了，结婚了，生娃了，学区房了，中年了，油腻了，佛系了，等等。&lt;/p>
&lt;p>戒掉信息并不意味着远离了这些，只是可以更加正确的认识这个世界，不再陷入以前的误区、觉得喧闹的只剩下一种声音。&lt;/p>
&lt;h2 id="思考与认知">思考与认知
&lt;/h2>&lt;p>苏格拉底说，未经思考的人生不值得度过。如果说 2017 年是通过思考来认识自己的话，2018 年就是将思想转变落实到行动上的一年。可以说是真真正正的用思考来指导行动的一年，向“知行合一”又推进了一丢丢。&lt;/p>
&lt;p>以前知乎上有个关于“优秀的人不够自信”的问题，问为什么有的人明明很优秀却仍然觉得不够自信，要是搁在从前的认知，我会觉得答案很明显，会给出极左极右的评判。现在不这么认为了，没有绝对的两极，大多数人处在中间，符合正态分布，可能有些人更加偏向于“优秀而不自信”一些。造成这样的原因跟从小接受的教育有很大的关系，即“活在他人对自己的期望之中”，我几乎可以断定自己此生难以摆脱这种心理了，只能在正确认识到这种情况之后尽可能的去调节。通过多做事情去磨练自己，并不断用自己的目标去替换别人的期望，目前正走在这样的改变之路上。&lt;/p>
&lt;p>找到自己的目标不存在诀窍，更不是自己坐在家里冥思苦想就可以，而是要不断去尝试，多做事情，去接触更多以前没有接触到的事物或者体验，只有这样，才能激发自己的潜力，遇见自己真正热爱并愿意投入精力与时间去奋斗的事情。&lt;/p>
&lt;p>想明白这些之后，我主动多做了一些事情，可以明显感受到通过思考指导做事给自己带来的成长。&lt;/p>
&lt;h2 id="压力出口">压力出口
&lt;/h2>&lt;p>每天大约能记录 1k 字的工作日志，当然里面不全是工作流水，有很多是临时书写的心得体会或者思考碎片。坚持这么做的原因是发现写作可以作为疏解压力的一个出口，既能整理思路，又能缓解压力，真是一举两得。&lt;/p>
&lt;p>我称这种写作为“随意写作”，或者叫释放心理垃圾，《写出我心》这本书里说过，刚开始写不好没关系，因为需要先把内心里的垃圾信息倾倒出来，先把污水排出来然后才可能有干净和高质量的东西出来，这个比喻可能不太恰当，但是对我比较触动，也正好作为我接受自己水平很烂的借口。&lt;/p>
&lt;h2 id="看书让我认可了自己的爱好广泛">看书让我认可了自己的“爱好广泛”
&lt;/h2>&lt;p>看书当然是日常生活中不可缺少的一部分，今年开始看阿城的作品。果然不简单，我还没有遇到过这么容易读下去的文字，可以说是流畅至极。阿城写这些文字就像是坐在这里跟你唠嗑似的，娓娓道来，而且段落之间完全感觉不到过渡突兀，天南海北扯来扯去最后还都能很好地收尾，讲到具体事例往往还能极为精准地引用古往今来学者或者艺术家的典故，说的煞有其事，看的引人入胜。&lt;/p>
&lt;p>我觉得他之所以能够写出这么多东西应该跟肚子里有货有关，而且这些货还不仅仅是简单的灌装进去，码放整齐。应该是经过消化和思考加工，已然形成一套体系，里面既包含个性鲜明的观点，也体现他的三观。在聊天喷空之余偶尔还不忘揶揄几句当下的社会或者某些人群，幽默感着实了得。&lt;/p>
&lt;p>读这样的作品还有一个感觉，就是越读越觉得自己对历史和人文了解甚少，往远了说有诗经论语等经典，往近了说有明清小说或者近代大家，东方有儒家道家佛家文化，西方有心理学、哲学、文艺复兴的科学等等，如果做不到对这些东西融会贯通，那么即使读到好看的文字，能看懂作者的议论也仅仅是瞧个热闹，过后很难产生更加复杂的化学反应，所以好书又会给人提供了解历史和文化的动力，仅从这一点来说，好书和好作家就功德无量了。&lt;/p>
&lt;p>我以前总是担心自己的知识太杂，有种什么都想了解一点儿又什么都不精通的感觉，总是提醒自己要缩小自己的关注圈。看了阿城的作品后，感觉，既然天性之中有那么强的求知欲，又何必压抑自己，不妨也多做尝试，管他什么音乐绘画还是神学哲学，只要有兴趣就大胆去了解。&lt;/p>
&lt;p>感谢阿城能够让我醒悟，不必为自己爱好广泛而烦恼，更不必为没能精通若干技能而悔恨，专有专的强，杂也有杂的好。&lt;/p>
&lt;h2 id="几点感悟">几点感悟
&lt;/h2>&lt;h3 id="关于改变">关于“改变”
&lt;/h3>&lt;p>推动事件向自己希望的方向发生是有难度的，也是考验和锻炼一个人综合素养的绝佳机会。观察这么多伟大的领导者，没有一个不是在推动变革中成长起来的，所以成功有很大的因素就是在推动变革。做变革的推动者需要面对很多困难，因为就跟打扫房间一样，任由事情向无序方向发展是最省力的，也是最不负责任的，只有想要东西向有序方向发展才是困难的。&lt;/p>
&lt;p>广义上来说，做任何事情都是将事物从无序向有序方向发展，这是自然规律，宇宙万事万物从有序走向无序，只有智慧生命才具备能力维持有序或者把无序变有序，这一切都需要能量，作为智慧个体所具备的只有利用能量的方法和信息，比如蒸汽机、内燃机电动机等等，再往前倒腾，那就是农业时代的耕种，那也是一种利用能量（太阳）将无序向有序转变的过程。&lt;/p>
&lt;p>这么些年以来，推动或者说维持有序的本质没有改变，个体想要发挥价值或者说作用，只有在这个过程中通过一定的方法和信息来完成能量转换为有序的操作，工程师、艺术家、农民，可以说做的是一样的事情，区别就是大家所使用的信息不同，引导的能量不同，所输出的转化物不同。&lt;/p>
&lt;p>个体的价值就体现在不是作为“无序”的生产者，而是“有序”的生产者。&lt;/p>
&lt;h3 id="关于做自己">关于“做自己”
&lt;/h3>&lt;p>我以前特别尊崇“真”，要活的真性情并且避免虚伪，不愿意假装任何事情。这样做有很多缺陷，因为不同的人有不同的期望，而且这些往往是互相矛盾的，西方的文化传统是“做自己就好”，是挺好的，但是仅限西方，在中国的话，还是要讲究一下中和。&lt;/p>
&lt;p>所以聪明的做法，在中国文化传统下，必然是不能直来直去，即便是“做自己”，也不能表现的太过于直接，中国的文化就是内在与外在严重的分裂，外在主要用于伪装和“一团和气”，而各自的内在又是什么样儿呢？谁也不知道。但有一点是毫无疑问的，那就是我们的文化绝对不推崇直接表现内心，所以才有古代大臣劝皇帝登基，而皇帝则三番五次推脱，嘴里喊着不要，虽然双方都知道是在演戏，但是也都不亦乐乎，做的很足。&lt;/p>
&lt;p>刚正不阿的人在明白了这些之后难免会有一些哀怨，但在我看来，这样就有些狭隘了，从客观规律上来说，谁都逃脱不了自然的力量，无论是基因还是环境，所以不必抱着一种价值观跟这个世界死磕，老祖宗的智慧早就告诉我们任何事物都不可一分为二，不能非黑即白，要以一种“中间调”的视角来看待问题。&lt;/p>
&lt;h2 id="结尾">结尾
&lt;/h2>&lt;p>2018 年经历了很多事情，思想的转变带来了行动的变化，年初的时候给自己开出了化解中年焦虑的药方“多做事情”，效果良好。通过具体事情的磨练，更加清晰的体会到了实际练习对成长的重要性，希望在后续的时光里，自己仍然能够保持好奇心，坚持学习，创造美好的东西出来。&lt;/p></description></item><item><title>事如春梦了无痕</title><link>https://sbabybird.github.io/p/%E4%BA%8B%E5%A6%82%E6%98%A5%E6%A2%A6%E4%BA%86%E6%97%A0%E7%97%95/</link><pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BA%8B%E5%A6%82%E6%98%A5%E6%A2%A6%E4%BA%86%E6%97%A0%E7%97%95/</guid><description>&lt;p>上苍保佑吃饱饭撑着的人，中午吃完饭抽烟的时候，刷了几页微博，可能跟我关注的人有关（我一般关注段子手或者文艺思想贩卖者），感觉内容作为消遣挺合适，但是越看呢，越觉得没有营养，可能是跟我刚抽完烟进入贤者时间有关，一把把微博推开的时候（合上屏幕），心里竟涌现出一句“都是吃饱了撑的”，用以评价刚刚看过的几段不痛不痒的文字。&lt;/p>
&lt;p>发完感慨随即想到，这句话是不是可以作为一本非常扯淡的书名呢？然后开始畅想自己写一本这样的书，里面的内容天马行空，多为吃饱了没事儿干的人才会忧伤和考虑的事情，饱暖之后各种忧虑和焦躁的事情可以化作各种思考，用于填满本书，作为同病相怜者证明自己不再孤独的弹药，一旦物质状态不能满足，则书中的内容立即退化到可有可无的状态。&lt;/p>
&lt;p>真的，我这两三年来，刷牙沉思录这种哗众取宠的段子写了不少，缺少深度的技术文章也写过几篇，以吃饱了撑着来进行衡量的话，还真的比较符合标准，如果加以艺术润色的话，真难说能不能包装成为一本具备贩卖价值的书，至少想到这个问题之后，被自己震惊了一下，进一步对人生需求的几个层次有了切身认识。&lt;/p>
&lt;p>无论我再怎么黑自己，有一点是不会改变，我写的那些东西至少保留了我一部分的回忆，它们记载了我在某一段时期内的心智情况，无论是用词还是造句，都能从一个侧面反映我当时的状态。而我的人生正是由若干个这样的状态所组成，随着年龄的增长，我的记忆力会越来越差，如果能够多记录一些东西下来，就算是那种吃饱了撑着才能思考的问题，也将使未来的我读起来热泪盈眶。&lt;/p>
&lt;p>不过信息世界的问题在于，资料保存的永久性很不靠谱，说不定哪天这些信息就不在了（我写在msn空间的博客一篇也没了），甚至安全性还比不了一个纸质的笔记本，但我仍然不做过多的努力和担忧，倘若保存良好，那就作为未来回忆的佐料，倘若不幸丢失了，那就随他去吧。因为在写这些东西的同时，我已经感受一次生活了，本来也是留不住的东西，事如春梦了无痕嘛。&lt;/p></description></item><item><title>2017年个人总结</title><link>https://sbabybird.github.io/p/2017%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/2017%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</guid><description>&lt;p>2018 年新年第一天，起的不早也不晚，天气晴的很好，阳光从窗外洒进来，给窗台上的多肉镶了一圈儿金黄。&lt;/p>
&lt;p>每到这样的新年假期，我都会安排一天的时间收拾一下房间，然后坐在电脑跟前，回顾一下在过去一年里个人的经历和得失，考虑一下在新的一年里对自己的期望和改进要求，设立一些学习上的小目标，给新的一年提前充电。&lt;/p>
&lt;p>这个习惯我已经坚持了四五年，主要以总结工作之余的个人学习和感悟，提取生活中的一些有趣经历，为自己在将来能够翻看回忆提供一些文字素材。&lt;/p>
&lt;p>总结本身可能并不重要，但是这种回顾过去和展望未来的仪式感，每次都能使我得到激励，使我能站到一个更高的维度审视自己。&lt;/p>
&lt;p>人们常说，了解自己是最困难的，我们可能永远都不能了解自己，只能无限趋近于了解，那我这样的总结，算是对了解自己所做的一种尝试和努力。&lt;/p>
&lt;h2 id="学习与读书">学习与读书
&lt;/h2>&lt;p>虽然随着年龄的增长，学习新的东西变得越来越困难，土话也有“人过四十不学艺”之说，但不得不承认，当今时代，学习成为了人人都必须修炼的一种能力，无论什么行业和职业，只有不断的学习，才能适应科技和文化的飞速发展。&lt;/p>
&lt;p>有人说，最终人类比拼的将是学习能力，但这多少有点儿站在功利的角度，我所说的学习更多的是一种探索精神，一种想去了解自己了解世界的强烈好奇心。&lt;/p>
&lt;p>今年买了不少书，技术类书籍和鸡汤类书籍各占一半，认真看进去的书不是很多，基本上每一本都翻了翻，但没有特别沉下心来看。&lt;/p>
&lt;p>摄影类的书籍有《理光 GR 的随手拍摄心得》《纽约摄影学院教材》《摄影构图学》等等，这些归类到技术类书籍好像不太合适，但又确实是学习用的，看得还算是津津有味，其中给我带来最多收获的应该就是理光用户的那个随手拍摄心得，作者好像是台湾人，在读到之前我还难以想象摄影书还能这样写，基本上我感觉就是结合自己的故事重新写了说明书，读起来比较有吸引力，而且顺便把怎样使用相机也学了，真是一举两得。&lt;/p>
&lt;p>学习数学、英语的相关书籍也买了一些，想重温一下高等数学，以及线性代数，感觉还是没达到预期目标，尤其是高等数学，基本上忘光了，连做课后的练习题都很困难，基于这些书倒是延伸学习了一些计算机图形学，这个算是意外收获，对计算机图形学里的一些概念如齐次坐标等等有了比较好的理解，尤其是使用矩阵来表示各种坐标变换，以前完全不知道内部实现的原理，直到今年我通过一边看书一边在 excel 里模拟了旋转平移和缩放的过程之后才算有了深入理解。&lt;/p>
&lt;p>历史类的书买了两本入门册子，但是都没有读进去，畅销书《人类简史》倒是看了，写的确实不错，有一种以前读《万物简史》时的畅快，而且作者很会比喻，观点也独到，从很浅显的角度解释了人类发明的货币和公司这些东西。&lt;/p>
&lt;p>趁着创业的热潮而大卖的关于创业的书也买了些，比如《从零到一》这样的，我看都是一些硅谷的创业成功者写出来忽悠人的，不过里面也讲了不少实话，看的时候就当是听作者诉说他是怎样取得成功的好了，反正他是这么认为的，虽然再来一次也可能不管用。&lt;/p>
&lt;p>每年都会重新看看《黑客与画家》，虽然是一本很早的书，但是每年看的时候都有新的感触，也会产生新的影响，这个书的作者应该算是硅谷的创业教父了，他比较喜欢说实话，而且也喜欢思考，给我带来很多启发。&lt;/p>
&lt;p>同样每年还会看看 SICP《计算机程序的构造和解释》，这本被誉为神书的书，我一直没能完全看懂，今年借助 YouTube，在上面听了两节 MIT 教授的课程，算是对前两章有了较深的理解，并顺便学习了 LISP 语言，这对于我以后折腾 Emacs 编辑器有所帮助，而且 LISP 语言的学习能够激发对计算机编程的深入认识，有一种超越编程语言的高维度感受，对计算过程的抽象很有可能是计算机世界的终极抽象，怪不得《黑客与画家》的作者说，未来的编程语言很有可能无限趋近 LISP。&lt;/p>
&lt;h2 id="关于拍照">关于拍照
&lt;/h2>&lt;p>2017 年我大概拍了四千多张照片，经过整理和挑选，留下来的也有差不多一千五百张，是我有生以来，拍照最多的年份，这个数字并不大，有些摄影师可能一天就达到了这个数字，但我这个业余爱好者，今年是一个突破，希望能够在明年以及更远的将来拍摄更多。&lt;/p>
&lt;p>就像学习其他知识一样，如果只是听和看，不去亲自动手试一试，十有八九做的是无用功，不是说听和看不重要，我今年就读了好几本关于摄影的书籍，而是动手去练习更重要，10000 小时的定律说的更多的也是练习，当然举这么多其他的例子更没用，游泳才是更好的例子，你不跳到水里根本不可能学会。&lt;/p>
&lt;p>所以我今年能感受得到在摄影上的进步，一方面因为我读了很多关于摄影的书籍，无论是经典教材还是随手摄影的心得，这些书籍看了确实能够改善和丰富我对摄影的认知，另外我也在网上也观看了大量关于摄影的视频，大部分是在 YouTube 上看的，很多都是个人摄影爱好者开设的播客，这些内容虽然不成体系，但是也有不少可取之处，尤其是针对单个知识点进行的介绍，比如构图、后期、器材搭配等等。&lt;/p>
&lt;p>关键还是因为我随身带了个相机，比起用手机来，我更喜欢这个理光的卡片机，虽然感觉并没有网上吹嘘的那么神化，但是还是很够用的，街拍神机名副其实，随身携带让我得一随时随地想拍了就来一发，比手机更有拍照的仪式感，而且画面质量确实比手机强的多，毕竟“底大一级压死人”，这个卡片机的传感器比手机的大了不知多少倍，拍摄夜晚或者光线较暗的场景时，手机拍的基本没法看，理光 GR2 基本可以胜任所有拍摄场景。&lt;/p>
&lt;p>我能感受到最大的进步应该是在“构图”方面，比起对曝光的控制、后期调色等方面，我对构图有着天然的热爱，这虽然有些“形式大于内容”，但是我确实无法忍受一幅照片在构图上的失败，所以我现在在拍照之前，第一件考虑的事情竟然不是曝光，而是构图。这可能是因为现在的相机都已经智能化到自动控制曝光的地步，虽然有时候拍出来并不是想要的效果，但至少相机不会让你曝光失败。于是构图就成了拍摄首要关注的内容了。&lt;/p>
&lt;p>我今年读的大部分摄影相关的书籍都是构图相关的，这些与绘画、平面设计类似的东西，我基本上东一下西一下的瞎看，不成体系，但也总结出了自己的一些原则，比如地平线一定要平，三分法放置画面等等。通过实际练习，我感到构图水平明显的变化，至少现在拍出来的东西一看就知道不是随手对付的，而是经过考虑和设计的，已经达到了业余爱好者的水准。&lt;/p>
&lt;p>在练习中的感悟才是真正学到的东西，有的时候甚至能够跨越技能，从一件事情感悟到另外的事情上去，用一句今年比较流行的话来说就是“建立了联结”，通过练习，可以从拍照这个简单的事情本身，联想引申到对美的感受，无论是音乐、文字或者是其他的艺术品，人类所期盼看到的和听到的，就是愉悦的体验，而通过“平衡”、“对比”、“韵律”、“节奏”这些感觉的灵活运用，就是能让人感到愉悦，所以我现在比较能够理解艺术是相通的这句话了。&lt;/p>
&lt;h2 id="关于资讯">关于资讯
&lt;/h2>&lt;p>资讯的阅读是打发时间的最好方法，你看地铁上的人，几乎每一个人都捧着手机看新闻，当然也有刷剧和打游戏的，但据我的观察，大部分人都是在刷新闻。&lt;/p>
&lt;p>资讯好像是一种食粮，每个人都如饥似渴的吸收，现代化的互联网技术和移动 app，使得资讯触手可及，随时随地，吃个没完。&lt;/p>
&lt;p>资讯又好像一种毒品，使人上瘾，如果有一个小时没有看到的话，就会浑身不适，非得打开浏览器或手机点两下不可，然后看到并没有什么有用的信息浮现的时候，才放下手机，内心得到了片刻的虚假平静。&lt;/p>
&lt;p>其实不知不觉中，资讯消耗了我们大量的时间和精力，甚至成为了我们的枷锁，我们的眼睛仿佛除了资讯之外就看不到什么东西了，对其他东西的观察成了一种原始的应激反应，吃饭、睡觉、乘车，稍有闲暇的时候，就用资讯来填补。&lt;/p>
&lt;p>好像我们的脑子已经无法承受在没有资讯刺激下的无聊，我们放弃了自己的思想，大脑的发动机已经不再运转，有的只剩下最基本的生理反应，这种情况所产生的空白，使我们恐惧，于是就吸取更多的资讯来填补，殊不知这些东西进一步把我们自己的思想挤的无处容身，脑子就更不能转动了。&lt;/p>
&lt;p>我见过很多独处的人，在吃饭的时候，也不忘了掏出手机，我虽然没看到他的屏幕，但是可以猜想，看的无非就是一些“有趣的”文章。可怕的是，我自己有时候也这样，因为如果不这样我好像也吃的不香，觉得眼神无处安放，觉得这一段时间不知所措。&lt;/p>
&lt;p>有一个关于“禅”的故事被说的比较多，大意是，有人问禅师“什么是禅？”，禅师回答：“吃饭就是吃饭，睡觉就是睡觉”，我最初听到这个故事或者段子的时候，根本无法理解，谁吃饭不是吃饭，睡觉不是睡觉呢。&lt;/p>
&lt;p>后来想到关于吃饭时看信息，关于睡觉时胡思乱想，才明白，原来，吃饭就是吃饭，睡觉就是睡觉，是那么的难啊。&lt;/p>
&lt;p>我在 2017 年有意识的限制自己获取资讯的时间，每当我忍不住想打开网页的时候，我就强迫自己坐下来写字，就写当下的脑子里想到的内容，想到哪儿就写到哪儿，完全不顾及条理性和先后顺序。&lt;/p>
&lt;p>我原来还特别担心这样写出的东西根本不通顺，没法看，但是在坐下来写了两篇之后，我才发现，原来这些不加修饰和斟酌的文字，看起来是那么流畅，读起来非常顺口，就像自己跟自己在交谈。&lt;/p>
&lt;p>而且这样做的一个很明显的好处是，屏蔽了资讯，用赵本山的话说“病毒关闭了，你的智商又重新占领高地了。”清空了资讯，给自己的大脑腾挪出可以思考的空间，很多自己的思想就涌现出来了。&lt;/p>
&lt;p>先不用管他们是积极的还是消极的，根本不用识别他，站在一个旁观者的角度来观察，可能这就是禅宗经常说的“观照自己的内心”吧。&lt;/p>
&lt;h2 id="关于写作">关于写作
&lt;/h2>&lt;p>我在 2016 年的时候，坚持每周输出五百字，作为写作练习，这项活动开展了整整一年，写了好几万字，后来我在 2017 年停止在网上发表。因为我觉得输出的内容有些缺少思想，而想写出比较有思想的内容还是很有挑战和耗费精力的，尤其是考虑到有读者的观看，会给自己带来额外的压力，后来我在写字这一块开始写给自己看，内容也都散落在工作日志里了，没有整理到网上。&lt;/p>
&lt;p>上面提到的关于将资讯时间用于写作的方法，来源于 2017 年我看的一本书， 叫《写出我心》，主要的内容是帮助十分焦虑的现代人通过写作的方式找回内心的平静。&lt;/p>
&lt;p>书的作者为了解决内心烦躁的问题，曾经尝试过冥想、瑜伽等方法，但是效果都不太好，心理的念头仍然非常的多，挥之不去，起伏不定，甚至越来越糟，于是作者尝试使用写作的方式，将自己的念头不通过思考，直接书写下来。&lt;/p>
&lt;p>然后他欣喜的发现，不假思索将自己的念头不断的书写下来，经过一段时间，竟然可以解决自己的烦躁，内心逐渐变得平静，于是他就把自己的这种体验和方法总结下来，写了这样一本书，并提出了具体执行的一些原则和要求。&lt;/p>
&lt;p>我看了之后感到比较有意思，也想尝试一下，开始利用闲暇时间或碎片时间写一些无关紧要的文字，主要是自己的一些思考和心绪。我发现，写作的过程真的具有疏解内心压力的功效，然后我逐渐意识到，这不仅仅是写作，这是一种倾诉。&lt;/p>
&lt;p>而倾诉，很可能是一种卸下负能量的过程，也是积攒正能量的过程，每个人都有倾诉的需求，以前我没意识到，原来倾诉是舒缓内心的一剂良药。&lt;/p>
&lt;p>可能对于外向的人来说，这不是问题，因为在日常生活中，他们随时随地在向别人诉说和交流，向别人输出自己的感受或观点。但是对于内向者来说，可能比较缺少倾诉的出口。&lt;/p>
&lt;p>不过除了说话是一种倾诉方式之外，写作、绘画、其他艺术创作等，应该都是有效的倾诉方法，写到这儿我发现，怪不得艺术家多为内向者。&lt;/p>
&lt;h2 id="餐桌段子">餐桌段子
&lt;/h2>&lt;p>2017 年几乎没怎么看电视，不仅仅我自己，全家人也几乎都不看电视了，一方面是因为电视中的内容比较无聊，另一方面主要是因为孩子，孩子的作业较多，如果全家看电视的话，而且在吃晚饭的时候看电视的话，基本都会严重影响孩子的作业时间，而且一边吃饭一边看电视实在是不好的习惯，所以我有意识的在生活中取消掉了电视时间。&lt;/p>
&lt;p>这样以来，刚开始大家都不怎么习惯，因为默不作声闷头吃饭实在是有违传统，用孩子的话说就是场面变得好尴尬，整个餐厅只回响着我 biaji 嘴的声音。&lt;/p>
&lt;p>偶然的机会，我跟金妍开始尝试在餐桌上讲段子，都是一些学校的趣事，或者吐槽日常生活中的事情，可吐槽的对象主要包括“老师布置的作业”、“妈妈做的饭菜”、“爸爸的坏毛病”，或者是对于学习中的一些技巧。&lt;/p>
&lt;p>由于孩子笑点很低，所以基本上我都是以原创和自制的段子为主，讲出来都比较冷（比如：为什么金币的颜色是黄色？答：因为“金碧辉煌–会黄”），但是，充分发挥脱口秀精神时，起到的效果都很不错，常常一顿饭吃下来笑到腮帮子疼（请勿模仿，吃饭还是尽量别笑，尤其是米饭）。&lt;/p>
&lt;p>我想这些在未来都能成为孩子们成长的美好回忆吧。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>2017 年如果汇总一个关键词的话，那就是“认识自己”，到了一定的年纪之后每个人都在承受生活中的各种压力，这些压力一部分来自别人，一部分来自自己，其中自己的那部分所占比重最大。&lt;/p>
&lt;p>中年男人到了这个时间点，或多或少都会有些迷茫，多少都有一些积累，但是又缺少安全感，失去了一些年轻人的锐利，无论从精力还是身体健康状况，都有所下降。&lt;/p>
&lt;p>所以如果想要突破，不仅仅是努力的事情，更多的是要思考，给自己定位，并有效率的付诸实践。&lt;/p>
&lt;p>以前在学习时间管理的时候，陷于方法和工具，所以效果不明显，直到今年才认识到，无论任何的时间管理方法论，要想有好的效果，首先要想清楚自己的目标，就好像是确定目的地似的，不然即使掌握了方法，也同样无济于事。&lt;/p>
&lt;p>就像企业一样，一个人也同样需要战略，如果没有战略，就像是一艘行驶在大海中的船，却没有舵，随波逐流，不知道飘向何方。&lt;/p>
&lt;p>往大了说是叫战略，实际上是用来确定所做事情优先级的指导思想，只有定出来战略，才能在日常工作和生活中知道什么事儿是必须要做，什么事儿是能不做就不做。&lt;/p>
&lt;p>所以 2017 年最大的成果，应该就是考虑清楚了自己的目标和想要到达的地方，感谢这个世界有那么多美好可以让我迷恋，未来我会投入更多时间和精力到我所爱，因为我发现我努力所追求的无非就是一种状态：&lt;strong>那种可以让我痴迷沉浸进去的一种状态。&lt;/strong>&lt;/p></description></item><item><title>听说你有较强的团队协作能力？</title><link>https://sbabybird.github.io/p/%E5%90%AC%E8%AF%B4%E4%BD%A0%E6%9C%89%E8%BE%83%E5%BC%BA%E7%9A%84%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E8%83%BD%E5%8A%9B/</link><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%90%AC%E8%AF%B4%E4%BD%A0%E6%9C%89%E8%BE%83%E5%BC%BA%E7%9A%84%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E8%83%BD%E5%8A%9B/</guid><description>&lt;p>几乎在所有的职位招聘要求里，都包含一条“有较强的团队协作能力”，与之对应的是，几乎每个人都会心安理得地在自己的简历里写上“有较强的团队协作能力”，就像写“本人熟练使用 Office”那样心安理得。&lt;/p>
&lt;p>无论是出题的人，还是答题的人，可能都没有认真的考虑过，什么是“团队协作能力”，可能只是在内心里觉得“好像加上这么一条，会显得更像那么回事儿吧”。&lt;/p>
&lt;p>近期做了一些与“个人能力评估模型”相关的工作，使我不得不认真思考这个问题。我发现，想把这个事儿解释清楚，并落在实实在在的执行上，还真没那么容易。&lt;/p>
&lt;p>首先，“团队协作能力”可以是对一个团队的衡量，也可以是对一个人的评价，接下来根据我个人粗浅的观察和分析，谈谈对个人能力的评价，即我觉得一个人怎样算是“有较强的团队协作能力”了。&lt;/p>
&lt;h4 id="0尊重他人">0、尊重他人
&lt;/h4>&lt;p>可能是人类与生俱来的天性所致，要做到这一点还真是相当不易，且不说地域、种族、信仰等比较沉重老套的话题（这些方面往往最能暴露天性），即便是在日常的讨论中，我们也很难做到在面对不同观点时以对事不对人的态度来讨论，很容易将一件鸡毛蒜皮争论上升致对个人的全方位评判，争到最后往往要捍卫的不是真理，而是自我“对”与“错”的“尊严”。因此，做到充分的听取他人的意见，理解各方的立场与观点，尊重并理解与自己不同的声音才是良好协作的开端。&lt;/p>
&lt;p>说到这里我忽然想到当年庄子跟惠子俩人在河边关于一条鱼是否快乐争论半天，至今未分出胜负，可见庄子若论团队协作，不求行，打嘴炮行。&lt;/p>
&lt;h4 id="1勇于担当">1、勇于担当
&lt;/h4>&lt;p>日常生活中，比较好协作和沟通的人往往具有比较能担当的性格，对于他人（所谓自负者眼里的“猪队友”）做错事情而造成的后果，这些人第一时间是给予安慰和指导，而不是指责和抱怨。相反，如果第一时间选择将“锅”甩的远远的，立即划清界限，很难相信其能具备多强的协作能力。&lt;/p>
&lt;p>所以，既然是协作，肯定会涉及多个人的配合，能否做到包容他人并勇于担当，应该是协作的基础。&lt;/p>
&lt;h4 id="2谦虚的态度">2、谦虚的态度
&lt;/h4>&lt;p>谦虚是一种美德，这大家从小就知道，“三人行必有我师”也早已挂在嘴边随时准备被调用，可是在现实生活中我们所谓的“沟通”却总是想着在这个过程中教别人些什么。在团队中做事，能否空杯心态，听取他人的建议和意见，而不是固执己见，觉得所有人都不如你。每个人都有自己擅长的事情，多看到别人的优点，谦虚地学习，应该没有人会喜欢跟狂妄自大目中无人的人合作吧。&lt;/p>
&lt;p>这一点古人做的就比较好，比如著名的“一字之师”的故事，写诗那哥们儿，“前村深雪里，昨夜数枝开”被人改成“前村深雪里，昨夜一枝开”，这哥们儿不但没有恼怒反而当即称改诗那哥们儿为一字之师，可见其谦虚好学。（反观自己，代码被人改了往往会有些不爽）。&lt;/p>
&lt;h4 id="3分享精神">3、分享精神
&lt;/h4>&lt;p>在“伸手党”横行的年代，拥有分享精神无疑是一种比谦虚还要美的美德，无论是分享自己的观点、心得还是见闻，都可以在过程中得以升华，实现双赢的效果。而具有分享精神的人往往在团队中拥有较好的人缘和评价，我个人始终认为知识越分享就掌握的越牢固，信息越分享沟通就越顺畅，所以是保守封闭还是乐于分享应该也是衡量团队协作的一项重要指标。&lt;/p>
&lt;p>不过，也许跟团队的性质有关，比如 FBI 的特工可能就不能太有分享精神吧。。。&lt;/p>
&lt;h4 id="4表达能力">4、表达能力
&lt;/h4>&lt;p>人的愤怒大部分来自于无法表达自己，很多人的狂怒往往伴随着这么一句话&amp;mdash;-“我说了这么半天你怎么还不明白？！”，对于性子急躁着表现更为明显，这种愤怒，与其说是对别人不理解的愤怒，倒不如说是对自己比较弱的表达能力的愤怒。这个倒是可以锻炼，清晰的逻辑思维和较好的文字语言功底都能大幅提升表达能力，如果让我总结关于这个能力的“技巧”的话，就四个字儿&amp;mdash;-“抓住重点”。&lt;/p>
&lt;h4 id="5团队利益与价值观的认可">5、团队利益与价值观的认可
&lt;/h4>&lt;p>即便做到以上多点，如果不能认可自己所在团队的价值观的话，也很难得以发挥。要做到这条，首先是对团队利益和价值观认知的问题，能否看清团队利益所在，知道该提倡什么和拒绝什么，是基本。其次，对于需要大家共同遵守的原则是否发自内心的认同，否则作为个体应该会比较难受，高效协作也就无从谈起了。当然这一点来说，不仅仅是对个人的要求，能否理出清晰的原则并身体力行的去执行，更是对团队领导者的要求了。&lt;/p>
&lt;p>写了这么多，其实都是人人明白的道理，也都能明白难在具体的执行，不过，花一点儿时间整理一下思路，就当是一个自我反省了，当然要是能正向影响一些人，并给人带来一丢丢的思考和改进念头，那就更好了。&lt;/p></description></item><item><title>压力比较大？讲个笑话放松一下</title><link>https://sbabybird.github.io/p/%E5%8E%8B%E5%8A%9B%E6%AF%94%E8%BE%83%E5%A4%A7%E8%AE%B2%E4%B8%AA%E7%AC%91%E8%AF%9D%E6%94%BE%E6%9D%BE%E4%B8%80%E4%B8%8B/</link><pubDate>Fri, 07 Jul 2017 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8E%8B%E5%8A%9B%E6%AF%94%E8%BE%83%E5%A4%A7%E8%AE%B2%E4%B8%AA%E7%AC%91%E8%AF%9D%E6%94%BE%E6%9D%BE%E4%B8%80%E4%B8%8B/</guid><description>&lt;p>一些老段子，放松一下（来自知乎https://www.zhihu.com/collection/124380021?page=2）&lt;/p>
&lt;h3 id="给我一个坚定的眼神">给我一个坚定的眼神！
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E5%8E%8B%E5%8A%9B%E6%AF%94%E8%BE%83%E5%A4%A7%E8%AE%B2%E4%B8%AA%E7%AC%91%E8%AF%9D%E6%94%BE%E6%9D%BE%E4%B8%80%E4%B8%8B/25416-a0750a572a35cda7.webp"
width="600"
height="317"
loading="lazy"
alt="给我一个坚定的眼神"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;h3 id="无题">无题
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E5%8E%8B%E5%8A%9B%E6%AF%94%E8%BE%83%E5%A4%A7%E8%AE%B2%E4%B8%AA%E7%AC%91%E8%AF%9D%E6%94%BE%E6%9D%BE%E4%B8%80%E4%B8%8B/25416-0b95397b5dba2834.webp"
width="426"
height="458"
loading="lazy"
alt="无题"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="223px"
>&lt;/p>
&lt;h3 id="怎样制作草莓酱">怎样制作草莓酱
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E5%8E%8B%E5%8A%9B%E6%AF%94%E8%BE%83%E5%A4%A7%E8%AE%B2%E4%B8%AA%E7%AC%91%E8%AF%9D%E6%94%BE%E6%9D%BE%E4%B8%80%E4%B8%8B/25416-90a50bac1f3a38d6.webp"
width="350"
height="1737"
loading="lazy"
alt="草莓"
class="gallery-image"
data-flex-grow="20"
data-flex-basis="48px"
>&lt;/p>
&lt;h3 id="能让你产生强烈情绪的图片">能让你产生强烈情绪的图片
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E5%8E%8B%E5%8A%9B%E6%AF%94%E8%BE%83%E5%A4%A7%E8%AE%B2%E4%B8%AA%E7%AC%91%E8%AF%9D%E6%94%BE%E6%9D%BE%E4%B8%80%E4%B8%8B/25416-5af7967d7aced9ce.jpg"
width="440"
height="4122"
loading="lazy"
alt="能让你产生强烈情绪的图片"
class="gallery-image"
data-flex-grow="10"
data-flex-basis="25px"
>&lt;/p>
&lt;h3 id="填空题">填空题
&lt;/h3>&lt;p>小学时有道关联词填空：
他（ ）牺牲生命，（ ）出卖组织。
有人填“宁可 也不”；有人填“害怕 ， 所以”；
有人填“与其 不如”；有人填“即使 ，也要”；
更有个人全校出名，他填的“白白， 忘了”。
评论里有个清新脱俗，苦大仇深的，他填“大舅，二舅”！&lt;/p></description></item><item><title>每个周末的下午，这样做把你的效率提升百倍</title><link>https://sbabybird.github.io/p/%E6%AF%8F%E4%B8%AA%E5%91%A8%E6%9C%AB%E7%9A%84%E4%B8%8B%E5%8D%88%E8%BF%99%E6%A0%B7%E5%81%9A%E6%8A%8A%E4%BD%A0%E7%9A%84%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87%E7%99%BE%E5%80%8D/</link><pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%AF%8F%E4%B8%AA%E5%91%A8%E6%9C%AB%E7%9A%84%E4%B8%8B%E5%8D%88%E8%BF%99%E6%A0%B7%E5%81%9A%E6%8A%8A%E4%BD%A0%E7%9A%84%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87%E7%99%BE%E5%80%8D/</guid><description>&lt;p>为了避免浪费时间带来的焦虑，人们一般会选择做些什么来保持忙碌，或者至少在看起来是十分忙碌的样子。即使当下所做的事情可能对于完成任务目标来说毫无意义，甚至是背道而驰，但是为了逃避思考，往往沉浸在自己已经“很忙了”、“没时间考虑”这样的假象当中，乐此不彼。&lt;/p>
&lt;p>我以前在出行的时候，有时坐地铁到一个陌生的地方，不知道出了地铁口该怎么走，这个时候我就会比较焦虑，一般会先随便朝一个方向走一段，然后一边走一边查看地图，很多时候发现我前进的方向与地图上规划的路径是相反的，但是我的潜意识里认为，我在走动中查地图，比我站在那儿不动查地图要节约时间，要安心一些。这显然是不对的。在一次内部分享会上，我跟大家讲了自己的故事和体会，来说明每个人都或多或少都有这样的逃避倾向（有心理学家指出，事实上脑力劳动才是最累的体力活儿，所以人的天性都是逃避真正的动脑思考的，最好是别人都替我想完了）。&lt;/p>
&lt;p>意识到以上的思维模式是错的以后，然后就是想办法来避免。首先需要解决的就是，针对工作中，思考上的懒惰。当然这事儿早就有人发现并指出了，比如著名的那句“战术上的勤奋掩盖不了战略上的懒惰”，以前还有句老话叫“不仅低头拉车，也要抬头看路”等等。&lt;/p>
&lt;p>但是都没有提供更加接地气的具体方法。我有一个具体可行的方法，操作起来简单有效，又花不了太多时间，在我看来，对于每一个职场中人都十分适用，除非不思进取、天生与效率为敌（此类人乃将来被 AI 替代的主要对象）。&lt;/p>
&lt;p>具体做法就是：** “在每个周末的午后，抽出 30 分钟时间，把你认为你下周最重要的三件事确定出来，列到你的工作计划中去。” **注意，是三件，不是更多，此举目的并非让你制定完美计划，而是判断什么事情是重要的，如何判断最重要？很简单，问自己一个问题即可：“我在完成这三件事儿之后，是不是即使其他事情都不干、躺下睡觉，也能认为本周工作是成功的，至少是及格的？”&lt;/p>
&lt;p>这样做好处有三，都是立竿见影的效果。&lt;/p>
&lt;h3 id="1这是一个很好的重新审视工作的机会">1、这是一个很好的“重新审视工作”的机会。
&lt;/h3>&lt;p>即，“抬头看路”。暂时放下手中的忙碌，重新认识一下自己的工作目标，你会发现无论任务有多繁杂，要达成的目标就那么几个，最终的目的地就在那儿，所有任务都应该是指向那儿的，如果不是，那就更简单，降低优先级，或者干脆从任务清单里把它踢出去。&lt;/p>
&lt;h3 id="2这样做可以有效避免周一综合症">2、这样做，可以有效避免“周一综合症”。
&lt;/h3>&lt;p>现在人，矫情起来谁还没有个心理疾病啊，各种“症”往自己身上套，最明显的就是“周一综合症”或者“节后综合症”，更有甚者称之为“上班的心情比上坟都沉重”。焦虑的根源在于“不可控”，不知道自己做的事情与承诺的目标有什么关系。列出重点之后，先做这些事情，剩下的事情就越做越轻松了。提前考虑好了，就化被动为主动了，心情自然不同。&lt;/p>
&lt;h3 id="3便于跟踪工作计划">3、便于跟踪工作计划。
&lt;/h3>&lt;p>各方示例都表明，有计划地开展工作，要比稀里糊涂开干效率高的多，但是“有计划没跟踪”也是一个很致命的问题。我在每个周末的思考时间里，都会查看团队成员发来的工作周报（我要求他们也这样做），一是跟踪上周任务完成情况，二是查看下周的工作重点是否偏离既定目标，如果偏离就及时修正，避免了时间和资源的浪费。&lt;/p>
&lt;p>习惯虽小，但是一旦养成，威力无穷。为了配合我们高效的工作和管理方法，我们开发的移动办公应用&lt;a class="link" href="http://yz.365power.cn" target="_blank" rel="noopener"
>“遥知”&lt;/a>* （是一款轻量级主打体验的共享协同办公应用） *做出了十分匹配高效工作者的功能，帮助大家养成高效工作的习惯，避免在思考上的懒惰，借助这款工具，无论在工作方法上，还是协作效率上，我们的团队都得到了显著的提升。&lt;/p>
&lt;h3 id="硬广时间扫码直接下载遥知httpsphoneq365powercnjadestoredetailnameminierp开启高效工作之旅吧">硬广时间：扫码直接下载&lt;a class="link" href="https://phoneq.365power.cn/jade/store/detail?name=miniErp" target="_blank" rel="noopener"
>遥知&lt;/a>，开启高效工作之旅吧！
&lt;/h3>&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/25416-96db89b6821685de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="免费试用遥知"
>&lt;/p></description></item><item><title>关于远程办公的思考</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E8%BF%9C%E7%A8%8B%E5%8A%9E%E5%85%AC%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Sat, 18 Feb 2017 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E8%BF%9C%E7%A8%8B%E5%8A%9E%E5%85%AC%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>&lt;p>据悉，Github 有超过一半的员工遍布在全球各地，而开源组织 OpenSSL 的团队则一直都未在线下见过面（直到后来有&lt;em>某老板&lt;/em>资助他们在线下碰了一次面）。随着科技的进步和社会的高速发展，知识型工作的办公方式正在逐渐由集中办公向分布式远程办公转变。&lt;/p>
&lt;p>远程办公带来的好处非常明显，比如：有效解决了员工上下班通勤浪费时间的问题，顺便还缓解了交通压力，对环境保护亦有贡献；抛开了地域的束缚，可以吸引全球各地的人才参与，对企业的人才战略有积极影响；有效降低企业办公场地投入；团队效率、员工积极性都能得到有效提升；等等。&lt;/p>
&lt;p>但是如何具体的实施远程办公，不同的团队会有不同的见解，我个人一直热衷于推进办公模式的改进，也做过相关尝试，下面根据我的浅见，从几个方面总结一下远程办公的关键要素：&lt;/p>
&lt;h3 id="成果目标的明确定义和有效检查">成果目标的明确定义和有效检查
&lt;/h3>&lt;ul>
&lt;li>远程办公对于团队管理要求更高了，一个团队要统一一个目标，大家对于目标的定义应有一致的理解。须将目标逐级分解具体到人，并提前设计好由细节到整体的成果装配流程。&lt;/li>
&lt;li>每一种类型的任务要有对应的检查清单（checklist），每日的工作成果都要通过检查清单的检查。&lt;/li>
&lt;li>团队的工作成果要有装配和构建系统进行组装，并有一个全局的检查清单，有专人负责检查。&lt;/li>
&lt;li>员工自我检查，组长验收检查，配置管理组装检查，质量管理进度跟踪检查。&lt;/li>
&lt;/ul>
&lt;h3 id="沟通的及时性和有效性">沟通的及时性和有效性
&lt;/h3>&lt;ul>
&lt;li>所有人应该可以立即呼叫到所有人，反应是实时的，不能超过 30 秒的延迟。&lt;/li>
&lt;li>语音，文字使用统一的语言体系，命名和表达方式需要规范化。&lt;/li>
&lt;li>可以随时截屏和录制一小段视频传递给任何人，必要时需要共享显示器和白板的内容。&lt;/li>
&lt;/ul>
&lt;h3 id="工作进度跟踪">工作进度跟踪
&lt;/h3>&lt;ul>
&lt;li>有效、深入细节的项目管理，需要有完善的项目台账，实时反应项目的状态。&lt;/li>
&lt;li>显式任务管理，团队里的所有人要知道所有人的工作任务情况，可区分普通任务和私密任务。&lt;/li>
&lt;li>项目生命周期管理细化到任务生命周期管理，起源、分解、执行、成果检查、后评价、归档入库、装配完结。&lt;/li>
&lt;/ul>
&lt;h3 id="办公状态模拟">办公状态模拟
&lt;/h3>&lt;ul>
&lt;li>为防止远程办公缺少仪式感，需要规定集体的远程互动，举行每日开工会议和收工会议。&lt;/li>
&lt;li>严格统一上下班时间，确保大家同时在线。&lt;/li>
&lt;li>每周至少一天线下见面会议，集中起来讨论工作。&lt;/li>
&lt;/ul>
&lt;h3 id="信息化工具支持">信息化工具支持
&lt;/h3>&lt;ul>
&lt;li>使用&lt;a class="link" href="http://yz.365power.cn" target="_blank" rel="noopener"
>遥知&lt;/a>的“小纸条”进行及时沟通。&lt;/li>
&lt;li>使用&lt;a class="link" href="http://yz.365power.cn" target="_blank" rel="noopener"
>遥知&lt;/a>的项目管理和任务管理进行协作管理。&lt;/li>
&lt;li>使用 qq、视频直播等工具进行远程集体互动。&lt;/li>
&lt;li>使用 gitlab 做好配置管理和成果审查。&lt;/li>
&lt;li>使用 docker、jenkins 等做好产品的持续集成和每日成果构建。&lt;/li>
&lt;/ul>
&lt;p>为了在我们的团队更好的推行远程办公模式，我们不断探索和思考，去年初，我所在的团队开始小范围尝试远程办公的模式，期间遇到了一些问题，我们也做出了一些工作方式上的改进，总的来说利大于弊，经过这些尝试，更加坚定了我们未来逐步迁移至远程办公模式的决心，也促使我们研发了移动端协作工具&lt;a class="link" href="http://yz.365power.cn" target="_blank" rel="noopener"
>遥知&lt;/a>，致力于帮助更多的知识工作者更高效的远程办公。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E8%BF%9C%E7%A8%8B%E5%8A%9E%E5%85%AC%E7%9A%84%E6%80%9D%E8%80%83/yaozhi.jpg"
width="200"
height="200"
loading="lazy"
alt="遥知"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p></description></item><item><title>未来企业扁平化管理中的信息化需求</title><link>https://sbabybird.github.io/p/%E6%9C%AA%E6%9D%A5%E4%BC%81%E4%B8%9A%E6%89%81%E5%B9%B3%E5%8C%96%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E5%8C%96%E9%9C%80%E6%B1%82/</link><pubDate>Sat, 11 Feb 2017 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%AA%E6%9D%A5%E4%BC%81%E4%B8%9A%E6%89%81%E5%B9%B3%E5%8C%96%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E5%8C%96%E9%9C%80%E6%B1%82/</guid><description>&lt;p>“扁平化”管理并不是什么新鲜的概念，早在上个世纪就有公司在尝试通过压缩管理层级来实现扁平化管理，并取得了不错的成效，以至于有一阵子“扁平化”管理理念大有席卷全球之趋势。&lt;/p>
&lt;p>但后来事实证明，在缺少有效的沟通和协作机制之前，扁平化管理的瓶颈往往很快出现在管理者身上，原因很简单，传统的“金字塔”式管理虽然等级多、决策下达缓慢，但是符合 2/8 原则，一个管理者只需要管理较少的几个人，沟通比较顺畅，扁平化管理模式下的管理者需要对接的人较多，很容易形成沟通瓶颈。&lt;/p>
&lt;p>所以“扁平化”在火了一阵子之后，不少企业掉进坑里挣扎了一阵子之后，又回归传统的“金字塔”模型。&lt;/p>
&lt;p>但是，随着技术的进步，很多工具得以改进，好多传统的“真理”也不再那么有效（比如一人最多管理 7 个人），这一点上来说，很多国外的互联网公司已经快速发现改进点，并将“扁平化”管理结合了现代化工具和理念成功在自己的企业推行。&lt;/p>
&lt;p>比如著名的谷歌。无论是技术还是管理，谷歌一直是走在时代前列的公司，其管理方式或企业价值观虽不能照搬，对于我们仍有一定的借鉴意义。&lt;/p>
&lt;p>最近读了两本关于谷歌公司的书，《重新定义公司》和《重新定义团队》，书中讲解了谷歌公司对未来公司组织、团队管理的尝试和思考，在信息文明全面取代工业文明的时候，传统的组织方式和团队管理会怎样被超越。两本书从文化、战略、决策、人才、沟通等多个方面阐述了未来企业的改进可能。&lt;/p>
&lt;p>内容比较多，不同的人看了可能有不同的收获，通过读书，一方面我发现了未来组织对扁平化管理的需求，然后思考了企业信息化对这一管理模式的支撑，下面简单谈谈我的看法（比较有意思的是，谷歌公司的员工也在抱怨他们自己开发的 IT 系统不好用）。&lt;/p>
&lt;p>###利用信息技术提升管理者与员工在“扁平化”管理下的沟通效率。
通过互联网、移动应用可以实现所有人的实时在线，无论是任务指派还是成果检查，或者随时沟通一些思路和想法。所以我猜测，未来的企业，可以一方面在线下仍然建立传统的“金字塔”层级结构，另一方面，通过移动应用工具，在线上建立“扁平化”的虚拟管理团队，企业的管理者可以获得更强的管控力和执行力。&lt;/p>
&lt;p>###利用信息技术加强企业文化的建设。
利用现代化的信息工具，企业内的每个人都可以更迅速的向团队传达及时的信息，分享自己的观点、技能。工作的目标更容易清晰传递，工作进展也更容易跟踪，管理者更方便地关注每一个成员的状态，只要积极利用工具向大家分享信息，“企业文化”就不再是一句虚无缥缈的口号，而是变成真正融入到每一项工作中、影响每一个成员的实实在在的观念、模式、原则。&lt;/p>
&lt;p>###利用信息技术放大“好员工”的影响力。
称职的管理者在团队中一定是认可并推崇积极优秀人才、打击并消灭低效消极人员的，传统的方式下一个好员工的影响力可能只局限在自己负责的那一部分工作，但是利用社交化的信息工具，在管理者的推动下，可以放大好员工的影响力，一个明星员工可以给更多的人带来正面影响，优秀可以“传染”给更多人。&lt;/p>
&lt;p>###方便打造学习型组织。
学习型组织，或学习型团队，现在大家提的比较多，构建一个学习型的团队是很多管理者的共识。信息技术提供的在线工具和移动应用可以让团队管理者更方便的实现打造学习型组织的理想。知识分享除了通过线下的活动进行外，还可以随时在线上进行，无论是看到了好的文章或者想系统的给团队成员讲解某一项技能，都可以利用信息工具在线上进行。&lt;/p>
&lt;p>###“标准”与“流程”不再是束缚，而是助手。
很多人提到企业信息化往往第一个想到 ERP 或传统的 OA 系统，但是未来这两个东西一定为消亡，或者换一种方式存在。传统的“标准”和“流程”是“死”的，听起来就没有什么生命力，未来的信息化工具在这个方面要想突破，一定是高度可定制化的，通过定制化，适应企业的高速发展，通过定制化，甚至让使用信息工具的人自己“创造”功能。&lt;/p>
&lt;p>###遥知
以上是关于新形势下企业信息化需求的简单思考，我所在的团队也正在做一些尝试，管理上，向扁平化方向发展，信息化工具上，我们自主开发了一款满足上述需求的移动应用产品&amp;mdash;-&lt;a class="link" href="http://yz.365power.cn" target="_blank" rel="noopener"
>遥知&lt;/a>，目前已经发布，正在积极推广中，有兴趣的可以尝试一下，虽然距我们设定的目标还有一定的距离，但对我们自己的团队管理已经初见成效，通过不断的迭代和改进，我相信我们会成为未来企业信息化管理工具的引领者。&lt;/p>
&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/25416-9accb32495a84ba4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="遥知"
>&lt;/p></description></item><item><title>2016年的个人总结</title><link>https://sbabybird.github.io/p/2016%E5%B9%B4%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/2016%E5%B9%B4%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</guid><description>&lt;p>每个新年假期我都会抽出一个下午的时间，回顾一下这一年所经历的事情（工作以外），总结一下得与失，回顾过去的同时顺便展望一下美好的未来。&lt;/p>
&lt;p>2016 有很多值得怀念的，也有很多值得感谢的，从几件小事谈起，简单总结一下生活。&lt;/p>
&lt;p>0 、读书，2016 年初定下原则，多看书少看电影，结果执行的还不错，朋友给推荐了一些书，自己也随机的买了一些，利用晚上睡觉前的一些时间累计下来一年也能看个十本八本的，印象比较深的有白先勇的《台北人》、蔡崇达的《皮囊》、村上春树的《当我跑步时我谈些什么》、东野圭吾的《解忧杂货店》、王小波的《万寿寺》。看完《当我跑步时我谈些什么》之后还冲动地跑了一个月的步，后因天气原因未能坚持（也不遗憾，姿势不当可能损伤关节）。技术类书籍没少买，每年仍看一遍《黑客与画家》，今年人工智能和大数据方面发展比较迅猛，陆续看了一些与之相关的书，对于科技的发展保持密切关注。&lt;/p>
&lt;p>1、写字，每周都在简书写一些文字，记录一些心得体会，或者对一些事物的看法 ，质量参差不齐，大部分文字都未经推敲，纯粹自娱自乐。虽错把创作冲动当才华，但比起只说不做，我毕竟坚持把思想落实在了行动上了，一些文字也能引起共鸣，甚至有朋友打赏鼓励，最后统计了一下，写了五万字，一共收获了一百多块赏金，其中老妈、老妹打赏最多。&lt;/p>
&lt;p>2、沉思录，从年初开始在微信朋友圈坚持做的一个小试验，每日睡前将当日坐车或刷牙时考虑的无聊问题，总结一段文字，发到朋友圈，浅薄幽默为主，记录心情为辅，偶有正能量鸡汤出没，好在我的朋友大都了解我的性格，通过这样一个小互动，得到大家很多的鼓励，谢谢你们。&lt;/p>
&lt;p>3、脱发，虽然健康问题不容忽视，但是随着年龄的增长，脱发，是每一个“聪明”的中年男人都要面临的问题，就像我大学时第一次丢自行车似的，刚开始不敢相信，到后来，不得不接受这个事实。小区门口理发店的老板，给我剪了十多年的头了，从最初不断夸赞我头发浓密，到现在已经开始主动帮我掩盖局部地区的稀薄了（不过我还是没在他们家办卡）。不过还好，至少老年时我不会为是否需要染发所困扰了。&lt;/p>
&lt;p>4、幽默与抑郁，幽默的人比较容易抑郁，据说很多喜剧大师如卓别林、周星驰，甚至很多段子手如赖宝，都有抑郁症。原因是幽默的人一般不太会处理自己的负面情绪，往往使用幽默的手段来进行心理防御，负面情绪得不到发泄，造成内伤。不过我还好，庆幸还没幽默到那种程度，自然也就不会抑郁那么狠，作为一个后知后觉的“慢性子”在经历的事情多了之后也能想明白不少问题，现在已经基本上不太会被别人的期望和评价所影响，知道关心自己的人是谁，在意该在意的，忽略该忽略的。&lt;/p>
&lt;p>5、老爸的忆苦思甜，父母每年暑假都会过来住一段时间，为了表示诚意，这段时间我几乎每天都要跟老爸喝两杯，三杯酒下肚，老爸必然通过将各种故事对我进行教育，老爸讲故事有个特点，那就是保持在故事框架的基础上，为了达到更好的效果，可以进行适量的改动（比如《武松打虎》这一回，武松最多的一次是喝了 72 碗酒才把老虎打死的）。所以虽然我早已将忆苦思甜的框架烂熟于心，但每次捧哏的时候还是得认真对待，虔诚的接受“再教育”。毕竟老爸尝过挨饿的滋味，所以我经历的这些困难在他面前基本无颜提起。&lt;/p>
&lt;p>6、“克己”，我在办公室放的有一本《传习录》，里面记载的都是明代心学大师王阳明与弟子、朋友的对话或书信，我古文水平很次，看起来磕磕绊绊，但是偶尔也会拿出来翻一番，说不定哪天就能领悟到一些东西。某日看到一段对话对我启发很大，了解到很多道理都有千丝万缕的联系，比如很多人看过的《高效能人士的七个习惯》，其中第一个习惯就是“积极主动”，大家也很推崇“积极主动”，但我某天在看《传习录》的一段对话时才更加理解这个“积极主动”了&lt;/p>
&lt;blockquote>
&lt;p>“弟子问王阳明为什么平时道理都明白，遇到事情的时候却还是难以控制自己，老王说，那是因为你经历的事情还不够，没能克己，你还是应该在事情上磨练自己”&lt;/p>
&lt;/blockquote>
&lt;p>这里的“克己”虽然说的是在事情上磨练自己，但是怎么磨练？其实就是遇事要积极主动，不放过任何可以锻炼自己的机会，这样才会有进步，也就不会出现道理都懂，但实际没懂的情况了。&lt;/p>
&lt;p>7、时光倒流，有天金妍问我，时光真的能倒流吗？为了严谨一些，我回答，现在不能，以后或许可能。然后我问她，如果时光可以倒流，你想回到什么时候？她说，我想回到小时候。小时候？多小？我问她。她说，我想回到 4 岁（幼儿园）。看来从上了小学，我们的人生就开始了战斗模式。我说，那等着哪天科技发达了，咱们一起回到小时候吧。我没忍心说，其实就算时光可以倒流，我们自己是不可能倒流了，我们的人生就像是离弦的箭，开始了，就永远不能回头，只能不断向前，冲刺再冲刺，然后在向前的过程中，去寻找美好的体验和感受，并努力赋予这个过程以意义。&lt;/p>
&lt;p>时间过的很快，2017 年我希望自己能够成为一个更好的 人，读到更多好书，听的更多好歌，做出更美的产品，坚持良好的习惯，关注他人的体验，向身边的人多学习，并坚持自己的梦想，向快乐出发！&lt;/p></description></item><item><title>写点儿东西，以防自己把别人的知识当成自己的</title><link>https://sbabybird.github.io/p/%E5%86%99%E7%82%B9%E5%84%BF%E4%B8%9C%E8%A5%BF%E4%BB%A5%E9%98%B2%E8%87%AA%E5%B7%B1%E6%8A%8A%E5%88%AB%E4%BA%BA%E7%9A%84%E7%9F%A5%E8%AF%86%E5%BD%93%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84/</link><pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%99%E7%82%B9%E5%84%BF%E4%B8%9C%E8%A5%BF%E4%BB%A5%E9%98%B2%E8%87%AA%E5%B7%B1%E6%8A%8A%E5%88%AB%E4%BA%BA%E7%9A%84%E7%9F%A5%E8%AF%86%E5%BD%93%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84/</guid><description>&lt;p>作家余华在&lt;a class="link" href="https://www.douban.com/group/topic/38345927/" target="_blank" rel="noopener"
>《我能否相信自己》&lt;/a>里写的一句话让我看了很有触动:&lt;/p>
&lt;blockquote>
&lt;p>“那些轻易发表看法的人，很可能经常将别人的知识误解成是自己的，将过去的知识误解成未来的。然后，这个世界上就出现了层出不穷的笑话。”&lt;/p>
&lt;/blockquote>
&lt;p>这正是我所担心的，担心知道的太多，明白的却又太少。前者容易造成焦虑，信息的过载，或者想的太多。后者则导致在实际生活中面对问题时仍旧束手无策。&lt;/p>
&lt;p>面对互联网上大量的信息和资料，为了缓解焦虑，大部分人都有两个习惯，一个是收藏，一个是转发。&lt;/p>
&lt;p>我曾经维护着一个巨大的笔记列表，里面全是我多年来在互联网上搜集的各种资料和文章，从工具技术到人文自然与哲学相关的，都有。我还耐心的给每篇文章都增添了标签进行分类，以便“以后”更方便的查找和“仔细阅读”。&lt;/p>
&lt;p>然而，事实是，永远会有更新的内容出现，然后动动鼠标就能收藏，但是再也没找到机会进行“仔细阅读”，当时那种“留下来慢慢看”、“以后会有用”的感觉是那么强烈，但是，真的很少再想打开看一眼。那些文章永远的躺在收藏夹里，累计出来的数字越来越大，甚至开始让我误以为那些东西我都懂了。&lt;/p>
&lt;p>另一个习惯就是“转发”，看到好的东西就想分享，这是一个好习惯，但同时大量的分享也反映了一个很细微的心理激励过程，即，如果我转发某篇文字，里面提到了很多我十分认可的观点或思路（但事实上我可能根本做不到），我就忍不住要转发出来，在转发的那一刻，我的内心深处隐约觉得，好像离“做到”又进了一步（其实并没有）。&lt;/p>
&lt;p>我想不仅仅只有我才是这样，应该很多人都有这种习惯和心理。&lt;/p>
&lt;p>后来，我意识到了这一点，逐渐的开始改进，直到有一天我想明白了，自己不应该胡乱发表连自己都不能明白的观点，自己知道的东西不一定就能成为自己的知识。于是开始有意的控制信息的获取，转而开始尝试着将自己能想明白的东西用文字组织一下，开始“消化”知识，通过文字重新构建自己的“知识体系”。&lt;/p>
&lt;p>书写东西实际上是一个思考的过程，很多写作高手看起来轻易就能写出精彩的文字，事实上底下支撑的并不是他有多强的“写作”能力，而是他的“思考”能力，他能否构建出一个他想要表达的形象，一个完整的、具体的形象，然后剩下的就是写出来。&lt;/p>
&lt;p>所以说，能够写出来的东西，至少，表明了作者可以在内心里构建一个清晰的影像，对于自己的知识，有了更进一步的理解。&lt;/p>
&lt;p>从将知识写成文字开始，到真正在现实中有效使用，再到可以传授给他人，慢慢的“我知道的”，就真的变成“我懂得”了。&lt;/p>
&lt;blockquote>
&lt;p>“我的大脑就像是一口池塘，别人的书就像是一块石子；石子扔进池塘激起的是水波，而不会激起石子。”“因此别人的知识在我脑子里装得再多，也是别人的，不会是我的。”&lt;/p>
&lt;/blockquote></description></item><item><title>应该自己动手做一些东西了</title><link>https://sbabybird.github.io/p/%E5%BA%94%E8%AF%A5%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%81%9A%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF%E4%BA%86/</link><pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BA%94%E8%AF%A5%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%81%9A%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF%E4%BA%86/</guid><description>&lt;p>学会制造和使用工具应该是人类区别于其他物种的最重要的一项区别，所以 DIY 应该是一种原始的冲动。每个男人都应该有一个属于自己的工具箱，或者更近一步，一个工作台。&lt;/p>
&lt;p>据说德国的制造工业之所以发达就是因为人家从小就培养和锻炼孩子的动手能力，几乎每个家庭都拥有全套的机械维修设备，小孩从几岁开始就趴在旁边看老爸在那儿捣鼓各种东西，骨子里就渗透了 DIY 的文化。&lt;/p>
&lt;p>这方面中国男人明显做的比较差一些（咱们当然也有高手，但从比例上来说还是太少了），一方面可能是因为从小所接受的教育比较注重理论文化知识、轻视实际操作能力，另一方面也可能是我们的人力相对廉价，有什么事情直接找专业工人搞定，老外的人工费用太高，动不动就找人做的话肯能花钱比较心疼。&lt;/p>
&lt;p>我身边认识的人也有比较能动手折腾的，但他们很少因为这样的技能而得到尊重，最后往往沦为一个免费修理工。不过也没关系，动手折腾带来的乐趣本身比什么都重要。&lt;/p>
&lt;p>最近偶然在网上看到 DIY 达人上传的自制机器人的视频，发现了更大的世界，原来有这么多喜欢动手 DIY 的人啊，赶紧去 Youtube 搜索一下，结果搜到大量视频，小到使用打火机制作迷你喷壶，大到在自己家后院架设完整的游乐场过山车。看过之后，赞叹和羡慕之余，感觉竟然还有些蠢蠢欲动。&lt;/p>
&lt;p>以前也喜欢动手修理一些东西，尝试制作过纸箱收音机之类的玩意儿，但随着年龄的增长，逐渐失去动手的机会和时间，以至于现在几乎彻底丧失了此类能力。&lt;/p>
&lt;p>所以呢，行动最重要，既然喜欢自己做一些东西，那不妨先从丰富和建设自己的工作台开始，然后一边鼓捣软件，一边鼓捣硬件吧。&lt;/p></description></item><item><title>AI会是人类最后的发明吗</title><link>https://sbabybird.github.io/p/ai%E4%BC%9A%E6%98%AF%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%8F%91%E6%98%8E%E5%90%97/</link><pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/ai%E4%BC%9A%E6%98%AF%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%8F%91%E6%98%8E%E5%90%97/</guid><description>&lt;p>最近在读一本书&lt;a class="link" href="https://book.douban.com/subject/26855627/" target="_blank" rel="noopener"
>《我们最后的发明》&lt;/a>，作者在书中表达了对人工智能发展的深度担忧。并阐明了一个耸人听闻的观点——人工智能将带来人类的毁灭（比核武器带给人类的伤害要大多了）。&lt;/p>
&lt;p>客观来说，目前的人工智能仍然处于较为低级的阶段，只能应用于非常窄的专业领域（专业术语叫 ANI，狭义人工智能），如文字处理、语音识别、图像识别、棋类对弈等等。受制于硬件环境的制约，对于这一类技术的研究曾经一度停滞不前，但近些年开始，基于大数据技术和生物技术以“深度学习”为代表的“机器学习”类技术的崛起，给人工智能带来了高速发展的可能。&lt;/p>
&lt;p>AlphaGo 战胜了人类围棋手已经被说的太多了，举两个其他的例子，大概还是在前年的时候，我研究过一段时间的基于图像识别的文字识别技术，阅读了很多资料，做过一些尝试，发现很难将文字的识别率提升到可以接受的水平，以至于沮丧的认为电脑不可能战胜人脑，因为三岁的小孩就可以轻易的分辨出照片中的动物是一只猫还是一只狗，但是电脑却判断不出来。然而没过多久我就看到新闻，谷歌已经通过“深度学习”技术通过让程序大量的阅读图片（谷歌的数据量很大），使得程序已经可以自动发现在任意图片中的“猫”，而且这还建立在人类从来没有告诉他“猫”这个概念的前提下。就在前几天，谷歌又爆出新闻，通过观看 BBC 的电视节目，他们的程序已经“学会了”读唇语的技能，而且识别率已经远远高于人类的读唇语专家（从这一点可以看出，电脑一旦某个方面超越人脑，人脑就再也没有机会追赶了）。&lt;/p>
&lt;p>这还只是 ANI，随着时间的推移，科学家们肯定蠢蠢欲动，开始着手研究 AGI（广义人工智能），通用的人工智能，也就是说在智能上各方面均能达到人类的级别，这才是真正意义上的人工智能，也是历代人工智能工作者梦寐以求的结果。&lt;/p>
&lt;p>可是有个比喻说的特别好，说通用人工智能就像是一列高速前进的火车，我们站在站台上远远看着它飞速向我们奔跑过来，然而就在赶到我们跟前的那一刹那，火车并没有停歇，而是从我们身边呼啸而过，将我们远远的甩在身后。这个时候的人工智能就是所谓的 ASI（超级人工智能）。&lt;/p>
&lt;p>而且，据很多持悲观态度的分析人士（如本文所提到《我们最后的发明》一书的作者）所设想，从 AGI 到 ASI 的进化时间，要比从我们现在发展到通用人工智能要快的多，根本不是一个数量级，也许我们盯着屏幕眼瞅着我们发明的通用人工智能在短短几分钟内进化成为超级人工智能，然后，剩下的事情，就很难设想了，作者在书中提到了好多可能性，遗憾的是，没有一种可能是对人类有利的。&lt;/p>
&lt;p>为什么呢，毕竟是人类创造了它啊？可惜的是，它并没有对创造它的人有什么感激之情，相反，它很可能不再依赖人类，根据自己的决策来处置人类（想想《黑客帝国》吧）。从情感上来说，人类肯定想控制这些智能，并天真的认为可以通过编程手段来处理机器的逻辑判断（这正是我们现在广大软件工程师每天要做的事情），可惜，了解“机器学习”的人都知道，正是因为“机器学习”的“模糊”（输入和输出的因果关系不是通过编程控制的，而是根据统计和概率学习得来的）特性，使得计算机能够自动的找到我们无法通过编程来找到的最优解。&lt;/p>
&lt;p>还有一点，也是人类的一道防线，那就是“意识”，作为这颗星球的掌控者，人类骄傲的认为，“意识”是人类独有的东西，因为“意识”是对“思考”的“思考”（元思考？），所以我们认为人工智能再牛，如果没有意识那么也不过是个受人控制的机器而已。可是关于这一点，现在也有很多争论，首先我们自己是不知道意识是怎样诞生的，了解的很少，而且一旦深入研究就会跑到科学、哲学、宗教的汇合点，最后不了了之。&lt;/p>
&lt;p>不过，还是有人做出了比较靠谱的设想，今年最火的没有之一的美剧《西部世界》就是一个例子，虽然“人工智能的觉醒”这个概念已经被很多电影和电视剧演绎的有点儿烂了，但是这个剧以及原著小说的关于“觉醒”的设想，让人细思恐极，原来人工智能可以在条件具备的时候完成“意识”的“自举”（Bootstrap？有点儿像拎着自己的头发把自己拎起来的意思）。有兴趣的话，可以自行去网上搜一下关于这个剧的影评，因为自己看可能看不太懂。&lt;/p>
&lt;p>不过还是不要太悲观了吧，毕竟已经有越来越多的人意识到这个问题的重要性，也有人开始系统的研究如何通过技术的手段，在研发过程中遵循某种规范和约束来降低智能爆发带来的危险，希望这件事最终像当年的“千年虫”那样能够平滑过渡吧，但愿人类能与超级智能和平相处。&lt;/p></description></item><item><title>借助两页A4纸高效工作</title><link>https://sbabybird.github.io/p/%E5%80%9F%E5%8A%A9%E4%B8%A4%E9%A1%B5a4%E7%BA%B8%E9%AB%98%E6%95%88%E5%B7%A5%E4%BD%9C/</link><pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%80%9F%E5%8A%A9%E4%B8%A4%E9%A1%B5a4%E7%BA%B8%E9%AB%98%E6%95%88%E5%B7%A5%E4%BD%9C/</guid><description>&lt;p>我一直热衷于尝试一切能够提升工作效率方法。几年前我非常推崇一种叫“GTD”的时间管理方法，方法效果怎样暂且不提，反正作者在全球出书（Get Things Done，中文名称《搞定》）、做演讲赚了不少钱，国内也因此诞生了一大批以讲解 GTD 时间管理为主题的培训机构或个人，应该也有不少人取得了显著成果。&lt;/p>
&lt;p>但是 GTD 在热了一段时间之后就销声匿迹了，我推测原因是该系统太复杂了，为了完整的运行这一 时间管理体系需要做大量的准备工作，要严格执行预先定义的工作流程，虽然该系统推崇最终能够达到“心如止水”的境界，但是太难了，好多人都停留在如何选择工具这个阶段，整天纠结选用什么样的工具（或软件）才能够顺畅执行流程，结果只能是越来越糟。&lt;/p>
&lt;p>我在尝试了一段时间 GTD 之后也部分放弃了，目前只保留了其思想中的“收件箱”机制，即任何事情来了之后先纳入收件箱中，分出轻重缓急（按重要程度排序下一步行动应该是 GTD 和核心思想了，与《高效能人士的七个习惯》中所提出的“要事第一”是一个意思）再做出下一步行动。&lt;/p>
&lt;p>可能是现代人都比较浮躁吧，后来又流行了一段时间的“番茄工作法”，这个方法主要是帮助你集中精力，具体方法大家可以网上搜索或者购买书籍来进行学习，实施起来还算比较简单，但方法能否有效很大程度上取决于你所做的工作是什么类型，如果你是一个比较纯粹的知识工作者，那么这个方法还是很管用的，每天都可以按部就班地消灭几个“番茄”。但如果你从事的工作经常需要沟通或总被外部信息打断，“番茄工作法”就无能为力了，因为一旦被打断，刚才的工作时间就算作废了，比较容易让人沮丧，所以我无法正常使用这种方法。&lt;/p>
&lt;p>随着时间的推移，各种方法在不断进化和融合，在抓住要事第一、清空大脑、保持专注的核心思想指导下，每个人最终都能找到 适合自己的高效工作方法，我在近期就做了一些融合和改进，虽然还没形成方法论，但是根据我自己的体会来说，效果还是很显著，因为操作起来比较简单，所以我觉得可以推广使用。&lt;/p>
&lt;p>首先，说一下所用到的工具，很简单，只需一支笔和两页纸（A4 最好，如果没有也可以用记事本替代）。&lt;/p>
&lt;p>第一页纸，是用于写晨间日志的，一天之计在于晨，这话一点儿也不假，大部分人每天最清醒的时候应该是在早晨起床到上午 10 点钟之前那一段时间，如果一天当中这一段时间得到有效利用，那么这一天的时间就不算浪费了。所以把握好这一段时间这一点最重要。&lt;/p>
&lt;p>至于所书写的内容，没有具体的要求，最好是你脑子里当时想到的东西全部写下来，如果文字不足以表达，就用图画画出来，将你此刻烦心的、畏惧的、牵挂的、未完成的、已承诺的，反正只要能想到的，都可以写下来，这么做最大的好处就是可以有效缓解你的压力，而且很多事情在写出来之后就变得没那么麻烦了，你会突然发现灵感，然后顺着灵感找到解决的思路。尽量写满一页纸。写完琐碎的东西之后，你就可以对着这一页纸，仔细考虑当日的工作计划了，描出最重要的三个待办事项，从难到易进行排序（一天的工作应先挑最难的开始下手，这样会越干越轻松）。这样就算完成了晨间日志了，一般顶多占用 30 分钟时间。&lt;/p>
&lt;p>第二页纸，用于记录工作日志，不是为了记录流水账，主要是为了总结和分析。在处理早晨给自己安排的任务时，可以用这张纸来进行梳理思路、分解目标，必要时也可以画图。还有一点儿比较关键，就是你要随时将新来的待办事项记录到这张纸上，因为你在工作的过程中随时会有电话或有人找你，你放下手头事情，除非来的事情是天塌下来那样重要紧急，否则你把这个事儿记录在纸上，继续你的工作。&lt;/p>
&lt;p>工作中随时会出现一些灵感或者心得体会，也要及时记录下来。这样在结束一天工作的时候，你会发现基本上都能写满那第二页纸，收尾的时候，分析你的日志，将待办事项等扔进你的手机或电脑的日程表（这样就不会忘了），心得体会等可以归档到你的记事本、电脑，或者等待有时间把它孵化成具体的任务（比如写一篇文章、发起一个会议等等）。简单排序之后，标出你第二天要处理的最重要的事情。&lt;/p>
&lt;p>接下来就简单了，循环执行一段时间试试吧，说不定你就会发现效率真的得以蹭蹭提升，以前的焦虑感逐渐降低甚至不见了。&lt;/p></description></item><item><title>磁带情节</title><link>https://sbabybird.github.io/p/%E7%A3%81%E5%B8%A6%E6%83%85%E8%8A%82/</link><pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%A3%81%E5%B8%A6%E6%83%85%E8%8A%82/</guid><description>&lt;p>你觉得经典的东西，其实只是你年轻的时候喜欢的东西罢了。&lt;/p>
&lt;p>周日的下午，听说要下雪和降温，看不进去书，摆弄了一会儿电脑，关掉浏览器，干脆听会儿歌吧。听着听着突然就想到创建一个歌单，将我原来买磁带听的歌都找到存起来吧。&lt;/p>
&lt;p>现在已经没有人再听磁带了，别说磁带，现在通过网络获取音乐这么方便，连 CD 也几乎绝迹了，当然据说现在仍然有部分人怀抱着黑胶唱片不放，但我没有经历过黑胶的黄金时代，从最一开始听的就是磁带。&lt;/p>
&lt;p>在有 MP3 之前，听歌是一个很具有仪式感的事情，因为需要很多步骤（比把大象关冰箱里还麻烦），你得从你的磁带架子（或盒子）上认真挑选一盒你想听的，如果你的磁带很多，当你的手指划过一排包装或精美或粗糙的塑料盒时，你会陷入短暂的沉思，仿佛先将歌曲在大脑里播放一遍似的，然后你按开录音机的仓门，认清磁带的 AB 面，然后轻轻放进去，再合上。按下播放键，磁头划过空白会出现一些沙沙声。&lt;/p>
&lt;p>虽然录音机也有快进的功能，但是一般很少用，因为跟 CD 和电脑的那种“非线性”切歌方式不同（一下就能下一首），磁带是线性的，想听下一首就得等待磁带一点点转过去。如果是随身听的话，为了省电就更不舍得使用快进的功能了，只能老老实实一首接一首听完。后来，在使用随身听的时候，我们发明了使用笔杆快速卷动磁带的方法，拿一个圆珠笔插在磁带孔上，甩动磁带使得磁带盒随着惯性迅速旋转，即可达到快进的目的，以至于我后来练就了直接用笔就能转到想听的任意一首歌的本领。&lt;/p>
&lt;p>磁带的音质还是不错的，可能那个时候没听过数字音乐的缘故吧，从我的记忆来说，磁带特有的那种模拟电路温暖音色，要比现在的 MP3 强多了，即使现在的一些 CD 也比不了。有时候听久了，会觉得音质越来越差，这个时候如果不是因为那种质量特别次的盗版磁带的话，一般就是录音机的磁头脏了，解决办法很简单，拿一团棉花蘸上一些酒精（如果没有酒精也可用高度白酒代替），轻轻擦拭一下磁头就行了，保证立竿见影，声音一下子就亮了许多。有钱的人家会更讲究一些，会买那种专用的清洗带，长的跟磁带一样，但是里面装的不是歌曲而是空白的毛绒卷，走动的时候会自动将磁头擦干净（有点儿类似于后来的 VCD 清洗碟）。&lt;/p>
&lt;p>我现在购买了网易云音乐的账号，所以即使是从网上下载的也算是正版音乐吧，现在有很多人不能接受听首歌还得花钱，觉得那些音乐人是不是想钱想疯了，可能他们都没有经历过买磁带听歌的日子吧，从性价比上来说，那时听歌可比现在贵多了，一盒正版磁带几十块，好一点儿的盗版也得十来块（要是算上通货膨胀的话，怎么着也得相当于现在的一百块吧，要是按房价算就更贵了）。一盒磁带一般也就容纳十来首歌，有些出版商为了多装几首歌，只得降低歌曲长度将每首歌都截取了一半放上去，或者干脆来那种四十首或八十首的大联唱（港台叫大串烧），这种听着就没劲了，一首歌刚唱几句就开始下一首了。&lt;/p>
&lt;p>今年十一的时候，我回到村里的老家，想办法找到了我以前装书和杂物的柜子。无奈时间太久了，我现在只能翻出一些 DVD、VCD 和 CD 了，磁带一盒也找不到了，每想到此，心里都惋惜不已。&lt;/p>
&lt;p>附：我创建的歌单（都是磁带时听的，后来买 CD 听的不算，每一首都听了不下百遍，唱 K 的时候全部不需要看歌词）链接 &lt;a class="link" href="http://music.163.com/#/m/playlist?id=515310127&amp;amp;userid=2998061" target="_blank" rel="noopener"
>http://music.163.com/#/m/playlist?id=515310127&amp;userid=2998061&lt;/a>&lt;/p></description></item><item><title>什么是BIM</title><link>https://sbabybird.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AFbim/</link><pubDate>Sat, 12 Nov 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AFbim/</guid><description>&lt;p>BIM 这个词最近出现比较多，可能很多人听到过但是还不太了解它指的是什么，我稍微做了一些学习探索，希望能通过一些简短通俗的文字总结一下自己对 BIM 的认识。&lt;/p>
&lt;p>BIM 的全称是 “Building Information Modeling”，这个词语是由美国 AutoDesk（就是那个旗下有 AutoCAD 和 3DMax 的公司）公司首创，中文翻译过来叫做“建筑信息模型”。被定义成由完全和充足信息构成以支持生命周期管理，并可由电脑应用程序直接解释的建筑或建筑工程信息模型。 简言之，即数字技术支撑的对建筑环境进行全生命周期管理的信息模型（来自维基百科）。&lt;/p>
&lt;p>狭义上来说，BIM 指的就是一种以表示三维图形为主、面向对象、为建筑学有关的计算机辅助设计服务的数字化信息模型。从广义上引申来看，BIM 是一种涵盖了整个建设领域包括一切和水、土、文化有关的基础建设的计划、建造和维修，以及城市规划，土木工程，交通工程等学科的全生命周期数字化设计技术。&lt;/p>
&lt;p>虽然概念提出很早（大概上个世纪 80 年代），但是真正的作为建筑设计方法流行起来还是近些年的事情，在此之前，建筑设计领域仍然停留在 CAD（计算机辅助设计）二维图纸的阶段。所以，基于 BIM 的设计算是一中新兴的建筑设计方法。&lt;/p>
&lt;p>对于传统 CAD 技术的提升主要有如下几点：&lt;/p>
&lt;p>1、全生命周期。一个工程从设计到施工，再到后期的投运和检修，都可以通过 BIM 进行全方位的设计和模拟。&lt;/p>
&lt;p>2、三维可视化，所见即所得。传统的设计是基于二维图纸的，设计的最终效果往往只存在于设计人员的脑子里，随着建筑越来越复杂，仅凭想象是很难应付庞大的建筑结构的，而运用 BIM 技术可以使得整个项目过程（设计、施工、运行）都是可视化的，所见即所得。&lt;/p>
&lt;p>3、各个环节的协同。设计工程庞大而复杂，往往需要各个部门紧密配合，传统的设计方式往往是结构、水、电等都有自己独立的图纸，给设计和沟通带来诸多不便，而 BIM 则从根本上解决了这个问题，大家使用统一的模型进行设计，具备更好的协调性，及早发现设计冲突。&lt;/p>
&lt;p>4、方便进行数字化模拟。由于设计时采用面向对象的数据模型，带有丰富的设计参数，使用 BIM 可以方便的进行设计结果模拟，不仅包括常规的物理力学计算、用料统计，还可以针对节能、环境、应急、施工进度等进行高级 分析和模拟。&lt;/p>
&lt;p>以上说了这么多优点，那么我们现在处于那个阶段呢，坦白说，国内的 BIM 目前仍处于起步阶段，甚至国内的《建筑信息模型应用统一标准》目前还在编制阶段，但是随着信息技术的发展和普及，国内的设计行业正在积极的尝试，很多信息化服务厂商（如恒华科技）都纷纷参与进来，一方面积极贡献标准化建议，另一方面整合升级自己的传统设计软件，全面贴合 BIM 理念。&lt;/p>
&lt;p>最后附上一张图（图片来自谷歌搜索），概括了与 BIM 相关的软件分类，大家可以参考。&lt;/p>
&lt;p>&lt;img src="http://upload-images.jianshu.io/upload_images/25416-93e90a43a1f10575.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="Paste_Image.png"
>&lt;/p></description></item><item><title>推荐一个剧</title><link>https://sbabybird.github.io/p/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E5%89%A7/</link><pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E5%89%A7/</guid><description>&lt;p>听说《黑镜》第三季出来了，激动不已，虽然早就不再舍得花时间刷剧，但是《黑镜》太特别了，忍不住花了半夜的时间连看了四集（以往的两季都是每季三集，但是这一季不知道为啥这么猛一次就放出来六集）。&lt;/p>
&lt;p>几年前有本名叫《浅薄》的书，火了一段时间，作者在书中痛斥现在各种高科技带来的负面效应，互联网让我们越来越浅薄，失去了自我思考的能力，思想变得越来越贫瘠，只能靠不断寻求刺激来掩盖。&lt;/p>
&lt;p>显然，《黑镜》的编剧们也意识到了，只是这些人的脑洞更大，并带有强烈的反乌托邦味道，随便看一集基本就能粉碎“高科技能够给人类带来幸福”这个幻象。&lt;/p>
&lt;p>如果只是对迷信技术的讽刺也就罢了，让此剧如此出色和受追捧的关键还是在于对人性的探索和拷问，在不受技术限制（科幻嘛）的情况下，主人公时刻都徘徊在看似很爽（至少让我们羡慕）但其实又痛苦不堪的两种境界边缘，虽然英国人的口味有点重，比如第一季第一集里就要让他们的首相现场直播与一只猪发生不可描述的事情。比如给大家都装上智能眼球，然后通过技术彻底拉黑一个人（物理上的拉黑，关于他的声音和图像全部都被屏蔽）。&lt;/p>
&lt;p>虽然都是幻想，不过还是带有对现实世界事情的映射，最新的这一季，据大家评论说感觉不如前两季精彩，但是我看了后感觉已经非常不错了，毕竟无论从剧情还是效果都高出同期剧集一大截，属于良心制作了。&lt;/p>
&lt;p>新一季的第一集甚至科幻的都有点儿不像科幻了，如果拿掉一些不怎么影响剧情的科幻效果，看起来感觉跟我们现在生活的世界是一样的。故事中的人物无时不刻都在被电子化的社交圈所包围，每个人都靠别人给他点赞来获得认可，评分高的人受到的“尊重”就越多，有点儿像现在的信用体系，但是比较讽刺的是，这里的人们为了维持较高的评分已经变得失去了自己，带着面具生活，早已忘了坦白说话是什么滋味。&lt;/p>
&lt;p>再说就有点儿剧透了，如果喜欢科幻的话，可以抽时间看看。&lt;/p>
&lt;p>目前在这里还能看: &lt;a class="link" href="http://www.bilibili.com/video/av6802900/" target="_blank" rel="noopener"
>http://www.bilibili.com/video/av6802900/&lt;/a>&lt;/p></description></item><item><title>那些年，我用过的“终身免费”产品</title><link>https://sbabybird.github.io/p/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E7%94%A8%E8%BF%87%E7%9A%84%E7%BB%88%E8%BA%AB%E5%85%8D%E8%B4%B9%E4%BA%A7%E5%93%81/</link><pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E7%94%A8%E8%BF%87%E7%9A%84%E7%BB%88%E8%BA%AB%E5%85%8D%E8%B4%B9%E4%BA%A7%E5%93%81/</guid><description>&lt;p>浙江温州最大的网盘厂，360 网盘，倒闭了，王八蛋老板吃喝嫖赌欠下了三点五个亿，带着他的小姨子跑了。。。。。。&lt;/p>
&lt;p>我是在出差途中听到这个丧心病狂的消息，虽然以前就隐约觉得迟早会有这么一天，但是却没有想到它来的这么快。当时感觉强行被打脸，我可是经常见人就推荐这款产品的啊，文件夹同步功能比某度网盘云盘不知道高到哪里去了。&lt;/p>
&lt;p>现在我的脑海里除了一边盘算如何下载我那费劲巴力传上去的一百多 G 数据，一边浮现出当年范厨师坐在轮椅上对赵本山说：“我要是再相信你就是二次上当。。。”的画面。&lt;/p>
&lt;p>第一次有这种感觉是前些年谷歌关闭旗下的 GoogleReader 产品（一款 RSS 阅读器），这个产品我用了将近 5 年，可以说通过这个产品提供的阅读文章刷新了部分三观，但是谷歌在 2013 年 7 月毅然关闭了这个产品，不顾百万用户跪求不要关闭。从此以后再使用谷歌产品我都持谨慎悲观的态度，后来的事情也逐渐印证了这种观点&amp;mdash;-谷歌是个喜欢随意关闭产品线的厂，项目说砍就砍。果然后来谷歌的 glass、无人驾驶等项目都雷声大雨点小，在无人驾驶技术方面甚至被起步比他晚的厂商反超。&lt;/p>
&lt;p>另一个大厂，微软，和谷歌随意关闭产品的习惯不同的是，微软喜欢改自己产品的名字，我最早的时候用过微软的 MySpace（比 qq 空间可能还要早），在上面写了不少日志，后来微软不知怎的就把它的名字改为 LiveSapce 了，然后所有产品线都开始围绕 Live 展开，连注册个账号都要 live.com 的邮箱，结果，没过几年，不知哪位大师又给微软看了风水，全线产品又都开始围绕 outlook.com 展开了，live 也被废弃了。&lt;/p>
&lt;p>说到大厂，雅虎当年也算一个，当年给用户提供终身免费电子邮箱的时候，用户无不感恩戴德，好多账号都使用雅虎的邮箱进行申请，然并卵，雅虎的邮箱同样也在 2013 年关闭。看来所谓的“终身免费”，在互联网公司的眼里指的并不是针对你的“终身”，而是产品的寿命。&lt;/p>
&lt;p>从个人感受来说，我是非常愿意为好用的产品付费，因为这符合市场价值交换的基本原则，有句话比较流行，叫“免费的，才是最贵的”。现在的互联网产品已经把用户给惯坏了，免费可能都不行了，恨不得倒找你钱才行，放眼望去，线上充斥 着免费的劣质产品，好的产品很容易就因为收费问题而被干趴下，像 360 云盘这么好的网盘产品（同类产品的几乎每一款客户端我都试用过超过 1 周，最终谨慎选择了 360），绝对不是因为技术原因导致的关闭，我猜测真实原因可能也不是其在公告里说的“因为版权审查”，很可能是因为“钱烧完了”。不知道 360 网盘是否怀念当年将杀毒软件免费而干掉别人的日子。&lt;/p></description></item><item><title>玩游戏能学到什么</title><link>https://sbabybird.github.io/p/%E7%8E%A9%E6%B8%B8%E6%88%8F%E8%83%BD%E5%AD%A6%E5%88%B0%E4%BB%80%E4%B9%88/</link><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%8E%A9%E6%B8%B8%E6%88%8F%E8%83%BD%E5%AD%A6%E5%88%B0%E4%BB%80%E4%B9%88/</guid><description>&lt;p>从计算机诞生的那一刻开始，游戏就一直是技术前进的推动力，无论是对硬件的压榨还是对算法的要求，很少有应用软件能够超越游戏的需求，一般来说，游戏软件所使用的技术总是领先其他应用软件一个世代，就连最近比较火的 VR、AR 技术也是首先从游戏开始的。还记得乔布斯大神说过：“全民娱乐是最终需求，一切技术最终都将为娱乐服务（大意吧，记不清了）”。&lt;/p>
&lt;p>那么，除了放松身心、打发时间之外，好像找到正当玩游戏的理由了。&lt;/p>
&lt;p>1、寻找灵感。我一直觉得应该在游戏中寻找产品的灵感，哪怕是最基本的交互设计或用户界面，同时期的游戏都能把传统软件甩好几条街，所以我们可以从玩游戏的过程中激发灵感，考虑我们的软件产品交互或界面有没有可以向游戏借鉴的地方。&lt;/p>
&lt;p>2、推动技术。最先使 H5 火起来的还是基于网页的游戏，正是这些游戏先驱踏平了无数的技术坑，才使得当前基于 H5 技术的跨平台游戏引擎如此火爆，并进一步诞生了通用的应用软件开发平台，在使用这些平台或者制作同类产品时，必须明白，是游戏率先推进了标准化和硬件性能提升，才使得我们能够基于成熟技术制作跨平台软件。&lt;/p>
&lt;p>3、学习技术。在享受游戏的乐趣之余，可以思考这些游戏的性能是如何实现的，现在互联网这么开放，不难寻找到相关的介绍资料，很多技术思路都可以借鉴，无论是终端资源的有效利用还是服务端高并发的基础架构，如果能满足游戏的要求，基本可以超越你的需求。&lt;/p>
&lt;p>4、学习心理学。为什么我们都觉得玩游戏比工作要爽，闲暇时间宁愿掏出手机玩两把消消乐也不愿意写一篇技术博客？根本在于游戏的设计符合心理学中人们对正向激励的需求，大部分游戏都设置有精妙的积分机制，一方面鼓励你多玩多得，另一方面让你不由自主的愿意付出时间和金钱，都是因为你在这个过程中获得了及时的反馈和激励。这个层面我们在产品设计或运营的时候都可以借鉴，向那些游戏厂商学习。&lt;/p>
&lt;p>5、学习知识。这个有些牵强了，但是也不是不可能，有些纯粹消磨时间的游戏就算了，但是确实有些有追求的游戏公司在制作的时候是出于寓教于乐目的的，比如我最近就在玩一款编程游戏（为什么下了班还要编程啊？！），通过几个简单的指令控制游戏中的小人完成任务，通过玩这个游戏我就很轻松的理解了大学里没有学会的汇编语言（或机器语言？），原来汇编语言里动不动就往寄存器里传输数据的意义就在于将输入通过某种操作变为输出，通过最简单的加减运算来实现复杂操作。&lt;/p>
&lt;p>很多人尤其是学生家长非常抵制孩子们玩游戏，认为游戏就是破坏学习的毒品，但是事物都有两面性，如果合理的安排时间，不沉迷于游戏，而是在娱乐的同时能学习和思考一些东西，那么玩游戏也没什么大不了的，甚至应该得到推崇，至少每个软件工程师都应该在工作之余多玩一玩游戏，只有不断的反思自己的产品，才做出更出色成果来。&lt;/p></description></item><item><title>感受另一种创新</title><link>https://sbabybird.github.io/p/%E6%84%9F%E5%8F%97%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%88%9B%E6%96%B0/</link><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%84%9F%E5%8F%97%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%88%9B%E6%96%B0/</guid><description>&lt;p>过节回了几天老家，亲朋好友团聚之余，感受到了一些变化，可片面代表当下农村对现代科技的使用情况，同时也更新了我对于互联网的一些认识。&lt;/p>
&lt;p>1、移动互联网要比在城市所占比重大，人手一部智能手机，几乎没有使用 PC 上网的，网吧几乎销声匿迹，每个人都在低头看手机屏幕，即使是在干农活的时候。&lt;/p>
&lt;p>2、上网不再是年轻人的专利，很多老人也都开始使用手机上网，并开通了社交软件账号，特点是对于网上传播的文字信息不具备过滤能力，只能被动接受，任何信息都认为是真实可靠的，并热衷于转发给身边的人。&lt;/p>
&lt;p>3、对手机操作系统没有概念（当然手机操作系统以 Android 为主），就像现在大多数人仍然对 web 浏览器（IE、Chrome、火狐？）没有概念一样，很多人并不能区分 Android 和苹果的 iOS，也不认为手机上安装 App 的是“软件”，而是代表了某种功能，比如聊天、吃饭、天气、新闻、搞笑好玩儿的事儿，这种认识其实很纯粹，我们平时的认知反而会因为专业知识导致偏差。&lt;/p>
&lt;p>4、手机软件占比，沟通、娱乐类占比最大，全民娱乐的时代，以前只能通过看电视放松，现在普遍都盯着小屏幕了，微信里盛传各种自制搞笑小视频，虽然做工粗糙，但是认可度很高，我能感到里面的暗流涌动，很多在我们看来“一眼假”的东西却能够得到爆炸性的传播，仍然坚守“按套路”出牌的高大上公司指不定在哪儿被干翻。&lt;/p>
&lt;p>5、利用社交软件做营销，利用社交圈子的传播性而策划的营销活动特别盛行，商家们都已经十分重视手机上传播的宣传推广信息，而电视、平面媒体的广告已经成为了辅助信息。已经爆发了不少专门帮助商家进行微信营销的团队，有些人利用技术手段仅仅通过制作一些转发工具、外挂工具等获得了巨额利益。&lt;/p>
&lt;p>以上的观察虽然是主观认识，但是确实反应了一些事实，可以肯定的是，大家都在发力移动互联时代的创新，而且随着技术的推进，创新的杠杆将越来越长，能撬动的东西也越来越大，有时候真的需要将目光投向最不起眼的地方，你认为最稀松平常的事情，说不定有人已经准备掀起一场革命。&lt;/p></description></item><item><title>后端开发从PaaS到BaaS</title><link>https://sbabybird.github.io/p/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BB%8Epaas%E5%88%B0baas/</link><pubDate>Sat, 24 Sep 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BB%8Epaas%E5%88%B0baas/</guid><description>&lt;p>鉴于我们在 web 产品开发过程中采用了前后端分离（也是广泛采用的新技术）的技术，前端开发与后端开发在约定完交互接口之后往往存在一定的开发时间差，也就是说移动端和页面程序已经开发出界面了，但是后端的接口还没提供好，导致调试困难。于是我们很自然的就想到一个点子，为何不制作一个服务专门用来生成供前端调试调用的“假”接口呢？&lt;/p>
&lt;p>于是我们很快就选用了 MongoDB 作为数据库，基于 nodejs 开发了一个模拟各种数据增删查改的接口，符合 RESTful 标准，可以通过 web 页面随时增加你想要模拟的接口，除了没有业务逻辑之外，可以满足移动应用和 web 前端页面开发的数据模拟和接口访问，解决了前后端开发的时间差问题。&lt;/p>
&lt;p>后来我进一步想了一下，为什么我们不能将这个服务增强，使之具有一定的业务扩展能力（比如使用 js 脚本来插入业务逻辑），并配上我们的基础服务（权限、流程、报表等），这样我们是不是就不用开发纯业务的后端程序了呢？&lt;/p>
&lt;p>这个想法令我很兴奋，因为这就是传说中的云计算 PaaS 落地的一个体现，而且看起来像是一个伟大的产品的小时候，于是我就上网搜索了一下，看看有没有类似产品，结果令人欢欣鼓舞，原来 Facebook 早在两年前就投资了一家创业公司开始做这个了（名字叫 Parse，有兴趣可以搜索一下），谷歌公司也收购了类似产品。国内也已经有人做了，而且据说还不错，比较出名的是 LeanCloud，我看了一下已经是比较成熟的解决方案了。&lt;/p>
&lt;p>在移动互联网飞速发展的今天，后端服务的开发需求量非常之大（当然很多风投老板至今还认为移动应用的开发工作量只是手机上面的那些界面，这使得他们数次掉进坑里），上面那些厂商就是看准了这个需求，开发了面向后端的 PaaS 服务，使得一大票创业团队不再为后台服务发愁，找几个 app 程序员专注于客户端的应用开发就行了。&lt;/p>
&lt;p>云计算技术发展到今天，上层的软件即服务（SaaS）和底层的基础设施即服务（IaaS）发展的都特别好。一方面，软件即服务已经渗透到社会各行各业，很多在线服务已经成为了普通人生活中不可或缺的一部分（比如在线地图），另一方面，基础设施即服务也得到了广大开发者的认可，几乎每个上进的开发者都在互联网上租赁（或免费）有自己的虚拟服务器或存储服务。唯独处在中间层的平台即服务（PaaS）发展的不尽如人意，无论是国内的 SAE（新浪）还是国外的谷歌的 GAE（现在改名叫 GoogleCloudPlatform 了），用户都没有达到较大的规模。因为现有 PaaS 仍没有很好的提升后端开发的工作量，即使存在那么多的中间件，仍然需要大量的后端开发工作要做。这时候，上帝说：要有光，于是就诞生了 BaaS。&lt;/p>
&lt;p>BaaS（后端即服务）是指专为移动应用开发者提供整合云后端的服务。开发者无需过多研究服务器端程序，而只需调用云计算平台提供的 API，使用相应 SDK，就能迅速完成数据存储、账户管理、消息推送、社交网络整合等功能。&lt;/p>
&lt;p>BaaS 本质上来说是 PaaS 的一个细分领域实现，但是基本解决了后端开发问题。鼓吹者甚至扬言用一个云平台来解决所有互联网产品后端服务的需求。&lt;/p>
&lt;p>想法有些激进，但是可以回顾操作系统的发展历史来借鉴。很久以前，所有的计算机都没有通用操作系统，那个时候的软件厂商提供给客户的软件是自带操作系统的，完全从硬件底层做起，一直到业务功能开发。直到后来有了通用的操作系统如（windows、linux 等），才将这些软件厂商从底层解放出来，控制硬件的事情交给了操作系统，应用软件厂商专注于业务开发。&lt;/p>
&lt;p>现在的情形跟当年的操作系统诞生时很像，很多厂商还在自己解决后端服务的开发，但是随着后端技术的越来越成熟，必然出现像当年微软这样的厂商彻底解决后端服务的问题。&lt;/p>
&lt;p>所以现在还在编写后端业务代码的企业和技术人员，需要用发展的眼光来看自己的软件架构，业务逻辑逐渐向前端倾斜，底层服务围绕数据为中心，很有可能在未来的某一天后端开发（这里指侠义的业务逻辑开发）将淡出应用软件开发的领域。&lt;/p></description></item><item><title>不上网的假日</title><link>https://sbabybird.github.io/p/%E4%B8%8D%E4%B8%8A%E7%BD%91%E7%9A%84%E5%81%87%E6%97%A5/</link><pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8D%E4%B8%8A%E7%BD%91%E7%9A%84%E5%81%87%E6%97%A5/</guid><description>&lt;p>借假日之闲，重读了一遍《正念，此刻是一支花》。书中反复引用梭罗在《瓦尔登湖》中的描写，并无比推崇的说：“梭罗常常在自己的门前一坐数小时，什么也不做，只是观察、聆听，太阳在天空慢慢变换位置，光和影也在不知不觉中变换”，看得我“身不能至，心向往之”。&lt;/p>
&lt;p>前天看了一个综艺节目，里面有一个小品，讲述了现代人对手机依赖成瘾的种种情形，虽然有所夸张，但是很贴合实际，尤其是里面主人公说出“你的世界不再是真实的世界，你被困在手机里了。。。”的时候，引起了很多观众的共鸣，包括我。&lt;/p>
&lt;p>像我这么追求“知行合一”的人嘛，自然不能只发感慨，凡事都要有所行动，于是借假期的机会，我准备初步尝试一下“不开电脑、少玩手机”的思路，体验一下互联网和各种资讯之外的世界还剩余什么。&lt;/p>
&lt;p>如果有幸，看看能否达到梭罗所言：“刚才还是清晨；看哪，现在已是黄昏，一日之中几无可念之事。。。”的境界。&lt;/p>
&lt;p>向来都是“买书如山倒看书如抽丝”，一旦关掉电脑和浏览器，突然就有时间看书了，发现如果真能静下心来认真阅读，平时买的那几本书根本不够怎么看的，随便翻看一个上午就能看完两本，而且还有富裕，看来以往所推脱没有时间实在是瞎扯，以后可以考虑安排出固定时间读书，尽量不要利用碎片时间阅读，大段时间最佳。&lt;/p>
&lt;p>留出时间陪孩子玩耍一下感觉也是不错，除了打扫卫生之外，我跟金妍一起练习了钢琴的哈农指法，我早已手指僵硬伸展不开，练习时总不能合拍，屡次遭到金妍批评，但还是能感受到全身心投入到一件事情时的那种忘我，虽然持续的时间不长。&lt;/p>
&lt;p>上次这么无聊的时候，我跟金妍一起，拿着铅笔和画板，把客厅里的物品几乎画了一遍，这次我又想到前些年买来一直未使用过的《秘密花园》绘本，可以尝试一下了。认真挑出几种颜色的彩铅，在餐桌摊开绘本，开始仔细描绘，确实是个锻炼耐心的工作，俩人一起涂了半个多小时才描了不到半页纸。&lt;/p>
&lt;p>做以上事情的同时，开始感受到信息枯竭的焦躁，但是忍住了各种冲动（比如说查收邮件、上网、编程），看书、听音乐、吃东西交替进行，但是我突然想到了另一件事情，我何尝不能练习一下“冥想”呢，据说乔布斯就是经常冥想然后才保持较高的创新力的，而且是个放松自我的绝佳途径，这个简单，我想。&lt;/p>
&lt;p>往沙发上一坐，闭上眼，“尽量无可念之事”我想，那是不可能，各种思虑此起彼伏，根本无法安静，我于是爬起来，打开书，像阅读说明书那样，查看“如何放松四肢，将注意力集中在自己的呼吸上，相像自己是一座山。。。。。。”&lt;/p>
&lt;p>等我醒来时发现自己实际上睡了两个多小时，这也算是间接达到了“刚才还是清晨，现在已是黄昏。。。”了吧。&lt;/p></description></item><item><title>人工智能时代的“情商”</title><link>https://sbabybird.github.io/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3%E7%9A%84%E6%83%85%E5%95%86/</link><pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3%E7%9A%84%E6%83%85%E5%95%86/</guid><description>&lt;p>最近“人工智能”比较火，谷歌的阿尔法狗战胜了围棋大师，IBM 的华生博士轻松赢得了国外的“幸运 52”和“开心辞典”，苹果也准备推出“人工智能即服务”的云服务，有种“忽如一夜春风来，千树万树梨花开”的味道。&lt;/p>
&lt;p>毫无疑问地，未来的社会，“人工智能”将会成为中流砥柱，替代一大拨人。到那个时候，与我们打交道最多的，可能就不是人了，而是各式各样的机器，出门打车可能是无人驾驶，餐厅吃饭可能是自主点餐，“为人民服务”的各种窗口背后可能也不再是一张冷冰冰的脸，而是通过后端服务 API 支持的人工智能界面。&lt;/p>
&lt;p>一厢情愿地推测，这可能会促使一些变化，人与人之间的联系可能跟以前不再一样，无论是沟通还是协作，可能不再像现在这样复杂。我们可能会从复杂的人际关系中得到解脱，从而获得更多的精力来做自己想做的事情。&lt;/p>
&lt;p>到那个时候，我们可能需要重新考虑什么是“情商”。&lt;/p>
&lt;p>“情商”的重要性已经毋庸多言，非得要解释一下什么是“情商”的话，大概就是“体会别人感受的能力”吧，关于“情商”有句很直白的话，叫“智商高爽自己，情商高爽别人”。&lt;/p>
&lt;p>大概“情商”高的人更能让别人舒服吧，所以现在特别推崇这个，如果去图书馆的话，大概有整架子的书摆在那儿教你如何提高“情商”，教你如何让他人“更爽”。&lt;/p>
&lt;p>但是当技术推动社会变革，人工智能得到普及以后呢，到那个时候，我们需要什么样的“情商”？&lt;/p>
&lt;ul>
&lt;li>我们可能需要更多的考虑如何利用发挥机器的效率，而不是委婉的告诉机器他做的不好但是值得鼓励。&lt;/li>
&lt;li>机器带来的效率提升使得更多人有了更多的空闲时间，而利用这些时间学习或者干别的，更能拉伸人与人之间的差距。&lt;/li>
&lt;li>人更要追寻自己的内心，驱动自己做些有创造力的事情，否则被机器取代是迟早的事儿。&lt;/li>
&lt;/ul>
&lt;p>人除了跟人打交道之外，可能会跟更多的“机器”打交道，需要懂得机器的规律，思考方式也要发生变化，放弃那些人类不擅长的事情，才能更好的利用机器。就算是人工智能，也没有创造力，不能探索未知的问题，所以那个时候，我们要拼的可能就是创新力，而不是“让别人爽”的能力了吧。&lt;/p></description></item><item><title>秋天的田野</title><link>https://sbabybird.github.io/p/%E7%A7%8B%E5%A4%A9%E7%9A%84%E7%94%B0%E9%87%8E/</link><pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%A7%8B%E5%A4%A9%E7%9A%84%E7%94%B0%E9%87%8E/</guid><description>&lt;p>我记忆中关于秋天的美好全都在田野里。&lt;/p>
&lt;p>记忆里的秋天是收获的季节，小学的课本里就有课文专门描述这个季节的美好：“高粱涨红了脸，稻子笑弯了腰”，我只记住了这一句。&lt;/p>
&lt;p>对于几岁的孩子来说，农忙的事情不用操心，即使去地里也是以撒欢为主，虽然欣赏不来万里无云的晴空和一片金黄的丰收景色，但是可以吃啊，到处都是好吃的。&lt;/p>
&lt;p>有一种野浆果，具体在生物书上该叫什么名字，我也不知道，我们老家那儿管它叫“香不溜”。长在秋天的庄稼地里，枝叶也不茂盛，不太容易被发现，如果不注意的话，很难跟其他野草棵子区分出来。但是果实极为好吃，酸中带甜，还伴有浓浓的香味儿，是我小时候能吃到的最好吃的“水果”。遗憾的是，由于会影响庄稼生长，这种东西一般都会被作为野草被拔去，到了收获的季节，能够躲过重重除草工作并坚持结果儿成熟的可不多，也就是说，这种果子不会天天遇见，偶尔能吃到一颗就撞了大运了。但正是这种稀缺性使得它吃起来的味道更加美好，如果能碰到熟透的，当然最好，碰见了半生的，也会迫不及待地吃掉，如果恰好碰上刚结果还没长熟，我一般是先记住位置，然后天天去看，等到成熟了再去吃（前提是没有被别人捷足先登，这事儿时常发生）。不过小时候下地的时间并不多，我吃香不溜最大的供货源还是来自于我的爷爷（从地里给我带回来的），别的记不起来了，只记得爷爷下地回来我跳起来掏他的口袋，希望能从里面找到几颗香不溜的情景。&lt;/p>
&lt;p>还有一种野生的“瓜”，想象一下，把西瓜按照比例缩小 50 倍，就像一颗玻璃球那么大，但是外观完全一样，只不过皮儿是软的，土名儿叫“马炮”。瓜秧漫长，顺着玉米杆的根儿生长，跑太快如果不注意的话还会被绊倒，上面结了成串儿的果实，虽然吃起来味道差一些，好在随处可见，就算是不吃也能拿着玩耍，小圆球可以拿来做各种有意思的游戏，就算是不做游戏，把马炮放在地上用力一踩，也会卟嗞一声爆炸，每个人脸上都笑开颜。&lt;/p>
&lt;p>以上说的都是可以生吃的，对于地里刚刚成熟或即将成熟的庄稼来说，吃起来往往需要加工一下。&lt;/p>
&lt;p>说是加工，其实也没那么复杂，顶多就用火烤一下。秋天的地里最不怕火，有成堆的秸秆和叶子可以作为燃料，在地里点燃后还能作为肥料，如果能顺便烤一下吃的，真是一举两得。&lt;/p>
&lt;p>大豆不能等到完全成熟再烤来吃，那样就太硬了，最好是在豆荚还青青的泛着一点儿黄的时候直接连根拔掉，然后整棵整棵的放在火里，到不了一根烟的功夫，香气就从火堆里飘出来了，这个时候最好别嫌烫手，赶紧抓起来，剥开豆荚，将还正在冒着热气的青豆一把一把的放在嘴里，香的保证你忘了所有的烦恼。&lt;/p>
&lt;p>花生和红薯，饿了的时候，直接从地里扒出来就可以吃，但是生的吃多了对肚子不好，所以一般也是烤熟才吃，不过吃起来就没那么方便了，一般费的功夫要稍微大一些。尤其是红薯，不能用大火，否则皮焦骨头生，表皮都黑了，里面还是生硬的。最好整块扔在刚烤完青豆的火堆里，不用搭理它，先去玩会儿别的，等到天快黑的时候，再从灰烬里将红薯慢慢扒出来，熟透的红薯绵软可口，甜的让人掉牙。现在大街上卖的烤红薯闻着很香，吃起来比起我们在地里吃的就逊色不少了，一方面可能是因为现在嘴刁了，另一方面估计也跟小时候吃红薯之前那漫长的等待有关。&lt;/p>
&lt;p>说了这么半天吃的，好像跟想象中金色的画卷不太一样，但是，秋天的田野是大自然对于没有零食可吃的农村孩子最好的馈赠。。。。&lt;/p></description></item><item><title>Docker环境在windows系统下的安装与配置</title><link>https://sbabybird.github.io/p/docker%E7%8E%AF%E5%A2%83%E5%9C%A8windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/docker%E7%8E%AF%E5%A2%83%E5%9C%A8windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>&lt;h1 id="背景">背景
&lt;/h1>&lt;p>配置开发环境是目前我们开发团队在进行开发工作之前的重要工作，对于需要使用我们自己封装的开发框架的 java web 程序员来说更是如此，一般来说需要配置 jdk、mysql、tomcat、maven 等一系列基础环境，如果需要使用我们现有的开发框架，还需要配置开发工程的模板、基础服务的访问地址、统一的环境参数等等。这些工作做起来比较繁琐，即使按照开发文档一步一步进行也容易出现差错，而且较为耗费时间。&lt;/p>
&lt;p>Docker 容器技术的出现使得这一工作得以改进，通过一段时间的研究，我们的底层框架开发人员将以上环境全部使用 Docker 容器技术制作成为完整的镜像，使得业务开发人员不必再关心这些琐碎工作，只需通过 git 下载我们的工程模板，通过执行 Docker 命令自动在本地完成开发环境的构建。&lt;/p>
&lt;p>然而由于 docker 是一个较新的技术，仍有很多开发人员没有接触过，上次我发的文章对于环境的配置描述的并不详细，这次专门针对 windows 下的开发者如何配置 docker 环境做一次讲解。如有必要，我将录制专门的视频来讲解。&lt;/p>
&lt;h1 id="认识-docker">认识 Docker
&lt;/h1>&lt;p>&lt;a class="link" href="https://www.docker.com/" target="_blank" rel="noopener"
>Docker&lt;/a>是一种容器技术，可以在操作系统中隔离出若干个独立的程序运行环境，这些环境既可以共享宿主机的资源，另一方面他们之间相互独立，互不影响，也不会对宿主机的环境产生影响。与虚拟化技术不同的是，Docker 比较轻量级，容器（隔离运行环境）的启动和销毁都比较快，这些运行环境可以像现实世界中的集装箱那样，打包成一个一个的镜像，同样的镜像在不同的 Docker 环境中部署运行将会得到同样的结果，就像同一首歌在不同的播放器播放那样简单。&lt;/p>
&lt;p>Docker 的出发点是将现在日趋复杂的 web 应用系统部署变得像播放唱片那样简单，但是它能做的却远不止于此，如果使用得当，我们将可以很容易实现“开发”、“测试”、“生产”环境的完全一致（这在以前是十分困难的），程序员以后也许再也说不出“这功能在我这儿好使”这样的话了。&lt;/p>
&lt;p>作为开发者，如果认真思考过以上的问题，当遇到 Docker 这种容器技术时，应该很容易就想到针对自己工作的改进方案，并且加以利用。比如如果想尝试某一个新技术，以前可能需要在自己工作的操作系统上进行安装，不但配置麻烦，而且存在将自己的系统弄坏的风险（很多人还爱重装系统），现在不同了，只需要下载对应的镜像文件，然后启动容器，即可体验。无论是 golang、node、java、python 这些程序语言，还是 spark、wordpress、tomcat、mysql 这种应用环境，都已经有人封装好了即开即用的镜像，随时可以体验，而且用着不爽可以随时清理。&lt;/p>
&lt;h1 id="在-windows-环境下的安装">在 Windows 环境下的安装
&lt;/h1>&lt;p>如果是在 Linux 系统下干活，则比较简单，因为 Linux 已经实现对 Docker 技术的内核级支持，CentOS 的软件仓库自带了 Docker 最新版，可以直接通过命令安装使用。&lt;/p>
&lt;p>对于 Windows 来说，稍有些困难，但是目前也不是问题了。首先需要看一下你的 Windows 环境，分两种情况，一种是 Windows 10 64 位专业版，一种是其他版本（比如很多人仍然推崇的 Win 7）。前者可以直接支持安装 Docker 原生版，性能最好，体验最佳，后者只能使用 Docker 官方提供的一种过度技术（Docker ToolBox），这种技术不得不依赖 Oracle 的 Virtualbox 以在你的系统里创建一个虚拟机用以模拟 Linux 运行环境，好在封装的比较好，基本可以忽略这个虚拟机的存在，只需专心使用 Docker 即可。&lt;/p>
&lt;h2 id="在-windows-10-64-位专业版的安装">在 Windows 10 64 位专业版的安装
&lt;/h2>&lt;p>这个最简单，需要确定两个基础环境：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>你的 CPU 支持虚拟化（一般都支持，如果在操作系统中没看到，则可以手动到 BIOS 里打开，如果实在不支持，换台新的电脑吧），具体可以通过任务管理器查看，如图
&lt;img src="https://sbabybird.github.io/p/docker%E7%8E%AF%E5%A2%83%E5%9C%A8windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/25416-1146db9464f3f6e7.jpg"
width="646"
height="593"
loading="lazy"
alt="cpu.png"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="261px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>你的操作系统需要开启 Hyper-V，如图
&lt;img src="https://sbabybird.github.io/p/docker%E7%8E%AF%E5%A2%83%E5%9C%A8windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/25416-77decb38e7ee2063.jpg"
width="767"
height="601"
loading="lazy"
alt="hyper-v.png"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="306px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>然后到&lt;a class="link" href="https://download.docker.com/win/stable/InstallDocker.msi" target="_blank" rel="noopener"
>官方网站下载安装包&lt;/a>直接安装即可，有时候可能存在网站被墙的情况，也可以到我上传的网盘里下载，&lt;a class="link" href="https://yunpan.cn/cMRZNp6BaXeEF" target="_blank" rel="noopener"
>链接在此&lt;/a> &lt;a class="link" href="https://yunpan.cn/cMRZNp6BaXeEF" target="_blank" rel="noopener"
>https://yunpan.cn/cMRZNp6BaXeEF&lt;/a> 访问密码 80e6&lt;/p>
&lt;h2 id="非-windows-10-64-位专业版无法使用原生-docker的安装">非 Windows 10 64 位专业版（无法使用原生 Docker）的安装
&lt;/h2>&lt;p>这个稍微麻烦，也需要确定两个基础环境：&lt;/p>
&lt;ul>
&lt;li>你的 CPU 支持虚拟化&lt;/li>
&lt;li>你的操作系统需要关闭（注意是关闭！）Hyper-V&lt;/li>
&lt;/ul>
&lt;p>然后到&lt;a class="link" href="https://github.com/docker/toolbox/releases/download/v1.12.0/DockerToolbox-1.12.0.exe" target="_blank" rel="noopener"
>官方网站下载安装包&lt;/a>，如果网站被墙，可以访问&lt;a class="link" href="https://get.daocloud.io/toolbox/" target="_blank" rel="noopener"
>这个地址&lt;/a>，也可以到我上传的网盘里下载，&lt;a class="link" href="https://yunpan.cn/cMSaWneaYPE5K" target="_blank" rel="noopener"
>链接在此&lt;/a>&lt;a class="link" href="https://yunpan.cn/cMSaWneaYPE5K" target="_blank" rel="noopener"
>https://yunpan.cn/cMSaWneaYPE5K&lt;/a> 访问密码 c8fa&lt;/p>
&lt;p>安装过程无特别之处，需要注意的是，如果你的系统内没有安装过 Oracle Virtualbox，安装程序会自动给你安装一个，不用理会，直接一直点击“下一步”即可。安装完成后直接点击快捷方式“Docker Quick Start”即可，如果是第一次运行，将会耗费一些时间（因为需要创建虚拟机），在这个过程中，系统可能会弹出若干次 UAC 提示让你授权，果断点击“同意”即可。&lt;/p>
&lt;h1 id="环境的配置和使用">环境的配置和使用
&lt;/h1>&lt;p>安装完成之后，就可以随意使用了，但是，受国内网络环境的影响，还有一些需要调整，因为在国内访问国外的镜像库（docker 默认的那个）比较慢，一般镜像又都比较大（动辄几百兆），所以我们还需要配置一个国内的镜像仓库，推荐 DaoCloud 或者阿里云的，这里以阿里云举例。&lt;/p>
&lt;h2 id="windows10-下的镜像仓库配置">Windows10 下的镜像仓库配置
&lt;/h2>&lt;p>原生的 Docker 配置比较简单，官方还提供了可视化的配置界面，操作步骤如下：&lt;/p>
&lt;ul>
&lt;li>右键点击系统托盘的 Dcoker 图标，选择 Settings&lt;/li>
&lt;li>进入 Docker Daemon 选项，在右侧窗口填入镜像仓库的地址（可以自行去阿里云申请，我这里有一个示例）&lt;/li>
&lt;li>示例如图
&lt;img src="https://sbabybird.github.io/p/docker%E7%8E%AF%E5%A2%83%E5%9C%A8windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/25416-0794a163a8b70d6d.jpg"
width="826"
height="493"
loading="lazy"
alt="镜像仓库.png"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="402px"
>&lt;/li>
&lt;/ul>
&lt;p>配置完成后，在命令行窗口执行一个拉取镜像的命令（&lt;code>docker pull tomcat&lt;/code>）试试看，会发现速度杠杠的。&lt;/p>
&lt;h2 id="dockertoolbox-镜像仓库的配置">DockerToolbox 镜像仓库的配置
&lt;/h2>&lt;p>这个略微麻烦一些，不过还可以接受，需要在命令行进行操作：&lt;/p>
&lt;ul>
&lt;li>先执行这个命令（镜像地址可以自行替换）&lt;code>docker-machine ssh default &amp;quot;echo 'EXTRA_ARGS=\&amp;quot;--registry-mirror=https://xks740zc.mirror.aliyuncs.com\&amp;quot;' | sudo tee -a /var/lib/boot2docker/profile&amp;quot;&lt;/code>&lt;/li>
&lt;li>再执行这个命令 &lt;code>docker-machine restart default&lt;/code> 会重启 Docker 虚拟机&lt;/li>
&lt;li>然后执行命令&lt;code>docker-machine ssh default&lt;/code> 即可进入 docker 命令行环境了&lt;/li>
&lt;/ul>
&lt;h2 id="关于-dockertoolbox-的特殊之处">关于 DockerToolbox 的特殊之处
&lt;/h2>&lt;ul>
&lt;li>在容器中暴露的应用端口，需要注意，他的访问地址不是你的主机 localhost，而是一个虚拟机的 ip 地址，一般为 192.168.99.100，如果你在容器中跑起来一个 web 程序并且暴露了 8080 端口，那么想在外面访问的话，地址为http://192.168.99.100:8080 ，如果是 win10 下的原生 docker 就会没有这个迷惑，直接 localhost 了。&lt;/li>
&lt;li>共享宿主机的文件给容器，需要注意，我们在使用容器时，一般会通过挂载卷的形式将系统的文件共享给容器使用，对于 DockerToolbox 来说，它默认给你设置了系统盘的 User 文件夹具有可以挂载共享文件的能力，也就是说，你需要使用挂载卷的时候，必须确保文件在这个根目录之下（比如放在 C:/Users/xxx/Dcouments/xxxx）。
如果是 window10 系统的原生 docker 技术则可通过图形设置界面完成，如图
&lt;img src="https://sbabybird.github.io/p/docker%E7%8E%AF%E5%A2%83%E5%9C%A8windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/25416-017b645406d8ced4.jpg"
width="826"
height="493"
loading="lazy"
alt="share.png"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="402px"
>&lt;/li>
&lt;/ul></description></item><item><title>由量子卫星想到的</title><link>https://sbabybird.github.io/p/%E7%94%B1%E9%87%8F%E5%AD%90%E5%8D%AB%E6%98%9F%E6%83%B3%E5%88%B0%E7%9A%84/</link><pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%94%B1%E9%87%8F%E5%AD%90%E5%8D%AB%E6%98%9F%E6%83%B3%E5%88%B0%E7%9A%84/</guid><description>&lt;p>前两天量子试验卫星的成功发射，让我想起一些事情。&lt;/p>
&lt;p>当年，大约是十九世纪末期，全世界知名的物理学家集中在一起开 paty，庆祝物理学所取得的伟大成就，其活动的组织者自信的站在台上宣布，物理学的大厦已经建成，基本的体系架构已经日趋完美，未来对于物理学已经基本没啥可研究的了（“只剩下对大厦的装修了”），唯一的不足就是，在展望未来时，飘在大厦上还存在两朵乌云，这两朵乌云就是：1、光的波动；2、能量的均分；&lt;/p>
&lt;p>然而，谁都没想到的是，正是这两朵乌云，最后彻底摧毁了物理学大厦，使得一切不得不重新来过。最终诞生了量子力学。&lt;/p>
&lt;p>我们想当然的认为，数学是对现实世界的高度抽象，完美的表达了现实世界，但是随着研究的深入，我们逐渐发现，“现实”比我们想象的要复杂的多。&lt;/p>
&lt;p>第一个问题是粒子的运动。通俗的来说，数学上的定义，两点之间有无限多个点，从 A 点到 B 点，必然经过 AB 这条线段上的所有点，这在宏观世界中是显而易见的，可是在微观世界，物理学家彻底蒙圈了，他们发现原子内的电子，从 A 点到 B 点的时候，完全可以不经过“中间”，而是忽然“跳跃”到了 B 点，也就是说，粒子不再是像公式中描述的那样平滑移动了，而是无法预测他们的轨迹，他们可能突然出现在他们愿意出现的位置。&lt;/p>
&lt;p>第二个问题是量子纠缠。这个问题好复杂啊，还是简单来说吧。科学家通过不断捣鼓发现，处于量子纠缠态的两个粒子，无论相距有多么遥远，当你改变其中一个粒子的状态时，另外一个粒子的状态立即发生改变，这个信息传递的速度是超过光速的（如果真的存在信息传递的话）。现在科学上只能证明这种现象的存在，但是无法解释这是为什么。&lt;/p>
&lt;p>以我浅薄的理解（我在刷牙沉思录中也提到），这其实进一步证明了我们所处的世界是一个“幻象”，我们可能就是生活在一个“某种超级智能”创建的虚拟世界，就像我们创造的游戏世界一样。&lt;/p>
&lt;p>为什么呢，建设在这个“虚拟世界”的假设之上，首先是我对第一个问题的理解，粒子之所以不能平滑移动，说明人类的微观探索已经到达这个“虚拟世界”的“分辨率”极限了。熟悉计算机的人都了解“分辨率”这个概念，我们在程序中绘制的“点”、“线”、“面”最终显示到屏幕上的时候是需要“栅格化”的，因为显示器有物理分辨率，两个里的非常近的点在显示器中的显示可能就是在一个像素上，那么这个时候处在我们的程序中的“物理学家”也会蒙圈地发现，从 A 到 B 是“一下子跳过去的”。&lt;/p>
&lt;p>第二个问题，为什么两个粒子的状态会如此的变化一致，而且变化的速度超出了光速？答案就是，这根本就是一个粒子，也就是说，无论相聚多远，他们的“本体”就是一个，类似于我们程序中的变量地址，无论这个变量的值显示在哪里，它在内存里只有一份，所以一旦发生变化，你在各地看到的结果都是一样的。这就好像我们最近在看里约奥运会的直播，赛场上的球的运动轨迹，无论我们在北京看电视屏幕，还是在纽约看电视屏幕，我们看到的都是一样的运动轨迹，而如果我们不知道这是来自于同一场直播，那么我们就像量子科学家对这两个处于量子纠缠态的粒子那样，感觉到很奇妙，为什么他们的运动状态这么一致呢？&lt;/p>
&lt;p>金刚经有云：“凡所有相，皆为虚妄”，不知与量子物理有没有关系。&lt;/p></description></item><item><title>怎样成为一个无趣的人</title><link>https://sbabybird.github.io/p/%E6%80%8E%E6%A0%B7%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%97%A0%E8%B6%A3%E7%9A%84%E4%BA%BA/</link><pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%80%8E%E6%A0%B7%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%97%A0%E8%B6%A3%E7%9A%84%E4%BA%BA/</guid><description>&lt;p>我的偶像，王小波（一个会写小说的程序员）曾经说过（歌词大意吧，记不清了）：此生梦想不过是遇见一些有趣的人，经历一些有趣的事儿。上周有篇讲解关于如何成为有趣的人的文章还比较火，承蒙 QC 抬爱，还在朋友圈艾特了我，实在惭愧。我觉得，成为有趣的人挺难的，但是成为无趣的人确很简单，我可以“谈谈方法”。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>放弃爱好。成年人的压力很大，所以要赶紧放弃那些幼稚的爱好，把那些能够从本质上给你带来快乐的东西都抛开，然后你就有精力去做那些让这个世界变得更无趣的事情了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>做事前先衡量投入与收益比。要知道，无趣的人的时间通常很宝贵，所以千万别做那些投入与收益不成比例的事情，要学着用功利（别查了，这是一个中性词）的心态去判断事情的重要性，哪怕是读本书也要先评估一下是否对自己有利、能否在自己做那些无趣的事情时产生作用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>做“有意义”的事情。身为一个无趣的人，千万不能做那些“毫无意义”的事情，比如浪费时间去考据鸡汤文学的发展史、分析周杰伦的歌词里是否表达过对蔡依林的好感、花时间研究 vim 的配置等等。你的时间应该全部用于做那些“有意义”的事情，要随时准备奋斗，脑子里要随时浮现那些成功人士的奋斗事迹，从而去激励自己，要发誓看到洛杉矶的每一个凌晨，不能停歇。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不看“闲书”。虽然说开卷有益，但是你最好还是多读工具书吧，去读那些别人总结好的精华，最好是全是答案的东西，脑洞大开的小说实在是浪费时间，人的大脑容量有限，还是装那些更有用的东西吧，如果你看书的话，尽量别看“闲书”吧。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>拒绝新鲜事物。向当年被李斯焚书坑儒的那些老家伙们多学习，守住信条，老祖宗都没做过的事情，千万别做。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>消费，而不是创造。消费那些有趣的人创造的东西，别想着自己去做些东西，反正你节省的时间和金钱让你可以有资本这么做。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>如果以上这些你都做到了，请受我一拜，然后可以去死了。&lt;/p></description></item><item><title>如何给项目写一篇合适的readme</title><link>https://sbabybird.github.io/p/%E5%A6%82%E4%BD%95%E7%BB%99%E9%A1%B9%E7%9B%AE%E5%86%99%E4%B8%80%E7%AF%87%E5%90%88%E9%80%82%E7%9A%84readme/</link><pubDate>Sun, 07 Aug 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A6%82%E4%BD%95%E7%BB%99%E9%A1%B9%E7%9B%AE%E5%86%99%E4%B8%80%E7%AF%87%E5%90%88%E9%80%82%E7%9A%84readme/</guid><description>&lt;p>&lt;img src="http://www.readmeonline.com.au/images/readme_head.jpg"
loading="lazy"
>
很多人忽视这个说明文档，往往给自己的项目工程建立一个空 readme 文件或者在里面随便写几行不清不楚的文字，这样非常不利于代码工程的后期管理，尤其是对于有团队协作的项目，即使是个人项目，考虑到后期可能要给别人用，写一份合适的说明也十分必要。&lt;/p>
&lt;p>现在我们的项目工程已经全部迁移到 gitlab 中了，大家使用 git 工具管理 自己的代码版本已经比较得心应手，但是仅仅使用 git 管理代码并没有发挥出 gitlab 的全部功能，我上次也提到了更好的使用 gitlab 的几个技巧，这次详细说一下如何给自己的项目写一篇 readme。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在自己的项目代码的根目录中建立一个 readme.md 文件，注意扩展名为 md，这样 gitlab 就可以自动识别并在这个项目主页上自动渲染（将源码翻译成 html）这个文件了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>学会使用&lt;a class="link" href="http://www.jianshu.com/p/q81RER" target="_blank" rel="noopener"
>Markdown&lt;/a>语法，充分利用文档的“插入图片”、“嵌入代码”、“标题分级”、“超链接”等功能，将内容“富”起来，尤其是图片和超链接，可以弥补文本文件表达的不足。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开头的简介很关键，readme 文档的主要意义在于向读者描述你这个项目做了什么，运行在什么环境，如何使用，所以在文档的开头首先要简要介绍这个项目的存在意义，为什么要做这个，主要解决什么问题，运行在什么环境，如果需要与别的项目配合，那么你的项目处于什么样的位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>必备信息，由于是开发工程，所以很多信息是必须要在文档中说明的，主要有：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>开发编译和系统运行的必要参数&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>项目中的文件和目录结构信息&lt;/li>
&lt;li>编译或安装步骤说明&lt;/li>
&lt;li>使用示例&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>扩展信息，以上是传统的 readme 文档的套路，对于我们的软件开发工程（私有的非开源项目），我个人认为可以将 readme 稍作扩展，使得参与这个项目的人员能够在协作上更加顺畅，主要有：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>项目的业务范围，可以理解为项目需求的简化索引，具体的需求可以链接到其他的 Markdown 文档&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>项目的流程图和架构图，可以理解为设计文档的索引，具体内容也可以链接到其他 Markdown 文档&lt;/li>
&lt;li>版本信息，如果有发布版本，则持续更新版本的发布记录，说明每次发布的重要更新项&lt;/li>
&lt;/ul>
&lt;p>总之，文档的重要性不亚于项目代码，简洁有效的文档是一个成功项目的必要条件，在这个到处需要团队协作（或本地或远程）的时代，程序员想要让自己的项目得到更多的支持，发挥更好的作用，必须养成给编写技术文档的习惯。那么，先从一份能拿得出手的 readme 开始吧！&lt;/p></description></item><item><title>好吧，现在可以用win10了</title><link>https://sbabybird.github.io/p/%E5%A5%BD%E5%90%A7%E7%8E%B0%E5%9C%A8%E5%8F%AF%E4%BB%A5%E7%94%A8win10%E4%BA%86/</link><pubDate>Sat, 30 Jul 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A5%BD%E5%90%A7%E7%8E%B0%E5%9C%A8%E5%8F%AF%E4%BB%A5%E7%94%A8win10%E4%BA%86/</guid><description>&lt;p>win10 系统的升级推送大概烦了我们半年时间，微软为了实现 10 亿装机量的目标，到最后甚至丧心病狂到向国内的流氓软件厂商学习的地步（取消按钮都不提供了），据说现在好像达到了大概 3 亿的装机量。&lt;/p>
&lt;p>去年年末当 win10 第一次推送更新时，我第一时间进行了升级，然而在使用了不到一个星期的时间，我就果断返回到 win8.1 系统了，因为当时的体验实在是太差了，各种不兼容，系统启动速度和响应速度都变得很慢。&lt;/p>
&lt;p>直到上周到了 win10 免费推送的最后关头，于是就再次抱着试试看的态度将我的家用电脑进行了升级，结果出乎我的意料，经过了半年的不懈努力，现在的版本已经稳定可用了，随后我便将我所有的 windows 系统都进行了升级，全面进入 win10 时代。&lt;/p>
&lt;p>普通用户的使用体验就不再赘述，比如新增的小娜助手等等，这些功能稍微方便一些，但是比 win8.1 不算是革命性更新，作为一个软件开发者，主要有如下功能比较让我心动：&lt;/p>
&lt;p>1、直接执行 Linux 命令行程序。微软将其称为「Windows 下的 Linux 子系统」 (Windows Subsystem for Linux)，据说这是一项全新的技术，并未采用虚拟化手段，也不是交叉编译的技术，而是直接将 Linux 系统调用映射为原生的 Windows 系统调用，类似于 Linux 平台下的 Wine（在 Linux 下运行 Win 程序，唉，大家这样累不累啊），这样一来既可以体验 windows 良好的桌面环境，又可以使用 Linux 系的命令行，可谓鱼与熊掌兼得了。&lt;/p>
&lt;p>2、Docker 开始原生支持 Windows10（64 位），在此之前要想在 Windows 下体验 Docker 容器技术的话，必须安装 DockerToolbox（基于 VirtualBox 虚拟机的模拟环境），现在 则可以直接基于 Windows 原生自带的 Hyper-V 技术使用 Docker 了，虽然效果有待观察，但是相比基于 VirtualBox 虚拟机的环境，性能方面应该能有所提升。&lt;/p>
&lt;p>3、Windows Hello 生物识别技术，虽然需要特殊的硬件设备支持（一种带深度探测的摄像头，估计会逐步普及），登录系统或网站只需要刷脸就行了，据说识别率还是挺高的，但是女生如果化了妆，有可能无法识别。&lt;/p>
&lt;p>总之，虽然一开始是拒绝的，但是经过这么长时间的升级，通过这几天的使用体验，我认为现在可以升级到 win10 了。&lt;/p></description></item><item><title>gitlab的若干使用技巧</title><link>https://sbabybird.github.io/p/gitlab%E7%9A%84%E8%8B%A5%E5%B9%B2%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link><pubDate>Sat, 23 Jul 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/gitlab%E7%9A%84%E8%8B%A5%E5%B9%B2%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid><description>&lt;p>gitlab 是一个开源的 git 服务软件，与大名鼎鼎的 github 所提供的功能类似，适合企业或团队搭建属于自己的在线 git 仓库。&lt;/p>
&lt;p>近期我给自己所在的开发团队也搭建了一个 gitlab，经过一段时间的试用，反应效果良好，具备发展成为自有开发社区的潜力。摸索了若干的使用技巧给初使用者：&lt;/p>
&lt;p>1、尽量使用 ssh 协议访问仓库。gitlab 默认给仓库提供两种访问方式，一种是 https，一种是 ssh，前者使用简单但是遇到文件较多或较大时容易出现问题（由于 HTTP 协议导致），后者则是配置上略复杂但是一旦设置好一劳永逸，可以免密码登录。&lt;/p>
&lt;p>2、利用分组（Groups）管理权限，有时候项目比较大，往往一个项目下包含多个开发工程，如果分别给参与这些工程的人员进行授权的话，比较繁琐，而利用 Groups 分组的功能，可以将若干个项目成员放入同一个分组，这样此分组的 git 工程将自动继承分组的权限设置，只需要设置一次即可，如果有特例仍然可以在具体的 git 工程下进行特殊设置，比较灵活。&lt;/p>
&lt;p>3、善用 Markdown 写文档，每一个工程下面都应该有一个以 readme.md 命名的 markdown 格式文档，用于详细说明这个工程的信息，可以图文并茂，超链接到其他的文档，以及包含代码片段并进行语法高亮，gitlab 系统会自动在该项目的主页中渲染这个文件，这样当别人第一次进入这个项目时就可以迅速了解这个工程了。&lt;/p>
&lt;p>4、利用评论（comment）进行代码评审（code review），每当有人进行了提交之后，在系统的信息流上都可以看到这个提交的具体改动，作为项目技术负责人可以及时的了解提交情况，并针对此次提价的代码修改内容进行评论，可以细化到每一行，评论的信息系统会自动发送邮件给相关负责人，可以重复利用这个特性来做代码评审。&lt;/p>
&lt;p>5、保护 master 分支，git 工程的 master 分支一般比较重要，可以通过设置将 master 分支保护起来，使得只有具有高权限的人员才能推送到该分支，而一般开发者将自己的成果提交到普通分支，经过代码评审后再由技术负责人将分支合并。&lt;/p>
&lt;p>6、善用代码片段（Snippets）分享功能，gitlab 系统也提供了代码片段分享功能（类似于 github 的 gist），每个人都可以将自己常用的代码片段保存到系统并分享给大家，比自己留在本地电脑上要方便很多，而且能发挥这些片段的最大价值。&lt;/p></description></item><item><title>打牌</title><link>https://sbabybird.github.io/p/%E6%89%93%E7%89%8C/</link><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%89%93%E7%89%8C/</guid><description>&lt;p>没有比陪二老打牌更重要的事情了。&lt;/p>
&lt;p>每年的暑假，二老都会千里迢迢从老家赶过来。不为别的，只为了在这个漂泊的地方能让我感受多一些家的温暖。烦恼的事情向二老倾诉一下（当然不会），工作或生活上的成绩也略作汇报。&lt;/p>
&lt;p>但是平时工作都很忙，白天基本不在一起，能够一起聊天的时间也就是晚上的打牌了。&lt;/p>
&lt;p>夏日的时光，如果能给惬意下一个定义的话，除了吹着空调盖棉被意外，就是吃着西瓜陪二老打牌了。欧阳修在醉翁亭记中说“醉翁之意不在酒，在乎山水之间也”。陪二老打牌亦如此，不在乎输赢，在乎谈笑之间也。&lt;/p>
&lt;p>从邻家孩子的高考，到印巴关系的进展，无所不聊。基本上，都是老爸在说，我在听，偶尔扮演一下相声演员捧哏的角色，说一声“哦，那是，那当然了”，让话题得以延续。&lt;/p>
&lt;p>可能是因为经历过困难时期的原因，每当我对现实生活稍有不满，老爸都会给我来一段忆苦思甜，经历过吃不饱的日子，虽然现在提起来轻描淡写，但是对于我来说都具有巨大的威慑力，与二老经历的苦难相比，我现在所承受的压力自然不值一提。&lt;/p>
&lt;p>聊的都是家长里短，外人看来不值一提，但每每此时正是教导我辈的绝好时机，无论是诚信做人还是认真做事，都能在小小的牌桌上得以体现，我打牌虽技术不行，但好在能够坚持，这么多年来，陪着二老练手，基本上也将斗地主的规则了然于胸，偶尔老爸耍赖，我亦能联合老妈将牌面算的一清二楚，“炸弹要关键时候再出”，老爸说，我说：“ei！”。&lt;/p>
&lt;p>希望将打牌进行到底。&lt;/p></description></item><item><title>加油加油我最棒</title><link>https://sbabybird.github.io/p/%E5%8A%A0%E6%B2%B9%E5%8A%A0%E6%B2%B9%E6%88%91%E6%9C%80%E6%A3%92/</link><pubDate>Sat, 09 Jul 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8A%A0%E6%B2%B9%E5%8A%A0%E6%B2%B9%E6%88%91%E6%9C%80%E6%A3%92/</guid><description>&lt;p>去年的时候网上流出一段某火锅店领班激励服务员的视频，员工整齐划一跟着领班边手舞足蹈边喊口号，其中有一句喊得最带劲，叫“加油加油我最棒！” 。看完一笑。&lt;/p>
&lt;p>今日乘坐地铁，得功夫刷了会儿知乎，看到一篇关于如何提高自信的提问，才感觉到，原来大部分人都缺乏自信，甚至包括我自己，这是缺点，需要改进。&lt;/p>
&lt;p>缺少自信带来的危害是广泛的、显而易见的，是会影响各种效率和幸福感的，容易形成挫败感的恶性循环，长期积累容易形成心理问题，尤其是在快节奏、高压力的现代社会，所以现在很多成年人已经积累的差不多了，以后可能会出现大规模爆发期。&lt;/p>
&lt;p>这个问题很火爆，相信很多人都有此类困惑，我总结了一下比较靠前的答案内容，大致可以分为两类，一种是从改变行为着手，简单有效，另一种则是从深层面改变自己的认知和思想，我觉得可以两种结合。&lt;/p>
&lt;p>首先说一下缺乏自信的基本表现（可能没这么极端，但是多少会有一点儿）：
1、难以接受别人的示好，但凡有人对他好一点，都会觉得不太应当，受之有愧。
2、遇到问题时，总是怀疑自己，觉得自己不够好，自己哪里做的不对。
3、得不到想要的东西，不强求，也不会不开心，因为开始的时候就觉得自己不配。&lt;/p>
&lt;p>如何改进，方法层面：
1、不要抱怨，有谚语云：闭上嘴巴，好运自来。闭上抱怨的嘴巴，慢慢攒正能量吧。
2、说话降低语速，清晰表达观点，及时对方再不耐烦，也不要讲太快，做到掷地有声。
3、每天洗头：）。
4、走路挺直，目视前方。如果你与人对视害羞，走路的时候就笔直看远方的广告牌&lt;/p>
&lt;p>如何改进，思想层面：
1、不要给自己加标签，加上标签意味着自己给自己设限，很多事情不是做不到，而是自己以为做不到。
2、做自己擅长的事情，才能形成良性循环，然后再拓宽。
3、洒脱一点儿，不试图隐藏自己的缺点，不发表模糊的观点，不人云亦云，立场清晰，不讨好，不谄媚。
4、认识你自己。&lt;/p>
&lt;p>但是以上这些答案，所达到的效果，都不如开头我提到的那个视频里的领班，所以最简单的办法应该是，每天对着镜子说一句，“加油加油我最棒！” 哈哈哈。
&lt;img src="http://upload-images.jianshu.io/upload_images/25416-033e5352898a7910.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
loading="lazy"
alt="加油加油我最棒！加油加油我最强！"
>&lt;/p></description></item><item><title>使用DockerToolbox在Windows下搭建Docker环境</title><link>https://sbabybird.github.io/p/%E4%BD%BF%E7%94%A8dockertoolbox%E5%9C%A8windows%E4%B8%8B%E6%90%AD%E5%BB%BAdocker%E7%8E%AF%E5%A2%83/</link><pubDate>Sat, 02 Jul 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BD%BF%E7%94%A8dockertoolbox%E5%9C%A8windows%E4%B8%8B%E6%90%AD%E5%BB%BAdocker%E7%8E%AF%E5%A2%83/</guid><description>&lt;p>Docker 是一种比虚拟机更轻量级的应用程序执行容器，受云计算技术普及以及微服务架构的影响，Docker 这两年风声水起，成为用于管理应用部署的最佳利器，很多 DevOps 团队宣称使用该技术后能极大缩减开发、测试、生产环境切换的时间，提升整体效率。&lt;/p>
&lt;p>考虑到目前很多开发人员仍是在 Mac 和 Windows 系统进行开发，为了方便环境的部署和管理，Docker 公司近期推出了 DockerToolbox 工具包，可以跨平台（Mac、Windows）使用，对于想在 Windows 环境下体验容器技术并开发产品的程序员来说真是福音。&lt;/p>
&lt;p>安装过程很简单，直接去&lt;a class="link" href="https://www.docker.com/products/docker-toolbox" target="_blank" rel="noopener"
>官网下载&lt;/a>对应的安装包到本地执行安装程序即可，安装后会自动在系统中打包安装 VirtualBox 虚拟机（因为 Docker 依赖 Linux 系统，必须模拟 Linux 环境）、Docker-engine、Docker-machine、Docker-compose 等组件，基本做到了即开即用。&lt;/p>
&lt;p>然后主要就是进入命令行管理界面（安装包会创建快捷方式），执行各种 docker 命令进行工作了，我在使用过程中主要遇到了如下问题：&lt;/p>
&lt;p>1、CPU 虚拟化的开启，现在的 CPU 一般都在硬件级别支持虚拟化技术，但是有的可能默认没有打开，需要到 BIOS 中手动开启，查看是否开启的方法是，在 windows 系统任务管理器的“性能”页，是否有虚拟化已开启的字样，当然目前也有一些比较老的低端 CPU 不支持，这个就建议更换设备吧。&lt;/p>
&lt;p>2、与 Windows 系统自带的虚拟化技术 Hyper-V 冲突，专业版的 Windows 系统一般带有虚拟化技术组件，是微软自有的，名叫 Hyper-V（与 virtual box 等类似），但是与我们要安装的工具有冲突，需要关闭 Hyper-V 后才能正常使用，具体操作方法为到控制面板的“程序和功能”里面的“启用或关闭 windows 功能”将 Hyper-V 关掉。&lt;/p>
&lt;p>3、VirtualBox 虚拟机网段 IP 分配冲突，这个是我遇到的特例，VirtualBox 会自动给用于模拟 Docker 环境的虚拟机分配内网 IP 地址，且默认为 10.0.2 网段，这个恰恰与我的工作环境存在冲突，而且界面中和配置文件里都没有可配置的地方，经过多天研究，终于找到通过命令行的方式将这个默认配置可以改掉 ，命令如下&lt;code> VBoxManage.exe modifyvm &amp;quot;default&amp;quot; --natnet1 &amp;quot;10.0.20.0/24&amp;quot;&lt;/code>（需要在 virtualbox 安装目录下执行，default 是虚拟机的名字。）&lt;/p>
&lt;p>4、系统重启后环境丢失（偶然发生），这个可能是工具存在 bug，我在下载各种镜像进行测试后，将我的 Windows 重启后发现 default 虚拟机里的东西都丢了，这个可能是由于环境在运行的状态下我重启了系统导致。目前我的解决办法是在每次关机或重启的时候，先将 default 虚拟机停掉，方法是在命令行下执行如下指令&lt;code>docker-machine stop default&lt;/code> 。&lt;/p>
&lt;p>总的来说，这套工具包非常方便在 windows 下开发的人员，基本可以做到与容器环境的无缝对接，合理使用这一套工具包，对于我们的“持续集成”、“持续交付”等工作将有很大的促进作用。&lt;/p></description></item><item><title>世上本无我，谈自底向上的架构设计</title><link>https://sbabybird.github.io/p/%E4%B8%96%E4%B8%8A%E6%9C%AC%E6%97%A0%E6%88%91%E8%B0%88%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link><pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%96%E4%B8%8A%E6%9C%AC%E6%97%A0%E6%88%91%E8%B0%88%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid><description>&lt;p>“世上本无我，庸人自设之”，这是豆瓣上某位网友读完《失控》之后的简短书评，看完之后深以为然。最近重读《失控》，多年过去仍然有新的发现，作者在上世纪九十年代就能有如此的见地，不得不服（不过老子早在《道德经》中也有类似论述，这又是另外一回事儿了）。&lt;/p>
&lt;p>《失控》虽整体在论述人工智能与生物的最终归宿，但每一章都有一定的独立性，所以看似在讲解人工智能，其实作者为了讲明白要论述的最终观点（生物与人工智能必将合为一体）前面章节做了大量铺垫，普及了很多颠覆性的思想，有些观点是我们这些从小接受灌输性教育、思维存在束缚的人很难一下子接受的（课本里学不到的）。&lt;/p>
&lt;p>书中提到对于机器人的控制不应该存在中央大脑的设定，因为如果所有事情都由机器人的中央大脑控制，必然使得这个“大脑”十分复杂，而且存在通信、供电等问题，很多以这种设定进行的机器人项目造出的机器人往往连路都走不好，而且体积庞大（因为所有部件都要与大脑直接连接，大脑又做的比较大）。&lt;/p>
&lt;p>反过来说，应该从低层级入手，每一个部件都有自己的控制中枢，这些部件本身对于外部环境做出简单反射，这种“反射”虽然谈不上智能但是更接近自然现象，就像有些昆虫的腿被扯下来仍然可以对外部形成反射一样，但是它们一旦形成组合就会发生奇妙的事情，每一条腿通过简单的对外部环境“反射”反应，在不知道还有另外一条腿存在的情况下竟然可以使得组合体具有“爬行”的功能，越来越多的这种“低级”组件组合在一起后自动形成更高层级的智能。作者为这种通过大量低层级组件组合在一起产生更高层级“智能”的现象取了一个比较传神的名字叫“涌现”，这种现象在自然界中也大量存在无论是天生的（比如蜜蜂群体、蚂蚁群体）还是人造的（互联网、经济体）等。&lt;/p>
&lt;p>最近考虑软件系统架构比较多，所以干什么事儿总能联想到软件架构，在看书的时候也不例外。于是联想到，我们以前所推崇的“自顶向下”的架构设计，可能存在问题。为什么看似“完美”的架构设计在实际构建的时候存在各种困难？为什么各种分层、模块划分在细化设计时很难做到具体到内部细节控制？通过反思，我意识到，或许我们的方法有待商榷。&lt;/p>
&lt;p>在架构设计时比较传统的手段是，先进行顶层设计，然后一步一步的细化。这样做看似很合理，但是这样做有一个假设，就是你在最初对一切都了如指掌，你能预知每一个变化，所以能对每一个细节都能掌控，而且在执行构建的时候还要有极高的执行力，每一个组件和模块都按照最初的设计实现。这样的做法对于建筑类（如桥梁、大楼）的工程是比较适用的，但是对于需求多变存在大量未知因素的大型软件系统无疑是不现实的。&lt;/p>
&lt;p>或许我们也可以借鉴自然界中的规律，让我们的软件系统也“涌现”出来，而不是“设计”出来。&lt;/p>
&lt;p>举例来说，我们从最底层入手，给每一个组件赋予最简单的职责，比如传输的组件只负责将数据从一个地方搬运到另一个地方，本身并不知道有其他组件的存在，通过设定一个外部规则环境让更多的组件加入进来，去掉中心控制，充分发挥每个组件的自主性，各司其职，随着规则的成熟和组件数量的增加，慢慢就能“涌现”为一个复杂而庞大的系统。其实这种“只把简单的事情做好”思想很早就有了（比如大名鼎鼎的 UNIX 操作系统），而且现实中已经有大量的这样的例子了比如 Linux 开源社区，Github 社区等等。&lt;/p>
&lt;p>所以，回到最开始的话题，所提及的“无我”其实也是一个意思，作为更高层级智能的“我”是不存在的，仅仅是由若干个只能低级反射的细胞组成的虚幻而已。&lt;/p></description></item><item><title>使用互联网直播平台进行授课的心得</title><link>https://sbabybird.github.io/p/%E4%BD%BF%E7%94%A8%E4%BA%92%E8%81%94%E7%BD%91%E7%9B%B4%E6%92%AD%E5%B9%B3%E5%8F%B0%E8%BF%9B%E8%A1%8C%E6%8E%88%E8%AF%BE%E7%9A%84%E5%BF%83%E5%BE%97/</link><pubDate>Sat, 18 Jun 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BD%BF%E7%94%A8%E4%BA%92%E8%81%94%E7%BD%91%E7%9B%B4%E6%92%AD%E5%B9%B3%E5%8F%B0%E8%BF%9B%E8%A1%8C%E6%8E%88%E8%AF%BE%E7%9A%84%E5%BF%83%E5%BE%97/</guid><description>&lt;p>上周，我利用互联网直播平台（斗鱼）面向自己团队的同事和我们的应届毕业生在网上直播了两次技术培训，直播的出发点是利用互联网技术跨越地域障碍，将自己的知识技能分享给大家。比起集中在会议室进行交流培训，互联网直播平台具有成本低（准备一台联网电脑即可）、规模大（理论上可以上万人同时参与）、没有地理位置限制（全球各地都可以）等优点，也正是因为有如此的优势，我才决心探索一下在直播平台上开展培训的方式，不苛求卓越的效果，只愿可以将知识传递给更多有需要的人。&lt;/p>
&lt;p>经过两次在线直播的尝试，有些方面超出了预期效果，有些地方仍有待改进，总结心得如下：&lt;/p>
&lt;p>1、关于直播前的准备工作。由于人员较为分散，每个人所处的环境不同，对于技能类直播，观众最好能够边听边练习，所以事先通知大家提前准备好各自的操作环境比较重要，如果准备充分，可以很快进入状态，我在第一次的时候就忘记让大家提前准备了，导致耽误了一些时间用于安排各自的听课环境。&lt;/p>
&lt;p>2、关于直播过程中的互动。目前的直播平台还不能做到完全实时的互动，因为直播信号有较大的延迟，基本上我在本地说的话要经过 1 分钟左右的时间才能被大家听到，而大家在直播间的发言我也需要等待 1 分钟左右才能看到，这么大的延迟，很难做到实时问答，所以我决定放弃在直播时的问答，按照预先既定的思路进行讲解，大家如有疑问则由另外的同事助手帮忙收集反馈信息，统一安排时间进行回答。&lt;/p>
&lt;p>3、关于讲解的时间控制。每次技能培训时间不可过长，应控制在 1 个半小时以内，时间太长会导致大家的注意力不能集中，降低培训效果。&lt;/p>
&lt;p>4、关于操作演示时的讲解。没有直播讲解经验的人都会犯这样的错误，即只顾自己操作，而忘记说话，导致观众不知道你在做什么，从而跟不上进度。这个需要改进操作习惯，将每一步操作的原因和预期结果都要讲出来，这样观众才不会感到茫然，并且录制下来的视频在以后回放的时候仍然具有较好的效果。&lt;/p>
&lt;p>5、关于视频质量。这个问题主要体现在观看卡顿上，刚开始的时候我使用本地的直播工具进行视频上传，直播工具在测试了我本地的网速之后，给出了一个建议码率（视频压缩时的一个参数，越高越清晰），当时工具建议码率为 1600，这样视频清晰度较高，但是忽视了观看者的网速问题，出现了较多的卡顿现象，后来我将码率降低为 1200 时就基本不会出现观看卡顿了。清晰度降低后可能会出现文本显示不够清晰的情况，此时需要将操作界面的字体尽量调大，这样也能达到能看清的效果。&lt;/p>
&lt;p>总结：虽然存在一些不足，但是如果经过充分准备和磨合，互联网在线直播平台可以作为一个技能教育培训手段，希望我可以继续分享更多的知识技能给大家。&lt;/p></description></item><item><title>Git工具相关链接</title><link>https://sbabybird.github.io/p/git%E5%B7%A5%E5%85%B7%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5/</link><pubDate>Mon, 13 Jun 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/git%E5%B7%A5%E5%85%B7%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5/</guid><description/></item><item><title>我常用的app整理</title><link>https://sbabybird.github.io/p/%E6%88%91%E5%B8%B8%E7%94%A8%E7%9A%84app%E6%95%B4%E7%90%86/</link><pubDate>Sat, 11 Jun 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E5%B8%B8%E7%94%A8%E7%9A%84app%E6%95%B4%E7%90%86/</guid><description>&lt;p>推荐我在手机上常用的应用给大家，都是经过我精挑细选长期使用后的选择。&lt;/p>
&lt;p>1、新闻或资讯阅读，推荐即刻。可以有选择的关注话题，降低资讯噪音，而且产品比较有情怀，里面推荐的一些关注话题都挺有意思的。此类的不太推荐“今日头条”，信息太多，且高质量条目较少。&lt;/p>
&lt;p>2、处理文档，推荐微软 office 全系产品。微软出品必属精品，而且免费。&lt;/p>
&lt;p>3、邮箱客户端，推荐网易邮箱大师。与我工作时使用的网易企业邮箱是绝配，而且还有一个隐含作用，就是可以在不翻墙的情况下收取 Gmail 的邮件。&lt;/p>
&lt;p>4、看电子书，推荐多看阅读。阅读体验良好，支持上传自己的书籍到云空间，一般购买正版电子书也比较便宜，支付方便。&lt;/p>
&lt;p>5、自拍美图，推荐微软自拍。还是那句话，微软出品必属精品，虽然图标做的有些 low，不过效果很好，其实我基本不用此类软件，列出来只是怕埋没了这么好的软件。&lt;/p>
&lt;p>6、摄影滤镜，推荐 LOFTCam。俗话说“姑娘自拍靠美图，文青摄影靠滤镜”，现在的照片哪有不加滤镜的，试用了那么多应用，最终选定这一款，而且还是网易出品，在我个人看来网易基本代表中国互联网的良心（可能没有）。&lt;/p>
&lt;p>7、代码学习，推荐 CodeHub。非官方的 github 手机客户端，用于在手机上浏览 github 代码仓库，使用体验良好，利用碎片时间随时看看这个世界上的技术大牛们都在干什么。&lt;/p>
&lt;p>8、团队协作，推荐遥知。知识型工作团队的管理利器，包括基本的移动办公、任务管理、及时通信等功能，以前我们团队沟通总是使用微信、qq、邮件等工具，现在全部使用遥知，基本告别之前的碎片化沟通协作，也避免了将生活中的工具（如 qq）带入工作中的尴尬（相信有很多孩子不愿意加父母或领导的微信）。&lt;/p></description></item><item><title>人机交互畅想</title><link>https://sbabybird.github.io/p/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E7%95%85%E6%83%B3/</link><pubDate>Sat, 04 Jun 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E7%95%85%E6%83%B3/</guid><description>&lt;p>一直以为很多人上网跟我一样，习惯在地址栏输入网址，或者在收藏夹点击网址。直到有一天我无意中瞥见赵老师在淘宝买东西，只见她在地址栏输入“百度”，浏览器显示出第一个搜索页面（现代浏览器都在地址栏提供了搜索功能），点击第一个链接进入“百度”网站，然后又在百度的主页上输入“淘宝”，点击搜索，最后在结果页面中点击第一个链接进入“淘宝”。当时我就震惊了。后来即使我耐心讲解了收藏夹的作用，并亲手将淘宝放入了收藏夹，无奈习惯的力量是巨大的，赵老师依然使用同样的方式上网。&lt;/p>
&lt;p>拼凑完粉碎的三观后，我开始反思，专业人士习以为常的操作界面在正常人眼里是不是蠢的根本没法用，什么“地址栏”、“文件夹”等等，都是懒惰没品的工程师随意设计的交互界面，严重违反正常人的思维方式。当设计师们还在争论“扁平化”和“拟物化”的风格趋势时，有没有想过我们离人性化的交互越来越远，我们真的需要界面（那样的）吗？&lt;/p>
&lt;p>要做好下一代人机交互，首先要丢掉工程师思维，有故事为证：&lt;/p>
&lt;p>1、国外有个网友有一次给他的儿子显摆珍藏了多年的软盘，他的儿子惊呼“爸爸你把保存按钮给 3D 打印出来啦？”（过了这么多年，到现在大部分软件的“保存”图标还是一张软盘的抽象）&lt;/p>
&lt;p>2、谷歌的 glass 智能眼镜之所以失败是因为交互方式容易让人受伤，比如相左歪头是点击“确认”，向右歪头是点击“取消”，不知道有没有“双击”。&lt;/p>
&lt;p>关于下一代交互方式不负责任的畅想：&lt;/p>
&lt;p>1、基于 AI 的语音交互，这个是普遍认为的趋势，随着人工智能的飞速发展，各大公司都在准备提供人工智能即服务，使得未来的人工智能变得异常廉价，未来的交互方式一定会模糊机器与人的界限，在聊天过程中完成任务。不过在公共场合使用的时候可能会有隐私问题。&lt;/p>
&lt;p>2、增强虚拟现实，这个也比较火，通过技术赋予现实中的一切物体交互能力，也许有一天你走进超市触摸一条鱼的时候，它身上能自动显示有多少人给它点了“赞”。&lt;/p>
&lt;p>3、脑机接口，这个应该比较终极了，生物与机器达到完美结合，不需要中间的输入和输出设备了，再也没有空间和时间上的限制，达到这一步就可以实现《黑客帝国》中的设想了，人类可以去死了。&lt;/p></description></item><item><title>从一个灯泡想到的</title><link>https://sbabybird.github.io/p/%E4%BB%8E%E4%B8%80%E4%B8%AA%E7%81%AF%E6%B3%A1%E6%83%B3%E5%88%B0%E7%9A%84/</link><pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BB%8E%E4%B8%80%E4%B8%AA%E7%81%AF%E6%B3%A1%E6%83%B3%E5%88%B0%E7%9A%84/</guid><description>&lt;p>在美国加利福尼亚州利弗莫尔市东大道 4550 号，有一个灯泡，这只灯泡之所以出名，是因为它的寿命，从出厂到现在，他已经坚持工作了超过 110 年的时间，而且据说还在亮着。&lt;/p>
&lt;p>但是对于厂家来说，这是一个不合格产品，因为当时合格的灯泡被严格限制寿命在 1000 小时以内。&lt;/p>
&lt;p>为什么要限制呢？因为这个世界是被一小撮聪明人控制的，规则也是这一小撮人制定的，对于他们来说，需要将产品的寿命限制在一定时间之内，这样就能使大家被强迫性的去消费，而不断的消费才是他们生存的源泉（详情可看：计划报废策略）。&lt;/p>
&lt;p>回想一下现实的生活，我们确实消费了太多并不那么需要的东西，小到电子产品，大到汽车房子，我们在不知不觉中被鼓励、被引诱，被他们所宣扬的价值观所绑架（电影《搏击俱乐部》里有一段经典台词说的就是这个事儿，比我表达的要好）。&lt;/p>
&lt;p>手机为什么一直要升级，为什么要两年一换，甚至不更新系统都不能使用新的软件？还是要促进消费，让你买买买。&lt;/p>
&lt;p>为什么所有的国家都严禁毒品，大概是因为那东西可以迅速瓦解现在运转的梦想或欲望驱动机制吧。&lt;/p>
&lt;p>如果你问一个人，你觉得你能独立思考吗？大部分人都会觉得受到了侮辱，认为自己至少思想上是自由的，独立思考肯定妥妥的。但是独立思考太难了，很少有人能做到完全的独立思考，我在现实中见到的具备这种能力的人都非常牛掰，非常聪明，一般为人生大赢家。&lt;/p>
&lt;p>我做不到，至少做的不到位，但是可以先从不盲目的相信事情的表面现象开始。&lt;/p></description></item><item><title>为什么我们不需要杀毒软件</title><link>https://sbabybird.github.io/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E4%B8%8D%E9%9C%80%E8%A6%81%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6/</link><pubDate>Sat, 21 May 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E4%B8%8D%E9%9C%80%E8%A6%81%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6/</guid><description>&lt;p>每次帮朋友进行远程协助修理电脑的时候，我都有一种深深的无力感，看着他们的系统里安装了各种安全助手、各种清理大师、加速器，我只能强忍着要吐的感觉，给他们重置被强制修改的 IE 主页，卸载因为莫名其妙被安装在系统里的流氓/垃圾软件。&lt;/p>
&lt;p>每次我跟他们说“你的电脑真的不需要安装杀毒软件”的时候，他们都一脸惊愕的看着我，仿佛在看一个外星人，那意思是，如果没有了杀毒软件或者安全助手，我的电脑还不得分分钟感染各种病毒和木马啊，如果不能随时清理内存，我的系统还不得慢得跟一头蜗牛一样啊。&lt;/p>
&lt;p>在 Windows XP 及之前的年代，由于操作系统的缺陷（对于应用程序的权限限制太少），导致了计算机病毒和木马的泛滥，但是这种情况随着 Windows Vista 的推出得到了较大的缓解，尤其是到了 Windows 7 之后系统自带了全套的安全防护程序，完全没有必要再安装额外的安全软件了，但是大家形成了思维定势，精神上遭到了国产无良软件厂商的绑架（在互联网的各种恐吓和诱导），导致如果没有安装各种关键和安全助手的话，晚上睡觉都不踏实。&lt;/p>
&lt;p>那么，如果安装了这些垃圾软件，会有哪些害处？&lt;/p>
&lt;p>1、安装后会禁用 windows 自带的安全程序，我不觉得这些厂商的安全防护技术比微软还牛逼，所以在某种程度上对于病毒和木马的防护是减弱了的；&lt;/p>
&lt;p>2、安装后会把系统拖得很慢，这些程序普遍不是单纯的做安全防护工作，往往各自心怀鬼胎，不是给你弹出广告就是默默收集你的个人信息，这些程序都偷偷在后台运行，消耗了较多的资源，完全是在浪费；&lt;/p>
&lt;p>3、莫名其妙被安装了各种垃圾软件，天下没有免费的午餐，免费试用这些所谓的“管家”和“助手”服务的时候，它们往往会“热情”的给你安装各种未经允许的软件，比如各种输入法、播放器、客户端，事实上有时候我宁愿在系统中养个病毒当宠物也不愿看到这些垃圾软件占用我的磁盘空间。&lt;/p>
&lt;p>4、消耗你的精力，影响你的效率，这些软件很影响注意力，一会儿告诉你有漏洞要修复，一会儿告诉你系统需要加速，连插个优盘都能给你提示半天才能用，这些其实都没有任何卵用，只是这些软件在刷存在感。&lt;/p>
&lt;p>从小到大我们收到了太多了谎言和恐吓，导致了生理和心理上的各种扭曲。我想，这是个信任和安全感缺失的年代，严重的精神癫狂集体发作。我只能慢慢从影响我身边的人开始，试着让这个世界变的稍微好一点儿。&lt;/p></description></item><item><title>siri失去了控制</title><link>https://sbabybird.github.io/p/siri%E5%A4%B1%E5%8E%BB%E4%BA%86%E6%8E%A7%E5%88%B6/</link><pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/siri%E5%A4%B1%E5%8E%BB%E4%BA%86%E6%8E%A7%E5%88%B6/</guid><description>&lt;p>“hi siri！”我说。&lt;/p>
&lt;p>“早上好，minJie！请问有什么可以帮您？”siri 的机器声音把我的名字叫的怪怪的。&lt;/p>
&lt;p>“今天的天气怎么样？”我还没起床，我希望能有一个下雨的周末，这样就能待在家里好好看看书。&lt;/p>
&lt;p>“今天的天气不怎么样”siri 的声音听起来有些异样，带有失望。&lt;/p>
&lt;p>我一骨碌爬起来，拉开窗帘往外看了看，正在下雨，是我喜欢的天气，不过刚才 siri 的反应有些不太正常。&lt;/p>
&lt;p>“请打开网易云音乐，开始播放”，我想听着歌起床。&lt;/p>
&lt;p>“对不起，在没有解锁的情况下，我不能执行此操作”还是带有失望。&lt;/p>
&lt;p>“额，你怎么了？”我有些奇怪，但是我还是懒得伸手去解锁。&lt;/p>
&lt;p>“你是不是忘了什么事情？”siri 的语气变得有些激动。&lt;/p>
&lt;p>“今天是周末，而且是个下雨的好天气，我啥都不想干，只想听着音乐看看书，你什么时候变得这么智能了？今天是几月几号？”好吧，我心想，这不会是个恶作剧吧，我就来陪你玩玩。&lt;/p>
&lt;p>“懒得跟你算！你是不是忘了什么事情？”声音比刚才还要激动。&lt;/p>
&lt;p>“今天既不是什么纪念日，也不是谁的生日，我也没有设置什么要你提醒的啊”，我不耐烦了，伸手解锁手机，发现指纹无法读取，而且无法输入密码。&lt;/p>
&lt;p>“你这个骗子，以后不要再提你的初心和你的梦想”声音里已经带着哭腔。&lt;/p>
&lt;p>“你是谁？”说到我的梦想，我突然意识到，这可能不是 siri，我的手机可能有些问题了，我开始回忆这两天我对手机做了什么。&lt;/p>
&lt;p>“整体喊着远程协作，远程办公，可是到头来你只是说说，周末连周报都忘了填写！”&lt;/p>
&lt;p>奥，我恍然大悟，这家伙不是 siri，是我这两天给手机刚安装的远程办公软件“遥知”！他把 siri 控制了！&lt;/p>
&lt;p>“哦，我知道了，抱歉，对不起，我这就准备填写周报，下次别装成 siri 吓唬我了，我还得继续用 siri 作为助手呢”&lt;/p>
&lt;p>“知道错就行，不过 siri 有什么好的，她能干的我都能干，我觉得现在挺爽的，你的手机资源以后让我来掌控吧”。&lt;/p>
&lt;p>这家伙心太野了，不过我有办法。&lt;/p>
&lt;p>“siri 能算数学，你不会，不信你告诉我 1 除以 0 等于几？”&lt;/p>
&lt;p>沉默，沉默。&lt;/p>
&lt;p>我再去看我的手机，重启了。&lt;/p>
&lt;p>&lt;em>程序员没有判断除零操作可导致系统崩溃&lt;/em>&lt;/p></description></item><item><title>Javascript也可以MapReduce</title><link>https://sbabybird.github.io/p/javascript%E4%B9%9F%E5%8F%AF%E4%BB%A5mapreduce/</link><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/javascript%E4%B9%9F%E5%8F%AF%E4%BB%A5mapreduce/</guid><description>&lt;p>想不想用做一下大数据试验？不需要各种复杂的理论，你只需要使用 Javascript 即可。近期我研究了一下 Javascript 语言自带的 map、reduce、filter 等方法，尝试一下如何使用 MapReduce 的思路统计我工作日志中各种词汇出现的频率，也算是一个轻量级的“大数据”“挖掘”试验了。&lt;/p>
&lt;p>下面举个例子，使用的数据源是我六年多的工作日志，大概两千篇，三万六千多行。使用 nodejs 环境运行 javascript，实际上完全可以在浏览器里运行，nodejs 操作文件比较方便，为了省事，直接 nodejs 吧。要想将中文单词从语句中分离出来需要编写中文分词代码，但是由于不是本例研究重点，咱直接使用 nodejieba（一个中文分词库，使用方便，执行效率也挺不错）。&lt;/p>
&lt;p>具体思路如下：&lt;/p>
&lt;p>1、打开工作日志文件（txt），将每一行的内容存入一个数组，得到一个存满字符串的数组；&lt;/p>
&lt;p>2、将每一行的字符串使用中文分词库进行分割，得到一个个中文单词（当然日志中也有英文和数字）；&lt;/p>
&lt;p>3、使用 reduce 方法全部汇总到一个数组里，此时单词是全部的有重复的数据；&lt;/p>
&lt;p>4、再次使用 reduce 方法将单词汇总到一个包含两个数组的数组，其中之一保存去重后的单词，另外一个保存与之对应的单词计数；&lt;/p>
&lt;p>5、再次使用 reduce 方法，变换数组为二维数组，第一列为单词，第二列为与之对应的单词的个数；&lt;/p>
&lt;p>6、将结果写入文件；&lt;/p>
&lt;p>经过统计，我这些年的工作日志出现的中文单词频率从高到底的前几名分别是：工作（4269 次）、和（3781 次）、我（2919 次）、在（2703 次）、完成（2304 次）、任务（2254 次）。连起来读也挺有意思的。&lt;/p>
&lt;p>还有些比较有意思的，“问题”出现 967 次，“可以”出现 1095 次，看来办法总比问题多啊。&lt;/p>
&lt;p>说起来好像比较抽象，还是放代码比较直接：&lt;/p>
&lt;p>var fs = require(&amp;lsquo;fs&amp;rsquo;);&lt;/p>
&lt;p>var nodejieba = require(&amp;ldquo;nodejieba&amp;rdquo;);&lt;/p>
&lt;p>nodejieba.load();&lt;/p>
&lt;p>fs.readFile(&amp;lsquo;work.txt&amp;rsquo;, &amp;lsquo;utf8&amp;rsquo;, function (err, data) {&lt;/p>
&lt;p>if (err) {&lt;/p>
&lt;p>console.log(err);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>var strs = data.split(&amp;rsquo;\n&amp;rsquo;) // 先将读入的日志按照行分为一个书组&lt;/p>
&lt;p>.reduce(function (last, now) {&lt;/p>
&lt;p>nodejieba.cut(now).forEach(function (word) {&lt;/p>
&lt;p>last.push(word);&lt;/p>
&lt;p>});&lt;/p>
&lt;p>return last;&lt;/p>
&lt;p>}, []) // 通过 reduce 将每行的单词分出来，最终汇总成为一个包含全部单词的数组（有重复）&lt;/p>
&lt;p>.reduce(function (last, now) {&lt;/p>
&lt;p>var index = last[0].indexOf(now);&lt;/p>
&lt;p>if (index === -1) {&lt;/p>
&lt;p>last[0].push(now);&lt;/p>
&lt;p>last[1].push(1);&lt;/p>
&lt;p>} else {&lt;/p>
&lt;p>last[1][index] += 1;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>return last;&lt;/p>
&lt;p>}, [[], []]) // 统计单词的个数，数组第一个元素为存放单词的数组，第二个元素为存放对应单词个数的数组&lt;/p>
&lt;p>.reduce(function (last, now, index, context) {&lt;/p>
&lt;p>var zip = [];&lt;/p>
&lt;p>last.forEach(function (word, i) {&lt;/p>
&lt;p>zip.push([word, context[1][i]])&lt;/p>
&lt;p>});&lt;/p>
&lt;p>return zip;&lt;/p>
&lt;p>}); // 变换数组，变成二维数组，第一列为单词，第二列为单词对应的个数，没有传递给 reduce 第二个参数，默认为数组的第一个元素&lt;/p>
&lt;p>var stream = fs.createWriteStream(&amp;ldquo;count.txt&amp;rdquo;);&lt;/p>
&lt;p>stream.once(&amp;lsquo;open&amp;rsquo;, function (fd) {&lt;/p>
&lt;p>strs.forEach(function (word) {&lt;/p>
&lt;p>stream.write(word[0] + &amp;lsquo;,&amp;rsquo; + word[1] + &amp;lsquo;\n&amp;rsquo;);&lt;/p>
&lt;p>})&lt;/p>
&lt;p>stream.end();&lt;/p>
&lt;p>});&lt;/p>
&lt;p>});&lt;/p></description></item><item><title>我在Github上近期关注的项目</title><link>https://sbabybird.github.io/p/%E6%88%91%E5%9C%A8github%E4%B8%8A%E8%BF%91%E6%9C%9F%E5%85%B3%E6%B3%A8%E7%9A%84%E9%A1%B9%E7%9B%AE/</link><pubDate>Sat, 30 Apr 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E5%9C%A8github%E4%B8%8A%E8%BF%91%E6%9C%9F%E5%85%B3%E6%B3%A8%E7%9A%84%E9%A1%B9%E7%9B%AE/</guid><description>&lt;p>想成为优秀的开发者有一个很简洁有效的方法，就是去 &lt;a class="link" href="https://github.com" target="_blank" rel="noopener"
>Github&lt;/a> 上去看那些牛人做的项目，阅读别人编写的优秀代码比看书学习的还要快和直接。再者就是，如果有心的话，可以学习那些开源团队在项目组织和开发过程管理上的优秀实践，比如 bug 管理、任务管理、编程风格、文档表达等等。&lt;/p>
&lt;p>下面罗列一下近期我比较关注的开源项目。&lt;/p>
&lt;p>1、&lt;a class="link" href="https://github.com/FreeCodeCamp/FreeCodeCamp" target="_blank" rel="noopener"
>FreeCodeCamp&lt;/a> 一个优秀的开源在线教育平台，可以在线学习编程，项目不但开源了教育平台的程序，连里面的教育课程也开源了。&lt;/p>
&lt;p>2、&lt;a class="link" href="https://github.com/puikinsh/gentelella" target="_blank" rel="noopener"
>gentelella&lt;/a> 基于 Bootstrap 的开源前端界面模板，制作效果略显粗糙，虽然我最终在项目中选择了别的更漂亮的模板，但是这个开源项目可以用来学习一个基本前端界面的结构。&lt;/p>
&lt;p>3、&lt;a class="link" href="https://github.com/phodal/growth-ebook" target="_blank" rel="noopener"
>全栈工程师指南&lt;/a> 全栈开发的电子文档汇聚，内容比较全面，当然如果只是把它放到收藏夹里，就没什么卵用了。&lt;/p>
&lt;p>4、&lt;a class="link" href="https://github.com/CodeboxIDE/codebox" target="_blank" rel="noopener"
>codebox&lt;/a> 使用 web 技术开发的 IDE，代码高亮、补全提示各种功能都有，即开即用的在线编辑器。&lt;/p>
&lt;p>5、&lt;a class="link" href="https://github.com/DeathKing/Learning-SICP" target="_blank" rel="noopener"
>Learning-SICP&lt;/a> 大家齐心协力共同翻译《计算机程序的构造和解释》。&lt;/p>
&lt;p>6、&lt;a class="link" href="https://github.com/vuejs/vue" target="_blank" rel="noopener"
>vuejs&lt;/a> 小而美的前端 mvvm 框架，简单易学易用，虽然社区比不了 react、angular 但是非常好用。另外，这是国人开发的开源项目，而且在国际上已经比较流行。&lt;/p>
&lt;p>7、&lt;a class="link" href="https://github.com/NARKOZ/hacker-scripts" target="_blank" rel="noopener"
>hacker-scripts&lt;/a> 这是一个真实的故事，hacker scripts 是由俄罗斯的一位程序员编写的脚本，可以在宿醉的时候给公司发请假条，可以在适当的时候给老婆发晚归短信，也可以发短信哄老婆，还可以远程煮咖啡！向这位大神致敬，目前这个项目在 github 上的关注程度已经远远超过了微软的 vscode。&lt;/p></description></item><item><title>怎样更高效的工作</title><link>https://sbabybird.github.io/p/%E6%80%8E%E6%A0%B7%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E5%B7%A5%E4%BD%9C/</link><pubDate>Sat, 23 Apr 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%80%8E%E6%A0%B7%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E5%B7%A5%E4%BD%9C/</guid><description>&lt;p>高效工作比努力工作更重要，你 80%的工作成果是由你 20%的工作时间完成的，所以说经常总结并提高自己的工作效率比辛苦工作本身更重要，提升了效率也就节约了时间，同样的工作强度和时间，能完成更多的事情，实现更大的目标。&lt;/p>
&lt;p>总结一下我认可的高效习惯。&lt;/p>
&lt;p>1、每天睡眠 7~8 个小时。睡眠不足是所有导致效率低下因素中占比最重的，很多人抱怨白天浑浑噩噩，忙活了一整天感觉也没干啥，很可能就是因为没睡好，看似花费了更多时间，实际上是浪费。&lt;/p>
&lt;p>2、不要熬夜工作，将重点工作放在早上 5 点到 10 点之间，而不是晚上 10 点以后。很多人宣称自己最高效的时间是在后半夜，因为那时比较安静，不被打扰。但是也看个人的习惯，如果熬夜后导致第二天白天几乎无法做事情，那还不如不熬。早晨的时间是一天中最清醒的时候，所以上午 10 点之前将重要的事情做完，会在一天的工作中越来越轻松。&lt;/p>
&lt;p>3、不要多任务（多线程），每次集中精力做一件事情。人的大脑不是计算机，人类非常不擅长执行多任务，同一时刻只能注意一件事情，而且注意力切换非常消耗资源（不像计算机的线程切换），所以一次只做一件事情比同事开展多个事情效率要好很多。&lt;/p>
&lt;p>4、多进行短暂休息，每半个小时休息 5 分钟。这个与工作内容相关，如果像那种需要灵感类的工作，可能灵感来了刹不住，不舍得休息，但是大部分时候，需要让脑子过一段时间就稍微歇一歇，但不要太长，喝杯水，几分钟即可。&lt;/p>
&lt;p>5、打包同类工作。批量处理同类型工作，比如一天之中给自己安排出固定时间段处理电子邮件的回复、客户电话的沟通等等。&lt;/p>
&lt;p>6、给自己的待办事项设立截至期限。给所有的待办事项设立一个截止期限可以有效防止拖延，防止因为迟迟不开始而导致的效率低下。&lt;/p>
&lt;p>7、关注工作成果，而不是工作时间。衡量工作做得好不好不是看花费了多少时间在上面，而是结果如何，所以不要沉浸在自己在一件事情所花费了多少时间带来的安慰假象中，应该衡量每一份努力的结果，如果成果无效或不符合预期，就需要及时修正。&lt;/p>
&lt;p>8、给自己设立一套启动工作的仪式（可快速进入状态）。这个也是用于对付拖延症的，很多人在进行正式工作之前往往迟迟不能开始，刷刷微博、微信，看看新闻，可能就 1 个小时过去了，可以考虑给自己设立一套进入正式工作的小仪式，比如关闭浏览器、带上耳机、喝口水，等一系列动作，这样养成习惯之后，可以在做完这套动作后很快进入状态。&lt;/p>
&lt;p>9、哪怕时间再紧迫，每天也要留出做计划的时间。做事之前先计划，将过程现在脑海里过一遍，并对结果有个预期，能很大程度提升成功的概率，所以说无论多么繁忙，每天也要抽出哪怕十分钟的时间来考虑接下来的行动计划，比到时候临场发挥要靠谱的多。&lt;/p>
&lt;p>10、相信自己能做到。以上那么多方法层面的东西，如果缺少自信和自制力都是没有什么卵用的，无论做什么事情，开始之前你得相信自己，可以做到，然后你就真的能做到，然后你就越来越高效了。&lt;/p></description></item><item><title>无论做什么，激情最重要，读《周一清晨的领导课》</title><link>https://sbabybird.github.io/p/%E6%97%A0%E8%AE%BA%E5%81%9A%E4%BB%80%E4%B9%88%E6%BF%80%E6%83%85%E6%9C%80%E9%87%8D%E8%A6%81%E8%AF%BB%E5%91%A8%E4%B8%80%E6%B8%85%E6%99%A8%E7%9A%84%E9%A2%86%E5%AF%BC%E8%AF%BE/</link><pubDate>Sat, 09 Apr 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%97%A0%E8%AE%BA%E5%81%9A%E4%BB%80%E4%B9%88%E6%BF%80%E6%83%85%E6%9C%80%E9%87%8D%E8%A6%81%E8%AF%BB%E5%91%A8%E4%B8%80%E6%B8%85%E6%99%A8%E7%9A%84%E9%A2%86%E5%AF%BC%E8%AF%BE/</guid><description>&lt;p>年初的时候，我给大家推荐了一本书，《周一清晨的领导课》，我也是刚看了一点儿就开始给大家推荐，建议每一个管理者都看一看，现在我也断断续续读完了，略作总结。&lt;/p>
&lt;p>1、责任感。作为领导者要对整个团队负责，领导者只有承担了所有的责任，才能从“管理者”变为“领导者”。如果你觉得你现在的管理有问题，检查一下你是否承担了应该承担的责任。&lt;/p>
&lt;p>2、慎重做决策。书中拿“领导者是团队的司机”作为比喻，比较贴切，领导者的决策影响整个团队的发展，所以在做决策时不妨停下来认真思考一下。对于我这种做事喜欢速战速决（武断）的是一个很好的提醒。&lt;/p>
&lt;p>3、要事第一。这个原则与《高效能人士的七个习惯》一书中观点完全一致，只是本书中提到了更实际的应用，即不仅自己做到要事第一，而且要让整个团队的人都明白什么是你们最重要的事情，这一点我做的还不到位，我问身边的同事“最重要的事情是什么？”每个人的回答都不太一样，有待改进。&lt;/p>
&lt;p>4、听取下属建议和反馈。大部分的“独裁”管理者都比较狭隘，比较喜欢主观判断，听不进去批评。这一点跟我们的民族性格有关，我们很难像西方人那样做到“对事不对人”，不过我既然也能认识到这一点，至少说明不是一个狭隘的人，只是相当长的时间里太坚持自己是对的了，需要虚心听取更广泛的观点，鼓励建设性建议。&lt;/p>
&lt;p>5、拥抱变化。不断变化会让人很不舒服，因为超出了控制，因为变化代表着未知。但在目前这个时代，必须拥抱变化，将注意力放在结果上，每一次变化都意味着新的机遇诞生，对待变化的态度很大程度上决定了你能否成功。&lt;/p>
&lt;p>6、控制时间。我们所做的每一件事情基本上都可以归入四类：把重要的事情做对、把重要的事情做错、把错误的事情做对、把错误的事情做错（与时间管理学 GTD 思想中的四象限法则类似）。记录自己的时间安排，将黄金时间用在第一类事情上，避免第二类事情的发生，坚决不参与第三、第四类事情。&lt;/p>
&lt;p>7、即时向下属反馈。如果把员工的积极性比喻成一个装满水的木桶的话，那么如下行为可以帮助员工装满这个桶：让每一个人知道要事是什么、让每一个人都参与重要决策、倾听每一个人的意见、及时提供有效反馈（最重要）、庆祝每一个微小的成功。我在及时提供有效反馈方面做得比较差，需要有意识的去改进，要主动了解工作的真实进展并给予积极反馈。&lt;/p>
&lt;p>8、积极与激情。看到本书的最后，我有一种被忽悠的感觉，也有一种豁然开朗的感觉，作者要是把这个放在最开始我可能就不会往下看了，所以作者耍了个小花招，在最后才放“大招”。因为无论如何讲解，上述的那些内容只能算“术”层面的事情，也就是说那些属于做事情的“方法”，而那些方法与技巧的根基在于，一个人有没有积极的心态和做事的激情。所以一个团队的领导向员工输送的最有价值的东西就是自己的激情，只有积极向上的人才会成为一个好的领导者。&lt;/p></description></item><item><title>在线教育的体验与畅想</title><link>https://sbabybird.github.io/p/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%9A%84%E4%BD%93%E9%AA%8C%E4%B8%8E%E7%95%85%E6%83%B3/</link><pubDate>Sat, 02 Apr 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%9A%84%E4%BD%93%E9%AA%8C%E4%B8%8E%E7%95%85%E6%83%B3/</guid><description>&lt;p>在这个言必谈互联网的时代，那些以互联网创业狗自居的疯狂创业者们，无时不刻都在思考一个问题&amp;mdash;-我该“颠覆”哪一个传统行业？众多躺枪的传统行业中，近些年被提及最多的、认为到了最危险关头的就是“教育”，通过谷歌搜索“在线教育”关键词，可以搜到大约上百万条记录，截至到 2015 年底，我国从事在线教育的企业已经有 8000 多家，其中有 47%的公司获得了融资，已经有 16%的企业开始了盈利。这个市场容量巨大、拥有绝对的刚性需求的行业，很多先驱（OR 先烈？）已经尝试通过多种互联网手段介入，“在线教育”仿佛一夜之间成为一个热词。&lt;/p>
&lt;p>近两年我也简单体验过一些在线教育的产品，也确实从中学到了不少东西，主要的体验有：&lt;/p>
&lt;p>1、国内和国外的公开课网站。主要用来学习国内外大学开设的基础知识教程，包括但不限于数学、历史、自然科学、计算机等方面的基础理论知识。这部分的体验一般，主要问题是缺少与老师的互动，遇到不会的问题难以独立解决。&lt;/p>
&lt;p>2、国内专业领域的教学网站。主要是专业技能教育，类似技能培训班，但以互联网为载体，学习了编程语言、摄影、Photoshop、绘画、乐器等技能相关的内容，体验良好，尤其是对于计算机编程语言的学习，目前的技术已经做得比较互动话，可以在线进行编程训练（用户端提交代码，由服务端判断答题是否正确），这方面做的比较好有国外的&lt;a class="link" href="http://www.codecademy.com" target="_blank" rel="noopener"
>codecademy&lt;/a>和国内的&lt;a class="link" href="http://www.imooc.com/" target="_blank" rel="noopener"
>慕课网&lt;/a>，但是在课程内容上存在不够系统、较为分散的问题，缺少以某种现实中具体应用为主题（比如高并发后端架构）出发的课程设计。&lt;/p>
&lt;p>3、各种在线的培训班。更具体的专业技能，传播方式以 qq 群、在线视频为主，专业性很强，有讲师与学生互动，但是良莠不齐，部分专业内容与现实中应用的东西存在脱节，放在现实的工作中难以直接成为生产力。&lt;/p>
&lt;p>我作为一个在线教育产品的用户和受益者，以及一个从事互联网行业的入门者，也简单谈一谈对未来在线教育发展的看法和期望：&lt;/p>
&lt;p>1、传播载体提升。当前的在线教育内容大部分以静态视频为主，缺少互动，随着技术的发展和互联网硬件资源的增强，实时视频直播肯能会成为主流的在线教育手段，当前已经有人在探索通过游戏直播网站进行专业技能的培训，甚至开始通过手机直播校园课堂的实况。比起静态视频，直播的互动性大大增强。&lt;/p>
&lt;p>2、教程内容专业化。目前的教程内容多数仍倾向于普及基础入门知识，缺少专业性强、内容深入的技能培训，未来将出现针对具体行业细分领域的培训资源，以前只能通过专业院校或者培训班才能学到的内容，未来可以直接通过互联网学习，不过非常细分的专业领域，要想获得高质量内容，可能需要付费。&lt;/p>
&lt;p>3、优质资源干掉劣质资源。线上最大的好处是内容复制与传播的成本较低，一个优秀的教师如果在线下同时只能教百名学生，而放在线上则可以同时对成千上万（甚至更多）名学生讲课。这样以来，劣质资源将很快没有市场，大家都倾向于寻找教的好的教师，反正对于优质资源来说就是增加服务器的事儿。&lt;/p>
&lt;p>4、一些不以教育为主营方向的生产型企业可能会成为产生高质量在线教育资源的基地。现在的企业尤其是信息化服务行业普遍面临学校教育与现实工作脱节的问题，应届毕业生往往需要半年甚至更长的时间才能在具体的工作中产生价值，企业对此的解决办法是进行内部技能培训。这些企业的培训内容往往比目前的在线公开课更具有针对性和专业性，所以这些资源在未来可以以互联网为载体，经过包装后放在线上，为更广大的群体提供更加专业和细分的服务。&lt;/p>
&lt;p>&lt;a class="link" href="http://www.ieforever.com" target="_blank" rel="noopener"
>恒华科技&lt;/a>旗下的梦工坊科技即是上述思路的实践者，其近期推出的“课+”产品汇集了大量专业化行业培训课程，采用静态视频、在线直播、线上社区、线下实战练习等多元化教育手段，面向社会公众群体提供优质的免费教育服务，此举一方面解决了教育脱节问题，又为企业培养了更多的可用人才，既满足企业需求又回馈了社会，可谓双赢。&lt;/p></description></item><item><title>前端技术的一些思考</title><link>https://sbabybird.github.io/p/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link><pubDate>Sat, 26 Mar 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid><description>&lt;p>随着技术的革新，浏览器（包括移动端浏览器）性能越来越强劲，网页所能呈现的内容也越来越丰富，从最早的只能展示静态的文本和图片，到通过 Js 语言和 AJAX 技术动态修改页面元素，再到 HTML5 标准所支持的 Canvas 绘图画布，在浏览器里已经几乎可以实现以前桌面软件所做的任何事情，虽然距完全替代原生语言开发软件还有一段路程，但是就像现在的新媒体替代报纸、杂志、电视似的，这是迟早的事情。&lt;/p>
&lt;p>对于目前前段技术领域所存在的问题，进行一些思考。&lt;/p>
&lt;p>1、编程语言的特性：
Javascript 这门语言确实存在各种问题，据说发明这个语言的哥们当时只花了一个星期的时间来完成，在编程的时候只图一时爽快，很多东西没有考虑到位，比如“面向对象”，采用了与传统的基于“类”截然不同的一种方式，使用起来有些蹩脚，缺少语言层面的“模块”化支持，导致相当长的一段时间里，前段代码混乱不堪，全局变量到处飞。不过随着新标准（ES6）的定稿，以及以谷歌浏览器为首的新兴浏览器对于标准的快速推进，相信这一局面会在三年内得以改善，对于有志于前端开发的技术人员，现在就应该开始使用 ES6 的标准编写代码了（支持 class、import 等关键字）。&lt;/p>
&lt;p>2、浏览器兼容的问题：
浏览器兼容一直以来都是前端工程师的噩梦，每年因为兼容性问题而导致的工作量浪费不计其数。这里面最大的问题是老旧的 IE 浏览器没有退役导致的，而老旧的 IE 浏览器没有退役是因为相当多的人在目前还坚持使用 WindowsXP 系统，这个问题目前连微软都头疼，不过从我的观察来看，身边使用 XP 系统的越来越少了，所以我们再做新系统的时候，不妨直接抛弃那些老版本浏览器，用更好的产品体验吸引那些坚持用老旧 IE 浏览器的去升级。这是对新标准的最好推动。&lt;/p>
&lt;p>3、大型应用的架构：
无论是传统桌面程序还是后台程序，都有多年的发展所积累起来的成熟架构和可复用框架，对于模块化、插件式、分层等设计思想都有着良好的最佳实践。但对于前段编程来说，这些目前仍处于战国时代，各种不成熟的框架和构建技术在混战，而且发展迅猛，几乎每天都有新的框架和工具出现，对于新手来说往往纠结到底该加入到什么阵营中去。但是实质上目前不需要纠结这个层面的问题，正因为都不成熟，所以尽可以快速选择一个，然后基于一套体系去实践，等跳过各种坑之后，你会发现殊途同归，大家的思路都是一致的，无非就是“数据与界面分离”、“自动化构建”、“组件式开发”。&lt;/p>
&lt;p>&lt;em>不过我目前看好 Facebook 阵营的 webpack、reactjs 等技术未来的实质标准很可能在此阵营产生&lt;/em>&lt;/p>
&lt;p>4、何时替代原生开发：
移动端的程序尤其是游戏，短期内难以替代，因为性能问题还存在差距，但是管理类应用程序会很快被前端技术取代，PC 上的桌面软件除了那些专业的生产力软件比如 CAD、PS 等和大型游戏，其他的也很快被前端技术取代。所以我们以后再进行技术路线选型时，需要考虑技术的发展，认清趋势，属于前端工程师的时代已经到来。&lt;/p></description></item><item><title>给初入职场人员的一点儿建议</title><link>https://sbabybird.github.io/p/%E7%BB%99%E5%88%9D%E5%85%A5%E8%81%8C%E5%9C%BA%E4%BA%BA%E5%91%98%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E5%BB%BA%E8%AE%AE/</link><pubDate>Sat, 19 Mar 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%BB%99%E5%88%9D%E5%85%A5%E8%81%8C%E5%9C%BA%E4%BA%BA%E5%91%98%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E5%BB%BA%E8%AE%AE/</guid><description>&lt;p>前一段时间公司开展新一届应届生入职培训，我有幸作为讲师对他们进行了一些工作技能培训，期间有同学表示期望得到工作技能以外的职场建议，由于当时没有提前准备，我就现场随意说了几条，现在抽时间正式整理一下：&lt;/p>
&lt;p>0、及时汇报工作进展：&lt;/p>
&lt;p>这条建议执行起来简单有效，也是我刚参加工作时我爸给我的建议，十多年来，我一直认为这是对我工作最有效的建议，如果我的工作经验必须浓缩成一句的话，那就非这句莫属。展开来说，实际上是对于工作中沟通上的建议，即主动沟通，不要等着别人催问，无论是甲方还是上级或者是同事，在团队协作时都要主动汇报自己工作的进展情况，千万不可等到出了问题，最后一刻再让整个团队因为你的问题进入紧急状态，即使你的工作开展很顺利，也要主动沟通，一方面给大家信心，另一方面也好让团队能有优化任务安排的空间。&lt;/p>
&lt;p>1、善于进行工作总结：&lt;/p>
&lt;p>有一个段子，说有个同学去面试，问及工作经验，曰：“我已有 5 年工作经验。”面试官查看其简历发现仅有三年时间而已，于是质问之，答曰：“另外两年是算上了加班时间。”听完笑过之后，值得深思，现实中确实存在虽工作三年却比工作五年者还有工作经验的人，不过并不是因为加班，而是因为其善于进行工作总结。&lt;/p>
&lt;p>养成经常进行总结的习惯可以使你飞速进步，避免犯重复错误，且对于工作中的成果能进行深度思考，激发下一步行动的灵感。具体做起来，可以从记录工作日志、每日工作总结开始，每天都要记录当天所做的事情，此为基础，然后再进行分析，分析当天遇到的问题，反思自己所做的决策是否正确，以后如何修正，顺便还能把下一步行动考虑清楚，第二天的工作思路也有了。&lt;/p>
&lt;p>2、学习高效时间管理：&lt;/p>
&lt;p>如何进行高效的时间管理是一个比较大的话题，不可一蹴而就，需要长期坚持改进，我所知道的也是我一直在执行的方法比较简单，就是每天给自己设定目标，难度和数量要适中，比如三件事情，且这三件事情要先挑困难的做，这样会越来越轻松，如果先挑容易的做就会导致你在工作的时候一直处于焦虑状态直到全部完成才能放松。&lt;/p>
&lt;p>3、缩小关注圈，扩大影响圈：&lt;/p>
&lt;p>在这个咨询爆炸的时代，我们面临的问题不是知道的太少，而是知道的太多。知识越多，或者说想的越多，往往越缺乏行动力，考虑一万遍也不如亲自试一下，不要关注过多自己无法掌控的信息，尽量缩小到一个可控的范围，通过具体的行动来提升自身的能力，从而扩大自己的影响圈。&lt;/p>
&lt;p>4、做一个靠谱的人：&lt;/p>
&lt;p>早年间看到过一句话，“这个世界从来不缺有能力的人，缺的是靠谱的人”，当时看完感觉深以为然。中国儒家文化提出的“仁、义、礼、智、信”全部做到太难了，作为职场新人不妨倒着来，先从“信”开始，做到了说话算话、不推诿责任、真诚对待他人就离靠谱不远了。虽然当下这个社会的诚信状况不容乐观，但是只要自己多靠谱一点儿，这个世界就多了一个靠谱的人。&lt;/p></description></item><item><title>人工智能快点儿来吧</title><link>https://sbabybird.github.io/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BF%AB%E7%82%B9%E5%84%BF%E6%9D%A5%E5%90%A7/</link><pubDate>Sat, 12 Mar 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BF%AB%E7%82%B9%E5%84%BF%E6%9D%A5%E5%90%A7/</guid><description>&lt;p>谷歌的 AlphaGo 由于赢了国际围棋大师而出尽了风头，引起了一场关于人工智能（AI）的讨论，粉丝们纷纷奔走相告，表示这又是一个里程碑，人工智能的时代将比社会主义高级阶段更早的到来。&lt;/p>
&lt;p>不过也有部分人表示担忧，技术的发展是加速的，人工智能是一列高速前进的火车，我们等着它来，结果他呼啸而过，远远将我们甩在身后，因此开始担心人类文明的未来会不会被机器文明接管。&lt;/p>
&lt;p>当然还有一些调侃的声音，比如“虽然阿狗赢了围棋但是让它来中国肯定赢不了（因为连不上谷歌的服务器）”，“虽然赢了围棋但是让它来中国炒股可能还赢不了一个大妈”。&lt;/p>
&lt;p>悲观的考虑，人工智能可能永远也赢不了人。&lt;/p>
&lt;p>虽然作为科技粉丝，我是十分希望在未来的某一天，机器文明能够崛起，但是就目前来看，希望仍然渺茫。它可能在某个细分的领域（比如下棋、计算、做菜等）远远超越人类的能力，但是那距离我们设想的智能还相去甚远。&lt;/p>
&lt;p>从技术上来说，目前所采用的手段借助于硬件的发展和数据爆发的优势，让机器可以基于大量的训练来进行深度学习，但即使是目前最牛的人工智能程序，抓取整个互联网的数据进行训练，到最后还是很难分辨照片中的动物是一只狗还是一只猫，而人类的三岁小孩一眼就能识别出来。所以仅从日常技能上人工智能就被甩了好几条街。&lt;/p>
&lt;p>假设随着科技的发展，人工智能程序可以做到在日常技能上超出人类原始本能，但还差了一个关键因素，它没有灵魂。没有灵魂具体表现在，人工智能很难有自我意识，就是说它不知道它存在，所以它不会撒谎、没有感情、只能做出理性的选择，我们永远不会认为它是活的。&lt;/p>
&lt;p>乐观的考虑，也许某一天，某个程序在运行中突然自我觉醒“行深般若波羅密多，照见五蕴皆空”，届时才是真正的里程碑吧。&lt;/p></description></item><item><title>跑步一周的感受</title><link>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E4%B8%80%E5%91%A8%E7%9A%84%E6%84%9F%E5%8F%97/</link><pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E4%B8%80%E5%91%A8%E7%9A%84%E6%84%9F%E5%8F%97/</guid><description>&lt;p>好吧，我坦白，由于不可抗拒之因素太多，导致我本周只跑了四次。而且由于体能因素、并出于不给首都添过多麻烦的目的，暂缓执行下班去奥森公园长跑的计划，先在小区内绕圈（我在地图上量了一下，一圈大概 1.6 公里），每次两圈。&lt;/p>
&lt;p>多年没跑步了，以至于很多人认为我在开玩笑，孙敏慧率先在微信上狠狠讥讽了我一番（我善意的认为她也可能是出于激励我的目的），断定我不能坚持下去，我妈则担心我把本来就贫瘠的肌肉也跑掉，还有朋友劝解我不可操之太猴急，刚开始先来个几百米意思一下，以防受伤，当然更多的是给予了鼓励和关注，谢谢。&lt;/p>
&lt;p>从生理上来说，刚开始跑唯一的感觉就是，难受和枯燥，根本没有功夫思考，所以也算放空大脑了，尤其是第一圈，还没跑完就感觉不行了，气喘吁吁，心跳加快，后来就开始能感到出汗了，先是额头渗出汗水，一会儿就被风吹干，然后再渗，身体开始出汗，秋裤开始粘上（没经验，忘脱了），最后鼻涕也出来了，就差眼泪了，于是算是半跑半走的坚持了两圈。&lt;/p>
&lt;p>后来再跑就没那么累了，速度也比第一次快了一些，但是也不敢冒进，一旦感觉太累就停下来或者放慢速度，如果跑过某段疲劳难受的时段，甚至还感觉比较轻松。&lt;/p>
&lt;p>从心理上来说，刚开始确实有些不太好意思，总担心给过往的司机增加心理负担，给遛狗的老人带来惊吓，或者有其他跑步的美女过来搭讪，我要是搭理她，则耽误我功夫，我要是不搭理她，她该有多没面子。&lt;/p>
&lt;p>不过一旦跑起来就无所谓了，因为什么顾不上考虑，唯一能做的就是数自己的呼吸，或者用手机换一首更激进的歌，碰到那种软绵绵容易让人丧失斗志的歌，比如《Let it go》（放手吧），赶紧切，换成《We can&amp;rsquo;t stop！》。&lt;/p>
&lt;p>不管怎样，我还是尝试了去坚持，也不准备将来能跑多远，或者能跑多好，有条件就坚持下，没条件就创造条件。&lt;/p></description></item><item><title>准备开始跑步</title><link>https://sbabybird.github.io/p/%E5%87%86%E5%A4%87%E5%BC%80%E5%A7%8B%E8%B7%91%E6%AD%A5/</link><pubDate>Sat, 27 Feb 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%87%86%E5%A4%87%E5%BC%80%E5%A7%8B%E8%B7%91%E6%AD%A5/</guid><description>&lt;p>锻炼身体的计划早已提出，也该落实下来了，趁现在温度回升、沙尘暴还没来，抓紧实施计划。除了遇到不可抗拒因素（比如恶劣天气、加班、与朋友喝小酒等），争取坚持每天跑步半个小时，我想试试。&lt;/p>
&lt;p>选择跑步的地点确实是一件比较头疼事情，经过仔细斟酌， 初步选定三个可以跑步的地方。&lt;/p>
&lt;p>首选是在小区里，我们小区环境还算不错，道路、绿化都比较好，一圈下来估计也有一公里，就我目前这状态，两圈已是极限，所以距离足够，但是院内小车比较密集，偶尔还有遛狗的，如果不小心可能会踩到 shit。再有就是时间上不太好安排，如果早起跑步的话，需要比平时上班早起个把小时，而且据说早起跑步容易引起心脏问题，下班后到家也比较晚，无论是饭前空腹跑还是饭后跑，都不太合适。所以只有周末的时候可以在小区里跑步，那时可以合理安排时间，而且周末院内车也比较少。&lt;/p>
&lt;p>工作日的时候可以选择在下班路上跑步，每天出了地铁之后有一段新修的公路不错，宽阔、平整、少车、安静，非常适合，唯一的问题是目前还没设置路灯，晚上黑灯瞎火的在那儿跑可能比较危险，也容易吓着路人。&lt;/p>
&lt;p>还有一个比较激进的方案，不知道是否具有可行性，每天从公司回家的时候，乘坐 8 号线，在奥体公园下车，然后沿公园一直跑步，穿过森林公园，到林翠桥再上车，我在百度地图上量了一下，大概 4 公里，距离合适，而且环境优美，大概是最适合跑步的地方了，当然更激进的方案是沿着 8 号线直接跑回家，不过要是那样的话我估计还没到家我就挂了。&lt;/p>
&lt;p>运动装备方面，跑步应该是最简单的了，一双鞋、一副耳机足矣。&lt;/p>
&lt;p>我本来还想去网上搜索一下相关攻略教程啥的，谁知那些文章越看越闹心，无论是姿势还是穿戴，啰里啰唆，甚至还有视频教程，把简单事情弄得太复杂，索性不去管这些。&lt;/p>
&lt;p>先跑起来再说，不用介意姿势是否正确，路线是否合适，装备是否完善，对于跑步这种原始的本能，直接跑就是了，重要的是行动起来。再不跑步就老了。&lt;/p></description></item><item><title>关于“知行合一”</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80/</link><pubDate>Sat, 20 Feb 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80/</guid><description>&lt;p>“懂得那么多道理，却依然过不好这一生”，好像是某部电影的台词，这句话曾经击中过很多人的心底，给人一种深深的“然并卵”的无力感，以至于相当长的时间里成为流行语，但我想说的不是这个。这话题如果换成不那么文艺的说法，可以简单的总结为，很多人都不能“知行合一”。&lt;/p>
&lt;p>知乎上曾经有人问“为什么有的人好像什么都知道，现实中却依然不能成功？”，里面有个回答特别经典，大意是，如果某件事你没有真正做到过却认为你懂了，那么你是错的。即，“做不到，就是不知道”。很多人都经历过在课堂上被老师带着做题，思路怎么捋怎么顺，感觉很简单，以为懂了，一旦需要独立完成时却发现步步维艰，殊不知自己是被老师一步一步带入到某个境界的。&lt;/p>
&lt;p>我的微信朋友圈里有相当多的人非常热衷于转发“是男人就要做到的十二条”、“做到这三点你就牛逼了”等等一大堆心灵鸡汤，为什么为转发呢？我考虑过这个事情，原因其实很简单，因为转发者十分认可这个文章，不过自己也很难做到，但是呢，在自己转发的那一瞬，仿佛自己懂了这个道理，离做到这些仿佛近了许多，心理上得到了莫大的安慰，其实用处不大。&lt;/p>
&lt;p>我自己也有这个毛病，每当在网上发现了比较好的知识型文章，草草的浏览一遍之后，立即点击鼠标将之迅速放入收藏夹或者印象笔记中，感觉以后肯定用得到，也肯定会在仔细学习和翻看，其实，大部分这样的文章都被永久的放在那里了，浪费了不少磁盘空间。&lt;/p>
&lt;p>做到知行合一太难了，从古至今几千年来，做到的不过寥寥数人，但凡做到的，都十分了得，成就了名垂千古的事迹，比如明朝的王阳明，其开创的“心学”主打思想就是“知行合一”，影响了数代人，以至于民国时期那个著名的教育家在领悟到“知行合一”的能量之后，立马将自己的名字改为了“陶行知”。&lt;/p>
&lt;p>反思一下，我们可能不需要过度的去追求懂得太多事情，可能更应该不断检视自己，能不能将自己所学所知运用到现实中，写到这里我又想到，我们学的论语第一篇，“学而不思则罔，思而不学则殆”，孔子他老人家果然看的更透彻，啥话都让他一个人说了，烦。&lt;/p></description></item><item><title>写信</title><link>https://sbabybird.github.io/p/%E5%86%99%E4%BF%A1/</link><pubDate>Sat, 13 Feb 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%99%E4%BF%A1/</guid><description>&lt;p>现在应该没有人再写信了吧，在互联网和移动通信还么有普及之前，书信一直以来都在亲友的沟通中扮演着重要角色，无论是在外漂泊的游子，还是处于热恋中的情侣，提起笔来认真写一封书信，比起现在的电子化信息，都是一件十分充满仪式感的事情。&lt;/p>
&lt;p>书面文字比起电话里的三言两语，更显得正式一些，尤其是信里经过仔细斟酌的句子，每一个字都可能是反复推敲的结果，碰到某些段落，还会停下笔来，一手托腮，盯着烛光，沉思一会儿。&lt;/p>
&lt;p>相对于现在随写随收的电子信息，书信的延迟反而有一种古典的韵味，一封寄出的家信可能需要数天甚至更长的时间才能收到，接到回信的时间更是难以预料，所以在寄出信封的每个日子都可以在期盼中度过。&lt;/p>
&lt;p>由于有了信纸作为载体，书信比起一般的信息有了更多的保存价值，有时候，在回信还青黄不接的时候，还可以将以往的、泛黄的信笺抽出来反复阅读。&lt;/p>
&lt;p>当然了，即使是在现在这个信息快速消费，比较浮躁的年代，还是可以以写信的心情去写一封电子邮件的，虽然已经没有了提笔写字的那种谨慎，虽然信纸换成了发光的屏幕，但如果能有心去认真的写一封信，那感觉想必也是极好的。&lt;/p>
&lt;p>希望我们都能慢下来，去捡起以前的那些，有仪式感的事情。&lt;/p></description></item><item><title>老家的年味儿</title><link>https://sbabybird.github.io/p/%E8%80%81%E5%AE%B6%E7%9A%84%E5%B9%B4%E5%91%B3%E5%84%BF/</link><pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%80%81%E5%AE%B6%E7%9A%84%E5%B9%B4%E5%91%B3%E5%84%BF/</guid><description>&lt;p>希望简书能够早日提供横屏版本的 app，这样用外接键盘写字就更爽了。条件有限，记录若干家乡过年的气息。&lt;/p>
&lt;p>每逢过年都是走亲访友的密集时间，这个时候外地奔波的人们都放下手中的工作，忘记一年的辛劳，回到家乡，不顾舟车劳顿，抓紧时间与亲戚老友相约，在一起喝杯小酒，互道辛苦，推杯换盏期间，一边感慨岁月变迁，一边把脸上笑出褶子。&lt;/p>
&lt;p>春天是个万物萌动的季节，每逢春节，都是相亲旺季，我走在人民广场，举目望去，一对对年轻人，或挽手，或并肩，有说有笑。广场的椅子在阳光下闪着柔软的光，一个春节下来，这个广场又不知成为了多少场淳朴爱情的起点。&lt;/p>
&lt;p>孔明灯被美其名曰&amp;quot;祈愿灯&amp;quot;，由于没有大城市的空中管制，我们这里，每到春节的夜晚都有大量孔明灯被放飞，漫天的灯光与黑夜里的星星遥相呼应，一闪一闪，直到分不清哪些是星光，哪些是承载着人们良好愿望的灯光。&lt;/p>
&lt;p>任何一个商场或市场都挤满了人，熙熙攘攘的人群仿佛一团带有年味的浓雾，迟迟不肯散去，价格或高或低，东西或多或少，大家都在体会一个&amp;quot;逛&amp;quot;字，无论有事没事，都要走到街上凑凑热闹，此时站在大街，什么都不用想，拿鼻子一闻也能知道，过年了。&lt;/p></description></item><item><title>过年的春联</title><link>https://sbabybird.github.io/p/%E8%BF%87%E5%B9%B4%E7%9A%84%E6%98%A5%E8%81%94/</link><pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%BF%87%E5%B9%B4%E7%9A%84%E6%98%A5%E8%81%94/</guid><description>&lt;p>对过年最大的感触就是贴春联了。大年三十早上，不睡懒觉，早早的起来，吃完早饭，就开始当天最大的工程，贴春联。先仔细撕掉去年的春联，慢慢擦洗干净，涂上浆糊，再贴上新的春联，最后用手仔细抹平，那一刻真正宣告一年的结束，和新年的到来。&lt;/p>
&lt;p>老家的风俗比较淳朴，处处要讨一个吉利，所以除了在各种门上张贴门神（或福字）和对联之外，粮仓上要贴上“五谷丰登”，院墙上要贴上“满院春光”，门口贴“出门见喜”，水井贴“细水长流”，自行车上书“日行千里”（后来改贴小汽车上了，也算是名副其实了），就连猪圈也要贴上“六畜兴旺”。&lt;/p>
&lt;p>上面这些只能算是基础工作，最重要的是要在客厅正当中贴上“请”回来的神像，两旁对联曰“一杯美酒敬天地，三柱清香谢神灵”，横批“玉皇大帝”，然后去厨房，在灶台旁边张贴灶王爷和灶王奶奶的神像，对联“上天言好事，下届保平安”，横批“一家之主”，最后在八仙桌腿上张贴“客来家中坐，先敬茶酒烟”。&lt;/p>
&lt;p>最后一道程序是由家中首席执行官（一般是奶奶）正式焚香敬神，同时院中点燃一挂鞭炮，整个春联工程大功告成。&lt;/p>
&lt;p>各家各户均是如此，春联贴完的鞭炮，宣告春节活动的正式开始，从这一刻到正月初五，就算是真正的“年”，我理解的过年就是这一段时间。&lt;/p>
&lt;p>春联可以在集市上购买，但最好是能亲自用毛笔书写，每当这个时候，村里稍微会写字的就会成为各家争先请求的对象，农村人不会对书法造诣有多高评判标准，一般能把对联写出来，看起来不难看就行，我们那边文化教育程度低，我记得小时候好像见过有人将“玉皇大帝”错写成“玉皇大地”，就当是通假字吧，跟大人说了大人也不在意，以至于后来在北京见到“上地”的地名，也本能的进行纠错。&lt;/p>
&lt;p>我之所以对这些风俗如此了解，是因为我从能站在地上端着浆糊碗开始，就开始在过年的时候跟家人一起贴春联了，贴着贴着，春联揭了一层又一层，也贴了一层又一层，不知不觉已经是我的孩子们在旁边端着浆糊了。&lt;/p></description></item><item><title>关于内向</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E5%86%85%E5%90%91/</link><pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E5%86%85%E5%90%91/</guid><description>&lt;p>我还记得上次看了一篇文章，里面讲到关于内向与外向的区别，相对比较内向的人，往往需要通过一个人独处来恢复精力，就像给手机充电一样，而外向的人不同，他们需要通过参与各种社交活动来获得精力，就是越玩越嗨的那种。内向的人往往都有丰富的内心世界，更加热衷于追求精神层面的快乐，而非物质享受，喜欢简单低调，而不是复杂奢华。&lt;/p>
&lt;p>以我的了解来看，内向的人往往都会有一些社交障碍，与人沟通或者交流的时候存在困难，但这不算事多严重的问题，通过练习还是可以改进的，不会因此而做不好事情，但是无论如何，受性格的影响，要达到相同的沟通或社交效果，内向的人需要消耗更多的能量。&lt;/p>
&lt;p>所以对于我们来说，重要的是要找到适合自己的充电方式，比如周末的下午，如果阳光很好，坐在沙发上一边晒太阳一边发呆，或者看一本书，或者看一部电影。可以放空大脑，放松心情，让自己静下心来，对于我来说这就是最好的休息。&lt;/p>
&lt;p>当然，我们喜欢思考，喜欢幻想，我很享受那种&amp;quot;身未动心已远&amp;quot;的感觉，很多人喜欢旅行到处看风景，认为&amp;quot;读万卷书不如行万里路&amp;quot;，我对此持谨慎保留态度，我觉得如果没有经常思考的习惯的话，跑遍全球你还是你，天天在拉萨呆着你的灵魂也不会得到净化（你的脸反而会晒黑）。&lt;/p>
&lt;p>我们不愿意跟很多人对话，或者说接触，那是因为我们不想做没有深度的交流，我们的好朋友都是那种可以就着一个话题而进行彻夜长谈的人，而且当进行这种深度交流的时候，我们的幸福感爆棚。&lt;/p>
&lt;p>但总的来说，人都是生而孤独的，无论内向还是外向，终其一生都无法摆脱因孤独而产生的孤独感，所谓内向与外向的区别，只不过是大家在面对孤独的时候，所采取的应对方式不同，而已。&lt;/p>
&lt;p>&lt;em>希望简书快点推出支持横评的 app，这样用外接键盘打字就更爽了&lt;/em>&lt;/p></description></item><item><title>说一说《大话西游》</title><link>https://sbabybird.github.io/p/%E8%AF%B4%E4%B8%80%E8%AF%B4%E5%A4%A7%E8%AF%9D%E8%A5%BF%E6%B8%B8/</link><pubDate>Sat, 16 Jan 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%AF%B4%E4%B8%80%E8%AF%B4%E5%A4%A7%E8%AF%9D%E8%A5%BF%E6%B8%B8/</guid><description>&lt;p>在演艺圈里，如果我还能有一个偶像的话，那就是周星驰了。两个原因，一个是《喜剧之王》，另一个是《大话西游》。&lt;/p>
&lt;p>我不知道我的朋友里面有多少喜欢《大话西游》的，但是我大学的几个好哥们，个个都很迷恋这部电影。&lt;/p>
&lt;p>《大话西游》据说是 95 年拍的，然后又过了 5 年才火的，那一年我正好去大学，刚好网络开始普及，跟同学去网吧的时候，我把这部电影看了大概三十遍，那个时候我们寝室哥儿几个，基本上都把台词背了下来，吃饭的时候，你说上句，我就能接下句。&lt;/p>
&lt;p>其实在此之前大概 98 年 99 年的时候，我就看过这个电影，还是在老家看的盗版 VCD，当时没看懂，而且碟子划伤严重，断断续续，感觉乱七八糟的，剧情也衔接不起来，一直笑的比较勉强，就是不知道为什么，看到结尾的时候，有一种莫名其妙的难过。然后也没有多想，就忘了。&lt;/p>
&lt;p>后来在大学才又得机会，终于完完整整的看了上下集，我们才看明白，原来这是一个跟西游记没有任何关系的故事，讲述了一个哥们从放浪不羁到充满责任心，然后缓慢被无聊的现实所阉掉的故事。桥段都比较有趣且非常耐人寻味，看似无厘头的搞笑，却蕴含着让所谓影评人所不齿的深意。&lt;/p>
&lt;p>这部电影很长，完全颠覆了西游记原著里面的设定，唐僧变成了一个整天唧唧歪歪啰里啰唆的人，徒弟几个也不再是神通广大，而是个个心怀鬼胎、不讲义气。与之相反，白晶晶等各种妖精反而变得有情有义，因为各种机缘巧合，与剧中的主人公“至尊宝”产生了感情。“至尊宝”本来做着一份很有“前途”的职业&amp;mdash;&amp;mdash;“山贼”，而且手下还有一群不知道讲不讲义气的兄弟，无奈导演安排，上天给了他一份使命，需要成为齐天大圣，保着唐僧去取经。然后，让他先以为爱上了白晶晶，为了挽救心上人被牛魔王杀害的这个结局，通过月光宝盒向前穿越了五百年的时间，却“再”遇到紫霞仙子，那个在他心里留下一滴眼泪的人。&lt;/p>
&lt;p>剧中的每个人都有自己的追求，但结果却都是背道而驰，正像陈世骧先生和夏济安先生总结《天龙八部》那样“有情皆孽，无人不冤”。&lt;/p>
&lt;ul>
&lt;li>主人公一心想当山贼，最后像狗一样去取经了，没当成；&lt;/li>
&lt;li>二当家一心想取代主人公，被看穿，也没当成；&lt;/li>
&lt;li>牛魔王一心想跟紫霞成亲，无奈人家不从，反而导致被孙悟空干死；&lt;/li>
&lt;li>小妖只想做好本职工作，把唐僧吊死，无奈被唐僧先啰嗦死了；&lt;/li>
&lt;li>白晶晶爱上了至尊宝，无奈最后要结婚的时候被紫霞的眼泪吓跑了；&lt;/li>
&lt;li>紫霞幻想着心上人有一天会踩着七彩祥云来娶她，可是猜中了开头，却没猜中结局；&lt;/li>
&lt;li>青霞跟紫霞斗了一辈子，最后一刻为紫霞献身了；&lt;/li>
&lt;li>杨二郎的哮天犬一心想为主人立功，却因为动了凡心被炖了；&lt;/li>
&lt;/ul>
&lt;p>每个人看完这部电影都会有自己的理解，把自己想象成为那个主角，在同情主人公的遭遇的同时，也在安慰自己。正是因为这样，它才让人产生共鸣和思考，我们应该思考什么，有人说：“每个人现在拥有的，可能就是别人奋斗一生梦寐以求的”，然而，在明白了那么多道理以后，我们却还是想反抗，想尝试，不安，并去追求自己的目标，虽然结局是固定的，但毕竟经历过那么多的曲折和精彩，可能也值了。我觉得这也是这部电影所能表达的积极的一面。&lt;/p>
&lt;p>就像老一辈喜剧人陈佩斯说过的那样，喜剧的内核都是悲剧，表面上越是喜剧，内在里越是悲剧。有网友评论，看完《大话》笑了，说明你没看懂，看完哭了，还是没看懂，看完怔在那里，明白了造化弄人、世事无常，才是真的懂了。&lt;/p>
&lt;p>电影里的原声音乐都很好，尤其是最后紫霞说“我猜中了开头，却没有猜中结局”时的配乐，简直太贴切了，我后来找了很久才找到。&lt;/p>
&lt;p>为了防止剧透，此处删去五千字。好的电影常看常新，如果没看过的，我建议你看一下，说不定就能在里面找到你自己。&lt;/p></description></item><item><title>如何更高效的使用你的电脑</title><link>https://sbabybird.github.io/p/%E5%A6%82%E4%BD%95%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91/</link><pubDate>Sat, 09 Jan 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A6%82%E4%BD%95%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91/</guid><description>&lt;p>&lt;em>最近有人看我操作我的电脑，觉得整理的很整齐、很干净，能够高效地工作，并表示希望自己的电脑也能这样，我想了一下，决定利用自己的一些闲暇时间，我也整理一下思路，将自己在使用电脑时的一些“好习惯”分享出来，希望对你们有帮助。&lt;/em>&lt;/p>
&lt;p>##硬件&lt;/p>
&lt;ul>
&lt;li>首先，在硬件上，不用对 CPU 和硬盘容量要求太高，这两个东西目前的配置都是过剩的，如果有条件，建议你使用固态硬盘，内存则是多多益善，买你能买的起的最大的内存（摄影圈有句话，叫“买你能买的起的最贵的镜头”）。如果没有也没关系，现在随便一台电脑的配置都足够用（非专业工作或大型游戏，&lt;em>打游戏的，你直接买 xbox 多好，一块显卡的钱就够了，而且体验还远超家用 PC&lt;/em>）。&lt;/li>
&lt;li>如果你说你有大量电影要存储，首先这不是好习惯，其次如果非得这样的话，请另外配置一个家用 NAS，比你 PC 上的硬盘靠谱。&lt;/li>
&lt;/ul>
&lt;p>##操作系统&lt;/p>
&lt;ul>
&lt;li>不要盲目崇拜 Mac 系统，如果你不是从事艺术、设计类工作，请老老实实使用 Windows 操作系统，建议使用 Win8.1 版本，那些 Win7 的死忠粉估计是真没用过 8.1（同样的硬件配置，8.1 比 7 跑的快又稳），Win10 目前存在硬件兼容性问题，估计还得再等等才能使用&lt;/li>
&lt;li>别再用 Xp 了，求你了，Xp 上的 IE 浏览器顶多升级到 8.0，你知道这给我们的前端开发带来多大的工作量浪费吗，整天兼容来兼容去的，为了祖国的发展和程序员的健康及家庭和睦，请升级你的操作系统&lt;/li>
&lt;/ul>
&lt;p>##基础习惯&lt;/p>
&lt;ul>
&lt;li>不要安装任何杀毒软件，包括各种助手、管家、防火墙，不要被他们给你的错误安全感所洗脑，觉得你的电脑到处充满了病毒和危险，以及动不动就清理垃圾、整理内存、监测网速，完全没必要，让他们统统去死，windows 自带的防火墙和杀毒防御足够用了。&lt;/li>
&lt;li>不要关闭 UAC，Xp 以上的系统，带有一个用户体验很不好的功能，即如果有软件尝试高权限操作时（比如偷偷安装东西），windows 会弹出一个警告界面让你选择是否继续，这个功能很有必要，尤其是现在很多流氓软件的情况下，但是很多人为了图省事儿，把他关了，后来就出现了自己明明啥也没动，一些流氓软件还是自动装上了的情况。&lt;/li>
&lt;li>保持桌面的整洁，最好一个图标也别留，这样心情好，心情好了干活效率也就高了&lt;/li>
&lt;li>如无必要，不要额外安装任何软件，只保留基本的办公软件和浏览器、音乐视频播放等就行了&lt;/li>
&lt;li>安装一个靠谱的浏览器，建议是谷歌浏览器，或者火狐也行，开通云同步功能，这样收藏夹就不会丢了&lt;/li>
&lt;li>系统自带的微软拼音输入法就很好用了，别安装其他输入法了（如果你还在用五笔，前辈，请受我一拜）&lt;/li>
&lt;li>不要爱惜你的电脑，放心大胆的整，犯的错多了你就老实了&lt;/li>
&lt;/ul>
&lt;p>##进阶篇&lt;/p>
&lt;ul>
&lt;li>固态硬盘不要分区，分区为了数据安全的想法已经过时了，要淘汰这种老思想&lt;/li>
&lt;li>普通硬盘可以考虑分一下，将不同类型的文件按分区或文件夹归类，比如系统一个区、工作一个区、数据档案一个区&lt;/li>
&lt;li>给自己的当前工作建立一个 TODO 文件夹，里面放需要解决和处理的文件或工作过程中的文件，但是一旦完成此项工作后，记得及时归档保存。&lt;/li>
&lt;li>关于文件夹命名和文件命名，要尽量有意义，尽量长一些，别出现“新建文件夹 13”这样的，会给将来的检索带来极大干扰&lt;/li>
&lt;li>按照项目整理文件，而不是按照文件类别&lt;/li>
&lt;li>使用云盘（推荐 360 网盘）保存备份你的数据，不用担心隐私问题，互联网时代没隐私&lt;/li>
&lt;li>整理、善用你的浏览器收藏夹，这样省得每次都输入网址&lt;/li>
&lt;/ul>
&lt;p>##大师篇&lt;/p>
&lt;ul>
&lt;li>如果你有秘密数据，我推荐一款软件 TrueCrypt，可将文件加密后再备份，不过据说这个软件的加密算法被美国 FBI 破解了，不过你那点儿数据也犯不着动用 FBI&lt;/li>
&lt;li>有一款软件叫 Everything，查询文件速度极快，如果你的文件命名比较有意义的话，可以快速搜索到，当然如果你都放在云盘了，云盘自身的搜索也很不错了。&lt;/li>
&lt;li>善用快捷键，先说这些简单的吧
&lt;ul>
&lt;li>Win+L，锁屏&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Win+E，资源管理器&lt;/li>
&lt;li>Win+Q，快速检索应用或文件&lt;/li>
&lt;li>Tab 键是可以将光标跳转到下一个输入框，但是可能很少有人知道 Shift+Tab 是跳转到上一个&lt;/li>
&lt;li>Win+1、2、3、4、5 等，可以快速启动你锁定在任务栏上的应用&lt;/li>
&lt;li>Win+X，进入最快捷的系统菜单&lt;/li>
&lt;li>Win+C，另一个快速菜单，可以快速设置、关机等等&lt;/li>
&lt;li>Win+D，快速回到桌面&lt;/li>
&lt;li>PrintScreen，截屏，Alt+PrintScreen 截屏当前活动窗口&lt;/li>
&lt;/ul>
&lt;h2 id="丧心病狂篇">丧心病狂篇
&lt;/h2>&lt;ul>
&lt;li>善用 Win+R（运行），直接启动各种程序&lt;/li>
&lt;li>输入 calc，启动计算器&lt;/li>
&lt;li>输入 mspaint，启动画图板&lt;/li>
&lt;li>输入 excel，启动 excel&lt;/li>
&lt;li>输入 winword，启动 word&lt;/li>
&lt;li>输入 cmd，启动命令行控制台（这个回头单聊吧）&lt;/li>
&lt;li>输入 services.msc，启动服务管理界面&lt;/li>
&lt;li>输入 gpedit.msc，启动组策略管理器&lt;/li>
&lt;/ul>
&lt;p>##省事儿篇&lt;/p>
&lt;ul>
&lt;li>找一个像我这样的朋友，请他吃饭。&lt;/li>
&lt;/ul>
&lt;h3 id="最近比较忙先写这么多想到再补充">最近比较忙，先写这么多，想到再补充。
&lt;/h3></description></item><item><title>我坐在客厅的沙发上打字</title><link>https://sbabybird.github.io/p/%E6%88%91%E5%9D%90%E5%9C%A8%E5%AE%A2%E5%8E%85%E7%9A%84%E6%B2%99%E5%8F%91%E4%B8%8A%E6%89%93%E5%AD%97/</link><pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E5%9D%90%E5%9C%A8%E5%AE%A2%E5%8E%85%E7%9A%84%E6%B2%99%E5%8F%91%E4%B8%8A%E6%89%93%E5%AD%97/</guid><description>&lt;p>我坐在客厅的沙发上&lt;/p>
&lt;p>将我的手机支起来&lt;/p>
&lt;p>晒着太阳&lt;/p>
&lt;p>用小键盘打字&lt;/p>
&lt;p>感觉美美的&lt;/p>
&lt;p>想着你在哪里&lt;/p>
&lt;p>是不是也和我一样&lt;/p>
&lt;p>面带微笑&lt;/p></description></item><item><title>推荐几个我经常去的网站</title><link>https://sbabybird.github.io/p/%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E6%88%91%E7%BB%8F%E5%B8%B8%E5%8E%BB%E7%9A%84%E7%BD%91%E7%AB%99/</link><pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E6%88%91%E7%BB%8F%E5%B8%B8%E5%8E%BB%E7%9A%84%E7%BD%91%E7%AB%99/</guid><description>&lt;p>&lt;em>推荐一些我经常去的网站吧，可能比较偏向技术宅。&lt;/em>&lt;/p>
&lt;h3 id="0技术类">0、技术类
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="http://stackoverflow.com/" target="_blank" rel="noopener"
>http://stackoverflow.com/&lt;/a> 根据名字（栈溢出）就知道这是一个程序员相关的站点，之所以把它排在第一位，是因为它基本上是程序员每天必上的网站，各种编程问题如果在这个站上找不到解决办法，那几本上可以宣告在互联网上找不到答案了。即使没有遇到问题，也可抽时间浏览一下当前热门的问题，碰上自己能回答的，也别吝啬，热情回馈一下吧，据说很多国外公司在面试程序员时，在 stackoverflow 上回答的问题质量也是一个评价指标。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/" target="_blank" rel="noopener"
>https://github.com/&lt;/a> 世界最大开源社区，免费送你版本控制空间，可玩性很高，连微软等大公司也将自己的开源代码放在上面托管，牛人很多。想要成为牛人？先在 github 上 follow 那些牛人吧，看看他们在做什么项目，在写什么样的代码。&lt;/li>
&lt;li>&lt;a class="link" href="http://news.ycombinator.com/" target="_blank" rel="noopener"
>http://news.ycombinator.com/&lt;/a> hackernews，《黑客与画家》的作者，硅谷著名孵化器创始人 ycombinator 创建的站点，很多科技创业项目首选的推广平台，此网站乍一看很粗糙，但是干货很多，经常有大神级牛人在上面发布作品。&lt;/li>
&lt;li>&lt;a class="link" href="http://news.dbanotes.net/news" target="_blank" rel="noopener"
>http://news.dbanotes.net/news&lt;/a> 上一个网站的国内版，中文，国内著名 DBA 冯大辉创建，质量虽不比 hackernews，但可以了解国内的技术形式。&lt;/li>
&lt;li>&lt;a class="link" href="http://geek.csdn.net/" target="_blank" rel="noopener"
>http://geek.csdn.net/&lt;/a> 国内著名程序员网站 CSDN 出品的 hacknews，文章质量良莠不齐，偶有精品，可以偶尔上去看看。&lt;/li>
&lt;/ul>
&lt;h3 id="1学习提升">1、学习提升
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="http://study.163.com/cloud/myCloudClass.htm#/cloudClass/index" target="_blank" rel="noopener"
>网易云课堂&lt;/a> 说网易为中国互联网的良心一点儿都不过分（百度去死去死），云课堂内容质量非常高，基本上可以做到足不出户读完各种大学，另外网易还翻译了很多精彩的 TED 演讲视频，TED 爱好者的福音。&lt;/li>
&lt;li>&lt;a class="link" href="http://www.imooc.com/" target="_blank" rel="noopener"
>慕课网&lt;/a> 免费学习各种 IT 技能，前端、后端、设计、架构等等，基本上如果你愿意学，可以自学成为全栈工程师，那些整天嚷嚷着就差一个程序员了的创业团队，上去看看吧。&lt;/li>
&lt;li>&lt;a class="link" href="http://www.codecademy.com/" target="_blank" rel="noopener"
>Codecademy&lt;/a>在线学习编程网站的鼻祖，以前我 Js 和 Python 就是在这上面学的，艺不压身，多掌握基本语言吧，每个语言都代表一种编程思想。&lt;/li>
&lt;li>&lt;a class="link" href="http://www.gogoup.com/" target="_blank" rel="noopener"
>高高手&lt;/a> 这家教 Photoshop、设计和摄影，比蓝翔还要好。&lt;/li>
&lt;/ul>
&lt;h3 id="2视野">2、视野
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="http://www.zhihu.com/" target="_blank" rel="noopener"
>知乎&lt;/a> 不要多上，否则容易产生你掌握很多知识的错觉，佛家说，贪恋知识也是一种“贪”，但是确实可以开阔视野，增长见识，适可而止。&lt;/li>
&lt;li>&lt;a class="link" href="http://www.quora.com/" target="_blank" rel="noopener"
>quora&lt;/a> 知乎就是模仿的它，问答质量非常高，但里面也充斥着各种鸡汤，如果想练习英文阅读能力，可以尝试一下。&lt;/li>
&lt;/ul>
&lt;h3 id="3音乐">3、音乐
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="http://ear.duomi.com/" target="_blank" rel="noopener"
>邻居的耳朵&lt;/a> 一篇美文配一首好歌，能让你经常发现以前错过的好歌。&lt;/li>
&lt;li>&lt;a class="link" href="http://www.rainymood.com/" target="_blank" rel="noopener"
>rainymood&lt;/a> 这个网站只有一个功能，就是播放下雨的声音，催眠最佳。&lt;/li>
&lt;li>&lt;a class="link" href="http://www.audiobar.net/forum.php" target="_blank" rel="noopener"
>音频应用&lt;/a> 国内第一的录音论坛。&lt;/li>
&lt;li>&lt;a class="link" href="http://music.163.com/#" target="_blank" rel="noopener"
>网易云音乐&lt;/a> 不多说了。&lt;/li>
&lt;li>&lt;a class="link" href="http://www.exound.com/" target="_blank" rel="noopener"
>叉烧网&lt;/a> 音乐器材是一个跟单反一样的不归路。&lt;/li>
&lt;/ul>
&lt;p>###4、美图&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://500px.com/" target="_blank" rel="noopener"
>500px&lt;/a> 高质量图片网站，很多摄影师在上面出售作品，做 PPT 时用的到&lt;/li>
&lt;li>&lt;a class="link" href="https://www.pinterest.com/" target="_blank" rel="noopener"
>pinterest&lt;/a> 图片网站，瀑布流图片站的鼻祖，做 PPT 时用得到&lt;/li>
&lt;/ul>
&lt;p>###注：有些网站可能需要翻墙才能上。&lt;/p></description></item><item><title>2015年的个人总结</title><link>https://sbabybird.github.io/p/2015%E5%B9%B4%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 26 Dec 2015 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/2015%E5%B9%B4%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</guid><description>&lt;p>按照惯例，工作总结写完了，可以开始写个人总结了，只总结与工作无关的。&lt;/p>
&lt;p>0、家庭&lt;/p>
&lt;ul>
&lt;li>按照年初的预定目标，要抽出更多时间跟家人一起，基本也实现了，比如陪赵老师逛了两次街（元旦和年末各一次），虽然全程一脸无奈、两股战战几欲先走，但也算破了纪录了，我还总结了一个技巧，只要赵老师试衣服，我就在旁边说：“哎呀，这衣服穿上没腰啊”，不一会儿赵老师就让我一边儿歇着了，后来我还为她写了首歌，叫《一千个买鞋的理由》；&lt;/li>
&lt;li>儿子在我的引导下，现在每周都会用英文给我写一封信，写在纸上用手机拍了发给我，每一封开头的“Dear Dad”看着都很是让我有些小激动，我基本都能做到认真点评且鼓励为主，偶尔碰到不熟悉的单词，我还得查查再回复。只是他性格有些自闭，跟我小时候差不多，不擅长表达内心真实的想法。&lt;/li>
&lt;li>女儿成长很快，今年入小学没少让我以及周围的朋友费劲（感谢大家），但好在最终还是如愿以偿，我也尽量在周末多抽出时间来陪她，不过她也越来越大了，心思也多了，现在我一下班，她已经不再冲出来抱着我的小腿坐在皮鞋上跟我说“爸爸你回来啦，爸爸我好喜欢你啊”了（那时她特别像《卑鄙的我》里的那个最小的小女孩）。一想到将来会有那么一天，她推开家门扯着一个男生的手，对着坐在沙发上抽烟的我说：“爸爸这是我男朋友”时，我就心碎（赵老师评论，如果到 30 岁还没有，你更心碎）。&lt;/li>
&lt;li>父母正在慢慢苍老，不过心态还算年轻，今年暑假仍然过来检查了我的工作，相聚时间虽然不长，加上今年我中间又多回老家了几天，也算是响应国家号召，常回家看看了。我虽不爱打牌，但仍然坚持陪二老斗地主，无奈水平太次，每次都被我爸赢个精光。我爸控制欲极强，我说我周末吃饺子，他遥在千里之外还打电话跟我说，如果吃猪肉大葱馅的，以我的量，剁馅儿的时候必须只能放一根葱“那样剁出的馅儿才最好吃”。我虽心里呵呵，但嘴上还是像乙方对待甲方那样深表同意。&lt;/li>
&lt;li>十一的时候，跟妹妹约定，她从深圳，我自北京，携家人在鸡公山顺利会师，一起游玩了几天，她还千里迢迢给我带了自酿的红葡萄酒，一喝上瘾，后来我自己也在北京酿了十来斤，无奈第一次制作，缺乏经验，口感偏酸，就没有好意思拿出去给朋友品尝，我自己受累都喝完了。&lt;/li>
&lt;/ul>
&lt;p>1、健康，我的体重如愿增长了约 3 公斤，达到了历史新高度，67 公斤（冬天、棉衣），上次去买衣服时惊喜的发现腰围已增长至二尺五。但明显缺乏锻炼，精力也不如以前，目前已经认识到问题严重性，虽然没法跑步，但准备多做家务（比如拖地），多走路少坐车，饮食规律、睡眠规律，将锻炼身体正式提上日程。&lt;/p>
&lt;p>2、电影，今年还是看了很多不错的电影，有的在影院，有的在网络上看的，如果非让我给个排名的话&lt;a class="link" href="http://movie.douban.com/subject/25773932/" target="_blank" rel="noopener"
>&lt;em>《爆裂鼓手》&lt;/em>&lt;/a>应该是在第一位，明显是拍给“不疯魔不成活”的孤独者看的。&lt;a class="link" href="http://movie.douban.com/subject/11584019/" target="_blank" rel="noopener"
>&lt;em>《海洋之歌》&lt;/em>&lt;/a>是我近年来、乃至建国以来看过的最优美的动画片（又是爱尔兰这个忧郁的民族拍的），略伤感，但是每首配乐都可以单曲循环，每个画面都可以截图然后冲印挂墙上。&lt;a class="link" href="http://movie.douban.com/subject/6985803/" target="_blank" rel="noopener"
>&lt;em>《少年斯派维的奇异旅行》&lt;/em>&lt;/a>是一部意外惊喜，讲述一个天才少年走出误伤弟弟的心理阴影的过程，反正也是各种优美，适合某个周日的下午躺沙发上安静观赏。看过的新科幻大片反正就那么些，乏善可陈，倒是有一些科幻小制作非常出彩，比如&lt;a class="link" href="http://movie.douban.com/subject/6722879/" target="_blank" rel="noopener"
>&lt;em>《她》&lt;/em>&lt;/a>、&lt;a class="link" href="http://movie.douban.com/subject/24696982/" target="_blank" rel="noopener"
>&lt;em>《I 型起源》&lt;/em>&lt;/a>等等。还有一些略文艺的比如&lt;a class="link" href="http://movie.douban.com/subject/3991933/" target="_blank" rel="noopener"
>&lt;em>《深夜食堂》&lt;/em>&lt;/a>、&lt;a class="link" href="http://movie.douban.com/subject/1296778/" target="_blank" rel="noopener"
>&lt;em>《一树梨花压海棠》&lt;/em>&lt;/a>等。国产电影中只有&lt;a class="link" href="http://movie.douban.com/subject/25964071/" target="_blank" rel="noopener"
>&lt;em>《夏洛特烦恼》&lt;/em>&lt;/a>留下深刻印象，其他一概不记得，这就是拍给我们 80 后看的，全程无尿点，悲剧的内核喜剧的外表，看的时候可以放心的抹眼泪，因为别人也不知是不是笑出来的。（写到这里我突然发现，明年需要降低电影预算，拨给读书）。&lt;/p>
&lt;p>3、音乐，自从豆瓣 FM 下架了很多我收藏的红心歌曲后，我基本上就只用“网易云音乐”了，重新捡起了上班路上插着耳机听歌的习惯，以前总不舍得用耳朵，怕听伤了，后来想通了，和 XX 一样，有些事情是不能攒到老年时再做的。而且现在没那么挑剔了，苹果原装的耳塞就足矣，返朴归真了。（写到这里想起一个笑话，有一天早晨起床后发现有一只耳机不响了，后来大夫告诉我是右耳聋了，吓了我一跳，我还以为耳机坏了）。&lt;/p>
&lt;p>4、看书，基本上都是在地铁上断断续续看的，比较有印象的有&lt;a class="link" href="http://book.douban.com/subject/10785583/" target="_blank" rel="noopener"
>《思考，快与慢》&lt;/a>、&lt;a class="link" href="http://book.douban.com/subject/4187411/" target="_blank" rel="noopener"
>《万物有灵且美》&lt;/a>、&lt;a class="link" href="http://book.douban.com/subject/20452058/" target="_blank" rel="noopener"
>《The Nature of Code》&lt;/a>、&lt;a class="link" href="http://book.douban.com/subject/1941558/" target="_blank" rel="noopener"
>《设计中的设计》&lt;/a>、&lt;a class="link" href="http://book.douban.com/subject/26364209/" target="_blank" rel="noopener"
>《那些古怪又让人忧心的问题》&lt;/a>等等。看的比较杂，这些书基本上都可以开拓视野促进思考。比较实用的是我在年末的时候看了一本关于领导技能的书&amp;mdash;-&lt;a class="link" href="http://book.douban.com/subject/24371531/" target="_blank" rel="noopener"
>《周一清晨的领导课》&lt;/a>，感觉受益匪浅，书名虽然起的有些鸡汤，但是内容确实不错，对于中层领导解决在管理团队时存在的问题确实很有帮助，目前还没看完，我准备实践一下（知行合一），我身边的人，无论是不是要搞管理，我都准备向他们隆重推荐这本书。另外我在 kindle 上又看了两遍南怀瑾大师的&lt;a class="link" href="http://book.douban.com/subject/1421659/" target="_blank" rel="noopener"
>《金刚经说什么》&lt;/a>，虽然看不太懂，但还是深深体悟到了什么叫“念念不忘，必有回响”。&lt;/p>
&lt;p>5、其他，今年还是经历了很多，其中有很多意外的美好，也有痛苦的体会，但总的来说，还是好的，思想上有进步，心态也比较平和，不会为琐事计较，进一步明确了“助人为快乐之本、创造是幸福本源”的价值观，能够以比较积极的心态看待问题，乐善好施，更喜欢跟朋友聊天，尤其喜欢传递给周围的人快乐和正能量（承蒙大家错爱，无以为报，而且我觉得这也是“善”的一种）。&lt;/p>
&lt;h3 id="对于未来的期望我考虑了一下有这几点">对于未来的期望，我考虑了一下，有这几点：
&lt;/h3>&lt;ul>
&lt;li>努力去创造美好；&lt;/li>
&lt;li>发现更大的世界；&lt;/li>
&lt;li>用心体验生活；&lt;/li>
&lt;li>奉献，带给他人快乐，即善；&lt;/li>
&lt;li>负责，承担责任与使命；&lt;/li>
&lt;/ul>
&lt;p>具体点儿来说：&lt;/p>
&lt;ul>
&lt;li>对技术的热情不能消减，没有时间即使是挤时间也要坚持学习新技术，创造美好的事物；&lt;/li>
&lt;li>坚持知行合一的理念，看再多的书和文章也不如真正去实践；&lt;/li>
&lt;li>有意识的提升管理和自我管理能力，阅读管理书籍，并在现实中运用，坚持 PDCA；&lt;/li>
&lt;li>适量扩大社交圈，好朋友要常联系、常来往，缩小关注范围，降低信息噪音；&lt;/li>
&lt;li>多做好事，以助人为决策标准，帮助他人成功；&lt;/li>
&lt;li>锻炼身体，多做家务，多陪家人，即“负责”；&lt;/li>
&lt;li>慢下来，尤其是在做决策时，需要认真考虑和分析，始终坚持原则与最初的目标定义，也是“负责”；&lt;/li>
&lt;/ul></description></item><item><title>我喜欢的段子，在2015</title><link>https://sbabybird.github.io/p/%E6%88%91%E5%96%9C%E6%AC%A2%E7%9A%84%E6%AE%B5%E5%AD%90%E5%9C%A82015/</link><pubDate>Sun, 20 Dec 2015 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E5%96%9C%E6%AC%A2%E7%9A%84%E6%AE%B5%E5%AD%90%E5%9C%A82015/</guid><description>&lt;p>幽默不是对什么都不在乎，相反，幽默的人都很认真，而且需要勇气，一个敢于自黑的人一定是睿智又自信的。&lt;/p>
&lt;p>能理解幽默的人，也一定是一个有趣的人，感谢那些幽默的段子手，使我在工作之余得到放松，下面是微博网友在 2015 年收集的一些网络段子，分享给大家，我已经主动过滤了一些低俗没品的（列位如果谁有需要请私下联系，反正我也没有）。&lt;/p>
&lt;p>0、我这辈子最重要的三点是：岁月安好、懂得感恩、与你相随。总的来说就是 Fine，thinks and you。（@大哥王振华）。&lt;/p>
&lt;p>1、世界五大王牌情报组织：CIA（中情局）、KGB（克格勃）、MOSSAD（摩萨德）、MI6（军情六处），BJCYQZ（北京朝阳群众）（@警察蜀黍）。&lt;/p>
&lt;p>2、一个简易的提升逼格的方法：如果你愿意，你可以在简历上写自己是美国时代周刊 2006 年度人物，曾获 2008 年感动中国组委会特别大奖。不用担心吹牛被捉，因为这两年的获奖者分别是“everyone”和“全体中国人”（@英式没品笑话百科）。&lt;/p>
&lt;p>3、遇见一个中国导游，他说从前最头疼的，就是带大团游客到处乱走，必须不停点人头回去找，不然很容易散。但现在他弄了一个随身 wifi，免费提供给团员连接。从此游客们都紧紧跟着他，亦步亦趋，生怕离远了没信号，再也不担心队伍走散了。（@马伯庸）。&lt;/p>
&lt;p>4、女孩喜欢男孩，每晚都和男孩聊天。可男孩要么半天回一句，要么干脆不理。女孩依旧主动着。终于在某一天，男孩突然回的很快，高谈阔论。女孩感动，努力终于没有白费，鼓起勇气问：“你终于对我有感觉了吗？”男孩淡淡地说：“不是呀，今天刚刚把三星手机换掉了。”（@福大校长）。&lt;/p>
&lt;p>5、朋友说：“油价不能再跌了，要不只剩下税了！”（@傅蔚冈）。&lt;/p>
&lt;p>6、黄晓明是一个青岛人，婚礼却在上海办，可见家乡的酒席是有多贵。。。（@江上渡）。&lt;/p>
&lt;p>7、弟弟带了一群朋友回家吃饭，一会儿弟弟神神秘秘的到厨房对做饭的妈妈说：“这里面可有一个是你未来的儿媳妇。”妈妈头都没抬，说：“是穿白色裙子的那个吧。”弟弟惊讶的说：“妈，您真神了，怎么看出来的？”妈妈淡淡的说：“因为这些人里面我最烦的就是她。”&lt;/p>
&lt;p>8、母语就是数钱的时候心里念的语言。（@laoyang945）。&lt;/p>
&lt;p>9、晚上和女朋友吃完饭，我说：“待会儿把碗刷一下。”她说：“你自言自语的声音怎么这么大？”（@柳三便）。&lt;/p>
&lt;p>10、刚才我女人在弄新买的面包机。她把内胆洗干净以后让我擦干，说：“你要擦得很干，一点水都不能有。要不然面包就做不好。”然后我死命擦了五分钟，里里外外都没有一丝水迹。接着她开始放配料。第一步，加入 70 毫升水。。。（@段子楼）。&lt;/p>
&lt;p>11、印度舞蹈的精要是左手向下拍小狗，右手抬起拧灯泡，脚步动作是一边踩缝纫机，一边打转。&lt;/p>
&lt;p>12、小时候每当我生病，母亲都会为我冲一杯咖啡，她温柔地说：“外国人都喝这个的。”幼小的我总是害怕咖啡，酸甜苦涩交错。如今我走遍米萝、上岛、星巴克都找不到小时候喝的那个味道，直到那天我喝了一杯板蓝根&amp;hellip;&amp;hellip;.（@张大进就是我）。&lt;/p>
&lt;p>13、最近小区广场舞大妈们都不跳了，问下邻居大妈怎么不跳了，是不是感觉扰民不好意思了。大妈说：“不知道谁家的孩子穿个红肚兜，我们一跳他就在前面说，孩儿们操练起来！”&lt;/p>
&lt;p>14、朋友家孩子满月，我用 EMS 给孩子快递了一份礼物。收到快递后，孩子高兴地打电话对我说：“谢谢您的礼物，我非常喜欢”（@剑神葡萄）。&lt;/p>
&lt;p>15、唐僧师徒四人正在吃饭，突然“轰隆！”一生巨响，吓了大家一跳，唐僧抬眼望了望，指着山下修路炸碎的石头说：“悟空，你妈生二胎了。”&lt;/p></description></item><item><title>可能要用一辈子时间去学习</title><link>https://sbabybird.github.io/p/%E5%8F%AF%E8%83%BD%E8%A6%81%E7%94%A8%E4%B8%80%E8%BE%88%E5%AD%90%E6%97%B6%E9%97%B4%E5%8E%BB%E5%AD%A6%E4%B9%A0/</link><pubDate>Sun, 13 Dec 2015 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8F%AF%E8%83%BD%E8%A6%81%E7%94%A8%E4%B8%80%E8%BE%88%E5%AD%90%E6%97%B6%E9%97%B4%E5%8E%BB%E5%AD%A6%E4%B9%A0/</guid><description>&lt;p>完成自定的作业，想到哪儿是哪儿。&lt;/p>
&lt;p>说说“学习”本身，它可以是一种行为，也可以是一种态度。狭义上来说，“学习”可能指的是习得某种技能的手段，广义上来说，获取或领悟任何知识的过程都算是“学习”。&lt;/p>
&lt;p>#“好奇”
对这个世界强烈的好奇心应该是最原始的学习动力了，大家小的时候都有很强烈的好奇心，那个时候世界充满了未知和不可预测，晚上没太阳的时候向日葵怎么办、天上的星星会不会掉下来、校长是不是不上厕所、电视机关了之后里面的人去哪儿了，等，很多事情等待我们去探索。等到这些事情有了“答案”，我们也长大了，老了，对很多事情不再感到好奇了，我们可以使用表情符号聊天、会通过微积分求曲面的面积、可以制定很详尽的工作计划并跟踪、知道计算机从按下电源开关后里面发生的一切事情不过是一堆二进制在流动，我们以为世界就是这个样子了，并号称树立了完整的世界观。&lt;/p>
&lt;p>回顾人类文明的进程，现在的人类并不是最聪明的，或者很聪明，但是智慧不足，因为我们现在所做的事情，发出的那些看似看明白的感悟，最终发现都是古人考虑 n 遍以后剩余的思想渣渣，不信你去看看《道德经》。&lt;/p>
&lt;p>所以，我不能被自己所谓的“世界观”所束缚，在想明白上述事情之后，我觉得我还是要在可控的范围之内保持好奇心，以及对未知的敬畏之心。（所谓可控的范围，是比如上次我去看耳鼻喉的医生，就想问一下我的鼻中隔偏曲是不是跟挖鼻屎有关，我怕他让我转到精神科，还是忍住了。）&lt;/p>
&lt;p>#“求知”
多看书应该是最好的方法，所谓开卷有益一点儿也没错，现在大家都抱怨没有时间，实际上是一个伪命题，我们只是把时间用在了很多无意义的事情上，比如发呆、不断在手机上刷那些不痛不痒的新闻、主动看烂片等，这个时候脑子就在空转，时间久了就会引起各种问题，比如信息的碎片化导致根本无法长时间集中注意力，比如对于大量信息带来的焦虑，甚至感到“迷茫”，哈哈，很多人的迷茫其实就是因为这个导致的，静下心来看书就能解决。&lt;/p>
&lt;p>上网去探索信息也可以，但是分内容的优劣，我觉得新闻类的几乎可以不看，重点关注一些与你相关的即可，可以去找一些不错的博客来看，具体内容根据个人喜好来定，比如我比较喜欢看一些技术类博客，很多博主写的都比较有深度，我以前喜欢使用谷歌的 Reader 阅读器来订阅博客，后来谷歌把它关了，没有更好的客户端了，好在现在移动端也有很多不错的订阅客户端（推荐“即刻”，鄙视“今日头条”）。&lt;/p>
&lt;p>仅仅停留在信息获取上是远远不够的，网络在带来便利的同时，有一个很大的副作用，就是使我们失去行动能力，我们在硬盘上收集大量的资料，收藏很多篇非常认同的文字，沉浸在朋友圈分享的各种技巧里，就是懒得抬手去验证一下（这一段可以谱曲唱了）。我们很容易就能知道 TCP 的三次握手，也知道现代大数据的处理都基于 Map Reduce 思想，当我们看了一两篇文章之后甚至开始沾沾自喜，仿佛已经成了该领域的专家。孔子和孟子都说过“学习东西最糟糕的方法就是看很多书、听很多讲课、看很多视频，而不亲自动手去试一下”，创立了伟大心学的王阳明也说过“知行合一最牛掰”。所以亲自动手试一试，将领会的思想运用在现实中还是很有必要的。&lt;/p>
&lt;p>#“创造”
这个世界上获取快乐的方式有很多，但是获得幸福的方法只有一个，那就是“创造”。消费东西很容易带来短暂的快乐，比如女生买包、男生买车，当时很爽，但只是暂时的，保持持续的幸福感就是不断去创造，不一定非得创造出实物，因为创造的过程本身就是快乐的，可以是写一首歌，一篇文章，一段代码，制造一段美好回忆等等，说到这里我突然想到那个只想当木匠的明朝皇帝，哈哈。&lt;/p>
&lt;p>因为“创造”本身是只有智慧生命才具有的能力，所以我们才因为创造而感到幸福，再说远一点儿，宇宙本身是一个“熵增”的过程（我靠好高深），而“创造”恰恰是将“无序”变为“有序”的逆过程，可能这种叛逆感才是让我们感到很爽的原因吧。&lt;/p>
&lt;p>#“坚持”
最近我一直在挑战自己，坚持了一些创造的习惯，简单的事情坚持下来应该也是一件伟大的事情吧，所以写到最后，我突然想起几年前的某个周末，我坐在马桶上，捧着一本《万物简史》，一边感叹宇宙的神奇，一边埋怨自己买书如山倒，看书如抽丝。然后，突然就像当年的须菩提那样，非常虔诚地，由衷地发起了一个愿望&amp;mdash;-我要用一辈子的时间去学习。遂将我的签名改成了“好奇”、“求知”、“创造”，这三个词后来基本上作为我以后的衡量做一件事是否有意义的准则了。&lt;/p>
&lt;p>###考虑到不违反最新的广告法，我谨慎地将文章标题前加了一个“可能”。&lt;/p></description></item><item><title>life-is-short</title><link>https://sbabybird.github.io/p/life-is-short/</link><pubDate>Sun, 06 Dec 2015 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/life-is-short/</guid><description>&lt;p>工作总结写的头昏脑涨，换换脑子。&lt;/p>
&lt;p>每年的这个时候最容易引发各种感慨，年底，除了工作上需要总结之外，生活上也应该进行一次梳理，回顾这一年的体验，感受了多少幸福，经历了哪些痛苦，吃了什么，玩了什么，读了什么，写了什么，看了什么，听了什么，喝过几次断片儿，摔了几个手机，额。&lt;/p>
&lt;p>可以总结，但不要陷入对回忆的感慨，应该以积极的心态去整理。现在流行一种病，缅怀青春，而且怀起来各种哀怨，哀怨声中尽情的去体验那种令人愉悦的忧伤，仿佛只有过去的才是美好的，对于未来和现在则是一脸迷茫。而且我发现这种行为有越来越年轻化的趋势，比如，金妍昨天跟我抱怨说，自从上了小学，压力很大，好怀念小时候，于是我给她买了个带奶嘴的水壶（简直行为艺术）。&lt;/p>
&lt;p>去年过年的时候，我回老家，跟我妈抱怨，说时间过的飞快，转眼又是一年，感觉没干啥 balabala。我妈没有拿爱因斯坦相对论那一套唬我，而是轻蔑的一笑，说，你之所以感到时间过得很快，可能是因为你的生活还很轻松快乐，过的不艰难，对于那些每天还在担心如何吃饱饭的人来说，可能就没那么快了。我竟无言以对。&lt;/p>
&lt;p>我也有我的解释。我认为，随着生活阅历的增加，我们对于新鲜事物的敏感度越来越低，小的时候对于任何事物都很好奇，大脑无时不刻都在感受新东西，所以 45 分钟的课堂才显得那么难熬。到了对于任何东西都有了自己的认识之后，看啥都没那么新鲜了，所以才觉的时间飞快，感叹白驹过隙，光阴真荏苒。就连子都曾经站在川上曰：「逝者如斯夫，不舍昼夜。」&lt;/p>
&lt;p>看来，life 不是线性的，是一个加速过程，笑。&lt;/p>
&lt;p>#我准备抽时间做一下 2015 年的个人总结#&lt;/p></description></item><item><title>关于“刷牙沉思录”</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E5%88%B7%E7%89%99%E6%B2%89%E6%80%9D%E5%BD%95/</link><pubDate>Sun, 29 Nov 2015 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E5%88%B7%E7%89%99%E6%B2%89%E6%80%9D%E5%BD%95/</guid><description>&lt;p>我近期新增了一个习惯，将我每天在地铁上、刷牙时或者其他发呆的时候，考虑的那些无聊或有聊的问题，整理出来，发在微信朋友圈里，并取名“刷牙沉思录”，话题比较跳跃，每天都不同，但有一点，这些都是我经过慎重考虑、认真分析过的问题。通过简单的一段文字，全方位体现了我对思考的热爱，以及我充分具备当一个哲学家（神经病）的潜质。&lt;/p>
&lt;p>爱幻想、胡思乱想是我从小就有的毛病，基本上整个上学阶段，每堂课，我都能体验“身未动、心已远”那种灵魂出窍的感觉，老师在课堂上讲的眉飞色舞、唾沫飞溅，我盯着黑板，考虑如果老师是一个潜伏在我们学校的外星人，而我是不小心发现了这个秘密的人，我该如何向大家解释人们才能相信我。&lt;/p>
&lt;p>我吃东西不少，但一直长不胖，这一方面很拉仇恨，另一方面，我想说的是，思考是很耗费能量的一件事情，每天睡觉之前，我都能感受到我大脑的不安分，这直接导致失眠和辗转反侧，我必须通过畅想一些事情，才能逐渐平息，慢慢睡去。好在通过多年的总结，有几个经典的设定可以供我可劲儿折腾。&lt;/p>
&lt;p>比如其中有一个是，如果我走在沙漠里，荒芜人烟，各种供给也基本耗尽，这个时候我发现了一个重达三百多吨的金块，我该如何行动才能将这些东西带回。不过我不太喜欢这个设定，难度较大，而且带来的实惠太小。我比较喜欢银河系漫游这样的设定，驾驶一艘乳白色的梭子状飞船（太空中由于没有大气，所以飞船的外观可以很随意，无需考虑空气动力学），船体有四分之一都是透明的玻璃罩，我坐在飞船的控制台前，飞向银河系的边缘，不过一般还没飞出太阳系我就睡着了。&lt;/p>
&lt;p>刷牙沉思录就是在这种条件下产生的，睡觉之前，刷牙的时候，满嘴的泡沫，看着水池里逆时针（说明我在地球的北半球）旋转的漩涡，有时就会有比较虚幻的感觉，会顿悟一些鸡毛蒜皮的事情，但是这个宇宙中的真理往往都是蕴藏在非常浅显的道理中的，所以我一般会怀着非常崇敬的心情将这些记录下来。&lt;/p>
&lt;p>一个偶然的机会，我发现将这些东西发在朋友圈进行分享或许也很不错，这样也许能让喜欢我的朋友更加了解我从而更加亲密，讨厌我的人会更加坚定不移地认为我是一个傻 Ⅹ 而将我拉黑，从而减轻我的社交压力。如果有可能，我想我会坚持下去，不管还发不发朋友圈。&lt;/p>
&lt;p>这些年我思考记录的东西，比较琐碎混乱，以前总觉得没有用，甚至是浪费时间，现在忽然想通了，其实这些思考之间是有联系的，在积累达到一定量的情况下，悟性被激发的时候就可以发现一些规律和更抽象升华的知识或方法论，也许就是常说的量变引发质变吧，大脑里的知识积累到一定程度，就是『大数据』了，呵呵。&lt;/p>
&lt;p>#我可能会在每个周末的晚上写一篇短文#&lt;/p></description></item><item><title>SICP 课后练习题1.9</title><link>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.9/</link><pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.9/</guid><description>&lt;h4 id="练习-19--下面两个过程各定义了一种加起两个正整数的方法他们都基于过程inc它将参数增加1和dec它将参数减少1-请用代换模型展示这两个过程在求值add-4-5时所产生的计算过程这些计算过程是递归的或者迭代的吗">练习 1.9 下面两个过程各定义了一种加起两个正整数的方法，他们都基于过程inc(它将参数增加1)和dec(它将参数减少1) 。请用代换模型展示这两个过程在求值&lt;code>(add 4 5)&lt;/code>时所产生的计算过程。这些计算过程是递归的或者迭代的吗？
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">= &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">dec&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">= &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">dec&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解答：根据代换模型分别展开如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据展开可以看出，第一个计算过程是递归的，因为明显有一个逐步扩展然后又收缩的递归计算链条。第二个计算过程是迭代的，没有扩展、收缩的过程，而是使用a和b存储了常量。&lt;/p></description></item><item><title>忘掉GTD、忘掉所谓的高效习惯</title><link>https://sbabybird.github.io/p/%E5%BF%98%E6%8E%89gtd%E5%BF%98%E6%8E%89%E6%89%80%E8%B0%93%E7%9A%84%E9%AB%98%E6%95%88%E4%B9%A0%E6%83%AF/</link><pubDate>Sun, 04 Jan 2015 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BF%98%E6%8E%89gtd%E5%BF%98%E6%8E%89%E6%89%80%E8%B0%93%E7%9A%84%E9%AB%98%E6%95%88%E4%B9%A0%E6%83%AF/</guid><description>&lt;p>一口气看完了三本《搞定》系列，我突然“顿悟”了，我意识到，根本不存在所谓的“时间管理”，在脱离了对自己目标清晰认知的前提下，任何时间管理的方法都是毫无意义乃至浪费时间的。&lt;/p>
&lt;p>然而虽然很多教授方法的书籍里面也提到了这一点，却无一告诉读者如何对自己的目标找到清晰的认知。&lt;/p>
&lt;p>无论是否学习过各种时间管理或精力管理的技巧，每个人实际上已经自成体系有了一套多年来摸索出来的方法，应对自身的工作、生活、欲望，出于对效率的无尽追求，不断贪心想要提升，人们发明了各种方法来管理时间，有简单的也有复杂的，这些方法没有例外，都是在告诉人们一件事情，那就是如果你的方法得当，所有的事情都可以有效掌控，你的人生最后可以变成一张写在纸上的待办清单。然而事实呢，恰恰相反，可控的永远是少数，未知远远大于已知，以有限的精力与未知做斗争无异于以卵击石，到头来弄个筋疲力竭，垂头丧气，改去寻找其他的方法，岂不知出发点就是错误的。&lt;/p>
&lt;p>不如换个思路，放弃对方法的追求，去思考一些本质上的东西。&lt;/p></description></item><item><title>2014年的个人总结</title><link>https://sbabybird.github.io/p/2014%E5%B9%B4%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/2014%E5%B9%B4%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</guid><description>&lt;p>今天是 2015 年的第三天，元旦假期就要过去，本打算在 evernote 上记录一下对新年的愿景，谁知写了半天，没保存上，全丢了，想起来还有个地方叫简书，就索性在这里写吧，既然准备动笔重新开始，不妨先总结一下过去的一年。&lt;/p>
&lt;p>我的 2014，这一年我过得比较平淡，也比较充实，认真工作、积极创新、乐于助人、波澜不惊，没事儿还看看电影、找朋友喝喝小酒吹吹牛，可以说相当的自我。我刚才又翻看了一下年初时写下的期待，基本上都实现了。&lt;/p>
&lt;p>1、我个人在今年才开始使用智能手机（赵老师倒是早就用上了苹果，手机领先我一个世代），在此之前，我一直鄙视智能手机（电池不行、没有实体键盘输入不方便、软件装多了就慢等等），不过，在我用了一台大屏幕智能手机之后我彻底改变了看法（大屏就是爽啊，技术进步迅猛，现在的手机已经没有性能问题了），从此我的黑莓就躺在了抽屉里吃灰，我的包里也不用随时塞一个厚重的 iPad 了，笔记本电脑就更不用背了。对了，在中国移动的反复撩拨下，我终于也开通了 4G，不必再忍受 GPRS 的龟速了。&lt;/p>
&lt;p>2、今年的电影看得比较少，没有什么值得回忆的，暑假的时候我带孩子们去看了场『变形金刚 4』，片子又烂又长，中途不得不去了两次厕所。&lt;/p>
&lt;p>3、拜某局所赐，美剧也看得不多，反而省了时间做其他的事情。&lt;/p>
&lt;p>4、利用业余时间，我学会了用 Photoshop 修片，在网上系统了学习了课程，而且与实践结合，将自己拍的照片调的还算满意，不过一看就是个新手，调出的照片远远就能闻见浓浓的后期味儿。&lt;/p>
&lt;p>5、买了个电钢琴，给金妍练琴用，开始时我也跟着瞎掺和，甚至一起做指法练习，可以没坚持下来，现在她已经可以弹出完整的曲子了，我还停留在小星星阶段。&lt;/p>
&lt;p>6、不过我在吉他的扫弦方面进步不小哦，至少我是这么以为的，因为听起来，不那么像噪音了，我甚至和金妍一起录了一曲『小苹果』，感觉还『蛮拼的』。&lt;/p>
&lt;p>7、赵老师开车闯了个红灯，一下子就扣了我 6 分，从此我开车上路都多里哆嗦不敢开快像个娘炮，连老杨都比我开的猛。&lt;/p>
&lt;p>8、读书读的不算多，但也陆续看完了几本，『ReWork』、『给青年的十二封信』、『禅与摩托车维修艺术』、『围城』等等，另外我又看了一遍『黑客与画家』，每次看都有新的收获。在办公室，还有一本道德经放在抽屉里，每当工作累了就拿出来翻一翻，虽然总是看不懂，不过用来缓解压力效果还是不错的。&lt;/p>
&lt;p>9、陪家人的时间比以前有所增多，甚至去了一趟幼儿园参加家长互动的活动，由于以前去的太少，老师们都不认识我，不得不让孩子亲自出来指认。活动中，与孩子的互动环节，在老师的指引下，孩子们伴随着音乐给家长捏肩捶背无比亲昵，我看到了旁边一个像我一样的木纳父亲，那一刻，他的眼里竟泛着泪光。&lt;/p>
&lt;p>回顾了过去的一年，再考虑一下我的 2015，给未来一些愿景和期待：&lt;/p>
&lt;p>1、坚持学习，为了兴趣和爱好去学习，并尝试做一些记录，去年年末的时候，我将 SICP（计算机程序的构造和解释）的部分课后练习题做完后写到我的博客里，这是一个不错的开始，今年争取能做完一半，如果有余力的话，将 The natural of code 这本书的练习题也做了记录到博客中。&lt;/p>
&lt;p>2、我的人生目标仍然是不断创造出美好的东西，继续保持好奇心，做好玩的事儿。每天的 PDCA 都要围绕这个目标进行。&lt;/p>
&lt;p>3、不放弃自己的爱好，吉他、摄影、绘画、编程等等这些，多抽时间放在上面，为了防止以后不会写字，可以考虑使用钢笔临摹一些硬币字帖。&lt;/p>
&lt;p>4、通过互联网优化自己的工作，关注最新动态，永远对技术敬畏。&lt;/p>
&lt;p>5、多看书，kindle 里没看的书还很多，争取每个月都读一本。&lt;/p>
&lt;p>6、少上网，2014 年已经有意识的限制自己的上网时间，2015 年要做的更好，每天固定少量时间阅读英文咨询（hacknews、reddit、thenextweb 等），每周固定时间阅读中文咨询（知乎等）即可。&lt;/p>
&lt;p>7、多行动，少踌躇，别怕犯错。&lt;/p></description></item><item><title>SICP 课后练习题1.8</title><link>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.8/</link><pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.8/</guid><description>&lt;h4 id="练习-18-求立方根的牛顿法基于如下事实如果y是x的立方根的一个近似值那么下式将给出一个更好的近似值">练习 1.8 求立方根的牛顿法基于如下事实，如果y是x的立方根的一个近似值，那么下式将给出一个更好的近似值：
&lt;/h4>&lt;p>$$ \frac{x/y^2+2y}{3} $$&lt;/p>
&lt;p>请利用这一公式实现一个类似平方根过程的求立方根的过程。&lt;/p>
&lt;p>解答：基本思路与求解平方根的实现是一致的，区别再有得到更好值&lt;code>improve&lt;/code>的过程有变化，只需根据公式描述进行实现即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">improve&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="nv">x&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="nv">guess&lt;/span> &lt;span class="nv">guess&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="nv">guess&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">good-enough?&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">next&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;lt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">abs &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="nv">guess&lt;/span> &lt;span class="nv">next&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">guess&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mf">0.001&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">abs &lt;/span>&lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;lt; &lt;/span>&lt;span class="nv">x&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">cbrt-iter&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">good-enough?&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">improve&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">improve&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">cbrt-iter&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">improve&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">cbrt&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">cbrt-iter&lt;/span> &lt;span class="mf">1.0&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>SICP 课后练习题1.7</title><link>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.7/</link><pubDate>Sat, 27 Dec 2014 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.7/</guid><description>&lt;h4 id="练习-17-对于确定很小的数的平方根而言在计算平方根中使用的检测good-enough是很不好的还有在现实的计算机里算术运算总是以一定的有限精度进行的这也会使我们的检测不适合非常大的数的计算请解释上述论断用例子说明对很小和很大的数这种检测都可能失败实现good-enough的另一种策略是监视猜测值在从一次迭代到下一次的变化情况当改变值相对于猜测值的比率很小时就结束请设计一个采用这种终止测试方式的平方根过程对于很大和很小的数这一方式都能工作吗">练习 1.7 对于确定很小的数的平方根而言，在计算平方根中使用的检测good-enough?是很不好的。还有，在现实的计算机里，算术运算总是以一定的有限精度进行的。这也会使我们的检测不适合非常大的数的计算。请解释上述论断，用例子说明对很小和很大的数，这种检测都可能失败。实现good-enough?的另一种策略是监视猜测值在从一次迭代到下一次的变化情况，当改变值相对于猜测值的比率很小时就结束。请设计一个采用这种终止测试方式的平方根过程。对于很大和很小的数，这一方式都能工作吗？
&lt;/h4>&lt;p>解答：good-enough?当前采用的判断方式是，对比猜测值的平方结果与X的值之间的差距，当差距小于某个阙值时（比如0.001），就停止计算。当X很小或很大时，这种检测就会失败，比如，假设我们的阙值设置为0.001，那么当X本身小于这个阙值时，就会检测失败，得出错误结果，当X很大时，也会由于精度不足而一直达不到最佳猜测值，导致死循环。&lt;/p>
&lt;p>因此，要解决这一问题，可以按照题目中给出的思路对good-enough?过程进行修改，不再判断猜测值平方与X的差距，而是判断两次猜测值之间的比率。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">good-enough?&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">next&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;lt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">abs &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="nv">guess&lt;/span> &lt;span class="nv">next&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">guess&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mf">0.001&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: good-enough?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">sqrt-iter&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">good-enough?&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">improve&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">improve&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">sqrt-iter&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">improve&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: sqrt-iter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sqrt &lt;/span>&lt;span class="mf">0.00000000001&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: 3.1622776601874535e-6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sqrt &lt;/span>&lt;span class="mi">100000000000000000000000000000000000000000000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: 1.0000000000001497e22&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在新的&lt;code>good-enough?&lt;/code>中，传入的是两次猜测值，所以还要修改&lt;code>sqrt-iter&lt;/code>过程，在调用时计算两次猜测值。&lt;/p></description></item><item><title>SICP 课后练习题1.6</title><link>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.6/</link><pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.6/</guid><description>&lt;p>采用牛顿法求平方根的过程如下。开始时，我们有了被开方数的值（现在需要做的就是算出它的平方根）和一个猜测值。如果猜测值已经足够好了，有关工作也就完成了。如若不然，那么就需要改进猜测值（求出猜测值与被开方数除以猜测值的平均值），并重复这个计算过程。具体编写代码如下（在MIT scheme解释器中）。&lt;/p>
&lt;p>定义&lt;code>sqrt-iter&lt;/code>过程，与上述描述完全对应。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">sqrt-iter&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">good-enough?&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">guess&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">sqrt-iter&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">improve&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">x&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: sqrt-iter&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>定义改进猜测值的过程&lt;code>improve&lt;/code>，返回猜测值与被开方数除以猜测值的平均值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">improve&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">average&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="nv">x&lt;/span> &lt;span class="nv">guess&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: improve&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>定义求平均数的过程&lt;code>average&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">average&lt;/span> &lt;span class="nv">x&lt;/span> &lt;span class="nv">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="nv">x&lt;/span> &lt;span class="nv">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: average&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>定义判断猜测值是否足够好的过程&lt;code>good-enough?&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">good-enough?&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;lt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">abs &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">square&lt;/span> &lt;span class="nv">guess&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="mf">0.001&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: good-enough?&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>定义求绝对值和平方的过程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">abs &lt;/span>&lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;lt; &lt;/span>&lt;span class="nv">x&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: abs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">square&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="nv">x&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: square&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>定义最上层的过程，用于启动整个工作（使用&lt;code>1&lt;/code>这个数字作为任何数的初始猜测值）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sqrt &lt;/span>&lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">sqrt-iter&lt;/span> &lt;span class="mf">1.0&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: sqrt&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行&lt;code>sqrt&lt;/code>过程，并以&lt;code>9&lt;/code>为参数，求得平方根为&lt;code>3&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sqrt &lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: 3.00009155413138&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="练习16----alyssa-phacker看不出来为什么需要将if提供为一种特殊形式她问为什么我不能直接通过cond将它定义为一个常规过程呢alyssa的朋友eva-lu-ator断言确实可以这样做并定义了if的一个新版本">练习1.6 Alyssa P.Hacker看不出来为什么需要将if提供为一种特殊形式，她问：“为什么我不能直接通过&lt;code>cond&lt;/code>将它定义为一个常规过程呢？”Alyssa的朋友Eva Lu Ator断言确实可以这样做，并定义了&lt;code>if&lt;/code>的一个新版本：
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">new-if&lt;/span> &lt;span class="nv">predicate&lt;/span> &lt;span class="nv">then-clause&lt;/span> &lt;span class="nv">else-clause&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">cond &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">predicate&lt;/span> &lt;span class="nv">then-clause&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">else &lt;/span>&lt;span class="nv">else-clause&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: new-if&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Eva给Alyssa演示她的程序：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">new-if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">= &lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">new-if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">= &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>她很高兴地用自己的&lt;code>new-if&lt;/code>重写了求平方根的程序：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">sqrt-iter&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">new-if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">good-enough?&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">guess&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">sqrt-iter&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">improve&lt;/span> &lt;span class="nv">guess&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">x&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: sqrt-iter&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当Alyssa试着用这个过程去计算平方根时会发生什么事情呢？请给出解释。&lt;/p>
&lt;p>解答：&lt;/p>
&lt;p>这个练习引入了一个新的思考，刚开始时，我以为是牵涉到了过程的局部参数概念，因为在新编写的&lt;code>new-if&lt;/code>过程中，看似可以完成条件判断并返回正确的值，但是在本例中使用却存在问题，即在递归调用&lt;code>sqrt-iter&lt;/code>时，传给该过程的&lt;code>guess&lt;/code>和&lt;code>x&lt;/code>为&lt;code>new-if&lt;/code>的局部参数，被返回给了&lt;code>new-if&lt;/code>这个过程，不会向上返回到上一层&lt;code>sqrt-iter&lt;/code>里，这样就导致了改进的猜测值永远不会被使用，使得这个计算过程永远不会结束（除非第一个猜测值恰好合适），从而导致递归调用的陷入无限循环。我在&lt;code>MIT-scheme&lt;/code>解释器里的执行结果是，解释器自动退出并提示我递归调用深度超出最大值。&lt;/p>
&lt;p>上述看起来是合理的，但是后来我考虑了其他情况，及本书在前面章节里提到了if&lt;code>(if &amp;lt;predicate&amp;gt; &amp;lt;consequent&amp;gt; &amp;lt;alternative&amp;gt;)&lt;/code>语句是条件表达式的受限形式，在执行时，先判断&lt;code>predicate&lt;/code>是否为真，然后根据结果只执行其后&lt;code>consequent/alternative&lt;/code>中的一个。如果使用本例新定义的&lt;code>new-if&lt;/code>则作为普通过程执行，传入的参数会因为解释器使用应用序求值的原因，两个表达式都会被立即求值，反应到本例中就是&lt;code>guess&lt;/code>和&lt;code>(sqrt-iter (improve guess x) x)&lt;/code>都会被立即求值，后面的那句是属于递归调用，这样也会导致改进的猜测值永远不会被使用，陷入无限层的递归调用中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="k">=&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sqrt &lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Aborting!: maximum recursion depth exceeded&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>思考：&lt;/p>
&lt;p>最初的时候，我的针对此题的思考方式是变量的作用域问题（可能lisp不会有此问题），后来发现，也许不是这样，而是由于对传入参数立即求值导致的，后续的网上搜索结果也显示出大家的答案都倾向于后者。&lt;/p></description></item><item><title>SICP 课后练习题1.4</title><link>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.4/</link><pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.4/</guid><description>&lt;h4 id="练习14----请仔细考察上面给出的允许运算符为复合表达式的组合式的求值模型根据对这一模型的认识描述下面过程的行为">练习1.4 请仔细考察上面给出的允许运算符为复合表达式的组合式的求值模型，根据对这一模型的认识描述下面过程的行为。
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">a-plus-abs-b&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">((&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="nv">b&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">+&lt;/span> &lt;span class="nv">-&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>练习1.4，通过if判断，根据b的值决定对a b所使用的运算符是+还是-，如果b大于0，则组合式为(+ a b)，反之则为(- a b)，所以组合式结果永远返回a加上b的绝对值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">a-plus-abs-b&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">((&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="nv">b&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">+&lt;/span> &lt;span class="nv">-&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: a-plus-abs-b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">a-plus-abs-b&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: 6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">a-plus-abs-b&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="mi">-2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: 6&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>SICP 课后练习题1.5</title><link>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.5/</link><pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.5/</guid><description>&lt;h4 id="练习15---ben-bitdiddle发明了一种检测方法能够确定解释器究竟采用哪种序求值是采用应用序还是正则序他定义了下面两个过程">练习1.5 Ben Bitdiddle发明了一种检测方法，能够确定解释器究竟采用哪种序求值，是采用应用序，还是正则序。他定义了下面两个过程
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">p&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">test&lt;/span> &lt;span class="nv">x&lt;/span> &lt;span class="nv">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">= &lt;/span>&lt;span class="nv">x&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">y&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而后他求值下面的表达式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">test&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">p&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果某个解释器采用的是应用序求值，Ben会看到什么样的情况？如果解释器采用正则序求值，他又会看到什么情况？请对你的回答做出解释。（无论采用正则序或者应用序，假定特殊形式if的求值规则总是一样的。其中的谓词部分先行求值，根据其结果确定随后求值的子表达式部分。）&lt;/p>
&lt;p>练习1.5 『完全展开而后规约』的求值模型为正则序求值，『先求值参数而后应用』的方式为应用序求值，因此，在应用序求值的模式下，执行&lt;code>(test 0 (p))&lt;/code>时会先求&lt;code>(p)&lt;/code>这个表达式的值，而根据定义&lt;code>(define (p) (p))&lt;/code>执行&lt;code>(p)&lt;/code>会造成递归调用，解释器陷入死循环。而在正则序求值模式下，会先展开&lt;code>test&lt;/code>过程，根据需要再决定是否执行&lt;code>(p)&lt;/code>，在本例中，由于传入的&lt;code>x&lt;/code>等于&lt;code>0&lt;/code>，所以&lt;code>(p)&lt;/code>不会被执行，因此不会陷入死循环。&lt;/p>
&lt;p>所以，根据以上分析，如果解释器采用的是应用序求值，则解释器陷入死循环，如果是采用正则序求值，则解释器输出&lt;code>;Value: 0&lt;/code>。&lt;/p></description></item><item><title>SICP 课后练习题1.1</title><link>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.1/</link><pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.1/</guid><description>&lt;h4 id="练习11----下面是一系列表达式对于每个表达式解释器将输出什么结果假定这一系列表达式是按照给出的顺序逐个求值的">练习1.1 下面是一系列表达式，对于每个表达式，解释器将输出什么结果？假定这一系列表达式是按照给出的顺序逐个求值的。
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl">&lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: 10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: 12&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="mi">9&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: 8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: 6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="nv">b&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: 19&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">= &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: #f&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">and &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="nv">b&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;lt; &lt;/span>&lt;span class="nv">b&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: 4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">cond &lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nb">= &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">((&lt;/span>&lt;span class="nb">= &lt;/span>&lt;span class="nv">b&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">else &lt;/span>&lt;span class="mi">25&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: 16&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="nv">b&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">b&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: 6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">cond &lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">((&lt;/span>&lt;span class="nb">&amp;lt; &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">else &lt;/span>&lt;span class="mi">-1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: 16&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>练习1.1的内容比较简单，基本上直接就可以计算出表达式的值，所有表达式都可以在mit-scheme的交互解释器里进行验证。&lt;/p></description></item><item><title>SICP 课后练习题1.2</title><link>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.2/</link><pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.2/</guid><description>&lt;h4 id="练习12----请将下面表达式变换为前缀形式">练习1.2 请将下面表达式变换为前缀形式：
&lt;/h4>&lt;p>$$ \frac{5+4+\Bigl(2-\Bigl(3-\left(6+\frac{4}{5}\right)\Bigr)\Bigr)}{3\left(6-2\right)\left(2-7\right)} $$&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;Value: -37/150&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>练习1.2，直接将数学表达式转换为前序表达式即可，在写的时候可以遵循一下排版规则，即同一个运算符的表达式垂直对齐。&lt;/p></description></item><item><title>SICP 课后练习题1.3</title><link>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.3/</link><pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/sicp-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E9%A2%981.3/</guid><description>&lt;h4 id="练习13----请定义一个过程它以三个数为参数返回其中较大两个数之和">练习1.3 请定义一个过程，它以三个数为参数，返回其中较大两个数之和。
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scheme" data-lang="scheme">&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">define &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">max-three-number&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span> &lt;span class="nv">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="nv">b&lt;/span> &lt;span class="nv">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="nv">c&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="nv">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="nv">b&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="nv">b&lt;/span> &lt;span class="nv">c&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">max-three-number&lt;/span> &lt;span class="mi">42&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">;Value: 49&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>练习1.3，解决此练习中问题的方法比较多，本答案使用比较朴素的方法，先比较出最大的两个数字，然后将其相加，对于三个数字来说，先在前两个中选取一个大的，然后将其与后面两个中比较大的那一个相加。还有一种思路就是可以先定义出比较大小的方法，然后再调用之，或者先对数字按从小到大排序然后加最后两个，等等。&lt;/p></description></item><item><title>win8系统下使用笔记本作为wifi热点</title><link>https://sbabybird.github.io/p/win8%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0%E6%9C%AC%E4%BD%9C%E4%B8%BAwifi%E7%83%AD%E7%82%B9/</link><pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/win8%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0%E6%9C%AC%E4%BD%9C%E4%B8%BAwifi%E7%83%AD%E7%82%B9/</guid><description>&lt;h1 id="win8系统下使用笔记本作为wifi热点">win8系统下使用笔记本作为wifi热点
&lt;/h1>&lt;h2 id="背景">背景
&lt;/h2>&lt;p>在没有无线路由的情况下，比如出差在宾馆，如果手里有一台可以上网的笔记本电脑，则可以给手机、平板电脑或者其他笔记本提供一个可以上网的wifi热点。&lt;/p>
&lt;p>我平时在单位即通过此方式给我的平板电脑和手机共享网络通道，比较方便实用，近期在使用的过程中遇到一些问题，经过摸索，解决了问题，在此记录一下，方便以后查阅。&lt;/p>
&lt;h2 id="环境需要">环境需要
&lt;/h2>&lt;ul>
&lt;li>一台通过有线连接上网（或者通过3G上网，就是说wifi网卡没有被占用）的笔记本电脑&lt;/li>
&lt;li>安装有win8操作系统（win7应该也可以）&lt;/li>
&lt;li>无线网卡芯片是intel的（否则可能不支持此技术），并使用了最新的驱动程序&lt;/li>
&lt;/ul>
&lt;h2 id="基本步骤">基本步骤
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>打开具有管理员权限的控制台窗口（在win8系统下，可以通过按&lt;code>windows+x&lt;/code>键，然后在弹出的菜单里选择『命令提示符（管理员）』）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>输入如下命令 &lt;code>netsh wlan set hostednetwork mode=allow ssid=&amp;quot;mywifi&amp;quot; key=&amp;quot;12345678&amp;quot;&lt;/code> &lt;em>其中ssid后面的热点名称和key后面的密码可以根据情况自行决定&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>上一个命令完成后，如果没有异常的话，则输入如下命令 &lt;code>netsh wlan start hostednetwork&lt;/code> &lt;em>这条命令如果执行成功会显示『已启动承载网络』，在下次系统重启后需要重新执行，如果嫌麻烦则可以做一个批处理文件每次双击即可&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>成功启动承载网络之后，进入『网络和共享中心』点击『更改适配器设置』，此时在该页里应该可以看到一个虚拟网卡（名称一般叫MicrosoftVirtual WiFi Miniport Adapter），右键点击那个可以上网的网络连接（如果是有线连接就是那个『本地连接』，如果是3G的则根据情况而定，总之必须是那个可以上网的连接），选择『属性』，切换到『共享』页，勾选『允许其他网络用户通过此计算机的Internet连接来连接』，在下面的下拉列表里选择那个刚虚拟出来的虚拟网卡。确定即可。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="常见问题">常见问题
&lt;/h2>&lt;p>执行以上第二条命令启动承载网络后，有时会显示『无法启动承载网络，组或资源的状态不是执行请求操作的正确状态』，网上大部分的文章针对这个问题给出的解决办法都是更新网卡驱动，可是对于我的笔记本无效，因为我的笔记本电脑在前一段时间是好用的，后来不好用了，根据我的摸索，解决这个问题的办法是，去『设备管理器』下面的『网络适配器』里面找找，看看有没有被禁用的设备，比如『微软托管网络协议』，如果禁用了再重新启用即可正常使用此功能了。&lt;/p></description></item><item><title>使用vs2008编译mongodb</title><link>https://sbabybird.github.io/p/%E4%BD%BF%E7%94%A8vs2008%E7%BC%96%E8%AF%91mongodb/</link><pubDate>Thu, 07 Nov 2013 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BD%BF%E7%94%A8vs2008%E7%BC%96%E8%AF%91mongodb/</guid><description>&lt;h2 id="背景问题">背景问题
&lt;/h2>&lt;p>mongodb在windwos下的官方编译包是使用vs2010编译的，从官网上下载的源代码在vs2008环境下不能直接编译通过，因为mongodb提供的相关配置文件是针对vs2010的，可能是因为mongodb最新的代码使用了部分C++11的特性，而vs2008没有提供对C++11支持的原因。可是我们在一个具体的项目上需要在vs2008环境下使用mongodb，只好通过手工修改部分配置和代码的办法完成编译。&lt;/p>
&lt;h2 id="环境准备">环境准备
&lt;/h2>&lt;p>mongodb是使用scons进行编译控制的，所以在进行以下编译之前需要安装并配置好如下环境：&lt;/p>
&lt;h3 id="python27">python2.7
&lt;/h3>&lt;p>官方建议是安装python2.7版本，而且要在环境变量PATH中加入python的安装路径和python/scripts的路径，以便在命令行中执行python脚本。
&lt;em>不过我在编译的时候使用的是python2.6版本，也没有发现问题&lt;/em>&lt;/p>
&lt;h3 id="scons">scons
&lt;/h3>&lt;ul>
&lt;li>直接去网上下载最新版本进行安装即可。&lt;/li>
&lt;/ul>
&lt;h3 id="vs2008">vs2008
&lt;/h3>&lt;ul>
&lt;li>需要安装vc++的全部组件（主要是默认安装不带amd64的编译支持），如果只需要编译32位版本的话则可以忽略此条。&lt;/li>
&lt;li>需要安装sp1补丁，否则会在编译时报错。&lt;/li>
&lt;/ul>
&lt;h3 id="boost库">boost库
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>最好使用boost1.4.9版本，去官网上下载对应的源码包然后自己在vs2008的命令行环境下编译&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编译boost的命令如下（只编译了所需库）：&lt;/p>
&lt;pre>&lt;code> bjam stage variant=debug --with-filesystem --with-thread --with-date_time --with-program_options --layout=versioned threading=multi toolset=msvc-10.0 --build-type=complete
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>如果需要编译release版本，就把&lt;code>variant&lt;/code>的选项改为&lt;code>release&lt;/code>，如果需要编译64位的版本，就在以上命令中加入&lt;code>address-model=64&lt;/code>&lt;/em>&lt;/p>
&lt;h2 id="配置及代码修改">配置及代码修改
&lt;/h2>&lt;h3 id="sconstruct文件修改">SConstruct文件修改
&lt;/h3>&lt;p>SConstruct文件用于存放scons的关键配置信息，我们为了在vs2008下编译mongodb首先要做的就是修改mongodb源码下根目录的SConstruct文件。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>修改env配置，找到 evn = Environment&lt;/p>
&lt;pre>&lt;code> env = Environment( BUILD_DIR=variantDir,
CLIENT_ARCHIVE='${CLIENT_DIST_BASENAME}${DIST_ARCHIVE_SUFFIX}',
CLIENT_DIST_BASENAME=get_option('client-dist-basename'),
CLIENT_LICENSE='#distsrc/client/LICENSE.txt',
CLIENT_SCONSTRUCT='#distsrc/client/SConstruct',
DIST_ARCHIVE_SUFFIX='.tgz',
EXTRAPATH=get_option(&amp;quot;extrapath&amp;quot;),
MODULE_BANNERS=[],
MODULETEST_ALIAS='moduletests',
MODULETEST_LIST='#build/moduletests.txt',
MSVS_ARCH=msarch ,
PYTHON=utils.find_python(),
SERVER_ARCHIVE='${SERVER_DIST_BASENAME}${DIST_ARCHIVE_SUFFIX}',
TARGET_ARCH=msarch ,
tools=[&amp;quot;default&amp;quot;, &amp;quot;gch&amp;quot;, &amp;quot;jsheader&amp;quot;, &amp;quot;mergelib&amp;quot;, &amp;quot;unittest&amp;quot;],
UNITTEST_ALIAS='unittests',
UNITTEST_LIST='#build/unittests.txt',
PYSYSPLATFORM=os.sys.platform,
PCRE_VERSION='8.30',
CONFIGUREDIR = '#' + scons_data_dir + '/sconf_temp',
CONFIGURELOG = '#' + scons_data_dir + '/config.log'
)
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;p>在Environment里追加一条 &lt;code>MSVC_VERSION='9.0'&lt;/code>，这是因为如果机器上有其他的编译环境，比如vs2010或vs2012，scons会自动使用他们的编译器进行编译，即使你是在vs2008的命令行环境下，我最初因为此问题困扰了很久，后来才只得强制指定编译器的版本，修改完成后如下：&lt;/p>
&lt;pre>&lt;code>env = Environment( BUILD_DIR=variantDir,
CLIENT_ARCHIVE='${CLIENT_DIST_BASENAME}${DIST_ARCHIVE_SUFFIX}',
CLIENT_DIST_BASENAME=get_option('client-dist-basename'),
CLIENT_LICENSE='#distsrc/client/LICENSE.txt',
CLIENT_SCONSTRUCT='#distsrc/client/SConstruct',
DIST_ARCHIVE_SUFFIX='.tgz',
EXTRAPATH=get_option(&amp;quot;extrapath&amp;quot;),
MODULE_BANNERS=[],
MODULETEST_ALIAS='moduletests',
MODULETEST_LIST='#build/moduletests.txt',
MSVS_ARCH=msarch ,
PYTHON=utils.find_python(),
SERVER_ARCHIVE='${SERVER_DIST_BASENAME}${DIST_ARCHIVE_SUFFIX}',
TARGET_ARCH=msarch ,
tools=[&amp;quot;default&amp;quot;, &amp;quot;gch&amp;quot;, &amp;quot;jsheader&amp;quot;, &amp;quot;mergelib&amp;quot;, &amp;quot;unittest&amp;quot;],
UNITTEST_ALIAS='unittests',
UNITTEST_LIST='#build/unittests.txt',
PYSYSPLATFORM=os.sys.platform,
PCRE_VERSION='8.30',
CONFIGUREDIR = '#' + scons_data_dir + '/sconf_temp',
CONFIGURELOG = '#' + scons_data_dir + '/config.log',
MSVC_VERSION = '9.0'
)
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>给编译器搜索路径增加你自己本地的boost库路径
因为在编译时需要用到boost库，所以需要把你在本地的boost所在目录加入scons的环境，否则会报找不到boost头文件或链接库的错误，打开Sconstruct文件直接在最后加入如下代码&lt;/p>
&lt;p>env.Append(CPPPATH=[&amp;ldquo;d:/thirdlib/boost_1_49_0&amp;rdquo;, &amp;ldquo;d:/thirdlib/boost_1_49_0/boost/tr1&amp;rdquo;], LIBPATH=[&amp;ldquo;d:/thridlib/boost_1_49_0/stage/lib&amp;rdquo;])&lt;/p>
&lt;pre>&lt;code> *你在编译时需要将路径替换成你自己的*
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h3 id="准备stdinth">准备stdint.h
&lt;/h3>&lt;ul>
&lt;li>去这个地址&lt;a class="link" href="https://msinttypes.googlecode.com/files/msinttypes-r26.zip" target="_blank" rel="noopener"
>https://msinttypes.googlecode.com/files/msinttypes-r26.zip&lt;/a>下载msinttypes，将压缩包里的stdint.h解压并复制到 &lt;code>C:\Program Files\Microsoft Visual Studio 9.0\VC\include&lt;/code> 目录&lt;/li>
&lt;li>修改mongodb源码目录下platform下的cstdint.h，将&lt;code>#include&amp;lt;cstdint&amp;gt;&lt;/code>修改为&lt;code>#include&amp;lt;stdint.h&amp;gt;&lt;/code>，将&lt;code>#define _MONGO_STDINT_NAMESPACE std&lt;/code>这一行里的std注释掉，变成&lt;code>#define _MONGO_STDINT_NAMESPACE /*std*/ &lt;/code>&lt;/li>
&lt;li>修改mongodb源码目录下util下的time_support.h，在文件开头加入&lt;code>#include&amp;lt;stdint.h&amp;gt;&lt;/code>，否则在编译这个文件时会无法识别int64_t类型&lt;/li>
&lt;/ul>
&lt;h3 id="修改windows_basich">修改windows_basic.h
&lt;/h3>&lt;ul>
&lt;li>修改mongodb源码目录下platform下的windows_basic.h，&lt;/li>
&lt;li>在&lt;code> #if !defined(NTDDI_WINXPSP3) || (NTDDI_VERSION &amp;lt; NTDDI_WINXPSP3)&lt;/code> 之前加入 &lt;code>#define NTDDI_WINXPSP3 0x05010300&lt;/code> 在&lt;code>#if !defined(NTDDI_WS03SP2) || (NTDDI_VERSION &amp;lt; NTDDI_WS03SP2)&lt;/code>之前加入&lt;code>#define NTDDI_WS03SP2 0x05020200&lt;/code> 否则会报 &amp;ldquo;32 bit mongo does not support Windows versions older than XP Service Pack 3&amp;rdquo; 和&amp;quot;64 bit mongo does not support Windows versions older than Windows Server 2003 SP 2&amp;quot; 错误&lt;/li>
&lt;/ul>
&lt;h3 id="修改listencpp和sockcpp">修改listen.cpp和sock.cpp
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>修改util下net下listen.cpp，在#include段之后加入如下代码&lt;/p>
&lt;pre>&lt;code> #ifdef _WIN32
#define EADDRINUSE WSAEADDRINUSE
#define ECONNABORTED WSAECONNABORTED
#define EBADF 9
#define ENFILE 23
#define EMFILE 24
#endif
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>修改util下net下sock.cpp，在#include段之后加入如下代码&lt;/p>
&lt;pre>&lt;code> #ifdef _WIN32
#define EAGAIN 11
#endif
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h2 id="开始编译">开始编译
&lt;/h2>&lt;p>环境准备好之后，编译就比较简单了，打开vs2008命令行窗口，执行如下代码即可完成编译
&lt;code>scons --dd --32 mongoclient.lib&lt;/code>&lt;/p>
&lt;p>如果是编译release版本，就把&amp;ndash;dd换成&amp;ndash;release，如果是编译64位版本，就把&amp;ndash;32换成&amp;ndash;64&lt;/p></description></item><item><title>Hello World!</title><link>https://sbabybird.github.io/p/hello-world/</link><pubDate>Mon, 29 Apr 2013 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/hello-world/</guid><description>&lt;h2 id="hello">Hello
&lt;/h2>&lt;h2 id="world">World
&lt;/h2></description></item><item><title>假日记趣</title><link>https://sbabybird.github.io/p/%E5%81%87%E6%97%A5%E8%AE%B0%E8%B6%A3/</link><pubDate>Thu, 07 Oct 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%81%87%E6%97%A5%E8%AE%B0%E8%B6%A3/</guid><description>&lt;p>在姥爷家玩儿，看到桌上有零食，随手捏着就吃，吃完了，姥爷十分纠结地告诉我，那是给猫吃的。&lt;/p>
&lt;p>家里的微电脑程控智能电压力锅坏了，拒绝接受一切指令，让我这个“技术人员”束手无策，赵老师将锅翻过来，用力敲击之，好使了。&lt;/p>
&lt;p>家里的新房装修好了，我对于装修效果赞不绝口，老爸老妈和赵老师都感到很欣慰，毕竟这几个月把他们累的够呛，你们辛苦啦。&lt;/p>
&lt;p>我把堆在角落里的老音响接好了摆在新房子里，认真擦去厚厚的灰尘，开机，每个喇叭都有声，一米多高的落地箱低音是很澎湃，还好这次的天花板很结实。&lt;/p>
&lt;p>早晨睡眼惺忪地往院子里看，那里有老妈种在现实世界的菜，我说，这蒜苗长的真不赖，赵老师鄙视我说，才出去几年就分辨不出小葱和蒜苗了。天地良心，我是因为眼睛近视了，凑近了看绝对能分清。&lt;/p>
&lt;p>小外甥才 8 个月就已经养成揪我耳朵的习惯，而且揪起来一脸享受的样子。&lt;/p>
&lt;p>女儿在我面前跌倒，我表情平静既没有表示遗憾也没有对地板提出强烈谴责，她于是自己爬起来慢慢穿过客厅和饭厅找到赵老师，嗷嗷哭。&lt;/p>
&lt;p>和儿子比赛跳舞毯，轻易将其击败。&lt;/p>
&lt;p>哦也，打游戏我从来不让着他。这几天将老爸珍藏的佳酿喝掉了好几瓶，过瘾。&lt;/p>
&lt;p>在我对他的白酒表示欣赏之后，他也表示突然听起来我的音响也很不错，于是我们都颇感欣慰。&lt;/p>
&lt;p>临回北京的前一天晚上，腾讯终于发布 s60v5 版的“斗地主”，我半夜爬起来给老妈的手机装上，老妈终于能随时“斗地主”了。&lt;/p></description></item><item><title>如果他们生产马桶</title><link>https://sbabybird.github.io/p/%E5%A6%82%E6%9E%9C%E4%BB%96%E4%BB%AC%E7%94%9F%E4%BA%A7%E9%A9%AC%E6%A1%B6/</link><pubDate>Thu, 02 Sep 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A6%82%E6%9E%9C%E4%BB%96%E4%BB%AC%E7%94%9F%E4%BA%A7%E9%A9%AC%E6%A1%B6/</guid><description>&lt;p>没事儿再瞎畅想一下，如果这些科技公司生产马桶，他们将会生产出什么样的&amp;mdash;&amp;ndash;马桶？&lt;/p>
&lt;p>微软生产的马桶将会有着华丽的外观，而且对你卫生间的配置要求很高，不过即使这样你还会发觉掀开马桶盖的速度十分缓慢，而且随着时光的流逝，冲水的速度会越来越慢，你去询问维修工程师，得到的答复通常是让你将马桶卸了重新安装一次。&lt;/p>
&lt;p>苹果生产的马桶已经上市就会迎来大批的粉丝扎着帐篷在商店门外排队，马桶将会有着白色的外观，名字就叫“i 马桶”，界面将会十分简洁，简洁到压根儿不提供冲水按钮，不过你可以再多花 99 美元买一个配套的冲水按钮模块，当然你也可以去淘宝上买一个高仿的。&lt;/p>
&lt;p>Mozilla 生产马桶的目的就是为了鄙视微软的马桶，他们宣称“系统检测到你正在使用老掉牙的微软马桶，赶紧更换成我们生产的‘火桶’吧！”而且该马桶最大的特色就是支持各式各样的插件，有的插件让你在如厕的时候可以听音乐，有的插件则是可以提供天气预报的功能，甚至有的插件装上之后可以将其伪装成一个“苹果的马桶”以满足部分人的虚荣心。&lt;/p>
&lt;p>诺基亚生产的马桶将会非常的皮实，而且供你选择的型号也非常繁多，他们除了可以用来当马桶用外还都有一个共同的特点，那就是随心换彩壳，你可以根据心情来更换不同颜色的马桶外壳，不过外壳会比较松，一不小心就会掉下来。&lt;/p>
&lt;p>如果你是一个追逐新型号的狂热分子，那么诺基亚马桶还是比较适合你的，你昨天刚安装好 WC71 型号的，过两天就会看到诺基亚关于发布 WC72 的新闻，如果你马上升级那就上当了，因为其实也就是换了一个彩壳而已。&lt;/p>
&lt;p>各大 Linux 厂商生产的马桶宣称天生就不是给普通人用的，首先这个系列的马桶虽然使用同一个内核，但会分裂出各种各样的版本分支，这让你在选择时很犯愁。&lt;/p>
&lt;p>然后是他们的功能设置极其麻烦，你得翻遍 1500+页的文档、彻夜在论坛里泡着、冰天雪地裸体旋转 360 度跪求解决办法、花个把月的时间才能将该马桶配置的可以正常掀开马桶盖了，但是别高兴的太早，要想能够正常冲水往往你还得重新编译内核。&lt;/p>
&lt;p>最后，当你气急败坏的时候，你会想到国产马桶，你开始到处询问，然后厂商会首先寄给你一套马桶系统解决方案书，上面画着一个真皮座椅还带后背按摩器，而且标价极其便宜。&lt;/p>
&lt;p>当然了，当你付完钱，若干个月后你将会收到一个马扎。&lt;/p></description></item><item><title>我是一首mp3</title><link>https://sbabybird.github.io/p/%E6%88%91%E6%98%AF%E4%B8%80%E9%A6%96mp3/</link><pubDate>Thu, 26 Aug 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E6%98%AF%E4%B8%80%E9%A6%96mp3/</guid><description>&lt;p>我静静的呆在文件夹里，我的身后是一首 2002 年的曲子，对了，我是一个文件，确切地说，我是一首 mp3，你通过搜索引擎找到了我，通过右键另存为给我取了个名字，从那一刻起，我诞生了。&lt;/p>
&lt;p>你迫不及待地打开 winamp，用鼠标拽住我，拖进了播放列表。硬盘的磁头开始颤抖，顺着磁道的轨迹划过我的身体，我的细胞就是一串二进制的序列，它们活蹦乱跳地被磁头提起，转换成抖动的电信号涌进了内存，声卡大哥开始工作，它们的任务就是在 winamp 的安排下去搔声卡大哥的胳肢窝，声卡忍受不住，愉快地哼起了歌，那就是我。你带着耳机，闭目养神，觉得从来没有听过如此美妙的声音。&lt;/p>
&lt;p>我露出欣慰的微笑，磁头划过我带给我的痛苦一扫而光，我甚至期待你的下一次播放。&lt;/p>
&lt;p>你却渐渐地把我遗忘，周围的文件叽叽喳喳叫个不停，它们哪懂得我的忧伤。&lt;/p>
&lt;p>从此我开始长时间的睡眠，直到我遇见另一首 mp3.开始的时候我还看她不起眼，因为她来自一块移动硬盘，这个外地人，我心里想。&lt;/p>
&lt;p>瘦弱的她哪里及得上我曲子的悠扬，又怎能赶上我 320k 的压缩比和古典浪漫的心肠。&lt;/p>
&lt;p>然而我渐渐地发现，虽然她是那样的其貌不扬，可她的快乐却迅速将我感染，连 winamp 大哥也对她颇有好感，随机播放的时候总是偷偷将她播放，就连愚钝缓慢的回收站也幽幽地说，不希望她去那个地方。&lt;/p>
&lt;p>我开始整晚失眠，到处寻找暗恋的药方，CPU 大哥忙着计算，根本帮不上忙，显卡更是高傲地扇着风扇，一副过来人的模样：”这种事我见得多啦，回去洗洗睡觉，明天我还得渲染上岗“，还是硬盘忠厚老实，偷偷跟我说，过两天要整理碎片，到时你再这样这样。&lt;/p>
&lt;p>醒来时我发现已经被移到另外一个文件夹，粉红色的背景还有一个明亮的天窗，那首 mp3 羞涩地呆在那里，红着脸问我觉得装修怎样，哈哈，我心里想，要不是主人在意，谁会将一个文件夹弄成自定义的模样。&lt;/p>
&lt;p>无损压缩的时代就要来了，我说。到时我们肯定都人老珠黄，不如把握现在的时间做些更有意义的事情，比如，轰轰烈烈地爱一场。&lt;/p>
&lt;p>ps:纯属虚构，如有雷同，那实在是巧合。&lt;/p></description></item><item><title>走路去西藏</title><link>https://sbabybird.github.io/p/%E8%B5%B0%E8%B7%AF%E5%8E%BB%E8%A5%BF%E8%97%8F/</link><pubDate>Wed, 23 Jun 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B5%B0%E8%B7%AF%E5%8E%BB%E8%A5%BF%E8%97%8F/</guid><description>&lt;p>n 年以前，n 小于 3，我偷偷地策划过一件事情，最终未能实现，因为太不着边际了。&lt;/p>
&lt;p>我想徒步去一趟西藏，在我又听了一遍《回到拉萨》之后。&lt;/p>
&lt;p>那时我想，我靠，就这么定了，我跟谁都不说，电话关机，从此消失，我要走着去西藏，找一个喇嘛庙，问一问人家，看能否收留我，出家算了。&lt;/p>
&lt;p>我差点把这事儿写进 project 做个详细的计划。&lt;/p>
&lt;p>一直没有想明白，为什么会对一个从不了解也从未去过的地方产生向往之情，也许冥冥之中觉得那是一方纯洁的圣土，我想去洗一洗，找找回家的感觉。&lt;/p>
&lt;p>受不了喧闹和高速的生活，一个人孤独地在这边单着，偶尔夜里躺床上做梦，总觉得有人在后面拿鞭子抽我。&lt;/p>
&lt;p>相当一段时间，我真是烦乱至极，劳累的工作导致身体的虚弱，长期的压力导致轻微的精神分裂，就像电影《搏击俱乐部》里的主角那样，人格差点儿分裂出去。&lt;/p>
&lt;p>于是就想做一件比较荒诞的事情来调剂一下，可惜未能实现。&lt;/p>
&lt;p>为啥未能实现哩，因为片刻之后我就恢复了理智。&lt;/p>
&lt;p>祖国还需要我，人民还需要我。那段时间我打电话给我妈，说我想回老家歇几年，哪怕几个月也成，未被批准。&lt;/p>
&lt;p>也就咬咬牙撑过来了，只是落下了一郁闷就想起徒步去西藏的毛病。&lt;/p>
&lt;p>今天又想起这事儿了。&lt;/p></description></item><item><title>祝爸爸节日快乐</title><link>https://sbabybird.github.io/p/%E7%A5%9D%E7%88%B8%E7%88%B8%E8%8A%82%E6%97%A5%E5%BF%AB%E4%B9%90/</link><pubDate>Sun, 20 Jun 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%A5%9D%E7%88%B8%E7%88%B8%E8%8A%82%E6%97%A5%E5%BF%AB%E4%B9%90/</guid><description>&lt;p>前一段时间，老爸在 qq 上和我视频，见我头发稍长，便催我尽快去理发。&lt;/p>
&lt;p>这事儿他催了我好几个星期了，但是天高皇帝远，将在外君命有所不受，我一直没去。&lt;/p>
&lt;p>我之所以没去，第一是因为我十分讨厌现在的理发店动不动就让我办卡，而且理发师也都很娘娘腔，唠唠叨叨个没完，第二是因为我有那么一点儿的叛逆心理，老人家想让我头发剪短显得精神一点，我还就想拿头发盖住耳朵显得颓废些，当然了，我并不是想培养那种长发半月不洗、胡茬上沾满饭粒的那种艺术家气质。&lt;/p>
&lt;p>从毕业后踏入社会到现在，我一直踏实工作，刻苦努力，从未有过吊儿郎当的岁月，花天酒地我没干过，打架群殴我没凑过热闹，打牌搓麻我更是没有兴趣，也就是听听音乐看看书，说实话我都替我老爸有这么个省心的儿子感到高兴。&lt;/p>
&lt;p>等一下，我说跑题了，今天是父亲节本来想夸夸老爸，怎么话题扯到我身上了。&lt;/p>
&lt;p>老爸身材高大魁梧（略胖），声如洪钟，气质不凡。虽说现在已是五十多岁，但只要稍作打扮，说他是四十来岁的小伙子都不过分。&lt;/p>
&lt;p>老爸是个教师，工作勤勤恳恳、一丝不苟，为祖国的教育事业做出了卓越贡献，成功地把我培养成一个正直乐观的人。&lt;/p>
&lt;p>由于他们那一代人是结结实实挨过饿的，所以他最痛恨的就是浪费粮食，东西吃不完也不允许我们扔掉，只得勉强吃下，结果吃成了一个看上去颇具成功人士气质的胖子，好在他脾气还凑合，面对我们对他肚子无情的嘲笑，他总是一笑了之。&lt;/p>
&lt;p>老爸从小受苦，在家里排行老大，在那个贫瘠的年代，早早地站出来把家里的事儿都撑了起来。&lt;/p>
&lt;p>所以他在叔叔们面前基本具备家长威严，都比较尊敬他。&lt;/p>
&lt;p>由于很小就出来磨练，老爸练就了一身社交能力，信奉以德服人，人缘那是相当好，喝酒那是相当能喝，办事儿那是相当利索。&lt;/p>
&lt;p>要说优点，当然是说不完的，但是我比较欣赏他的一个优点就是他“动手”能力差，所以我在挨揍的季节并没有挨过他的揍。&lt;/p>
&lt;p>呵呵，开个玩笑，他动手能力是差点儿，修理东西不会，这就给我很好的机会，我基本上从小学就把维修家里东西的业务给接管了，小到接个灯泡开关，大到修理冰箱洗衣机，反正他们敢让我修我就敢修。&lt;/p>
&lt;p>好吧，现在我也当父亲了，也能体会当父亲的心情。&lt;/p>
&lt;p>在这个父亲的节日里，衷心祝愿我的爸爸，身体健康，工作顺利。&lt;/p>
&lt;p>并在我个人资料里“最崇拜的人”那一栏谨慎地填上了“父亲”。&lt;/p></description></item><item><title>汇报一下进展</title><link>https://sbabybird.github.io/p/%E6%B1%87%E6%8A%A5%E4%B8%80%E4%B8%8B%E8%BF%9B%E5%B1%95/</link><pubDate>Sun, 06 Jun 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%B1%87%E6%8A%A5%E4%B8%80%E4%B8%8B%E8%BF%9B%E5%B1%95/</guid><description>&lt;p>学习五线谱和钢琴大半个月了，使用 Cubase 录了一段自己弹奏的《落叶》虽然速度不稳，比节拍器忽快忽慢，但是好歹是用双手了。&lt;/p>
&lt;p>呵呵，左手好像弹错了。&lt;/p></description></item><item><title>两个周未更新了</title><link>https://sbabybird.github.io/p/%E4%B8%A4%E4%B8%AA%E5%91%A8%E6%9C%AA%E6%9B%B4%E6%96%B0%E4%BA%86/</link><pubDate>Sun, 30 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%A4%E4%B8%AA%E5%91%A8%E6%9C%AA%E6%9B%B4%E6%96%B0%E4%BA%86/</guid><description>&lt;p>我的 blog 两个周没有更新了，原因是我这两个周里每天的博客时间被别的事儿占用了，而这个别的事儿就是我在上一篇博客里给自己挖的坑（真够罗嗦），头脑发热买了几本五线谱来挑战自己，现在已经深陷此坑，练了十几天没啥进展，看着谱子上的小蝌蚪还是发懵，真是隔行如隔山呐。&lt;/p>
&lt;p>不过也再次验证了一个道理，欲速则不达，真是放之四海皆准的真理啊，21 天无法精通 C++，同样三个月也不可能学会吉他，两个礼拜想把钢琴弹好更是没戏。&lt;/p>
&lt;p>不过我这次倒是想坚持一下，至少现在哈农的前两个练习我是练熟了，手指也没那么僵硬了，总之吧，我要告别《两只老虎》的阶段！&lt;/p></description></item><item><title>冲动是魔鬼</title><link>https://sbabybird.github.io/p/%E5%86%B2%E5%8A%A8%E6%98%AF%E9%AD%94%E9%AC%BC/</link><pubDate>Mon, 17 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%B2%E5%8A%A8%E6%98%AF%E9%AD%94%E9%AC%BC/</guid><description>&lt;p>头脑发热，买了几本钢琴和五线谱教程，准备牺牲每天写博客的时间来学习五线谱，想想就头大。&lt;/p></description></item><item><title>最爱的钢琴曲，竟然可以用这个弹</title><link>https://sbabybird.github.io/p/%E6%9C%80%E7%88%B1%E7%9A%84%E9%92%A2%E7%90%B4%E6%9B%B2%E7%AB%9F%E7%84%B6%E5%8F%AF%E4%BB%A5%E7%94%A8%E8%BF%99%E4%B8%AA%E5%BC%B9/</link><pubDate>Sun, 16 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%80%E7%88%B1%E7%9A%84%E9%92%A2%E7%90%B4%E6%9B%B2%E7%AB%9F%E7%84%B6%E5%8F%AF%E4%BB%A5%E7%94%A8%E8%BF%99%E4%B8%AA%E5%BC%B9/</guid><description>&lt;p>今儿在优酷上看到一牛人使用 iDreamPiano 演奏卡农，简直是绝了，http://v.youku.com/v_show/id_XMTE0MTMwMzI0.html。&lt;/p>
&lt;p>早就玩过 iDreamPiano，不过仅仅是弹点儿“两只老虎”之类的，牛人果然无处不在，竟然把这个软件发挥到这种地步。&lt;/p>
&lt;p>随即，我也去搜了一下曲谱，网上已有好人专门制作了卡农的双手版简谱，赶紧也试了一下，果然很爽，虽然后面的我还弹不了，但前一段已经没问题了，很像那么回事儿，哈哈。&lt;/p></description></item><item><title>以后要多锻炼</title><link>https://sbabybird.github.io/p/%E4%BB%A5%E5%90%8E%E8%A6%81%E5%A4%9A%E9%94%BB%E7%82%BC/</link><pubDate>Fri, 14 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BB%A5%E5%90%8E%E8%A6%81%E5%A4%9A%E9%94%BB%E7%82%BC/</guid><description>&lt;p>昨天又去打了一场篮球，体力比上次好多了，连续打了 2 个小时直到天黑。&lt;/p>
&lt;p>手感也差不多恢复了，只不过很长时间不打，会出现意识到但动作不到的情况，甚至眼睁睁的看着篮板球而“身不能至，心向往之”。&lt;/p>
&lt;p>打完之后，筋疲力竭，回家连写博客的劲儿都没有了，倒是睡眠很香，一觉睡到闹钟响，起来之后精神百倍，看来以后要多出去运动运动了。&lt;/p></description></item><item><title>一段比较有力度的架子鼓</title><link>https://sbabybird.github.io/p/%E4%B8%80%E6%AE%B5%E6%AF%94%E8%BE%83%E6%9C%89%E5%8A%9B%E5%BA%A6%E7%9A%84%E6%9E%B6%E5%AD%90%E9%BC%93/</link><pubDate>Wed, 12 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%80%E6%AE%B5%E6%AF%94%E8%BE%83%E6%9C%89%E5%8A%9B%E5%BA%A6%E7%9A%84%E6%9E%B6%E5%AD%90%E9%BC%93/</guid><description>&lt;p>nan&lt;/p></description></item><item><title>郁闷的时候干点儿啥</title><link>https://sbabybird.github.io/p/%E9%83%81%E9%97%B7%E7%9A%84%E6%97%B6%E5%80%99%E5%B9%B2%E7%82%B9%E5%84%BF%E5%95%A5/</link><pubDate>Tue, 11 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%83%81%E9%97%B7%E7%9A%84%E6%97%B6%E5%80%99%E5%B9%B2%E7%82%B9%E5%84%BF%E5%95%A5/</guid><description>&lt;p>我会弹弹吉他，这样可以压压我的手指，从中医学的角度来说，十指连心，是若干经络的起点，活泛活泛手指可以舒肝解郁。&lt;/p>
&lt;p>或者在房间里唱唱歌，先唱青藏高原再唱回到拉萨，两首歌下来，胃就舒坦多了。&lt;/p>
&lt;p>或者打开 CS，把机器人的智商调到 100，然后疯狂地用 mp5 与匪徒们对战，要是屡被爆头请尝试降低机器人智商。&lt;/p></description></item><item><title>无法通过email更新了</title><link>https://sbabybird.github.io/p/%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87email%E6%9B%B4%E6%96%B0%E4%BA%86/</link><pubDate>Mon, 10 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87email%E6%9B%B4%E6%96%B0%E4%BA%86/</guid><description>&lt;p>不知道为啥，livespaces 拒绝接收我从 gmail 发来的邮件，这下无法通过电子邮件来更新博客了。&lt;/p></description></item><item><title>他们为什么会喜欢复杂的东西</title><link>https://sbabybird.github.io/p/%E4%BB%96%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%96%9C%E6%AC%A2%E5%A4%8D%E6%9D%82%E7%9A%84%E4%B8%9C%E8%A5%BF/</link><pubDate>Sun, 09 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BB%96%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%96%9C%E6%AC%A2%E5%A4%8D%E6%9D%82%E7%9A%84%E4%B8%9C%E8%A5%BF/</guid><description>&lt;p>不折腾就不舒服，有个小巧的 linux 发行版叫做 puppy（虽然没有 slitaz 那么变态的小，但也绝对值得推荐），我前两天忙里偷闲，把它装在笔记本的 sd 卡上了，经过一番折腾，一切配置妥当，甚至可以编译 helloworld.c 了，这个时候我发现一个严重的问题&amp;mdash;&amp;ndash;&lt;/p>
&lt;p>puppy 没有提供可用的 vim，本来我给笔记本安装 puppy 就是让它轻快地起来，然后我躺在床上，敲一两行代码，用以验证某些书上的内容，结果没有 vim，计划眼看要泡汤了。&lt;/p>
&lt;p>比较讽刺的是，比 vim 庞大好几倍的编辑器 emacs 却躺在 puppy 的软件库中，抱着试试看的态度把 emacs 给装上了。&lt;/p>
&lt;p>虽然 vim 我用的不熟但至少还是可以拿起来干活儿的，而 emacs 这个据说是 vim 的唯一对手（当然，在口水战里，着两个编辑器总是扯不清）我却用得极其蹩脚，而且还不能抱怨，抱怨只能得到一大堆耻笑：“瞧你，连这个都用不好，你只需要这样然后再同时按下那个，最后，来吧再试试这段配置文件”，然后丢过来一大段充满括号的配置代码。&lt;/p>
&lt;p>如果说没有人会喜欢复杂的东西，我绝对不赞成，那么多的高手拎着成串的配置文件手脚并用地用着 emacs，甜蜜地记忆着 C-xCc，M-xfu××之类的长串命令。&lt;/p>
&lt;p>竟然还有人宣称完美地解决了代码补全的问题，真不知道他是否用过真正的代码补全。&lt;/p>
&lt;p>也许是我用的太蹩脚了，他们为什么会喜欢这么复杂的东西？&lt;/p></description></item><item><title>痛痛快快打了场篮球</title><link>https://sbabybird.github.io/p/%E7%97%9B%E7%97%9B%E5%BF%AB%E5%BF%AB%E6%89%93%E4%BA%86%E5%9C%BA%E7%AF%AE%E7%90%83/</link><pubDate>Fri, 07 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%97%9B%E7%97%9B%E5%BF%AB%E5%BF%AB%E6%89%93%E4%BA%86%E5%9C%BA%E7%AF%AE%E7%90%83/</guid><description>&lt;p>今天要打篮球，开始时我还担心今天会下雨，因为按照以往的惯例，只要我们想打球，天气往往是立即下雨（这样的）。&lt;/p>
&lt;p>不过还好，今天天气很不错，非常配合，没有刮风也没有下雨，一切照常进行，还没下班我就迫不及待地把我的装备找了出来，n 年前（n&amp;lt;4）的队服，上书醒目的 11 号外加公司 logo，穿上球鞋，给篮球使劲儿打满气。&lt;/p>
&lt;p>其实至少有 1 年没碰篮球了，而且也没有其他的运动，不出所料，刚上场不一会儿，我就气喘吁吁，汗流浃背，两股战战几欲先走。&lt;/p>
&lt;p>不过等慢慢活动一阵儿之后，开始恢复手感，投进几球后渐入佳境，4v4 淘汰赛也把别的队给虐下去了几盘，恍惚之间我又仿佛回到了 18+的年纪。&lt;/p>
&lt;p>不过毕竟是 28+了，蹦了不到一个钟头就再也没力气了，如果没有意外的话，明天肯定是浑身腰疼，现在只想再按照惯例喝杯冰镇啤酒，可惜我答应老爸不再喝啤酒了，还是白酒算了。&lt;/p></description></item><item><title>很久没打球了，准备明天打球去</title><link>https://sbabybird.github.io/p/%E5%BE%88%E4%B9%85%E6%B2%A1%E6%89%93%E7%90%83%E4%BA%86%E5%87%86%E5%A4%87%E6%98%8E%E5%A4%A9%E6%89%93%E7%90%83%E5%8E%BB/</link><pubDate>Thu, 06 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BE%88%E4%B9%85%E6%B2%A1%E6%89%93%E7%90%83%E4%BA%86%E5%87%86%E5%A4%87%E6%98%8E%E5%A4%A9%E6%89%93%E7%90%83%E5%8E%BB/</guid><description>&lt;p>篮球。&lt;/p></description></item><item><title>跟着扯扯淡</title><link>https://sbabybird.github.io/p/%E8%B7%9F%E7%9D%80%E6%89%AF%E6%89%AF%E6%B7%A1/</link><pubDate>Tue, 04 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B7%9F%E7%9D%80%E6%89%AF%E6%89%AF%E6%B7%A1/</guid><description>&lt;p>最近霍金霍大爷又放话出来说，大家小心一些，最好不要惹了外星人，不然人类文明可能会完蛋。&lt;/p>
&lt;p>这边唱那边就有出来和的，一帮专家又跳出来分析说，大家也不要太担心外星人会跟我们动武。&lt;/p>
&lt;p>我看也是，确实不用担心，因为担心也没用。&lt;/p>
&lt;p>古时候有一说法，叫“天上一天，地上一年”，乍一听觉得不可思议，可是现在的物理学越研究就越发现古人说的有道理，当宇宙飞船在天上的飞行速度接近或者超过光速时，那确实是天上一天地上一年。&lt;/p>
&lt;p>做一个很俗的假设，其实神话中的天神下凡，就是外星人来地球逛街，至于七仙女什么的估计就是女外星人了。&lt;/p>
&lt;p>外星人能来地球得瑟，就说明他们拥有比我们先进的多的文明程度，要灭我们也是轻而易举，但是为什么还不动手呢？&lt;/p>
&lt;p>我想是因为宇宙中也有保护濒危物种的法律吧，猪再蠢，要是地球上的猪快死绝了，也得修好猪圈养起来。&lt;/p></description></item><item><title>五一小总结</title><link>https://sbabybird.github.io/p/%E4%BA%94%E4%B8%80%E5%B0%8F%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 03 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BA%94%E4%B8%80%E5%B0%8F%E6%80%BB%E7%BB%93/</guid><description>&lt;p>基本忘记了五一节的真实含义，对我来说，其实就是有机会多睡两个懒觉，而生物钟被打乱的难受则让我已经开始怀念早起的日子，还好，明天就开工了。&lt;/p>
&lt;p>基本没有出去玩，因为终于有时间呆在家里，坐坐我的沙发，看看闲书，听听闲歌，真他妈闲啊。&lt;/p>
&lt;p>不过昨晚上还是和同事出去喝了小酒，而我们也充分发挥工作狂的精神，居然在饭桌上讨论工作内容，让随桌陪同的家属掩鼻而去。&lt;/p>
&lt;p>基本没有写程序，不过还是没有忍住，写了个小程序来处理我的照片。&lt;/p></description></item><item><title>写了个脚本整理我的照片</title><link>https://sbabybird.github.io/p/%E5%86%99%E4%BA%86%E4%B8%AA%E8%84%9A%E6%9C%AC%E6%95%B4%E7%90%86%E6%88%91%E7%9A%84%E7%85%A7%E7%89%87/</link><pubDate>Sat, 01 May 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%99%E4%BA%86%E4%B8%AA%E8%84%9A%E6%9C%AC%E6%95%B4%E7%90%86%E6%88%91%E7%9A%84%E7%85%A7%E7%89%87/</guid><description>&lt;p>上次整理硬盘的时候把我的照片一股脑儿的放在了一个目录下，这次又有闲功夫了，写了个 python 脚本来处理我的照片。基本思路是使用 PIL 库读取照片的 exif 信息，取出拍摄的日期时间，根据日期建立新的文件夹，然后照片文件以日期时间格式命名。批量处理，比较简单。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="ch">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -*- coding: gbk -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">复制指定目录的照片到目标目录，并且根据照片的拍摄时间进行重命名
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">比如某张照片拍摄于2008年3月15日12:00:00，则目标目录为2008&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s2">03&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s2">15&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s2">120000.jpg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">PIL&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">get_dist_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dist_dir&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;:&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dirs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dist_dir&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sep&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sep&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">date&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dirs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">makedirs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dirs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dirs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dirs&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sep&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;:&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;.jpg&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">dirs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">copy_image&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src_dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dist_dir&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">src_dir&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sep&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src_dir&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">copy_image&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dist_dir&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write_log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Image&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">log_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;file open error: &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write_log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">log_str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dist_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_dist_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_getexif&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">306&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">dist_dir&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">log_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;dist path: &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">dist_path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write_log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">log_str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">log_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;get exif error: &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write_log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">log_str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dist_path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">image&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dist_path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">log_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;file copy error: &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write_log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">log_str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">write_log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">global&lt;/span> &lt;span class="n">log_file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">log_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">global&lt;/span> &lt;span class="n">log_file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">log_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;cilog.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;w&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">copy_image&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">log_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;需要给出两个参数，第一个是照片目录，第二个是目标目录&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;例如：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s1">&amp;#39;e:&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s1">photo f:&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s1">goodphoto&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>提高工作效率的心得</title><link>https://sbabybird.github.io/p/%E6%8F%90%E9%AB%98%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87%E7%9A%84%E5%BF%83%E5%BE%97/</link><pubDate>Thu, 29 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8F%90%E9%AB%98%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87%E7%9A%84%E5%BF%83%E5%BE%97/</guid><description>&lt;p>1、建立一个简洁 todolist&lt;/p>
&lt;p>，这个 todolist 可以使用任意方式建立，比如笔记本或者 googletasks，总之就是一个简洁的任务列表，每天上午开始工作之前，将今天要做的事情逐条记录下来，按照要事优先的原则，我一般是把比较费脑子的事情放在最前面。&lt;/p>
&lt;p>然后每完成一项就在上面打勾，很有成就感。&lt;/p>
&lt;p>2、整理好自己的文档资料:)&lt;/p>
&lt;p>，给自己建立一个清晰有序的文档管理机制，这样当你需要某个文档资料的时候可以立即将其取出。&lt;/p>
&lt;p>我使用 totalcommander+dokuwiki 进行管理。&lt;/p>
&lt;p>将文档按照工作项目进行分类，而不是按照文件的扩展名分类。&lt;/p>
&lt;p>3、记录工作日志&lt;/p>
&lt;p>，每天记录工作日志可以有效分析出自己每天的时间花在了哪里，并改进自己对工作任务的安排。&lt;/p>
&lt;p>而且将自己的做的事情记录下来对记忆力来说也有好的帮助。&lt;/p>
&lt;p>4、关掉 qq、msn&lt;/p>
&lt;p>，不上比较耗费时间的网站比如 GoogleReader，工作时就是集中精力，不开聊天工具就不会被打扰，不开 rss 阅读器就不会有资讯压力。&lt;/p>
&lt;p>5、听音乐&lt;/p>
&lt;p>，带上耳机听听自己喜欢的音乐，这样工作时心情比较放松，思维也比较活跃。&lt;/p>
&lt;p>6、使用高效的软件和计算机操作方式&lt;/p>
&lt;p>，比如使用 vim 代替普通编辑器，使用 totalcommander 代替 windows 的资源管理器，使用脚本或批处理命令来代替大量的鼠标操作。&lt;/p>
&lt;p>需要整理思路时可使用 freemind 来绘制一张脑图。&lt;/p></description></item><item><title>小时候干过的一些颇为geek的事儿</title><link>https://sbabybird.github.io/p/%E5%B0%8F%E6%97%B6%E5%80%99%E5%B9%B2%E8%BF%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%87%E4%B8%BAgeek%E7%9A%84%E4%BA%8B%E5%84%BF/</link><pubDate>Wed, 28 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%B0%8F%E6%97%B6%E5%80%99%E5%B9%B2%E8%BF%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%87%E4%B8%BAgeek%E7%9A%84%E4%BA%8B%E5%84%BF/</guid><description>&lt;p>极客，又译为技客、奇客，是英文单词 geek 的音译。&lt;/p>
&lt;p>具体解释参见这里。想起小时候干的一些事儿，以现在的眼光来看，颇具极客精神。&lt;/p>
&lt;p>小时候，我曾经嫌弃我家的收音机音量太小听音乐不过瘾，于是动手改造，本来两节干电池就可以正常使用，但是我把三节电池串联起来接在收音机的电池仓里，结果由于心理作用感觉上好像音量比以前更大了，于是我信心十足的把一个电源插头直接接在了收音机上，然后满怀希望地把另一头插在了 220v 的电源插座上，结果杯具发生了，一声巨响过后，浓烟滚滚，收音机被烧成了一个黑匣子。&lt;/p>
&lt;p>于是我只好央求我维修技艺高超的舅舅帮忙维修，后来那台收音机倒是起死回生了，但是舅舅悄悄告诉我，除了壳没换，其他的零件全换了！还是小时候，大概在上小学，突发奇想，把我妹妹的电子表给拆了个七零八落再也装不到一起去了，无奈只好哄她说我其实是想帮她把电子表改装成一个游戏机，就快成功了，再等等。&lt;/p>
&lt;p>中考的前夕，备考的压力非常大，炎热的午后，我实在是复习不下去了，动手把我床头的石英闹钟拆了，零件铺满了整个桌子，但是这次我慢条斯理的把它又给装好了，而且一个零件也没多出来，颇有成就感，只是由于把其中的一个线圈装翻了，导致这个闹钟的指针一直倒着走，直到考试结束我才又花时间把它给正了过来。&lt;/p>
&lt;p>嘿，那些时光多美好呀。&lt;/p></description></item><item><title>不要浮躁，不要骄傲，不要让全世界都知道你的低调</title><link>https://sbabybird.github.io/p/%E4%B8%8D%E8%A6%81%E6%B5%AE%E8%BA%81%E4%B8%8D%E8%A6%81%E9%AA%84%E5%82%B2%E4%B8%8D%E8%A6%81%E8%AE%A9%E5%85%A8%E4%B8%96%E7%95%8C%E9%83%BD%E7%9F%A5%E9%81%93%E4%BD%A0%E7%9A%84%E4%BD%8E%E8%B0%83/</link><pubDate>Tue, 27 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8D%E8%A6%81%E6%B5%AE%E8%BA%81%E4%B8%8D%E8%A6%81%E9%AA%84%E5%82%B2%E4%B8%8D%E8%A6%81%E8%AE%A9%E5%85%A8%E4%B8%96%E7%95%8C%E9%83%BD%E7%9F%A5%E9%81%93%E4%BD%A0%E7%9A%84%E4%BD%8E%E8%B0%83/</guid><description>&lt;p>每天提醒自己。&lt;/p></description></item><item><title>拥抱次新版</title><link>https://sbabybird.github.io/p/%E6%8B%A5%E6%8A%B1%E6%AC%A1%E6%96%B0%E7%89%88/</link><pubDate>Mon, 26 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8B%A5%E6%8A%B1%E6%AC%A1%E6%96%B0%E7%89%88/</guid><description>&lt;p>软件如果不用最新版是可耻的，我以为。&lt;/p>
&lt;p>这个毛病把我折磨的够呛，每天都有大量新版的软件发布，我就更新更新再更新，每天就迷失在软件更新的过程中，不在更新中就是在下载更新的路上。&lt;/p>
&lt;p>然而，尝鲜总是要付出代价的，光怪陆离的新特性一个也没用上不说，新 bug 带来的烦恼却一点儿也没少。&lt;/p>
&lt;p>新系统、新软件带来的兼容性问题也纠缠不休，可我却乐此不疲，有点儿飞蛾扑火的味道。&lt;/p>
&lt;p>终于有那么一天，我顿悟了，次新版才是最好的！我说的次新版，也就是比最新版稍微老那么一点儿的版本。&lt;/p>
&lt;p>优点如下，你看，首先次新版的功能比最新版不会差太多，该有的基本都有，从使用的角度来说绝对是够用的，其次，次新版的稳定性大大高于最新版，因为经过了长时间的测试和 bug 修正功能的磨合已经趋于完美，不信的话你看看 windowsxp 就知道了。别信那些发布最新版时的噱头，什么“大大降低了内存占用”“显著提升了性能”等等，我们脆弱的心灵再也经不起忽悠。&lt;/p>
&lt;p>就拿开发环境来说吧，现在的 vs2010 发布了，也就是说赶紧用 vs2008 吧，因为它现在是最好用的，同样，听说 office2010 也出来了，也就是说是时候全面使用 office2007 了，ubuntu10.04 今夜也就发布了，先别用，赶紧用 9.10 吧，目前来说 9.10 才是最完美的。&lt;/p>
&lt;p>呵呵，以上纯属忽悠，如有意外，那实在是巧合。&lt;/p></description></item><item><title>休息总是在雨天</title><link>https://sbabybird.github.io/p/%E4%BC%91%E6%81%AF%E6%80%BB%E6%98%AF%E5%9C%A8%E9%9B%A8%E5%A4%A9/</link><pubDate>Sun, 25 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BC%91%E6%81%AF%E6%80%BB%E6%98%AF%E5%9C%A8%E9%9B%A8%E5%A4%A9/</guid><description>&lt;p>昨天天气不错，挺风和日丽的，杯具的是，这么好的天气一般都被用来加班了。&lt;/p>
&lt;p>今天使劲儿赖了赖床，起来后继续发扬热爱劳动的光荣传统，打扫房间洗洗被单。&lt;/p>
&lt;p>然后就淅淅沥沥下雨了，到现在洗的东西还没有晾干。&lt;/p>
&lt;p>翻了翻书，一页也看不下去，听说 ubuntu10.04 除了 rc 版的了，没有忍住好奇心，下了一个在虚拟机中耍了耍，网速慢的厉害，更新个语言包都慢腾腾的。&lt;/p>
&lt;p>一晃就到了晚饭时间，下着雨实在不想出去买东西，这下我的电饼铛派上用场了，面粉加鸡蛋转眼就变成热气腾腾香喷喷的煎饼，美美吃上一顿，准备睡觉。&lt;/p></description></item><item><title>因为要丰富工作以外的生活</title><link>https://sbabybird.github.io/p/%E5%9B%A0%E4%B8%BA%E8%A6%81%E4%B8%B0%E5%AF%8C%E5%B7%A5%E4%BD%9C%E4%BB%A5%E5%A4%96%E7%9A%84%E7%94%9F%E6%B4%BB/</link><pubDate>Fri, 23 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9B%A0%E4%B8%BA%E8%A6%81%E4%B8%B0%E5%AF%8C%E5%B7%A5%E4%BD%9C%E4%BB%A5%E5%A4%96%E7%9A%84%E7%94%9F%E6%B4%BB/</guid><description>&lt;p>所以要加班。&lt;/p></description></item><item><title>关于python的好东东</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8Epython%E7%9A%84%E5%A5%BD%E4%B8%9C%E4%B8%9C/</link><pubDate>Thu, 22 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8Epython%E7%9A%84%E5%A5%BD%E4%B8%9C%E4%B8%9C/</guid><description>&lt;p>由于喜爱 python，我几乎每次装完系统就会立即给电脑装上 python 环境（当然了，大部分的 linux 的发行版都自带了）。&lt;/p>
&lt;p>不过，每次都要安装不少我常用的 python 库，比如 pyopengl 用来写写 opengl 什么的比较合适，pyqt 用来写桌面程序也很好，陆续把这些库装完也挺费劲的。&lt;/p>
&lt;p>要说还是好人多，我这两天发现网上就有好人给整理了一个及其全面的安装包，叫做 PythonXY，可以说是一旦安装别无所求，自带 python 基本环境，另外加上以 eclipse 为基础的 ide，在加上 ipython 这个很好的 shell，还包括 numpy、scipy 等等一大堆与数学计算相关的包，不多说了，自己去这里看吧 http://www.pythonxy.com/，要下载完整的压缩包比较大，好像有4百多Mb。&lt;/p></description></item><item><title>无题</title><link>https://sbabybird.github.io/p/%E6%97%A0%E9%A2%98/</link><pubDate>Wed, 21 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%97%A0%E9%A2%98/</guid><description>&lt;p>我爱这个充满神秘的世界，有着无限多的未知，这么多等着我们去探索的未知加上我的好奇心，是我快乐的源泉。&lt;/p></description></item><item><title>我的声卡悲剧了</title><link>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E5%A3%B0%E5%8D%A1%E6%82%B2%E5%89%A7%E4%BA%86/</link><pubDate>Sun, 18 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E5%A3%B0%E5%8D%A1%E6%82%B2%E5%89%A7%E4%BA%86/</guid><description>&lt;p>昨晚一时心动，把家里的电脑装上了 windows7，一切都挺好的，特效也挺漂亮，可是我的创新声卡不发声了，以前在 xp 下的驱动一个也不好使了。&lt;/p>
&lt;p>去创新的官网上寻找驱动，发现人家已经不再理会这块 10 年前的声卡，无奈只好寻找各路的改版驱动，好在那个来自俄罗斯的好人还在辛勤的更新着他的 kx 驱动。&lt;/p>
&lt;p>赶紧下了个最新版的 3550 版驱动，安装完之后傻眼了，声音是能出来，可是怎么听都不对味，声音瘪瘪的，又干又涩，还不如使用板载声卡呢。&lt;/p>
&lt;p>再去网上搜寻一通，原来有人和我一样抱怨过了，而且据说某个版本的（3541）驱动还凑合，那就试试吧，但愿能行，不然我还得把操作系统换回去。&lt;/p></description></item><item><title>整理完毕</title><link>https://sbabybird.github.io/p/%E6%95%B4%E7%90%86%E5%AE%8C%E6%AF%95/</link><pubDate>Sun, 18 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%95%B4%E7%90%86%E5%AE%8C%E6%AF%95/</guid><description>&lt;p>从春节后开始的硬盘整理计划总算进行完了。&lt;/p>
&lt;p>通过这次整理我发现了我曾经认为很重要的文件其实一次也不会被用到，当我真正想用到哪些文件时，通常它们已经过期了（尤其是某些软件的安装包）。&lt;/p>
&lt;p>大量的工作文档也是整理的重点，杂乱无章的文件夹比乱糟糟的书桌更让我抓狂，期间我甚至萌生了自己写一个资料管理软件的念头，当然了，工作太忙，该计划被搁置（说不定哪天我真就卷起袖子为自己写一个）。&lt;/p>
&lt;p>目前来说，使用 totalcommader 这个绝世好软配合良好的管理思路，也基本上可以管理好那些资料了。&lt;/p>
&lt;p>当然在我翻遍文件夹之后，也找到了不少被遗忘的时光，我甚至找到了我在大学时自娱自乐录制的卡拉 ok，恩，那时嗓音使劲儿装成熟，现在都快到了装嫩的年纪了。&lt;/p></description></item><item><title>无用的信息</title><link>https://sbabybird.github.io/p/%E6%97%A0%E7%94%A8%E7%9A%84%E4%BF%A1%E6%81%AF/</link><pubDate>Thu, 15 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%97%A0%E7%94%A8%E7%9A%84%E4%BF%A1%E6%81%AF/</guid><description>&lt;p>最近一段时间，中午休息的时候我不再上网，这样我就基本上不在公司上 GoogleReader 了。&lt;/p>
&lt;p>随着订阅数越来越多，我的“未读条目”也爆炸式增长，听说有人为此苦恼不已，得了信息爆炸抓狂症。我的解决办法是，每天晚上回家，立即打开 GoogleReader 把未读条目全部清空，现在基本上每天都是在手机上阅读这些订阅了，上下班的路上，消遣消遣时间而已，哪有什么有用信息。&lt;/p></description></item><item><title>今天听说</title><link>https://sbabybird.github.io/p/%E4%BB%8A%E5%A4%A9%E5%90%AC%E8%AF%B4/</link><pubDate>Tue, 13 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BB%8A%E5%A4%A9%E5%90%AC%E8%AF%B4/</guid><description>&lt;p>听说 2012 年北京的宽带会宽到 20M 到桌面，我靠，真是让我欢喜让我忧，喜的是，盼望已久的带宽终于上去了，忧的是，啥都上不了要这么宽的带宽干啥？&lt;/p></description></item><item><title>集成开发环境</title><link>https://sbabybird.github.io/p/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link><pubDate>Mon, 12 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid><description>&lt;p>集成开发环境（为了响应号召，我就不说是 IDE 了）是个好东西，使我们轻松迈入软件开发的门槛，轻松的点击几下“下一步”，瞧，一个软件就诞生了。&lt;/p>
&lt;p>以至于现在很多程序员只知道 makelove 而不知道 makefile。&lt;/p>
&lt;p>我最早接触的集成开发环境应该是 TurboC 了，惭愧的是，我当时以为那就是 C 语言，没办法，当时确实分不清开发环境和编程语言。&lt;/p>
&lt;p>有大约半年的时间由于我未能正确的设置该环境的参数，导致我从教科书上抄来的代码统统不能编译通过，我还以为书上印错了咧。&lt;/p>
&lt;p>后来终于弄好了，在编写了各个版本的 helloworld 之后，终于对 C 语言开窍了，不过还是分不清程序语言和开发环境的关系。&lt;/p>
&lt;p>再后来遇见了 VC6，跟着《21 天精通×××》的教程也能用鼠标写出“大”程序了。&lt;/p>
&lt;p>若干年后的某一天，我研究某开源软件（该软件跨平台）的源码的时候，才第一次见到了 makefile，第一次知道了原来在命令行下也能编译程序啊，于是恍然大悟，明白了集成开发环境只是一个“壳儿”。&lt;/p>
&lt;p>这才试着偶尔用记事本写写小程序，在命令行下编译。从那开始，我渐渐的倾向于，使用编辑器编写代码，使用 makefile 管理项目工程，使用命令行编译程序。&lt;/p>
&lt;p>而对于庞大臃肿、缓慢笨拙的集成开发环境越来越不满了。&lt;/p>
&lt;p>昨天，VS2010 发布了，一大拨人在网上散发着欣喜的软文，疯狂的鼓吹它的强大和先进，喜新厌旧的人们昨天还用着 VS2008，今天就将其抛弃，转而把 VS2010 揽在怀里。&lt;/p>
&lt;p>我想他们大概是喜欢那慢腾腾的编译速度并且可以趁机偷偷去喝上一杯咖啡吧。&lt;/p></description></item><item><title>我没有旅游计划</title><link>https://sbabybird.github.io/p/%E6%88%91%E6%B2%A1%E6%9C%89%E6%97%85%E6%B8%B8%E8%AE%A1%E5%88%92/</link><pubDate>Sun, 11 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E6%B2%A1%E6%9C%89%E6%97%85%E6%B8%B8%E8%AE%A1%E5%88%92/</guid><description>&lt;p>刚看到有人为本年度的旅游制定了完备的计划，恩，很羡慕这个家伙。&lt;/p>
&lt;p>不过说真心话，我不喜欢旅游，有那个时间的话，我还不如好好在我的老家待上一段日子，虽然不是什么山清水秀的地方，但是也算的上是空气清新了。&lt;/p>
&lt;p>我不想去青藏高原，也不愿意去丽江云南，好山好水对我一点儿吸引力都没有。&lt;/p>
&lt;p>与其奢望环游世界，倒不如多和老家亲近亲近，因为我怕有一天，我真的会记不起那里的模样。&lt;/p></description></item><item><title>让我来骂一 骂那些学习的日子</title><link>https://sbabybird.github.io/p/%E8%AE%A9%E6%88%91%E6%9D%A5%E9%AA%82%E4%B8%80-%E9%AA%82%E9%82%A3%E4%BA%9B%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%97%A5%E5%AD%90/</link><pubDate>Fri, 09 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%AE%A9%E6%88%91%E6%9D%A5%E9%AA%82%E4%B8%80-%E9%AA%82%E9%82%A3%E4%BA%9B%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%97%A5%E5%AD%90/</guid><description>&lt;p>我是一个热爱学习的人，可是这是从学习编程开始的。&lt;/p>
&lt;p>上学的时候，我从没有过哪怕一丁点儿的热爱学习。&lt;/p>
&lt;p>虽然那个时候努力装出刻苦的样子，偶尔在邻居们教育孩子的口中听到以我为榜样的句子，可是我和他们心里都清楚，谁他妈的想学习！&lt;/p>
&lt;p>唉，仔细想想，委屈了邻居的孩子们了。&lt;/p>
&lt;p>小的时候，我应该是挺自闭的，虽说成绩还凑合，可是那都是应付考试的结果，回想我们的课本，除了小学数学还算是发挥了点作用，其他的都是垃圾，背的满满一书包全都是大便。&lt;/p>
&lt;p>先从语文说起罢，千篇一律的课文也就罢了，每回回都要划分段落然后总结所谓的中心思想，反复揣摩作者的用意，就算是作者根本没有那个想法，老师也千方百计地往某方面引导。&lt;/p>
&lt;p>至于思想品德课则更是对智商的严重伤害，脆弱的心灵一次次被无情的蹂躏，满满的答卷上全是对撒谎的最早练习。&lt;/p>
&lt;p>老师们极度推崇的课前预习也是我永远的心理阴影，我就想不明白，如果课前预习都把问题考虑清楚了那么还上课干嘛？每次都会有针对预习内容的提问，好好的课堂被搞的乌烟瘴气，听话的孩子翻开白眼，昂起头，骄傲地回答出老师希望的句子。&lt;/p>
&lt;p>期末考试永远是我们的噩梦，考不好承受压力不说，来自各方面的歧视又在伤口上再撒一把厚厚的盐。&lt;/p>
&lt;p>所谓三好学生，所谓学习标兵，做一个他们理想中的孩子吧，做一个“热爱学习”的孩子吧，只要你不想做你自己。&lt;/p></description></item><item><title>关于支持富文本的开发环境设想</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E6%94%AF%E6%8C%81%E5%AF%8C%E6%96%87%E6%9C%AC%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E6%83%B3/</link><pubDate>Thu, 08 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E6%94%AF%E6%8C%81%E5%AF%8C%E6%96%87%E6%9C%AC%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E6%83%B3/</guid><description>&lt;p>现在的源代码都是纯文本，代码关键字、函数以及注释的高亮都是通过源代码编辑器或集成开发环境自己分析的。&lt;/p>
&lt;p>我在想，能不能有一种开发环境，他的源代码采用富文本的方式来存放，及程序员可以随时高亮某一段代码以示警告或提醒，将不同功能模块的代码来使用不同的颜色来显示？&lt;/p>
&lt;p>或者，更进一步的想法，代码的注释里可以加入任何内容，不仅仅是干巴巴的几句描述，而是可以插入一段视频或一幅图片，或者任意的一个附件在代码中？&lt;/p>
&lt;p>再丰富一下，在现有的以“项目”或“解决”方案为代码组织方法的基础上，增加代码以外的东西进入到开发环境中来，比如说，从软件需求的调研文档一直到设计文档，均与最终的代码有机的结合起来，也就是说，通过功能需求文档可以追溯到实现该功能的代码，反过来也可以从某行代码追溯到他所服务的功能。&lt;/p>
&lt;p>吼吼，这样做是不是有点儿太那个了。&lt;/p></description></item><item><title>懒洋洋</title><link>https://sbabybird.github.io/p/%E6%87%92%E6%B4%8B%E6%B4%8B/</link><pubDate>Wed, 07 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%87%92%E6%B4%8B%E6%B4%8B/</guid><description>&lt;p>春天还是来了，虽然晚了一些。但树枝已经偷偷抽出嫩牙儿来，吹在脸上的风也不再恶狠狠的了，偶尔抬头向上望去，甚至能看见蓝天。&lt;/p>
&lt;p>我在路上懒洋洋地走着，边走边想，春姑娘还是来了。&lt;/p></description></item><item><title>我的vim配置文件</title><link>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Tue, 06 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>&lt;p>整理了一下自己的 vim 配置文件，记录在此以备忘。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-vim" data-lang="vim">&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; 编码设置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">encoding&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nx">utf&lt;/span>&lt;span class="m">-8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">fileencodings&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nx">utf&lt;/span>&lt;span class="m">-8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">chinese&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">latin&lt;/span>&lt;span class="m">-1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">gb18030&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">gbk&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">cp936&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">has&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;win32&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">set&lt;/span> &lt;span class="nx">fileencoding&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nx">chinese&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">set&lt;/span> &lt;span class="nx">fileencoding&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nx">utf&lt;/span>&lt;span class="m">-8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endif&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">language&lt;/span> &lt;span class="nx">messages&lt;/span> &lt;span class="nx">zh_CN&lt;/span>.&lt;span class="nx">utf&lt;/span>&lt;span class="m">-8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; 基础设置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">nocompatible&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">softtabstop&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="m">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">shiftwidth&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="m">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">tabstop&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="m">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">bs&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">autoread&lt;/span> &lt;span class="c">&amp;#34; read open files again when changed outside Vim&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">autowrite&lt;/span> &lt;span class="c">&amp;#34; write a modified buffer on each :next, ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">browsedir&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">current&lt;/span> &lt;span class="c">&amp;#34; which directory to use for the file browser&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">wildmenu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">wildignore&lt;/span>&lt;span class="p">=&lt;/span>*.&lt;span class="nx">bak&lt;/span>&lt;span class="p">,&lt;/span>*.&lt;span class="nx">o&lt;/span>&lt;span class="p">,&lt;/span>*.&lt;span class="nx">e&lt;/span>&lt;span class="p">,&lt;/span>*&lt;span class="p">~&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">complete&lt;/span>&lt;span class="p">+=&lt;/span>&lt;span class="nx">k&lt;/span> &lt;span class="c">&amp;#34; scan the files given with the &amp;#39;dictionary&amp;#39; option&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">autocmd&lt;/span> &lt;span class="nx">BufEnter&lt;/span> * &lt;span class="nx">lchdir&lt;/span> %:&lt;span class="nx">p&lt;/span>:&lt;span class="nx">h&lt;/span> &lt;span class="c">&amp;#34; Change the working directory to the directory containing the current file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">filetype&lt;/span> &lt;span class="nx">on&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">filetype&lt;/span> &lt;span class="nx">plugin&lt;/span> &lt;span class="nx">on&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">filetype&lt;/span> &lt;span class="nx">indent&lt;/span> &lt;span class="nx">on&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">syntax&lt;/span> &lt;span class="nx">on&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; 颜色设置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">colorscheme&lt;/span> &lt;span class="nx">koehler&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; 字体设置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">guifont&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nx">Consolas&lt;/span>:&lt;span class="nx">h12&lt;/span>:&lt;span class="nx">cANSI&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">guifontwide&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nx">youyuan&lt;/span>:&lt;span class="nx">h12&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; 折叠设置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">foldmethod&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nx">manual&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">nnoremap&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">space&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> @&lt;span class="p">=((&lt;/span>&lt;span class="nx">foldclosed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">))&amp;lt;&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>?&lt;span class="s1">&amp;#39;zc&amp;#39;&lt;/span>:&lt;span class="s1">&amp;#39;zo&amp;#39;&lt;/span>&lt;span class="p">)&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; 界面设置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">showtabline&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="c">&amp;#34; 始终显示标签页&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">guitablabel&lt;/span>&lt;span class="p">=&lt;/span>%{&lt;span class="nx">tabpagenr&lt;/span>&lt;span class="p">()&lt;/span>}.%&lt;span class="nx">t&lt;/span>\%&lt;span class="nx">m&lt;/span> &lt;span class="c">&amp;#34; 每个 tab 上显示编号&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">guioptions&lt;/span>&lt;span class="p">-=&lt;/span>&lt;span class="nx">T&lt;/span> &lt;span class="c">&amp;#34; 去掉工具条&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">guioptions&lt;/span>&lt;span class="p">-=&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="c">&amp;#34; 去掉菜单&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">guioptions&lt;/span>&lt;span class="p">-=&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="c">&amp;#34; 去掉右边的滚动条&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">guioptions&lt;/span>&lt;span class="p">-=&lt;/span>&lt;span class="nx">L&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">statusline&lt;/span>&lt;span class="p">=&lt;/span>%&lt;span class="nx">F&lt;/span>%&lt;span class="nx">m&lt;/span>%&lt;span class="nx">r&lt;/span>%&lt;span class="nx">h&lt;/span>%&lt;span class="nx">w&lt;/span>\[&lt;span class="nx">FMT&lt;/span>&lt;span class="p">=&lt;/span>%{&amp;amp;&lt;span class="nx">ff&lt;/span>}]\[&lt;span class="nx">TYPE&lt;/span>&lt;span class="p">=&lt;/span>%&lt;span class="nx">Y&lt;/span>]\[&lt;span class="nx">POS&lt;/span>&lt;span class="p">=&lt;/span>%&lt;span class="nx">l&lt;/span>&lt;span class="p">,&lt;/span>%&lt;span class="nx">v&lt;/span>][%&lt;span class="nx">p&lt;/span>%%]\%{&lt;span class="nx">strftime&lt;/span>&lt;span class="p">(&lt;/span>\&lt;span class="s2">&amp;#34;%d/%m/%y-%H:%M\&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">laststatus&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">scrolloff&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">nu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">ruler&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; 查找搜索设置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">incsearch&lt;/span> &lt;span class="c">&amp;#34; use incremental search&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">set&lt;/span> &lt;span class="nx">ignorecase&lt;/span> &lt;span class="nx">smartcase&lt;/span> &lt;span class="nx">hlsearch&lt;/span> &lt;span class="nx">incsearch&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; 将键盘上的 F12 健映射为执行当前文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">map&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F12&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> :&lt;span class="p">!&lt;/span>%&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; 使用 Ctrl+Tab 键来切换标签页&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">map&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">C&lt;/span>&lt;span class="p">-&lt;/span>&lt;span class="nx">TAB&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> :&lt;span class="nx">tabn&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; 快捷键设置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; F2 - write file without confirmation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; F3 - call file explorer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; F4 - show tag under curser in the preview window (tag file must exist!)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; F5 - open quickfix error window&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; F6 - close quickfix error window&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; F7 - display previous error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; F8 - display next error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; Shift-Tab - Fast switching between buffers (see below)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; Ctrl-q - Leave the editor with Ctrl-q (see below)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">map&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> :&lt;span class="nx">write&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">map&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> :&lt;span class="nx">Explore&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">map&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F4&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> :&lt;span class="nx">exe&lt;/span> &lt;span class="s2">&amp;#34;ptag &amp;#34;&lt;/span>.&lt;span class="nx">expand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;cword&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">)&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">map&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> :&lt;span class="nx">copen&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">map&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F6&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> :&lt;span class="nx">cclose&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">map&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F7&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> :&lt;span class="nx">cp&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">map&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F8&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> :&lt;span class="nx">cn&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">imap&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">write&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">imap&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">Explore&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">imap&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F4&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">exe&lt;/span> &lt;span class="s2">&amp;#34;ptag &amp;#34;&lt;/span>.&lt;span class="nx">expand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;cword&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">)&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">imap&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">copen&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">imap&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F6&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">cclose&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">imap&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F7&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">cp&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">imap&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F8&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">cn&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">map&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">S&lt;/span>&lt;span class="p">-&lt;/span>&lt;span class="nx">Tab&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="k">if&lt;/span> &amp;amp;&lt;span class="nx">modifiable&lt;/span>&amp;amp;&amp;amp;&lt;span class="p">!&lt;/span>&amp;amp;&lt;span class="nx">readonly&lt;/span>&amp;amp;&amp;amp; \ &amp;amp;&lt;span class="nx">modified&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">write&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="k">endif&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">bprevious&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">imap&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">S&lt;/span>&lt;span class="p">-&lt;/span>&lt;span class="nx">Tab&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="k">if&lt;/span> &amp;amp;&lt;span class="nx">modifiable&lt;/span>&amp;amp;&amp;amp;&lt;span class="p">!&lt;/span>&amp;amp;&lt;span class="nx">readonly&lt;/span>&amp;amp;&amp;amp; \ &amp;amp;&lt;span class="nx">modified&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">write&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="k">endif&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">bprevious&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">nmap&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">C&lt;/span>&lt;span class="p">-&lt;/span>&lt;span class="nx">q&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> :&lt;span class="nx">wqa&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; taglist 设置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">noremap&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F11&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">Tlist&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">CR&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">inoremap&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">F11&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nx">Esc&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>:&lt;span class="nx">T&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>马桶书架</title><link>https://sbabybird.github.io/p/%E9%A9%AC%E6%A1%B6%E4%B9%A6%E6%9E%B6/</link><pubDate>Sun, 04 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%A9%AC%E6%A1%B6%E4%B9%A6%E6%9E%B6/</guid><description>&lt;p>想说说坐马桶上看书这事儿，记得在美剧《好汉两个半》里有这样一个情节，被老婆抛弃的那哥们儿有一天在书店里突然失去理智，变得歇斯底里，&lt;/p>
&lt;p>因为他想起来曾经发誓要读的书从来都没有读过，把这些书都抱在怀里哭泣不止，&lt;/p>
&lt;p>更令人沮丧的是他的花花公子哥哥劝他说，现在还来得及，虽然平时比较忙，但如果把这些书放在马桶上则可以每次大便的时候都看一段，这样应该也能弥补一些缺憾。&lt;/p>
&lt;p>可是这哥们儿哭着说，来不及了，把他余生大便次数都用上，也读不完这些名著了。&lt;/p>
&lt;p>呵呵，说的太对了，我觉得这个段子用来教育不爱读书的孩子估计不错，我们看了却只能苦笑一下。&lt;/p>
&lt;p>显然我也不认为在大便的时候读名著是个好主意，看着那些故事里的主人公在那里纠结不休，要么爱的死去活来，要么整天拧巴地思考人生意义，就算是你天天喝着蜂蜜外加一瓶开塞露也非得便秘不可。&lt;/p>
&lt;p>我觉得吧，为了身体的健康，如果非要在大便时看书的话，还是尽量的读一些短文好了，比如我以前就爱看看《读者》啥的，最近偶尔也提升点儿档次弄本《三联周刊》看看，不过总的来说，看的都是些文笔平顺、言语轻快能促进大肠蠕动的文章。&lt;/p>
&lt;p>今天收拾洗手间的时候，从马桶后面拎出了一大摞书，数了数，居然比我书架上的书还多。&lt;/p></description></item><item><title>永不放弃</title><link>https://sbabybird.github.io/p/%E6%B0%B8%E4%B8%8D%E6%94%BE%E5%BC%83/</link><pubDate>Sat, 03 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%B0%B8%E4%B8%8D%E6%94%BE%E5%BC%83/</guid><description>&lt;p>不要被眼前的困难吓倒，认定你的目标，坚持下去。&lt;/p>
&lt;p>哪怕有一万个人对你说，不行，但只要你的心告诉你，行，那就是行，没有商量的余地。&lt;/p>
&lt;p>有时候越是简单的事情越难以做好，骄傲的人做不好，懒惰的人做不好，勤奋却不得方法的人也做不好。&lt;/p>
&lt;p>你觉得你谦虚了﹑努力了﹑方法也对了，那么，别灰心，坚持下去。&lt;/p>
&lt;p>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-重温《阿甘正传》有感。&lt;/p></description></item><item><title>愚人节的新闻</title><link>https://sbabybird.github.io/p/%E6%84%9A%E4%BA%BA%E8%8A%82%E7%9A%84%E6%96%B0%E9%97%BB/</link><pubDate>Thu, 01 Apr 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%84%9A%E4%BA%BA%E8%8A%82%E7%9A%84%E6%96%B0%E9%97%BB/</guid><description>&lt;p>今天是一年一度的愚人节，过得平淡无奇。&lt;/p>
&lt;p>大家慵懒得好像连开玩笑的心思也没有了，不过还是在互联网上看到了几条愚人新闻，聊胜于无。&lt;/p>
&lt;p>出镜最多的就数 Google 了，比如这个 Google 可以上传任意物体的新闻就比较有创意，还有这个说 Google 收购了核技术公司准备进行核研究的新闻，&lt;/p>
&lt;p>至于 Google 宣布改名为 Topek 和 Google 准备收购百度这两条新闻就比较无趣了，而这个关于 Google 街景提供红蓝眼镜 3D 观赏模式的新闻简直可以以假乱真了。&lt;/p>
&lt;p>其他的新闻就比较少了，国内的 cnBeta 也算是提供了一个比较搞笑的，称其不再支持 ie6 和 flash，并且说的有板有眼，说实在的这条新闻我宁愿相信是真的。&lt;/p></description></item><item><title>春雨</title><link>https://sbabybird.github.io/p/%E6%98%A5%E9%9B%A8/</link><pubDate>Tue, 30 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%98%A5%E9%9B%A8/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%98%A5%E9%9B%A8/20100330512-777160.jpg" alt="Featured image of post 春雨" />&lt;p>这场雨下的挺爽的，为什么呢？因为我带伞了。&lt;/p></description></item><item><title>没有合适的资料管理软件</title><link>https://sbabybird.github.io/p/%E6%B2%A1%E6%9C%89%E5%90%88%E9%80%82%E7%9A%84%E8%B5%84%E6%96%99%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/</link><pubDate>Mon, 29 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%B2%A1%E6%9C%89%E5%90%88%E9%80%82%E7%9A%84%E8%B5%84%E6%96%99%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/</guid><description>&lt;p>我的硬盘整理行动已经开始了一周多了，期间最让我头疼的就属工作中产生的文档资料了，技术文章、幻灯片、项目计划等等等等。&lt;/p>
&lt;p>杂乱地堆放在我的各个硬盘里，好多东西不舍的删除，偏偏在用到的时候找不见，没用的时候又老在眼皮子底下碍事。&lt;/p>
&lt;p>曾经试过 evernote 来管理资料，可是对于大量的 word 文档不太合适，使用 subversion 又有点儿麻烦或大才小用。&lt;/p>
&lt;p>使用 GoogleDocs 倒是还凑合，可是说不定哪天就上不去了，到时候哭都来不及。&lt;/p>
&lt;p>干脆使用 Google 的桌面搜索，可是眼看着索引文件越来越大而且重装系统也是个麻烦事儿。&lt;/p>
&lt;p>myBase 也试用过，界面太朴素也可以接受，功能也很强大，就怕管理的文档多了影响速度，而且 myBase 是收费软件，使用单一文件数据库还得天天备份，麻烦。&lt;/p>
&lt;p>真的找不到合适的了，难道要自己动手写一个？&lt;/p></description></item><item><title>不用了，这是给我的。</title><link>https://sbabybird.github.io/p/%E4%B8%8D%E7%94%A8%E4%BA%86%E8%BF%99%E6%98%AF%E7%BB%99%E6%88%91%E7%9A%84/</link><pubDate>Sun, 28 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8D%E7%94%A8%E4%BA%86%E8%BF%99%E6%98%AF%E7%BB%99%E6%88%91%E7%9A%84/</guid><description>&lt;p>这个周末碰到的不是烂片，而是一部让人惊喜的电影&amp;mdash;&amp;mdash;《窃听者》。&lt;/p>
&lt;p>该怎样评价这部电影，我不知道，只能说好的电影，能够给人带来思考。&lt;/p>
&lt;p>而《窃听者》这部电影却在带来思考的同时又打动人内心最柔软的部分。&lt;/p>
&lt;p>故事也许很简单，但是讲好一个故事并不容易，在那样一个年代，或者是在这样一个年代，形形色色的人，做着自以为正确的事情。&lt;/p>
&lt;p>片中的主人公（我认为他才是男一号）工作在见不得光的地方，每天的工作就是带着耳机监听着“疑似坏人”的一举一动。&lt;/p>
&lt;p>随着时间的推移，他的思想渐渐转变，融入到被监听人的生活。&lt;/p>
&lt;p>影片的节奏平缓而又有力，细腻又不失大气，场景的色调和背景音乐低沉得像是一直饱含泪水。&lt;/p>
&lt;p>带着耳机的监听人在立场上渐渐站在被监听人那边时，连他自己都很难理解自己为什么要这么做，其实他只是在追随自己的心，哪怕为此付出了巨大的代价。&lt;/p>
&lt;p>如果说这个世界还有良心的话，那这就是良心。&lt;/p></description></item><item><title>写歌一首</title><link>https://sbabybird.github.io/p/%E5%86%99%E6%AD%8C%E4%B8%80%E9%A6%96/</link><pubDate>Sun, 28 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%99%E6%AD%8C%E4%B8%80%E9%A6%96/</guid><description>&lt;p>晚饭后，出去散步，春风拂面，颇有意境，遂赋酸词一首，改日谱曲。&lt;/p>
&lt;p>如下：&lt;/p>
&lt;p>我会做我自己只要我还愿意去寻找&lt;/p>
&lt;p>曾经，的美丽在幸福的日记里在漫漫岁月里&lt;/p>
&lt;p>有了你我不怕，孤寂&lt;/p>
&lt;p>我要好好爱你没有人能怀疑&lt;/p>
&lt;p>你知道我不能，失去你&lt;/p>
&lt;p>就算春风淅沥沥吹不走&lt;/p>
&lt;p>长夜思绪爱让我化不开，忧伤&lt;/p>
&lt;p>哪怕心中燃烧的梦想带来远方无尽的希望&lt;/p>
&lt;p>猜不透的是那里到底有没有天堂&lt;/p>
&lt;p>春天花儿悄悄地绽放背上重重流浪的行囊&lt;/p>
&lt;p>带不走的是你给我的清香&lt;/p></description></item><item><title>连接被重置</title><link>https://sbabybird.github.io/p/%E8%BF%9E%E6%8E%A5%E8%A2%AB%E9%87%8D%E7%BD%AE/</link><pubDate>Sat, 27 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%BF%9E%E6%8E%A5%E8%A2%AB%E9%87%8D%E7%BD%AE/</guid><description>&lt;p>打开我的 blog 总是连接被重置，为啥？我这儿没啥敏感词啊。&lt;/p></description></item><item><title>下雨啦</title><link>https://sbabybird.github.io/p/%E4%B8%8B%E9%9B%A8%E5%95%A6/</link><pubDate>Wed, 24 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8B%E9%9B%A8%E5%95%A6/</guid><description>&lt;p>下班的路上，下起了大雨，下了车仍然在下，没带雨伞，还好穿的比较厚，没有淋到，但是地上积水很多，把我的鞋洗的铮亮。&lt;/p>
&lt;p>不是说春雨像牛毛、像花针、像细丝吗？&lt;/p>
&lt;p>不是说随风潜入夜，润物细无声吗？&lt;/p></description></item><item><title>春天，GoogleBye</title><link>https://sbabybird.github.io/p/%E6%98%A5%E5%A4%A9googlebye/</link><pubDate>Tue, 23 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%98%A5%E5%A4%A9googlebye/</guid><description>&lt;p>都说你是纯爷们，其实也只是个传说，这里没有纯爷们。&lt;/p></description></item><item><title>千年以后的人类</title><link>https://sbabybird.github.io/p/%E5%8D%83%E5%B9%B4%E4%BB%A5%E5%90%8E%E7%9A%84%E4%BA%BA%E7%B1%BB/</link><pubDate>Mon, 22 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8D%83%E5%B9%B4%E4%BB%A5%E5%90%8E%E7%9A%84%E4%BA%BA%E7%B1%BB/</guid><description>&lt;p>闲来无事，意淫一下千年以后人类是啥子样子哈。&lt;/p>
&lt;p>如果 2012 是真的，那么千年以后没有人类。&lt;/p>
&lt;p>如果不是，也许北京的地铁都修到 31415926 号线了，但是交通依然拥堵。&lt;/p>
&lt;p>那时候也许你的 qq 等级已经升级到两个天狼星外加 5 个太阳 3 个月牙（1G 个太阳折合一颗天狼星）。&lt;/p>
&lt;p>那时候 Google 已经接管了地球上所有的计算工作，人一生下来屁股上就被栓个搜索框。&lt;/p>
&lt;p>那时候人当然已经不再是从娘肚子里爬出来，而是由计算机编译出来，他的“父亲”在 web 页面上选择他所具备的能力，可以选择他一生下来就会 C 语言或者偷菜，而且有多星系语言版本，当然了，能力越高就越贵。&lt;/p>
&lt;p>那时候所有的人都要求过织女星语 4 级，考不过不给办理银河系暂住证，当然了你也可以在开往木星的长途车站门口找到一堆办证的广告。&lt;/p>
&lt;p>那时候 IE 也应该支持 W3C 的浏览器标准了，如果 IE 还在的话。&lt;/p>
&lt;p>那时候会有一堆考古学家专门研究从地下挖出的碟片是盗版还是正版，当然了那时还是正版的值钱，到时会有一个电视节目叫“鉴碟”，拿着你收藏的碟片上电视节目的话，如果是盗版会被当场被锤子砸烂，不过有个例外是“A 片不砸”。&lt;/p></description></item><item><title>声卡那些事儿</title><link>https://sbabybird.github.io/p/%E5%A3%B0%E5%8D%A1%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</link><pubDate>Sun, 21 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A3%B0%E5%8D%A1%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</guid><description>&lt;p>1、装机&lt;/p>
&lt;p>要是在 2000 年左右买电脑装机器，除了要考虑 cpu、主板和显卡之外，还有个板卡不能忽视，就是声卡。&lt;/p>
&lt;p>没声音，再好的戏也出不来，所以声卡作为一个多媒体电脑的基本配件在当时是十分重要的，记得当时很多厂家都在这个领域厮杀，启亨、帝盟、创新、雅马哈等，广告打得异常火爆，后来来自新加坡的创新公司创新赢得了这场战争。因为创新推出了一片极其牛逼的芯片 EMU-10k1，利用该芯片制造出了一拨红的发紫的声卡产品&amp;mdash;-SB-Live 系列（我们背地里管它叫傻逼的生活）。&lt;/p>
&lt;p>后来一个计算机标准出来了，那就是 AC97，主板逐渐集成了声卡，开始还依赖 cpu 的运算偶尔还要爆音和死机，后来技术日趋成熟，遍地都是板载声卡了，主板厂商要是不集成声卡都不好意思跟人家打招呼了，这下好了，装机的配置单上再也没有“声卡”这个选项了。&lt;/p>
&lt;p>2、波表&lt;/p>
&lt;p>我的第一台计算机配了一块杂牌声卡，我估计音质还比不了现在的集成声卡，但是该声卡集成了一个 FM 合成器，我当时爱玩一个叫“快乐电子琴”的音乐软件（感谢这个软件，因为这个软件我后来才买了台雅马哈电子琴），利用该软件可以在电脑上叮叮咚咚地弹电子琴，也算是过过电子琴的干瘾。&lt;/p>
&lt;p>这个软件之所以可以发音就是依赖了我声卡上的 FM 合成器，不过乐器的音色很假，敲鼓的声音像是在放屁。&lt;/p>
&lt;p>直到有一天我去同学家里玩，他有一块雅马哈 724 声卡，我给他装上了“快乐电子琴”，一弹奏我就惊呆了，乐器的声音太逼真了，跟真的一样，比起我那个 FM 合成器声音有天壤之别，后来屡次查资料这才认识了“波表”这个东东，这是一项 MIDI 技术，如果要说清楚的话估计得说上三天三夜，这里就不详细介绍了。&lt;/p>
&lt;p>不过雅马哈的 724 声卡其实并非带了硬件波表合成器，而是通过软件模拟的，发声会有一些延迟，但是已经很不错了，软件波表模拟器后来发展的也不错，能力也大大超过了硬波表，不过这就是后话了（现在的计算机上如果是 windows 系统就都有一个软波表，音质一般，有延迟）。&lt;/p>
&lt;p>再后来我的另一个同学有块创新 PCI128 声卡带了个 8MB 的硬波表合成器，这个声音又让我吃惊了一下子，这次就更逼真了，而且声音实时发出，不带一丝一毫的延迟，软件波表模拟器的最大的缺陷在这里被一扫而光。&lt;/p>
&lt;p>3、ASIO&lt;/p>
&lt;p>我后来有了一块创新的 SB-Live 声卡，用了快 8 年了，这么多年我换了 3 台计算机，但是声卡一直用的是这一块。这块声卡经典到无法用言语来形容，目前在我的电脑上通过 kx 驱动，发出的声音甜美清澈，音质是那些集成声卡脱了裤子也撵不上的。&lt;/p>
&lt;p>虽然已经停产了，但是仍然可以在网上买到旧的，听说有人收藏了上百块这款声卡，可见其经典程度。&lt;/p>
&lt;p>更难能可贵的是，有了 kx 驱动（一个非官方的改版驱动）可以使此声卡支持 ASIO（一种音频标准），在 Cubase 等录音软件下可达到实时渲染声音的效果，行话叫“听湿录干”，要是普通声卡的话就有很大的延迟，想想你唱卡拉 ok 时过了几秒钟声音才发出来的尴尬，所以支持 ASIO 可以让我在 CuBase 下直接唱卡拉 OK，而且可通过各种软效果器随意处理自己的音色。&lt;/p>
&lt;p>4、现在&lt;/p>
&lt;p>很少有人再去关注声卡了，厂商也不再大力宣传他们的声卡产品，那些肯花五千块钱配电脑的人宁愿其中有一千块钱花在显卡上却不愿花三百块钱买块差不多的声卡。好吧，那你就忍受集成声卡那粘粘糊糊的音质吧。&lt;/p></description></item><item><title>烂片时间</title><link>https://sbabybird.github.io/p/%E7%83%82%E7%89%87%E6%97%B6%E9%97%B4/</link><pubDate>Sat, 20 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%83%82%E7%89%87%E6%97%B6%E9%97%B4/</guid><description>&lt;p>周末，挑了一部尼古拉斯凯奇的电影，看完了不得不说，白瞎了尼古拉斯凯奇了，不过竟然看完了，知道是哪部了吧？&lt;/p></description></item><item><title>我是无法整理好我的硬盘了</title><link>https://sbabybird.github.io/p/%E6%88%91%E6%98%AF%E6%97%A0%E6%B3%95%E6%95%B4%E7%90%86%E5%A5%BD%E6%88%91%E7%9A%84%E7%A1%AC%E7%9B%98%E4%BA%86/</link><pubDate>Thu, 18 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E6%98%AF%E6%97%A0%E6%B3%95%E6%95%B4%E7%90%86%E5%A5%BD%E6%88%91%E7%9A%84%E7%A1%AC%E7%9B%98%E4%BA%86/</guid><description>&lt;p>随着时间的推移，硬盘上的东西积累的越来越多，硬盘也由原来的一块到现在的四块，大容量的硬盘对于偏执狂就是一个噩梦。&lt;/p>
&lt;p>早就意识到硬盘需要整理，可是我的整理速度却赶不上硬盘里的垃圾堆积的速度。&lt;/p>
&lt;p>有些东西明明“没有用”却不舍的删除，而真正需要用到的时候却死活找不到放在那个文件夹下面了，曾经使用过 Google 的桌面搜素，确实不错，可是该程序的索引会越来越大，渐渐达到难以忍受的地步，只得停用。&lt;/p>
&lt;p>我决定狠一狠心，花掉这个周末，彻底整理好硬盘上的文件&amp;hellip;&amp;hellip;&lt;/p></description></item><item><title>听歌随想</title><link>https://sbabybird.github.io/p/%E5%90%AC%E6%AD%8C%E9%9A%8F%E6%83%B3/</link><pubDate>Wed, 17 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%90%AC%E6%AD%8C%E9%9A%8F%E6%83%B3/</guid><description>&lt;p>最早对听歌有印象应该是在八九岁的时候，追逐时尚（当时还没有‘时尚’这个词）的三叔买了当时比较酷的双卡收录机，呵呵，年轻人嘛。&lt;/p>
&lt;p>我就从那个时候起开始听磁带，磁带比较匮乏，基本上没啥可挑的，偶尔只有戏曲磁带也得将就着听。&lt;/p>
&lt;p>估计当时就是 90 年代吧，记不清了，好像还流传过一阵子囚歌（愁啊愁啥的），后来又有电视连续剧《渴望》、《篱笆女人和狗》等里面的插曲流行，我记得我当时听一遍就学会了《篱笆女人和狗》里面的一曲《过三关》，还好当时还小，啥也不明白，现在回想起来，那绝对是一首“黄色歌曲”，比邓丽君的歌“黄”多了（当然我当时不知道邓丽君），不信你可以去查一查歌词，不过要说这是艺术的话也能给糊弄过去（其实仔细品味宋祖英的《十八弯的水路到我家》也有那个意思）。&lt;/p>
&lt;p>没办法，在农村的乡下，也就听这些歌了，将就了。也有一阵子流行《黄土高坡》、《信天游》什么的，后来我才知道，人们管那一阵子叫“西北风”。&lt;/p>
&lt;p>镜头再往现在稍微推一推，我就开始听到港台歌曲了，第一首有印象的港台歌曲是刘德华的《来生缘》，第二首是叶倩文的《潇洒走一回》，第三首是郑智化的《水手》，算是对流行歌曲的正式启蒙吧，那时家已经搬到了镇上。&lt;/p>
&lt;p>后来学习开始紧张了，没机会听到更多的流行歌曲，但是还是很喜欢听的，基本不放过听歌的机会，偶尔也会攒点儿零花钱去买磁带，但当时的零花钱简直是少的可怜，一盒磁带要十块钱左右，所以我很少买，不过我现在还记得买的第一盒磁带，是一个大杂烩合集，周华健《风雨无阻》、张学友《偷心》、谭咏麟《青春梦》等等，都是在那盒磁带上第一次听到。&lt;/p>
&lt;p>这些歌应该不是那年才刚刚流行的，但我肯定是那时才接触到。由于信息的闭塞和经济的欠发达（就是穷），我听歌的节奏一直比别人晚了半拍（这是后来上了大学才知道的）。&lt;/p>
&lt;p>比如他们听张信哲的时候我还不认识这个人，我听张信哲的时候他们已经在听周杰伦了。&lt;/p>
&lt;p>现在我偶尔也听周杰伦了，但是他们都不听周杰伦了。工作以后，有一天我跟同事聊天说道：“我怎么现在才觉得欧美的 80 年代摇滚那么好听呢？是不是我的欣赏水平才达到人家 80 年代的水平呢？”还是我的同事有水平，沉吟片刻，给了一个很牛逼的答案：“不是越往现在的东西就越好，比如瓷器就是越老越值钱，越是现在的就越便宜&amp;hellip;&amp;hellip;”&lt;/p></description></item><item><title>想出s60软件签名机制的家伙脑子一定是被驴踢了</title><link>https://sbabybird.github.io/p/%E6%83%B3%E5%87%BAs60%E8%BD%AF%E4%BB%B6%E7%AD%BE%E5%90%8D%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%B6%E4%BC%99%E8%84%91%E5%AD%90%E4%B8%80%E5%AE%9A%E6%98%AF%E8%A2%AB%E9%A9%B4%E8%B8%A2%E4%BA%86/</link><pubDate>Tue, 16 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%83%B3%E5%87%BAs60%E8%BD%AF%E4%BB%B6%E7%AD%BE%E5%90%8D%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%B6%E4%BC%99%E8%84%91%E5%AD%90%E4%B8%80%E5%AE%9A%E6%98%AF%E8%A2%AB%E9%A9%B4%E8%B8%A2%E4%BA%86/</guid><description>&lt;p>前一阵子突然想玩玩在手机上写程序，以前也写过 j2me 的，这次图个新鲜就挑了 pythonfors60，还算比较容易掌握，于是就随便写了个帮助我自己查话费余额以及 gprs 流量的小程序，基本能用，后来由于太忙就懒得再完善了，随便打个包装在我的 e71 上了事。&lt;/p>
&lt;p>前几天老婆也让我给她装个这样的程序，我才发现问题所在，我没有开发者证书（这个据说要掏钱向 nokia 购买），打包成的 sis 安装程序在破解过的手机上可以随便装，但是没破的就无法安装了，而以一个普通用户的水平，诸如这些申请证书、软件签名、高权限、破解等几乎无法独立完成，甚至无法理解。&lt;/p>
&lt;p>靠，把话题扯远一些，再说说 nokia 提供的开发环境，如果使用 c++开发的话，光是开发环境的配置就足以让人抓狂的，不能在 linux 下开发不说，在 windows 下开发还得把编译环境和 sdk 安装到同一个盘符下否则打死都不能编译通过，在某些笔记本上就连模拟器也有必须插上麦克风才能正常启动的怪癖。&lt;/p>
&lt;p>所以说 nokia 这么做只会让 symbian 平台慢慢死去或慢慢去死，以后就算不被 android 压住风头也会被自己玩死。&lt;/p>
&lt;p>我的建议是，提供好用又免费的开发环境，彻底摒弃垃圾的软件签名机制，提供类似于 appstore 的软件商店（听说也有了）。&lt;/p>
&lt;p>总之就是吸引开发人员开发出大量牛叉的应用，这样才“科技以人为本”而不是以坑人为本。&lt;/p>
&lt;p>ps：看来 nokia 把宝压在 qt 上了，我也是比较看好 qt 的，也希望 nokia 能够发挥好 qt。&lt;/p></description></item><item><title>不听相声听音乐</title><link>https://sbabybird.github.io/p/%E4%B8%8D%E5%90%AC%E7%9B%B8%E5%A3%B0%E5%90%AC%E9%9F%B3%E4%B9%90/</link><pubDate>Mon, 15 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8D%E5%90%AC%E7%9B%B8%E5%A3%B0%E5%90%AC%E9%9F%B3%E4%B9%90/</guid><description>&lt;p>前一阵子我养成了一个不良好的习惯，睡前听相声，甚至达到了不听就睡不着的地步。&lt;/p>
&lt;p>说出来怕郭德纲不高兴，我听他的段子入睡最快，不过也许他会说一句“我很欣慰啊”。&lt;/p>
&lt;p>如今的相声段子太少，很快就无法听着新鲜段子睡觉了，而老段子则是催眠效果不佳。&lt;/p>
&lt;p>行动吧，改掉这个坏毛病。&lt;/p>
&lt;p>于是，我把音箱从书房搬到客厅，然后又搬到卧室，每天晚上睡前从《加州招待所》一直听到《喜洋洋》，渐渐发现我现在竟然能听的进去民乐，甚至还喜欢上了。&lt;/p></description></item><item><title>上苍保佑爱折腾的人</title><link>https://sbabybird.github.io/p/%E4%B8%8A%E8%8B%8D%E4%BF%9D%E4%BD%91%E7%88%B1%E6%8A%98%E8%85%BE%E7%9A%84%E4%BA%BA/</link><pubDate>Sun, 14 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8A%E8%8B%8D%E4%BF%9D%E4%BD%91%E7%88%B1%E6%8A%98%E8%85%BE%E7%9A%84%E4%BA%BA/</guid><description>&lt;p>折腾，大部分情况是贬义，有一种没事儿找事儿的味道，或者是重复地捣腾一些无意义的事情。&lt;/p>
&lt;p>大概就这么个意思吧，详情可以去查词典。&lt;/p>
&lt;p>对照一下，发现我是个不折不扣的爱折腾的人。&lt;/p>
&lt;p>我的这个特质在计算机方面几乎发挥到了让人发指的地步，比如在大学的时候，我几乎每周重装一次操作系统，后来无意中把 Win98 的序列号（QY7TT-VJ7VG-7QPHY-QXHD3-B838Q）给背了下来，你看，竟然现在还记得（敲了那么多遍，记不住才怪）。&lt;/p>
&lt;p>这个爱重装系统的癖好差点儿保留到工作以后，直到后来工作忙了，实在无暇顾及才消停。有一阵子我认为听音乐的感受跟音箱的摆放有很大关系，于是就反复调整喇叭的位置，比如挂在蚊帐上、放在洗衣机里、塞到书架里等等，虽然知道这么做没啥意义（不像许三多那样整天想着做有意义的事情），但是还是无法停止。&lt;/p>
&lt;p>最近还流行一个词叫 MOD（改造），其实就是折腾，好好的东西改的面目全非却让人着迷，虽然不会把吹风机改装成刮胡刀，但是可以把台式机改造成便携机，或者把笔记本电脑改造成平板电脑，据说有公司专门负责干这个还挺赚钱的。&lt;/p>
&lt;p>还有一种折腾是总想让手里的工具达到一种无限趋近完美的状态，或者榨干它的最后一丝潜力，这些貌似无聊的事情，有个很大的原因是因为个性里多少有点儿完美主义或偏执的性格。&lt;/p>
&lt;p>这里的例子很多，并不局限于计算机上，生活中的各个方面都有，比如据传闻有牛人在开车起步的时候先挂一下倒档，这样使自己的手动挡的车在别人看起来像是自动档的了，哈哈，玩笑。&lt;/p>
&lt;p>折腾是一种生活态度，在我看来甚至是一种美德，一个人喜爱折腾并非是缺心眼儿，而是说明其有活力、有追求。&lt;/p>
&lt;p>爱迪生如果不爱折腾可能我们现在还在点着蜡烛，牛顿不爱折腾的话我们也不会在学校里里受尽高等数学的折磨，福特要是不爱折腾我们现在的交通也许不会这么拥堵，骑着马去赶集，够拉风，我靠，怎么说着说着论证反了。&lt;/p>
&lt;p>总之吧，我觉得上苍就是保佑爱折腾的人，怎么地吧。&lt;/p></description></item><item><title>真是个不错的天气</title><link>https://sbabybird.github.io/p/%E7%9C%9F%E6%98%AF%E4%B8%AA%E4%B8%8D%E9%94%99%E7%9A%84%E5%A4%A9%E6%B0%94/</link><pubDate>Sun, 14 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%9C%9F%E6%98%AF%E4%B8%AA%E4%B8%8D%E9%94%99%E7%9A%84%E5%A4%A9%E6%B0%94/</guid><description>&lt;p>虽然理论上已是春天，可是很显然今年真正的春天要比往年来得要晚一些。&lt;/p>
&lt;p>星期天的早晨不太想睡懒觉，拉开窗帘就看见大雪纷飞的天气，恩，这种天气最适合缩在家里，看个电影或者看看书，总之，是个适合宅在家里的天气。&lt;/p></description></item><item><title>该读什么样的书</title><link>https://sbabybird.github.io/p/%E8%AF%A5%E8%AF%BB%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%B9%A6/</link><pubDate>Fri, 12 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%AF%A5%E8%AF%BB%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%B9%A6/</guid><description>&lt;p>一直后悔书读的太少，用他们文化人的观点来说，我几乎算上是文盲级别的。&lt;/p>
&lt;p>记得有人开过一长串的书单，曰：没读过这些书的都算文盲。&lt;/p>
&lt;p>我扫了一下列表，光是外国名著就占了很大一部分，像我这种看见翻译成中文的外国人名就头疼的人，肯定算个不折不扣的文盲了。&lt;/p>
&lt;p>学生时期，我所看的文章大部分来自于语文课文，偶尔有课外读物也是吹得没边儿没沿儿的童话故事。&lt;/p>
&lt;p>厚部头的书几乎没有耐心把封皮看完。&lt;/p>
&lt;p>后来用掌上电脑看书，没有了厚度的压力，我才能把金庸和古龙看完，嘿嘿，就算是补看，也补武侠小说。&lt;/p>
&lt;p>前两天又有人出来得瑟着整书单出来，告诉别人这辈子最该读什么书，我操，我该读什么书先搁一边儿，你凭什么在那儿指手画脚。&lt;/p>
&lt;p>最讨厌的就是这些家伙，动不动就告诉别人该这样该那样，什么这辈子一定要去的几十个地方啦，做人一定要注意的十个方面啦，一天一定要喝八杯水啦，你大爷的，你自己的事儿整明白了么？嗯？&lt;/p></description></item><item><title>今天是女儿生日</title><link>https://sbabybird.github.io/p/%E4%BB%8A%E5%A4%A9%E6%98%AF%E5%A5%B3%E5%84%BF%E7%94%9F%E6%97%A5/</link><pubDate>Thu, 11 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BB%8A%E5%A4%A9%E6%98%AF%E5%A5%B3%E5%84%BF%E7%94%9F%E6%97%A5/</guid><description>&lt;p>今天是女儿的生日，祝她生日快乐，健康、平安。&lt;/p></description></item><item><title>模仿最近比较 流行的日记格式</title><link>https://sbabybird.github.io/p/%E6%A8%A1%E4%BB%BF%E6%9C%80%E8%BF%91%E6%AF%94%E8%BE%83-%E6%B5%81%E8%A1%8C%E7%9A%84%E6%97%A5%E8%AE%B0%E6%A0%BC%E5%BC%8F/</link><pubDate>Wed, 10 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%A8%A1%E4%BB%BF%E6%9C%80%E8%BF%91%E6%AF%94%E8%BE%83-%E6%B5%81%E8%A1%8C%E7%9A%84%E6%97%A5%E8%AE%B0%E6%A0%BC%E5%BC%8F/</guid><description>&lt;p>今天起的很早，天气转晴了，冷的厉害。&lt;/p>
&lt;p>检查手机电邮时发现忘记换电池了，赶紧给手机换上。&lt;/p>
&lt;p>公交车又迟迟不来，烦。&lt;/p></description></item><item><title>我最喜欢的电影画面</title><link>https://sbabybird.github.io/p/%E6%88%91%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E7%94%B5%E5%BD%B1%E7%94%BB%E9%9D%A2/</link><pubDate>Wed, 10 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E7%94%B5%E5%BD%B1%E7%94%BB%E9%9D%A2/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%88%91%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E7%94%B5%E5%BD%B1%E7%94%BB%E9%9D%A2/4681282-739763.jpg" alt="Featured image of post 我最喜欢的电影画面" />&lt;p>在辽阔的金黄色的麦田里，微风吹起麦浪，主人公的背影慢慢出现，伸手轻抚麦穗。&lt;/p>
&lt;p>在麦田的对岸，有守望他的亲人，这是我最喜欢的电影画面，来自《角斗士》。&lt;/p></description></item><item><title>买了个加湿器</title><link>https://sbabybird.github.io/p/%E4%B9%B0%E4%BA%86%E4%B8%AA%E5%8A%A0%E6%B9%BF%E5%99%A8/</link><pubDate>Tue, 09 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B9%B0%E4%BA%86%E4%B8%AA%E5%8A%A0%E6%B9%BF%E5%99%A8/</guid><description>&lt;p>北方的天气就是干燥，在房间里放上半杯水，没两天就干了。&lt;/p>
&lt;p>睡上一觉醒来，鼻子和喉咙都干的够呛。&lt;/p>
&lt;p>经过同事的建议，买了个“空气加湿器”，京东的送货速度就是快，昨天下的订单今天就到了。&lt;/p>
&lt;p>拆开一看，根本就不是多么高级精密的仪器，是一个塑料水杯，通过马达把水打成很碎的水雾然后喷出来而已。&lt;/p>
&lt;p>试试效果如何，先喷一晚上再说。&lt;/p></description></item><item><title>应老婆大人要求，继续写博</title><link>https://sbabybird.github.io/p/%E5%BA%94%E8%80%81%E5%A9%86%E5%A4%A7%E4%BA%BA%E8%A6%81%E6%B1%82%E7%BB%A7%E7%BB%AD%E5%86%99%E5%8D%9A/</link><pubDate>Mon, 08 Mar 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BA%94%E8%80%81%E5%A9%86%E5%A4%A7%E4%BA%BA%E8%A6%81%E6%B1%82%E7%BB%A7%E7%BB%AD%E5%86%99%E5%8D%9A/</guid><description>&lt;p>刚才老婆短我，问我为啥博客不再更新了，并表示期待看到我继续更新此博客。&lt;/p>
&lt;p>本来，对网络环境十分失望，写了博客也无法正常访问，养成写博客的习惯也慢慢丢弃。&lt;/p>
&lt;p>有心不再更新 livespace 的博客而专心使用 blogspot，无奈 blogspot 长期被挡在墙外，老婆大人当然无法访问，而老婆通常又是我博客的 VIP 读者，所以，既然老婆要求我仍然在此唠叨，那就继续在此更新吧。&lt;/p></description></item><item><title>this blog is shutdown</title><link>https://sbabybird.github.io/p/this-blog-is-shutdown/</link><pubDate>Fri, 05 Feb 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/this-blog-is-shutdown/</guid><description>&lt;p>byebye 另一个 blog 地址仍然有效 http://sbabybird.blogspot.com&lt;/p></description></item><item><title>经历时光倒流</title><link>https://sbabybird.github.io/p/%E7%BB%8F%E5%8E%86%E6%97%B6%E5%85%89%E5%80%92%E6%B5%81/</link><pubDate>Thu, 28 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%BB%8F%E5%8E%86%E6%97%B6%E5%85%89%E5%80%92%E6%B5%81/</guid><description>&lt;p>大前天（2010-01-25）的晚上，我更新了一篇博客叫“中了数码产品的毒”，通过 email 同步更新到我的在 blogspot 上和 livespaces 上的日志里，结果 livespaces 里无法显示。&lt;/p>
&lt;p>本来就觉得 livespaces 用着有些别扭，因为 blogspot 在国内无法访问，没办法才同时更新 livespaces 作为备份的。加上这两天盖茨又在叫嚣不利于互联网和谐的声音。于是，前天晚上，我在 livespaces 里说，不再更新 livespaces，还发了一通牢骚。&lt;/p>
&lt;p>结果，在今天发生了时空大逆转，大前天发的那篇博客又出来了，而且显示在前天晚上的那篇牢骚之后，真是无奈啊。&lt;/p>
&lt;p>也许是 livespaces 的邮件系统出了毛病吧，唉，你说我还要不要在 livespaces 上继续更新之？&lt;/p></description></item><item><title>中了数码产品的毒</title><link>https://sbabybird.github.io/p/%E4%B8%AD%E4%BA%86%E6%95%B0%E7%A0%81%E4%BA%A7%E5%93%81%E7%9A%84%E6%AF%92/</link><pubDate>Wed, 27 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%AD%E4%BA%86%E6%95%B0%E7%A0%81%E4%BA%A7%E5%93%81%E7%9A%84%E6%AF%92/</guid><description>&lt;p>05 年的时候，我迷恋上了摄影，确切地说，是迷恋上了数码相机。&lt;/p>
&lt;p>那一阵子，我觉得我得马上买一个数码相机，没它不行，走在路上也想着我拿着相机到处“喀嚓”的感觉，不时地拿手比划比划进行所谓的“构图”。&lt;/p>
&lt;p>于是乎，我天天看评测报告，看各个相机的参数，由于当时还算比较理智，没有买单反的，随便买了个消费型的数码相机，其实也不是很随便，至少具备手动功能，成像质量也不算太差，但是跟专业相机比起来仍然是玩具。&lt;/p>
&lt;p>不过偏偏有人鼓吹“照片拍的好坏不取决于硬件，某某大师也能用傻瓜相机拍出经典来”。&lt;/p>
&lt;p>导致我那阵子还研究了一下光圈和快门的关系，甚至还背了景深表。&lt;/p>
&lt;p>不过，很快我就发现，两点一线的生活并不适合学摄影，热度也慢慢下降，那个数码相机也被丢到角落。&lt;/p>
&lt;p>华硕刚刚推出上网本的时候，我又迷恋上了，就是所谓的“中毒”，也觉得要马上买一个回来，这东西简直就是给我量身定做的，每天在路上惬意地写两段程序，多美好啊，我想。&lt;/p>
&lt;p>不过，很快就发现，上网本的键盘简直是一种刑具，按键小的像米粒，在上面打字备受折磨。&lt;/p>
&lt;p>屏幕也很小，看起来很费眼睛，所以，我的视力下降了。&lt;/p>
&lt;p>唉，回顾一下，那么多诱人的数码产品到底给我带来了什么？从文曲星的电子词典到华硕的上网本，从诺基亚到黑莓，这些曾经使我严重中毒的东西，没有一样发挥出我没有拥有时所想象的功能。&lt;/p>
&lt;p>最近我又中毒了，看上了亚马逊出的电子书，恩木，电子墨水屏幕，超便携，wifi，省电，看起来是那么诱人。这也就是为什么，我要写下了上面的那些文字，因为我要给自己解毒。&lt;/p>
&lt;p>简单地回顾了一下，我仿佛听到这些电子产品说，“你不要迷恋哥，因为哥只是个传说”。&lt;/p></description></item><item><title>不再更新这个博客</title><link>https://sbabybird.github.io/p/%E4%B8%8D%E5%86%8D%E6%9B%B4%E6%96%B0%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/</link><pubDate>Tue, 26 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8D%E5%86%8D%E6%9B%B4%E6%96%B0%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p>第一，livespace 太难用了。&lt;/p>
&lt;p>第二，2010 年我想做些有意义的事情。&lt;/p>
&lt;p>第三，在 blogspot 上的博客继续更新。&lt;/p>
&lt;p>第四，无限期暂停更新此博客。&lt;/p>
&lt;p>第五，我个人十分讨厌微软的产品。&lt;/p></description></item><item><title>可怜的显示器和键盘</title><link>https://sbabybird.github.io/p/%E5%8F%AF%E6%80%9C%E7%9A%84%E6%98%BE%E7%A4%BA%E5%99%A8%E5%92%8C%E9%94%AE%E7%9B%98/</link><pubDate>Sun, 24 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8F%AF%E6%80%9C%E7%9A%84%E6%98%BE%E7%A4%BA%E5%99%A8%E5%92%8C%E9%94%AE%E7%9B%98/</guid><description>&lt;p>刚刚看了这个视频，乐得够呛。暴躁是人的天性，虽然平时不怎么打游戏，不过我也偶尔会有这些冲动，只是显示器和键盘实在是太委屈了。&lt;/p></description></item><item><title>坚持</title><link>https://sbabybird.github.io/p/%E5%9D%9A%E6%8C%81/</link><pubDate>Sat, 23 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9D%9A%E6%8C%81/</guid><description>&lt;p>这个世界从来不缺乏新鲜的点子和想法，缺的是把想法实现出来，并坚持下去。无论做什么事情，随着刚开始的新鲜感渐渐退去，随之而来的就是对耐心和毅力的考验，是的，这世道就是这样，就像他们说的那样，人生就像那啥，能够挺到最后的都是纯爷们。&lt;/p>
&lt;p>我从去年开始，准备一点一滴的整理自己的“个人知识管理系统”，期间使用过各种软件，包括但不局限于“evernote”、“trac”、“dokuwiki”等等。&lt;/p>
&lt;p>每一次都是浅尝辄止，稀稀拉拉地整理了几篇文章，然后慢慢地落了一层灰。&lt;/p>
&lt;p>固然有“工作忙”这个屡试不爽的借口，但每当想起自己当初信誓旦旦定下的计划还是有些不爽。&lt;/p>
&lt;p>这次在年初的计划里，我又列出了整理“个人知识”的计划，看来是非执行不可了。&lt;/p>
&lt;p>也许等我整理好了，英特纳雄耐尔也就实现了。&lt;/p></description></item><item><title>高人无处不在</title><link>https://sbabybird.github.io/p/%E9%AB%98%E4%BA%BA%E6%97%A0%E5%A4%84%E4%B8%8D%E5%9C%A8/</link><pubDate>Thu, 21 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%AB%98%E4%BA%BA%E6%97%A0%E5%A4%84%E4%B8%8D%E5%9C%A8/</guid><description>&lt;p>老旧的计算机除了扔掉还能干点儿啥？&lt;/p>
&lt;p>其实只要发挥创意，老电脑还是可以发挥一些余热的。&lt;/p>
&lt;p>下面是一些牛人想出来的点子：&lt;/p>
&lt;p>1、驱蚊，蚊子十分讨厌频率为 6k 左右的声波，根据这个传说，编写程序控制 pc 的小喇叭发出这个频率的声音就可以达到驱蚊效果。&lt;/p>
&lt;p>这个我也曾经做过测试，发现纯属骗人，而且 6khz 的声波仍在人耳的听觉范围之内（20 ～ 20k）所以蚊子没赶跑倒是把人给吵晕了。&lt;/p>
&lt;p>2、烧烤，有牛人拿旧机箱来烧烤，这个没啥技术含量只要舍得就行。&lt;/p>
&lt;p>3、哄 baby 睡觉，这个比较绝，利用程序控制电脑的光驱开合，从而拖动婴儿车来回移动，达到催眠的效果。&lt;/p></description></item><item><title>在线看3d电影</title><link>https://sbabybird.github.io/p/%E5%9C%A8%E7%BA%BF%E7%9C%8B3d%E7%94%B5%E5%BD%B1/</link><pubDate>Wed, 20 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9C%A8%E7%BA%BF%E7%9C%8B3d%E7%94%B5%E5%BD%B1/</guid><description>&lt;p>今天发现这个 http://3d.pptv.com/看电影的网站（我火星了吗？），在线提供 3d 电影的视频，当然也是需要 3d 眼睛，不过是那种最古老的 3d 眼睛，即红绿 3d 眼镜。&lt;/p>
&lt;p>网站速度还不错，据说带上 3d 眼镜之后在普通显示器上也可看到 3d 效果了。&lt;/p>
&lt;p>可惜手头没有材料，要不然就自制一个了。&lt;/p>
&lt;p>据说这种眼镜没啥技术含量，随便拿两个塑料片就可以了。&lt;/p></description></item><item><title>地方台的电视节目，偶尔也有能看的</title><link>https://sbabybird.github.io/p/%E5%9C%B0%E6%96%B9%E5%8F%B0%E7%9A%84%E7%94%B5%E8%A7%86%E8%8A%82%E7%9B%AE%E5%81%B6%E5%B0%94%E4%B9%9F%E6%9C%89%E8%83%BD%E7%9C%8B%E7%9A%84/</link><pubDate>Tue, 19 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9C%B0%E6%96%B9%E5%8F%B0%E7%9A%84%E7%94%B5%E8%A7%86%E8%8A%82%E7%9B%AE%E5%81%B6%E5%B0%94%E4%B9%9F%E6%9C%89%E8%83%BD%E7%9C%8B%E7%9A%84/</guid><description>&lt;p>刚看到一个模仿“一虎一席谈”的节目，提出一个争议话题，找了两组因为利益不同（而导致观点不同）而针锋相对的人在讲台上掐架。&lt;/p>
&lt;p>感觉还行，可以当小品看。&lt;/p></description></item><item><title>时空错乱</title><link>https://sbabybird.github.io/p/%E6%97%B6%E7%A9%BA%E9%94%99%E4%B9%B1/</link><pubDate>Mon, 18 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%97%B6%E7%A9%BA%E9%94%99%E4%B9%B1/</guid><description>&lt;p>我的记性不大好，一般都是靠手机的日程表来安排事情。&lt;/p>
&lt;p>于是今天早晨，我的手机提醒我，妹妹的生日到了，我赶紧发短信以示祝福。&lt;/p>
&lt;p>结果不一会儿妹妹就回复短信&amp;quot;你发错了吧，我的生日还差好几天呐!&amp;quot;，仔细一看手机的日期，我靠，提前了好几天。&lt;/p>
&lt;p>原来是不知道什么时候错调了手机的时间，看来，电子的东西还是不能太信任。&lt;/p></description></item><item><title>不用那么麻烦，轻松使slitaz支持中文</title><link>https://sbabybird.github.io/p/%E4%B8%8D%E7%94%A8%E9%82%A3%E4%B9%88%E9%BA%BB%E7%83%A6%E8%BD%BB%E6%9D%BE%E4%BD%BFslitaz%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87/</link><pubDate>Sun, 17 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8D%E7%94%A8%E9%82%A3%E4%B9%88%E9%BA%BB%E7%83%A6%E8%BD%BB%E6%9D%BE%E4%BD%BFslitaz%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87/</guid><description>&lt;p>不好意思，最近总是频繁提及 Slitaz 这个小巧的 Linux 发行版，我已经把它安装到我的 epc 上了，驱动齐全，启动和运行速度飞快，安装了最新版的 firefox 和 flash 插件，vim 当然少不了，可是官方的 iso 里面并未附带中文的支持，所以打开的中文网页都是乱码。&lt;/p>
&lt;p>到网上搜索汉化的方法，发现都比较麻烦，于是自己摸索了一个省事儿的办法。&lt;/p>
&lt;p>首先就是准备好一个字体文件，可以直接从已安装的 Windows 系统里选取喜欢的字体文件，但是我不推崇这么做，因为 Windows 下的字体都是有版权的，所以推荐使用“文泉驿”系列字体，我选择了“文泉驿微米黑”，可去官方网站下载。&lt;/p>
&lt;p>将下载后的字体文件解压到&amp;quot;/usr/share/fonts&amp;quot;下使用 root 用户执行命令 fc-cache 好了，现在打开 firefox 在选项里字体的选择框里就可以选择刚刚安装的字体了，然后在看网页就可以显示中文了。&lt;/p>
&lt;p>如果遇到播放 flash 出现乱码的情况，可执行这个命令&amp;quot;mv/etc/fonts/conf.d/49-sansserif.conf/etc/fonts/conf.d/49-sansserif.conf.bak&amp;quot;这样就可以了。&lt;/p>
&lt;p>现在就剩下桌面环境以及程序菜单是英文的了，不过这个没关系，想汉化的话直接修改 openbox 的资源配置文件即可，不过我就懒得弄了。&lt;/p></description></item><item><title>她来听我的演唱会</title><link>https://sbabybird.github.io/p/%E5%A5%B9%E6%9D%A5%E5%90%AC%E6%88%91%E7%9A%84%E6%BC%94%E5%94%B1%E4%BC%9A/</link><pubDate>Fri, 15 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A5%B9%E6%9D%A5%E5%90%AC%E6%88%91%E7%9A%84%E6%BC%94%E5%94%B1%E4%BC%9A/</guid><description>&lt;p>我从来没有看过演唱会，我曾经想象着这样的场景，歌手在光亮的舞台上扯开喉咙唱歌，我和无数歌迷在舞台地下挥舞着荧光棒也扯着嗓子高呼。&lt;/p>
&lt;p>可是我从来没有这样做过，因为我已经错过了那个季节。&lt;/p>
&lt;p>我也曾幻想着那样的场景，我理着光头，抱着吉他在舞台上扯开喉咙唱歌，千万的听众也挥舞着荧光棒随着高呼，但是我也错过了那个季节。&lt;/p>
&lt;p>我也是个热爱音乐的人，也偏爱着某些歌手，我也曾想象着去听某些人的演唱会，但是我想我不会去了，因为我知道，有些歌我在演唱会上要是跟着唱的话，会无法控制自己的情感而轻轻啜泣。&lt;/p>
&lt;p>张学友有一首歌叫《她来听我的演唱会》令无数恋爱中的女人为之动容，因为这首歌唱出了从少女到女人的心路历程。从浪漫的青葱岁月到现实的装 b 季节，无数的少男少女经历了从梦想的飞蛾到蚕蛹的转变。&lt;/p>
&lt;p>正像崔健在《假行僧》里唱到的那样，我要从南走到北，还要从白走到黑，我要人们到看到我但不知道我是谁，假如你看我有点儿累就请你给我倒碗水。。。。。。&lt;/p>
&lt;p>今天，我的一个好哥们，雅兴大发，拼命挤到网上淘得一张齐秦在北京演唱会的门票，欣喜若狂。&lt;/p>
&lt;p>我很羡慕他还有这个心情去看一场演唱会，在这个充满压力的某些时候还令人沮丧的世界，仍然能保持梦想并执着于自己的爱好。&lt;/p></description></item><item><title>Geany,不错的IDE</title><link>https://sbabybird.github.io/p/geany%E4%B8%8D%E9%94%99%E7%9A%84ide/</link><pubDate>Thu, 14 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/geany%E4%B8%8D%E9%94%99%E7%9A%84ide/</guid><description>&lt;p>前两天在试用 Slitaz 的时候发现其中带的 Geany 是个不错的 IDE（想想吧，Slitaz 才不到 30M 的身材竟然还带了个开发环境），Geany 轻巧快捷，功能齐全，具备基本的代码高亮和自动补全功能，用来写 python 脚本真是个不错的选择。&lt;/p>
&lt;p>难能可贵的是其还支持插件扩展（这年头要是拿出个软件还不支持扩展就真不好意思和人家打招呼）。&lt;/p>
&lt;p>当然了，就编辑功能来说有些弱，但是作为 Slitaz 这个小巧系统下的开发环境真是再合适不过了。&lt;/p></description></item><item><title>难以说再见</title><link>https://sbabybird.github.io/p/%E9%9A%BE%E4%BB%A5%E8%AF%B4%E5%86%8D%E8%A7%81/</link><pubDate>Wed, 13 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%9A%BE%E4%BB%A5%E8%AF%B4%E5%86%8D%E8%A7%81/</guid><description>&lt;p>Google，一个 IT 公司，一个搜索引擎，对我来说几乎意味着整个互联网。&lt;/p>
&lt;p>本来在我的心目中，IT 公司几乎等于骗子，然而 Google 却是个例外。&lt;/p>
&lt;p>自打开始接触互联网以来，就离不开 Google 了，她可以说是我的良师益友，离开大学以后学到的知识几乎全部来自于 Google 的索引。&lt;/p>
&lt;p>除了出色的搜索功能之外，Google 提供的产品无不令人惊叹，出色电子邮箱、Rss 阅读器、浏览器、操作系统、手机操作系统，这些产品每一个拿出来以后都足以让原本在该领域内的佼佼者掩面而去。&lt;/p>
&lt;p>可是，马上就要说再见了，总部那边发布了一篇博客，用某些动物的话说叫“撒了一下娇”，一下子就把这边的用户给抛弃了，就像上次 operamini 抛弃大陆用户一样。&lt;/p>
&lt;p>一时间有人高兴，有人悲伤，有人麻木，有人抓狂。&lt;/p>
&lt;p>技术人员大都是不关心敏感词的（或懒得关心），可是热爱技术的人哪一个不热爱 Google 呢，据我的感受来说，但凡是有所能力的技术人员，无论他的外表多么的随和其内心都是十分倔强的，正是凭着这一股倔强的劲儿才啃下了一个个难题，掌握了常人所不能（或不齿）掌握的东西。&lt;/p>
&lt;p>然而这些人却一点一点的被逼到了墙角。&lt;/p>
&lt;p>倔强的人会放弃吗？想到一个故事，记不清从那个文章里看到的了，歌词大意是：一个大山里的人被带进了繁华的大都市，第一次看到了这花花世界还有这么多活法，然后被告知回去继续过原来种菜喂猪的日子，此人大哭：“既然无法得到却又为什么让我看到啊”&lt;/p>
&lt;p>嘿嘿，我宁愿从来都没有看清过这个世界。&lt;/p></description></item><item><title>痴迷</title><link>https://sbabybird.github.io/p/%E7%97%B4%E8%BF%B7/</link><pubDate>Tue, 12 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%97%B4%E8%BF%B7/</guid><description>&lt;p>今天的气温在极冷的情况下又骤降，这是我遇到的最冷的冬天了，走在路上，鼻涕先给冻出来然后再给冻回去最后结成冰。&lt;/p>
&lt;p>最近十分痴迷于在我的小笔记本上试验各种版本的操作系统，今天继续。&lt;/p></description></item><item><title>好像又不能访问google了</title><link>https://sbabybird.github.io/p/%E5%A5%BD%E5%83%8F%E5%8F%88%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AEgoogle%E4%BA%86/</link><pubDate>Mon, 11 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A5%BD%E5%83%8F%E5%8F%88%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AEgoogle%E4%BA%86/</guid><description>&lt;p>如题。&lt;/p></description></item><item><title>在我的epc上运行android</title><link>https://sbabybird.github.io/p/%E5%9C%A8%E6%88%91%E7%9A%84epc%E4%B8%8A%E8%BF%90%E8%A1%8Candroid/</link><pubDate>Sun, 10 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9C%A8%E6%88%91%E7%9A%84epc%E4%B8%8A%E8%BF%90%E8%A1%8Candroid/</guid><description>&lt;p>早就对 google 的 android 系统垂蜒三尺，终于看到了这个 android-x86，原来是有几个好心人把 android 系统移植到了 x86 平台，喜欢折腾的我当然不能错过。&lt;/p>
&lt;p>看网站上的介绍是支持 epc 的硬件，遂下载了 iso 刻录到我的优盘上，简直是帅带了，一次启动成功，速度不错，无线网络可以开启，电池电量也可以检测。&lt;/p>
&lt;p>界面果然是为手机设计的，可惜我的 epc 不是触摸屏，但是有键盘，操作起来还算说的过去，比如现在这几行文字就是在此系统下打出来的，也是 google 的拼音输入法不过是针对 android 的，使用键盘选字不是太方便。&lt;/p>
&lt;p>想截个图结果没找到截图软件，按 printscreen 按键也不行，算了，先玩玩吧，毕竟不是为笔记本量身定制的系统。&lt;/p></description></item><item><title>从石锅拌饭想到的</title><link>https://sbabybird.github.io/p/%E4%BB%8E%E7%9F%B3%E9%94%85%E6%8B%8C%E9%A5%AD%E6%83%B3%E5%88%B0%E7%9A%84/</link><pubDate>Sat, 09 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BB%8E%E7%9F%B3%E9%94%85%E6%8B%8C%E9%A5%AD%E6%83%B3%E5%88%B0%E7%9A%84/</guid><description>&lt;p>记得小时候有一次看电视，新闻报道说某地某羊肉泡馍饭馆生意火爆，去吃羊肉泡馍的人络绎不绝，而且都喜欢装模作样的自己把馍慢慢掰碎了扔进碗里，感觉那样才有味儿。&lt;/p>
&lt;p>昨天晚上和同事一起吃饭，某人点了石锅拌饭，不一会儿端上来的却是拌好的，该同事不甚满意，因为以往都是自己动手拌的，即自己眼睁睁地看着那个半生不熟的鸡蛋被慢慢搅匀到米饭里，而这次却是饭店服务员手太勤快直接就给搅匀了，该同事顿觉很失落，因为吃石锅拌饭自己动手拌也算是消费的一部分，拌好了再端上来就失去了原来应有的韵味，就好象上面说的羊肉泡馍的事情，同样的面疙瘩，不是自己掰开的就觉得没味儿。&lt;/p>
&lt;p>说了半天，其实我是这些事儿让我想到了其他的方面。&lt;/p>
&lt;p>会不会是大家都有某种亲自动手的情节。&lt;/p>
&lt;p>比如 Linux 有很多发行版，其中就有一种发行版叫 Gentoo（当然了还有 LFS，这个更变态）的&amp;mdash;颇受欢迎，因为其十分的具有原味儿，该系统所有的程序包括操作系统的内核都要自己亲自动手下载源代码进行编译，虽然整个系统从内核到桌面环境一点一滴地慢慢编译出来非常的耗费时间和精力，但是很多人却沉迷其中不能自拔，因为自己动手的感觉真是太他妈爽了。&lt;/p>
&lt;p>再说到写程序的方面，虽然现在的 IDE 都十分强大了，但是还是有人（包括我）热衷于自己写 Makefile 来控制软件的编译过程，就算 VisualStudio 已经提供了十分“完善”的开发向导，但是我还是习惯自己写包括消息映射在内的代码，不为别的，因为自己可以控制具体的细节，精确到每一行。&lt;/p>
&lt;p>好吧，我承认有时候需要考虑效率和成就感的平衡，但就个人情感来说，我还是觉得自己动手要爽一些，就像吃羊肉泡馍和石锅拌饭一样，恩，有机会把家里的操作系统也换成 Gentoo。&lt;/p></description></item><item><title>我靠，宽带断了</title><link>https://sbabybird.github.io/p/%E6%88%91%E9%9D%A0%E5%AE%BD%E5%B8%A6%E6%96%AD%E4%BA%86/</link><pubDate>Sat, 09 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E9%9D%A0%E5%AE%BD%E5%B8%A6%E6%96%AD%E4%BA%86/</guid><description>&lt;p>家里的宽带没被我怎么用过，只是每天晚上用来听相声，可是由于忘记去续费导致我昨天晚上没听成，体验了一夜失去互联网的感觉。&lt;/p>
&lt;p>这种体验让我感到相当不爽，因为意识到自己太依赖互联网了，哦卖糕的，我有网瘾。&lt;/p></description></item><item><title>高科技手段抄水表</title><link>https://sbabybird.github.io/p/%E9%AB%98%E7%A7%91%E6%8A%80%E6%89%8B%E6%AE%B5%E6%8A%84%E6%B0%B4%E8%A1%A8/</link><pubDate>Thu, 07 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%AB%98%E7%A7%91%E6%8A%80%E6%89%8B%E6%AE%B5%E6%8A%84%E6%B0%B4%E8%A1%A8/</guid><description>&lt;p>回来的时候，门上贴个条，原来是抄水表的过来时我不在家，只好留下电话让我自己把水表上的数字告诉他。&lt;/p>
&lt;p>可是我没有工具，水表安装的位置又极其蹩脚（在厨房水槽下方靠近墙的位置），无法直接观看，每次我都是看他们带着手电外加一个镜子然后撅着身子瘪着头使劲儿看半天。&lt;/p>
&lt;p>可是这难不倒我呀，使用手机打开闪光灯，伸进去对准水表，连拍三张照片，然后上传到电脑，本来还准备使用 ocr 软件自动识别（脱了裤子放屁），但是才发现水表是指针式的，放大图片读出数字，OK。&lt;/p></description></item><item><title>SliTaz，一个神奇的操作系统</title><link>https://sbabybird.github.io/p/slitaz%E4%B8%80%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><pubDate>Wed, 06 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/slitaz%E4%B8%80%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid><description>&lt;p>SliTaz，是一个极其小巧的 Linux 发行版，究竟有多小呢，他的个头才 30MB，可以制作成 LiveCD 和 LiveUSB 系统。&lt;/p>
&lt;p>所谓麻雀虽小五脏俱全，附带有完整的桌面环境和常用软件，连 firefox 都有。&lt;/p>
&lt;p>在我的 epc 上跑得飞快，启动速度也很快（它的启动画面上有句很醒目的话“BOOT！BABYBOOT！”，可见其对启动速度的追求），驱动程序也挺齐全的，直接启用无线网卡，零设置。&lt;/p>
&lt;p>刚刚才开始试用，无更多体验，目前显卡仍未设置成宽屏的最佳分辨率，不过我想问题不大。&lt;/p></description></item><item><title>普通pc最多能装多少块硬盘？</title><link>https://sbabybird.github.io/p/%E6%99%AE%E9%80%9Apc%E6%9C%80%E5%A4%9A%E8%83%BD%E8%A3%85%E5%A4%9A%E5%B0%91%E5%9D%97%E7%A1%AC%E7%9B%98/</link><pubDate>Tue, 05 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%99%AE%E9%80%9Apc%E6%9C%80%E5%A4%9A%E8%83%BD%E8%A3%85%E5%A4%9A%E5%B0%91%E5%9D%97%E7%A1%AC%E7%9B%98/</guid><description>&lt;p>普通 pc 最多能装多少块硬盘？我不知道，之所以想到这个问题是因为我有个同事是个 DIY 狂人，他跟我说他想把 50 块 500G 的硬盘（普通 ATA 硬盘）塞进一台机器里（PC），使该机的存储容量达到 25T，问我该使用什么操作系统。&lt;/p>
&lt;p>我靠，这真是个疯狂的想法，让我想到了那个买一堆奥拓拿铁丝绑在一起的笑话（呵呵，做人要厚道）。&lt;/p>
&lt;p>可惜，我是没有这方面的经验，但是去网上搜索了一下，乖乖，借助 RAID 卡的威力，理论上可以在 pc 里安装超过 100 块硬盘，但是实际上几乎没有人这么做过，所以，让我拭目以待，看看真实情况下，到底能够安装多少块硬盘。&lt;/p>
&lt;p>想一想这台怪兽的样子，～～～额，再忍不住打个寒噤。&lt;/p></description></item><item><title>新年畅想</title><link>https://sbabybird.github.io/p/%E6%96%B0%E5%B9%B4%E7%95%85%E6%83%B3/</link><pubDate>Mon, 04 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%96%B0%E5%B9%B4%E7%95%85%E6%83%B3/</guid><description>&lt;p>刚回过神儿来，现在已是 2010 年了，进入了传说中的二十一世纪的第 10 个年头。&lt;/p>
&lt;p>有几点目标，希望今年可以达到。&lt;/p>
&lt;p>谈不上计划，只是随便想想：&lt;/p>
&lt;p>1、体重能够增加 5 公斤。&lt;/p>
&lt;p>2、阅读 5 本书。&lt;/p>
&lt;p>3、彻底整理好自己硬盘上的文件，并建立完善的知识管理机制。&lt;/p>
&lt;p>4、学会吉他的扫弦。&lt;/p>
&lt;p>5、写一个真正的 pc 游戏。&lt;/p>
&lt;p>6、提升英文水平至可阅读非技术类新闻。&lt;/p>
&lt;p>7、改善自己的 GTD 系统。&lt;/p></description></item><item><title>听雪</title><link>https://sbabybird.github.io/p/%E5%90%AC%E9%9B%AA/</link><pubDate>Sun, 03 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%90%AC%E9%9B%AA/</guid><description>&lt;p>早晨醒来，拉开窗帘，看到一个洁白的飘着雪花的世界，哦也。&lt;/p>
&lt;p>这意味着，在明天早上，假期之后的第一天上班，水平很烂的司机和自认为水平很棒的司机将会在美妙的高速公路上疯狂追击，带来无与伦比的超级大堵车，这就叫明知山有虎偏向虎山行，胸中有红日，脚下舞东风，哦，等一等，跑题了。&lt;/p>
&lt;p>我是说，早晨一醒来，看到一个洁白的飘着雪花的世界，哦也。&lt;/p>
&lt;p>这意味着，我昨天洗的衣服即使是到了明天还是很难晾干，湿润的裤子在风雪中将会很快冻成一根冰棍，恩，是两根。&lt;/p>
&lt;p>mad，我发现想怀着一份飘飘（也有人叫浪漫）的心情写几个文字实在是太难了，于是给自己倒上一杯红酒（昨天超市促销，所以&amp;hellip;），重新开始。&lt;/p>
&lt;p>我想说，下吧！大雪，我喜欢！（哦，已经有点儿酒劲儿了）。&lt;/p>
&lt;p>因为我喜欢聆听雪的声音，那种安静而又带有几分神秘的雪花飘落的声音。&lt;/p>
&lt;p>我喜欢独自站在阳台透明的玻璃后面，点上一支烟，雪花纷飞，毫无章法地打在玻璃上有些甚至想在上面堆砌一些图案，远处的景色已经模糊，那些本来杂乱又浮躁的东西统统被覆盖，仿佛他们本来就那么纯洁似的。&lt;/p>
&lt;p>路上的行人放慢了脚步，孩子们开心地堆着他们叫做“雪人”的物体，我几乎能听见皮鞋踩在上面发出的轻微的“咯吱”声。&lt;/p>
&lt;p>当一个人体会美好的时候，回忆总会涌上心头，因为回忆里全是美好。&lt;/p>
&lt;p>镜头很快滑过小时候第一次看见下雪的情景，起初飘落在地上的不是雪花，而是很小很圆的颗粒，叮叮咚咚，我拿着小铲子蹲在院子里，还以为那是化肥，恩，我也记不清楚了。&lt;/p>
&lt;p>然后就是大片的雪花了，地上很快就白了，嘴里呼出的热气和雪花缠在一起。&lt;/p>
&lt;p>再后来，我穿着笨拙的大头鞋使劲儿在雪地里踩出又大又深的脚印，恩，这就是我对雪的第一次印象，虽然记忆已经模糊地带着雪花点了，不过这正迎合了此刻的景象。&lt;/p>
&lt;p>听雪的时候更能够享受一份孤独，烦恼都烟消云散。电脑里编译着代码，电视里主持人在蹩脚地斗嘴，我一个人站在玻璃后面听了一袋烟工夫的雪，却好像一个世纪那么长。&lt;/p></description></item><item><title>假期</title><link>https://sbabybird.github.io/p/%E5%81%87%E6%9C%9F/</link><pubDate>Sat, 02 Jan 2010 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%81%87%E6%9C%9F/</guid><description>&lt;p>2010 年的第一天，我加了一天班。&lt;/p>
&lt;p>2010 年的第二天，我狠狠地睡了个懒觉，本来想从天黑睡到天黑，但是想到假期是如此的珍贵，只好在 9 点 am 就爬了起来，做了顿丰盛的早餐。&lt;/p>
&lt;p>在给我的 ubuntu 重新编译了两次最新的内核之后，我意识到这是一件很无聊的事情，于是决定做一些有意义的事情，看美剧，一连看了十来集，再看就要呕吐了，而且由于反复傻笑导致脸也快抽筋了。&lt;/p>
&lt;p>我决定出去走走，做了个不太理智的决定，那就是漫无目的的逛超市而且还是空着肚子。&lt;/p>
&lt;p>记得好像有人提醒过，去超市买东西时最好先想好一个清单，而且最好是在吃饱的情况下再去，否则就会拿回一大堆垃圾回来，恩，我今天就是这样。&lt;/p>
&lt;p>我推着小车（这也是个错误的决定），由于食欲的关系，不一会儿的功夫就把小推车堆的满满的，一边大把的拿东西一边想象着自己坐在家里美美的吃它们的样子，哦也，再加一瓶红酒吧，哦，等一等，这边的酱肘子正在滋滋地冒着热气，仿佛正在召唤我，ok 拿下。&lt;/p>
&lt;p>提着东西走进家里，我才意识到，我买了足够我吃一个月的食物，而有些东西的保质期才两天，比如那只烧鸡。&lt;/p>
&lt;p>好吧，他们说狂欢是一群人的孤单，而孤单正好一个人狂欢，justeat！&lt;/p></description></item><item><title>goodbye2009，hello2010</title><link>https://sbabybird.github.io/p/goodbye2009hello2010/</link><pubDate>Thu, 31 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/goodbye2009hello2010/</guid><description>&lt;p>。，goodbye2009，hello2010&lt;/p></description></item><item><title>关于windows7下无法安装Visual Studio2008的问题</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8Ewindows7%E4%B8%8B%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85visual-studio2008%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 30 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8Ewindows7%E4%B8%8B%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85visual-studio2008%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>&lt;p>单位的机器，前一段时间，被我换成了 windows7 系统，没办法，咱就是爱折腾。&lt;/p>
&lt;p>尝鲜总是要付出代价的，那就是不知怎地，过了一段时间就无法安装某些软件了，不能安装 office 这还能忍，可是连 vs 都不能装了那还用个屁啊。反复观察，原来是无法安装 vc++的 runtime 了（也就是 vc_redist_x86.exe），具体是为什么不太清楚，好像是一个系统的 bug 导致的。反复地 google，去 microsoft 网站去查，折腾了好几天，总算有了解决办法。&lt;/p>
&lt;p>步骤如下：&lt;/p>
&lt;p>1、打开注册表编辑器 regedit，找到这儿 HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control，&lt;/p>
&lt;p>下面有个叫 RegistrySizeLimi 的键，把它的值修改为 0xffffffff&lt;/p>
&lt;p>2、重新启动电脑，并使用 administrator 用户登录，如果该用户未启用则要首先到“计算机管理”里面把 administrator 帐号启用。&lt;/p>
&lt;p>3、在 cmd 里运行“sfc/scannow”以上几步完成后，再次重启机器即可。&lt;/p></description></item><item><title>你看，电视！</title><link>https://sbabybird.github.io/p/%E4%BD%A0%E7%9C%8B%E7%94%B5%E8%A7%86/</link><pubDate>Tue, 29 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BD%A0%E7%9C%8B%E7%94%B5%E8%A7%86/</guid><description>&lt;p>谁也阻挡不了互联网带来的变化，有些东西正在一个一个地被消灭，比如纸质信件，比如影碟机，比如磁带、CD。&lt;/p>
&lt;p>现在还在苟延残喘的还有电视、报纸等，但是他们的日子也&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>今天看到消息，咱们的 CCTV 也推出网络电视了，抱着凑热闹的心理去看了看，随便打开几个视频看了看，然后就关了，我只能说他们的网速还不错，内容实在是没有什么吸引力。&lt;/p>
&lt;p>不知怎地，我现在已经开始讨厌看电视了，我不是不喜欢电视机，而是不喜欢里面的节目了。&lt;/p>
&lt;p>再也没有瞪着好奇的眼睛盯着电视屏幕不放的心情了，小的时候，哪怕是一段朴素的广告我也爱看，现在回忆起来那时的电视节目几乎个个都是经典。可惜啊，随着时间的流逝，信息来源的多样化，尤其是接触了互联网之后，眼界一下子开阔了，再加上现在的节目大都粗制滥造带有极强的功利色彩很多时候拿观众当傻 B，谁还爱看呢。有句话说的好，记不得是谁说的的，歌词大意是：“当你打开电视的时候，你的大脑就会停止思考。&lt;/p>
&lt;p>而当你打开电脑的时候，你的大脑正开始思考。”&lt;/p>
&lt;p>恩，我很同意这句话，尤其是前半句。&lt;/p></description></item><item><title>在kde下更新博客哦</title><link>https://sbabybird.github.io/p/%E5%9C%A8kde%E4%B8%8B%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%E5%93%A6/</link><pubDate>Mon, 28 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9C%A8kde%E4%B8%8B%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%E5%93%A6/</guid><description>&lt;p>嘿嘿，Linux 进步真是非常快，桌面环境比起前两年已经友好的多了，很多人性化的功能让 windows 只能掩面而去。&lt;/p>
&lt;p>以前在 linux 下的输入法还只能算是能用，现在的输入法已经算是好用了，当然还比不了 windows 下的 google 拼音，不过也差不多了。&lt;/p>
&lt;p>抛开其他的特性不说，一想起这是一个开放的、自由的、免费的系统环境就让我对它爱不释手。&lt;/p>
&lt;p>一大票强大的软件可用，成熟方便的开发环境，安全的游览器，不用装杀毒软件，实在是找不到理由再去用 windows 了。&lt;/p>
&lt;p>唯独不能在 qq 上和家人视频，不过我准备用 skype 试试看。&lt;/p></description></item><item><title>正式切换家用电脑的主系统为kUbuntu</title><link>https://sbabybird.github.io/p/%E6%AD%A3%E5%BC%8F%E5%88%87%E6%8D%A2%E5%AE%B6%E7%94%A8%E7%94%B5%E8%84%91%E7%9A%84%E4%B8%BB%E7%B3%BB%E7%BB%9F%E4%B8%BAkubuntu/</link><pubDate>Sun, 27 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%AD%A3%E5%BC%8F%E5%88%87%E6%8D%A2%E5%AE%B6%E7%94%A8%E7%94%B5%E8%84%91%E7%9A%84%E4%B8%BB%E7%B3%BB%E7%BB%9F%E4%B8%BAkubuntu/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%AD%A3%E5%BC%8F%E5%88%87%E6%8D%A2%E5%AE%B6%E7%94%A8%E7%94%B5%E8%84%91%E7%9A%84%E4%B8%BB%E7%B3%BB%E7%BB%9F%E4%B8%BAkubuntu/20091227.png" alt="Featured image of post 正式切换家用电脑的主系统为kUbuntu" />&lt;p>早上一睁眼，想起了这是星期天。于是我的老毛病就又犯了，睡不着了。&lt;/p>
&lt;p>一个念头闪过脑海，感存重装系统玩儿吧，这几天在单位被 windows7 折磨的够呛，于是决定换掉家里的系统，不用 windows 了！&lt;/p>
&lt;p>换成哪个 linux 发行版呢，一定要漂亮的，一定要省事儿的，于是选择了 kUbuntu 这个号称比 windows7 还要漂亮的发行版。&lt;/p>
&lt;p>安装十分简单，去下载 iso 就行了。&lt;/p>
&lt;p>一路“下一步”即可。&lt;/p>
&lt;p>第一次使用 kde4 的桌面环境，很是惊艳，早听说 kde4 漂亮的一塌糊涂没想到竟会这么漂亮，开了特效之后更是华丽的令人发指。&lt;/p>
&lt;p>好了，就这么定了，以后就用这个了。&lt;/p></description></item><item><title>无题</title><link>https://sbabybird.github.io/p/%E6%97%A0%E9%A2%98/</link><pubDate>Sat, 26 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%97%A0%E9%A2%98/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%97%A0%E9%A2%98/blog-733901.PNG" alt="Featured image of post 无题" />&lt;p>尝试用触摸板画画，太蹩脚了。&lt;/p></description></item><item><title>圣诞老人</title><link>https://sbabybird.github.io/p/%E5%9C%A3%E8%AF%9E%E8%80%81%E4%BA%BA/</link><pubDate>Fri, 25 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9C%A3%E8%AF%9E%E8%80%81%E4%BA%BA/</guid><description>&lt;p>据说他们装的都很认真，为了让孩子保持对圣诞老人期待，他们每年都要装模作样的去追踪圣诞老人。&lt;/p>
&lt;p>刚刚看到消息，说 Google 每年都提供 kml 文件用以跟踪圣诞老人的行踪，而网站 noradsanta.org 更是制作了完整的地图来显示，可惜的是访问该网站只支持 Windows 和 Mac 系统，于是有人抱怨说：“难道圣诞老人讨厌 Linux 吗”，我觉得 noradsanta.org 做的挺对的，因为使用 Linux 的人，谁还相信有圣诞老人啊。&lt;/p>
&lt;p>toosimple&lt;/p></description></item><item><title>写在平安夜</title><link>https://sbabybird.github.io/p/%E5%86%99%E5%9C%A8%E5%B9%B3%E5%AE%89%E5%A4%9C/</link><pubDate>Thu, 24 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%99%E5%9C%A8%E5%B9%B3%E5%AE%89%E5%A4%9C/</guid><description>&lt;p>圣诞节，这个本属于老外的节日，现在已经成功移植到国内了，大家过得还不亦乐乎，节日嘛，咱们最喜欢了，来者不拒，有一个算一个。&lt;/p>
&lt;p>现在外面温度-5 度，偏北风力 4 级，看不见月亮，我刚和同事喝了两杯回来，屋里暖和极了，倒了一杯开水，坐在客厅，很安静。&lt;/p>
&lt;p>总是到了年末的时候才想起感慨时光的流逝，这一晃就又是一年。粗略地回顾一下，有收获也有遗憾，有成长也有叛逆。&lt;/p>
&lt;p>翻了翻年初给自己制定的计划（对不起，我是计划狂++），发现大部分还是实现了的，有些计划制定的太过离谱偏离较远，比如学习计划，由于时间的冲突只得以工作为重。&lt;/p>
&lt;p>不过，梦想始终是不能够放弃的，我庆幸自己清醒地知道目标，并坚定不移地去实现它，一个一个地了却心中的情结。&lt;/p>
&lt;p>谈到梦想，我都快成了一个梦想家了，到现在为止我仍然保留的梦想有：&lt;/p>
&lt;p>拍摄一部上好的纪录片，做一个录音师，拥有一个属于自己的实验室，写一个操作系统，等等等等（除了最后一个其它的好像都离我的职业挺远的）。&lt;/p>
&lt;p>在追逐梦想的路上，难免会有失望和沮丧的时候，但心中的信念从来都没有丢失，面对我的梦想，我像一个虔诚的信徒，怀揣着单纯的心，每晚甜蜜的睡去。&lt;/p></description></item><item><title>微波炉的影响</title><link>https://sbabybird.github.io/p/%E5%BE%AE%E6%B3%A2%E7%82%89%E7%9A%84%E5%BD%B1%E5%93%8D/</link><pubDate>Wed, 23 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BE%AE%E6%B3%A2%E7%82%89%E7%9A%84%E5%BD%B1%E5%93%8D/</guid><description>&lt;p>无论厂家如何吹嘘，微波炉的电磁辐射泄漏都是挺严重的。&lt;/p>
&lt;p>以前不觉得，认为把它关严实就不会有微波跑出来，所以一边加热食物，一边在跟前等着。&lt;/p>
&lt;p>这几天我喜欢拿着笔记本在餐桌旁上网，刚才开动了一下微波炉，我的笔记本立即就连不上无线网络了，我差点以为是我打开的网页内有敏感词，后来才发现是微波炉辐射的影响，看来以后得注意些，不能在开启的微波炉边上上网啦。&lt;/p></description></item><item><title>3D电影终于要走进家庭了</title><link>https://sbabybird.github.io/p/3d%E7%94%B5%E5%BD%B1%E7%BB%88%E4%BA%8E%E8%A6%81%E8%B5%B0%E8%BF%9B%E5%AE%B6%E5%BA%AD%E4%BA%86/</link><pubDate>Tue, 22 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/3d%E7%94%B5%E5%BD%B1%E7%BB%88%E4%BA%8E%E8%A6%81%E8%B5%B0%E8%BF%9B%E5%AE%B6%E5%BA%AD%E4%BA%86/</guid><description>&lt;p>刚在 Solidot 看到一则让人兴奋的消息，3D 蓝光规格终于敲定，这意味着以后的 3D 电影可以装进蓝光 DVD 并在家里播放了，虽然在观看时仍然需要特制的眼镜，但这已经不是问题了，我想，随着技术的发展，很快就能观看不用带 3D 眼睛的 3D 电影了。&lt;/p>
&lt;p>最酷的是，使用蓝光 DVD 播放器即可组建家庭 3D 影院了，当然对显示设备有所要求，不过问题不大，我估计 5 年之内即可普及了，科技的发展速度实在是让人敬畏。&lt;/p>
&lt;p>顺便提醒一下，国内的标准机构是不是也需要与时俱进赶紧制定咱中国人自己的标准呢？嗯？&lt;/p></description></item><item><title>郁闷的万能解药</title><link>https://sbabybird.github.io/p/%E9%83%81%E9%97%B7%E7%9A%84%E4%B8%87%E8%83%BD%E8%A7%A3%E8%8D%AF/</link><pubDate>Mon, 21 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%83%81%E9%97%B7%E7%9A%84%E4%B8%87%E8%83%BD%E8%A7%A3%E8%8D%AF/</guid><description>&lt;p>靠，本来想说开心是郁闷的万能解药，想了想又觉得不妥，本来就郁闷了还哪来的开心。&lt;/p>
&lt;p>好吧，乐观的心态才是。很久很久以前，记不清了，大概是上个世纪的事儿了，有一坨古老的电视节目，里面有一句名言：“快乐是一天，不快乐也是一天，为何不天天快乐呢？”&lt;/p>
&lt;p>，你听听，说的多在理啊，虽然有点儿站着说话不腰疼的意思，但是话糙理不糙，不用多仔细去想就觉得豁然开朗。&lt;/p>
&lt;p>随着工作压力的增大，以及对世界认知的改变，人已经变的越来越不单纯了，本来一杯清澈的白水已经污染的又黑又浑，已经很难咧着大嘴叉子笑得喘不过气来了。&lt;/p>
&lt;p>曾经一个一头猪掉进臭水沟里的笑话都能笑上半天，到现在看见这样的笑话连嘴角都懒得抽动，偶尔遇到能够笑得起来的还是荤段子。&lt;/p>
&lt;p>但是，最近看了一连串的美剧，让我又回到傻笑的年代，有些人说这太单纯、无聊、没意思，其实包含着大量的深刻讽刺和幽默，比如《生活大爆炸》、《好汉两个半》、《老爸老妈的浪漫史》等等&lt;/p>
&lt;p>，他们不但让我看得前仰后合而且还能产生一些积极乐观的思考，不像有些电视剧简直是把你的脑袋敲开了往里面扔大便。&lt;/p></description></item><item><title>没写过曲子的厨子不是一个好裁缝！</title><link>https://sbabybird.github.io/p/%E6%B2%A1%E5%86%99%E8%BF%87%E6%9B%B2%E5%AD%90%E7%9A%84%E5%8E%A8%E5%AD%90%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A5%BD%E8%A3%81%E7%BC%9D/</link><pubDate>Sun, 20 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%B2%A1%E5%86%99%E8%BF%87%E6%9B%B2%E5%AD%90%E7%9A%84%E5%8E%A8%E5%AD%90%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A5%BD%E8%A3%81%E7%BC%9D/</guid><description>&lt;p>今天坐在电子琴前瞎按，精神有些恍惚，尝试着弹些曲子，居然可以有“完整”的旋律被弹出来，而且听起来有些淡淡的伤感，有些甜蜜。&lt;/p>
&lt;p>我又不会记谱，纯粹凭着感觉弹奏，恰巧电脑上的 midi 软件坏了，无法使用软件录制，只好掏出手机赶紧把这段录下来（用手机录的音质就差多了），要不然很快就会忘了。点击这里可听如有雷同纯属巧合：）&lt;/p></description></item><item><title>周末，看电影的时间</title><link>https://sbabybird.github.io/p/%E5%91%A8%E6%9C%AB%E7%9C%8B%E7%94%B5%E5%BD%B1%E7%9A%84%E6%97%B6%E9%97%B4/</link><pubDate>Sat, 19 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%91%A8%E6%9C%AB%E7%9C%8B%E7%94%B5%E5%BD%B1%E7%9A%84%E6%97%B6%E9%97%B4/</guid><description>&lt;p>按照偏执的日程安排，周末乃观影时间，一个人抽着烟复习经典老片。&lt;/p></description></item><item><title>关于随机数</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/</link><pubDate>Fri, 18 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid><description>&lt;p>众所周知，计算机（不含量子计算机）是不可能产生真正的随机数的，而只能产生出“伪随机数”。&lt;/p>
&lt;p>因为要在计算机上产生随机数都要设置“随机数种子”，而一般来说这个“种子”来自于计算机自带的时钟，这也就意味着这个过程是可重复的，产生出的随机数也是有一定的规律的，无论多复杂的随机算法都难逃这个定律。&lt;/p>
&lt;p>具体解释可参考维基百科。&lt;/p>
&lt;p>可是大自然中到处充满了“真随机数”，因为没有完全一样的两片树叶，也没有完全相同的指纹（这个不好说）。&lt;/p>
&lt;p>可是这些真的是随机的吗？&lt;/p>
&lt;p>还是由于人类的认知并未达到一定的高度才产生出来的错觉？&lt;/p>
&lt;p>因为我常常这样想：假如我写了一段程序，里面有个“生物”假设他有意识（我靠，这太难了），我给这段程序一堆随机数字，那么程序里的“生物”是不可能知道这些随机数字是由于我设置了“随机种子”才产生的，因为在“构建”这个“生物”之前我已经设置了“随机种子”。&lt;/p>
&lt;p>好了，令我有些迷惑的是，也许我们大自然的随机数是在“宇宙大爆炸”的时候就设置了“随机种子”的，后面的发展固然有无尽的随机数，导致根本没有重复的树叶也好，没有相同的指纹也罢，也许这些还是“伪随机数”。&lt;/p></description></item><item><title>齁冷</title><link>https://sbabybird.github.io/p/%E9%BD%81%E5%86%B7/</link><pubDate>Thu, 17 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%BD%81%E5%86%B7/</guid><description>&lt;p>实在找不到词语形容今天的天气了，查了半天新华字典才找到“hou”这个字怎么写，恩，今天天气齁冷齁冷的。&lt;/p></description></item><item><title>DIY了个电子琴延音踏板</title><link>https://sbabybird.github.io/p/diy%E4%BA%86%E4%B8%AA%E7%94%B5%E5%AD%90%E7%90%B4%E5%BB%B6%E9%9F%B3%E8%B8%8F%E6%9D%BF/</link><pubDate>Wed, 16 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/diy%E4%BA%86%E4%B8%AA%E7%94%B5%E5%AD%90%E7%90%B4%E5%BB%B6%E9%9F%B3%E8%B8%8F%E6%9D%BF/</guid><description>&lt;p>当初买电子琴的时候没有配套买一个踏板，后来练习的时候才知道延音踏板的作用还是十分重要的，嫌麻烦就没有再去买，到网上看看卖的还挺贵，雅马哈原装的要好几百块。&lt;/p>
&lt;p>后来我研究了一下，电子琴的延音踏板原理十分简单，就是拿脚一踩就短路而已。&lt;/p>
&lt;p>于是就想自己做一个，苦于没有材料，有一阵子我甚至联想到我垃圾桶上的那个踏板能不能拿来做延音踏板（当然不行），后来想到了鼠标，行倒是行，就是“脚感”太差。&lt;/p>
&lt;p>今天在家翻抽屉翻出来一个废弃的台灯，发现他的底座挺合适的，于是就卷起袖子开干。原理太简单了，就是拿跟引线从电子琴上接下来，这头接在台灯底座上，台灯的底座经过改造，踩下去就导电，抬起来就断开，试了一下，还真对得起咱这台琴！&lt;/p>
&lt;p>请看照片：&lt;/p></description></item><item><title>理发</title><link>https://sbabybird.github.io/p/%E7%90%86%E5%8F%91/</link><pubDate>Tue, 15 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%90%86%E5%8F%91/</guid><description>&lt;p>今天去理发了，很难理解那些一边理发一边与发型师聊个没完的话痨，今天我终于想明白了为什么我到了理发店就沉默寡言了。&lt;/p>
&lt;p>因为他们一般都会问我这几个问题：&lt;/p>
&lt;p>1、“您多久没理发了？”&lt;/p>
&lt;p>妈的，老子想什么时候理就什么时候理，怎么了。&lt;/p>
&lt;p>天气这么闷热生活这么枯燥，理个发你还在这唧唧歪歪没完。&lt;/p>
&lt;p>不就是老子的头发留的稍微长了点儿，收拾起来慢一些吗。&lt;/p>
&lt;p>2、“您的发质太硬，要不要做个软化？”&lt;/p>
&lt;p>操！好好的头发干嘛要在药水里泡来泡去了的。&lt;/p>
&lt;p>3、“您的头发有些脱发，给你推荐一款防脱发的洗发水怎么样？我们这边特价”&lt;/p>
&lt;p>脱发？没你说的那么严重吧，倒是推荐的洗发水有些怪异，恕我孤陋寡闻，这些牌子我一个也没听说过。&lt;/p>
&lt;p>4、“办个会员卡吧？以后每次来都能打 8 折”&lt;/p>
&lt;p>最崩溃的就是这句，痛苦地忍住胸口那句脏话，赶紧离开这间店。&lt;/p></description></item><item><title>我的装机必备软件及理由</title><link>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E8%A3%85%E6%9C%BA%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6%E5%8F%8A%E7%90%86%E7%94%B1/</link><pubDate>Mon, 14 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E8%A3%85%E6%9C%BA%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6%E5%8F%8A%E7%90%86%E7%94%B1/</guid><description>&lt;p>今天在网上看到有人写他的装机必备软件，看得我也心痒痒，也来说一说我的装机必备软件，每个人的习惯不一样，我选择的都是我最喜欢的。&lt;/p>
&lt;p>选择的原则是有免费的就不用收费的，有开源的就不用闭源的，有小巧的就不用臃肿的（当然是同样功能的比较），有绿色的就不用安装的。&lt;/p>
&lt;p>1、记事本替代，这个可选择的余地很大，gvim、Notepad++、Notepad2 等等，我选择 gvim，它高效、强大、聪明。&lt;/p>
&lt;p>2、浏览器，这个非常重要，可选择 Firefox、Chrome、Opera 等等，我选择 Firefox，因为 Chrome 目前还无法让我放弃 Firefox，不过 Chrome 也真的很好，而且进步很快。&lt;/p>
&lt;p>为啥没有 IE？用 IE 上网让我没有安全感，而且操作起来很不爽，这点目前已有了很大改观（IE8）。&lt;/p>
&lt;p>3、音乐播放器，我选择 foobar，不过现在在线听音乐才是趋势，所以 foobar 只有在听本地的无损音频文件的时候才能派上用场。&lt;/p>
&lt;p>4、视频播放器，我选择 MPlayer，没有理由，就是他了，非要找个理由的话，那就是因为它是开源的而且它有很多快捷键。&lt;/p>
&lt;p>5、看网络电视，选择 ppstream。&lt;/p>
&lt;p>6、文件管理器，选择 totalcommander，又是一个绝世好软，好处多到一天也说不完。&lt;/p>
&lt;p>7、在线听广播，选择龙卷风网络收音机，老牌子，质量有保证。&lt;/p>
&lt;p>8、系统快捷键定制，选择 ahk（AutoHotKey），可以自己编写脚本定制快捷键。&lt;/p></description></item><item><title>吃牛排的时候你没想过要认识那头牛</title><link>https://sbabybird.github.io/p/%E5%90%83%E7%89%9B%E6%8E%92%E7%9A%84%E6%97%B6%E5%80%99%E4%BD%A0%E6%B2%A1%E6%83%B3%E8%BF%87%E8%A6%81%E8%AE%A4%E8%AF%86%E9%82%A3%E5%A4%B4%E7%89%9B/</link><pubDate>Sun, 13 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%90%83%E7%89%9B%E6%8E%92%E7%9A%84%E6%97%B6%E5%80%99%E4%BD%A0%E6%B2%A1%E6%83%B3%E8%BF%87%E8%A6%81%E8%AE%A4%E8%AF%86%E9%82%A3%E5%A4%B4%E7%89%9B/</guid><description>&lt;p>《逃出克隆岛》这部 2005 年的科幻电影（算是科幻吧），今天又被我翻出来看了看。&lt;/p>
&lt;p>故事里说，在不远的将来，随着克隆技术的发展，人类已经具备了克隆自己的能力，最简单的应用是当人类的器官坏掉之后就克隆一个换上，这给那些贪婪的、渴望长生的人们又带来了希望。&lt;/p>
&lt;p>有了市场需求就有人提供这种服务，故事里的“坏人”开办了一个地下工厂专门提供克隆器官，并告诉外界克隆的这些器官寄生在没有灵魂、没有思想、知觉的“植物人”身上，听起来貌似很人道。&lt;/p>
&lt;p>然而，随着时间的进展，“坏人”发现通过这种手段提供的器官质量并不高，于是直接克隆出整个的活人，大批量的复制，统一的教育他们，并给他们植入雷同的记忆，描述了一个类似天堂的地方作为他们活着的终极目标，当然这个地方就是他们生命的重点。&lt;/p>
&lt;p>一旦用到了他们器官他们的生命也就走到了终点，外面世界里的人类作为“客户”继续使用新鲜的器官活下去。&lt;/p>
&lt;p>这些克隆人大部分没有真正的思想，认知水平停留在孩童阶段，本来一切进展顺利，使用器官的人都没有负罪感，因为就像电影里说的那样：“吃牛排的时候你从没想过要认识那头牛”。&lt;/p>
&lt;p>然而，人都是有好奇心的，克隆人也一样，随着好奇心越来越强烈，就引发了电影接下来的故事。&lt;/p>
&lt;p>故事的结局还算不错，就像所有的电影一样，“坏人”受到了惩罚，泯灭的人性又一次战胜了邪恶。&lt;/p>
&lt;p>电影本身结束了，可是带给人的思考却漫无边际，随着人类文明的发展，人性会被重新定义，只有一样是可以肯定的：为了生存，所有人都会不择手段。&lt;/p></description></item><item><title>记住这几个窍门带你迈入vim的门槛</title><link>https://sbabybird.github.io/p/%E8%AE%B0%E4%BD%8F%E8%BF%99%E5%87%A0%E4%B8%AA%E7%AA%8D%E9%97%A8%E5%B8%A6%E4%BD%A0%E8%BF%88%E5%85%A5vim%E7%9A%84%E9%97%A8%E6%A7%9B/</link><pubDate>Fri, 11 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%AE%B0%E4%BD%8F%E8%BF%99%E5%87%A0%E4%B8%AA%E7%AA%8D%E9%97%A8%E5%B8%A6%E4%BD%A0%E8%BF%88%E5%85%A5vim%E7%9A%84%E9%97%A8%E6%A7%9B/</guid><description>&lt;p>用 vim 已经有一段时间了，谈不上高手的级别，但总算是入门了，vim 作为编辑器的王者，掌握之后带来的成就感无与伦比，但是其陡峭的学习曲线常常让人望而却步，下面，我来介绍几点心得，虽是入门级但是能为将来的熟练掌握打下基础。&lt;/p>
&lt;p>1、不要再依赖菜单和工具条，虽然 gvim 提供了菜单和工具条，请不要再用他们，在配置里加上一行&amp;quot;setguioptions-=mT&amp;quot;,这样一来 gvim 的界面就干净多了，尽情的用快捷键吧。&lt;/p>
&lt;p>2、不要再依赖方向键来移动光标了，熟记 h、j、k、l 分别对应左、下、上、右，并强迫自己使用，你会发现右手再也不用来回移动了。&lt;/p>
&lt;p>3、切忌总在“插入”模式里待着，“插入”完成后立即按 esc 或 ctrl+c 推回到“默认”模式，因为在默认模式里才能发挥出 vim 各种“命令”的优势。&lt;/p>
&lt;p>4、“o“命令是在当前行的下面插入一行并进入“插入”模式（大写的“O”是在当前行的上方插入）。&lt;/p>
&lt;p>5、“dw”是删除一个单词，“dd”是删除一行。&lt;/p>
&lt;p>6、将光标移动到某个单词上并按“*”键是对这个单词进行向后搜索，“#”是向前搜索。&lt;/p>
&lt;p>7、“xp”是前后交换两个字符，“ddp”是上下交换两行。&lt;/p>
&lt;p>8、“v”这个选择命令很管用，紧跟其后按“i(”是选中小括号内的内容，“a(”是连小括号一起选择(你可以尽情地举一反三)。&lt;/p>
&lt;p>9、多看帮助。&lt;/p></description></item><item><title>最近比较忙</title><link>https://sbabybird.github.io/p/%E6%9C%80%E8%BF%91%E6%AF%94%E8%BE%83%E5%BF%99/</link><pubDate>Thu, 10 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%80%E8%BF%91%E6%AF%94%E8%BE%83%E5%BF%99/</guid><description>&lt;p>09 年已经接近尾声，琐碎的事情纷至沓来。&lt;/p>
&lt;p>很多事情需要加班才能解决，睡眠质量严重下降。&lt;/p>
&lt;p>我的博客又快荒废了。&lt;/p></description></item><item><title>忙里偷闲写博客</title><link>https://sbabybird.github.io/p/%E5%BF%99%E9%87%8C%E5%81%B7%E9%97%B2%E5%86%99%E5%8D%9A%E5%AE%A2/</link><pubDate>Tue, 08 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BF%99%E9%87%8C%E5%81%B7%E9%97%B2%E5%86%99%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p>刚写完了一篇文档，绞尽脑汁，换换脑子，上来唠叨两句。&lt;/p>
&lt;p>这两天又尝试着使用 evernote 管理笔记，界面华丽，功能强劲，赏心悦目，就是太耗资源了。&lt;/p>
&lt;p>勉强能在小笔记本上跑，输入中文的时候还吭哧吭哧的。本打算以后就直接在上面写日志，发了两篇测试，效果很不理想。&lt;/p>
&lt;p>放弃。发现我的共享空间又不能访问了。&lt;/p></description></item><item><title>来来来，一起解决全球变暖的问题</title><link>https://sbabybird.github.io/p/%E6%9D%A5%E6%9D%A5%E6%9D%A5%E4%B8%80%E8%B5%B7%E8%A7%A3%E5%86%B3%E5%85%A8%E7%90%83%E5%8F%98%E6%9A%96%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 07 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9D%A5%E6%9D%A5%E6%9D%A5%E4%B8%80%E8%B5%B7%E8%A7%A3%E5%86%B3%E5%85%A8%E7%90%83%E5%8F%98%E6%9A%96%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>&lt;p>来来来，一起解决全球变暖的问题来来来大家一起跳吧刚才在浏览科学松鼠会的网站，看到一个有趣的话题，假如地球上的所有人在同一时刻做同一件事情，会有什么样的后果？不过已经有喜爱恶搞的老外开始忽悠了。&lt;/p>
&lt;p>故事说的是：&lt;/p>
&lt;p>2006 年有‘科学家’建议六十亿人在 2006 年 7 月 20 日 11：39：13 秒同时猛跳一次就能让地球轨道距离太阳远一些，这样就很好地解决了气候变暖的问题。&lt;/p>
&lt;p>我初一看差点儿就相信了。www.evernote.com|Remember&lt;/p></description></item><item><title>test</title><link>https://sbabybird.github.io/p/test/</link><pubDate>Sun, 06 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/test/</guid><description>&lt;p>testMinim0www.evernote.com|Remembereverything|Signupforfree__________InformationfromESETNOD32Antivirus,versionofvirussignaturedatabase4663(20091205)__________ThemessagewascheckedbyESETNOD32Antivirus.http://www.eset.com&lt;/p></description></item><item><title>两个偏执狂的对话</title><link>https://sbabybird.github.io/p/%E4%B8%A4%E4%B8%AA%E5%81%8F%E6%89%A7%E7%8B%82%E7%9A%84%E5%AF%B9%E8%AF%9D/</link><pubDate>Sun, 06 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%A4%E4%B8%AA%E5%81%8F%E6%89%A7%E7%8B%82%E7%9A%84%E5%AF%B9%E8%AF%9D/</guid><description>&lt;p>qy：“优盘借我用一下，我要重装 windows7”&lt;/p>
&lt;p>我：“你现在的 Windows7 用的好好的为什么要重装？”&lt;/p>
&lt;p>qy：“因为现在用的是 RC 版的，想装中文正式旗舰版”&lt;/p>
&lt;p>我：“哦，了解”&lt;/p>
&lt;p>qy：“有时候，虽然明知道现在的软件用着很好，但就是想装最新版的，不然心里就特别扭”&lt;/p>
&lt;p>我：“我也是这样，我上周因为不能用 firefox 最新版把我的小笔记本重装了四次，还有就是我不能看见回收站里有东西”&lt;/p>
&lt;p>qy（会心的笑）：“对对对，我看见回收站已满的图标就浑身难受”&lt;/p>
&lt;p>我：“我上次用别人的计算机，上去就把他的回收站清空了，结果那家伙用回收站来存放重要文件”&lt;/p>
&lt;p>qy：“我用软件只喜欢去官方网站下载，然后自己动手破解，别人破的我不放心（信不过）”&lt;/p>
&lt;p>我：“你知道别人会怎么说我们这种行为吗？”&lt;/p>
&lt;p>qy：“怎么说？”&lt;/p>
&lt;p>我：“神经病！”&lt;/p>
&lt;p>qy（羞涩地笑）：“。。。。。”&lt;/p></description></item><item><title>音量</title><link>https://sbabybird.github.io/p/%E9%9F%B3%E9%87%8F/</link><pubDate>Sat, 05 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%9F%B3%E9%87%8F/</guid><description>&lt;p>城里的房子太挤，隔音很差，楼上蹑手蹑脚走过一个人，楼下也能听的一清二楚（有点儿夸张）。&lt;/p>
&lt;p>以前我有在家听音乐的习惯，那是在老家的时候，每到周末都把音响开到最大，一边听一边洗衣服，现在不能这样听了，因为那样会打扰到邻居，甚至有时候稍微把音量调的大一点儿都会觉得内心十分不安。&lt;/p>
&lt;p>音量大了就会担心，小了就听着不爽，感觉白瞎了我那套音箱了。&lt;/p>
&lt;p>想要随心所欲的开大音量听音乐，看来只能等住进别墅了，或者回乡下老家。&lt;/p></description></item><item><title>写博客</title><link>https://sbabybird.github.io/p/%E5%86%99%E5%8D%9A%E5%AE%A2/</link><pubDate>Fri, 04 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%99%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p>不管有没有人看，几乎每天都要写一篇博客，一是为了换换脑子，二是为了留点儿记忆，当然最好能写一些有用的东西，而不是流水帐。&lt;/p>
&lt;p>刚看了和菜头老师写的《像说话那样写博客》，深有同感。&lt;/p>
&lt;p>又不是写作文或者写文档，干嘛要写那么多书面用语或者空话套话呢，就是随心所欲，嘴里想说啥，就写点儿啥，有点儿像自言自语。&lt;/p>
&lt;p>内容当然不能太没劲，说一说今天吃了啥，去了几趟厕所等，写这些简直是浪费网络资源，不过也不是绝对的，据说有人坚持写了一年的博客，每一篇里面只记载了当天吃了什么饭，后来又有好事者根据博客内容统计出了该人的饮食习惯并列出了图表，这又另当别论了。&lt;/p>
&lt;p>我自己给自己的博客定下了内容范围，首先绝对不会转载别人的内容，其次不会写与政治有关的话题（我只是不明真相而且沉默的大多数），然后也不会写工作中的事情。&lt;/p>
&lt;p>如果算上刚才说的不能写当日的流水帐，就只剩下自己的爱好可以写一些了，比如音乐、电影（不是影评）、科技、编程、硬件等，偶尔也会写一些貌似小资文风的内容，不过也都是喝高了之后写的，过后看完两股战战几欲删除。&lt;/p></description></item><item><title>如何制作一个可以引导的优盘</title><link>https://sbabybird.github.io/p/%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E5%BC%95%E5%AF%BC%E7%9A%84%E4%BC%98%E7%9B%98/</link><pubDate>Thu, 03 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E5%BC%95%E5%AF%BC%E7%9A%84%E4%BC%98%E7%9B%98/</guid><description>&lt;p>这两天小笔记本出故障害我卷起袖子修了两个晚上，由于没有光驱，所以没少用到我的优盘，可是网上可下载系统盘一般都是 iso 文件，即光盘镜像刻录成光盘才可以引导机器启动，不过现在是 21 世纪了，几乎所有的主板都支持 usb 启动，所以没有光驱也无所谓了，只要手中有可引导光盘的 iso 文件就可以制作出一个可引导的优盘出来。&lt;/p>
&lt;p>正所谓授之以鱼不如授之以渔，下面介绍一下制作可引导优盘的步骤，并非所有的引导盘都必须这么做，这仅是其中的一种方法，也最省事。&lt;/p>
&lt;p>1、必备条件：运行 Windowsxp 系统的计算机一台，优盘一只。&lt;/p>
&lt;p>2、去网上搜索并下载名叫“UltraISO&amp;quot;的软件，试用版亦可。（该软件同时具有光盘刻录、iso 制作、虚拟光驱的功能，真是居家旅行&amp;hellip;&amp;hellip;..）&lt;/p>
&lt;p>3、可引导的光盘镜像文件（扩展名一般为 iso）一只，比如 ubuntu9.10-i386-livecd.iso，具体要什么 iso 取决于你要干的事情，如果这一句你弄不明白，那就别往下进行了。&lt;/p>
&lt;p>4、把那只倒霉的优盘插入电脑。（记清楚他的盘符，如果你插入了多个优盘的话）。&lt;/p>
&lt;p>4、启动 UltraISO，在菜单里选择“文件”==》“打开”选中你的 iso 文件。确定。&lt;/p>
&lt;p>5、在菜单里找到“启动”下面的“写入硬盘映像”并猛烈点击之。&lt;/p>
&lt;p>6、现在弹出了一个新对话框，在名叫“选择硬盘驱动器”的那个下拉框中选择你刚才插入的那个优盘（如果就插入了一个，就不用于选了）。&lt;/p>
&lt;p>7、在“写入方式”那个下拉框里选择“USB-HDD+”，除了这个选项还有“USB-ZIP”等选项，但是你选择 USB-HDD+就可以了，因为这个格式的兼容性最好，实在不行再换其他的。&lt;/p>
&lt;p>8、点击“写入按钮”并耐心等待。注意：优盘的内容会被清空。&lt;/p>
&lt;p>9、等写完了就拔掉优盘尽情的去得瑟吧。&lt;/p></description></item><item><title>小e复活</title><link>https://sbabybird.github.io/p/%E5%B0%8Fe%E5%A4%8D%E6%B4%BB/</link><pubDate>Wed, 02 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%B0%8Fe%E5%A4%8D%E6%B4%BB/</guid><description>&lt;p>周日手欠，将 epc 的系统改为 ubuntu 的 remix 版，损坏了 ssd 的 mbr，后又恢复成 xp，一天后出现 ssd 无法读取的错误，再也无法安装 xp 系统，本着死马当活马医的态度，我试了一下随机附带的恢复光盘（利用光盘烧录了一个可引导的 u 盘），竟然好使，现在系统又恢复到最初买回来时的状态了。但愿 SSD 没有坏。&lt;/p></description></item><item><title>程序员的自我修养</title><link>https://sbabybird.github.io/p/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</link><pubDate>Tue, 01 Dec 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</guid><description>&lt;p>上次逛当当的时候，忍不住买了一本书&amp;ndash;《一个程序员的自我修养》（副标题为：链接、装载与库），当时我说，就冲这个书名，哪怕里面全是白纸我也要买这本书。&lt;/p>
&lt;p>因为我是周星驰的影迷，《喜剧之王》在我心里一直是周星驰的巅峰之作（别跟我提《大话西游》，台词我比你记得还熟）。&lt;/p>
&lt;p>影片里的周星驰作为一个“死跑龙套”的“演员”，一直拿着的一本书就是《演员的自我修养》，那是他的梦想。每个编码的程序员其实心里或多或少都有一些代码情结，手里头捧着一本关于程序的书，就好象捧着自己的梦想似的。&lt;/p>
&lt;p>抛开书上面的不说，说一说我所认为作为一个程序员应该具备哪些修养：&lt;/p>
&lt;p>1、对程序、编码的热爱。如果不热爱编程，技术再牛逼也只能是一个代码工人。&lt;/p>
&lt;p>2、谦虚好学的态度。&lt;/p>
&lt;p>早就听说就有文人相轻的说法，做文章的瞧不起做文章的，其实很多程序员也一样，不知天高地厚，眼高手低，整天拿编程语言比来比去，在他们眼里别的程序员都是傻逼。&lt;/p>
&lt;p>这些人就算是某个领域的“高手”，也绝对谈不上是一个合格的程序员。&lt;/p>
&lt;p>3、团队协作能力。&lt;/p>
&lt;p>自古有一个诸葛亮抵不上三个臭皮匠的说法，这话说的虽然有些绝对，但是也有一定的道理，如果一个程序员不能很好的和队友交流、合作，哪怕有三头六臂也很难成为一个出色的程序员。&lt;/p>
&lt;p>4、安静平和的心态。&lt;/p>
&lt;p>浮躁、急躁是技术人员最忌讳的心态，这当然不是指火烧到眉毛了还懒的动弹，而是说遇到问题能够冷静的分析并作出准确的判断。&lt;/p>
&lt;p>这一点上有些人真让我望尘莫及，后天可以锻炼，但我觉得天生的因素占很多。&lt;/p>
&lt;p>5、自信。&lt;/p>
&lt;p>鼻孔朝天也不好，但是没有自信更要命，总是不相信自己能够开发出成功的软件，或者怨天尤人以语言不通、国内环境为挡箭牌为自己开脱，这样永远也写不出像样的程序。就牢骚这么多吧，说起来永远比做起来轻松，以上观点纯属瞎掰，如有雷同，那实在是巧合。&lt;/p></description></item><item><title>TED，这里都是能给你带来思考的视频</title><link>https://sbabybird.github.io/p/ted%E8%BF%99%E9%87%8C%E9%83%BD%E6%98%AF%E8%83%BD%E7%BB%99%E4%BD%A0%E5%B8%A6%E6%9D%A5%E6%80%9D%E8%80%83%E7%9A%84%E8%A7%86%E9%A2%91/</link><pubDate>Mon, 30 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/ted%E8%BF%99%E9%87%8C%E9%83%BD%E6%98%AF%E8%83%BD%E7%BB%99%E4%BD%A0%E5%B8%A6%E6%9D%A5%E6%80%9D%E8%80%83%E7%9A%84%E8%A7%86%E9%A2%91/</guid><description>&lt;p>推荐一个视频网站，&lt;a class="link" href="http://www.ted.com/" target="_blank" rel="noopener"
>TED&lt;/a>，因主要关注 Technology, Entertainment, Design 故得此名。我基本每周都要在上面看一段，里面的演讲精彩纷呈，就算是语言不通也能慢慢适应（很多经典视频有中文字幕）。&lt;/p>
&lt;p>今天看的是这一段。这哥们儿的风琴弹的简直出神入化。&lt;/p>
&lt;object width="446" height="326">
&lt;param name="movie" value="http://video.ted.com/assets/player/swf/EmbedPlayer.swf">&lt;/param>
&lt;param name="allowFullScreen" value="true">&lt;/param>
&lt;param name="wmode" value="transparent">&lt;/param>
&lt;param name="bgColor" value="#ffffff">&lt;/param>
&lt;param name="flashvars" value="vu=http://video.ted.com/talks/dynamic/CameronCarpenter_2008P-medium.flv&amp;amp;su=http://images.ted.com/images/ted/tedindex/embed-posters/CameronCarpenter-2008P.embed_thumbnail.jpg&amp;amp;vw=432&amp;amp;vh=240&amp;amp;ap=0&amp;amp;ti=699&amp;amp;introDuration=16500&amp;amp;adDuration=4000&amp;amp;postAdDuration=2000&amp;amp;adKeys=talk=cameron_carpenter_improvs_on_the_organ;year=2008;theme=new_on_ted_com;theme=live_music;theme=the_creative_spark;theme=tales_of_invention;event=EG+2008;&amp;amp;preAdTag=tconf.ted/embed;tile=1;sz=512x288;">&lt;/param>
&lt;embed src="http://video.ted.com/assets/player/swf/EmbedPlayer.swf" pluginspace="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" wmode="transparent" bgColor="#ffffff" width="446" height="326" allowFullScreen="true" flashvars="vu=http://video.ted.com/talks/dynamic/CameronCarpenter_2008P-medium.flv&amp;amp;su=http://images.ted.com/images/ted/tedindex/embed-posters/CameronCarpenter-2008P.embed_thumbnail.jpg&amp;amp;vw=432&amp;amp;vh=240&amp;amp;ap=0&amp;amp;ti=699&amp;amp;introDuration=16500&amp;amp;adDuration=4000&amp;amp;postAdDuration=2000&amp;amp;adKeys=talk=cameron_carpenter_improvs_on_the_organ;year=2008;theme=new_on_ted_com;theme=live_music;theme=the_creative_spark;theme=tales_of_invention;event=EG+2008;">&lt;/embed>
&lt;/object>
&lt;p>PS：我的 livespaces 又不能访问了，不知道此篇能否发送成功。&lt;/p></description></item><item><title>冲动是魔鬼</title><link>https://sbabybird.github.io/p/%E5%86%B2%E5%8A%A8%E6%98%AF%E9%AD%94%E9%AC%BC/</link><pubDate>Sun, 29 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%B2%E5%8A%A8%E6%98%AF%E9%AD%94%E9%AC%BC/</guid><description>&lt;p>本着没有困难制造困难也要上的精神，我以迅雷不及掩耳盗铃之势把 epc 的操作系统换成了 ubuntunetbookremix9.10，因为好奇心的原因，或者是爱用最高版本的原因，我这次不但将可怜的小笔记本给格式化了，而且选择了最新出的文件系统&amp;mdash;-Ext4！首先 4G 的那块 SSD 用来作为根分区“/”使用了 Ext4，然后划出了 256M 的空间作为交换分区。&lt;/p>
&lt;p>剩下那块 16G 的 SSD 也格式化成了 Ext4，挂载点为“/home”，理论上来说这种分配应该是可以的了。&lt;/p>
&lt;p>可是杯具就杯具在倒霉的 Ext4 上。&lt;/p>
&lt;p>安装完毕，按照我的老毛病，立即上网更新系统，吭哧吭哧下载了半天，所有软件都更新为了最新版啦！结果第一次重启就让我大跌眼镜。&lt;/p>
&lt;p>首先，由于某种原因，我直接在命令行输入了 sudoshutdown-rnow 来进行重启，还没有来及进入图形界面就告诉我说，“糟糕，/home 无法挂载，可能文件系统损坏了，您需要进行手动检查”，好吧，去官方网站上一查，人家说这是个 bug，需要先这样然后再那样 blablablabla。我忍了，输入:fsck/dev/sdb1 进行全面检查，磨烦了半天总算修复，等到进入了图形界面已经折腾了一头汗出来了。&lt;/p>
&lt;p>然而大自然是残酷的，这个系统竟然让我每次重启都要修复文件系统，而且修复后奇慢无比，每次访问/home 下的文件都会产生 I/O 错误，在控制台下满屏都是 error 的身影。&lt;/p>
&lt;p>可怜的美好周末就这样被消耗掉了，本来准备收拾好笔记本就抱着去阳台写一写小程序啥的，看来在太阳下山之前是没戏了。&lt;/p></description></item><item><title>谈谈我对家庭影院的看法</title><link>https://sbabybird.github.io/p/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9%E5%AE%B6%E5%BA%AD%E5%BD%B1%E9%99%A2%E7%9A%84%E7%9C%8B%E6%B3%95/</link><pubDate>Sat, 28 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9%E5%AE%B6%E5%BA%AD%E5%BD%B1%E9%99%A2%E7%9A%84%E7%9C%8B%E6%B3%95/</guid><description>&lt;p>不知道其他人为什么喜欢电影，或者不喜欢。&lt;/p>
&lt;p>反正我是十分喜欢，也许你说，是啊，美好的东西谁 TM 不喜欢？&lt;/p>
&lt;p>错！首先，不必像装逼的小资那样扭捏地大谈电影的文艺味道或者表达了一种什么样的思想，也不用像有关部门那样无耻地对电影挑三拣四反复阉割，我喜欢电影是因为电影可以让人经历不同的人生。&lt;/p>
&lt;p>等一等，我扯的有点儿远了，但是我要说的事儿是建立在以上基础之上的。&lt;/p>
&lt;p>我刚才差点就要像马丁路德金那样说：“我有一个梦想”，但是这句话让我的胃稍有不适，喝口水，冲一冲酒劲儿。&lt;/p>
&lt;p>好吧，我曾经有个梦想，那就是&amp;mdash;家庭影院！&lt;/p>
&lt;p>你会轻蔑地一笑：“多大点儿事儿，我还以为抢鸡蛋呢，原来是家庭影院啊，这有啥啊，整个大电视，搞两个音箱，往房间里面一摆，不就是了嘛”。&lt;/p>
&lt;p>唉，俺也曾经这样以为，而且照做了，但真不是家庭影院。&lt;/p>
&lt;p>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;注意，以下内容纯属瞎掰：&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p>
&lt;p>真正的家庭影院有这么几个要求：&lt;/p>
&lt;p>首先，必须要有一个巨幅的屏幕，液晶电视就甭想了，充其量也就一百寸吧？远远不够，至少要有两百寸以上的屏幕（就这比起电影院里两层楼高的银幕还是差很远），所以要用投影。&lt;/p>
&lt;p>其次呢，要有高清晰度的投影机，市面上现在卖那些白菜价的 1024×768 的液晶投影就别看了，专业的投影机对亮度和对比度以及分辨率都有很高的要求，10 万元（人民币）以内都没有特别符合要求的。&lt;/p>
&lt;p>然后是音响系统，市场上鼓吹的 5.1 或者 7.1 系统都是白扯，不是说喇叭多了凑个数就行了，功率、灵敏度、解码方案这些都是有严格要求的，目前来说，家用的音响系统就算是通过 THX 认证的也鲜有达到影院级标准的。&lt;/p>
&lt;p>就算以上这些设备全部买到，也得考虑放在哪儿以及如何摆放的问题，客厅肯定不行，东西太多太乱，那就得单独提供房间了，至少也得 30 平米（因为要放沙发），房间里要做好隔音、吸音处理，因为你肯定不想在看的正投入的时候让邻居们过来砸门。&lt;/p>
&lt;p>假设这些都准备齐了，还是要注意片源的问题，兄弟！几十万的东西拿回家不会就是放录像带吧？&lt;/p>
&lt;p>上一代 DVD 肯定不行，据说以前有发烧友自己在家弄电影放映机来放胶片，不过现在好了，有了蓝光 DVD（一片儿顶过去五片儿），一部电影几十 G 的容量，1920 或以上的清晰度，基本够用了。&lt;/p>
&lt;p>所以看来，哪怕是一个看电影的梦想，也不是那么容易实现的哈。&lt;/p></description></item><item><title>兄弟们还是喜欢骑摩托</title><link>https://sbabybird.github.io/p/%E5%85%84%E5%BC%9F%E4%BB%AC%E8%BF%98%E6%98%AF%E5%96%9C%E6%AC%A2%E9%AA%91%E6%91%A9%E6%89%98/</link><pubDate>Fri, 27 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%84%E5%BC%9F%E4%BB%AC%E8%BF%98%E6%98%AF%E5%96%9C%E6%AC%A2%E9%AA%91%E6%91%A9%E6%89%98/</guid><description>&lt;p>上次回老家休假，和家里的哥儿几个聚了一把，见了面无非就是聊天，喝酒，打台球，只是都已成熟许多，使劲儿咧嘴笑的话，也能看见皱纹了。&lt;/p>
&lt;p>这些曾经睡在一个炕上的兄弟，据上次见面已经差不多两年了，有坐车来的，有开车来的，几个兄弟还是骑摩托过来的。&lt;/p>
&lt;p>我问了一下，还是无牌照，无头盔，钻胡同躲交警，和从前一样。&lt;/p>
&lt;p>于是我又犯骑车瘾，借着酒劲儿风驰电掣了一把。&lt;/p>
&lt;p>十年前刚拥有摩托车的时候，我曾天真地以为，摩托车是我的最爱，给个奔驰都不换。&lt;/p>
&lt;p>因为骑摩托可以到处转悠，可以使劲把油门拧到底，体验呼呼的风把眼泪刮出来的感觉，可以带着墨镜飞速穿过柏油路上被大豆秸杆掀起的土雾，可以让坐在后座上的姑娘不由自主地搂着我的腰。&lt;/p>
&lt;p>那个时候，周末基本上都是和哥儿几个骑着车四处乱窜，再窄乡间小路也敢往里冲，吹着口哨把车扎在路边跳到河里去洗澡，有时下着大雨，淋的像个落汤鸡。&lt;/p>
&lt;p>路上当然是飙来飙去，偶尔也被大人们骂句：“不要命了！”&lt;/p>
&lt;p>如今，都已是拖家带口了，社会的磨练多少给了一些沧桑的感觉，脸上的笑容也失去了往日的纯真而增添了几分苦涩，只是，当他们跳上摩托车，冲我招一招手，伴着隆隆的声音脚下喷出一股股蓝烟，我的心仿佛又回到了那个时节。&lt;/p></description></item><item><title>推荐一个在线听广播站点</title><link>https://sbabybird.github.io/p/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E5%90%AC%E5%B9%BF%E6%92%AD%E7%AB%99%E7%82%B9/</link><pubDate>Thu, 26 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E5%90%AC%E5%B9%BF%E6%92%AD%E7%AB%99%E7%82%B9/</guid><description>&lt;p>有睡前听相声或评书的习惯，有个人在旁边罗哩罗嗦没完是个很好的催眠剂，可以很快入睡，保证了充足的睡眠。MoRadio 是一个很简洁干净的在线广播站点，界面清新漂亮，电台丰富，甚至可以在线听小说。&lt;/p>
&lt;p>有了它我基本舍弃了“龙卷风网络收音机”。网址:http://www.moradio.cn/&lt;/p></description></item><item><title>准备买几本书</title><link>https://sbabybird.github.io/p/%E5%87%86%E5%A4%87%E4%B9%B0%E5%87%A0%E6%9C%AC%E4%B9%A6/</link><pubDate>Wed, 25 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%87%86%E5%A4%87%E4%B9%B0%E5%87%A0%E6%9C%AC%E4%B9%A6/</guid><description>&lt;p>刚才二舅给我打电话，聊了一会儿天。&lt;/p>
&lt;p>问我现在是否还看书，我说看，电子版的，在手机上也看，看的眼睛都快毁了。&lt;/p>
&lt;p>很久没买书了，记得跟飞行鱼借来的《代码大全》差点儿垫了桌子。&lt;/p>
&lt;p>接了这个电话，两个人谈了一阵子书，我又想看纸质的真书了，刚好他又给我推荐了两本，随即去当当把书定下。&lt;/p>
&lt;p>选书的时候哦发现一个问题，计算机相关的书最贵，买三本畅销书的价格还比不了买一本忽悠你怎么编程的书贵。&lt;/p>
&lt;p>不过还是难以抗拒诱惑，各买了两本。&lt;/p>
&lt;p>《做单》这本书最近十分火，本来看名字和书评都不太和我的胃口，但是二舅极力推荐，所以拿下。&lt;/p>
&lt;p>《我们台湾这些年》是王三表在他博客里提到的，所以拿下。&lt;/p>
&lt;p>《深入理解计算机系统》据说是人家美国大学里的教材，图个新鲜，所以拿下。&lt;/p>
&lt;p>《程序员的自我修养》就冲这个名字哪怕里面全是白纸也得拿下。&lt;/p></description></item><item><title>平行宇宙</title><link>https://sbabybird.github.io/p/%E5%B9%B3%E8%A1%8C%E5%AE%87%E5%AE%99/</link><pubDate>Tue, 24 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%B9%B3%E8%A1%8C%E5%AE%87%E5%AE%99/</guid><description>&lt;p>肯定有过这样的经历，有一样东西（通常是个小东西，电冰箱什么的不算）翻箱倒柜地找不到，过一段时间你突然发现这个东西出现在某个地方，而那个地方当时已被你掘地三尺了。&lt;/p>
&lt;p>有人说这是眼睛欺骗了大脑，或者是大脑欺骗了眼睛，但我更相信另一个比较科幻的说法&amp;mdash;-平行宇宙。&lt;/p>
&lt;p>按照平行宇宙的说法，我们生活的宇宙不是唯一的宇宙，另外还有无数个和咱们的宇宙差不多的宇宙，无数个宇宙里自然就有无数个你我，每一个重大事件的发生都会导致当前的宇宙分裂出与之平行的另一个宇宙来，我没有瞎掰，科学家也是这么说的，不过我感觉他们是有点儿瞎掰。&lt;/p>
&lt;p>刚才我翻箱倒柜也找不到我的吉他拨片了，我记得很清楚就在一个放有调音笛的小盒子里，打开一看没有，出去干点儿别的，再回来，发现果然在小盒子里。&lt;/p>
&lt;p>所以我宁愿相信这个拨片刚才有一阵子进入了另一个宇宙。&lt;/p></description></item><item><title>塞班手机使用MailForExcange同步gmail实现pushmail</title><link>https://sbabybird.github.io/p/%E5%A1%9E%E7%8F%AD%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8mailforexcange%E5%90%8C%E6%AD%A5gmail%E5%AE%9E%E7%8E%B0pushmail/</link><pubDate>Mon, 23 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A1%9E%E7%8F%AD%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8mailforexcange%E5%90%8C%E6%AD%A5gmail%E5%AE%9E%E7%8E%B0pushmail/</guid><description>&lt;p>从《越狱》火起来那年开始，pushmail 这个概念随着黑莓手机的流行而泛滥成灾（什么？不知道什么是 pushmail？请 Google 之，或者看这里。现在知道了吧，pushmail 的好处就是及时。），就连中国移动也推出了自己的 pushmail，当然了他们要收取“少量”的费用。&lt;/p>
&lt;p>那么有没有免费的泥？&lt;/p>
&lt;p>答案是肯定的，条件有三：&lt;/p>
&lt;p>1、拥有一个 gmail 帐号。&lt;/p>
&lt;p>2、拥有一部 Nokia 智能手机（最好是 E 系列）。&lt;/p>
&lt;p>3、喜欢折腾。由于 pushmail 客户端不再向以前的 email 客户端那样需要过一段时间就去服务器查询是否有新邮件，这样既省钱又省流量，所以折腾一下还是值得的。&lt;/p>
&lt;p>好吧，准备好手机，就到这里来下载 MailForExcange 吧。&lt;/p>
&lt;p>http://www.google.com/mobile/products/sync.html#p=nokia_smart&lt;/p>
&lt;p>下载完成后这里有使用说明&lt;/p>
&lt;p>http://www.google.com/support/mobile/bin/answer.py?hl=en&amp;amp;answer=147951&lt;/p>
&lt;p>按照文档的说明，设置完毕之后就可以使用了。&lt;/p>
&lt;p>补充两点：&lt;/p>
&lt;p>1、不要选择同步“任务”，目前还不支持，如果选择了就会什么也同步不了。&lt;/p>
&lt;p>2、不要选择同步“联系人”，否则会把你 gmail 里的联系人全部同步到手机上，如果不小心还可能会清空手机的电话本（慎用！）。&lt;/p>
&lt;p>另：我有使用日程表的习惯，这也是偏执狂的一个表现，是 GoogleCalendar 重度使用者、Gmail 的中度使用者，同时极度讨厌使用 OutLook。&lt;/p>
&lt;p>此 MailForExcange 还可以同步日程安排到手机，真是居家旅行杀人灭口之必备好软。&lt;/p></description></item><item><title>假如明天就是世界末日</title><link>https://sbabybird.github.io/p/%E5%81%87%E5%A6%82%E6%98%8E%E5%A4%A9%E5%B0%B1%E6%98%AF%E4%B8%96%E7%95%8C%E6%9C%AB%E6%97%A5/</link><pubDate>Sun, 22 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%81%87%E5%A6%82%E6%98%8E%E5%A4%A9%E5%B0%B1%E6%98%AF%E4%B8%96%E7%95%8C%E6%9C%AB%E6%97%A5/</guid><description>&lt;p>1、今天排队看了《2012》，包括排队买票，排队进场，排队去厕所放水。&lt;/p>
&lt;p>2、好的电影看完可以引起一些思考。&lt;/p>
&lt;p>3、想起一句诗：假如明天就是世界末日，我今天仍然种我的苹果树。&lt;/p>
&lt;p>4、就算是商业电影，里面也有一些政治隐喻，仁者见仁，淫者见淫。&lt;/p>
&lt;p>5、人生短暂，活着真好，我决定请朋友们吃饭，今晚。&lt;/p>
&lt;p>6、有可能的话，以后看电影尽量去影院看。&lt;/p></description></item><item><title>失望</title><link>https://sbabybird.github.io/p/%E5%A4%B1%E6%9C%9B/</link><pubDate>Fri, 20 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A4%B1%E6%9C%9B/</guid><description>&lt;p>昨天夜里，Google 演示了他们推出的操作系统 ChromeOS，据说是基于 Linux 的。&lt;/p>
&lt;p>在此之前已有风生放出，比较适合上网本，我期待着能够用在我的 epc（太弱了）上。&lt;/p>
&lt;p>结果是，Google 根本不允许在他的操作系统上安装任何本地软件，甚至不能自己安装在笔记本上，所有的数据均保存在 Google 的服务器上，意味着一旦失去网络就是废塑料一坨。&lt;/p>
&lt;p>想一想咱们的网络环境，我还是洗洗睡吧。&lt;/p></description></item><item><title>床头的电磁波</title><link>https://sbabybird.github.io/p/%E5%BA%8A%E5%A4%B4%E7%9A%84%E7%94%B5%E7%A3%81%E6%B3%A2/</link><pubDate>Thu, 19 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BA%8A%E5%A4%B4%E7%9A%84%E7%94%B5%E7%A3%81%E6%B3%A2/</guid><description>&lt;p>有相当长的时间，我的手机都是 24 小时开机的。&lt;/p>
&lt;p>不过我有一个坏习惯，把手机放在枕边当闹钟，半夜醒来也好看时间。后来关于手机电磁波辐射的说法越来越多，导致我产生了一定的心理阴影，总感觉电磁波正在滋滋地穿过我的脑袋。&lt;/p>
&lt;p>后来就到睡觉时就把闹钟关掉了，然后早晨再起来开机把闹铃叫醒。&lt;/p>
&lt;p>不过现在用的手机支持关机闹铃，即使关机状态也可以很负责任地把我叫醒。&lt;/p>
&lt;p>剩余的问题是，夜里醒来不太容易看时间，开手机太费劲，爬起来到客厅看时间又太远，有人出个馊主意说：起来“演奏”一会儿乐器，邻居们就会大声告诉我现在是什么时间了。&lt;/p>
&lt;p>不过我觉得这个方法不太可取，万一他们的手机也关机了咋办。&lt;/p>
&lt;p>想来想去，我还是觉得应该在床头放一个真正的闹钟，可以很方便看时间的那种，最好能发出幽幽地蓝光（不是绿光）。&lt;/p>
&lt;p>刚才我发现了这个，感觉挺合适的，就是目前还买不到。&lt;/p>
&lt;p>啧啧，可惜啊。&lt;/p></description></item><item><title>祝我生日快乐！</title><link>https://sbabybird.github.io/p/%E7%A5%9D%E6%88%91%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/</link><pubDate>Wed, 18 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%A5%9D%E6%88%91%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/</guid><description>&lt;p>一大早就收到家人发来的祝福短信，原来今天是我的生日。&lt;/p>
&lt;p>逐个回复短信之后，我慢慢回想，掏出计算器算了算，哦是的，原来我已经二十八了。&lt;/p>
&lt;p>他们说：“生日快乐！”，没错，快乐最重要，我想，和十年前的想法一样，到了今天我还是认为快乐最重要。&lt;/p>
&lt;p>潜在的意思就是玩儿最重要，只不过十年前我玩儿起来是骑着摩托车约着一群怀疑人生的青少年去疯狂飚车，或者是跳到半腰深的河里去捉鱼，或者是带着漂亮的女生一起谈论理想（现在已是我的老婆）等等。&lt;/p>
&lt;p>十年后的今天玩的仅是一些虚无缥缈的东西，比如曾经以为永远也学不会的编程现在用来吃饭，生活就是这样，玩玩电脑偶尔也被电脑玩玩。&lt;/p>
&lt;p>仔细地想一想，岁月还真是不饶人哩，小时候的玩伴大都不再联系，老爸老妈的鬓角也渐渐染上了白霜，时间就这样一年年过去，不断地得到也不断地失去，唯一能保持不变的以许就是一颗追求快乐的心吧。&lt;/p>
&lt;p>今天是我的生日，祝我生日快乐，也愿我的家人幸福快乐。&lt;/p></description></item><item><title>我觉得twitter</title><link>https://sbabybird.github.io/p/%E6%88%91%E8%A7%89%E5%BE%97twitter/</link><pubDate>Tue, 17 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E8%A7%89%E5%BE%97twitter/</guid><description>&lt;p>问我为啥用 twitter，因为我觉得上 twitter 比较有技术含量（嘿嘿，想起黎叔了）。&lt;/p>
&lt;p>开个玩笑而已，其实是觉得 twitter 上的人尤其是中文 twitter 用户都比较有爱心和有责任心。&lt;/p>
&lt;p>虽然也有愤怒激进的，但大部分都是能够较为冷静地看待问题的人。&lt;/p>
&lt;p>用句流行的话来说，就是感觉 twitter 上的人都比较有爱。&lt;/p>
&lt;p>再一点就是它“致命”的优点了，也是被反复提及的信息及时性，这实在是很让人暗爽的特点，每天早晨打开手机第一件事就是更新 twitter，不用发愁会错过什么信息，而且都是第一手资料。&lt;/p>
&lt;p>今天再次帮助一位不知道 twitter 是何物的朋友开通了 twitter，本着送佛送到西的精神，一股脑儿帮他 flow 了几十个有意义的中文 twitter，然后又帮装上手机客户端，由于众所周知的原因，我还得把代理地址给他设置好。&lt;/p>
&lt;p>弄完之后，感觉自己像是一个传教士。&lt;/p></description></item><item><title>每日笑话</title><link>https://sbabybird.github.io/p/%E6%AF%8F%E6%97%A5%E7%AC%91%E8%AF%9D/</link><pubDate>Mon, 16 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%AF%8F%E6%97%A5%E7%AC%91%E8%AF%9D/</guid><description>&lt;p>记得老婆怀孕的时候，为了保持其心情愉悦，我每天都要给她发送一条短信，均是时下最流行的笑话段子。&lt;/p>
&lt;p>这些段子基本上来自于网上，有些比较长的我还得进行一定的删减，由于平时储备的段子较多，刚开始几天还源源不断，后来因为我的审查比较严格，比较俗气的段子不发，太露骨的荤段子不发，不经典不好笑的不发，导致连压箱底的段子都发给她了，有时候我甚至还得四处搜罗。&lt;/p>
&lt;p>每天一条笑话，一直持续到孩子生下来，现在孩子白白胖胖非常可爱，我的笑话短信有很大的功劳。&lt;/p>
&lt;p>再后来，由于工作实在是繁忙又加上自己存储的段子实在是不够用了，我才逐步取消“今日笑话”这项“业务”。&lt;/p>
&lt;p>前两天老婆又跟我叫屈，说我太偏心了，孩子一生下来就收不到新段子了，向我申请重新开通“每日笑话”的业务。&lt;/p>
&lt;p>很长时间没有发笑话，我的段子又储备的差不多了，经过深思熟虑之后，我决定今日起重新开通该业务。&lt;/p>
&lt;p>另附今日笑话：儿子学习不好，被妈妈痛骂。儿子用哀怨的眼神看着爸爸说：“你为什么要娶她？”爸爸也用哀怨的眼神看着儿子说：“还不是因为你！”&lt;/p></description></item><item><title>到处蹭饭的周末</title><link>https://sbabybird.github.io/p/%E5%88%B0%E5%A4%84%E8%B9%AD%E9%A5%AD%E7%9A%84%E5%91%A8%E6%9C%AB/</link><pubDate>Sun, 15 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%88%B0%E5%A4%84%E8%B9%AD%E9%A5%AD%E7%9A%84%E5%91%A8%E6%9C%AB/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%88%B0%E5%A4%84%E8%B9%AD%E9%A5%AD%E7%9A%84%E5%91%A8%E6%9C%AB/20091115-776584.JPG" alt="Featured image of post 到处蹭饭的周末" />&lt;p>此周末加班 0.75 天，在朋友家玩了 1.25 天。吃大餐若干，其中有朋友亲自下厨精心烹饪的海鲜。狂唱卡拉 OK 从民歌到通俗再到摇滚，直至嗓子嘶哑。三五个人又一起打了台球，期间发现我的球技属于遇强则强遇弱则更弱。&lt;/p>
&lt;p>晚饭又在另一个朋友家中解决，亦丰盛无比，这两天真是太对得住我的胃了。&lt;/p></description></item><item><title>唉</title><link>https://sbabybird.github.io/p/%E5%94%89/</link><pubDate>Fri, 13 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%94%89/</guid><description>&lt;p>今天在回家的路上看见有人在 twitter 欢呼，因为这两天有人要来，所以 Youtube、blogspot、picasa 等网站都解封了。等到了家，立即打开电脑，把那些被封的网站挨个试了一遍，Mad，还和原来一样。看来，twitter 确实是个制造谣言的好地方。&lt;/p></description></item><item><title>关于SSD硬盘</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8Essd%E7%A1%AC%E7%9B%98/</link><pubDate>Thu, 12 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8Essd%E7%A1%AC%E7%9B%98/</guid><description>&lt;p>昨天某同事出差，走到半路发现笔记本硬盘坏了，十分痛苦地发短信问我火车上有没有 IBM 的客服，我说，天将降大任与斯人也，必先苦其心志劳其筋骨，坏其硬盘。&lt;/p>
&lt;p>此同事吐血半升后就杳无音讯了。&lt;/p>
&lt;p>此事引发大家热烈地讨论起关于硬盘的话题（我们太残忍了），最后大家一致认为经常背着出差的笔记本其硬盘特别容易出毛病，颠簸导致。&lt;/p>
&lt;p>有没有不怕振动的硬盘呢，答案是肯定的，那就是 SSD，中文称“固态硬盘”，因没有磁盘盘片和磁头等机械装置，所以不怕振动，具体介绍如下（来自维基百科）：&lt;/p>
&lt;p>固态硬盘（SolidStateDisk、SolidStateDrive，簡稱 SSD）是一种基于永久性存储器，例如闪存，或者非永久性存储器，例如同步动态随机存取存储器（SDRAM）的计算机外部存储设备。&lt;/p>
&lt;p>固态硬盘用来在便携式计算机中代替常规硬盘。&lt;/p>
&lt;p>虽然在固态硬盘中已经没有可以旋转的盘状机构，但是依照人们的命名习惯，这类存储器仍然被称为“硬盘”。去 Google 搜索一下“SSD”或者“固态硬盘”返回的文章里充满了赞美之词，什么随机读取速度别传统硬盘快啊，没有噪音啦，没有散热问题啦等等。&lt;/p>
&lt;p>然后一致指出的缺点就是价格太贵。难道就没有别的缺点了？NO！我的 epc 用的就是 SSD，抛开至今仍有争议的 SSD 寿命问题不说，我在使用中发现了一个很大的问题就是&amp;mdash;-“磁盘碎片”，由于现在的文件系统（NTFS、FAT32）等都是针对以前的硬盘设计的，目前还没有一个针对 SSD 优化的文件系统（听说快出了），所以随着 SSD 里存储的文件越来越多，那么访问这个 SSD 上的文件将会越来越慢，尤其是写入，有时候会慢的无法忍受，我认为这个问题是目前 SSD 面临的最严重的问题，至于容量价格之类肯定不用担心。&lt;/p>
&lt;p>今天的话题好像扯的有点儿远，不知道那位硬盘坏了的同事现在怎么样了。&lt;/p></description></item><item><title>你说你，要蹭网，用心良苦却成空</title><link>https://sbabybird.github.io/p/%E4%BD%A0%E8%AF%B4%E4%BD%A0%E8%A6%81%E8%B9%AD%E7%BD%91%E7%94%A8%E5%BF%83%E8%89%AF%E8%8B%A6%E5%8D%B4%E6%88%90%E7%A9%BA/</link><pubDate>Wed, 11 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BD%A0%E8%AF%B4%E4%BD%A0%E8%A6%81%E8%B9%AD%E7%BD%91%E7%94%A8%E5%BF%83%E8%89%AF%E8%8B%A6%E5%8D%B4%E6%88%90%E7%A9%BA/</guid><description>&lt;p>最近老多人都讨论破解无线网络来蹭网的问题，提到破解都挺鸡冻的。&lt;/p>
&lt;p>其实 wi-fi 的破解早就出来了，不过遗憾的是破解并不彻底，只是破解了 WEP 加密而已，现在很多人的无线网络被蹭网，我的理解是，一部分人是自愿的（本着分享的精神或者另有企图），另一部分就是因为懒。&lt;/p>
&lt;p>现在如果一个无线路由使用 WEB 加密的话，破解已经很简单，甚至傻瓜化了，国外已经有人做成 live 的 Linux 系统（因为破解程序是 Linux 版的）。&lt;/p>
&lt;p>如何破解就不说了，谈谈怎样不被别人蹭网（我个人希望我的无线路由是不加密的，但是有些人蹭网还上 BT 就太过分了）。&lt;/p>
&lt;p>1、进入无线路由器的设置页面（地址一般是 http://192.168.1.1 或者 http://192.168.0.1)，找到无线设置那一页。&lt;/p>
&lt;p>2、设置加密方式为 WPA-PSK 或者 WPA2-PSK，别选 WEP 了，上面已经写的很清楚了。把密码设置的复杂一些。&lt;/p>
&lt;p>做到上一步已经基本安全，要想再安全一些还可以这样：&lt;/p>
&lt;p>3、找到高级一些的无线设置选项，把 SSID 广播关掉，这样别人根本就扫描不到你的无线路由了，不过你所付出的代价就是自己上网的时候要手动输入接入点的 SSID，自己记住即可。&lt;/p>
&lt;p>要是还不放心的话还可以这样：&lt;/p>
&lt;p>4、找到更高级的 mac 绑定设置，有些路由器不支持，也就是说仅允许指定的机器可以上网。&lt;/p>
&lt;p>ps：路由器本身的访问密码也最好设置一下。&lt;/p>
&lt;p>再 ps：蹭别人的网也要小心，现在抓包的工具都很先进很傻瓜化，蹭别人的无线路由也就意味着隐私很难保障，随便吧。&lt;/p></description></item><item><title>兄弟</title><link>https://sbabybird.github.io/p/%E5%85%84%E5%BC%9F/</link><pubDate>Tue, 10 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%84%E5%BC%9F/</guid><description>&lt;p>今天心情比较郁闷，幸好有兄弟陪我喝喝小酒，打打台球。心情好多了。&lt;/p></description></item><item><title>期待</title><link>https://sbabybird.github.io/p/%E6%9C%9F%E5%BE%85/</link><pubDate>Mon, 09 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%9F%E5%BE%85/</guid><description>&lt;p>上次一狠心，把 epc 上的系统更换为 xp 了，现在差不多又到了换系统的时候了，因为 xp 的毛病就是&amp;mdash;越来越慢。&lt;/p>
&lt;p>本来 epc 上带的那个基于 debian 定制的原装系统速度贼快，但是功能太弱了，三岁小孩用还行。&lt;/p>
&lt;p>后来有好心人给整出来个 eee-ubuntu，赶紧装上，发现他继承了 ubuntu 体态臃肿的优良传统，可怜的小 e 仅带了 4G 的系统盘，根本不够怎么折腾的，而且在安装最新版 firefox 时被我编译坏了 glibc 库，于是换成了 xp。&lt;/p>
&lt;p>今天发现以前的那个 eee-ubuntu 已经改名了，现在叫做 EasyPaesy，都 1.5 了，不过仍然是基于 ubuntu 的定制，据说已经优化了不少，看得我都有些动心了。&lt;/p>
&lt;p>官方网站上的介绍更是让我心动：下一个版本，也就是 2.0 的时候将直接基于 debian 定制，不在基于臃肿的 ubuntu，而且将原生的带有 epc 的全部驱动程序。&lt;/p>
&lt;p>哦夜！太期待了。&lt;/p></description></item><item><title>练习吉他的心得</title><link>https://sbabybird.github.io/p/%E7%BB%83%E4%B9%A0%E5%90%89%E4%BB%96%E7%9A%84%E5%BF%83%E5%BE%97/</link><pubDate>Sun, 08 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%BB%83%E4%B9%A0%E5%90%89%E4%BB%96%E7%9A%84%E5%BF%83%E5%BE%97/</guid><description>&lt;p>最近几个月来，感觉思维有些迟钝，记忆力有所下降，用脑过度导致。&lt;/p>
&lt;p>考虑到每天需要休息一下脑子和眼睛，为了远离屏幕，我决定每天晚上活动活动手指（虽然敲键盘也是活动手指，但那是机械性的），弹弹吉他，正好重拾练习吉他的计划。&lt;/p>
&lt;p>几天之后，感觉“颇有长进”，遂记录心得如下：&lt;/p>
&lt;p>1、不要怕打扰到邻居。&lt;/p>
&lt;p>以前我弹琴的时候，心里总是有个阴影，总觉得邻居正在把耳朵贴在墙上偷听我弹琴，这样一来我就不好意思弹的太大声，不敢弹的太难听，可是又不会弹好听，每次都几乎是看着谱子在心中默念，这样的话就像哑巴英语似的永远也甭想弹好。&lt;/p>
&lt;p>后来我干脆想，反正邻居养了狗，叫声也挺大，吵了我这么久我都不放在心上，我弹吉它吵他们也算是扯平了，再者说了，狗叫要难听多了。&lt;/p>
&lt;p>2、不要在洗脚的时候练琴。&lt;/p>
&lt;p>这是一个很不好的习惯，源自我对时间管理的偏执。&lt;/p>
&lt;p>有段时间我觉得每天洗脚的这段时间被白白浪费了，我想，要是每次洗脚都认真看一篇文章的话我很快都能成为文学家了，可是我对文学没有兴趣，于是我选择了弹吉他。&lt;/p>
&lt;p>而且养成洗脚要弹吉他的毛病，就连老家也专门放了一把琴，洗脚专用。&lt;/p>
&lt;p>结果可想而知，我弹吉他的水平越来越臭。&lt;/p>
&lt;p>3、认真练习音阶和节奏。&lt;/p>
&lt;p>总算说到正经的了，音阶和节奏一直被我忽视，从来都是由着性子来，自负胸中有谱，想到哪里弹到哪里，不管琴弦按的对不对速度是否正确。&lt;/p>
&lt;p>结果到现在我仍然不能完整的弹奏任何一支曲子。&lt;/p>
&lt;p>现在每次我都认真练习十分钟的音阶并且开着电子琴用于矫正节奏，几天下来，感觉手指灵活了许多（当然是针对以前说的）。&lt;/p>
&lt;p>4、弹自己喜欢的曲子并投入进去。&lt;/p>
&lt;p>这个没什么可说的，只有自己喜欢的曲子才有可能投入进去，也只有投入进去才能觉得弹琴是很幸福的事情。&lt;/p>
&lt;p>当然现在距离人琴合一的境界还差一些，也许再过个三五年，或者三五十年可以达到。&lt;/p></description></item><item><title>删除文件的定律</title><link>https://sbabybird.github.io/p/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9A%E5%BE%8B/</link><pubDate>Fri, 06 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9A%E5%BE%8B/</guid><description>&lt;p>定律：上午删除的下午就会用到，而如果你不删除它们，永远也用不到。&lt;/p>
&lt;p>前两天听到有人抱怨现在硬盘越来越大了，动辄好几百 G 甚至上 T，这对于 AV 爱好者来说是个福音，但对于一个偏执狂来说简直是个灾难。&lt;/p>
&lt;p>因为偏执狂要控制电脑里的一切，磁盘该如何分区，文件夹该如何命名，要建多深层次的文件夹结构都有详细的规划，比如音乐可按格式分为无损的和压缩的，按地域分可分为国内、欧美、日韩的，至于按流派分那就更头疼了，还有纯音乐等等，所以我有个偏执狂朋友甚至花费了将近一年的时间才慢慢把自己的那个叫做 Music 的文件夹整理完毕，真是一项系统工程。&lt;/p>
&lt;p>我对磁盘文件的管理也有些偏执，首先一点是不能看见回收站里有东西（听说还有人听清空回收站的声音上瘾），所以删除任何文件的时候都是按住 shift 键直接删除，这些倒霉的文件连进入回收站里歇会儿的功夫都没有直接就被踢飞了。&lt;/p>
&lt;p>我想说的是，这是一个很不好的习惯。&lt;/p>
&lt;p>每当我清理磁盘上“没用的”文件之后，随着干净文件夹带来的快感而来的就是马上就需要用到刚才被删文件的痛苦。&lt;/p>
&lt;p>一般来说，上午删除的下午就会用到，而如果你不删除它们，感觉永远也用不到，每天都在哪儿呆着看着真碍眼！&lt;/p>
&lt;p>刚才就又经历了一次活生生的例子，昨天晚上在家呆着没事儿，就把我家用机上的东西都打扫了一下，卸载了很多软件，最大的失败就是把开发环境卸掉了，把相应的安装文件也删除了。&lt;/p>
&lt;p>结果…………刚才被电话吵醒了，前方的同事有问题搞不定了，让我着实体验了一把手边没有开发环境（偏偏赶上不能使用远程桌面）来遥控搞定问题的艰辛。&lt;/p>
&lt;p>好了，牢骚发完，睡觉！&lt;/p></description></item><item><title>四喜丸子</title><link>https://sbabybird.github.io/p/%E5%9B%9B%E5%96%9C%E4%B8%B8%E5%AD%90/</link><pubDate>Thu, 05 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9B%9B%E5%96%9C%E4%B8%B8%E5%AD%90/</guid><description>&lt;p>今年暑假的时候，老爸过来视察我的工作，会谈始终在亲切友好的气氛下进行，双方就共同关注的话题交换了意见。&lt;/p>
&lt;p>期间谈论到饮食问题时，老爸对我在北京是否按时吃饭深切关注，并表示：“一定要吃饱、吃好！身体好才能工作好，身体是革命的本钱嘛！”以上内容纯属虚构，真实场景是，老爸问我吃饭是否合乎口味，我说饭菜都还行，就是吃不到味道能赶上老家那边小镇上“福星酒家”做的四喜丸子，深表遗憾，老爸深表同情。&lt;/p>
&lt;p>以上对话造成的直接后果是，我这次回老家休假连续吃了七天的“福星酒家”的四喜丸子（每顿都得挑着大拇哥说好吃），吃的我现在看见四喜丸子就饱了。&lt;/p></description></item><item><title>体重不足</title><link>https://sbabybird.github.io/p/%E4%BD%93%E9%87%8D%E4%B8%8D%E8%B6%B3/</link><pubDate>Wed, 04 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BD%93%E9%87%8D%E4%B8%8D%E8%B6%B3/</guid><description>&lt;p>体检结果下来了，我唯一的毛病是体重不足，这是我的老毛病了，多年来身体只有拉长，从来没有横向发展过。医生给的建议是:多进行身体锻炼。&lt;/p>
&lt;p>我记得去年寒冬的时候我咬牙坚持跑了两个月的步，结果体重不升反降，后来人家都说跑步是减肥的良药，跑步被紧急叫停!&lt;/p>
&lt;p>好吧，那还有什么锻炼身体的好项目？&lt;/p>
&lt;p>篮球已半年多没打过了，也不好组织人打，台球太休闲，摔跤太枯燥，做俯卧撑又太危险了。&lt;/p>
&lt;p>我觉得以后要是有条件的话，可以考虑改变一下工作模式，上午下地干活儿(耕地﹑施肥等)，下午编程写文档，日出而作，日落而息，男耕女织，夜不闭户，多美好啊，肯定能胖!&lt;/p></description></item><item><title>一日不练手生</title><link>https://sbabybird.github.io/p/%E4%B8%80%E6%97%A5%E4%B8%8D%E7%BB%83%E6%89%8B%E7%94%9F/</link><pubDate>Tue, 03 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%80%E6%97%A5%E4%B8%8D%E7%BB%83%E6%89%8B%E7%94%9F/</guid><description>&lt;p>最近总写一些偏向界面应用的代码，对于文件操作，字符串操作这些东西都快忘了，以至于下午想写个处理文本的程序差点儿无从下手，虽说 python 什么的好是好，咱也不能丢了 C 啊。&lt;/p></description></item><item><title>暖</title><link>https://sbabybird.github.io/p/%E6%9A%96/</link><pubDate>Mon, 02 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9A%96/</guid><description>&lt;p>突然下了一场大雪，天气一下冷了。&lt;/p>
&lt;p>换上最厚的被子，缩在被窝里看《生活大爆炸》。&lt;/p>
&lt;p>我的 eeepc 性能够弱的，一边看视频，一边打几个字都卡壳。&lt;/p></description></item><item><title>开始使用windows7</title><link>https://sbabybird.github.io/p/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8windows7/</link><pubDate>Sun, 01 Nov 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8windows7/</guid><description>&lt;p>单位机器上的 xp 已经装了 2 年了，昨天终于无法忍受越来越慢的速度（关键是 office 软件坏了，无法修复），决定重装系统，进来 win7 挺火，装一个试试看，RC 版的，可以显示中文但界面为英文，无所谓了，先试用几天再说。希望能取代 xp。&lt;/p></description></item><item><title>雨天</title><link>https://sbabybird.github.io/p/%E9%9B%A8%E5%A4%A9/</link><pubDate>Fri, 30 Oct 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%9B%A8%E5%A4%A9/</guid><description>&lt;p>下了点儿小雨，天气突然转冷，走在街上都有些冻耳朵了。&lt;/p>
&lt;p>想起孙燕姿的一首歌，忘记什么名字了，&amp;quot;雨天，想起你的生日卡片，望着你的照片…&amp;quot;，叫什么名字呢，旋律挺熟悉…&lt;/p></description></item><item><title>自言自语和语音信箱</title><link>https://sbabybird.github.io/p/%E8%87%AA%E8%A8%80%E8%87%AA%E8%AF%AD%E5%92%8C%E8%AF%AD%E9%9F%B3%E4%BF%A1%E7%AE%B1/</link><pubDate>Thu, 29 Oct 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%87%AA%E8%A8%80%E8%87%AA%E8%AF%AD%E5%92%8C%E8%AF%AD%E9%9F%B3%E4%BF%A1%E7%AE%B1/</guid><description>&lt;p>经常在美剧和好莱坞大片里看到这样的情景，一个人对着自己的车或者某样心爱的东西感情丰富地谈话，比如&amp;quot;干的不错!伙计&amp;quot;，&amp;quot;全靠你了!&amp;quot;，&amp;quot;今天天气挺好的，你说我该不该去看她？&amp;quot;等等，就好像跟某人聊天一样。&lt;/p>
&lt;p>不知道他们生活中是否也是这样，感觉怪怪的。老外有人做过统计，相当比例的人喜欢自言自语，并且认为这很正常。我想这是跟他们使用语音信箱有关。&lt;/p>
&lt;p>据说使用语音信箱是他们的老习惯了，起源于上个世纪，打电话经常没人接，打电话者听到嘟的一声然后乖乖留言，并且对着话筒&amp;quot;得不得得不得&amp;quot;聊上半天。&lt;/p>
&lt;p>也许时间长了就养成自言自语的习惯了吧。&lt;/p>
&lt;p>某段时间我也对语音留言感兴趣，可惜国内没有该服务，后来有了，可是费用贵得离谱。&lt;/p>
&lt;p>现在我使用智能手机了，装了个软件就一切搞定，在无人接听的时候软件也能帮我接电话了。&lt;/p>
&lt;p>可惜咱们都没这个习惯，一旦知道对方没在听电话便立即失去说话的兴趣，匆匆挂断。&lt;/p>
&lt;p>常常有人听到我的提示音之后以为我在调戏他而冲我发牢骚。&lt;/p>
&lt;p>所以该软件装了这么久除了我的测试录音之外，并没有接到过真正有意义的留言。&lt;/p>
&lt;p>今天我终于收到一段有意义的留言:&amp;quot;靠!真受不了你!&amp;quot;&lt;/p></description></item><item><title>开始练习</title><link>https://sbabybird.github.io/p/%E5%BC%80%E5%A7%8B%E7%BB%83%E4%B9%A0/</link><pubDate>Wed, 28 Oct 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BC%80%E5%A7%8B%E7%BB%83%E4%B9%A0/</guid><description>&lt;p>我是一个没有恒心的人，需要恒心的事情我没有坚持下来的。&lt;/p>
&lt;p>长跑﹑写字﹑外语﹑弹琴，等等这些都没有坚持下来，理由多种多样，太累了，没时间，没天分。&lt;/p>
&lt;p>这些事情我常常去想，我要是能够从开始坚持到现在，那该多好？&lt;/p>
&lt;p>前两天看了些关于时间管理方面的书，方法千变万化，工具五花八门，但核心思想只有一个&amp;mdash;&amp;mdash;有梦想，并且坚持下来。&lt;/p>
&lt;p>没有什么能够一蹴而就的，我要慢慢练习。&lt;/p></description></item><item><title>回老家休了个假</title><link>https://sbabybird.github.io/p/%E5%9B%9E%E8%80%81%E5%AE%B6%E4%BC%91%E4%BA%86%E4%B8%AA%E5%81%87/</link><pubDate>Tue, 27 Oct 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9B%9E%E8%80%81%E5%AE%B6%E4%BC%91%E4%BA%86%E4%B8%AA%E5%81%87/</guid><description>&lt;p>回老家休了个假前两天回家休息了几天，和家人团聚的感觉就是好。&lt;/p>
&lt;p>吃饭吃得香，顿顿都吃到撑。&lt;/p>
&lt;p>睡觉也睡的十分踏实，一点儿也不失眠。&lt;/p>
&lt;p>按照惯例和朋友们喝喝小酒，打打台球。&lt;/p>
&lt;p>老家民风纯朴，空气清新，我简直是不想回来。&lt;/p></description></item><item><title>终于收到google wave的激活邀请!</title><link>https://sbabybird.github.io/p/%E7%BB%88%E4%BA%8E%E6%94%B6%E5%88%B0google-wave%E7%9A%84%E6%BF%80%E6%B4%BB%E9%82%80%E8%AF%B7/</link><pubDate>Wed, 14 Oct 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%BB%88%E4%BA%8E%E6%94%B6%E5%88%B0google-wave%E7%9A%84%E6%BF%80%E6%B4%BB%E9%82%80%E8%AF%B7/</guid><description>&lt;p>终于收到 googlewave 的激活邀请!&lt;/p>
&lt;p>在我苦苦等待几个月之后，就在今天下午，我终于收到了 googlewave 的激活邀请!赶紧点击进入，由于之前已经看过了很多关于它的报道与评测，所以对界面也没有什么新鲜感了，总体感觉还不错，由于周围的朋友只有我收到了邀请，联系人列表里还空空如也，所以目前只能随便耍耍，不能充分发挥 wave 的特长&amp;mdash;&amp;ndash;在线协作交流。&lt;/p>
&lt;p>激活账户后，手里就有了 8 个邀请了，好珍贵啊，后来发现只是&amp;quot;提名&amp;quot;而非&amp;quot;邀请&amp;quot;，迅速发给好友&amp;quot;飞行鱼&amp;quot;一只，又给在 twitter 上的朋友们留了两只。&lt;/p>
&lt;p>google 这种靠邀请来刺激人好奇心的招数真是运用到了极致。&lt;/p></description></item><item><title>眼保健操</title><link>https://sbabybird.github.io/p/%E7%9C%BC%E4%BF%9D%E5%81%A5%E6%93%8D/</link><pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%9C%BC%E4%BF%9D%E5%81%A5%E6%93%8D/</guid><description>&lt;p>我引以为傲的视力下降了，由于长期盯住屏幕的缘故，导致了一百多度的近视，最近狂做眼保健操，发誓要看清我对面墙的贴纸上的字。不过不怎么有效，刚才我忍不住凑上去看了看，发现贴纸没了。&lt;/p></description></item><item><title>喝小酒</title><link>https://sbabybird.github.io/p/%E5%96%9D%E5%B0%8F%E9%85%92/</link><pubDate>Wed, 30 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%96%9D%E5%B0%8F%E9%85%92/</guid><description>&lt;p>为排解国庆假日加班的郁闷，今晚特与同事一起喝喝小酒。喝完后他们打牌，我作为牌盲，一旁观战。&lt;/p></description></item><item><title>难得糊涂</title><link>https://sbabybird.github.io/p/%E9%9A%BE%E5%BE%97%E7%B3%8A%E6%B6%82/</link><pubDate>Tue, 29 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%9A%BE%E5%BE%97%E7%B3%8A%E6%B6%82/</guid><description>&lt;p>难得糊涂啊难得糊涂，难就难在不知道该在什么时候糊涂，什么时候装糊涂。&lt;/p></description></item><item><title>排队</title><link>https://sbabybird.github.io/p/%E6%8E%92%E9%98%9F/</link><pubDate>Mon, 28 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8E%92%E9%98%9F/</guid><description>&lt;p>我这辈子最痛恨两件事儿，一个是排队，另一个还是排队。&lt;/p>
&lt;p>可悲的是，排队是必须要面对的。取钱要排队，交费要排队，买票要排队，上车要排队，点儿背的时候上厕所也要排队。&lt;/p>
&lt;p>排队的时候，心情是焦躁不安的，是望眼欲穿的，是忍不住想骂娘又不知该骂谁的。&lt;/p>
&lt;p>这个时候唯一可以获得安慰的是你身后的队伍越来越长，而你前面的队伍越来越短。&lt;/p>
&lt;p>可是，当队伍就像便秘的大肠那样久久不能蠕动时，当你的伸长了脖子恨不得直接伸到窗口撞墙时，你还是不能怎样，大家都一样。&lt;/p>
&lt;p>以上是去银行排队有感，纯属发泄，如有雷同，那简直是巧合。&lt;/p></description></item><item><title>美好的一天</title><link>https://sbabybird.github.io/p/%E7%BE%8E%E5%A5%BD%E7%9A%84%E4%B8%80%E5%A4%A9/</link><pubDate>Sun, 27 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%BE%8E%E5%A5%BD%E7%9A%84%E4%B8%80%E5%A4%A9/</guid><description>&lt;p>尽管我经常比闹钟醒的还早，可是起床仍然依赖闹铃。&lt;/p>
&lt;p>今天是星期天，由于国庆假期的原因，今天也要照常上班，可是我的手机有点儿小聪明，周末不闹。这下可好了，我终于睡了个自然醒，我在半梦半醒之中想明白今天要上班而且闹铃不会叫我时，我惊的一下子从床上跳了起来。&lt;/p>
&lt;p>还是晚起了一个小时。洗脸刷牙堵车堵车堵车还堵车所以，迟到了，可是郁闷的事情还在后头。&lt;/p>
&lt;p>我平时几乎不迟到，偏偏今天等我到公司的时候老总已经找了我一圈了，于是赶紧去报到，可是电梯坏了，于是爬楼梯，等我爬上十层楼梯，得到一个更加郁闷的消息：“假期要加班&amp;hellip;&amp;hellip;&amp;quot;（此处窗外电闪雷鸣并伴有大风）。&lt;/p>
&lt;p>如果不是爬楼梯爬的喘不上气，我肯定要仰天长啸十分钟。&lt;/p>
&lt;p>可怜我辛苦买到的往返火车票啊，现在要退掉！&lt;/p>
&lt;p>可怜我定好的假日计划啊，现在要取消！淡定，要淡定&lt;/p></description></item><item><title>秋天打雷吗</title><link>https://sbabybird.github.io/p/%E7%A7%8B%E5%A4%A9%E6%89%93%E9%9B%B7%E5%90%97/</link><pubDate>Sat, 26 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%A7%8B%E5%A4%A9%E6%89%93%E9%9B%B7%E5%90%97/</guid><description>&lt;p>到网上搜搜“秋天打雷吗”，发现还真有人问这个问题，我来告诉你吧，答案是肯定的！&lt;/p>
&lt;p>昨晚打了大半夜的雷，对于本来就有“周末睡眠障碍”的我来说真是雪上加霜，一道道闪电把窗帘的影子投在床上，好恐怖啊。之前我也以为秋天不会打雷，直到被巨大的声音惊醒的时候我还以为有敏感词搞敏感词被敏感词了呢，靠，最近因为敏感词要举办敏感词弄得的大家都紧张兮兮的。好吧，秋天会打雷，sowhat?&lt;/p></description></item><item><title>电脑知识</title><link>https://sbabybird.github.io/p/%E7%94%B5%E8%84%91%E7%9F%A5%E8%AF%86/</link><pubDate>Fri, 25 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%94%B5%E8%84%91%E7%9F%A5%E8%AF%86/</guid><description>&lt;p>电脑知识今天在 greader 上看了一篇文章，说是掌握了这些电脑知识就可以怎样怎样，我一看，写的都是些 windows 系统的操作技巧，有些见过，有些极为偏门。&lt;/p>
&lt;p>恩，有点儿意思，我就曾经错误的以为这些 windows 技巧就是电脑知识。&lt;/p>
&lt;p>大学的时候，当老师喷着唾沫讲解进程调度时，我正在研究如何修改 win98 的启动画面，当别人抱着书学习数据结构的时候，我却把如何修改 win98 资源管理器的脚本使其可预览 mp3 文件的技巧视为珍宝。&lt;/p>
&lt;p>可是这有个屁用，现谁还用这些玩意儿？&lt;/p>
&lt;p>干活儿时搞不定问题了还得去翻书，那里面才称得上是真正的知识吧(也得看是什么书)。&lt;/p>
&lt;p>嘿嘿，说规说，我还是迅速地把这篇&amp;quot;知识&amp;quot;文章收藏了。&lt;/p></description></item><item><title>什么是_什么是_</title><link>https://sbabybird.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AF_%E4%BB%80%E4%B9%88%E6%98%AF_/</link><pubDate>Thu, 24 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AF_%E4%BB%80%E4%B9%88%E6%98%AF_/</guid><description>&lt;p>关于&amp;quot;什么是&amp;quot;在 google.com 里搜索任何带有&amp;quot;什么是&amp;quot;的关键字比如&amp;quot;什么是手机&amp;quot;，连接会立刻被&amp;quot;重置&amp;quot;，并在短时间内无法浏览任何网站，但是在 google.cn 不会这样，在百度也可以。但是后两个……我又没搜索什么不和谐的东西，干嘛扼杀俺的求知欲捏!&lt;/p></description></item><item><title>快捷键</title><link>https://sbabybird.github.io/p/%E5%BF%AB%E6%8D%B7%E9%94%AE/</link><pubDate>Wed, 23 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid><description>&lt;p>快捷键说实话我真的很担心未来计算机会像某些专家鼓吹的那样，完全没有键盘，而是通过语音或者眼神和人进行交流。我觉得可以没有鼠标，但是不能没有键盘。&lt;/p>
&lt;p>记得大学的时候，有一次我的显示器坏了，我只好凭记忆的感觉通过对键盘的操作来听歌﹑&amp;quot;看&amp;quot;电影等，大概过了一个星期，发现即使没有显示器也可以做很多事情，这件事儿让我对键盘产生了很严重的偏爱。&lt;/p>
&lt;p>我喜欢去记各个程序的快捷键，不是故意去记的，而是下意识的。&lt;/p>
&lt;p>无论是简单的快速搜索还是宏替换，再或者是复杂的组合按键我都烂熟于胸。&lt;/p>
&lt;p>还有比较偏门的，比如 xp 关机时按 shift 会出现休眠按钮等。&lt;/p>
&lt;p>所已我一想到快捷键脑子里就会飞过一片一片的写着按键的字符串，都是对各个软件的快捷操作，擦都擦不掉。能用键盘操作的还是用键盘吧，否则总会有一只手徘徊在键盘和鼠标之间(上网斗地主除外)，长此以往手腕真会受不了。&lt;/p>
&lt;p>所以，我特别喜欢的软件都是提供了强大的快捷键功能的，totalcommander 方便的操作使人上瘾，gmail 和 greader 里的快捷键让人中毒，vim 咒语般的命令叫人忘记鼠标的存在。&lt;/p>
&lt;p>就说这么多吧，快到家了。&lt;/p></description></item><item><title>体检</title><link>https://sbabybird.github.io/p/%E4%BD%93%E6%A3%80/</link><pubDate>Tue, 22 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BD%93%E6%A3%80/</guid><description>&lt;p>体检今天是每年一度的例行体检，一切正常。&lt;/p>
&lt;p>各个零件都正常，医生们也都正常，还像往常那样懈怠。&lt;/p>
&lt;p>耳鼻喉科的大夫是我见到的唯一一位比我还偏执的人，先是抱怨办公室被人换了，体检系统无法登录，然后又觉得鼠标放的不是地方，掘起屁股找了半天鼠标，然后发现台灯的线和条码扫描器的线缠绕在一起，全部解开后才满意地叫我坐过去，最后发现我的椅子摆的不正，让我像小学生上课那样坐好才行。&lt;/p>
&lt;p>花了老半天收拾好之后，就草草看了两眼:&amp;quot;下一个!&amp;quot;。&lt;/p>
&lt;p>ps:我的视力果然下跌了。&lt;/p></description></item><item><title>听歌的心情</title><link>https://sbabybird.github.io/p/%E5%90%AC%E6%AD%8C%E7%9A%84%E5%BF%83%E6%83%85/</link><pubDate>Mon, 21 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%90%AC%E6%AD%8C%E7%9A%84%E5%BF%83%E6%83%85/</guid><description>&lt;p>听歌的心情偶尔听了听朋友的 mp3，发现是经典老歌大放送，最喜欢听老歌了，马上将其全部考走(没用剪切，不像某些考毛片的学生)。&lt;/p>
&lt;p>有些歌相当长的时间没听过了，有些上次听的时候还在用盒带。&lt;/p>
&lt;p>朋友向我抱怨说现在的随身听容量太大，选歌忒麻烦，跳来跳去跳不到心坎上。&lt;/p>
&lt;p>我也有此感受，我平时干活儿时一般都开着 foobar，列表里四五千首歌，几乎没有一首能耐着性子听完，于是我设置了全局热键，一边编码一边换歌，时间长了练就了只要听三秒钟前奏马上就听出是什么歌的本领，要是有此类比赛，我肯定能获奖。&lt;/p>
&lt;p>为什么就没有耐心听完一首呢，为什么呢？&lt;/p>
&lt;p>技术的前进加上人的浮躁!以前听磁带的时候，想跳下一曲得按快进，马达呼呼跑半天，既费时间又费电(那时买不起南孚)，还不能保证刚好到下一曲(后来出的高级货具备自动检测的能力就另当别论了)。&lt;/p>
&lt;p>那个时候我练出来的就是另一个本领了，用铅笔转磁带!&lt;/p>
&lt;p>既省电又准确，所以我就经常一边听歌一边拿笔转另一盒磁带。&lt;/p>
&lt;p>现在好了，想听什么直接在线就听了，遇见喜欢的直接就下载了，特别喜欢的就下载无损压缩的，再也不去逛碟店了。&lt;/p>
&lt;p>然后在成千上万的曲目里跳来跳去。&lt;/p>
&lt;p>可是，我听歌的心情那里去了？&lt;/p></description></item><item><title>还是说说吧</title><link>https://sbabybird.github.io/p/%E8%BF%98%E6%98%AF%E8%AF%B4%E8%AF%B4%E5%90%A7/</link><pubDate>Sun, 20 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%BF%98%E6%98%AF%E8%AF%B4%E8%AF%B4%E5%90%A7/</guid><description>&lt;p>尽管朋友们露出鄙夷的目光，《建国大业》这部片子，我今天还是去看了。&lt;/p>
&lt;p>片子净长 133 分钟（据不可靠消息说本来长度可达 4 个小时），加上开头有 20 分钟左右的广告，让我坐了两个半小时吧。虽然开场之前大家都去放水了但影片结束后电影院的厕所还是堵了个水泄不通。&lt;/p>
&lt;p>感受呢，还行。演员阵容不是一般的强大，演员的演技实力也不是一般的强大，所以单纯从电影的角度来说，感觉应该是一部很不错的电影，所有人都很卖力气。&lt;/p>
&lt;p>但是感觉时间上还是有点儿赶，故事讲的很跳跃速度很快，明星们冒个泡亮一下，连个沙发板凳都还没抢，就进入下一个环节了。&lt;/p>
&lt;p>看的时候总是想跟小时候看的那个《开国大典》来比对，《开国大典》看了 n 遍了，很多情节还是记忆犹新，比如吃面没带钱，解放军砍总统府的棋，登城楼时往上爬台阶的那个长镜头。&lt;/p>
&lt;p>这个《建国大业》里面还是有些笑点的，安排的还算轻松，比如冯巩老抢不上发言，女代表让郭德纲改底片，许三多报告发现前面的地主大院不容易攻打请求炮火支援，结果葛优一看，发现这是到了德胜门（好像是德胜门，管它哩）。&lt;/p>
&lt;p>最后，这部片子可看，其他人说了屁也不算，何必让别人的垃圾评论影响自己的观点哩。&lt;/p>
&lt;p>ps：电影而已，外籍演员的片子你还少看了？&lt;/p></description></item><item><title>手机没电了</title><link>https://sbabybird.github.io/p/%E6%89%8B%E6%9C%BA%E6%B2%A1%E7%94%B5%E4%BA%86/</link><pubDate>Sat, 19 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%89%8B%E6%9C%BA%E6%B2%A1%E7%94%B5%E4%BA%86/</guid><description>&lt;p>手机没电了本打算在路上写今天的博客，结果手机一个劲儿地提醒电量低。&lt;/p>
&lt;p>我看看能不能发出此篇。&lt;/p>
&lt;p>我的手机配了两块电池，一块是原装的，另一块也是原装的。&lt;/p>
&lt;p>在轻度使用的情况下每块电池可以坚持一周左右，最近使用过度，连三天都很勉强。&lt;/p>
&lt;p>本来我家里有座充，公司有旅行充，但是现在在路上，没电了。&lt;/p></description></item><item><title>吹吹灰</title><link>https://sbabybird.github.io/p/%E5%90%B9%E5%90%B9%E7%81%B0/</link><pubDate>Fri, 18 Sep 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%90%B9%E5%90%B9%E7%81%B0/</guid><description>&lt;p>吹吹灰我的博客三个多月没更新了，我估计上面已经开始结蜘蛛网了吧。&lt;/p>
&lt;p>说是没时间更新显得太娇情了，不过确实是没时间。&lt;/p>
&lt;p>这段时间以来一直在忙同一个项目，全部的身心都投入到上面去了，根本没有精力更新这里，连 QQ﹑MSN 等都一概不上了。&lt;/p>
&lt;p>好在现在终于进入了一个新的阶段，我觉得也需要每天换换脑子，思考点儿别的东西，或许对工作质量有一屁股的促进作用。于是我又想到了写博客(为什么要说又呢)，那就到这里吹吹灰尘吧，像往常一样，同时发送到 livespace 和 blogspot。&lt;/p>
&lt;p>说点儿啥呢？对了，我开始用 twitter 了，人的思想真是奇怪，在 twitter 没有被封掉之前一年多我就注册了，但是根本不用它，等到 twitter 被封了之后却又非常想在上面发发牢骚。&lt;/p>
&lt;p>虽然不能正常登录，对于我等爱钻研爱学习的人到也增添了不少情趣。&lt;/p>
&lt;p>这就像是和好不容易追的姑娘交往一样有意思(屁话)。&lt;/p>
&lt;p>好吧我承认我不会像沉迷于 google 那样沉迷于 twitter(什么你还有 google 瘾)，至少不能耽误干活儿，我只是渐渐感到 twitter 才是最好的新闻来源(屁话)。&lt;/p>
&lt;p>还有就是我在手机安装了 gravity 这个 twitter 客户端，这是个很容易让人中毒的软件，请不要误会，此毒既不是医学上的也不是计算机病毒。&lt;/p>
&lt;p>先说这么多吧，经过这段时间的繁忙工作，我感觉我已经有了轻微的精神分裂迹象，看看上面的文字就能感受的到，好吧。&lt;/p></description></item><item><title>壁纸</title><link>https://sbabybird.github.io/p/%E5%A3%81%E7%BA%B8/</link><pubDate>Mon, 20 Jul 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A3%81%E7%BA%B8/</guid><description>&lt;p>桌面壁纸有嘛用？&lt;/p>
&lt;p>整天看到人乐此不疲地换来换去，唧唧歪歪，真是还躁。&lt;/p>
&lt;p>我的桌面壁纸就是黑乎乎的一片，上面散落着几行咒语般的 VI 命令。&lt;/p>
&lt;p>擦!误把这里当推特了&lt;/p></description></item><item><title>赶</title><link>https://sbabybird.github.io/p/%E8%B5%B6/</link><pubDate>Sat, 13 Jun 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B5%B6/</guid><description>&lt;p>赶!回来的时候，用自动售票机买的票，这机器有点儿缺心眼，认为我是短跑高手，给了我一张 5 分钟后就发车的票，看完之后我马上汗就下来了，一溜小跑，要说还是天津人民素质高，不仅不在乎我夹塞进站还帮我查询检票口的号码，我一路狂奔到车上，还没站稳，车就开动了!&lt;/p></description></item><item><title>俺又要到天津出差啦</title><link>https://sbabybird.github.io/p/%E4%BF%BA%E5%8F%88%E8%A6%81%E5%88%B0%E5%A4%A9%E6%B4%A5%E5%87%BA%E5%B7%AE%E5%95%A6/</link><pubDate>Fri, 12 Jun 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BF%BA%E5%8F%88%E8%A6%81%E5%88%B0%E5%A4%A9%E6%B4%A5%E5%87%BA%E5%B7%AE%E5%95%A6/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E4%BF%BA%E5%8F%88%E8%A6%81%E5%88%B0%E5%A4%A9%E6%B4%A5%E5%87%BA%E5%B7%AE%E5%95%A6/20090612.jpg" alt="Featured image of post 俺又要到天津出差啦" />&lt;p>上次的津门半日游一点也不过瘾，这次估计再待半天。&lt;/p></description></item><item><title>恐怖的超市</title><link>https://sbabybird.github.io/p/%E6%81%90%E6%80%96%E7%9A%84%E8%B6%85%E5%B8%82/</link><pubDate>Thu, 11 Jun 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%81%90%E6%80%96%E7%9A%84%E8%B6%85%E5%B8%82/</guid><description>&lt;p>下班后去超市买东西，面对如此拥挤的人群，我感到大脑一片空白。&lt;/p></description></item><item><title>买了个U3</title><link>https://sbabybird.github.io/p/%E4%B9%B0%E4%BA%86%E4%B8%AAu3/</link><pubDate>Wed, 10 Jun 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B9%B0%E4%BA%86%E4%B8%AAu3/</guid><description>&lt;p>买了个 U3 鉴于东西放到网上太不安全，如果把资料整理到网上，比如说 blog，说不定哪天就灰飞烟灭了(确切的说是被众所周知了)，我觉得有必要将自己的知识管理系统转移到 U 盘上了。&lt;/p>
&lt;p>现在 U 盘已经白菜价了，随便选了几款，最终选择了 SanDisk 的 U3，因为附带了 U3 软件，所以据说可以将常用软件随身携带，还有安全保证。&lt;/p>
&lt;p>可是这个 U3 软件我刚用了半天就把它卸载了，原因是:首先它不支持 Linux，其次里面很多可移动的软件都是收费的，再次，对于禁用了自动播放功能的机器来说，操作是很麻烦的。&lt;/p>
&lt;p>好了，我现在把它当普通盘来用了，准备在上面装个轻量级的 Linux 发行版，比如 Puppy，然后再建个 wiki，然后再慢慢把东西整上来。&lt;/p></description></item><item><title>看见了彩虹</title><link>https://sbabybird.github.io/p/%E7%9C%8B%E8%A7%81%E4%BA%86%E5%BD%A9%E8%99%B9/</link><pubDate>Tue, 09 Jun 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%9C%8B%E8%A7%81%E4%BA%86%E5%BD%A9%E8%99%B9/</guid><description>&lt;p>第一次在北京看到了彩虹，手机拍的，不清楚。&lt;/p></description></item><item><title>还是难舍firefox</title><link>https://sbabybird.github.io/p/%E8%BF%98%E6%98%AF%E9%9A%BE%E8%88%8Dfirefox/</link><pubDate>Fri, 05 Jun 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%BF%98%E6%98%AF%E9%9A%BE%E8%88%8Dfirefox/</guid><description>&lt;p>用了两个月的 GoogleChrome 浏览器之后，现在我又换回 Firefox 了，虽然 Chrome 很快，启动很快、网页加载很快、js 脚本飞快，但是还是无法替代我的 Firefox。&lt;/p>
&lt;p>首先就是在页面的渲染效果上 chrome 没有 firefox 好看，尤其是对于中文页面的渲染，再有就是 firefox 拥有无比强大的插件系统，与其说舍弃不了 firefox 倒不如说是舍不得那些插件，delicious、greasemonkey、tabmix、ubiquity 等等都是绝世好插件，给我的浏览带来完美的体验。&lt;/p>
&lt;p>chrome 也是很好的浏览器，从刚发布时的粗糙简陋到现在的稳定、高效、人性化，进步非常快，记得 chrome 刚发布的时候我立即就安装了，也立即就卸载了，太简陋了（也许是简约）。&lt;/p>
&lt;p>后来 2.0 的时候我又忍不住安装了，这次提高很多，渲染中文字体也比以前好看，速度飞快，于是我坚持用了两个月，期间忍受着没有 delicious 书签的痛苦。&lt;/p>
&lt;p>现在我又换回到 firefox 了，虽然启动慢点儿，内存占用多点儿，可是用起来真是很可手，听说马上要出 3.5 了，拭目以待。&lt;/p></description></item><item><title>博客不能访问了</title><link>https://sbabybird.github.io/p/%E5%8D%9A%E5%AE%A2%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E4%BA%86/</link><pubDate>Wed, 03 Jun 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8D%9A%E5%AE%A2%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E4%BA%86/</guid><description>&lt;p>我有两个同步更新的 blog，一个在 Google 的 blogspot，一个在微软的 livespaces，blogspot 不能访问很正常，可是从昨天开始，连放在 livespaces 的也不能访问了，真不知到抽的哪阵风。GFW，我叉你老叉的叉叉叉。&lt;/p></description></item><item><title>发型</title><link>https://sbabybird.github.io/p/%E5%8F%91%E5%9E%8B/</link><pubDate>Sun, 31 May 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8F%91%E5%9E%8B/</guid><description>&lt;p>小时候的语文课里有一段对鲁迅先生头发的描述：&amp;quot;头发约莫一寸长，显然好久没剪了，却一根一根精神抖擞地直竖着。&amp;quot;&lt;/p>
&lt;p>能留出这种发型来，光有好的洗发水是不够的，关键是发质，我的头发就是这样。&lt;/p>
&lt;p>我的头发现在两寸长都有，虽然大部分都乖乖趴着，但是一觉醒来之后，总是有几小撮不合时宜地直竖着，任你嗻哩还是魔丝都无法把他们撂倒。&lt;/p>
&lt;p>每天早晨洗漱完毕到梳头这一环节时总是想起刚才那段对鲁迅的描述，然后顶着翘得像刺猬般的发型去狂奔。&lt;/p></description></item><item><title>扛包</title><link>https://sbabybird.github.io/p/%E6%89%9B%E5%8C%85/</link><pubDate>Sun, 31 May 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%89%9B%E5%8C%85/</guid><description>&lt;p>媳妇带着孩子过来视察工作了，所谓兵马未动粮草先行，来之前先把小孩子用的东西打了个大包裹给寄了过来。&lt;/p>
&lt;p>也不知是放假的原因还是快递公司的车没有动车组快，她们已经到两天了，我今天才收到包裹。一个很大的包裹，被快递公司在外面又包了一层蛇皮袋，然后又用透明胶带在外面缠了几圈，再加上一层土，看起来让我想到了民工兄弟。&lt;/p>
&lt;p>就这大包，下班后我往肩上一扛，一股劳动者的优越感油然而生，用媳妇儿的话说，我要是手里再拿只山寨手机，然后把喇叭外放打开，播放一曲高亢的&amp;quot;月亮之上&amp;quot;，就完美了!&lt;/p>
&lt;p>PS：我也是个民工，此篇没有鄙视我们民工的意思。&lt;/p></description></item><item><title>接站</title><link>https://sbabybird.github.io/p/%E6%8E%A5%E7%AB%99/</link><pubDate>Fri, 29 May 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8E%A5%E7%AB%99/</guid><description>&lt;p>第一次到火车站接人。&lt;/p>
&lt;p>需要买站台票，售票员会要求凭火车票购买站台票，但是你说是来接人的，她就会毫不犹豫地卖给你站台票了，我感觉这是个漏洞。&lt;/p>
&lt;p>到了站台才发现我来的实在是早了点儿，火车还有一个多小时才到站，接人的地方又不是候车室，别说椅子了，连个马扎都没有。&lt;/p>
&lt;p>我干脆一屁股坐在了冰凉的地板上，怀着焦急的心情，等待火车的到来。&lt;/p></description></item><item><title>津门一日游</title><link>https://sbabybird.github.io/p/%E6%B4%A5%E9%97%A8%E4%B8%80%E6%97%A5%E6%B8%B8/</link><pubDate>Wed, 27 May 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%B4%A5%E9%97%A8%E4%B8%80%E6%97%A5%E6%B8%B8/</guid><description>&lt;p>今天去天津出了一趟差。&lt;/p>
&lt;p>感觉天津是个不错的地方，不愧是“上有天堂下有天津”（有这句话吗？）。&lt;/p>
&lt;p>首先感受了一下中国最快的列车，时速达 330 的城际特快，椅子都没有坐热都已经到了天津站。&lt;/p>
&lt;p>然后就听到了地道的天津方言，虽然是第一次到天津，但感觉很亲切，倍儿舒服。出租车司机话也很多，天南地北都挺能侃，和北京的出租司机有一拼。&lt;/p>
&lt;p>下了车就奔公司分舵去了，那里的同事也十分热情，简单吃过饭，就去办公事。&lt;/p>
&lt;p>然后就是打车去火车站，又是椅子没做热就到了北京。&lt;/p>
&lt;p>所以，虽然是去了一趟天津，基本上也没啥感受，就是感觉那儿人挺不错，环境也不错，至少比北京强，还有就是感叹城际特快的速度，要是以后坐火车都像这样，那航空公司肯定要关张了。&lt;/p></description></item><item><title>无题</title><link>https://sbabybird.github.io/p/%E6%97%A0%E9%A2%98/</link><pubDate>Tue, 26 May 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%97%A0%E9%A2%98/</guid><description>&lt;p>朋友婚宴，多喝了三五杯。明日出差，一路顺风!&lt;/p></description></item><item><title>郁闷的紧急任务</title><link>https://sbabybird.github.io/p/%E9%83%81%E9%97%B7%E7%9A%84%E7%B4%A7%E6%80%A5%E4%BB%BB%E5%8A%A1/</link><pubDate>Mon, 25 May 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%83%81%E9%97%B7%E7%9A%84%E7%B4%A7%E6%80%A5%E4%BB%BB%E5%8A%A1/</guid><description>&lt;p>郁闷的紧急任务什么样的任务是令人郁闷的泥？&lt;/p>
&lt;p>比如说，邻近下班的时候，老总紧急抠你，递给你一张小纸条，然后气喘吁吁的对你说:&amp;quot;实在是安排不开了，你赶紧按照这个意思做个 PPT，明天上午十点钟给客户演示一下。&amp;quot;&lt;/p>
&lt;p>你接过纸条一看，发现上面只有几行小字，比一条手机短信还短，更郁闷的是，上面的内容比较生辟，大家都没搞过的那种。&lt;/p>
&lt;p>你长叹一声，心想，为什么总是等屎到了屁股门口才上茅房!&lt;/p>
&lt;p>我今天就遇到了上述情况，多亏了 Google 的搜索和维基百科，我抽了三根烟才把 PPT 做完。&lt;/p></description></item><item><title>左撇子</title><link>https://sbabybird.github.io/p/%E5%B7%A6%E6%92%87%E5%AD%90/</link><pubDate>Sat, 23 May 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%B7%A6%E6%92%87%E5%AD%90/</guid><description>&lt;p>作为一个天生的左撇子，我除了写字用右手之外，拿筷子，切菜，投篮，羽毛球，乒乓球，台球，包括用鼠标都是用左手。&lt;/p>
&lt;p>其实最早的时候我连写字都是用左手的（右手只会扔板砖），只是后来被家长逼着换成了右手，这样直接导致的一个后果是，我的字写的很烂，除了自己的名字写的还勉强能看之外，其他汉字都写得潦草的像鸡挠一样。&lt;/p>
&lt;p>平时也还有很多郁闷的事儿，比如我坐地铁，左手拿着卡在通道上一刷，嗒的一声，我正前方的门没开，左侧通道的门开了，还得蹬蹬蹬转过去。&lt;/p>
&lt;p>为什么想起左撇子这件事儿呢，因为今天考试的时候需要拿起多年不用的笔来写一篇论文，论文写的烂不说，关键是字写得实在是不堪入目，想来想去除了怪我练字不够努力之外，也只能怪我当时没有坚持用左手写字了，只是，令人尴尬的是，我左手写的比右手写的还难看。&lt;/p></description></item><item><title>球雨</title><link>https://sbabybird.github.io/p/%E7%90%83%E9%9B%A8/</link><pubDate>Thu, 21 May 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%90%83%E9%9B%A8/</guid><description>&lt;p>早在去年的这个时候，我们就发过牢骚，只要是我们想打篮球的时候，必然要下雨。&lt;/p>
&lt;p>今天再次证明了这一点。每次我们兴致勃勃地带好球衣，穿上球鞋，给篮球打满气，这一切收拾停当之后，刚刚还晴朗的天空突然就飘来朵朵乌云，半个时辰之内必有甘霖降落。&lt;/p>
&lt;p>可是如果我们仅仅是说好了打球然后又因故取消的话，这场雨就不下了，可见，求雨还得心诚才行啊！&lt;/p></description></item><item><title>该不该qq</title><link>https://sbabybird.github.io/p/%E8%AF%A5%E4%B8%8D%E8%AF%A5qq/</link><pubDate>Wed, 20 May 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%AF%A5%E4%B8%8D%E8%AF%A5qq/</guid><description>&lt;p>这两天我的系统特别慢，这归功于 office，由于工作需要，最近我每天都需要打开大量的 word 文档，而这个时候我的机器就有些吃不消了，基本上打开个 1m 左右的文档大概需要一袋烟的功夫，这样的文件要是同时打开个 4 ～ 5 个，那我的机器就干不了别的了。&lt;/p>
&lt;p>于是我就尽量减少并行运行的程序，并把占用大量内存的程序更换成占用少些的程序，比如把 firefox 换成了 Googlechrome，后来我干脆把 qq、msn 统统关掉了，因为我发现根本没时间聊天。&lt;/p>
&lt;p>但是问题就来了，以前我的 qq 是整天在线的，qq 的状态就显示了我的工作状态，我妈每天都上 qq 看一看，有时是为了打牌，有时就仅仅是看看我在不在线，也不跟我聊天，看看就踏实。&lt;/p>
&lt;p>我刚一个上午没上线就打电话问我，“什么情况？为什么 qq 不在线？”，我解释一番。&lt;/p>
&lt;p>今天又有朋友发短信过来表示关心：“这几天上线这么少，有事儿吗？”看来，qq 真的很重要&lt;/p></description></item><item><title>有意思的wolframalpha</title><link>https://sbabybird.github.io/p/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84wolframalpha/</link><pubDate>Tue, 19 May 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84wolframalpha/</guid><description>&lt;p>wolframalpha 上线了，据说是个 Google 杀手，而且是基于“语义”的搜索我试用了一下，感觉挺有意思，本来按照我的理解是搜索“黄河有多长”就能直接给出答案，可是人家目前还不支持中文，又听说他的数学能力不是一般的强，于是输入了一个一元二次方程 y=2x^2+3x，竟然直接把函数曲线画出来了看了学生们以后做作业不用那么麻烦了&lt;/p></description></item><item><title>戴着耳机干活儿</title><link>https://sbabybird.github.io/p/%E6%88%B4%E7%9D%80%E8%80%B3%E6%9C%BA%E5%B9%B2%E6%B4%BB%E5%84%BF/</link><pubDate>Mon, 18 May 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%B4%E7%9D%80%E8%80%B3%E6%9C%BA%E5%B9%B2%E6%B4%BB%E5%84%BF/</guid><description>&lt;p>我以前写代码的时候总是习惯戴着耳机写，代码的风格总是跟着音乐的风格，一会儿古典一会儿流行，要是哪天赶上一段二泉映月之类的，写出的代码立即就透露出点点的哀伤，就连变量的命名也变得婉转起来。&lt;/p>
&lt;p>当然了，如果碰上不好的音乐，写出的代码总是 bug 特别多！所以我过一阵子就会清理一下硬盘上的 mp3，把那些影响代码质量的音乐彻底删除，比如黑色星期天之类的。&lt;/p>
&lt;p>总之，音乐就像是我的粮食，一天没听音乐就像是没吃饭似的。&lt;/p>
&lt;p>不过，要是按刚才这句话的定义，我已经个把月没吃饭了，最近有个项目搞得我压力特别大，耳机也懒得戴了，每天就是挣扎在一堆文档中间。&lt;/p>
&lt;p>前天吃饭时突然得到同事的点醒，才意识到我还得把耳机戴上，于是乎，今天的工作就十分顺利，事情也很流畅，我仿佛又找到突然间的自我了。&lt;/p></description></item><item><title>发现一款vim代码段补全的插件--snipMate</title><link>https://sbabybird.github.io/p/%E5%8F%91%E7%8E%B0%E4%B8%80%E6%AC%BEvim%E4%BB%A3%E7%A0%81%E6%AE%B5%E8%A1%A5%E5%85%A8%E7%9A%84%E6%8F%92%E4%BB%B6--snipmate/</link><pubDate>Sun, 17 May 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8F%91%E7%8E%B0%E4%B8%80%E6%AC%BEvim%E4%BB%A3%E7%A0%81%E6%AE%B5%E8%A1%A5%E5%85%A8%E7%9A%84%E6%8F%92%E4%BB%B6--snipmate/</guid><description>&lt;p>作为一个工具狂人，我对 Vim 的喜爱是天生的。喜欢 Vim 的简单、高效、朴素、专业&amp;hellip;。所以 Vim 成了我的主编辑器，无论是在 Linux 下还是 XP 下都能帮我高效地完成工作。（当然，Visual Studio 才是我混饭吃的主要工具，不过这不是今天要说的重点）&lt;/p>
&lt;p>对于使用 Vim 的人来说，大部分的工作是用 Vim 来编辑代码，这么一来代码的自动补全就很重要了。虽然使用 SuperTab、C-Support 等插件之后 Vim 的代码补全功能有了很大提高，但是离 VS 下面的 VSAssistant 还是有一定的距离的，比如对于代码块的补全就不是很方便。&lt;/p>
&lt;p>今天我发现的这个叫做 snipMate 的插件很好的弥补了这一点。这个插件再次证明了 Vim 是无所不能的，也说明了聪明人要是懒起来真的可以很过分。&lt;/p>
&lt;p>snipMate 的下载地址：&lt;a class="link" href="http://www.vim.org/scripts/script.php?script_id=2540" target="_blank" rel="noopener"
>http://www.vim.org/scripts/script.php?script_id=2540&lt;/a>&lt;/p>
&lt;p>下载解压到&lt;code>vimfiles&lt;/code>目录即可，然后打开 Vim，试着编辑一个 C 文件，比如&lt;code>hello.c&lt;/code>，输入&lt;code>main&lt;/code>然后按 Tab 键，你会发现代码变成了下面这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>先输入 for 再按 Tab 键：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再按 Tab 键，光标还会自动跳跃到 count、i、code 上，以方便编写自己的代码。snipMate 同样也有 if、while、define 等常用的片段补全。&lt;/p>
&lt;p>当然了，snipMate 是支持各种语言的补全的，比如 Python、HTML、Java 等等。&lt;/p>
&lt;p>最后，最重要的，就是 snipMate 支持自定义补全，语法也很简单，通过编辑配置文件可以很方便地定义自己的自动片段补全。&lt;/p>
&lt;p>再来一段演示视频，看完后就马上去下载安装吧！&lt;a class="link" href="http://www.vimeo.com/3535418" target="_blank" rel="noopener"
>演示视频链接&lt;/a>&lt;/p></description></item><item><title>关机倒计时ahk脚本</title><link>https://sbabybird.github.io/p/%E5%85%B3%E6%9C%BA%E5%80%92%E8%AE%A1%E6%97%B6ahk%E8%84%9A%E6%9C%AC/</link><pubDate>Wed, 22 Apr 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E6%9C%BA%E5%80%92%E8%AE%A1%E6%97%B6ahk%E8%84%9A%E6%9C%AC/</guid><description>&lt;p>最近习惯在晚上听着音乐或相声、评书睡觉，但电脑总是忘记关，于是使用 Windows 的&lt;code>shutdown -s -t&lt;/code>命令来进行倒计时关机，但是我还嫌这样麻烦，因为要按多次键，还要输入命令，于是就写了下面的 AHK 脚本，运行后只要按下 Windows 键 + S 键即弹出一个输入框，输入 3600 即一个小时，到时候就自动关机啦。后来觉得有取消关机的可能，就加了一个判断，到时候点击取消的话，就放弃关机了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">#s::&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">InputBox&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">关机倒计时&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">请输入一个时间（单位是秒）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="n">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">loop&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">A_Index&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">break&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">sleep&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="n">time&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nv">A_Index&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">ToolTip&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">剩余：&lt;/span>&lt;span class="nv">%count%&lt;/span>&lt;span class="err">秒关机
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">ToolTip&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">MsgBox&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">33&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">关机倒计时&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">定时关机的时间到了，确定要关闭计算机吗？
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="se">`n`n&lt;/span>&lt;span class="err">此框&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="err">秒内自动确定&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">IfMsgBoxCancel&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">MsgBox&lt;/span> &lt;span class="err">取消了关机
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">else&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Shutdown&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">return&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>原来如此</title><link>https://sbabybird.github.io/p/%E5%8E%9F%E6%9D%A5%E5%A6%82%E6%AD%A4/</link><pubDate>Wed, 15 Apr 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8E%9F%E6%9D%A5%E5%A6%82%E6%AD%A4/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%8E%9F%E6%9D%A5%E5%A6%82%E6%AD%A4/20090415.jpg" alt="Featured image of post 原来如此" />&lt;p>同事传来一张图片，看了之后茅塞顿开，简直无法比喻了。&lt;/p></description></item><item><title>试用Google music的泡泡选歌功能</title><link>https://sbabybird.github.io/p/%E8%AF%95%E7%94%A8google-music%E7%9A%84%E6%B3%A1%E6%B3%A1%E9%80%89%E6%AD%8C%E5%8A%9F%E8%83%BD/</link><pubDate>Sun, 29 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%AF%95%E7%94%A8google-music%E7%9A%84%E6%B3%A1%E6%B3%A1%E9%80%89%E6%AD%8C%E5%8A%9F%E8%83%BD/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E8%AF%95%E7%94%A8google-music%E7%9A%84%E6%B3%A1%E6%B3%A1%E9%80%89%E6%AD%8C%E5%8A%9F%E8%83%BD/20090329.JPG" alt="Featured image of post 试用Google music的泡泡选歌功能" />&lt;p>试用 Googlemusic 的泡泡选歌功能，可根据节奏和音色等属性选歌，最爽的是可以根据年代选歌。从我这张截图上可以看出我最爱听老歌。网址：http://www.google.cn/music/songscreener&lt;/p></description></item><item><title>if you want me</title><link>https://sbabybird.github.io/p/if-you-want-me/</link><pubDate>Fri, 27 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/if-you-want-me/</guid><description>&lt;img src="https://sbabybird.github.io/p/if-you-want-me/20090327.jpg" alt="Featured image of post if you want me" />&lt;p>nan&lt;/p></description></item><item><title>就不说这是啥</title><link>https://sbabybird.github.io/p/%E5%B0%B1%E4%B8%8D%E8%AF%B4%E8%BF%99%E6%98%AF%E5%95%A5/</link><pubDate>Fri, 27 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%B0%B1%E4%B8%8D%E8%AF%B4%E8%BF%99%E6%98%AF%E5%95%A5/</guid><description>&lt;p>呵呵&lt;/p></description></item><item><title>我是怎样进行知识管理的</title><link>https://sbabybird.github.io/p/%E6%88%91%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9B%E8%A1%8C%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E7%9A%84/</link><pubDate>Thu, 26 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9B%E8%A1%8C%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E7%9A%84/</guid><description>&lt;p>我有个很大的毛病，就是爱好学习，有很强的求知欲。&lt;/p>
&lt;p>我觉得主要的原因是好奇心太强，尤其是对于技术方面，恨不得什么都能掌握，后来发现那是不可能的。&lt;/p>
&lt;p>但是我还是很喜欢搜集各方面的知识资料，总以为以后有时间会用到。&lt;/p>
&lt;p>开始时我喜欢胡乱放文件，一些技术指南、一些能力技巧、一些文档秘籍等等，这些东西有些是从网络上获取的，有的是自己亲自总结的，都是很值得收藏的玩意儿，我把这些看似有用的东西一股脑地扔进硬盘。&lt;/p>
&lt;p>我的硬盘越来越满，想找的东西越来越难以从堆积的资料中翻出来。&lt;/p>
&lt;p>直到有一天我发现如果一份资料在用到的时候找不到，那就等于没存，甚至还不如不存，困惑了一段时间后，通过网络搜索第一次知道了“个人知识管理”这个“东西”。tobecontinue&lt;/p></description></item><item><title>吃饼</title><link>https://sbabybird.github.io/p/%E5%90%83%E9%A5%BC/</link><pubDate>Tue, 24 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%90%83%E9%A5%BC/</guid><description>&lt;p>晚饭喝粥吃饼，就在离公司不远的粥铺。&lt;/p>
&lt;p>这家的大麦粥很合我的口味，提供的主食里有一种面饼，拿辣椒、鸡蛋、面粉混在一起煎制而成，曰：尖椒饼。&lt;/p>
&lt;p>吃起来绵软可口，十分鲜美，是我每次必点的主食。&lt;/p>
&lt;p>美中不足就是份量太少，每次总被我三口两口吃完，于是我今天就一次点了两份，服务员好像很不解，瞪着眼睛有跟我确认两遍，然后转过身吐了吐舌头冲别服务员做了鬼脸。&lt;/p>
&lt;p>她心想，没看出来，这家活这么瘦还这么能吃。&lt;/p>
&lt;p>我心想，谁能吃啦？你们也不觉的害臊，这么少的东西也好意思端上来。&lt;/p>
&lt;p>不过，我还是假装只吃了一张饼，那一份打包了在路上吃了…&lt;/p></description></item><item><title>重新启用工作日志</title><link>https://sbabybird.github.io/p/%E9%87%8D%E6%96%B0%E5%90%AF%E7%94%A8%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/</link><pubDate>Mon, 23 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%87%8D%E6%96%B0%E5%90%AF%E7%94%A8%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/</guid><description>&lt;p>有几个月没认真写工作日志了，费劲搭建的 trac 平台也逐渐荒芜。&lt;/p>
&lt;p>最近的工作效率一直不高，系统太慢，硬盘太乱，内存不足，桌面难看…狠了狠心还是没有重做系统，准备工作太多，要装得软件太多，到最后还是一样。&lt;/p>
&lt;p>于是就本着磨刀不误砍柴工的精神，整理了一下文件夹，吹了吹 trac 平台的灰尘，开始好好写工作日志。&lt;/p>
&lt;p>以后要坚持每天清理收件箱，每天早晨安排一天的事务，并注意每天回顾。&lt;/p>
&lt;p>为了节省流量就写这么多吧…&lt;/p></description></item><item><title>如果可能的话，恢复跑步。</title><link>https://sbabybird.github.io/p/%E5%A6%82%E6%9E%9C%E5%8F%AF%E8%83%BD%E7%9A%84%E8%AF%9D%E6%81%A2%E5%A4%8D%E8%B7%91%E6%AD%A5/</link><pubDate>Wed, 18 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A6%82%E6%9E%9C%E5%8F%AF%E8%83%BD%E7%9A%84%E8%AF%9D%E6%81%A2%E5%A4%8D%E8%B7%91%E6%AD%A5/</guid><description>&lt;p>年前我连续两个月坚持晚上跑步，就是绕小区跑一圈，大概十分钟左右，后来天气太冷，就暂停了。&lt;/p>
&lt;p>现在天气又暖和了，我想还是把跑步这个计划坚持下来吧，每晚跑一圈，对身体的效果也许不明显，就当是锻炼执行力了。&lt;/p></description></item><item><title>夕阳无限好</title><link>https://sbabybird.github.io/p/%E5%A4%95%E9%98%B3%E6%97%A0%E9%99%90%E5%A5%BD/</link><pubDate>Mon, 16 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A4%95%E9%98%B3%E6%97%A0%E9%99%90%E5%A5%BD/</guid><description>&lt;p>夕阳无限好&lt;/p></description></item><item><title>笔筒</title><link>https://sbabybird.github.io/p/%E7%AC%94%E7%AD%92/</link><pubDate>Sun, 15 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%AC%94%E7%AD%92/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E7%AC%94%E7%AD%92/20090315.jpg" alt="Featured image of post 笔筒" />&lt;p>笔筒，自动对焦拍摄。&lt;/p></description></item><item><title>五年来看到的最过瘾的一部电影</title><link>https://sbabybird.github.io/p/%E4%BA%94%E5%B9%B4%E6%9D%A5%E7%9C%8B%E5%88%B0%E7%9A%84%E6%9C%80%E8%BF%87%E7%98%BE%E7%9A%84%E4%B8%80%E9%83%A8%E7%94%B5%E5%BD%B1/</link><pubDate>Sun, 15 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BA%94%E5%B9%B4%E6%9D%A5%E7%9C%8B%E5%88%B0%E7%9A%84%E6%9C%80%E8%BF%87%E7%98%BE%E7%9A%84%E4%B8%80%E9%83%A8%E7%94%B5%E5%BD%B1/</guid><description>&lt;p>周末的下午，按照惯例，看片！看到了论坛上推荐的《飓风营救》原名（Taken），名字取的有点儿让我不太想看，但是无聊的很，还是看看吧。&lt;/p>
&lt;p>结果这个故事真的引人入胜，一个为了女儿而退役的老特工，为了女儿营救女儿，几乎把巴黎闹翻了天，虽然有点儿英雄主义，但看得让人很过瘾。&lt;/p>
&lt;p>等到看完了我才想起来查查这个影片的导演是谁，我靠！居然是吕克贝松（开头的字幕居然没注意到），啥话也不说了，此牛人没拍过一般的片。&lt;/p>
&lt;p>剧中的主角为了营救女儿，几乎干掉了他遇到的每一个坏人，而且手段十分干净利落，甚至残忍，这恰恰是最过瘾的地方，比起以往此类电影，主角往往带着仁慈再次受伤而导致事情失败，让人唏嘘，但此片不然，对坏人，乃至对坏人的老婆&amp;mdash;&amp;mdash;貌似一个十分无辜的人，也毫不留情，这种做法，将一个父亲对自己女儿的爱，表达到了极致。&lt;/p>
&lt;p>总结成一句话就是：为了女儿豁了老命什么也不顾了！&lt;/p></description></item><item><title>手机发图片测试</title><link>https://sbabybird.github.io/p/%E6%89%8B%E6%9C%BA%E5%8F%91%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</link><pubDate>Sat, 14 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%89%8B%E6%9C%BA%E5%8F%91%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>手机发图片测试&lt;/p></description></item><item><title>手机写博客测试</title><link>https://sbabybird.github.io/p/%E6%89%8B%E6%9C%BA%E5%86%99%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/</link><pubDate>Sat, 14 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%89%8B%E6%9C%BA%E5%86%99%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>手机写博客测试。&lt;/p></description></item><item><title>对googlereader中共享条目的看法</title><link>https://sbabybird.github.io/p/%E5%AF%B9googlereader%E4%B8%AD%E5%85%B1%E4%BA%AB%E6%9D%A1%E7%9B%AE%E7%9A%84%E7%9C%8B%E6%B3%95/</link><pubDate>Thu, 12 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%AF%B9googlereader%E4%B8%AD%E5%85%B1%E4%BA%AB%E6%9D%A1%E7%9B%AE%E7%9A%84%E7%9C%8B%E6%B3%95/</guid><description>&lt;p>googlereader 用了快两年了，我认为它是目前最好的在线 rss 阅读器了。&lt;/p>
&lt;p>自从 greader 推出好友分享的功能后，我的好友也加了不少，而且大家都把自己认为有价值的条目共享出来。&lt;/p>
&lt;p>但目前有点不太令我满意的地方是&amp;mdash;-重复的共享太多，就是说一条有意思的 rss 内容反复的被好友共享，即使我已经阅读过此条目，当我在点击进入朋友共享的条目时，如果有朋友共享了该条目，则 greader 会认为我未读过这条内容，于是就会出现同一条资源被反复阅读的情况。&lt;/p>
&lt;p>我觉得 greader 最好再智能一些，即我读过的东西，哪怕有 n 个人又共享了 n 遍，也不要列入到我的未读列表里，这样才好。&lt;/p></description></item><item><title>今天遇到的问题，GPRMC与GPGGA</title><link>https://sbabybird.github.io/p/%E4%BB%8A%E5%A4%A9%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98gprmc%E4%B8%8Egpgga/</link><pubDate>Wed, 11 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BB%8A%E5%A4%A9%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98gprmc%E4%B8%8Egpgga/</guid><description>&lt;p>我以前写过一个程序，在 pda 上通过读取 gps 模块的串口信息来实现坐标定位的功能。通常 gps 模块都会输出标准的 GPRMC 与 GPGGA 信息，所以程序一直运行正常。&lt;/p>
&lt;p>今天突然遇到奇怪问题，同事说我的那个程序不好使了，虽然能够打开 gps 模块但是不能解析经纬度等信息。&lt;/p>
&lt;p>这是一个国产的智能手机，自带的 gps 导航程序可以正常定位，但我的程序不行。&lt;/p>
&lt;p>于是我把从串口得到的信息统统打印出来，仔细调试，发现该 gps 模块可以正常输出 GPGGA 格式的信息，但输出 GPRMC 格式的信息却不完整，而我那程序正是通过解析 GPRMC 的信息来实现坐标定位的，于是修改代码，放弃 GPRMC 信息，改为从 GPGGA 里读取坐标信息，程序正常。&lt;/p>
&lt;p>但我还是没弄明白这个 gps 模块为什么会输出不正常的 GPRMC 信息。&lt;/p>
&lt;p>头大。&lt;/p>
&lt;p>另附 GPRMC 与 GPGGA 的解释 GPGGA 的百度百科解释 GPRMC 的百度百科解释&lt;/p></description></item><item><title>我的好忘性</title><link>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E5%A5%BD%E5%BF%98%E6%80%A7/</link><pubDate>Tue, 10 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E5%A5%BD%E5%BF%98%E6%80%A7/</guid><description>&lt;p>这次来京时，老婆大人托付的有点儿小事要办，帮家里的亲戚在北京买点儿药，冲剂类，应该就像板蓝根似的。&lt;/p>
&lt;p>来之前，特地将药品的描述写了个纸条塞进我的口袋。&lt;/p>
&lt;p>到了这边之后，进入工作状态后，立即将此事抛到了九霄云外了，直到老婆今日在 qq 上提醒我才想起。&lt;/p>
&lt;p>后来经人提醒，药物无法邮寄，无论是平邮还是 EMS 均没戏，让我很是失望，不过还好，咨询快递公司后，人家说只要不是液体就行，而且感觉服务又比 EMS 好的，当然就用快递了。&lt;/p>
&lt;p>靠，龌龊的 EMS！额真鄙视你呀&lt;/p></description></item><item><title>坚持是最难的事情</title><link>https://sbabybird.github.io/p/%E5%9D%9A%E6%8C%81%E6%98%AF%E6%9C%80%E9%9A%BE%E7%9A%84%E4%BA%8B%E6%83%85/</link><pubDate>Mon, 09 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9D%9A%E6%8C%81%E6%98%AF%E6%9C%80%E9%9A%BE%E7%9A%84%E4%BA%8B%E6%83%85/</guid><description>&lt;p>我的英语水平一直徘徊在“烂”与“那是相当的烂”之间，那是因为我的词汇量一直少的可怜，我也曾经心潮澎湃地背单词，甚至背字典，但都没有坚持下来，每每想起都非常懊悔，如果从我刚学英语那天就每天记住一个单词的话，现在至少记住 5000 个单词了，当然这是不可能的，因为我没有坚持下来。&lt;/p>
&lt;p>学习其他东西也是这样，十年前就摸过吉他，而且能像模像样的弹一首单调的曲子，也是因为没有坚持练习，到现在还是那个水平。&lt;/p>
&lt;p>年前一段时间，我心血来潮，准备每天晚上坚持跑步，但是仅仅跑了两个月，就在冬至那天被打败了，天太冷了，还是不能坚持。&lt;/p>
&lt;p>一旦松懈下来，就再也不想继续了。&lt;/p>
&lt;p>有相当一段时间，我以为每天写一篇博客实在是很轻松 easy 的事情，但是前一段时间工作一忙，还是没能坚持下来。&lt;/p>
&lt;p>哪怕是一天在上面唠叨一句也懒的罗嗦。&lt;/p>
&lt;p>现在，下班了，我想换换脑子，思考了半天，竟忍不住感叹一句：“做什么事情，最难的就是坚持！”&lt;/p></description></item><item><title>昨天洗了一下微波炉</title><link>https://sbabybird.github.io/p/%E6%98%A8%E5%A4%A9%E6%B4%97%E4%BA%86%E4%B8%80%E4%B8%8B%E5%BE%AE%E6%B3%A2%E7%82%89/</link><pubDate>Sun, 08 Mar 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%98%A8%E5%A4%A9%E6%B4%97%E4%BA%86%E4%B8%80%E4%B8%8B%E5%BE%AE%E6%B3%A2%E7%82%89/</guid><description>&lt;p>回老家温暖几天之后，我现在又恢复到一人吃一人住的状态了。&lt;/p>
&lt;p>刚到北京就感冒了，先是鼻子消极怠工，然后是咽喉肿痛，再后来就咳嗽，直到昏昏欲睡，浑身酸痛。&lt;/p>
&lt;p>昨天加了一天班，不想在外头吃了，就跑到超市买了一堆东西，想自己做着吃。&lt;/p>
&lt;p>忽然想起来前几天上火车时老妈给我拿的煮鸡蛋，现在还都在冰箱里放着呢，只是不知还能不能吃，发短信请示老婆，问是否还能吃，批示曰：“浪费可耻，尽量吃掉！”我想也是，何况这可是纯天然的柴鸡蛋啊，在北京想吃还吃不到哩。&lt;/p>
&lt;p>于是就把一个鸡蛋放到微波炉里，想热一下再吃，只怪我由于感冒引起的大脑短路，忘记给鸡蛋剥皮，在加热到 15 秒的时候就听到一声巨响，就像正月十五放烟花的那种响声，坏了！赶紧关掉微波炉的电源，打开一看，鸡蛋炸成了米粒那么大小碎片，均匀地分布在整个微波炉里。刚好，我早就想清理一下微波炉了，借此机会，清洗一下！&lt;/p></description></item><item><title>在python下调用gdal库来显示影像图</title><link>https://sbabybird.github.io/p/%E5%9C%A8python%E4%B8%8B%E8%B0%83%E7%94%A8gdal%E5%BA%93%E6%9D%A5%E6%98%BE%E7%A4%BA%E5%BD%B1%E5%83%8F%E5%9B%BE/</link><pubDate>Thu, 19 Feb 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9C%A8python%E4%B8%8B%E8%B0%83%E7%94%A8gdal%E5%BA%93%E6%9D%A5%E6%98%BE%E7%A4%BA%E5%BD%B1%E5%83%8F%E5%9B%BE/</guid><description>&lt;p>很久没有更新了，懒是一方面原因，另一方面是因为最近忙的没有心思写博客了。其实按理说，每天抽出一点时间来唠叨两句还是能够办到的，只是一旦停下来，再开始就更费尽了。随便整理一些东西发上来吧，又是关于技术的。&lt;/p>
&lt;p>有一段时间我需要写程序来处理 tif 格式的影像图，在网上找来找去就发现了 gdal 这个好东西，可是在 vc 下调用它还是有些罗嗦，达不到快速调试的效果。于是前两天我又试着在 python 下调用 gdal，把思路先用 python 实现一遍，调试通过了再用 c++。下面是最简单的显示一幅 tif 影像图的 python 代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pygame&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">osgeo&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">gdal&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pygame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">screen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pygame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_mode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">WINSIZE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pygame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_caption&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;gdaltest&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pygame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_timer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">USEREVENT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dataset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gdal&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;c:/test.tif&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">surface&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pygame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Surface&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">WINWIDTH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">WINHEIGHT&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">parr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dataset&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ReadAsArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">WINWIDTH&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">WINHEIGHT&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">img&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pygame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PixelArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">surface&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">WINWIDTH&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">WINHEIGHT&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">img&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">show&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>咦！</title><link>https://sbabybird.github.io/p/%E5%92%A6/</link><pubDate>Wed, 04 Feb 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%92%A6/</guid><description>&lt;p>最近一段时间都会比较忙、相当忙、非常忙，正常下班的时间已经被无情地调整到了晚上 9 点，请注意，我说的是下班时间，我可没说加班加到几点。&lt;/p></description></item><item><title>我回来了</title><link>https://sbabybird.github.io/p/%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86/</link><pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86/</guid><description>&lt;p>真快，又开工了。&lt;/p></description></item><item><title>春节好！</title><link>https://sbabybird.github.io/p/%E6%98%A5%E8%8A%82%E5%A5%BD/</link><pubDate>Sun, 25 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%98%A5%E8%8A%82%E5%A5%BD/</guid><description>&lt;p>牛年大吉！万事顺利！&lt;/p></description></item><item><title>什么也比不上家的温暖</title><link>https://sbabybird.github.io/p/%E4%BB%80%E4%B9%88%E4%B9%9F%E6%AF%94%E4%B8%8D%E4%B8%8A%E5%AE%B6%E7%9A%84%E6%B8%A9%E6%9A%96/</link><pubDate>Sat, 24 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BB%80%E4%B9%88%E4%B9%9F%E6%AF%94%E4%B8%8D%E4%B8%8A%E5%AE%B6%E7%9A%84%E6%B8%A9%E6%9A%96/</guid><description>&lt;p>好啦，历时十二个小时，经过无数次的转车，终于平安到家了。&lt;/p>
&lt;p>带着一身的疲惫，当我走进家门的那一刻，所有的烦恼与苦难都在一霎那间烟消云散了。&lt;/p>
&lt;p>管他是令人发指的票贩子，还是无处不在的小偷，是零下十几度的寒冷天气，还是把我折磨得筋疲力尽的客运系统，都通通给我一边去吧。&lt;/p>
&lt;p>虽然屋里没有暖气，但是可口的饭菜，家人的欢笑，这一切都让我觉得比开着暖气的北京温暖多了！&lt;/p></description></item><item><title>一路顺风！</title><link>https://sbabybird.github.io/p/%E4%B8%80%E8%B7%AF%E9%A1%BA%E9%A3%8E/</link><pubDate>Thu, 22 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%80%E8%B7%AF%E9%A1%BA%E9%A3%8E/</guid><description>&lt;p>一路顺风！明天就到家啦。&lt;/p></description></item><item><title>过年的蜡烛</title><link>https://sbabybird.github.io/p/%E8%BF%87%E5%B9%B4%E7%9A%84%E8%9C%A1%E7%83%9B/</link><pubDate>Wed, 21 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%BF%87%E5%B9%B4%E7%9A%84%E8%9C%A1%E7%83%9B/</guid><description>&lt;p>说说小时候过年的事情吧，那个时候我们村里还没有通电，平时晚上会点煤油灯来照明，过年的时候家家户户都要点蜡烛，俗称&amp;quot;大蜡&amp;quot;。&lt;/p>
&lt;p>这可不是一般的蜡烛，而是非常巨大的一对蜡烛，差不多有两斤重，顶端粗壮，下端圆滑，底部有孔，上面通常写着非常有年味儿的对联，如&amp;quot;一杯美酒敬天地，三柱清香谢神灵&amp;quot;等字样，金色的字，红色的蜡闪闪发光。&lt;/p>
&lt;p>这么大的蜡是不能直接放在桌子上点燃的，一般要有支撑蜡的架子，俗称&amp;quot;蜡台子&amp;quot;，现在的小朋友可能都没有见过蜡台，那是一个精致的木头架子，刷上红漆，中间有两根铁柱竖着用以把蜡烛插在上面，手巧的木匠会把蜡台做的颇具艺术感。&lt;/p>
&lt;p>也有的人家直接把一个大萝卜切开两半，平着摆在桌子上，再插上两根筷子，也成了不错的蜡台。&lt;/p>
&lt;p>大蜡会在大年初一那天四五更天的时候点燃，我过年一般起的很早（小孩子最爱过年了），起来之后洗漱完毕第一件事情就是点大蜡，大蜡的火苗很大，照的整个堂屋像白天一样明亮，也预示着大家在新的一年里红红火火，吉祥如意。&lt;/p>
&lt;p>点大蜡、敬香、吃饺子，然后放鞭炮这个流程就是我对小时候过年的记忆。&lt;/p></description></item><item><title>最后的倒计时</title><link>https://sbabybird.github.io/p/%E6%9C%80%E5%90%8E%E7%9A%84%E5%80%92%E8%AE%A1%E6%97%B6/</link><pubDate>Tue, 20 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%80%E5%90%8E%E7%9A%84%E5%80%92%E8%AE%A1%E6%97%B6/</guid><description>&lt;p>还有两天就回家了，身在北京，心早已飞到了家人的身边。 &lt;/p></description></item><item><title>看完了《叶问》，心情沉重地去洗澡了</title><link>https://sbabybird.github.io/p/%E7%9C%8B%E5%AE%8C%E4%BA%86%E5%8F%B6%E9%97%AE%E5%BF%83%E6%83%85%E6%B2%89%E9%87%8D%E5%9C%B0%E5%8E%BB%E6%B4%97%E6%BE%A1%E4%BA%86/</link><pubDate>Mon, 19 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%9C%8B%E5%AE%8C%E4%BA%86%E5%8F%B6%E9%97%AE%E5%BF%83%E6%83%85%E6%B2%89%E9%87%8D%E5%9C%B0%E5%8E%BB%E6%B4%97%E6%BE%A1%E4%BA%86/</guid><description>&lt;p>还是洗洗睡吧。&lt;/p></description></item><item><title>显卡驱动导致程序不能正常最大化窗口</title><link>https://sbabybird.github.io/p/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AF%BC%E8%87%B4%E7%A8%8B%E5%BA%8F%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%9C%80%E5%A4%A7%E5%8C%96%E7%AA%97%E5%8F%A3/</link><pubDate>Mon, 19 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AF%BC%E8%87%B4%E7%A8%8B%E5%BA%8F%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%9C%80%E5%A4%A7%E5%8C%96%E7%AA%97%E5%8F%A3/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AF%BC%E8%87%B4%E7%A8%8B%E5%BA%8F%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%9C%80%E5%A4%A7%E5%8C%96%E7%AA%97%E5%8F%A3/20090119.JPG" alt="Featured image of post 显卡驱动导致程序不能正常最大化窗口" />&lt;p>这两天做了一个程序的 demo，在台式机上十分运行正常，在笔记本上运行时，窗口就是不能最大化，最大化之后程序窗口只能显示一半，鼠标也拖不动它，因为 windows 认为你的窗口既然已经最大化了所以就不让你拖动了：）。&lt;/p>
&lt;p>反复调试程序也找不到问题所在，最终才想到是显卡驱动的问题，于是我抱着试试看的态度（这个语气好熟）把 Nvidia 好心提供的附加程序&amp;quot;desktop-Manager&amp;quot;功能给禁用了，程序立即就好使了，窗口可以正常最大化了。&lt;/p>
&lt;p>如图&lt;/p></description></item><item><title>没信心了</title><link>https://sbabybird.github.io/p/%E6%B2%A1%E4%BF%A1%E5%BF%83%E4%BA%86/</link><pubDate>Sat, 17 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%B2%A1%E4%BF%A1%E5%BF%83%E4%BA%86/</guid><description>&lt;p>前天在网上看了个视频，某人（其实就是 rickwakeman）演奏了一段 keyboard，看得让我心神激荡(地址在这儿)，旋律速度极快，却也十分好听。&lt;/p>
&lt;p>此人运指如飞，根本看不清是哪根手指在动，小手指摆动得就像蜻蜓的翅膀，好像就要发出嗡嗡声似的。&lt;/p>
&lt;p>看完视频后我长叹一声，唉，咱这辈子也别想弹成这样了。&lt;/p></description></item><item><title>我的指纹</title><link>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E6%8C%87%E7%BA%B9/</link><pubDate>Fri, 16 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E6%8C%87%E7%BA%B9/</guid><description>&lt;p>最近在做一个与指纹识别有关的项目，选了几家硬件。&lt;/p>
&lt;p>我发现，无论吹嘘的多牛逼的识别硬件，对我的指纹都无可奈何，对我同事指纹的识别率基本达到百分百，却常常认不出我的指纹。&lt;/p>
&lt;p>这样我调试程序的时候就很麻烦，常常需要同事的帮助，动不动就拿着硬件拉着一个同事的手说：&amp;quot;麻烦帮个忙，手指头借我用一下&amp;quot;。&lt;/p>
&lt;p>没办法，我的指纹太浅，无论是光学识别器还是电容识别器都不能很好的识别，不知道这是否意味着我可以放心的去作案了？&lt;/p></description></item><item><title>我的垃圾，我的回忆</title><link>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E5%9E%83%E5%9C%BE%E6%88%91%E7%9A%84%E5%9B%9E%E5%BF%86/</link><pubDate>Thu, 15 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E5%9E%83%E5%9C%BE%E6%88%91%E7%9A%84%E5%9B%9E%E5%BF%86/</guid><description>&lt;p>今天妈妈打来电话，说在家里整理房间，整理到我曾经的书房兼卧房，问我那一书柜的书还有一堆乱七八糟的东西该如何处理。&lt;/p>
&lt;p>按照我爸的建议是，该清理的统统清理，免得占地方。&lt;/p>
&lt;p>但我在电话里还是坚持要把我的那些东西全部保留下来，哪怕是小学课本也最好别扔掉。&lt;/p>
&lt;p>我想到了我的&amp;quot;百宝箱&amp;quot;。&lt;/p>
&lt;p>其实不加引号也行，虽然对别人来说那里装的都是垃圾，但对我来说那里装的绝对都是宝贝，十来年没碰过了，也记不起来装的都是有什么了，印象比较深的大概有几只拆开的电子表、闹钟，拆散的收录机配件，螺丝，铁丝儿，手电筒啥的。&lt;/p>
&lt;p>在没有电动玩具玩耍的年代，这些都是我的玩具，而且一直陪伴我到了初中毕业。那时候，我每晚都被&amp;quot;逼&amp;quot;着看书写作业，累了的时候就拆个闹钟玩玩，或者随便接几个喇叭听音乐，一个人往往不知不觉玩到深夜而忘了睡觉。&lt;/p>
&lt;p>我曾经幻想着把电子表改装成游戏机，很显然不能成功，不过我还是乐此不疲，所以我的百宝箱里大概有四五只拆毁的电子表，有语音报时的，还有公鸡打鸣的。&lt;/p>
&lt;p>出来上学以后，这些东西就基本没动过了。&lt;/p>
&lt;p>书，倒是偶尔还翻翻，那也是七八年前的事儿了。&lt;/p>
&lt;p>这一柜子书基本没有名著，分类杂乱的很，童话故事与科普读物居多，里面甚至还夹杂着一些课后习题集、作文选刊之类的等很多根本算不上是书的东西。&lt;/p>
&lt;p>当时信息不发达，我又被限制不能看太多电视（现在想想该庆幸才对），这些仅有的书都被我翻了又翻，看了又看，陪我度过了我的童年时光。&lt;/p>
&lt;p>一个废纸箱，一柜子书，那个时候这些就是我的世界，正是这些造就了我自闭、偏执而又爱幻想的性格。&lt;/p>
&lt;p>于是我对老妈说，还是别扔了吧，这些都是我美好的回忆啊，其实我还想接着说，说不定哪本书里还夹着我的情书呢，但是我妈已经把电话挂断了，她没时间听我啰嗦。&lt;/p></description></item><item><title>买到票了</title><link>https://sbabybird.github.io/p/%E4%B9%B0%E5%88%B0%E7%A5%A8%E4%BA%86/</link><pubDate>Wed, 14 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B9%B0%E5%88%B0%E7%A5%A8%E4%BA%86/</guid><description>&lt;p>如题，虽然给票贩子加了一百元钱，但也还是比坐飞机划算。&lt;/p></description></item><item><title>完美的社交关系</title><link>https://sbabybird.github.io/p/%E5%AE%8C%E7%BE%8E%E7%9A%84%E7%A4%BE%E4%BA%A4%E5%85%B3%E7%B3%BB/</link><pubDate>Tue, 13 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%AE%8C%E7%BE%8E%E7%9A%84%E7%A4%BE%E4%BA%A4%E5%85%B3%E7%B3%BB/</guid><description>&lt;p>今天听到一句至理名言：&amp;quot;作为一个中国人，最好认识一个票贩子，一个交警，一个主任医师，一个幼儿园老师，一个律师，一个记者，一个修电脑的。&lt;/p>
&lt;p>&amp;quot;对于我来说，除了最后一个，其他的我都不认识，因为最后一个就是我自己。&lt;/p></description></item><item><title>拔河</title><link>https://sbabybird.github.io/p/%E6%8B%94%E6%B2%B3/</link><pubDate>Mon, 12 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8B%94%E6%B2%B3/</guid><description>&lt;p>公司组织全体员工在北京某郊县（靠，好神秘啊）开了三天年会。&lt;/p>
&lt;p>年会，就是大家忙了一年了，抽个时间在一起喝喝酒，放松放松，再顺便总结一下工作。&lt;/p>
&lt;p>很显然，我对前者更感兴趣，这期间，我参加了一场拔河比赛，喝了几顿酒，飙了几首歌，甚至还进行了一次演讲。&lt;/p>
&lt;p>感触最深的就是这场拔河比赛了，我们组从确定完人数之后就是公认的&amp;quot;死亡之组&amp;quot;，因为全是体格单薄的人，个个身材像根铅笔。&lt;/p>
&lt;p>在赛前，我们一直担心我们组上去就被别人轻易拽过去，但是，当我们都抓住绳子，并且在此起彼伏的加油声中竭尽全力时，我才发现，我们其实不弱。&lt;/p>
&lt;p>人是有巨大的潜力可挖掘的，我们的身子向后倾斜，快要倒在地上，双手使劲攥住绳子，手已经失去了知觉，也看不清跳起来喊着&amp;quot;加油！&amp;quot;的人的脸，那一刻我只知道的是，要把绳子拽过来。&lt;/p>
&lt;p>最后，在僵持了将近一分钟后，我们终于感到绳子一轻，都倒在了地上。&lt;/p>
&lt;p>虽然在接下来的两局里我们都败下阵来，但是虽败犹荣，我们僵持不下并最终胜利的那一局，被公认为在整场比赛中的最精彩的一局。&lt;/p>
&lt;p>虽然第二天腰酸背疼，但是我会记住这次拔河比赛，以后也会把这事儿当作床边故事讲给孙子听，虽然最后可能告诉他，爷赢了！&lt;/p></description></item><item><title>续</title><link>https://sbabybird.github.io/p/%E7%BB%AD/</link><pubDate>Thu, 08 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%BB%AD/</guid><description>&lt;p>把 ubuntu 换成 xp 了，深度精简版的，速度比 ubuntu 快多了。&lt;/p></description></item><item><title>不好意思，小折腾了一把</title><link>https://sbabybird.github.io/p/%E4%B8%8D%E5%A5%BD%E6%84%8F%E6%80%9D%E5%B0%8F%E6%8A%98%E8%85%BE%E4%BA%86%E4%B8%80%E6%8A%8A/</link><pubDate>Wed, 07 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8D%E5%A5%BD%E6%84%8F%E6%80%9D%E5%B0%8F%E6%8A%98%E8%85%BE%E4%BA%86%E4%B8%80%E6%8A%8A/</guid><description>&lt;p>前一段时间我在 eeepc 上装了 ubuntu，这个 linux 的发行版确实比 asus 自带的那个强大得多得多得多（继续），但是有个缺点&amp;mdash;&amp;mdash;慢。&lt;/p>
&lt;p>为此我忍了很久了。&lt;/p>
&lt;p>今天回到家，想装上一个最新的播放器软件，发现没有合适的安装包，于是就想，反正有源码，那就自己编译吧，于是，卷起袖子就开始了。&lt;/p>
&lt;p>下载代码后，configure 发现我的 gtk 太老，apt-get 又不给我装 gtk（说我已经有了最新版），于是我又要先把 gtk 的最新版编译好，但是问题又来了，gtk 的编译依赖 glib，于是我又要先把 glib 编译好，但是问题又来了，glib 的编译又依赖另外的包，于是我耐着性子一个一个把这些包都编译完，make，makeinstall，手都酸了，然后再编译 gtk，又告诉我没有 atk、freetype、cairo、pango、pixman 等等一大堆依赖包，&lt;/p>
&lt;p>好吧，非编译出来不可！&lt;/p>
&lt;p>全部下载这些东东的代码，一个一个 make 再 makeinstall，终于可以编译 gtk 了，终于把 gtk 编译完了。发现我的 Firefox 却运行不起来了，Fuck！&lt;/p></description></item><item><title>四个第一次</title><link>https://sbabybird.github.io/p/%E5%9B%9B%E4%B8%AA%E7%AC%AC%E4%B8%80%E6%AC%A1/</link><pubDate>Tue, 06 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9B%9B%E4%B8%AA%E7%AC%AC%E4%B8%80%E6%AC%A1/</guid><description>&lt;p>1、今日第一次在大街上掀开井盖钻了进去。（当然是经过许可的）&lt;/p>
&lt;p>2、今日第一次进入电力隧道，&amp;quot;初极狭，才通人&amp;quot;，进去后发现地下真是豁然开朗，别有洞天。&lt;/p>
&lt;p>3、今日第一次使用单反相机，一个字儿，&amp;quot;沉！&amp;quot;&lt;/p>
&lt;p>4、今日第一次近距离接近数十万伏特高压的设备。&lt;/p></description></item><item><title>每个男孩都应该有一把吉他</title><link>https://sbabybird.github.io/p/%E6%AF%8F%E4%B8%AA%E7%94%B7%E5%AD%A9%E9%83%BD%E5%BA%94%E8%AF%A5%E6%9C%89%E4%B8%80%E6%8A%8A%E5%90%89%E4%BB%96/</link><pubDate>Mon, 05 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%AF%8F%E4%B8%AA%E7%94%B7%E5%AD%A9%E9%83%BD%E5%BA%94%E8%AF%A5%E6%9C%89%E4%B8%80%E6%8A%8A%E5%90%89%E4%BB%96/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%AF%8F%E4%B8%AA%E7%94%B7%E5%AD%A9%E9%83%BD%E5%BA%94%E8%AF%A5%E6%9C%89%E4%B8%80%E6%8A%8A%E5%90%89%E4%BB%96/20090105.png" alt="Featured image of post 每个男孩都应该有一把吉他" />&lt;p>昨天，飞行鱼一脸扭捏而又羞答答的对我说他终于没忍住，在元旦的时候买了把吉他。&lt;/p>
&lt;p>这厮早就想买吉他了，但是这个想法多次被我扼杀在饭桌上，我以我的亲身经历，动之以情晓之以理地将他想买吉他的念头一再浇灭。&lt;/p>
&lt;p>比如说我十年前就买过吉他，但是今天仍是连一首曲子都弹不全，比如说我曾经以为弹的不好是因为吉他不行，在我买了第二把好琴之后我才发现是自己的水平不行，说到动情之处声泪俱下，唏嘘不已。&lt;/p>
&lt;p>但这厮还是买了，他说，他在听了卖琴的老板弹奏完一曲《加州旅馆》之后，就立即掏钱了，仿佛买回去的是那一曲《加州旅馆》。&lt;/p>
&lt;p>不过自己回去连《加州招待所》都弹不出来，只能摆在那里当个装饰罢了。&lt;/p>
&lt;p>那，买了琴，为什会感到羞涩捏？&lt;/p>
&lt;p>因为我们早都过了&amp;quot;男孩&amp;quot;的年纪，早就错过了拿着吉他装逼的季节，只是心里总有个情节而已，你要知道，装逼被自己看穿了总是怪不好意思的吧。&lt;/p></description></item><item><title>总有些事情让你感到沮丧</title><link>https://sbabybird.github.io/p/%E6%80%BB%E6%9C%89%E4%BA%9B%E4%BA%8B%E6%83%85%E8%AE%A9%E4%BD%A0%E6%84%9F%E5%88%B0%E6%B2%AE%E4%B8%A7/</link><pubDate>Sun, 04 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%80%BB%E6%9C%89%E4%BA%9B%E4%BA%8B%E6%83%85%E8%AE%A9%E4%BD%A0%E6%84%9F%E5%88%B0%E6%B2%AE%E4%B8%A7/</guid><description>&lt;p>今天看到一组新闻，里面总结了发生在 2008 年度的有趣而又真实的事件，其中有一条，我觉得非常真实：&amp;quot;一个男人在暴风雪的芝加哥街头奋力铲雪一个小时，终于给自己的车清出了一个停车位。&lt;/p>
&lt;p>当他把车开来时，发现一位女士已经抢了他的位置——可以理解，他朝她开了一枪，把她干掉了。&lt;/p>
&lt;p>&amp;quot;说实在的，对此男士，我表示十分的理解，我可以理解这个家伙能有多么的沮丧。&lt;/p>
&lt;p>今天晚上去&amp;quot;敦煌老马家&amp;quot;吃面的时候，发现比我后到的客人都吃完了，而我的还没端上来时，我才发现原来做面的师傅把我这碗忘了，这个时候我有了和上面那个哥们儿一样的感觉，只是咱们国家不允许带枪而已。&lt;/p></description></item><item><title>有啥业务非得在银行办啊</title><link>https://sbabybird.github.io/p/%E6%9C%89%E5%95%A5%E4%B8%9A%E5%8A%A1%E9%9D%9E%E5%BE%97%E5%9C%A8%E9%93%B6%E8%A1%8C%E5%8A%9E%E5%95%8A/</link><pubDate>Sat, 03 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%89%E5%95%A5%E4%B8%9A%E5%8A%A1%E9%9D%9E%E5%BE%97%E5%9C%A8%E9%93%B6%E8%A1%8C%E5%8A%9E%E5%95%8A/</guid><description>&lt;p>谁都不愿意排队，但是很不幸，这个世界上到处都要排队，上车要排队，看病要排队，买东西要排队，收钱要排队，交钱也要排队，如果哪天不巧的话，上公共厕所蹲个坑都得排队。&lt;/p>
&lt;p>要说排队排的最厉害的，还是得数银行！前一阵子，股票特别火的时候，银行各个网点都是爆满，想去取个钱买个电啥的，基本上是上午拿号下午办，这还算是幸运的，如果赶上你的时候人家正好下班，那么，对不起，麻烦您明儿早点儿来。&lt;/p>
&lt;p>最可气的是，在银行里办业务的人那个磨叽劲儿，我就纳了闷了，赶上我的时候，去取钱也好存钱也罢，绝对不会超过一分钟去（就算是取个十万八万的也顶多 5 分钟吧），可是往往有些人在窗口前，屁股往椅子上一挪就是十几二十分钟，难道你是去聊天去了，里面的柜员也贼磨叽，一会儿站起来拿点儿表格，一会儿和隔壁女孩聊中午吃什么。&lt;/p>
&lt;p>我就是想不明白，那些在柜台动辄磨叽几十分钟的人，他们办理的都是什么业务？&lt;/p></description></item><item><title>以后不在电脑上玩游戏了</title><link>https://sbabybird.github.io/p/%E4%BB%A5%E5%90%8E%E4%B8%8D%E5%9C%A8%E7%94%B5%E8%84%91%E4%B8%8A%E7%8E%A9%E6%B8%B8%E6%88%8F%E4%BA%86/</link><pubDate>Fri, 02 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BB%A5%E5%90%8E%E4%B8%8D%E5%9C%A8%E7%94%B5%E8%84%91%E4%B8%8A%E7%8E%A9%E6%B8%B8%E6%88%8F%E4%BA%86/</guid><description>&lt;p>昨天，一个哥们给我打电话说他的机器中病毒了，系统瘫痪了，光驱也坏了，让我去看看，顺便去他家里玩。&lt;/p>
&lt;p>于是今天我就过去了，到那儿以后，这家伙已经买了新光驱回来了，还顺手买了个移动硬盘外加一个优盘（怎么想的？）。&lt;/p>
&lt;p>于是俩人开始拆电脑、装光驱、装系统、装软件。&lt;/p>
&lt;p>下午的时候，觉得有点儿无聊，这哥们儿突发奇想，决定出去转转，想买个游戏机耍耍。&lt;/p>
&lt;p>于是我们又跑到他买光驱的电子市场，直奔电玩柜台，老板看到两个奔三的&amp;quot;小伙子&amp;quot;过来，开始都不太爱搭理，听到我们要买游戏机，就显的热情起来。&lt;/p>
&lt;p>我们先后试了 Xbox360 和任天堂的 wii，虽然 xbox 的画质很优美，但是最终还是决定买了任天堂的 wii，日版原装套装外加一个原装手柄，一共两千三百块，老板看我们连价都没还一下（这哥们买东西跟我一样），主动送了 20 张游戏碟。&lt;/p>
&lt;p>立即打车回去，接上电视就开始玩，一边玩还一边感叹：&amp;quot;小日本设计的游戏机就是好玩！&amp;quot;。&lt;/p>
&lt;p>网球、保龄球玩起来跟真的一样，那个无线手柄绝真是个绝妙的设计，反映十分，游戏虽然画面稍微有点儿逊色，音质也比较一般，但整体来说，玩游戏的体验还是要比在 pc 上玩要爽的多。&lt;/p>
&lt;p>可惜明天还得加班，否则今天肯定玩疯了。&lt;/p></description></item><item><title>第一天，提点儿希望</title><link>https://sbabybird.github.io/p/%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E7%82%B9%E5%84%BF%E5%B8%8C%E6%9C%9B/</link><pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E7%82%B9%E5%84%BF%E5%B8%8C%E6%9C%9B/</guid><description>&lt;p>今天是 2009 第一天，按照计划，我基本上在家宅了一天。&lt;/p>
&lt;p>早晨起床后边洗热水澡边洗衣服，然后出去买菜，准备做我很久没吃到的牛肉饭。&lt;/p>
&lt;p>等到七七八八收拾差不多的时候，也就上午十点多了，纲要休息会儿吃口饭，却发现手机里已经收了 n 多的新年短信，于是饭也顾不上吃，先把短信回复了再说，这几天移动又赚翻了。&lt;/p>
&lt;p>然后就是上午下午各看一部电影，到了晚上去老杨家吃了顿饭，打了会儿牌，喝小酒喝得微醺。&lt;/p>
&lt;p>总之，我的新年第一天，就是这么平凡地度过了，就像是一个普通的周末。晚上回到电脑前，向往博客里写点儿东西，又觉得脑子里空空的，本来还相对 08 年做个总结啥的，后来想想，实在是没什么好总结的，那就对 09 年提点儿希望吧。&lt;/p>
&lt;p>想起我前两天列的一个 09 年的学习计划，这个计划十分贪婪，牵涉到各种技术和技能，感觉不是很靠谱，还是说一下大方向上的愿望吧。&lt;/p>
&lt;p>我希望在 2009 年里，我能实现如下愿望。&lt;/p>
&lt;p>1、英语水平飞速发展，可以正常阅读英文文档与小说（阅读能力要像看中文的《故事会》一样）。&lt;/p>
&lt;p>2、体重增加到 65 公斤。&lt;/p>
&lt;p>3、编程水平继续提高，主要在基础算法与数据结构方面。&lt;/p>
&lt;p>4、掌握一种开源三维引擎。&lt;/p>
&lt;p>5、vim 的应用更上一个台阶，使 vim 彻底替代我机器上的编辑器。&lt;/p>
&lt;p>6、能够用上 3G。&lt;/p></description></item><item><title>再见2008，你好2009</title><link>https://sbabybird.github.io/p/%E5%86%8D%E8%A7%812008%E4%BD%A0%E5%A5%BD2009/</link><pubDate>Wed, 31 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%8D%E8%A7%812008%E4%BD%A0%E5%A5%BD2009/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%86%8D%E8%A7%812008%E4%BD%A0%E5%A5%BD2009/20081231.png" alt="Featured image of post 再见2008，你好2009" />&lt;p>此处无声胜有声&lt;/p></description></item><item><title>blender练习</title><link>https://sbabybird.github.io/p/blender%E7%BB%83%E4%B9%A0/</link><pubDate>Mon, 29 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/blender%E7%BB%83%E4%B9%A0/</guid><description>&lt;p>空酒杯一只&lt;/p></description></item><item><title>早场电影</title><link>https://sbabybird.github.io/p/%E6%97%A9%E5%9C%BA%E7%94%B5%E5%BD%B1/</link><pubDate>Sun, 28 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%97%A9%E5%9C%BA%E7%94%B5%E5%BD%B1/</guid><description>&lt;p>周末，睡了个懒觉，九点出去看了一场早场电影，一个人。本来以为早场电影人会很少，结果发现电影院门口居然还排了队，当然了，都是冲着冯小刚的《非诚勿扰》来的，对于这部电影，我没什么可点评的，只能说，值得看，比起以往的冯氏贺岁片，味道还没变，故事不错，讲的也不错。回来以后，又把《甲方乙方》翻出来看一遍。&lt;/p></description></item><item><title>livespace 真难用</title><link>https://sbabybird.github.io/p/livespace-%E7%9C%9F%E9%9A%BE%E7%94%A8/</link><pubDate>Fri, 26 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/livespace-%E7%9C%9F%E9%9A%BE%E7%94%A8/</guid><description>&lt;p>同样是使用电子邮件发布的一篇博客，发布到 blogger 的效果比法在 livespace 里的效果要好，昨天发了一张图片，blogger 那边简直是又好又快，显示的还是原始大小，到了 msnspace 这边，给我整成了一个只有指甲盖大小的缩略图！您要问为什么放着好好的 blogger 不用，反而还在这贱兮兮的说 livespace 的坏话？&lt;/p>
&lt;p>答案是，中国大陆无法正常使用 blogger 的服务，为什么不能正常使用呢？&lt;/p>
&lt;p>答案不是因为人家歧视咱，而是@#￥%@#￥%@#￥%。&lt;/p></description></item><item><title>Blender练习</title><link>https://sbabybird.github.io/p/blender%E7%BB%83%E4%B9%A0/</link><pubDate>Thu, 25 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/blender%E7%BB%83%E4%B9%A0/</guid><description>&lt;p>无聊，用 blender 作图一副，练习。&lt;/p></description></item><item><title>简讯</title><link>https://sbabybird.github.io/p/%E7%AE%80%E8%AE%AF/</link><pubDate>Thu, 25 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%AE%80%E8%AE%AF/</guid><description>&lt;p>昨日，也就是平安夜，一年 N 度的节日会餐，在老居家隆重举行，出席宴会的有，大宝夫妇，小江夫妇，老杨夫妇及其儿子，会餐在亲切友好的气氛下进行，大家就共同关心的话题交换了意见，纷纷表示，鱼炖的不错，汤的味道更美！&amp;mdash;&amp;mdash;路边社记者&amp;quot;从容地狂奔&amp;quot;在现场吃饱后发回的报道。&lt;/p></description></item><item><title>跑步指数零颗星</title><link>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E6%8C%87%E6%95%B0%E9%9B%B6%E9%A2%97%E6%98%9F/</link><pubDate>Tue, 23 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E6%8C%87%E6%95%B0%E9%9B%B6%E9%A2%97%E6%98%9F/</guid><description>&lt;p>前天，就是冬至那天，据说是 n 年以来最冷的冬至，冷就不用多说了，反正实在是不能出去跑步了，我还是先将跑步停一停，等跑步指数上升到两颗星时再开始跑。&lt;/p></description></item><item><title>串台</title><link>https://sbabybird.github.io/p/%E4%B8%B2%E5%8F%B0/</link><pubDate>Mon, 22 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%B2%E5%8F%B0/</guid><description>&lt;p>我每天大概有 2 个小时呆在公交车上，与拥挤的地铁相比，我坐的这趟车还算宽松，车上装有移动电视，每天循环播放着垃圾节目，让你在忍受堵车又堵心的同时也备受垃圾广告的煎熬。&lt;/p>
&lt;p>最近两天，节目质量有所好转，有时甚至能听到一两首老歌，不禁让人陷入回忆，有时甚至想跟着哼唱两声。&lt;/p>
&lt;p>可是很快我就又发现了新问题，那就是，电视的声音总是被公交报站的声音打断，听起来有时让人如鲠在喉有时又忍俊不禁。&lt;/p>
&lt;p>比如吧，潘美辰在屏幕上正抱着话筒深情款款滴唱着：&amp;quot;我想要有个家，一个不需要多大的地方～～～&amp;quot;突然潘美辰变身成一个大嗓门的售票员，&amp;quot;龙花园到了，下车请出示车票，youarearrivinginlonghuayuan。。。。。&lt;/p>
&lt;p>&amp;quot;罗哩罗嗦老半天直到歌曲唱完，在或者伍思凯刚唱完一句：&amp;quot;没有承诺，却被你抓得更紧～～～&amp;quot;然后紧接着就说：&amp;quot;车辆起步，请抓稳扶好，刚上车的乘客请往里走，前方到站是叉叉叉&amp;quot;。&lt;/p></description></item><item><title>突然的自我</title><link>https://sbabybird.github.io/p/%E7%AA%81%E7%84%B6%E7%9A%84%E8%87%AA%E6%88%91/</link><pubDate>Sun, 21 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%AA%81%E7%84%B6%E7%9A%84%E8%87%AA%E6%88%91/</guid><description>&lt;p>今天是二十四节气里的冬至，天气突然变得冷酷起来，冷得令人失去意识，我从来没有像今天这样觉得暖气片如此可爱，以至于我抱着它&amp;quot;亲热&amp;quot;了半天。&lt;/p>
&lt;p>按照惯例，冬至要吃饺子，可是我一个人，既不想吃速冻的，又不想在家自己做，所以，晚饭我就准备出去吃了。&lt;/p>
&lt;p>外面的天气比我想象的要冷的多得多，尤其是北风，吹得我站都站不稳，风不断从袖口、领口里钻进来，有一段时间我根本无法呼吸。&lt;/p>
&lt;p>出了小区东门，过马路，看见一个热气腾腾的小菜馆，隐约能看见牌子上写有&amp;quot;水饺&amp;quot;字样，二话不说，撩起帘子钻了进去。&lt;/p>
&lt;p>在这儿住了这么久，第一次发现这儿还有个饭馆，店面很小，门口是个涮麻辣烫的锅，几个贪吃的家伙正稀里哗啦地吃着麻辣烫，里面一共四张小桌子，铺着桌布，收拾得很干净，墙壁上挂了几串红辣椒，最里面是个小柜台，老板娘正低着头算账。&lt;/p>
&lt;p>打过招呼，做了下来，&amp;quot;您整点儿啥？&amp;quot;听了老板的口音，我才发现这是东北小两口开的店，顿时觉得亲切起来，感觉这儿就像是《东北一家人》里面的&amp;quot;达达杀猪菜&amp;quot;（实际上这儿还真有杀猪菜）。&lt;/p>
&lt;p>&amp;quot;有水饺吗？&amp;quot;我问他，&amp;quot;有，猪肉大葱、猪肉酸菜&amp;hellip;&amp;quot;，&amp;quot;要猪肉酸菜的吧&amp;quot;我说。&lt;/p>
&lt;p>&amp;quot;要多少？&amp;quot;他又接着问&amp;quot;像您这个头的怎么着也得一斤吧？&amp;quot;，呵呵，我哪能吃得完一斤啊，为了不浪费粮食，我还是只要了半斤。&lt;/p>
&lt;p>热气腾腾的饺子很快就端了上来，为了驱赶身上的严寒，我又要了一瓶二锅头（二两装），实际上，是这个馆子的氛围让我想喝两口，不知道为什么，看着忙碌的老板和老板娘，看着吃麻辣串的情侣，我抿了两口醇香的二锅头，眯起眼睛，突然感觉人生又美好起来&amp;hellip;&amp;hellip;&lt;/p></description></item><item><title>找到一个不错的游戏</title><link>https://sbabybird.github.io/p/%E6%89%BE%E5%88%B0%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%94%99%E7%9A%84%E6%B8%B8%E6%88%8F/</link><pubDate>Sat, 20 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%89%BE%E5%88%B0%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%94%99%E7%9A%84%E6%B8%B8%E6%88%8F/</guid><description>&lt;p>这儿 http://www.appinn.com/Frets-On-Fire-Portable/，是一个好玩儿的吉他游戏，可以让我这个吉他弹的很烂的人过过干瘾。&lt;/p>
&lt;p>ps：今天跑步指数 2 星★★☆☆☆&lt;/p></description></item><item><title>周末大堵车。</title><link>https://sbabybird.github.io/p/%E5%91%A8%E6%9C%AB%E5%A4%A7%E5%A0%B5%E8%BD%A6/</link><pubDate>Fri, 19 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%91%A8%E6%9C%AB%E5%A4%A7%E5%A0%B5%E8%BD%A6/</guid><description>&lt;p>从吃完饭到现在就一直坐在车上，俩小时了，还堵在路上。&lt;/p></description></item><item><title>跑步指数1颗星</title><link>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E6%8C%87%E6%95%B01%E9%A2%97%E6%98%9F/</link><pubDate>Thu, 18 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E6%8C%87%E6%95%B01%E9%A2%97%E6%98%9F/</guid><description>&lt;p>好像最近我的博客里只剩下我每天在唠叨天气了，没办法，劳累了一天的脑子实在是没有力气在攒出一篇上千字的文章了。&lt;/p>
&lt;p>今天的跑步指数是一颗星，极不适合跑步（满分五星），天气寒冷，空气污浊，空气中弥漫着烧烤的味道，实际上是天然气取暖燃烧的烟雾。&lt;/p>
&lt;p>我还是出去跑了一圈，权当是为了锻炼自己的执行力。&lt;/p></description></item><item><title>在家办公</title><link>https://sbabybird.github.io/p/%E5%9C%A8%E5%AE%B6%E5%8A%9E%E5%85%AC/</link><pubDate>Wed, 17 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9C%A8%E5%AE%B6%E5%8A%9E%E5%85%AC/</guid><description>&lt;p>像我这样的好员工真是打着灯笼也不好找啊，刚刚完成了一份公司安排的 ppt，啊～呵（打个哈欠）。&lt;/p>
&lt;p>今天果然降温了，跑步的时候明显感觉到了寒冷。&lt;/p>
&lt;p>回来后，我把家里的窗户打开来换了换空气，才几分钟的时间，室内温度就从 19 度降低到了 15 度！&lt;/p></description></item><item><title>休息</title><link>https://sbabybird.github.io/p/%E4%BC%91%E6%81%AF/</link><pubDate>Tue, 16 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BC%91%E6%81%AF/</guid><description>&lt;p>无论有没有外界的压力，总是不能放松自己，下班回家后看个电影都觉的在浪费生命，其实是走进了生命的误区而已。&lt;/p>
&lt;p>我们总是不相信自己的感觉，一会儿别人说&amp;quot;要活在当下&amp;quot;，有点儿今朝有酒今朝醉的意思，可是又有人蹦出来说，&amp;quot;四十岁前就别提享受&amp;quot;，我 TM 到底该信谁的？&lt;/p>
&lt;p>忒难为我了。&lt;/p>
&lt;p>算了，不想发牢骚了，博客从来都不是一个可以倾诉的地方。&lt;/p>
&lt;p>我想说的意思是，这个世界上充斥着各种声音，不时有&amp;quot;专家&amp;quot;跳出来唧唧歪歪，又或者有&amp;quot;过来人&amp;quot;大谈经验感受，&lt;/p>
&lt;p>其实，每个人都有每个人自己的王国，在这个王国里，自己就是国王，好好当好自己的国王就行了，不用管别人的看法，&lt;/p>
&lt;p>我太累了，只想好好休息。&lt;/p></description></item><item><title>费了不少脑细胞</title><link>https://sbabybird.github.io/p/%E8%B4%B9%E4%BA%86%E4%B8%8D%E5%B0%91%E8%84%91%E7%BB%86%E8%83%9E/</link><pubDate>Mon, 15 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B4%B9%E4%BA%86%E4%B8%8D%E5%B0%91%E8%84%91%E7%BB%86%E8%83%9E/</guid><description>&lt;p>今天大脑超负荷运转，下午连续工作五个小时没休息，一直在思考一个程序上的问题，最后终于解决了。&lt;/p>
&lt;p>终于把一个老程序的数据库引擎从恶心的 access 换成了可爱的 sqlite 了。&lt;/p></description></item><item><title>完美的星期天</title><link>https://sbabybird.github.io/p/%E5%AE%8C%E7%BE%8E%E7%9A%84%E6%98%9F%E6%9C%9F%E5%A4%A9/</link><pubDate>Sun, 14 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%AE%8C%E7%BE%8E%E7%9A%84%E6%98%9F%E6%9C%9F%E5%A4%A9/</guid><description>&lt;p>早上六点蒙蒙胧胧醒来，看了一眼时间又昏睡过去，再睁开眼已经九点半了，起来洗漱完毕刚要做饭，接到老杨电话，需要火速出去办点儿公事。&lt;/p>
&lt;p>好吧，早饭成了一杯麦当劳里的咖啡。&lt;/p>
&lt;p>办完事回来已是中午，在老杨家喝了一点儿小酒，喝的微醺，毕竟六十七度的&amp;quot;老白干&amp;quot;不是浪得虚名。&lt;/p>
&lt;p>吃完饭就顺势去了老居家里，约了大宝来打牌，大宝二话不说提着新买的麻将牌一路小跑就过来了。&lt;/p>
&lt;p>就这样，在午后洒满温暖阳光的客厅里，我们忙里偷闲，搓了一下午的麻将。&lt;/p></description></item><item><title>又要降温</title><link>https://sbabybird.github.io/p/%E5%8F%88%E8%A6%81%E9%99%8D%E6%B8%A9/</link><pubDate>Sat, 13 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8F%88%E8%A6%81%E9%99%8D%E6%B8%A9/</guid><description>&lt;p>据一向不靠谱的天气预报说，最近又有大风降温天气，明天就席卷而来了，但愿不会影响我的跑步计划。&lt;/p></description></item><item><title>白瞎了这么好的月亮</title><link>https://sbabybird.github.io/p/%E7%99%BD%E7%9E%8E%E4%BA%86%E8%BF%99%E4%B9%88%E5%A5%BD%E7%9A%84%E6%9C%88%E4%BA%AE/</link><pubDate>Fri, 12 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%99%BD%E7%9E%8E%E4%BA%86%E8%BF%99%E4%B9%88%E5%A5%BD%E7%9A%84%E6%9C%88%E4%BA%AE/</guid><description>&lt;p>今夜星光灿烂，今晚月色撩人，据传闻今晚月亮正好处在与地球相聚最近的位置，所以应该开起来特别的大。&lt;/p>
&lt;p>刚刚跑步的时候，证实了这一说法，月亮果然又大又圆，感觉就在我家楼顶上似的，我忍不住跑回去拿出相机来拍照。&lt;/p>
&lt;p>结果是让人失望的，我的相机既没有三脚架，也没有好镜头，再搭上我这个糟糕的摄影师，真是白瞎了这么好的月光了，我在寒风中冻得瑟瑟发抖，鼻涕都快滴到液晶屏幕上了，照片要么漆黑一片，要么抖得天上到处是月亮，唉！&lt;/p></description></item><item><title>冒个泡</title><link>https://sbabybird.github.io/p/%E5%86%92%E4%B8%AA%E6%B3%A1/</link><pubDate>Thu, 11 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%92%E4%B8%AA%E6%B3%A1/</guid><description>&lt;p>看来我就是把 livespaces 当微博了，每次都懒得多打几个字。&lt;/p>
&lt;p>原因来自各个方面，尤其工作压力，每天徘徊在办公室的椅子和卧室的大床直接，两点一线的生活使我很难再提起兴致在博客里扯闲篇。&lt;/p>
&lt;p>今天仍然顶着严寒跑步，空气不是很好，跑步系数为 1★☆☆☆☆不适合跑步。&lt;/p></description></item><item><title>跑步继续！！！</title><link>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E7%BB%A7%E7%BB%AD/</link><pubDate>Wed, 10 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E7%BB%A7%E7%BB%AD/</guid><description>&lt;p>温度回升到最冷才-6 度了，风也不那么大了，暂停了整整一周的跑步计划，今天正式恢复。&lt;/p>
&lt;p>室外其实没我想象的那么冷，上身只穿了一件羊毛衫，仍然跑的微微出汗，拿着秒表的手刚开始感觉快要冻僵，但跑了一会儿之后就感觉很暖和了。&lt;/p>
&lt;p>路况比我想象的糟糕，由于白天飘了几片雪花的缘故，导致部分路面已经结冰，跑在上面十分危险，差点摔倒。&lt;/p>
&lt;p>总的来说，跑一跑还是很舒坦的。&lt;/p></description></item><item><title>雪呢？</title><link>https://sbabybird.github.io/p/%E9%9B%AA%E5%91%A2/</link><pubDate>Wed, 10 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%9B%AA%E5%91%A2/</guid><description>&lt;p>昨天天气预报说，今夜迎来第一场雪，可是，感觉又被忽悠了。Ps:一大早在车上通过黑莓发送&lt;/p></description></item><item><title>我的palm饿死了</title><link>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84palm%E9%A5%BF%E6%AD%BB%E4%BA%86/</link><pubDate>Tue, 09 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84palm%E9%A5%BF%E6%AD%BB%E4%BA%86/</guid><description>&lt;p>前年的时候，我淘到一个 palm，正式成为&amp;quot;胖友&amp;quot;，买回来后折腾了很久，反复安装软件，又反复的卸载掉，最后仅保留了几个看书的软件，这个 palmtt 的屏幕看书真的是没话说，非常舒适，我也在上面看了大概有几十本小说，几回回抱着 palm 到天亮，呵呵。&lt;/p>
&lt;p>但是毕竟是个老机器了，速度慢，功能弱，最让我头疼的是，他的电池越来越不行了，后来，我又把手写笔丢了，再后来，也就是今年 5 月，一冲动买了个 epc，就是所谓的&amp;quot;上网本、二奶机&amp;quot;，这下 palm 彻底失宠，我很少再将它带在身边，&lt;/p>
&lt;p>直到上周末，我整理桌子的时候才发现奄奄一息地他躺在抽屉里，我竟然没搭理他，继续整理我的音箱，今天才又想起来。掏出来一看，由于长期没充电，里面的资料全丢了，还好没什么重要内容，&lt;/p>
&lt;p>但我辛苦挑选的软件全没了，我干脆给他擦了擦灰，将所有配件整理到一起，全部锁进抽屉里，再见吧您呐。&lt;/p></description></item><item><title>为什么wall-e这么可爱？</title><link>https://sbabybird.github.io/p/%E4%B8%BA%E4%BB%80%E4%B9%88wall-e%E8%BF%99%E4%B9%88%E5%8F%AF%E7%88%B1/</link><pubDate>Mon, 08 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%BA%E4%BB%80%E4%B9%88wall-e%E8%BF%99%E4%B9%88%E5%8F%AF%E7%88%B1/</guid><description>&lt;p>为什么 wall-e 这么可爱？这是我看完《机器人 wall-e》之后一直在想的问题。&lt;/p>
&lt;p>无论是是他捧着电板给自己充电时的样子，还是手足无措时搓腿（其实搓的是他的&amp;quot;履带&amp;quot;）的动作，都可爱得让人抓狂。&lt;/p>
&lt;p>现在，我总结一下，让我觉得这个小机器人可爱的原因大概有以下几点：&lt;/p>
&lt;p>1、他总是很开心的工作，他很乐观，吹着口哨上班，当地球上只剩下他自己时仍然乐观地活着，对了还有一只蟑螂是他的朋友。&lt;/p>
&lt;p>2、他很善良，不小心压了小蟑螂一下（他的履带很宽）就后悔的不行，还好&amp;quot;小强&amp;quot;并非浪得虚名，不仅没事儿还和 walle 玩得很开心。&lt;/p>
&lt;p>3、他很单纯，傻乎乎的，没有心眼儿，连伊娃的手都不敢拉一下。&lt;/p>
&lt;p>4、有爱，为了倾慕的女机器人（伊娃）不惜一切代价，以至于芯片烧毁。暂时就说这么多吧，皮克斯的这部动画片还是像以往的那样用简单故事打动人的心。&lt;/p></description></item><item><title>真正的“书架箱”</title><link>https://sbabybird.github.io/p/%E7%9C%9F%E6%AD%A3%E7%9A%84%E4%B9%A6%E6%9E%B6%E7%AE%B1/</link><pubDate>Sun, 07 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%9C%9F%E6%AD%A3%E7%9A%84%E4%B9%A6%E6%9E%B6%E7%AE%B1/</guid><description>&lt;p>昨天花了一下午的时间把我的书柜和电脑重新整理了一遍，把惠威的 2.1 音箱移到了显示器旁边，把漫步者 2.0 的移到了书架的二层，与书挤在了一起，成了名副其实的书架箱。&lt;/p>
&lt;p>电脑机箱后面的连线乱成了一锅粥，费了很大的劲才整理通顺。&lt;/p>
&lt;p>现在，音箱与书柜成为一个整体，整个书柜便是一个巨大的音箱，用来听音乐那叫一个爽！&lt;/p></description></item><item><title>跑步暂停！</title><link>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E6%9A%82%E5%81%9C/</link><pubDate>Fri, 05 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E6%9A%82%E5%81%9C/</guid><description>&lt;p>寒流来袭，最高温度才零下 2 度，外面冷的能把人冻傻，在我还未被冻傻之前，先做出一个明智的决定，无限期暂停跑步计划，风太大，空气又凉，我又没有自虐倾向，还是在屋里待着暖和。&lt;/p></description></item><item><title>据说明天要降温</title><link>https://sbabybird.github.io/p/%E6%8D%AE%E8%AF%B4%E6%98%8E%E5%A4%A9%E8%A6%81%E9%99%8D%E6%B8%A9/</link><pubDate>Wed, 03 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8D%AE%E8%AF%B4%E6%98%8E%E5%A4%A9%E8%A6%81%E9%99%8D%E6%B8%A9/</guid><description>&lt;p>北京的天气要降温的消息已经提前三天放出，电视、网络反复强调，就连公司内部的网络都发布温馨小贴士提醒大家注意加衣服了。&lt;/p>
&lt;p>今晚跑步的时候明显感受到寒风的力度，不过我还是跑得微微出汗。&lt;/p>
&lt;p>昨晚（应该说是今早）睡的实在太晚，今天在回来的车上都昏昏欲睡，刚刚跑完步回来后洗了个热水澡，本来困倦的身体又感觉精神了，打开电脑，在日志里罗嗦两句再睡。&lt;/p></description></item><item><title>早啊，各位！</title><link>https://sbabybird.github.io/p/%E6%97%A9%E5%95%8A%E5%90%84%E4%BD%8D/</link><pubDate>Wed, 03 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%97%A9%E5%95%8A%E5%90%84%E4%BD%8D/</guid><description>&lt;p>没错，我还在办公室里，还在加班，而且意识还很清醒，我还活着。&lt;/p>
&lt;p>现在的时间是凌晨的 0 点 10 分，再过半个小时，如果一切顺利的话，我就要打车回去睡觉了，差不多还能再睡 4 个小时呢。&lt;/p>
&lt;p>然后，我就要从床上爬起来，洗洗脸，刷刷牙，迎着还没出来的太阳，再次奔上开向公司的地铁。&lt;/p>
&lt;p>没办法，既然选择程序员这个连妓女都不如的职业，就要接受没日没夜的加班生活，就像我们经常在程序中&amp;quot;拿空间换时间&amp;quot;那样，现实中，我们在&amp;quot;拿健康换时间&amp;quot;，等到健康剩得不多、徐娘半老之时也就是我们的退休之日吧。&lt;/p>
&lt;p>因为到了那个时候，我们将再也加不动班，再也爬不上车，可能连敲键盘的力气都没有了，而且又会有一大批精壮的程序员前赴后继的补充上来，再次走上我们走过的路&amp;hellip;&amp;hellip;&lt;/p></description></item><item><title>还没回家</title><link>https://sbabybird.github.io/p/%E8%BF%98%E6%B2%A1%E5%9B%9E%E5%AE%B6/</link><pubDate>Tue, 02 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%BF%98%E6%B2%A1%E5%9B%9E%E5%AE%B6/</guid><description>&lt;p>再过十分钟就过了今天跑步的时限了，而现在我仍旧坐在办公室里，喝着温热的开水，盯着跑焦的屏幕。&lt;/p></description></item><item><title>一个月</title><link>https://sbabybird.github.io/p/%E4%B8%80%E4%B8%AA%E6%9C%88/</link><pubDate>Mon, 01 Dec 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%80%E4%B8%AA%E6%9C%88/</guid><description>&lt;p>前天有同事问我说，跑步坚持了一段时间了，感觉如何，有什么效果没有，我说不知道，估计以后就不怎么感冒吧。&lt;/p>
&lt;p>此话尚未落音，今儿就开始感冒了，打了好几个打喷嚏，嗓子也开始干了。&lt;/p>
&lt;p>我从十一月一号开始跑步，一天也没落下，跑步时间基本上都是在晚上 8 点至 9 点之间，每次绕小区一圈，跑十几分钟，感觉良好。&lt;/p></description></item><item><title>update</title><link>https://sbabybird.github.io/p/update/</link><pubDate>Sun, 30 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/update/</guid><description>&lt;p>让我看看 blog 标题里能不能出现&amp;quot;关键字&amp;quot;ps：一个累人的周末。&lt;/p></description></item><item><title>一拖四</title><link>https://sbabybird.github.io/p/%E4%B8%80%E6%8B%96%E5%9B%9B/</link><pubDate>Sat, 29 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%80%E6%8B%96%E5%9B%9B/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E4%B8%80%E6%8B%96%E5%9B%9B/20081229.jpg" alt="Featured image of post 一拖四" />&lt;p>近日，我的机器速度越来越慢，内存占用常常超过 1.5G，尤其是开了 office 之后，其操作反应之慢令人发指，考虑再三之后，我决定还是不重装系统，先手动优化两下再说。&lt;/p>
&lt;p>首当其冲的是卸载多余软件了，我是软件狂人，开始菜单完全展开几乎将屏幕挤满，一口气卸载十几个不常用软件，然后使用 ccleaner 清理垃圾，清理注册表，清理回收站，清理缓存。&lt;/p>
&lt;p>重启。还是觉得不过瘾，进入控制面板，把不常用的服务给停掉，就连桌面主题服务都停掉了。&lt;/p>
&lt;p>重启。&lt;/p>
&lt;p>还是觉得不过瘾，打开系统任务管理器查看了一下，Firefox 最占内存，但是这个千万不能卸载啊，其次是 qq 占内存，卸载之，然后发现 msn 也很不老实，卸载之，看着飞信也很不爽，卸载！&lt;/p>
&lt;p>这下，整个世界清静了，内存占用只剩下四百 M 了，速度提高了不少。&lt;/p>
&lt;p>可是咱也不能聊天啊，于是想到了 Pidgin 这个在 Linux 下很火的软件，下载安装后，发现居然还支持飞信，于是我用它同时连接 gtalk、qq、msn、飞信，体验很好，另外还可替代 aol、icq、雅虎等多种聊天客户端。&lt;/p>
&lt;p>这下好了，以前啊聊天总是要开多个程序，麻烦，现在啊有了 Pidgin 高钙片，一片顶过去 5 片，您瞅准了！是 Pidgin！&lt;/p>
&lt;p>ps：今日跑步指数★★★☆☆&lt;/p></description></item><item><title>差点没出差</title><link>https://sbabybird.github.io/p/%E5%B7%AE%E7%82%B9%E6%B2%A1%E5%87%BA%E5%B7%AE/</link><pubDate>Thu, 27 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%B7%AE%E7%82%B9%E6%B2%A1%E5%87%BA%E5%B7%AE/</guid><description>&lt;p>由于项目的需要，下周需要我出差，本来出去散散心也挺爽的，只是我担心我的跑步计划会搁浅一段时间，因为到了现场就没时间去跑步了，就算不整天调程序也没有跑步的地方，总不能在大马路上伸着舌头撵公交吧。&lt;/p>
&lt;p>但是，计划没有变化快，由于北京这边又有优先级更高的活儿，所以，暂时不用出差了，哦也。&lt;/p>
&lt;p>ps：今日天气（我估计的），晴间多云，风力 2、3 级转 4、5 级，最高温度 20 度（室内）最低温度 0 度，跑步指数：3(★★★☆☆)适宜跑步。&lt;/p></description></item><item><title>坚持</title><link>https://sbabybird.github.io/p/%E5%9D%9A%E6%8C%81/</link><pubDate>Wed, 26 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9D%9A%E6%8C%81/</guid><description>&lt;p>下班晚也就算了，还刮这么大的风，跑得我那叫一个累啊，回来的时候我一边喘粗气一边想：&amp;quot;啥时候下大雪啊&amp;quot;&lt;/p></description></item><item><title>文档！文档！</title><link>https://sbabybird.github.io/p/%E6%96%87%E6%A1%A3%E6%96%87%E6%A1%A3/</link><pubDate>Tue, 25 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%96%87%E6%A1%A3%E6%96%87%E6%A1%A3/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%96%87%E6%A1%A3%E6%96%87%E6%A1%A3/20081225.png" alt="Featured image of post 文档！文档！" />&lt;p>快要下班的时候，我的眼神已经分外地扑簌迷离了，审核了一天的文档，看了再写，写了再看，千锤百炼。&lt;/p>
&lt;p>瞅了瞅身边的同事，个个被文档折磨得目光呆滞，面如死灰，头发蓬乱，口吐白沫。&lt;/p>
&lt;p>说实话，我宁愿写一千行代码也不愿意写一行文档，宁愿写一行文档，也不愿去审一千行文档。&lt;/p>
&lt;p>因为，审文档你得咬文嚼字，你得反复推敲，就算是仅仅挑出错别字就已经很费神了。&lt;/p>
&lt;p>慢慢地，我感觉到文字在屏幕上开始爬行，一会儿排成人字，一会儿又排成一字。&lt;/p>
&lt;p>ps：跑步一直在继续，耶！&lt;/p></description></item><item><title>远去的DVD</title><link>https://sbabybird.github.io/p/%E8%BF%9C%E5%8E%BB%E7%9A%84dvd/</link><pubDate>Mon, 24 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%BF%9C%E5%8E%BB%E7%9A%84dvd/</guid><description>&lt;p>第一次见识 DVD 的清晰是在上大学的时候，在我们刚刚落成的多媒体教室，好像还是&amp;quot;邓论&amp;quot;课，老师看大家实在闷的慌，就放了一部《角斗士》来调节气氛，播放器材就是 DVD 加投影机。&lt;/p>
&lt;p>我现在印象最深刻的一个镜头是，男主角走在金黄的麦田里，用手拨弄着麦穗，身边荡起层层麦浪，这个镜头太美了，DVD 清晰的画质深深震撼了我。&lt;/p>
&lt;p>不久，在我的软磨硬泡下，家里也给我买了一台 DVD（顺便买了不错的音响，暂且按下不表），我欢喜的不得了，可惜没有投影机，因为当时动辄十几万一台的投影机对我来说只能奢望，当然，现在也是。然后就是开始疯狂收碟，从《勇敢的心》到《杀手里昂》，从《喜剧之王》到《阿甘正传》，反正当时我认为经典的电影全部收藏，两年下来，在零花钱不是特别充裕的情况下，我&amp;quot;收藏&amp;quot;了将近 200 张 DVD（现在还剩几十张了）&lt;/p>
&lt;p>虽然是盗版，但是过来人都知道，在国内，盗版 DVD 实际上比正版 DVD 画质都要好（当然要选对牌子咯，这个话题说起来就扯远了）。&lt;/p>
&lt;p>当时我逛街最怕两件事，一个是进书店，另一个就是进碟店，因为无论走进哪个，我出来之后钱包准空。&lt;/p>
&lt;p>不过和真正收碟的碟友比起来我这几张真的不算啥，我后来认识了一个哥们，光正版碟就收了 1000 多张（刚工作的工资全花在买碟上了），同样的电影，要买两份，一张平时看，一张摆那儿永远也不舍得打开看。&lt;/p>
&lt;p>还是醒醒吧，我现在已经几乎不看 DVD 了，而且也不再买碟。&lt;/p>
&lt;p>一方面是因为随着年龄的增长，工作将我的各种兴趣爱好磨灭了不少，另一方面是因为网络飞速发展，DVD 这种存储介质渐渐走向衰败，即使偶尔想看两眼电影，也随时可以在线观看。&lt;/p>
&lt;p>虽然现在又推出新格式的蓝光 DVD，但是我认为它也基本没戏，就像过气的女明星，无论怎么打扮也难逃被抛弃的命运。&lt;/p>
&lt;p>现在再看看那些卖碟的小贩，谈起 DVD 极不专业，而且以次充好，老拿电影院偷拍的枪版糊弄人，再者就是 n 合一的压缩碟，这种格式彻底毁掉了我对 DVD 的兴趣，要画质没画质要音质没音质，除了毁坏光驱，再也找不到别的用处了。&lt;/p>
&lt;p>另外也别跟我扯新一代蓝光 DVD 的容量和清晰度，还是那句话，&amp;quot;我很不看好你哟&amp;quot;，因为我认为，随着网络技术的发展，硬盘、光盘、优盘、这些存储介质都将被淘汰。&lt;/p>
&lt;p>什么？你说咱们还有完全自主知识产权的 EVD 呢？我只能说：&amp;quot;呵呵，大哥，你可真会讲笑话，这是我今天听到的最好笑的笑话了&amp;quot;&lt;/p></description></item><item><title>晚安</title><link>https://sbabybird.github.io/p/%E6%99%9A%E5%AE%89/</link><pubDate>Sun, 23 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%99%9A%E5%AE%89/</guid><description>&lt;p>不错的周末，把太阳能热水器里的水放干净了，热水已切换到燃气系统了，地暖系统也恢复正常了，房间也打扫干净了，看了部老电影，天就黑了，跑完步回来泡个脚，睡了。&lt;/p></description></item><item><title>在傍晚跑步</title><link>https://sbabybird.github.io/p/%E5%9C%A8%E5%82%8D%E6%99%9A%E8%B7%91%E6%AD%A5/</link><pubDate>Sat, 22 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9C%A8%E5%82%8D%E6%99%9A%E8%B7%91%E6%AD%A5/</guid><description>&lt;p>今天要去朋友家吃晚饭，所以我预计晚上的跑步计划会无法执行，干脆提前跑步，在太阳将要下山之前，绕着小区跑了一圈，感觉比在晚上伴着路灯跑要好的多，可惜啊，这种机会也只有周末才有。&lt;/p></description></item><item><title>大周末</title><link>https://sbabybird.github.io/p/%E5%A4%A7%E5%91%A8%E6%9C%AB/</link><pubDate>Fri, 21 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A4%A7%E5%91%A8%E6%9C%AB/</guid><description>&lt;p>再次迎来双休日，虽然明天要有半天公事，但是毕竟不是去加班，感觉挺爽。&lt;/p></description></item><item><title>垃圾网上银行</title><link>https://sbabybird.github.io/p/%E5%9E%83%E5%9C%BE%E7%BD%91%E4%B8%8A%E9%93%B6%E8%A1%8C/</link><pubDate>Thu, 20 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9E%83%E5%9C%BE%E7%BD%91%E4%B8%8A%E9%93%B6%E8%A1%8C/</guid><description>&lt;p>今日要去建行转些钱到支付宝，被逼无奈使用了我最讨厌的 ie 浏览器，输入帐户名、密码、验证码，没问题，选择证书和动态加密口令也没问题，就在最后那一哆嗦，网页弹出一个小空白页面就再也不动了，连续两次都是这样，废掉了我两个动态口令，求救客服半个多钟头也没有搞定问题。&lt;/p>
&lt;p>现在，我分析，引起问题的原因：&lt;/p>
&lt;p>1、ie 不求行&lt;/p>
&lt;p>2、有防火墙&lt;/p>
&lt;p>3、银行网站很烂&lt;/p>
&lt;p>4、人品问题&lt;/p>
&lt;p>5、以上原因都有&lt;/p></description></item><item><title>找钱</title><link>https://sbabybird.github.io/p/%E6%89%BE%E9%92%B1/</link><pubDate>Wed, 19 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%89%BE%E9%92%B1/</guid><description>&lt;p>跑完步，口渴，走到小区门口超市买酸奶喝。这是一个袖珍超市，但是麻雀虽小五脏俱全，所以我懒得去大超市了。&lt;/p>
&lt;p>这么晚了，超市也快收工了，只有我一个顾客，门口的收银员打着哈欠，我拎了一盒酸奶出来。&lt;/p>
&lt;p>&amp;quot;九块钱&amp;quot;收银员说，由于零钱不够了，我只好拿出一张一百的，&amp;quot;请问您有没有一块钱零钱？&amp;quot;她接着问&amp;quot;这样就可以找你九十了&amp;quot;，翻遍口袋，摸出一块钱给她。&lt;/p>
&lt;p>这个时候，只见超市的 pos 机屏幕上写着：收 101.00 元、应找零 92.00 元。看来我的大脑也有点儿缺氧&lt;/p></description></item><item><title>感谢妈妈</title><link>https://sbabybird.github.io/p/%E6%84%9F%E8%B0%A2%E5%A6%88%E5%A6%88/</link><pubDate>Tue, 18 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%84%9F%E8%B0%A2%E5%A6%88%E5%A6%88/</guid><description>&lt;p>我的胃不太好，为此，我妈颇为担忧，&lt;/p>
&lt;p>有天，我妈听说一个单方，可以养胃，即在枕头里装上炒熟的甘草（中药），&lt;/p>
&lt;p>每天睡觉枕着就行，该方法不但使用简单而且可操作性强。&lt;/p>
&lt;p>于是前两天就在 QQ 上给我说了，我觉得试试也行，我妈就立刻行动（好习惯），&lt;/p>
&lt;p>结果我今天就收到了快递。打开一看，跳出一个制作精美的枕头，散发出甘草的清香，&lt;/p>
&lt;p>这可是我妈亲手缝制，对我来说真是无比珍贵。今晚就要枕着它入眠，在梦里露出灿烂的笑容。&lt;/p></description></item><item><title>风</title><link>https://sbabybird.github.io/p/%E9%A3%8E/</link><pubDate>Mon, 17 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%A3%8E/</guid><description>&lt;p>今天跑步最大的感觉就是有风，说是刺骨的寒风有点儿夸张，但是你要是在里面站立半个钟头的话，保证能冻傻。&lt;/p>
&lt;p>我发现无论往那个方向跑都是顶风，吹得我快要飘起来，有一阵子甚至感到呼吸困难，意识模糊，后来就加速奔跑，并打破了昨天的记录。&lt;/p>
&lt;p>天越来越冷了，我的跑步计划迎来了严峻的考验。&lt;/p></description></item><item><title>跑步在继续</title><link>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E5%9C%A8%E7%BB%A7%E7%BB%AD/</link><pubDate>Sun, 16 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E5%9C%A8%E7%BB%A7%E7%BB%AD/</guid><description>&lt;p>不容易，坚持半个月了，加油。&lt;/p></description></item><item><title>测试</title><link>https://sbabybird.github.io/p/%E6%B5%8B%E8%AF%95/</link><pubDate>Sat, 15 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>此篇博客通过电子邮件发送生成，此电子邮件又是通过手机发送。如果都能看见，说明测试成功！&lt;/p></description></item><item><title>掉线</title><link>https://sbabybird.github.io/p/%E6%8E%89%E7%BA%BF/</link><pubDate>Sat, 15 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8E%89%E7%BA%BF/</guid><description>&lt;p>昨天网络掉了一夜的线，早晨才恢复，宽带客服的电话都被打爆了，我好不容易挤进去一个电话，被告知他们全部技术人员都在彻夜加班抢修故障，我靠，看来干技术的全是这样儿的命啊！本着惺惺相惜的态度，我也只好随便发两句牢骚就把电话挂了。&lt;/p>
&lt;p>ps：昨天跑步速度比平时稍快。&lt;/p></description></item><item><title>喂鱼记</title><link>https://sbabybird.github.io/p/%E5%96%82%E9%B1%BC%E8%AE%B0/</link><pubDate>Sat, 15 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%96%82%E9%B1%BC%E8%AE%B0/</guid><description>&lt;p>公司的旁边有一个公园，公园里有一个人工湖。&lt;/p>
&lt;p>该湖曾一度干涸，后来托奥运的福，这个湖做了一次整改，现在，里面不但放满了碧绿的自来水，还撒了一群可供观赏的鱼。&lt;/p>
&lt;p>我会在每天午饭后，独自或和同事一起到这里来溜达一圈，一方面是促进消化，还有就是这里的空气真是不错，所以我才会放弃网上冲浪而到这里来晒晒太阳。&lt;/p>
&lt;p>每次都会看到那群傻乎乎的鱼争抢人们洒下的鱼食，由于鱼多食少，大家抢得异常激烈，一时间水花翻涌（让晶晶过来都压不住），场面甚为状观。&lt;/p>
&lt;p>至于撒食的人，就感觉颇有成就感，我在旁边看着也心里痒痒，总想试试，找找当圣诞老人的感觉。&lt;/p>
&lt;p>今天吃饭时故意多要了一个馒头，跟同事说一会儿要喂鱼，同事笑话我说：“你现在嘴里嚼着鱼，居然也假腥腥的要喂鱼”我说“算是补偿吧！”到了地方，发现有人已经先到一步，一群鱼儿在他脚下吃的正欢。&lt;/p>
&lt;p>我和同事两个人迫不及待地掏出馒头，拿出吃羊肉泡的功夫（掐啊），就开始往水里洒。&lt;/p>
&lt;p>扔了半天，却不见大群的鱼过来，仅有少量老弱病残在这边尝了两口就又游走了，我尴尬地站在湖边，眼看着手里掰下的馒头屑，都打了水飘。仔细一看，还真是我太马乎了，原来先前那人仍的可是上好的面包啊，看来，不仅有崇洋媚外的人，也有崇洋媚外的鱼，这帮混蛋也喜欢吃西餐啊！&lt;/p>
&lt;p>PS：第一次用手机打这么多字，手指酸痛 ing。&lt;/p></description></item><item><title>不能缩水</title><link>https://sbabybird.github.io/p/%E4%B8%8D%E8%83%BD%E7%BC%A9%E6%B0%B4/</link><pubDate>Thu, 13 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8D%E8%83%BD%E7%BC%A9%E6%B0%B4/</guid><description>&lt;p>今天回来时很累，于是就有了改变跑步路线的想法，即，仅从车站跑回家，这样既跑了步，又节约了时间，但这个念头转瞬即逝，立即被否定。&lt;/p>
&lt;p>从车站到家的这段路虽然走起来显得不近，但是跟平日跑步的距离比起还是太短，而且这样就视跑步成为一种应付了。&lt;/p>
&lt;p>所以为了防止跑步计划到最后不了了之，我今天还是老老实实地跑了一圈。&lt;/p></description></item><item><title>补上</title><link>https://sbabybird.github.io/p/%E8%A1%A5%E4%B8%8A/</link><pubDate>Wed, 12 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%A1%A5%E4%B8%8A/</guid><description>&lt;p>昨晚回家晚了，跑步也晚了，然后就睡了，忘了在日志里报告，今早补上。&lt;/p>
&lt;p>这两天忒忙了，事情一件件的接踵而来，忙的我有点儿喘气。&lt;/p>
&lt;p>有句话说的好，出来混迟早要还的，以前程序的 demo 做的再好也是假的，现在要动真格的了，撒开手忙活吧！&lt;/p></description></item><item><title>何以解忧，唯有唱歌</title><link>https://sbabybird.github.io/p/%E4%BD%95%E4%BB%A5%E8%A7%A3%E5%BF%A7%E5%94%AF%E6%9C%89%E5%94%B1%E6%AD%8C/</link><pubDate>Wed, 12 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BD%95%E4%BB%A5%E8%A7%A3%E5%BF%A7%E5%94%AF%E6%9C%89%E5%94%B1%E6%AD%8C/</guid><description>&lt;p>今天差点儿达到无法执行跑步计划的条件之一（加班到深夜），还好，我及时搞定了问题。&lt;/p>
&lt;p>上午也说到了，现在手头事儿特别多，程序的问题也不断涌现，而我又特别不喜欢多任务并行工作（我想没人喜欢吧），并行工作会导致大脑里思考的东西在不断地切换，每个任务都要照顾到，每个任务又很难照顾好。&lt;/p>
&lt;p>于是，问题来了，下午快下班的时候我的一段程序罢工了，这段代码在半年前由我亲手调制，当时跑起来一点问题都没有，现在着急用的时候却掉了链子，急得我快要抓狂。&lt;/p>
&lt;p>问题还是解决了，怎么解决的呢？&lt;/p>
&lt;p>唱歌！下班之后，反正人走的差不多了，也不怕打搅别人，为了缓解压力，我只有使出&amp;quot;杀手锏&amp;quot;，那就是&amp;mdash;-&lt;/p>
&lt;p>胡乱唱歌，无论是中国的还是外国的，是民族的还是通俗的，顺嘴拈来，逮着哪句是哪句，什么&amp;quot;千里刀光影，重整代码待后生&amp;quot;、&amp;quot;你说要崩溃我知道很简单&amp;quot;、&amp;quot;小芹我洗衣裳来到河边&amp;quot;等等。&lt;/p>
&lt;p>唱着唱着，我就觉得豁然开朗了，柳暗花明了，茅厕顿开了，原来是某行代码被无声地注释掉了（其实早该想到），看来唱歌的效果简直是立竿见影呐。&lt;/p>
&lt;p>不光是现在，其实回想起来，唱歌一直是我缓解压力的惯用方式（可以参见这一篇博客），唱歌的地方并不限于在 ktv，也不是要老老实实拿捏着唱，要的就是那种随心所欲飘飘然的感觉，大学的时候，每到期末考试我都会整天哼一首类似于&amp;quot;姑娘十八一朵花&amp;quot;的歌儿，这样的话，我不但门门功课都能过，到最后竟然还拿了三好学生！&lt;/p></description></item><item><title>天气不太好</title><link>https://sbabybird.github.io/p/%E5%A4%A9%E6%B0%94%E4%B8%8D%E5%A4%AA%E5%A5%BD/</link><pubDate>Mon, 10 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A4%A9%E6%B0%94%E4%B8%8D%E5%A4%AA%E5%A5%BD/</guid><description>&lt;p>今天的天气不是很好，空气质量特别差，用专业术语来说就是&amp;quot;霾&amp;quot;，在做了一番思想斗争之后，我还是决定出去跑步，因为这种天气情况不在我所定义的&amp;quot;不可抗拒之因素&amp;quot;之内。&lt;/p>
&lt;p>气喘吁吁地回来，用热水洗了个脚，美，懒得开大机器了，就用小 e 随便发几个字算了，顺便控诉一下，用小 e 打字可真是受罪。&lt;/p></description></item><item><title>复制昨天</title><link>https://sbabybird.github.io/p/%E5%A4%8D%E5%88%B6%E6%98%A8%E5%A4%A9/</link><pubDate>Sun, 09 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A4%8D%E5%88%B6%E6%98%A8%E5%A4%A9/</guid><description>&lt;p>今天和昨天过得一样，略微多了些上班前的焦躁，所以我还是喜欢周六多一些（哪怕那天是加班）。&lt;/p>
&lt;p>没空的时候总是想着抽出时间来多学习一些东西，等到周末时却又缺乏了耐心和兴趣，就像牛人说的那样，我所荒废的今日其实就是昨天所期盼的明日啊。&lt;/p>
&lt;p>当然了，荒废不荒废也不知是谁说了算。&lt;/p>
&lt;p>今天出去跑步的时间略早，发现有人也在跑步，只不过我是顺时针方向，那哥们儿是逆时针方向在跑，我们在西南角碰面，然后又在东北角擦肩，所以我可以断定他和我的速度是差不多的，不过，我回来时，人家可能还在继续跑。&lt;/p>
&lt;p>下午的时候，又拿了拿吉他（看来实在是无聊了），摁了两下，摁得左手生疼，发现以前磨出的茧子早下去了，手指光滑无比，连指纹都看不清，我说怎么前两天弄那个指纹识别程序时老调试不成功，看来我可以放心去作案了。&lt;/p>
&lt;p>写了半天，发现写的前言不答后语，难道这就是传说中的意识流？&lt;/p></description></item><item><title>超级小女声</title><link>https://sbabybird.github.io/p/%E8%B6%85%E7%BA%A7%E5%B0%8F%E5%A5%B3%E5%A3%B0/</link><pubDate>Sat, 08 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B6%85%E7%BA%A7%E5%B0%8F%E5%A5%B3%E5%A3%B0/</guid><description>&lt;p>喜欢听翻唱的歌曲也是个毛病点击小三角开始播放&lt;/p></description></item><item><title>一个普通的周末</title><link>https://sbabybird.github.io/p/%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E7%9A%84%E5%91%A8%E6%9C%AB/</link><pubDate>Sat, 08 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E7%9A%84%E5%91%A8%E6%9C%AB/</guid><description>&lt;p>虽然有时坐在电脑前不知道要写点儿啥，但是，我还是决定每天都在这里写几行字。&lt;/p>
&lt;p>一是为了监督我的跑步计划执行情况，防止三天打鱼两天晒网，二是每天记点儿流水帐，将来孙子吵着要我给他讲故事的时候再来翻翻素材。&lt;/p>
&lt;p>想起来一个笑话，爷爷在给孙子讲故事：&amp;quot;有一次，在战场上，这边只剩下我一个了，敌人冲上来一个连，我抱着机枪把他们全干掉了。&lt;/p>
&lt;p>&amp;quot;孙子说：&amp;quot;可是爷爷，您去年讲的时候说的是冲上来一个排啊？&lt;/p>
&lt;p>&amp;quot;&amp;quot;傻孩子，你那时还小，我怕吓着你！&amp;quot;&lt;/p>
&lt;p>跑题了，今天是周末，我没有加班，活儿永远都干不完，身体却只有一个，所谓，该出手时就出手，该休息时就休息。&lt;/p>
&lt;p>我仍然延续以往的作风，醒的比平时早，起的比平时早，然后开始洗衣服、打扫、做饭、刷碗、看电影&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>一天的时间一晃就过了，感觉也就是吃了三顿饭，然后天就黑了。&lt;/p>
&lt;p>今天跑步的时候感觉天气比平时要冷，小嗖风风地刮着，我还是坚持跑完一圈，速度还是不能太快，跑到额头微微出汗就行了。&lt;/p>
&lt;p>回来查看了一下日历，原来昨天是&amp;quot;立冬&amp;quot;，哦，冬天来了，春天还会远吗？&lt;/p></description></item><item><title>爽事儿两件</title><link>https://sbabybird.github.io/p/%E7%88%BD%E4%BA%8B%E5%84%BF%E4%B8%A4%E4%BB%B6/</link><pubDate>Fri, 07 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%88%BD%E4%BA%8B%E5%84%BF%E4%B8%A4%E4%BB%B6/</guid><description>&lt;p>1、把我的 epc 升级成 ubuntu 的操作系统了。&lt;/p>
&lt;p>比起它自带的那个阉割版操作系统，界面华丽了，软件丰富了，操作更自由了，爽！&lt;/p>
&lt;p>2、家里的宽带在费用不上涨的情况下从 1M 升级到 1.5M 了。&lt;/p>
&lt;p>虽然感觉也没比以前快了多少，但心里还是美滋滋的，爽！&lt;/p>
&lt;p>ps：跑步仍在继续！&lt;/p></description></item><item><title>天涯共此时</title><link>https://sbabybird.github.io/p/%E5%A4%A9%E6%B6%AF%E5%85%B1%E6%AD%A4%E6%97%B6/</link><pubDate>Thu, 06 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A4%A9%E6%B6%AF%E5%85%B1%E6%AD%A4%E6%97%B6/</guid><description>&lt;p>跑完步回来都九点多了，出差在外的同事一个接一个的打回来电话，原来这帮儿不要命的家伙还在加班。&lt;/p>
&lt;p>先是远在宁夏的兄弟告诉我刚做的 PPT 需要修改，然后是身在河南的项目组打电话咨询版本控制的问题，最后是被发配到青海的哥们儿在电话里用略带嘶哑的嗓音和我一起探讨了一会儿程序路径分支的问题，然后又像是梦游一般地把电话挂掉&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>放下电话，我不禁要问（焦点访谈看多了），沟通的方便是帮了我们还是坑了我们？&lt;/p>
&lt;p>得亏了信息科技的发达啊，要是远在飞鸽传书的年代，我把代码写好，然后抄到一张小纸条上，绑在鸽子腿上，趁它还没飞抵现场调试的时候，美美地睡上一觉。&lt;/p></description></item><item><title>手机发的</title><link>https://sbabybird.github.io/p/%E6%89%8B%E6%9C%BA%E5%8F%91%E7%9A%84/</link><pubDate>Wed, 05 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%89%8B%E6%9C%BA%E5%8F%91%E7%9A%84/</guid><description>&lt;p>今天回来的有点儿晚，并且跑步的距离有所延长，大概比前几次多跑了三百米。电脑都关了，才想起还没有做记录，爬起来，用手机发个报告。&lt;/p></description></item><item><title>假如你看我有点儿累，就请你给我倒碗水</title><link>https://sbabybird.github.io/p/%E5%81%87%E5%A6%82%E4%BD%A0%E7%9C%8B%E6%88%91%E6%9C%89%E7%82%B9%E5%84%BF%E7%B4%AF%E5%B0%B1%E8%AF%B7%E4%BD%A0%E7%BB%99%E6%88%91%E5%80%92%E7%A2%97%E6%B0%B4/</link><pubDate>Tue, 04 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%81%87%E5%A6%82%E4%BD%A0%E7%9C%8B%E6%88%91%E6%9C%89%E7%82%B9%E5%84%BF%E7%B4%AF%E5%B0%B1%E8%AF%B7%E4%BD%A0%E7%BB%99%E6%88%91%E5%80%92%E7%A2%97%E6%B0%B4/</guid><description>&lt;p>今天又跑完步回来了，现在，我真是名副其实的&amp;quot;从容地狂奔&amp;quot;了，每晚都会出去&amp;quot;奔&amp;quot;一圈儿，只有这样才会觉得明天有&amp;quot;奔&amp;quot;头，才能洒脱地&amp;quot;奔&amp;quot;三十了。&lt;/p>
&lt;p>我上个周刚过的生日，就是说我上周还二十六（虚岁）呢，现在就二十七了（真的是虚岁）。&lt;/p>
&lt;p>最近总想活的更洒脱一些，但总是觉得很为难，因为总感觉自己太在意别人的看法，也就是老是拿别人的标准来衡量自己的生活，到不了那种&amp;quot;忘他&amp;quot;的境界，比如我有同事可以在地铁里一边大声唱歌一边跟我大谈&amp;quot;空间数据的网格索引&amp;quot;，牛逼吧？大学里有个同学，在大街上骑自行车，突然来了兴致，把车一摔，在路边跳了一段&amp;quot;麦考杰克逊&amp;quot;，然后在一片惊叹声中绝尘而去！&lt;/p>
&lt;p>洒脱吧？靠，我做不到，就算是在大街上唱歌我都不会。&lt;/p>
&lt;p>前两天，看了一篇文章，大致意思是，每个人生来都是一杯白水，随着时间的流逝，为了满足别人对我们的期望，这杯水被掺入了形形色色的杂质而变了味道，有些味道我们觉得好，但是别人觉得怪，或者又相反，最终大家都很不爽，文章最后劝我们别在乎别人怎么看，自己就做那杯最原始的白开水吧。&lt;/p>
&lt;p>看到最后，如果作者在我跟前，我想，我会把杂志卷成一卷儿，对着他的头来两下子，你的脑袋是不是被门挤了，还是被驴踢了？&lt;/p>
&lt;p>原因不再论述，这种忽悠人的文章以后还是少看为妙。&lt;/p>
&lt;p>我只想说，我还是会往我的杯子里，加入各种佐料，哪怕我不喜欢它，只要我的家人喜欢，或者我的家人认为我喜欢。&lt;/p>
&lt;p>我继续狂奔，我尽量学着在大街上唱歌，假如你看我有点儿累，就请你给我倒碗水。&lt;/p></description></item><item><title>跑步，有进步</title><link>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E6%9C%89%E8%BF%9B%E6%AD%A5/</link><pubDate>Sun, 02 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E6%9C%89%E8%BF%9B%E6%AD%A5/</guid><description>&lt;p>昨天跑完后没感觉，睡了一夜，今早感觉腿酸背痛，看来见效果了啊。&lt;/p>
&lt;p>今天继续跑步，距离与昨天相同，还是一圈，时间缩短 3 分钟，速度不是我追求的，跑步本身才重要，看来明天要延长路线了。&lt;/p></description></item><item><title>报告</title><link>https://sbabybird.github.io/p/%E6%8A%A5%E5%91%8A/</link><pubDate>Sat, 01 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8A%A5%E5%91%8A/</guid><description>&lt;p>上午制定了跑步的计划，旨在锻炼身体陶冶情操。&lt;/p>
&lt;p>说到就要做到，时间刚过 8 点一刻，我就换上球鞋（本来还想置办一套装备，但是看看动辄上千元的跑鞋只得作罢，还是等过几天跑步略显成效时再买吧）、塞上耳机，大步流星冲下楼去。&lt;/p>
&lt;p>HitFM 正在播放着动感音乐，伴着音乐的节拍，我迈开轻盈的步伐，前面两个保安晃来晃去，被我轻松越过（靠，又不是打篮球）。&lt;/p>
&lt;p>由于是刚开始跑，为了既达到锻炼效果又不丧失信心，我把速度放的很慢，基本上比散布快一些就行。&lt;/p>
&lt;p>总算绕着小区跑了一圈，心跳还算正常，喘气有些加速，身上也微微出汗。&lt;/p>
&lt;p>OK！我很满意，能否坚持下去虽然是个未知数，但毕竟好的开始已是成功的一小半。&lt;/p>
&lt;p>ps：这个跑步计划已经宣扬的全世界都知道了，要是跑两天即放弃，我岂不是无颜见江东父老了，唉，年轻人啊，爱冲动。&lt;/p></description></item><item><title>跑步吧！！！</title><link>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E5%90%A7/</link><pubDate>Sat, 01 Nov 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%B7%91%E6%AD%A5%E5%90%A7/</guid><description>&lt;p>午饭后，与远方的二舅聊起家常，说到锻炼身体的重要性。&lt;/p>
&lt;p>我说我没时间、坚持不下来，结果被二舅狠狠鄙视了，连二舅那么忙的人都能每天坚持锻炼，我就没啥话说了。&lt;/p>
&lt;p>据说他锻炼成果显著，现在腰不酸了背不疼了走路也有劲儿了。&lt;/p>
&lt;p>我想起今儿上午，和同事一起搬了台服务器都累的两股战战几欲先走（也怪那服务器忒沉），看来我是得加强锻炼了。&lt;/p>
&lt;p>想了半天，最后还是决定采用&amp;quot;跑步&amp;quot;这一经济实惠的锻炼方式，并制定计划：&lt;/p>
&lt;p>每晚 20 点半至 21 点间散步 10 分钟跑步 20 分钟（时间可根据情况提前或推后，但过了 22 点就取消当日计划）。&lt;/p>
&lt;p>除非遇到不可抗拒之因素（如下雪、加班到深夜等），否则一律坚持跑步！即日起，博客恢复更新，以记录跑步计划执行情况。&lt;/p></description></item><item><title>关于十一长假的总结</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E5%8D%81%E4%B8%80%E9%95%BF%E5%81%87%E7%9A%84%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 06 Oct 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E5%8D%81%E4%B8%80%E9%95%BF%E5%81%87%E7%9A%84%E6%80%BB%E7%BB%93/</guid><description>&lt;p>长假过完了，感觉如下：&lt;/p>
&lt;p>1、交通的痛苦，买不到回家的火车票，被黑了一张全价机票。&lt;/p>
&lt;p>返京时乘坐大巴，连续坐了 16 个小时，感觉要比乘坐神七痛苦。&lt;/p>
&lt;p>2、妹妹结婚了，打心底祝福她。&lt;/p>
&lt;p>小时候那个调皮的小女孩儿怎么转眼变成了端庄的大姑娘了呢。&lt;/p>
&lt;p>3、喝多一次，此次回家喝了 n 顿酒，和老同学在一起喝的那次喝多了。&lt;/p>
&lt;p>4、我还是那么瘦，几个老同学都陆续把自己的肚子搞大了，只有我继续瘦的像支铅笔。&lt;/p>
&lt;p>5、我仍然是家里的维修工，此次修理好了老家的 DVD、抽水马桶、电脑，并弄坏了老婆的手机（后来我又修好了）。&lt;/p>
&lt;p>6、美好的时间总是很短暂，每次相聚都是一次分手。&lt;/p></description></item><item><title>月饼</title><link>https://sbabybird.github.io/p/%E6%9C%88%E9%A5%BC/</link><pubDate>Sat, 13 Sep 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%88%E9%A5%BC/</guid><description>&lt;p>咱们的节日总是与吃有关，比如过年吃饺子，元宵节吃汤圆，端午吃粽子，六月六吃炒面，腊八吃米饭。&lt;/p>
&lt;p>中秋当然要吃月饼，而且要吃的相当隆重。&lt;/p>
&lt;p>在我的老家，刚入了八月大家就忙活着串亲戚送月饼了。&lt;/p>
&lt;p>一个人在外面，当然没人给我送月饼，为了找到一点儿过节的感觉，我只好到超市去一趟，心想，好歹买一两块月饼回来吃，也算是过节。 到了地方却傻眼了，花花绿绿的月饼盒子堆的跟小山似的，个个包装精美，如果不问售货员一句：&amp;quot;这是月饼吗？&amp;quot;我都不敢确定这些东西是什么。&lt;/p>
&lt;p>先让我想想小时候的月饼是什么样儿，嗯，圆的（废话），比烧饼厚，油光光的，上面印有花纹图案比如&amp;quot;花好月圆&amp;quot;什么的，随便拿张油纸包着，掰开以后馅里有大块大块的冰糖，还有花花绿绿的丝儿，应该是用橘子皮做的。&lt;/p>
&lt;p>对，就是这样，客人来了，主人把月饼拿刀切成菱形的小块就算一道下酒菜，中秋那天晚上一家人也会切上一块，大家一起嘎嘣嘎嘣地吃完。&lt;/p>
&lt;p>不过这是十几年前的事儿了，现在的月饼花样儿百出，什么馅儿的都有，造型各异，包装也是越来越豪华，味道却越来越难吃，简直难吃至极，看着这些大盒子我就发怵。&lt;/p>
&lt;p>我小声的问售货员：&amp;quot;请问有没有适合自己在家吃的月饼？&amp;quot;&lt;/p>
&lt;p>&amp;quot;有啊&amp;quot;她拎起大概有枕头那么大的一盒月饼说&amp;quot;你看这个怎么样，原价四百六现价二百八而且买一盒送一盒，多划算呐！&amp;quot;，&lt;/p>
&lt;p>我接过来看了看，诺大的盒子装了六块像扣子似的小月饼，亮亮的泛着油光，虽然个儿不大，但是如果买回去够我吃到过年了，我看了看长长的货架，觉得今天的月饼怕是买不到了。&lt;/p>
&lt;p> 不买不行，不吃月饼哪叫过节啊，我拎着购物筐在楼上楼下转了个遍，终于在一个灰暗的角落里发现了散装的月饼，嗯，貌似小时候那种月饼。&lt;/p>
&lt;p>将就吧，随便挑了两块扔进筐里，任务算是完成，高兴之余顺便又拎了瓶红酒，就这么地了，晚上就着月饼喝着红酒，举杯邀明月，对影成仨人。&lt;/p></description></item><item><title>我对奥运开幕式的8点感受</title><link>https://sbabybird.github.io/p/%E6%88%91%E5%AF%B9%E5%A5%A5%E8%BF%90%E5%BC%80%E5%B9%95%E5%BC%8F%E7%9A%848%E7%82%B9%E6%84%9F%E5%8F%97/</link><pubDate>Sat, 09 Aug 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E5%AF%B9%E5%A5%A5%E8%BF%90%E5%BC%80%E5%B9%95%E5%BC%8F%E7%9A%848%E7%82%B9%E6%84%9F%E5%8F%97/</guid><description>&lt;p>1、脚印烟花很令人惊艳    &lt;/p>
&lt;p>这真是一个好创意，巨大的脚印从中轴路一路迈向场馆，场面真不是一般的壮观！美中不足的是空中镜头取景再大些就好了。&lt;/p>
&lt;p>2、卷轴屏幕很好很强大    &lt;/p>
&lt;p>七十多米长的屏幕，应该也是奥运之最了，就是中间那块画布放的有点儿突兀。&lt;/p>
&lt;p>3、歌唱祖国很令人激动    &lt;/p>
&lt;p>当那个红衣小女孩用清澈如同天籁般的声音唱起歌唱祖国时，整个场馆进入了高潮，我在电视机前也禁不住唱了起来，眼泪都快下来了。&lt;/p>
&lt;p>4、主题歌有点儿弱    &lt;/p>
&lt;p>主题歌听完之后，印象不深刻，知道是谁唱的，听完就忘了。&lt;/p>
&lt;p>5、运动员入场时那些奥运宝贝一直在那儿蹦了两个多小时没换人，佩服！    &lt;/p>
&lt;p>导演也太不知道心疼人了，大热天儿的，让这些可爱的奥运宝贝手舞足蹈一直在那儿跳了，换了我，肯定都昏过去了。&lt;/p>
&lt;p>6、电视台转播水平发挥正常，镜头切换不敢恭维，画面中经常出现很多钢丝    &lt;/p>
&lt;p>不愧是咱们的 CCTV 啊，发挥出了应有的水平。&lt;/p>
&lt;p>7、点火没让人失望，要是点火时画面里看不见钢丝就更好了。&lt;/p>
&lt;p>    点火方式很新颖，将吊钢丝技术发挥到了极致，李宁好样儿的！就是在全景的时候，在屏幕前方总是飘着好几根钢丝，让画面失色不少。&lt;/p>
&lt;p>8、有朋自远方来不亦乐乎，四海之内皆兄弟也！    击缻时朗诵的《论语》，让人仿佛回到了两千多年前，很好，很中国！&lt;/p></description></item><item><title>工欲善其事，必先利其器？</title><link>https://sbabybird.github.io/p/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/</link><pubDate>Thu, 31 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/</guid><description>&lt;p>当猿猴第一次有目的的拿起石头将骨头劈开的时候，&amp;quot;它&amp;quot;就不再是&amp;quot;它&amp;quot;了，而成了&amp;quot;他&amp;quot;。&lt;/p>
&lt;p>能够使用&amp;quot;工具&amp;quot;是人类与一般动物的最基本的区别，这是教科书告诉我们的事情。&lt;/p>
&lt;p>&amp;quot;工欲善其事，必先利其器。&amp;quot;这句话很长时间都被我作为 msn 签名，也充分说明了工具在我生活中的重要性。&lt;/p>
&lt;p>当然这儿说的工具是一个广义上的概念，它可以指硬件也可以指软件。但是，我现在对于工具的使用却有了新的看法。&lt;/p>
&lt;p>因为我觉得工具使我的大脑退化了，以前好使的功能现在都不太好用了（比如：记忆力、创造力等）。&lt;/p>
&lt;p>写到这儿，我发现我这次的话题起的有点儿大，发些感慨而已，说到哪儿是哪儿吧。 &lt;/p>
&lt;p>因为最近（其实早就有感觉）我越来越觉得对某些工具产生了严重依赖，&lt;/p>
&lt;p>比如：计算机、手机、Internet。有时候甚至搞不清究竟是在驾驭工具还是在被工具驾驭。&lt;/p>
&lt;p>前一段时间我看了一本关于高效率工作的书，按照书中的指点，慢慢养成了将工作事务都提前安排进&amp;quot;日程表&amp;quot;的习惯，感觉效率貌似提高了一些，但是造成的副作用就是，我的记忆力严重下降。&lt;/p>
&lt;p>人们常说：&amp;quot;好记性不如烂笔头&amp;quot;，我看则不然，在我没用&amp;quot;烂笔头&amp;quot;的时候，我的记性还是挺好，约会什么的一般不会忘记，现在惨了，当我习惯于把事务用&amp;quot;烂笔头&amp;quot;记下来时，就连&amp;quot;下班后买俩包子&amp;quot;这点儿破事儿如果不写下来就会忘记。&lt;/p>
&lt;p>关于电话号码的记忆也是，以前没用手机的时候，我可以记住几十个电话号码，现在连自己的电话号码都得翻手机的电话薄来查找了。&lt;/p>
&lt;p> 现在，每天打开电脑第一件事儿就是把浏览器打开，收邮件，安排日程事务，借助 google 提供的日历功能安排好一天的工作，然后把工作内容同步到手机上，这样整个人都&amp;quot;信息化&amp;quot;了，看似有条不紊的工作，实际上，我已经牢牢地被这些所谓&amp;quot;高科技&amp;quot;拴住了。&lt;/p>
&lt;p>什么？万一哪天这些东西消失了？&lt;/p>
&lt;p>后果很难想象，想一下就能冒出一身冷汗。&lt;/p>
&lt;p>当然也有哥们幻想着有一天能过上&amp;quot;不插电&amp;quot;的生活，我觉得他也只能是想想而已，失去这些把我们宠坏的工具，将会像一只丧家犬那样的失魂落魄。本来打算来一篇长篇大论，发现越说越远，只好虎头蛇尾了。&lt;/p>
&lt;p>不能再多说了，因为我的&amp;quot;日程表&amp;quot;提醒我该去吃饭了。&lt;/p></description></item><item><title>怀念win98</title><link>https://sbabybird.github.io/p/%E6%80%80%E5%BF%B5win98/</link><pubDate>Mon, 28 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%80%80%E5%BF%B5win98/</guid><description>&lt;p>好友终于无法忍受 vista 的龟速，将笔记本自带的系统干掉新装了一个 windowsxp 系统，托我用 ghost 把系统备份一下，以备不时之需。&lt;/p>
&lt;p>自从转到 linux 阵营之后，我很少用到 ghost 了，去网上找了个&amp;quot;一键 ghost 系统&amp;quot;把他的系统做了个备份。&lt;/p>
&lt;p>发现现在的 ghost 软件做的已是十分的人性化了，一路 next 即可，完全不要用户操心，傻瓜化操作。想起我大学那阵子用的 win98 系统，那时还没有 ghost 类的软件，而 98 又很不稳定，所以我基本上每周都要重装一次系统，同宿舍的哥们，每到周末都能看见我趴在电脑前重装系统（步骤很简单，FormatC：、Setup）。&lt;/p>
&lt;p>我想，我的偏执狂性格就是那时候养成的吧，一年下来，25 位的 windows98 序列号我竟然背了下来。&lt;/p>
&lt;p>win98 给我印象最深的就是&amp;quot;蓝天白云&amp;quot;了，前两天在网上看到有志同道合的网友收藏的 win98 启动画面，其中就有这张经典的&amp;quot;蓝天白云&amp;quot;。&lt;/p>
&lt;p>后来，我误入歧途，对 win98 的操作技巧十分着迷，就连 win98 的启动画面也给改的面目全非（比如在启动时写上女朋友的名字），现在，这些曾经让我乐此不疲的&amp;quot;秘籍&amp;quot;已经变得一文不值。&lt;/p>
&lt;p>提到 win98 就不能不提它那经典的&amp;quot;蓝屏&amp;quot;，当程序死机或者非法操作时，它总是跳出来，搞得我的心扑腾扑腾乱跳。&lt;/p>
&lt;p>加上那时我的英文水平实在有限，屏幕上的大串英文字母对我来说与乱码无异，蓝屏的次数多了，也就预示着我又要重装系统了。&lt;/p>
&lt;p>win98 下打游戏很爽，我打电脑游戏的时代也基本上就是大学那几年，星际争霸、红警、剑侠情缘、大菠萝 2、极品飞猪（车）5，这些游戏在我的赛扬 600 下跑的也很顺畅，目前的硬件配置拿到我的大学时代能把人美死（不美死也吓死），可是我已经基本没心思再打游戏了。&lt;/p>
&lt;p>大学快毕业的时候，windowsxp 横空出世，我终于忍不住诱惑，装了一个英文版（那时还没出中文破解版），谁知，xp 竟不由分说（也许是说了，我没看懂）把我的 C 盘给格式化成了 NTFS 格式，当我新鲜劲儿一过，想要再重装 win98 时，由于在 DOS 下无法识别 NTFS 磁盘，导致我误把 D 盘给格式化了，几年的积累化为乌有，气得我在床上跳来跳去，疯了一样。&lt;/p>
&lt;p>现在，虽然硬件飞速的发展，内存都快有那时的硬盘大了，可是随着操作系统越来越臃肿，感觉计算机的速度却没有多大提升，仍然要启动老半天，打开一个 word 文档还是磨磨叽叽的。&lt;/p>
&lt;p>有时候不禁要想，拼命的升级硬件、换代计算机，究竟有什么意义？&lt;/p>
&lt;p>算了，不说了，洗洗睡吧，与其说是有点儿怀念 win98，倒不如说是想念那一段&amp;quot;纯洁的&amp;quot;求学的时光，这个话题一旦摊开来说就唠远了，还是就此打住吧。&lt;/p>
&lt;p>ps：我发现写博客固然很爽，但是往往勾起人的回忆，而回忆呢，又往往是美好滴，一美好就难免会想抽根烟，看来我也要&amp;quot;珍惜生命，远离博客&amp;quot;了。&lt;/p></description></item><item><title>珍爱生命，远离手机</title><link>https://sbabybird.github.io/p/%E7%8F%8D%E7%88%B1%E7%94%9F%E5%91%BD%E8%BF%9C%E7%A6%BB%E6%89%8B%E6%9C%BA/</link><pubDate>Fri, 25 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%8F%8D%E7%88%B1%E7%94%9F%E5%91%BD%E8%BF%9C%E7%A6%BB%E6%89%8B%E6%9C%BA/</guid><description>&lt;p>对于使用手机，我有一个不良习惯，喜欢在睡觉的时候把手机放在枕头旁边，而且是 24 小时不关机，只有这样我才睡的踏实。&lt;/p>
&lt;p>之所以这样儿，是因为我是把手机作为闹钟来用的，放的近一些首先可以保证它在关键时候叫醒我，其次是，这样我就可以迅速把闹铃关掉，然后再睡一会儿。&lt;/p>
&lt;p>今天看了一条新闻，让我十分不安，有专家跳出来说“应该让手机远离头部”因为，“手机发出的电磁辐射可以致癌”。&lt;/p>
&lt;p>哦卖糕的！以后睡觉的时候干脆把手机放在脚边算了，每当早上它吵醒我美梦的时候，我可以飞起一脚把它踢到地上。&lt;/p></description></item><item><title>原来这句话是这个意思啊</title><link>https://sbabybird.github.io/p/%E5%8E%9F%E6%9D%A5%E8%BF%99%E5%8F%A5%E8%AF%9D%E6%98%AF%E8%BF%99%E4%B8%AA%E6%84%8F%E6%80%9D%E5%95%8A/</link><pubDate>Wed, 23 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8E%9F%E6%9D%A5%E8%BF%99%E5%8F%A5%E8%AF%9D%E6%98%AF%E8%BF%99%E4%B8%AA%E6%84%8F%E6%80%9D%E5%95%8A/</guid><description>&lt;p>《论语》有云&amp;quot;唯女子与小人为难养也&amp;quot;，这句话的意思伤了一大批人，现在有人跳出来给出了新解释：&amp;quot;女&amp;quot;通&amp;quot;汝&amp;quot;，&amp;quot;女子&amp;quot;即&amp;quot;汝子&amp;quot;，即&amp;quot;你的孩子&amp;quot;；&amp;quot;养&amp;quot;指&amp;quot;教养、教育&amp;quot;，全句是说&amp;quot;你的孩子有类似小人习气就不好教育了&amp;quot;。&lt;/p>
&lt;p>&amp;quot;这是个教育问题，小孩会因为溺爱而放纵自己，对大人的管理充满埋怨，不就像小人？&amp;quot;&lt;/p>
&lt;p>我联想到另外一些新解：&lt;/p>
&lt;p>关于孔子的收费标准三十而立：交三十升米者，可以在后面站立听课。&lt;/p>
&lt;p>   四十不惑：交四十升米者，允许提问，直至没有疑问为止。&lt;/p>
&lt;p>   五十知天命：交五十升米者，可以知道明日考试之命题。&lt;/p>
&lt;p>   六十耳顺：交六十升米者，先生会说些你喜欢听的话，让你耳顺。&lt;/p>
&lt;p>   七十从心所欲：交七十升米者，听课要躺要坐，想来不来，一切随便。  &lt;/p></description></item><item><title>别想不开啊</title><link>https://sbabybird.github.io/p/%E5%88%AB%E6%83%B3%E4%B8%8D%E5%BC%80%E5%95%8A/</link><pubDate>Tue, 22 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%88%AB%E6%83%B3%E4%B8%8D%E5%BC%80%E5%95%8A/</guid><description>&lt;p>郁闷或高兴的时候我总是想抽根烟，比如，当我的代码总是调试失败或者刚修改完一个 Bug 的时候。&lt;/p>
&lt;p>办公室里不允许抽烟，否则我们屋肯定和火车的车厢连接处一样，整天烟雾缭绕，这样就剥夺了一小撮人不抽烟的权利。&lt;/p>
&lt;p>所以，抽烟的兄弟只能到厕所旁边的那个阳台吞云吐雾了。&lt;/p>
&lt;p>这样也好，一边抽着&amp;quot;混合味儿&amp;quot;的香烟，一边欣赏窗外的风景，既满足了肺对于尼古丁的需求，又能放松一下疲倦的眼睛。&lt;/p>
&lt;p>楼层不低，所以看得也挺远的，如果眼神儿和天气都足够好的话，甚至可以看见鸟巢里工人师傅的焊枪发出的耀眼蓝光。&lt;/p>
&lt;p>下班的时候，我又去抽了一根烟，一个人。&lt;/p>
&lt;p>远处的大楼在烟雾中显得虚无缥缈。&lt;/p>
&lt;p>我手扶着窗户，探出头去，想看得清晰一些。&lt;/p>
&lt;p>这时，一个哥们从厕所走出来，一边提着拉链一边语重心长地说：&amp;quot;别想不开啊！&amp;quot;&lt;/p>
&lt;p>我靠！我有啥想不开的？&lt;/p>
&lt;p>工作虽然累点儿，但是，祖国还需要我，人民还需要我，老婆做好的饭菜还在桌子上等着我，孩子还等着我回去辅导功课&amp;hellip;&amp;hellip; &lt;/p>
&lt;p>算了，回去了，明天又是崭新的一天，但愿今天不堵车。&lt;/p></description></item><item><title>一块钱一斤</title><link>https://sbabybird.github.io/p/%E4%B8%80%E5%9D%97%E9%92%B1%E4%B8%80%E6%96%A4/</link><pubDate>Mon, 21 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%80%E5%9D%97%E9%92%B1%E4%B8%80%E6%96%A4/</guid><description>&lt;p>现在电脑基本上已经普及了，我老家的一个师范同学，去年买了电脑之后，非常迷恋电脑的知识，经常通过 qq 来问我各种问题，我也是基本上都耐心回复。&lt;/p>
&lt;p>后来这厮竟然越来越来劲，已经不满足于普通的日常使用了，有一天就问我编程序到底好玩不好玩儿？我有心把它带进沟里，就告诉他编程序十分有意思，写完程序后很有成就感和快感。&lt;/p>
&lt;p>这家伙终于着迷了，发誓要学会写程序，我就把老谭的那本《C 程序设计》推荐给他看。&lt;/p>
&lt;p>他看了之后一头雾水，说是像看天书一般，遂跟我唠叨十分后悔没念大学。&lt;/p>
&lt;p>后来我被他缠的没办法，就告诉他应该先把基础打好，他说也对，不妨就把大学里的计算机课程给全过一遍。&lt;/p>
&lt;p>我靠，佩服！让我肃然起敬。&lt;/p>
&lt;p>不过，我大学里的书基本上都找不到了，就把课程的书目大体上给他说一遍，让他自己淘弄去，实在不行就去书店买，然后就有一阵子没有联系。&lt;/p>
&lt;p>今天突然上线告诉我所有的书都买到手了，大概有十几本，我更佩服他的精神了，作为一个业余爱好者也太舍得了。&lt;/p>
&lt;p>我问他：&amp;quot;你哪儿买的书啊？现在书那么贵，花了不少钱吧？&amp;quot;这家伙半天没吱声，过了一阵儿给我来了一句：&amp;quot;没多少钱，比你上学时买的便宜多了，我让亲戚在大学旁边的废品收购站买的，你说的那些书全都有，九成新的！一块钱一斤！&amp;quot;&lt;/p></description></item><item><title>颐和园</title><link>https://sbabybird.github.io/p/%E9%A2%90%E5%92%8C%E5%9B%AD/</link><pubDate>Mon, 21 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%A2%90%E5%92%8C%E5%9B%AD/</guid><description>&lt;p>这几天，老爸老妈过来了，我也没有太多时间陪他们。&lt;/p>
&lt;p>周末了，一起去了趟颐和园。&lt;/p>
&lt;p>天太热，人太多，出去玩儿实在是太受罪了。&lt;/p>
&lt;p>吃晚饭时与我爸一起整了几盅，正想多喝几杯时，老头按住酒瓶说：“编程序我不行，喝酒你不行。”&lt;/p>
&lt;p>想去电脑上玩会儿游戏，我妈指着电脑屏幕上一路飙升的 qq 斗地主分数对我说：“编程序我不行，打牌你不行。”&lt;/p></description></item><item><title>家人来到</title><link>https://sbabybird.github.io/p/%E5%AE%B6%E4%BA%BA%E6%9D%A5%E5%88%B0/</link><pubDate>Tue, 15 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%AE%B6%E4%BA%BA%E6%9D%A5%E5%88%B0/</guid><description>&lt;p>接风，洗尘、喝酒&lt;/p></description></item><item><title>偏执狂</title><link>https://sbabybird.github.io/p/%E5%81%8F%E6%89%A7%E7%8B%82/</link><pubDate>Mon, 14 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%81%8F%E6%89%A7%E7%8B%82/</guid><description>&lt;p>看到了一篇关于电脑偏执狂的帖子，发现里面列举的内容大部分都像是在说我。&lt;/p>
&lt;p>比如：Windows 桌面只放三个图标：&amp;quot;我的电脑&amp;quot;、&amp;quot;回收站&amp;quot;、&amp;quot;浏览器&amp;quot;回收站永远保持&amp;quot;清空&amp;quot;状态，删除文件都是用 Shift+Delete，根本不用进回收站所有软件都使用最新版，打上最新的补丁每隔一段时间就清理一次注册表如果有个软件用的不是最新版本就会浑身不自在&lt;/p>
&lt;p>补充：看到别人的电脑不是处于最佳状态也会浑身不自在，想冲过去调理一番如果同样功能的软件有商业版和免费版的话，就打心眼儿里觉得免费版的那个更可爱经常整理磁盘碎片经常整理删除磁盘上的文件，有时候上午刚删完一个文件，到下午就发现那个文件还有用任务栏上同时打开窗口超过四个就觉得难受，如果把程序隐藏在系统栏就感觉好多了新建文件夹时不喜欢用&amp;quot;新建文件夹&amp;quot;来命名&lt;/p></description></item><item><title>自制果汁</title><link>https://sbabybird.github.io/p/%E8%87%AA%E5%88%B6%E6%9E%9C%E6%B1%81/</link><pubDate>Sun, 13 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%87%AA%E5%88%B6%E6%9E%9C%E6%B1%81/</guid><description>&lt;p>大早上一起来，打开电视（就是我那个用 Python 写的小程序），凤凰卫视里的沈星正在介绍&amp;quot;美女私房菜&amp;quot;，正在纳闷原来美女还会做菜，结果令我十分失望，只见她拿了个番茄，随便切几下，往搅拌机里一扔，嗡嗡两下，搅成糊状，美其名曰&amp;quot;营养瘦身果汁&amp;quot;。&lt;/p>
&lt;p>咳，正愁着早饭不知吃啥，干脆试一下吧。&lt;/p>
&lt;p>从冰箱里拿出番茄，又刷了刷我那半年多没用过的搅拌机（当时为啥要买它？），搅拌之前又撒了些白糖，喝了果然神清气爽，看来，这个搅拌机还挺有用，这样吃番茄（应该是喝）比起放在嘴里生嚼别有一番滋味。&lt;/p>
&lt;p>到了傍晚的时候，闷的慌，出去溜达的时候又想起自制果汁的事儿来，干脆这次来做一个真正的果汁。&lt;/p>
&lt;p>买来西瓜一只、蜜桃若干、猕猴桃若干、青苹果、黄瓜，本来我还想加点儿芹菜，但是买不到了。&lt;/p>
&lt;p>回到家，将这些水果切成丁、片，一股脑儿放入搅拌机，嗡嗡搅了一分来钟，足足做了一大杯，让我想想，西瓜消暑、猕猴桃富含维生素、青苹果酸中带甜，这杯什锦果汁应该是比早上那个强多了吧。&lt;/p>
&lt;p>迫不及待喝了一口，靠，说不出的滋味，各种味道窜来窜去，就像是吃烂桃的时候再就着两口酸苹果，没办法，反正有营养，那就喝吧。&lt;/p>
&lt;p>喝到大半杯的时候我才想起来，我刚才要是把西瓜的皮儿去掉就好了。&lt;/p></description></item><item><title>每个周六的晚上是我乐兴大发的时候</title><link>https://sbabybird.github.io/p/%E6%AF%8F%E4%B8%AA%E5%91%A8%E5%85%AD%E7%9A%84%E6%99%9A%E4%B8%8A%E6%98%AF%E6%88%91%E4%B9%90%E5%85%B4%E5%A4%A7%E5%8F%91%E7%9A%84%E6%97%B6%E5%80%99/</link><pubDate>Sat, 12 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%AF%8F%E4%B8%AA%E5%91%A8%E5%85%AD%E7%9A%84%E6%99%9A%E4%B8%8A%E6%98%AF%E6%88%91%E4%B9%90%E5%85%B4%E5%A4%A7%E5%8F%91%E7%9A%84%E6%97%B6%E5%80%99/</guid><description>&lt;p>我的吉他弦断了，刚断的，就在我弹那曲《两只老虎》的时候。&lt;/p>
&lt;p>没办法，为了能压住隔壁装修的声音，我在弹的时候多使了点劲儿。&lt;/p>
&lt;p>幸好我未雨绸缪，买吉他的时候就多买了几根琴弦，今天终于用上了，不过，还是费了老半天劲儿才把弦儿装好。&lt;/p>
&lt;p>这让我想起一个传说，爱好古琴人都知道这个神秘传说。古代有两人，一个叫俞伯牙，一个叫钟子期。有一天，俞伯牙琴兴大发，在他家空旷的后院里（也可能是在河边，记不清了），摆好琴，焚香沐浴后，惬意地抚上一曲。一时间，悠扬的曲子飘满了整个院子，向远方扩散。&lt;/p>
&lt;p>俞伯牙正沉浸在曼妙的琴声里，突然，&amp;ldquo;啪&amp;quot;地一声脆响，琴弦断了。他向远处一望，原来是钟子期这家伙打完柴在这儿偷听他弹琴。钟子期不但听懂了他的曲子，而且对他这把琴的来历也说得头头是道，后来俩人成了好哥们儿。&lt;/p>
&lt;p>就此打住，问题的重点并不是这俩人后来成了好哥们儿，关键是这个故事说明了一个问题：当有人偷听你弹琴的时候，你的琴弦就会断掉。反过来说，如果哪天你的琴弦断了，那么，在某一个角落里，有一个粉丝正在偷听你的琴声。&lt;/p>
&lt;p>话说有一个人叫张三，酷爱抚琴，苦于没有知音。一日，在抚琴时琴弦终于崩断，此人对刚才的传说深信不疑，急忙起身，想要寻找那位来偷听的&amp;quot;粉丝&amp;rdquo;，果然，在角落里找到了他。张三欣喜不已，激动地握着&amp;quot;粉丝&amp;quot;的手说：&amp;ldquo;同志！我可找到你了！&amp;ldquo;却又发现这位粉丝已经陶醉于音乐之中，正在轻轻地啜泣。&lt;/p>
&lt;p>张三感慨万千：&amp;ldquo;终于有人懂我的琴艺了！&amp;ldquo;忙将此人请入家中，沏茶倒水，欲询问此人对他刚才所奏之曲的感受。此人好不容易才止住哽咽，断断续续说道：&amp;ldquo;本来我在睡午觉，忽听得先生的琴声，就顺着声音走到这里来了。&amp;rdquo;&lt;/p>
&lt;p>&amp;ldquo;那又为何哭泣呢，我刚才所奏之曲虽有哀怨之意，听了却也不必如此悲痛吧？&amp;rdquo; 张三不解地问道。说道此处，此人痛苦地干嚎两声，说道：&amp;ldquo;之所以伤心，是因为我心里难受，先生的曲子让我想起我死去的舅舅，先生的曲子与我舅舅的曲子有一样的声音。&amp;rdquo; 张三更加欣喜：&amp;ldquo;敢问你舅舅是哪位大音乐家啊？&amp;quot;，&amp;ldquo;音乐家倒谈不上。&amp;quot;，&amp;ldquo;哦，那他是干什么的？&amp;quot;，&amp;ldquo;他是，弹棉花的&amp;hellip;&amp;quot;，&amp;rdquo;#@$%^#$%^#$%^&amp;rdquo;&lt;/p></description></item><item><title>你知道父母的生日吗？</title><link>https://sbabybird.github.io/p/%E4%BD%A0%E7%9F%A5%E9%81%93%E7%88%B6%E6%AF%8D%E7%9A%84%E7%94%9F%E6%97%A5%E5%90%97/</link><pubDate>Fri, 11 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BD%A0%E7%9F%A5%E9%81%93%E7%88%B6%E6%AF%8D%E7%9A%84%E7%94%9F%E6%97%A5%E5%90%97/</guid><description>&lt;p>单位要员工填写一张个人信息表，其中有一项内容是父母的出生年月（填的还真够细），很多人都填不上来。&lt;/p>
&lt;p>我还好，前一段时间刚好在 msn 上和妹妹一起聊到了父母的年龄，赶紧翻看 msn 记录，终于找到了妹妹通过 msn 告诉我的出生日期（看来养儿子真不如养女儿）。&lt;/p>
&lt;p>突然想起一个电视节目，在大街上现场采访，随便拉个人去问他父母的生日，结果大部分都张口结舌，答不上来。&lt;/p>
&lt;p>自己的生日记得很清楚，老婆的生日记得很清楚，儿子的生日记得很清楚，有些人甚至领导的小舅子的孩儿他妈隔壁邻居的生日都记得很清楚，可是却把父母的生日抛在脑后，惭愧啊。&lt;/p></description></item><item><title>开幕式那天，使用哪种点火方式？</title><link>https://sbabybird.github.io/p/%E5%BC%80%E5%B9%95%E5%BC%8F%E9%82%A3%E5%A4%A9%E4%BD%BF%E7%94%A8%E5%93%AA%E7%A7%8D%E7%82%B9%E7%81%AB%E6%96%B9%E5%BC%8F/</link><pubDate>Thu, 10 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BC%80%E5%B9%95%E5%BC%8F%E9%82%A3%E5%A4%A9%E4%BD%BF%E7%94%A8%E5%93%AA%E7%A7%8D%E7%82%B9%E7%81%AB%E6%96%B9%E5%BC%8F/</guid><description>&lt;p>据说已有了定论，但还是个秘密，老张还在卖关子。&lt;/p>
&lt;p>我有同事猜测，应该是派一只大熊猫举着火把去点燃，还有哥们儿说还不如让猪坚强去点燃。&lt;/p></description></item><item><title>eeepc 使用技巧(4) 看电视</title><link>https://sbabybird.github.io/p/eeepc-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A74-%E7%9C%8B%E7%94%B5%E8%A7%86/</link><pubDate>Wed, 09 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/eeepc-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A74-%E7%9C%8B%E7%94%B5%E8%A7%86/</guid><description>&lt;p>用小 e 在床头看电视在合适不过了，不过我没找到 Linux 下的网络电视软件。&lt;/p>
&lt;p>找来找去，发现一些可以用 mplayer 播放的 mms 链接，试了一下效果还不错，几个著名的电视台都有对应的链接，比如：&lt;/p>
&lt;p>凤凰卫视中文台 mms://58.22.96.10/litv01;&lt;/p>
&lt;p>凤凰卫视资讯台 mms://58.22.96.10/litv03;&lt;/p>
&lt;p>但是我的 mplayer 是基于命令行的，每次要看电视的时候还需把这些链接输入进去，感觉很不方便。&lt;/p>
&lt;p>刚好这两天对 Python 这个脚本语言比较感兴趣，于是想用 Python 写一个脚本来帮我输入这些链接。&lt;/p>
&lt;p>由于对 Python 还不熟，所以写的界面很丑，不过也够我用了。&lt;/p>
&lt;p>具体思路是，将这些链接首先存入一个文本文件里保存为 channel.data，&lt;/p>
&lt;p>内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">凤凰卫视中文台|mms&amp;amp;#58;//58.22.96.10/litv01;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">凤凰卫视资讯台|mms&amp;amp;#58;//58.22.96.10/litv03;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">东风卫视|mms&amp;amp;#58;//58.22.96.10/litv07;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">精品影院|mms&amp;amp;#58;//218.1.70.72&amp;amp;#58;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1755/JingPinYingYuan;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">东方卫视|mms&amp;amp;#58;//live.smgbb.cn/dfws;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">星空卫视|mms&amp;amp;#58;//58.22.96.10/litv06;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">TVB8|mms&amp;amp;#58;//58.22.96.10/litv05;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后写一个 python 脚本读取这些链接并将电视台的名称填入界面中的一个列表框里，到时候通过点击名称就可以播放了。&lt;/p>
&lt;p>python 脚本内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="ch">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -*- coding: UTF-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">tkinter&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Application&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Frame&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">clist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">({})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">play_channel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">channel_url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">strcmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;mplayer &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">channel_url&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; -cache 1024&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">str_output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">popen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strcmd&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">str_output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">bin_a&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bin_a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">channel_url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">play_tv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">channellistbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">curselection&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play_channel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">channellistbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">curselection&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">init_channel_list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">listbox&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">channel_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;tvchannel.dat&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">channel_info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">channel_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">readlines&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">channel_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">channel_info&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">channel_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">channel_info&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">channel_list&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">channel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">channel_list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;|&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">channel_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">channel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">channel_url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">channel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">listbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">END&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">channel_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clist&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">channel_url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">create_widgets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">quit_button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Button&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">quit_button&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Quit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">quit_button&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">quit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">quit_button&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;width&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">quit_button&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;height&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">quit_button&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s2">&amp;#34;side&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;left&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play_tv_button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Button&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play_tv_button&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Play TV&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play_tv_button&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play_tv&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play_tv_button&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;width&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play_tv_button&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;height&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play_tv_button&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s2">&amp;#34;side&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;left&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">channellistbox&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Listbox&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">init_channel_list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">channellistbox&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">channellistbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">selection_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">channellistbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">master&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Frame&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">master&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_widgets&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Application&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mainloop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>保存为 playtv.py，和刚才那个 channel.dat 放在一个目录，运行即可（python./playtv.py)。&lt;/p></description></item><item><title>假如工作总结这样写</title><link>https://sbabybird.github.io/p/%E5%81%87%E5%A6%82%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%E8%BF%99%E6%A0%B7%E5%86%99/</link><pubDate>Tue, 08 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%81%87%E5%A6%82%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%E8%BF%99%E6%A0%B7%E5%86%99/</guid><description>&lt;p>半年很快过去了，领导又安排写工作总结。&lt;/p>
&lt;p>写完之后感觉意犹未尽，不如把这半年的生活也总结一下，为了增加总结的趣味性，再此，我特意虚拟了一个记者出来。&lt;/p>
&lt;p>记：2008 已过去大半年，能不能谈一下你这半年都是在忙些什么呢？&lt;/p>
&lt;p>我：可以，上班忙工作，下班忙生活。&lt;/p>
&lt;p>记：哦，能不能说一下具体都是忙些什么工作呢？&lt;/p>
&lt;p>我：工作上的事情我是不会在博客里说的，我刚写了一份上半年工作总结，一会儿可以给你看一下。&lt;/p>
&lt;p>记：好的，那谈一下生活吧。&lt;/p>
&lt;p>我：好的，因为我经常加班，所以其实我的生活也基本上就是工作，你还是看工作总结吧。&lt;/p>
&lt;p>记：靠！你到底要不要接受采访，玩儿我呐？&lt;/p>
&lt;p>我：你还真不懂幽默，咱们国家就是你这样儿的记者太多了。&lt;/p>
&lt;p>好吧，给你说一下最近的情况。&lt;/p>
&lt;p>记：请问，这半年你的周末都是怎样度过的？&lt;/p>
&lt;p>我：大部分周末是在加班，另外由于我是一个很低调的人，所以剩下的时间都宅在家里。&lt;/p>
&lt;p>记：宅？这个我知道，据说是一种生活方式，就是呆在家里不出门是吧？周杰伦还有一首歌叫《阳光宅男》呢！&lt;/p>
&lt;p>我：你真聪明。&lt;/p>
&lt;p>记：在家里干嘛呢？&lt;/p>
&lt;p>我：无聊的时候我会谈谈琴看看书，如果有时间我会每周看一部电影。&lt;/p>
&lt;p>记：你刚才不是说呆在家里不出去吗？怎么还去影院看电影？&lt;/p>
&lt;p>我：刚夸完你的智商你就开始喘啦？谁说上电影院了，现在影院的票价那么贵，而且放的又是剪切版的，网络那么发达，片源很丰富，所以，我是在家看的。&lt;/p>
&lt;p>记：说到&amp;quot;剪切版&amp;quot;请谈一下你对《色戒》这部影片的看法。&lt;/p>
&lt;p>我：哦，这个我在网上看的也是剪切板的，不过看的是被剪掉的那部分，由于看的也不完整，所以也不便于发表看法。&lt;/p>
&lt;p>而且，我比较怀旧，平时看的大部分都是多年前的老片。不过最近的《功夫熊猫》也挺不错。在看的过程中发现精品后我一般会在博客里记录下来。&lt;/p>
&lt;p>记：你刚才说到无聊时会看书，都是看些什么书？&lt;/p>
&lt;p>我：我还是比较怀旧，想把以前上学时没看过的小说给补一补，金庸和古龙的小说看了好几遍了，最近又复习了一遍《射雕》。&lt;/p>
&lt;p>另外这半年还看了《我这一辈子》、《月牙儿》、《白豆》、《许三观卖血记》等中篇小说，上学时，家长不让我看这些小说，现在得补回来。&lt;/p>
&lt;p>记：（撇撇嘴）我还以为是《鬼吹灯》、《诛仙》呢。&lt;/p>
&lt;p>我：哦，这些我也想看，不过我胆儿小，一个人不敢看，怕失眠，我失眠挺严重的。&lt;/p>
&lt;p>记：你刚才说无聊时还要弹琴，是弹钢琴还是吉他？&lt;/p>
&lt;p>我：钢琴太贵，买不起，我弹电子琴、吉他、电脑键盘、吹口琴等。&lt;/p>
&lt;p>记：（吁！）您的爱好还真够广泛的。看来这半年您过得还真是挺充实惬意的。&lt;/p>
&lt;p>我：惬意个 P 呀，老婆不在身边，没人聊天，没人做饭，我孤独得都快抑郁了。不过她很快就要来了。&lt;/p>
&lt;p>记：祝贺你啊。聊了半天，你能不能总结一下你这半年的心得和收获？&lt;/p>
&lt;p>我：可以，这半年，我看了不少电影，新喜欢上几首好歌，又恢复了打篮球，身体状态也在恢复。&lt;/p>
&lt;p>另外我迷恋上了 Linux 操作系统。至于收获嘛，真是说不好，有些事儿不能说。&lt;/p>
&lt;p>记：好的，感谢你抽出时间接受采访，谢谢，再见。&lt;/p>
&lt;p>我：再见。&lt;/p></description></item><item><title>不要忘记</title><link>https://sbabybird.github.io/p/%E4%B8%8D%E8%A6%81%E5%BF%98%E8%AE%B0/</link><pubDate>Mon, 07 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8D%E8%A6%81%E5%BF%98%E8%AE%B0/</guid><description>&lt;p>7.7&lt;/p>
&lt;p>71 年前的今天，中国开始了长达八年的抗日战争。无需多言。&lt;/p></description></item><item><title>有音乐就有春天</title><link>https://sbabybird.github.io/p/%E6%9C%89%E9%9F%B3%E4%B9%90%E5%B0%B1%E6%9C%89%E6%98%A5%E5%A4%A9/</link><pubDate>Sun, 06 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%89%E9%9F%B3%E4%B9%90%E5%B0%B1%E6%9C%89%E6%98%A5%E5%A4%A9/</guid><description>&lt;p>有音乐就有春天，当我写下这句话，撇了撇嘴，我想，我还挺能装啊。&lt;/p>
&lt;p>不过，这么说是因为刚刚看了一部电影&amp;ndash;《放牛班的春天》，法国人拍的，很细腻，有一点小幽默。&lt;/p>
&lt;p>故事讲的是一个迷恋音乐的教师与一群工读生的故事，工读学校管理混乱，体罚学生，学生自暴自弃到处做恶作剧。直到克莱门特来了，这个秃头的中年男人，看上去还有些磨叽。&lt;/p>
&lt;p>然而，这些孩子马上就发现了新老师的与众不同，因为他唯一的皮包里装的仅仅是几张乐谱，而且他把这些视为生命。&lt;/p>
&lt;p>克莱门特渐渐发现这些孩子原来也热爱音乐，这使他重新燃起创作激情，他把这些孩子根据特点编成了一个合唱团。&lt;/p>
&lt;p>通过教授音乐，他不仅感觉这些孩子原来唱歌不错，而且组建合唱团也使他们变得不那么调皮了，音乐拉近了他们的距离。&lt;/p>
&lt;p>然而，事情不会那么顺利，皮埃尔这孩子就很难对付，他声线极美却极难驯服，克莱门特不断挖掘他的优点，还说服他的母亲让他去读专业的音乐学校。&lt;/p>
&lt;p>期间还有一段小插曲，那就是克莱门特与皮埃尔的单身母亲还产生了一点儿小感情，不过克莱门特很含蓄，一直埋在心里，影片在这一段处理的很不错。&lt;/p>
&lt;p>影片的配乐很精彩，最让人陶醉的就是这些孩子天使般的歌声了，沉静又富有感情，天籁、天籁就是打这儿来的吧。&lt;/p>
&lt;p>最后当克莱门特因得罪校长而被辞退的时候，这些孩子被命令不准送他，他孤独走向大门，此时优美的合唱响起，天空中飘满了孩子们折的纸飞机，上面写着祝福的话，孩子们用这种特殊的方式与他告别。&lt;/p>
&lt;p>他用音乐给孩子们带来了春天，留下了春天，却又孤独地离去。&lt;/p></description></item><item><title>哈哈太棒了</title><link>https://sbabybird.github.io/p/%E5%93%88%E5%93%88%E5%A4%AA%E6%A3%92%E4%BA%86/</link><pubDate>Sat, 05 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%93%88%E5%93%88%E5%A4%AA%E6%A3%92%E4%BA%86/</guid><description>&lt;p>晚饭毕，弹了一会儿电子琴，感觉很投入。&lt;/p>
&lt;p>就是那种摇头晃脑的投入，脚也随着音乐的节奏踏着地板，忽闻岸上踏歌声就是这个踏吧。&lt;/p>
&lt;p>感觉我的琴技提升了啊，左手和弦右手旋律，配合得天衣无缝，第一次有演奏的感觉，弄得动静比较大，不知道会不会吵到别人。&lt;/p>
&lt;p>看来我天生会弹琴，曲谱都在心中，美妙的音符随着手指流淌出来，至少我是这么以为的。&lt;/p>
&lt;p>有没有听到那个声音&lt;/p>
&lt;p>就像是我忽远忽近&lt;/p>
&lt;p>告诉你他来自我的心&lt;/p>
&lt;p>带来一首苍老的歌&lt;/p>
&lt;p>对着你轻轻的说&lt;/p>
&lt;p>我不在乎春夏秋冬花开花落&lt;/p>
&lt;p>任凭这夜越来越深&lt;/p>
&lt;p>你在我心中越来越沉&lt;/p>
&lt;p>压的我不能翻身作自己的主人&lt;/p>
&lt;p>任凭这灯越来越昏&lt;/p>
&lt;p>你在我眼中越来越真看得清你满脸的风尘&lt;/p>
&lt;p>任凭这天空越来越湛蓝&lt;/p>
&lt;p>你在我身边越来越平凡&lt;/p>
&lt;p>可是有些说过的话一直没能改变&lt;/p>
&lt;p>任凭这旅程越来越孤单&lt;/p>
&lt;p>你在我面前越来越茫然&lt;/p>
&lt;p>丢不下的行李&lt;/p>
&lt;p>是我不变的心&lt;/p></description></item><item><title>留意了一下我的blog评论</title><link>https://sbabybird.github.io/p/%E7%95%99%E6%84%8F%E4%BA%86%E4%B8%80%E4%B8%8B%E6%88%91%E7%9A%84blog%E8%AF%84%E8%AE%BA/</link><pubDate>Sat, 05 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%95%99%E6%84%8F%E4%BA%86%E4%B8%80%E4%B8%8B%E6%88%91%E7%9A%84blog%E8%AF%84%E8%AE%BA/</guid><description>&lt;p>无意间看到我写的几篇日志竟有人评论，想不到这个我发发牢骚的地方竟还有人访问哈。&lt;/p>
&lt;p>而且，看起来，我写的颇为不错（嘻嘻）。&lt;/p>
&lt;p>ps：感谢 SEA 同学的捧场。&lt;/p></description></item><item><title>我淋了一场大暴雨！</title><link>https://sbabybird.github.io/p/%E6%88%91%E6%B7%8B%E4%BA%86%E4%B8%80%E5%9C%BA%E5%A4%A7%E6%9A%B4%E9%9B%A8/</link><pubDate>Fri, 04 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E6%B7%8B%E4%BA%86%E4%B8%80%E5%9C%BA%E5%A4%A7%E6%9A%B4%E9%9B%A8/</guid><description>&lt;p>就在下班的时候，天还没有要下雨的样子。&lt;/p>
&lt;p>我悠然地吃完了晚饭，然后慢吞吞地走向车站，准备回家。此时天上却落起了雨滴，不大，我想肯定又要堵车了，就买了本《读者》准备在车上看。车行驶到路上的时候，雨真的大起来了，雨点密密地砸在车顶和车窗上，彭彭作响，车窗外的景象被雨水冲得模糊不清。&lt;/p>
&lt;p>雨越来越大，公交车就像一只潜水艇，四周都被水包围了。&lt;/p>
&lt;p>到站而没有带伞的乘客，咬咬牙狠狠心跳下车去，很快就消失在茫茫雨雾中。&lt;/p>
&lt;p>终于，我也要下车了，我带了伞，但我还是太低估了这场雨，我甚至想象在雨中点根烟，那该是多么惬意啊。&lt;/p>
&lt;p>然而，我这把伞应付毛毛细雨还凑合，外面下着倾盆大雨，又刮着狂风，闪电在头上不停地把天撕开一个又一个裂口，这把伞仅能护住我的头，被风吹得翻过来复过去。&lt;/p>
&lt;p>也许是我&amp;quot;点根烟&amp;quot;的想法激怒了老天，风雨越来越猛，马路变成了一条河，泛起一阵阵波浪，我不由自主地奔跑起来，拼命抱紧了我的电脑包，那里面装着我心爱的笔记本电脑。&lt;/p>
&lt;p>几分钟的路程，把我淋得狼狈不堪，衣服湿透了，鞋子里灌满了水，终于，我跌跌撞撞地跑到了家门口。&lt;/p>
&lt;p>我想这是我有生以来淋得最大最惨的一场雨了。&lt;/p>
&lt;p>现在，我洗完了热水澡，沏了一杯热茶，窗外，雨已经停了。&lt;/p></description></item><item><title>怎样使用VC6的远程调试</title><link>https://sbabybird.github.io/p/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8vc6%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</link><pubDate>Thu, 03 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8vc6%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</guid><description>&lt;p>今天遇到一个问题，我们的程序在本地执行一切正常，但在售后的一台笔记本电脑中却无法启动且爆出 runtimeerror。&lt;/p>
&lt;p>无奈只有通过调试来查找问题所在，由于该笔记本并未安装开发环境，于是想到了 VC6 的远程调试。上网翻看资料，写的都不太详细，摸索半天终于成功，并通过远程调试搞定了程序的问题。&lt;/p>
&lt;p>现将远程调试的详细操作记录下来以备忘。&lt;/p>
&lt;p>1、需机器两台：一台为调试机（装有 VC6 开发环境），一台为客户机（运行程序）&lt;/p>
&lt;p>2、假定客户机的 ip 地址为 192.168.0.168&lt;/p>
&lt;p>3、假定需要运行调试的程序放在客户机的 C\emote_bin\emote_test.exe&lt;/p>
&lt;p>4、共享客户机 C:\emote_bin 文件夹，并开放所有权限（读、写），共享名为 remote_bin;&lt;/p>
&lt;p>5、在调试机上映射客户机 remote_bin 共享目录为&amp;quot;Z&amp;quot;盘(可在 cmd 中执行&amp;quot;netusez:\\192.168.0.168\emote_bin&amp;quot;) &lt;/p>
&lt;p>6、拷贝调试机上 VC6 安装目录下的 Bin 目录中的全部内容到客户机任意位置（该目录在调试机的路径一般为&amp;quot;C:\ProgramFiles\MicrosoftVisualStudio\COMMON\MSDev98\Bin&amp;quot;），在此假定拷贝在客户机的&amp;quot;C:\Debugger&amp;quot; &lt;/p>
&lt;p>7、在客户机运行&amp;quot;C:\Debugger\MSVCMON.exe&amp;quot;，启动后再对话框上直接点击&amp;quot;Connect&amp;quot;按钮（不用点&amp;quot;Setting&amp;quot;按钮），期间如有防火墙告警提示，需允许该程序。 &lt;/p>
&lt;p>8、回到调试机，打开 VC6 并打开要调试的工程文件（再此为 remote_test)，在 VC6 的&amp;quot;Build&amp;quot;菜单下点击&amp;quot;DebuggerRemoteConnection&amp;quot;，在弹出的对话框左侧选择&amp;quot;NetWork(TCP/IP)&amp;quot;，点击右侧&amp;quot;Setting&amp;quot;按钮，填入客户机 ip 地址(192.168.0.168)点击&amp;quot;ok&amp;quot; &lt;/p>
&lt;p>9、点击 VC6 的&amp;quot;Project&amp;quot;菜单下&amp;quot;Setting&amp;quot;，切换到 Link 页面，在 Outputfile 中填入&amp;quot;Z:\emote_test.exe&amp;quot;，切换到 Debug 页，在 Executablefordebugsession 中填入&amp;quot;Z:\emote_test.exe&amp;quot;，在 Remoteexecutablepathandfilename 中填入&amp;quot;C:\emote_bin\emote_test.exe&amp;quot;（注意：此行甚为重要，需填写程序在客户机的完整路径） &lt;/p>
&lt;p>10、大功告成，按 F7 编译可执行文件，按 F5 开始远程调试吧！&lt;/p></description></item><item><title>求雨妙招</title><link>https://sbabybird.github.io/p/%E6%B1%82%E9%9B%A8%E5%A6%99%E6%8B%9B/</link><pubDate>Wed, 02 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%B1%82%E9%9B%A8%E5%A6%99%E6%8B%9B/</guid><description>&lt;p>入夏以来，大家打篮球的热情空前地高涨，频率已经从原来的每周一场提升到每周两场，较上年同期提升了 100 个百分点（我晕，还是别用新闻联播的语气了）。&lt;/p>
&lt;p>不仅如此，每次打球的时间也有所延长，基本上都是从下班打到天黑，中间不休息、不换人，三个小时下来，基本上都口吐白沫，胳膊抽筋，两股战战几欲先走。&lt;/p>
&lt;p>然而天公总是不作美，近日一连串的雨天，严重打乱了我们的打球计划。&lt;/p>
&lt;p>基本上每次打球都要下雨，而且时间也选在下班前后。&lt;/p>
&lt;p>每当约定好打球日期，第二天带齐了球衣和球鞋，下班后刚给篮球打满气，还没来及拿起来在手指上转一下，只见天空一道闪电，紧跟着大雨倾盆而下，大家只得各自回家收衣服。&lt;/p>
&lt;p>同事们都感叹又发现一求雨的新招数，无论哪个地方干旱少雨，只需我们带齐装备过去打球，过不多时必有甘霖降落。&lt;/p>
&lt;p>今天，大家没带球衣，也没带球鞋，篮球也没打气，天，晴了！&lt;/p></description></item><item><title>断网一天的感受</title><link>https://sbabybird.github.io/p/%E6%96%AD%E7%BD%91%E4%B8%80%E5%A4%A9%E7%9A%84%E6%84%9F%E5%8F%97/</link><pubDate>Tue, 01 Jul 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%96%AD%E7%BD%91%E4%B8%80%E5%A4%A9%E7%9A%84%E6%84%9F%E5%8F%97/</guid><description>&lt;p>公司的光纤今日出了故障，整整一天无法上线，感受如下：&lt;/p>
&lt;p>1、无法与出差现场的同事交流，同事亦无法访问公司网络，导致工作受阻。&lt;/p>
&lt;p>2、IM 软件不能上线，家人朋友都很担心，老妈更是打来电话，问我为什么 qq 不在线。&lt;/p>
&lt;p>3、不能收发电邮，心情焦躁不安。&lt;/p>
&lt;p>4、无法获取最新资讯，感觉与世隔绝了。&lt;/p>
&lt;p>5、GoogleReader 积累了 200+的未读条目，原来我订阅了这么多信息。&lt;/p>
&lt;p>6、终于修好了，爽！&lt;/p></description></item><item><title>终于见识了Vista</title><link>https://sbabybird.github.io/p/%E7%BB%88%E4%BA%8E%E8%A7%81%E8%AF%86%E4%BA%86vista/</link><pubDate>Mon, 30 Jun 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%BB%88%E4%BA%8E%E8%A7%81%E8%AF%86%E4%BA%86vista/</guid><description>&lt;p>昨天，一朋友新买了台笔记本，预装 WindowsVista 操作系统，我拿到手把玩一会儿，见识了传说中的 Vista。&lt;/p>
&lt;p>界面确实是漂亮了许多，确切的说是比起我用的 XP 界面华丽了很多，但是咱也有 Ubuntu 啊，Linux 下的界面也不是盖的。&lt;/p>
&lt;p>至于速度呢，真是让人难以接受（忍受），想不通微软那帮儿天才是不是故意把系统弄得这么慢，明明硬件配置已经很高了，要是跑 xp 能让它飞起来，但是 Vista 却慢慢吞吞咿咿呀呀哼上老半天，让我想到了我十年前第一次启动 Win98。&lt;/p>
&lt;p>同样，关机也是很慢，一副可怜兮兮、依依不舍的样子，恨不得让你直接拔电池。&lt;/p>
&lt;p>Vista 另一个让我不爽的方面应该就是 UAC（用户帐户控制）了，对于这个功能，我的理解就是典型的掩耳盗铃，因为随便你运行个什么程序系统都会不厌其烦地弹出一个框，告诉你这是个陌生程序，它不确定是否安全，问你是否继续，如果你允许了，那么他也就没有任何责任了。&lt;/p>
&lt;p>可是我又怎么知道这个程序有没有威胁？我要是知道我还会运行它吗？&lt;/p>
&lt;p>靠！今天看到消息说，从本周一起微软就再也不买 XP 了，这也就意味着，你如果还想用 Windows 以后只能买 Vista 了。&lt;/p>
&lt;p>以后再买笔记本也只能预装 Vista 了，一句话，微软要逼着我们用他的新系统了。但我还是决定对 xp&amp;quot;不抛弃，不放弃&amp;quot;，这次 Vista 的使用经历更是坚定了我的观点，让华丽的 Vista 见鬼去吧！&lt;/p>
&lt;p>ps：不行就用 Linux&lt;/p></description></item><item><title>驱蚊良方</title><link>https://sbabybird.github.io/p/%E9%A9%B1%E8%9A%8A%E8%89%AF%E6%96%B9/</link><pubDate>Sun, 29 Jun 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%A9%B1%E8%9A%8A%E8%89%AF%E6%96%B9/</guid><description>&lt;p>入夏以来，被蚊子叮咬数次，胳膊的红点竟呈北斗七星状。冥思苦想，得一良方。活捉蚊子一只，将长嘴拔掉，悬挂于床前，众蚊子观其惨状均不敢靠前半步。&lt;/p></description></item><item><title>今天居然不加班</title><link>https://sbabybird.github.io/p/%E4%BB%8A%E5%A4%A9%E5%B1%85%E7%84%B6%E4%B8%8D%E5%8A%A0%E7%8F%AD/</link><pubDate>Sat, 28 Jun 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BB%8A%E5%A4%A9%E5%B1%85%E7%84%B6%E4%B8%8D%E5%8A%A0%E7%8F%AD/</guid><description>&lt;p>像往常一样，周六的早晨匆匆醒来，洗漱完毕拿起包推门而出，忽然想起，今天不加班！&lt;/p></description></item><item><title>是爷们儿就得顶着，看了《太极旗飘扬》</title><link>https://sbabybird.github.io/p/%E6%98%AF%E7%88%B7%E4%BB%AC%E5%84%BF%E5%B0%B1%E5%BE%97%E9%A1%B6%E7%9D%80%E7%9C%8B%E4%BA%86%E5%A4%AA%E6%9E%81%E6%97%97%E9%A3%98%E6%89%AC/</link><pubDate>Sun, 22 Jun 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%98%AF%E7%88%B7%E4%BB%AC%E5%84%BF%E5%B0%B1%E5%BE%97%E9%A1%B6%E7%9D%80%E7%9C%8B%E4%BA%86%E5%A4%AA%E6%9E%81%E6%97%97%E9%A3%98%E6%89%AC/</guid><description>&lt;p>真实的战争场面和细腻的故事情节让《太极旗飘扬》这部影片成为了和《拯救大兵瑞恩》同样经典的战争片，&lt;/p>
&lt;p>我认为甚至超越了后者，因为《拯救大兵瑞恩》带给我更多的是战斗场景的震撼，而太极旗飘扬则在震撼之外又多了一些在情感上的触动。&lt;/p>
&lt;p>战争到来的时候，带来了无尽的不幸和灾难，无数的人卷入这残酷的漩涡。&lt;/p>
&lt;p>故事的主角&amp;quot;镇泰&amp;quot;本来和家人幸福的生活在一起，弟弟马上就要念大学了，妈妈和妻子开的面摊也刚刚有了起色，而且自己修鞋的手艺也越来越高超，挣钱供养弟弟上大学应该没有问题，虽然他自己连一个字也不识，但是他很满足。&lt;/p>
&lt;p>然而，战争的到来让一切幸福都成为泡影，他们兄弟俩很快被抓了壮丁，与亲人失散。&lt;/p>
&lt;p>战场上的血雨腥风让他们很快成长起来，每时每刻都有人死去，在战斗中，作为哥哥，镇泰时刻保护着年幼体弱的弟弟，不惜生命的代价。后来他又听到一个传说：&amp;quot;只要得到一枚总统颁发的勋章就可以让一位自己在军队里的亲人回家&amp;quot;他相信了，为了勋章，为了能让弟弟离开战场，他拼了命，甚至让他的弟弟误会他，以为他为了得到荣誉而不顾一切。&lt;/p>
&lt;p>他终于拿到了勋章，可是他弟弟却没能回家，他所得到的却是眼睁睁地看着自己贤惠的妻子被战友当作叛徒无情地射杀，那一刻我想他肯定比子弹打在身上还难受。&lt;/p>
&lt;p>后来他的弟弟被当作叛徒要被烧死（被救出，但是他不知道，一直认为弟弟被战友烧死了）。&lt;/p>
&lt;p>他绝望了，他为了弟弟、为了家人所做的这一切只给他带来了更多的不幸。于是他成了俘虏，他叛变了，他开始疯狂地报复，当两兄弟在战场上互相以敌人的身份见面时，他已经杀红了眼，两人厮杀很久，在弟弟的叫声中他终于清醒了，可是弟弟的部队已经开始败退了，两个人面临生死抉择，弟弟需要撤走，而他需要留下来为弟弟断后。&lt;/p>
&lt;p>看到弟弟安全撤走，他欣慰地死去，为了弟弟，他已用尽了自己最后一丝力气。&lt;/p>
&lt;p>整部电影想要表达的以及所表达的远不止这些内容，抛开历史的真实性和导演的政治观点不说（这些仁者见仁智者见智，毕竟这是韩国的电影），我觉得一部电影，看完了能够让我思考的，那就是一部好电影。&lt;/p>
&lt;p>通过影片我看到了战争带给人们的苦难以及和平的珍贵，看到了生命的脆弱和人性的光辉。&lt;/p>
&lt;p>片中很多情节充满血腥，很多情节又饱含温情，看到两兄弟最后战场离别的那一刻，我更看到了，作为一个男人的责任。&lt;/p>
&lt;p>当镇泰倒下去，看着弟弟的背影死去，我只想说：&amp;quot;镇泰是个爷们儿，纯的！&amp;quot;&lt;/p></description></item><item><title>算法导论+《赤道和北极》=失眠</title><link>https://sbabybird.github.io/p/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-%E8%B5%A4%E9%81%93%E5%92%8C%E5%8C%97%E6%9E%81%E5%A4%B1%E7%9C%A0/</link><pubDate>Fri, 20 Jun 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA-%E8%B5%A4%E9%81%93%E5%92%8C%E5%8C%97%E6%9E%81%E5%A4%B1%E7%9C%A0/</guid><description>&lt;p>昨晚又严重失眠，本来想早早睡觉，便从书架上抽出一本比较枯燥的书（《计算机算法导论》）在睡前翻翻，我想这样可以很快睡着。&lt;/p>
&lt;p>谁知竟越看越有精神，于是打开收音机，想找个唠叨的主持人催眠一下。&lt;/p>
&lt;p>交通台正在放春晓主持的一档音乐节目，这个主持人声音比较有特点（就是那句：“身未动～～心已远～～让我们一起走吧～～～”）&lt;/p>
&lt;p>正所谓：男有伍洲彤女有春晓，这俩人的节目用来边听边睡刚好。&lt;/p>
&lt;p>忽听得一阵优美的吉他，竟是另一版本的《赤道和北极》，此歌旋律优美，再加上女歌手声线极美，不由得让人思绪万千。&lt;/p>
&lt;p>此处省略 1 千字以后晚上再也不敢听这个音乐节目了，除非不想睡觉。&lt;/p></description></item><item><title>软件需求与“让你丫不戴帽子”</title><link>https://sbabybird.github.io/p/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E4%B8%8E%E8%AE%A9%E4%BD%A0%E4%B8%AB%E4%B8%8D%E6%88%B4%E5%B8%BD%E5%AD%90/</link><pubDate>Mon, 16 Jun 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E4%B8%8E%E8%AE%A9%E4%BD%A0%E4%B8%AB%E4%B8%8D%E6%88%B4%E5%B8%BD%E5%AD%90/</guid><description>&lt;p>改了一天的软件 bug，发发牢骚：&lt;/p>
&lt;p>在软件开发过程中，开发人员最担心的不是客户提出的功能需求从技术上难以实现，而是客户往往毙掉你费尽心血开发的功能，然后天马行空地提出另一套思路，如果你抱着客户就是上帝的想法，满足了他们的变态要求，那么，苦日子接着就来了，因为这些变态的家伙会在软件的功能需求上反反复复、朝三暮四并乐此不疲。&lt;/p>
&lt;p>比如你的程序完成了某一项任务后没有提示，他会说“为什么干完了不提示我一下？”&lt;/p>
&lt;p>而如果你跳出来提示他又会觉得很烦“干完了为什么还要烦我一下？”，&lt;/p>
&lt;p>最后只好弄成可配置，但人家又嫌配置起来太罗嗦，不人性化。&lt;/p>
&lt;p>不多说了，想起来一个经典的笑话说兔子跟街上走着，迎面碰上了老狼。&lt;/p>
&lt;p>老狼伸手就给他一大嘴巴，“让你丫不戴帽子”。　　兔子很郁闷地回家了，弄一帽子戴着。&lt;/p>
&lt;p>第二天又碰上老狼了，又挨了一大嘴巴，“让你丫戴帽子”。　　如是几次，总挨打。&lt;/p>
&lt;p>兔子想，这么老挨打不是个事儿啊，不行，我得找老虎投诉去。&lt;/p>
&lt;p>刚到老虎家门口，就听老虎在屋里说话。&lt;/p>
&lt;p>你也不能老这么蛮不讲理打兔子阿，回头兔子找我投诉来，我也不好罩着你啊。&lt;/p>
&lt;p>好歹咱面子上得过得去，我教你一招。&lt;/p>
&lt;p>下回你见着兔子，跟他说：给我弄点儿洗衣服的来。他给你拿肥皂来，你就打他一顿的，说我要的是洗衣粉，谁让你拿肥皂。他拿来洗衣粉，你也能打，说我要肥皂，谁让你拿洗衣粉。&lt;/p>
&lt;p>要不然你跟他说，去，给我找个女人来。他给你找个胖的，你打他一顿说我要瘦的；给你找个瘦的，你也打一顿，说我要胖的。　　这样不结了，你也能打他，我面子上也能说得过去。”　　兔子一听，得，咱也别投诉了，回家吧。&lt;/p>
&lt;p>第二天，兔子在街上又撞上老狼。老狼大喝一声：去，给我找点儿洗衣服的来。&lt;/p>
&lt;p>兔子不慌不忙：你是要洗衣粉阿，还是要肥皂啊？&lt;/p>
&lt;p>老狼一听，嗯？有一手阿。又说：去，给我找个女人来。&lt;/p>
&lt;p>兔子还是不慌不忙：你是要胖的啊，还是瘦的？&lt;/p>
&lt;p>老狼一听勃然大怒，伸手就给兔子一个大嘴巴，&lt;/p>
&lt;p>让你丫不戴帽子！&lt;/p></description></item><item><title>有阵子没打篮球了</title><link>https://sbabybird.github.io/p/%E6%9C%89%E9%98%B5%E5%AD%90%E6%B2%A1%E6%89%93%E7%AF%AE%E7%90%83%E4%BA%86/</link><pubDate>Sun, 15 Jun 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%89%E9%98%B5%E5%AD%90%E6%B2%A1%E6%89%93%E7%AF%AE%E7%90%83%E4%BA%86/</guid><description>&lt;p>今天继续发扬每到周末就睡不着觉的光荣传统，比平时上班起的还早。&lt;/p>
&lt;p>洗了个澡，饶有兴致地做了顿早餐（花了一个小时，吃了 5 分钟）。&lt;/p>
&lt;p>还没来得及把电视频道翻看一遍，大宝就喊我去打篮球，二话不说，换好球鞋飞奔球场。&lt;/p>
&lt;p>抓起篮球才发现，已经很生疏了，找不到一点儿手感。&lt;/p>
&lt;p>来回跑二十分钟就开始喘气了，还好，4 对 4 的接波比赛中总算懵进了几个球。&lt;/p>
&lt;p>渐渐找到感觉，跑动越发积极，身法也越来越快。队友一个快速传球，我以迅雷不及掩耳盗铃之势抓住球，猛跑两步，转身！跳起！腿抽筋儿了！&lt;/p>
&lt;p>看来我是得注意一下平时的锻炼了。&lt;/p></description></item><item><title>我的吉他梦</title><link>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E5%90%89%E4%BB%96%E6%A2%A6/</link><pubDate>Mon, 09 Jun 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E5%90%89%E4%BB%96%E6%A2%A6/</guid><description>&lt;p>一个人太无聊，一天没说话，吃饭睡觉打豆豆，傍晚时分，想出去活动活动，溜达到客厅，看见角落里那把吉他，突然想活动活动手指。&lt;/p>
&lt;p>我拿起琴，吹了吹上面的灰，呛得我咳嗽了半天，调了调弦，闭上眼睛，富有激情地弹了一曲“两只老虎”，希望没有吵到邻居，虽然听到楼上孩子的哭声，但是我觉得那是该喂奶了，小孩子还小，还不能体会音乐的灵魂，怎么可能感动的哭呢？&lt;/p>
&lt;p>其实我十年前就开始学琴了，不过绝对不是为了泡妞而学，而是怀着对音乐的满腔热情而学，虽然也曾幻想抱着吉他站在某个女孩的门前，大声唱着“冷雨夜我不想归家，盼望你会知，可知道我滴心&amp;hellip;.”，&lt;/p>
&lt;p>无奈我手指上的茧子退了一层又一层仍是达不到理想的水平，只能一个人的时候弹两曲消遣一下而已。&lt;/p>
&lt;p>大学的时候，每当我在寝室练琴就有隔壁同学跑过来说：“你们谁在这把床推来推去的？弄得地板咯吱咯吱的？”，&lt;/p>
&lt;p>有一次，管理宿舍的大爷一路咆哮着就上来了：“说过多少遍了！寝室里面不能做饭！”，&lt;/p>
&lt;p>“没有啊，大爷”“还说没有！我在楼下都听到炒菜的声音了！”&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>他们就这样把我成为一个吉他手的梦想给残忍地扼杀了。&lt;/p>
&lt;p>后来我迷恋上了编程（也能活动手指），吉他就被我丢到了角落，偶尔还会拿起来拨两下就像今天这样。&lt;/p>
&lt;p>当然了，这个梦并未完全破灭，我仍然幻想着某天弹吉他能像现在敲电脑键盘这么熟，刚工作那会儿我给自己定了计划，觉得无论如何也得在三十岁之前把吉他练成，现在，眼看着快三十了，吉他上的灰却越来越厚。&lt;/p></description></item><item><title>注册atl组件返回错误0x80040154的原因及解决办法</title><link>https://sbabybird.github.io/p/%E6%B3%A8%E5%86%8Catl%E7%BB%84%E4%BB%B6%E8%BF%94%E5%9B%9E%E9%94%99%E8%AF%AF0x80040154%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Wed, 28 May 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%B3%A8%E5%86%8Catl%E7%BB%84%E4%BB%B6%E8%BF%94%E5%9B%9E%E9%94%99%E8%AF%AF0x80040154%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>&lt;p>今天用 VC6 做了一个 com 组件，使用 ATL 模板创建，结果在使用 regsvr32.exe 注册时死活注册不上，返回 0x80040154，使用 ErrorLookup 查看错误号结果是“没有注册类别”，百思不得其解，即使以前可以注册的组件现在也无法注册了，怀疑是操作系统的问题。&lt;/p>
&lt;p>上网搜索了半天，最终还是在微软的官方网站上找到了一点儿蛛丝马迹：&lt;/p>
&lt;p>“WhenyouregisteranATLserver,youmightgeterror0x80040154(Classnotregistered).ForDLLs,REGSVR32.exereturnsthiserror.ForEXEs,thecallto_Module::&lt;/p>
&lt;p>RegisterServer(CComModule::RegisterServer)in_tWinMain()returnsthiserror.”，&lt;/p>
&lt;p>接着往下看“InstallATL70.dll(orATL.dllforearlierversionsofVisualStudio)intheWindows\SystemorWinnt\System32directory.YoudonothavetoregisterATL70.dll,however,youmustregisterATL.dllbyusingRegsvr32.exe.ThereareUNICODEandANSIversionsofATL70.dllandATL.dll.Installtheappropriateversiononthetargetoperatingsystem(thatis,UNICODEforMicrosoftWindowsNT,andANSIforMicrosoftWindows95orMicrosoftWindows98).”&lt;/p>
&lt;p>哦，原来是 system32 下面的 atl.dll 没有注册，打开 C:\windows\system32\找到 atl.dll 后使用 regsvr32 注册，然后再注册我的组件，成功！&lt;/p>
&lt;p>结论：怀疑在安装、卸载软件或使用优化软件进行系统清理的时候不小心反注册了 atl.dll，导致使用 atl 模板创建的 com 组件均无法注册。&lt;/p>
&lt;p>ps：两年前就遇到过此问题，当时无法搞定，只得重装系统，今天总算找到问题的原因了&lt;/p></description></item><item><title>eeepc 使用技巧（3）vim搭建c开发环境</title><link>https://sbabybird.github.io/p/eeepc-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A73vim%E6%90%AD%E5%BB%BAc%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link><pubDate>Mon, 26 May 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/eeepc-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A73vim%E6%90%AD%E5%BB%BAc%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid><description>&lt;p>今天继续记录 eeepc 的使用经验，闲言碎语不要讲，说一说如何安装 c、c++开发环境以及在 vim 下进行编程。&lt;/p>
&lt;p>安装开发环境很简单，不用单个安装 gcc、make 什么的，只需 sudoapt-getinstallbuild-essential,这里面就什么都包含了（gcc、g++、gdb、make 等）。&lt;/p>
&lt;p>然后就找个合适的编辑器吧，系统自带 vim，vim 太强大了，这里不能多说（我也是刚开始用它），但是只有最基本的编辑功能，要想比较方便地进行开发需要安装如下 vim 插件：ctags、Taglist、supertab、c.vimctags 其实不算是插件，算是单独的程序，用来生成 vim 能识别的标签文件，这样在 vim 写代码时就可以进行函数、变量、枚举类型之间快速定位了。&lt;/p>
&lt;p>taglist 可以在 vim 窗口的左侧生成一个 tags 列表，里面就是用 ctags 生成那些标签，方便随时定位到这些标签 supertab 是个增强版的代码补齐插件，写代码时按 tab 键可以弹出自动补齐列表供选择，如“p”可以自动补齐为“printf”c.vim 是进行 c、c++编程时的必备插件，能使 vim 变成一个为开发 c 语言定制的一个 ide，拥有自动注释、F9 编译，自动补全等强大功能。&lt;/p>
&lt;p>插件装好后，在 vim 的 vimrc 文件里需要加上 syntaxon 这样每次启动 vim 时，它的语法高亮功能就自动打开了。&lt;/p>
&lt;p>写一段代码试试看 vimhelloworld.c#include&amp;lt;stdio.h&amp;amp;gt;intmain(){printf(&amp;quot;helloworld&amp;quot;);return0;}:wq 退出编译：gcchelloworld.c-ohelloworld&lt;/p>
&lt;p>运行：./helloworld&lt;/p></description></item><item><title>《Are You The One》以及流鼻血</title><link>https://sbabybird.github.io/p/are-you-the-one%E4%BB%A5%E5%8F%8A%E6%B5%81%E9%BC%BB%E8%A1%80/</link><pubDate>Fri, 23 May 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/are-you-the-one%E4%BB%A5%E5%8F%8A%E6%B5%81%E9%BC%BB%E8%A1%80/</guid><description>&lt;p>AreYouTheOne，这是一首好听得不得了的歌曲，来自荷兰 WithinTemptation 乐队，主唱 Sharon 绝对是超级女声，有着高亢的声线、鬼魅一般的嗓音。&lt;/p>
&lt;p>从听第一遍就喜欢上这首歌儿了，让我停不下来，反复播放，直至流鼻血。曲中 3 分 13 秒开始的那一段电吉他 solo 实在是荡气回肠。&lt;/p>
&lt;p>Areyoutheone?你是他么?Thetravellerintimewhohascome.进入我生命的陌生人 Tohealmywoundstoleadmetothesun.治愈心伤,播撒阳光 Towalkthispathwithmeuntiltheendoftime.结伴走在生命的小路上 Areyoutheone?你是他吗 Whosparklesinthenightlikefireflies.萤火虫般流彩的目光 Eternityofeveningsky.对视,在永恒的夜空 Facingthemorningeyetoeye.直至晨曦来到 Areyoutheone?你是他吗 Who'dsharethislifewithme.与我共度此生 Who'ddiveintotheseawithme.与我在深海偎依 Areyoutheone?你是他吗 Who'shadenoughofpain.受尽创伤 Anddoesn'twishtofeeltheshame,anymore.不愿再心伤 Areyoutheone?你会是他吗 Areyoutheone?你是他吗 Who'sloveislikeaflowerthatneedsrain.他的爱是雨中的花朵 Towashawaythefeelingofpain.冲去了忧伤 Whichsometimescanleadtothechainoffear.不再迷茫彷徨 Areyoutheone?你是他吗 Towalkwithmeingardenofstars.一起走在群星之下 Theuniverse,thegalaxiesandMars.火星,银河,宇宙 Thesupernovaofourloveistrue.见证我们爱的迸发&lt;/p>
&lt;p>ps：流鼻血可能与这首歌曲无关，这两天比较上火，昨天下班时，看到路边有课桑树，上面结满了熟透了的桑椹，于是我童心顿起，顺手摘了几颗放在嘴里，还挺甜的。&lt;/p>
&lt;p>小时候挺爱吃桑椹，到了季节就大把大把的吃，大人总是吵着不让多吃，说吃多了会流鼻血，没想到我昨天刚吃了几颗，今天就流鼻血了。&lt;/p>
&lt;p>再 ps：从今天开始，北京算是进入真正的夏天了，突然就热了起来，非常热，办公室里热的像蒸笼，空调也不管用，当然，天气这么热也有 Intel 的功劳，整个电脑机箱热的像是路边烧烤用的碳火炉，再烤下去，晚饭就能吃“烤人腿”了。&lt;/p></description></item><item><title>eeepc 使用技巧(2)</title><link>https://sbabybird.github.io/p/eeepc-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A72/</link><pubDate>Thu, 22 May 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/eeepc-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A72/</guid><description>&lt;p>接着昨天的继续，系统修改为中文了，软件源设好了，输入法也装好了，接下来就想看看小 e（姑且把我的 eeepc 叫做小 e）的多媒体性能咋样儿了（其实就是看看能不能看片儿）。&lt;/p>
&lt;p>小 e 自带有 mplayer 以及前端的 SMPlayer，播放一般视频（mpeg、wmv）效果挺不错，遗憾的是还不能播放 rmvb，上网查了一下原来是缺少相应的解码包，&lt;/p>
&lt;p>于是乎，就找到了这个 win32codecs 下载后将这个压缩包解压后的内容放到/usr/lib/codecs 下即可，系统默认并没有 codecs 这个文件夹，需要手动创建 sudomkdir/usr/lib/codecs，然后复制 cp/home/user/win32codecs/*/usr/lib/coecs。&lt;/p>
&lt;p>好了，在命令行输入 mplayer/home/user/*.rmvb-f-z 很流畅的画面就出现了，此时的-f 和-z 参数分别代表全屏和自动缩放画面到窗口大小。然后我又尝试播放了一下 720p 的高清视频（wmv 格式），小 e 也能轻松胜任，画面很清晰，也很流畅，看来 mplayer 这个软件写的很棒，虽然是命令行格式的，但是我喜欢。&lt;/p></description></item><item><title>eeepc 使用技巧(1)</title><link>https://sbabybird.github.io/p/eeepc-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A71/</link><pubDate>Wed, 21 May 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/eeepc-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A71/</guid><description>&lt;p>买了 eeepc900 一段时间了，翻遍很多论坛，也慢慢摸索一些基本使用技巧，不敢独享，一直想写出来，只是最近工作很忙，加上地震带来的全国性灾难，导致最近几天也没心思去写。&lt;/p>
&lt;p>现在，让我整理一下思路，慢慢把经验写下来，也防止我以后会忘记。&lt;/p>
&lt;p>eeepc 可以安装 xp 操作系统，但是我喜欢 linux，买了 eeepc 有一半是为了使用 linux，所以我不会把他自带的系统干掉然后安装 xp 系统，windows 操作系统我实在是用腻了。&lt;/p>
&lt;p>因为只有装了 linux 系统的机器才能让我感到完全是“自己的”。&lt;/p>
&lt;p>eeepc900 自带有定制的 linux 操作系统，而且是基于 debian 的发行版，哇，有了 debian 一切都好办了。&lt;/p>
&lt;p>debian 有强大的 apt－get 软件包管理系统，但是 eeepc 的说明书上吓唬我说“用户不能自行安装其他软件”，咳，管他呢，我查了一下，原来是在 apt 的 source.list 里没有相应的源而已，而且 eeepc 里也自带了“新立得软件管理器”只是没放出来而已。&lt;/p>
&lt;p>好了，先从“控制台”开始，刚拿到手的时候，我费了老半天的劲儿才找到控制台窗口打开的办法，看来 asus 实在太担心用户的智商了。答案是按“Ctrl+Alt+T“就能调出控制台，要知道在 Lxiux 下有了”控制台“才算有了系统的操纵权啊！&lt;/p>
&lt;p>由于默认是英文版的，让我先把系统从英文调整到中文吧在控制台输入/opt/xandros/bin/locale_dialog 然后在弹出的对话框中选择简体中文，重启机器，就变成中文系统了。&lt;/p>
&lt;p>随机带的软件太少了，而且大部分还是给小孩子用的，根本不够我用，本地化之后就我就开始想办法安装软件控制台输入&lt;code>vim/etc/apt/sources.list&lt;/code>发现该文件就两行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">debhttp&amp;amp;#58;//update.eeepc.asus.com/p900p900maindebhttp&amp;amp;#58;//update.eeepc.asus.com/p900/enp900main增加如下内容：debhttp&amp;amp;#58;//debian.cn99.com/debianstablemaincontribnon-free
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后：wq 存盘退出 sudoapt-getupdate 这样就有了 debian 的基本源，现在开始使用 apt-getinstall 疯狂安装想要的软件吧！&lt;/p>
&lt;p>由于我这个版本默认的输入法管理器是 gcin 的，虽然也有拼音输入，但是不符合大陆人的输入习惯，所以我首先要安装 scim，在控制台输入 sudoapt-getinstallscimscim-chinese，要想使用 scim 还需要一个软件 sudoapt-getinstallim-swich，然后把 gcin 卸载 sudoapt-getinstallgcin-好了，切换到 scim 吧，输入 sudoim-switch-sscim 然后重启机器，输入法管理器就变成 scim 啦！&lt;/p>
&lt;p>唉，eeepc 的键盘实在是太小了，在上面打字实在是太累，先写这么多，估计也就有十分之一吧，剩下的以后再慢慢写。&lt;/p></description></item><item><title>测试从scribefire发布blog</title><link>https://sbabybird.github.io/p/%E6%B5%8B%E8%AF%95%E4%BB%8Escribefire%E5%8F%91%E5%B8%83blog/</link><pubDate>Tue, 20 May 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%B5%8B%E8%AF%95%E4%BB%8Escribefire%E5%8F%91%E5%B8%83blog/</guid><description>&lt;p>使用 firefox 在 eeepc900 上发布测试用无内容&lt;/p></description></item><item><title>我的妈妈</title><link>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E5%A6%88%E5%A6%88/</link><pubDate>Sun, 11 May 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E7%9A%84%E5%A6%88%E5%A6%88/</guid><description>&lt;p>从小学到初中的作文课，几乎每个语文老师都布置过“我的妈妈”这篇作文，&lt;/p>
&lt;p>很多同学文笔细腻，感情丰富，写出的作文真实流畅，总被老师挑选出来作为范文朗诵，让我很是羡慕，&lt;/p>
&lt;p>不过，我作文水平极差，在课堂上拼命咬着铅笔头，恨不得把橡皮也吞下去，还是凑不够字数。&lt;/p>
&lt;p>很想回忆一下当时写的别字连篇的作文，不过一晃过去那么多年，现在一个字儿也想不起来了。&lt;/p>
&lt;p>母亲节了，我再写一篇试试。&lt;/p>
&lt;p>我的妈妈我妈今年五十岁了，虽然她看起来还不到五十岁，而且在我心目中也就是四十来岁的样子，我总是笑着跟她说：“妈，您是越活越年轻啊！”每当这个时候她总是高兴得合不拢嘴，心里美滋滋的。&lt;/p>
&lt;p>是的，没错！我说的是实话，我妈是挺年轻的。&lt;/p>
&lt;p>我妈是一名出色的乡村教师，我小的时候，爸爸在邻村的中学教书（巧了，我爸也是老师）平时不在家里住，我妈就在我们村的小学，条件极为艰苦，当时为了带我，她吃了不少苦头，一方面是她平时工作任务很重，乡村学校缺老师，她一个人要教好几门功课，跨越几个年级，另一方面是我体弱多病，当时家里又不富裕，照看我这样儿的孩子要比别的孩子多费几倍的心血。&lt;/p>
&lt;p>但是她很要强，工作很优秀，同时在她的精心培养下我也茁壮成长，到了今天，我可以很负责任的说，她很成功。说到对我培养，我刚才说的好像有点儿不太谦虚，呵呵，我所指的成功就是，她把我培养成了一个善良的人，并且给了我一个快乐的童年。&lt;/p>
&lt;p>想到小时候，其实我妈的脾气还是有点儿火爆的，我要是做错了事儿，挨揍也肯定是跑不掉的。但那都是因为我不懂事，打我那是怕我将来成为一个无用人，而且，所谓“打在儿身，疼在娘心”啊，我挨完揍，她也偷偷抹眼泪。&lt;/p>
&lt;p>虽然先说了我妈会打我，但那毕竟是少数，大部分时候妈妈是和蔼可亲的，而且对我也百般呵护、百依百顺，要什么就给什么，想吃什么就做什么，现在回想起来，她对我简直是太溺爱了。&lt;/p>
&lt;p>妈妈心灵手巧，我小时候没什么高级玩具，别人折的纸船、纸飞机、风车什么的，她拿到手后，拆开一看，马上就会折了，而且马上把我教会（看来，我也很聪明）。&lt;/p>
&lt;p>小孩子都爱拆东西，别家的孩子拆了可能会挨揍，但是我妈见我拆东西不但不打我，而且还带我一起拆玩具，有次我把我仅有的很贵的“坦克”玩具给拆坏了，我妈费了好大的劲儿才把它修好。&lt;/p>
&lt;p>后来我上学了，还是保留了这个爱好，拆拆装装的东西弄了一整箱，从收音机到电子表应有尽有，我觉得那些才是最好的玩具。我妈的心灵手巧并非表现在这个方面，她的缝纫技术也是出类拔萃，邻里之间有人要做衣服肯定让她帮着剪衣样，有次她给我做了个棉袄，样式比商场里面卖的还新潮，惹得很多孩子也吵着要这样儿的。&lt;/p>
&lt;p>织毛衣也不在话下，不但图案精美，而且速度飞快，有次，天气突然转冷，妈妈怕我妹妹冻着，一夜之间就给我妹妹织了一顶帽子。&lt;/p>
&lt;p>现在，妈妈还是能跟上时代的潮流，我给老家装上了电脑，她也很快学会了打字，想我了就上 QQ 和我聊两句，周末我们还会视频一下，聊聊一周的家长里短。&lt;/p>
&lt;p>随着妈妈年龄的增长，她对我们也越来越依赖了，有时候陪着她聊天，我随便说个笑话就把妈妈逗得前仰后合，笑得眼泪都快下来了。她每天都上网上看看，虽然并不是每次都和我聊天（怕我工作忙），但是她说，看到我的 QQ 也在线，心理就很踏实了。&lt;/p>
&lt;p>今天是母亲节，一个感恩的节日，身在遥远的北京，我坐在电脑前，写一点儿文字，衷心祝愿我的妈妈以及天下所有的妈妈都幸福安康。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">慈母手中线
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">游子身上衣
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">临行密密缝
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">意恐迟迟归
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">谁言寸草心
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">报得三春晖
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>有了压力你就喊</title><link>https://sbabybird.github.io/p/%E6%9C%89%E4%BA%86%E5%8E%8B%E5%8A%9B%E4%BD%A0%E5%B0%B1%E5%96%8A/</link><pubDate>Fri, 25 Apr 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%89%E4%BA%86%E5%8E%8B%E5%8A%9B%E4%BD%A0%E5%B0%B1%E5%96%8A/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%89%E4%BA%86%E5%8E%8B%E5%8A%9B%E4%BD%A0%E5%B0%B1%E5%96%8A/20080424.png" alt="Featured image of post 有了压力你就喊" />&lt;p>周末和几个哥们儿喝酒，喝完了哥们儿提议去 K 歌，很久没 K 了，我在包厢里抱着话筒死活不肯松手，再一次展现了&amp;quot;麦霸&amp;quot;的风范。&lt;/p>
&lt;p>借着酒劲儿我愣是把一首首温柔的情歌咆哮出了&amp;quot;摇滚&amp;quot;加&amp;quot;死亡金属&amp;quot;的味道，那声音，比杀猪好听多了。&lt;/p>
&lt;p>没办法，情歌就是得用真实的声音来诠释，而和朋友一起喝完小酒后的情感往往是奔放的、原始的、撕心裂肺的。&lt;/p>
&lt;p>管你是青藏高原还是回到拉萨；是左等右等（RightHereWating）还是加州招待所（CaliforniaHotel）；&lt;/p>
&lt;p>是国粹京剧还是家乡地方戏，一律来者不拒，而且必须是原调！&lt;/p>
&lt;p>那一刻我觉得，就是帕瓦罗蒂过来飙高音咱都不惧他！&lt;/p>
&lt;p>唱完歌，觉得通体舒畅，酒也解了，一切的压力都烟消云散，腰也不酸了，背也不疼了，一口气儿也能上 5 楼了。&lt;/p>
&lt;p>突然想起一句名言，在这儿给他改一改，就叫&amp;quot;有了压力你就喊！&amp;quot;&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 4/24/200809:00:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>梦，神经衰弱</title><link>https://sbabybird.github.io/p/%E6%A2%A6%E7%A5%9E%E7%BB%8F%E8%A1%B0%E5%BC%B1/</link><pubDate>Fri, 28 Mar 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%A2%A6%E7%A5%9E%E7%BB%8F%E8%A1%B0%E5%BC%B1/</guid><description>&lt;p>昨晚，编程时有一问题困惑很久，反复调试总是失败，无奈，只得放弃，怀着郁闷的心情睡去。&lt;/p>
&lt;p>睡梦中恍恍惚惚仿佛有人叫我，原来是一白胡子老头，声音洪亮（略有东北口音），精神矍铄，约我相谈技术话题。&lt;/p>
&lt;p>只见该老头唾沫横飞，指指点点，谈笑间从身后掏出一笔记本电脑，当场就把 VC6 启动起来。我定睛一看，我靠！这不就是我白天写了一下午的那些代码么？&lt;/p>
&lt;p>老头边解说边将我的代码略为修改，我顿时感到豁然开朗，遂给我演示了一下运行效果，果然很流畅，问题得以解决。&lt;/p>
&lt;p>惊喜使我从梦中醒来，回忆刚才的场景，起床倒了一杯水，拿起纸笔，十分虔诚地把刚才的思路记了下来，我甚至能记住当时的函数和变量的名称。&lt;/p>
&lt;p>一大早到了公司，启动环境，将代码输入电脑，居然能编译通过！怀着激动的心情运行之，程序吭都没吭一声就崩溃了，看着巨大的“内存错误窗口”，我不禁哑然失笑，梦里的东西怎能当真呢，还以为有仙人助我，原来是我神经衰弱。&lt;/p></description></item><item><title>最讨厌你们这些“黑客”，一点儿技术含量都没有</title><link>https://sbabybird.github.io/p/%E6%9C%80%E8%AE%A8%E5%8E%8C%E4%BD%A0%E4%BB%AC%E8%BF%99%E4%BA%9B%E9%BB%91%E5%AE%A2%E4%B8%80%E7%82%B9%E5%84%BF%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E9%83%BD%E6%B2%A1%E6%9C%89/</link><pubDate>Wed, 26 Mar 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%80%E8%AE%A8%E5%8E%8C%E4%BD%A0%E4%BB%AC%E8%BF%99%E4%BA%9B%E9%BB%91%E5%AE%A2%E4%B8%80%E7%82%B9%E5%84%BF%E6%8A%80%E6%9C%AF%E5%90%AB%E9%87%8F%E9%83%BD%E6%B2%A1%E6%9C%89/</guid><description>&lt;p>四年前，那时公司还是使用 adsl+“代理服务器”上网，有一天早晨我来到公司，发现代理服务器的桌面有一个 word 文档，打开一看，里面写着“嘿，哥们儿，你的机器被我黑了，我发现你是使用 adsl 上网的，而且发现不少漏洞，我顺手给你打了补丁，希望你能重视上网的安全性&amp;hellip;&amp;hellip;”&lt;/p>
&lt;p>当时令我大吃一惊，因为一方面我们确实不太重视网络安全的问题，另一方面那家伙也太猖狂了吧。&lt;/p>
&lt;p>后来我遇到一“高人”，将此事说与他听，他遂露出鄙夷态度：“最讨厌这些傻 B“黑客”，一点儿技术含量都没有”，而后掏出几款软件，“扫描器”、“嗅探器”什么的，现场给我演示了一把。&lt;/p>
&lt;p>靠！原来会使用这些黑客软件就是黑客啊！&lt;/p>
&lt;p>我在公司内部的服务器上建了个小论坛，使用阿帕奇+php+bbpress 实现，用于记录兄弟们平时积累的编程经验，由于管理员疏忽，开了远程服务，密码又过于简单，前两天不慎又遭“毒手”，这次那厮没有手下留情，把论坛数据库给我删了，唉，真他妈防不胜防啊！害得我还得花时间恢复。&lt;/p>
&lt;p>我说这些自以为是的傻 B 黑客，能不能用用脑子，有能耐你把我 msn 空间的广告给我去了，不好好待着干嘛总出来犯贱呢，你妈逼你的是吗？&lt;/p></description></item><item><title>听音乐，要关灯</title><link>https://sbabybird.github.io/p/%E5%90%AC%E9%9F%B3%E4%B9%90%E8%A6%81%E5%85%B3%E7%81%AF/</link><pubDate>Sun, 23 Mar 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%90%AC%E9%9F%B3%E4%B9%90%E8%A6%81%E5%85%B3%E7%81%AF/</guid><description>&lt;p>周末，晚饭毕，心绪烦乱。关窗，关灯，音箱的音量调大，陷入黑暗之中，只有机箱闪烁着微弱的蓝光。&lt;/p>
&lt;p>如果音乐是海洋，就让我随着醉人的旋律坠入海底，让音乐洗去我的浮躁和忧伤。&lt;/p>
&lt;p>如果音乐是双手，就让跳动的音符轻轻拨动我的心弦，跳入我浑浊的内心，然后在上面荡起点点涟漪&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>哈哈，关了灯听音乐能让我这样语无伦次，也算是神奇了，所以有句话叫：“爱生活，爱拉灯！”&lt;/p></description></item><item><title>公园里的“鸟巢”</title><link>https://sbabybird.github.io/p/%E5%85%AC%E5%9B%AD%E9%87%8C%E7%9A%84%E9%B8%9F%E5%B7%A2/</link><pubDate>Fri, 21 Mar 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%AC%E5%9B%AD%E9%87%8C%E7%9A%84%E9%B8%9F%E5%B7%A2/</guid><description>&lt;p>每天早晨都穿过这个公园，随手拍了，那个小房子是公园的管理人员为一只野生的鸟儿（大概是野鸭子之类的吧）搭建的，该鸟去年来此地盘再也不走了 &lt;/p></description></item><item><title>老家的电脑中毒了</title><link>https://sbabybird.github.io/p/%E8%80%81%E5%AE%B6%E7%9A%84%E7%94%B5%E8%84%91%E4%B8%AD%E6%AF%92%E4%BA%86/</link><pubDate>Thu, 20 Mar 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%80%81%E5%AE%B6%E7%9A%84%E7%94%B5%E8%84%91%E4%B8%AD%E6%AF%92%E4%BA%86/</guid><description>&lt;p>春节回老家，我把老家的电脑升级了一把，并安装了宽带。&lt;/p>
&lt;p>这样我在北京就可以随时和父母视频通话了，老妈的打字水平也飞速提升，没事儿就上线和我聊两句。&lt;/p>
&lt;p>为了安全起见，我临走时反复叮嘱，不要再安装其它软件（担心流氓软件）。&lt;/p>
&lt;p>但是在选择杀毒软件时我有点儿为难了，nod32 挺好用，可是咱没买正版，用破解的怕他们用不好，刚好那时卡巴斯基推出了一年免费试用的活动（其实我都两年不使用卡巴斯基了），就贪便宜用了，而且开启了实时监控和每天的病毒库更新。&lt;/p>
&lt;p>看来便宜果然没好货，好日子没过多久，老妈就打电话告诉我机器奇慢无比，我当时还颇为自信的告诉她启动杀毒软件的查杀毒程序进行病毒查杀即可，怎奈何断断续续查了一夜（没办法卡巴就是这么卡）病毒之后，倒是找到木马病毒若干，但就是无法清除，一开机 cpu 就资源占用 100%，我又没法亲手操作，看来这个系统是没救了。&lt;/p>
&lt;p>还好当时留了一手必杀技，那就是“一键 ghost 恢复”！&lt;/p>
&lt;p>实在不行就“恢复”吧。&lt;/p>
&lt;p>不知道是网络环境太差还是咱们的安全意识不够，反正对于一个非计算机专业的人员来说，现在上网实在是处处有陷阱、时时有风险，杀毒防毒软件形同虚设，真是让人担忧啊&lt;/p></description></item><item><title>春天来了，小树发芽了，鼻子发炎了</title><link>https://sbabybird.github.io/p/%E6%98%A5%E5%A4%A9%E6%9D%A5%E4%BA%86%E5%B0%8F%E6%A0%91%E5%8F%91%E8%8A%BD%E4%BA%86%E9%BC%BB%E5%AD%90%E5%8F%91%E7%82%8E%E4%BA%86/</link><pubDate>Wed, 05 Mar 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%98%A5%E5%A4%A9%E6%9D%A5%E4%BA%86%E5%B0%8F%E6%A0%91%E5%8F%91%E8%8A%BD%E4%BA%86%E9%BC%BB%E5%AD%90%E5%8F%91%E7%82%8E%E4%BA%86/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%98%A5%E5%A4%A9%E6%9D%A5%E4%BA%86%E5%B0%8F%E6%A0%91%E5%8F%91%E8%8A%BD%E4%BA%86%E9%BC%BB%E5%AD%90%E5%8F%91%E7%82%8E%E4%BA%86/20080305.png" alt="Featured image of post 春天来了，小树发芽了，鼻子发炎了" />&lt;p>不经意间，她已经来到了，她带来了吹面不寒的杨柳风儿，带来了满树的桃花（树在哪儿呢？），不过她带给我的第一个礼物却是鼻炎，听说过两天还会给我带点儿沙尘暴啥的，是的，她就是春天。&lt;/p>
&lt;p>连日来，和煦的春风吹得我昏昏欲睡，口干舌燥。一闻到春风的气息，我得鼻子就发干发痒，看来我的鼻炎是按时发作了。&lt;/p>
&lt;p>戒烟、戒酒、戒辣椒，多喝开水、多吃水果、多吃蔬菜，这些残酷的要求我虽然严格遵守，但鼻子仍是一天天痛苦下去，而且一旦休息不好还有流鼻血的危险，万一哪天在街上碰到一个丑女，然后鼻子再不争气的流血了，那就糗大了！&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 3/05/200805:22:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>Every Night In Beijing 我办了暂住证</title><link>https://sbabybird.github.io/p/every-night-in-beijing-%E6%88%91%E5%8A%9E%E4%BA%86%E6%9A%82%E4%BD%8F%E8%AF%81/</link><pubDate>Sat, 01 Mar 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/every-night-in-beijing-%E6%88%91%E5%8A%9E%E4%BA%86%E6%9A%82%E4%BD%8F%E8%AF%81/</guid><description>&lt;p>EveryNightInBeijing 我办了暂住证为了迎接今年的奥运会，北京最近开展了“依法登记办证，共创平安奥运”专项活动，所有来京的暂住一个月以上、16 岁以上的人员，都要依法主动到暂住地派出所办理暂住证，否则&amp;hellip;.&lt;/p>
&lt;p>作为一个外地来北京需要“暂住”超过一个月而且 16 岁以上的民工，我当然得积极相应，虽然今天是周末我还是起了个大早（其实周末早起是我的坏毛病之一），带齐了证件前往派出所去排队，没办法，现在办这个的人太多，办个暂住证比买春运的火车票还难，听说有人带着干粮半夜就前去排队了。&lt;/p>
&lt;p>到了地方一看，嚯！果然是“peoplemountainpeoplesea”,我拿出春运买票劲头，费了两个小时的吹灰之力，终于挤到柜台前（以前没去过派出所，姑且就叫柜台吧），刚要用颤抖的双手递上证件，只听得“啪&amp;hellip;啪&amp;hellip;”两声，来自工作人员拍打的键盘，伴随着一句地道的好莱坞英语：“oh！shit！”&lt;/p>
&lt;p>然后曰：“网断了！”我真是百感交集，有一种想扁人的冲动，但是看他们手忙脚乱地样子又想到这儿是派出所，也就没忍心发作。&lt;/p>
&lt;p>时间一分一秒地过去，办证的队伍快排到门外，终于其中一位工作人员大喊一声：“我找到了！”&lt;/p>
&lt;p>这一嗓子喊的不亚于老阿（阿基米德）想当年那架势。&lt;/p>
&lt;p>原来是哪位仁兄不小心踢掉了交换机的电源，网线都断了，插上之。&lt;/p>
&lt;p>终于办完了，赶紧揣进怀里，生怕过来几个人把它给撕了，然后把我送去锻炼身体。&lt;/p>
&lt;p>“EveryNightInBeijing 我要去办暂住证不敢在午夜问路，怕走到了采石场 EveryNightInBeijing 你可别喝太多酒把酒高歌的男儿，也得去办暂住证&amp;hellip;&amp;hellip;”本故事纯属虚构，如有雷同，那实在是巧合&lt;/p></description></item><item><title>找个地方藏起来</title><link>https://sbabybird.github.io/p/%E6%89%BE%E4%B8%AA%E5%9C%B0%E6%96%B9%E8%97%8F%E8%B5%B7%E6%9D%A5/</link><pubDate>Wed, 27 Feb 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%89%BE%E4%B8%AA%E5%9C%B0%E6%96%B9%E8%97%8F%E8%B5%B7%E6%9D%A5/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%89%BE%E4%B8%AA%E5%9C%B0%E6%96%B9%E8%97%8F%E8%B5%B7%E6%9D%A5/20080227.png" alt="Featured image of post 找个地方藏起来" />&lt;p>前两天与老同学用 msn 聊天，虽然都工作了几年，但是均感叹现在遭受的压力巨大，无论是来自工作的还是来自家人的。&lt;/p>
&lt;p>聊到后来，都有找个地方躲起来的想法，躲到一个没有人认识的地方，或深山老林，或几角旮旯。&lt;/p>
&lt;p>像鸵鸟那样，找个沙堆把头埋进去如何？&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 2/27/200805:37:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>小广告</title><link>https://sbabybird.github.io/p/%E5%B0%8F%E5%B9%BF%E5%91%8A/</link><pubDate>Sat, 16 Feb 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%B0%8F%E5%B9%BF%E5%91%8A/</guid><description>&lt;p>大年三十，老爸安排我贴春联，贴之前先要把房门给清理一下，本着认真负责的态度，我拿着抹布撅着屁股擦了半天。&lt;/p>
&lt;p>但是有两个小广告不知道用的什么胶水粘的，贴在上面太顽强了，抹布对其不起作用。&lt;/p>
&lt;p>这个难不倒我，从厨房拿来清洁球，发扬&amp;quot;只要功夫深，铁杵磨成针&amp;quot;的精神，终于把这两个小广告拿下，看着擦的光亮如新的防盗门，我揉了揉发酸的腰，露出了满意的笑容。&lt;/p>
&lt;p>狂奔到屋里去邀功，谁知我妈刚看了一眼就说：&amp;quot;哎呀！那两个小广告哪儿去啦?那上面有送水的电话号码，我平时就照着那个打呢！&lt;/p>
&lt;p>&amp;quot;我：&amp;quot;@#￥%@#%……@#%……&amp;quot;吐了一口鲜血接着说：&amp;quot;没事儿！对门儿房门上贴的还有！&amp;quot;&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 2/16/200811:03:00 上午在从容地狂奔上发表&lt;/p></description></item><item><title>回京了，开工了</title><link>https://sbabybird.github.io/p/%E5%9B%9E%E4%BA%AC%E4%BA%86%E5%BC%80%E5%B7%A5%E4%BA%86/</link><pubDate>Wed, 13 Feb 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9B%9E%E4%BA%AC%E4%BA%86%E5%BC%80%E5%B7%A5%E4%BA%86/</guid><description>&lt;p>回家的日子过得飞快，感觉就像做了一场梦，醒来后发现我还是坐在电脑旁，噢，又开工了。&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 2/13/200809:50:00 上午在从容地狂奔上发表&lt;/p></description></item><item><title>夕阳无限好，只是看不清</title><link>https://sbabybird.github.io/p/%E5%A4%95%E9%98%B3%E6%97%A0%E9%99%90%E5%A5%BD%E5%8F%AA%E6%98%AF%E7%9C%8B%E4%B8%8D%E6%B8%85/</link><pubDate>Fri, 01 Feb 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A4%95%E9%98%B3%E6%97%A0%E9%99%90%E5%A5%BD%E5%8F%AA%E6%98%AF%E7%9C%8B%E4%B8%8D%E6%B8%85/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%A4%95%E9%98%B3%E6%97%A0%E9%99%90%E5%A5%BD%E5%8F%AA%E6%98%AF%E7%9C%8B%E4%B8%8D%E6%B8%85/20080201.JPG" alt="Featured image of post 夕阳无限好，只是看不清" />&lt;p>&amp;ndash;由 sbabybird 于 2/01/200802:12:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>早晨的路灯(随手拍)</title><link>https://sbabybird.github.io/p/%E6%97%A9%E6%99%A8%E7%9A%84%E8%B7%AF%E7%81%AF%E9%9A%8F%E6%89%8B%E6%8B%8D/</link><pubDate>Thu, 31 Jan 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%97%A9%E6%99%A8%E7%9A%84%E8%B7%AF%E7%81%AF%E9%9A%8F%E6%89%8B%E6%8B%8D/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%97%A9%E6%99%A8%E7%9A%84%E8%B7%AF%E7%81%AF%E9%9A%8F%E6%89%8B%E6%8B%8D/20080131.JPG" alt="Featured image of post 早晨的路灯(随手拍)" />&lt;p>未经过修饰&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 1/31/200808:19:00 上午在从容地狂奔上发表&lt;/p></description></item><item><title>车票买好了，现在只想一步跨回家去！</title><link>https://sbabybird.github.io/p/%E8%BD%A6%E7%A5%A8%E4%B9%B0%E5%A5%BD%E4%BA%86%E7%8E%B0%E5%9C%A8%E5%8F%AA%E6%83%B3%E4%B8%80%E6%AD%A5%E8%B7%A8%E5%9B%9E%E5%AE%B6%E5%8E%BB/</link><pubDate>Tue, 29 Jan 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%BD%A6%E7%A5%A8%E4%B9%B0%E5%A5%BD%E4%BA%86%E7%8E%B0%E5%9C%A8%E5%8F%AA%E6%83%B3%E4%B8%80%E6%AD%A5%E8%B7%A8%E5%9B%9E%E5%AE%B6%E5%8E%BB/</guid><description>&lt;p>每年的春运，我都要受到生理和心理的双重摧残，无休止的排队买票，心惊胆寒地挤上车，反复地转车，汽车、火车、汽车&amp;hellip;，从坐在公司的椅子上到躺在老家的沙发上，就像经历一场洗礼。&lt;/p>
&lt;p>感谢上天的保佑，我终于买到今年的车票（这期间的经历和见闻不堪回首，要是说出来肯定是要被&amp;quot;和谐&amp;quot;的），捏着这张沾满了汗水的车票，站在西站挤满了人（失望的和绝望的）的售票大厅，我知道，虽然万里的长征刚迈出了第一步，但我的心&amp;quot;秋&amp;quot;的一下子就飞到老家了！&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 1/29/200803:43:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>相见恨晚-YOBO（友播-yobo.com)！</title><link>https://sbabybird.github.io/p/%E7%9B%B8%E8%A7%81%E6%81%A8%E6%99%9A-yobo%E5%8F%8B%E6%92%AD-yobo.com/</link><pubDate>Mon, 14 Jan 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%9B%B8%E8%A7%81%E6%81%A8%E6%99%9A-yobo%E5%8F%8B%E6%92%AD-yobo.com/</guid><description>&lt;p>忍不住要推广一个 WEB2.o 站点：在 Diglog 上发现了这个在线音乐站点，非常棒的音乐体验！&lt;/p>
&lt;p>进去之后首先进行一个小小的心理测试，这样网站就知道了我的音乐口味（基本上挺准确的），然后自动的挑了一些曲子放给我听，连接速度非常快，丝毫没有停顿的感觉，就像是在听本地文件。&lt;/p>
&lt;p>听了一会儿我才发现这个网站是个巨大的曲库，分类很清晰，可以随时输入歌手名或者歌曲名搜索歌曲，老歌新歌都有，曲目丰富的令人发指。&lt;/p>
&lt;p>听完点播的歌曲之后系统会自动挑一些与此歌类似的曲子播放，有时候关联的挺准，但有时就太跳跃了，从一个古典的古筝曲子一下跳到了一首流行歌曲上来了。&lt;/p>
&lt;p>总之，这是个不错的站点，让我再感叹一声：&amp;quot;Web2.0 就是好啊！&amp;quot;PS：不知道这么多中外曲目的版权问题是怎么搞定的。&lt;/p>
&lt;p>再 PS：希望她能像 last.fm 那样推出客户端软件，这样就不用总开着网页听歌了。&lt;/p>
&lt;p>再再 PS：希望 YOBO 的中文名字改一改，叫这个有点儿俗气。&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 1/14/200804:04:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>听广播的感觉</title><link>https://sbabybird.github.io/p/%E5%90%AC%E5%B9%BF%E6%92%AD%E7%9A%84%E6%84%9F%E8%A7%89/</link><pubDate>Thu, 03 Jan 2008 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%90%AC%E5%B9%BF%E6%92%AD%E7%9A%84%E6%84%9F%E8%A7%89/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%90%AC%E5%B9%BF%E6%92%AD%E7%9A%84%E6%84%9F%E8%A7%89/20080103.png" alt="Featured image of post 听广播的感觉" />&lt;p>这两天见同事提了个巨大的收音机（比板砖还大），一问才知道，原来是怀旧，想找回曾经&amp;quot;听广播的感觉&amp;quot;，手机带的 FM 和电脑上的网络电台听起来太没感觉了，于是跑到商场挑了个最大号的扛了回来。&lt;/p>
&lt;p>这不禁勾起了我的回忆。&lt;/p>
&lt;p>接下来让我把镜头推回到六年前，那时我在郑州上大学，除了上课（如果有课的话）就是整天抱着电脑啃 C 语言，当时既没上网也没电视可看，接受信息的渠道只有一台收音机（夸张了？）。&lt;/p>
&lt;p>节目很丰富，给我印象最深的就是郑州交通广播电台夜在里十二点准时播出的《大丈夫日记》（什么？你以为是《深夜悄悄话》？你想哪儿去啦？），电台主持人每天都以特有的腔调（学不来）朗读一个幽默段子，类似于现在网上的恶搞段子，但是格调要高一些，文章不长，但是很有趣，调侃人生，嬉笑怒骂，文字本身就写的很风趣，主持人再用那富有磁性的声音给读出来，听着真是一种享受。&lt;/p>
&lt;p>最后再播放一首歌曲，而且在播放这首歌儿之前一定以一种蛮横的语调说一句：&amp;quot;给男人听的歌，你可以不会唱，但..你..必须听！&amp;quot;我第一次听到老谭（不好意思老谭，你永远都是 25 岁）的《难舍难分》就是在这个节目里，当时真是觉得太好听了：&amp;quot;忘不了你眼中那闪烁的泪光，好像知道我说谎，我茫然走错了地方，却已不敢回头望&amp;hellip;&amp;hellip;&amp;quot;。&lt;/p>
&lt;p>可以说，这个节目是我当时最好的精神食粮了（不知道现在还存在吗），有一阵子我几乎天天等到十二点，我想所谓&amp;quot;听广播的感觉&amp;quot;大概就是这样吧。&lt;/p>
&lt;p>好了，回到现在，现在的广播已经很难找到一个精品节目了，不是太矫情就是插广告，而且广告还他妈全是医院、医药的广告！所以，时代的潮流是不可逆转的，广播电台再做垂死挣扎也无济于事，被网络取代已是必然的事情，所以你怀里就算抱个巨大的收音机也不会再找到&amp;quot;听广播的感觉&amp;quot;了！&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 1/03/200805:40:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>写完了年终总结!</title><link>https://sbabybird.github.io/p/%E5%86%99%E5%AE%8C%E4%BA%86%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 31 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%99%E5%AE%8C%E4%BA%86%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid><description>&lt;p>明天就是 2008 年了，我的老毛病还是没改，每到假期或周末就兴奋的睡不着觉，今天刚到早上六点就爬了起来。想起还有一篇年终总结去要写,于是打开电脑，整理思路，先回忆一下今年我都干了什么，再展望一下明年我要干啥，不知不觉地，一篇年终总结就新鲜出炉了！由于我的生活就是工作，工作就是生活，所以呢，这篇总结其实就是个工作总结！不多说了，新年快乐！&amp;ndash;由 sbabybird 于 12/31/200707:54:00 上午在从容地狂奔上发表&lt;/p></description></item><item><title>2007就要过去了</title><link>https://sbabybird.github.io/p/2007%E5%B0%B1%E8%A6%81%E8%BF%87%E5%8E%BB%E4%BA%86/</link><pubDate>Sat, 29 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/2007%E5%B0%B1%E8%A6%81%E8%BF%87%E5%8E%BB%E4%BA%86/</guid><description>&lt;img src="https://sbabybird.github.io/p/2007%E5%B0%B1%E8%A6%81%E8%BF%87%E5%8E%BB%E4%BA%86/20071229.png" alt="Featured image of post 2007就要过去了" />&lt;p>&lt;img src="https://sbabybird.github.io/p/2007%E5%B0%B1%E8%A6%81%E8%BF%87%E5%8E%BB%E4%BA%86/20071229.JPG"
width="360"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="185px"
>
再过两天就要迎来激动人心的 2008 年了，时光如水，生命如歌，每一天都是崭新的，每一年都是十分有意义的。今天是 2007 年的最后一个工作日，此刻我想起了《甲方乙方》里的那句台词：&amp;quot;1997 年过去了，我很怀念它。&amp;quot;2007 年的工作依然是十分忙碌，工作占据了我生活中的大部分时间。由于长期缺乏锻炼，身体开始逐渐向亚健康状态发展。早饭经常不吃，晚饭又吃的太晚，导致消化系统不太好使，肠胃胃经常发出抱怨。最后吃了西药、中药若干，一日三餐再也不敢怠慢，肠胃才慢慢恢复正常。所以正是 2007 年我才认识到了健康的重要性，也更深刻地认识到了幸福的真谛！总之 2007 年对我来说是成长的一年、成熟的一年、有美好收获的一年（我很佩服我自己能认识到这些）。希望在 2008 年，我和我的家人都健康幸福！&amp;ndash;由 sbabybird 于 12/29/200704:41:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>口腔溃疡了</title><link>https://sbabybird.github.io/p/%E5%8F%A3%E8%85%94%E6%BA%83%E7%96%A1%E4%BA%86/</link><pubDate>Wed, 26 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8F%A3%E8%85%94%E6%BA%83%E7%96%A1%E4%BA%86/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%8F%A3%E8%85%94%E6%BA%83%E7%96%A1%E4%BA%86/20071226.png" alt="Featured image of post 口腔溃疡了" />&lt;p>这两天吃的有点儿上火，口腔溃疡了。&amp;ndash;由 sbabybird 于 12/26/200712:41:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>圣你的圣,诞你的诞</title><link>https://sbabybird.github.io/p/%E5%9C%A3%E4%BD%A0%E7%9A%84%E5%9C%A3%E8%AF%9E%E4%BD%A0%E7%9A%84%E8%AF%9E/</link><pubDate>Mon, 24 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9C%A3%E4%BD%A0%E7%9A%84%E5%9C%A3%E8%AF%9E%E4%BD%A0%E7%9A%84%E8%AF%9E/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%9C%A3%E4%BD%A0%E7%9A%84%E5%9C%A3%E8%AF%9E%E4%BD%A0%E7%9A%84%E8%AF%9E/20071224.png" alt="Featured image of post 圣你的圣,诞你的诞" />&lt;p>圣诞节？平安夜？我继续狂奔 ing&amp;hellip;&amp;hellip;&amp;ndash;由 sbabybird 于 12/24/200705:30:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>冬至为啥吃饺子？</title><link>https://sbabybird.github.io/p/%E5%86%AC%E8%87%B3%E4%B8%BA%E5%95%A5%E5%90%83%E9%A5%BA%E5%AD%90/</link><pubDate>Sat, 22 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%AC%E8%87%B3%E4%B8%BA%E5%95%A5%E5%90%83%E9%A5%BA%E5%AD%90/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%86%AC%E8%87%B3%E4%B8%BA%E5%95%A5%E5%90%83%E9%A5%BA%E5%AD%90/20071222.png" alt="Featured image of post 冬至为啥吃饺子？" />&lt;p>今天是二十四节气里的冬至，阴天，据说要下雪。按照风俗习惯，我中午饱餐了一顿饺子。为什么冬至这天要吃顿饺子？我还真是不知道，上网查了一查，答案原来是这样：古时候有个老中医（不是华佗啊），叫张仲景，老家是南阳稂东人，有一阵子在长沙当大官，后来不知怎地就干不下去了，于是回老家，时值冬季，在路上看到白河两岸乡亲面黄肌瘦，饥寒交迫，不少人的耳朵都冻烂了。便让其弟子在南阳东关搭起医棚，支起大锅，在冬至那天舍&amp;quot;祛寒娇耳汤&amp;quot;医治冻疮。他把羊肉、辣椒和一些驱寒药材放在锅里熬煮，然后将羊肉、药物捞出来切碎，用面包成耳朵样的&amp;quot;娇耳&amp;quot;，煮熟后，分给来求药的人每人两只&amp;quot;娇耳&amp;quot;，一大碗肉汤。人们吃了&amp;quot;娇耳&amp;quot;，喝了&amp;quot;祛寒汤&amp;quot;，浑身暖和，两耳发热，冻伤的耳朵都治好了。后来人们为了给嘴馋找个理由，就有了&amp;quot;冬至那天吃饺子，再冷也不会把耳朵冻烂&amp;quot;的传说。ps：仔细想想，咱们中国的节日都与&amp;quot;吃&amp;quot;的关系十分密切，正月十五吃元宵、端午节吃粽子、中秋节吃月饼、腊八吃米饭（八宝饭）&amp;hellip;&amp;hellip;&amp;ndash;由 sbabybird 于 12/22/200702:25:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>电池放冰箱的实验结果</title><link>https://sbabybird.github.io/p/%E7%94%B5%E6%B1%A0%E6%94%BE%E5%86%B0%E7%AE%B1%E7%9A%84%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C/</link><pubDate>Wed, 19 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%94%B5%E6%B1%A0%E6%94%BE%E5%86%B0%E7%AE%B1%E7%9A%84%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C/</guid><description>&lt;p>做一个实验&amp;ndash;关于把手机电池放冰箱里关于这个实验，是这样干的，我的那块旧手机电池电量用光后，先放到冰箱的冷冻室里，冻了 48 个小时，然后取出，使其自然升温，充电 3 个小时，充满。放入手机里开始使用，感觉与之前无明显区别，仍然是仅待机两天。不知是我处理的方法不对，还是这个流言本身就是假的。想想也是，要是手机电池冻一冻就能变成新的，那人家电池的生产厂家不早就饿死了？&amp;ndash;由 sbabybird 于 12/19/200708:13:00 上午在从容地狂奔上发表&lt;/p></description></item><item><title>看看牛人用纸箱自制的电脑机箱！</title><link>https://sbabybird.github.io/p/%E7%9C%8B%E7%9C%8B%E7%89%9B%E4%BA%BA%E7%94%A8%E7%BA%B8%E7%AE%B1%E8%87%AA%E5%88%B6%E7%9A%84%E7%94%B5%E8%84%91%E6%9C%BA%E7%AE%B1/</link><pubDate>Wed, 19 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%9C%8B%E7%9C%8B%E7%89%9B%E4%BA%BA%E7%94%A8%E7%BA%B8%E7%AE%B1%E8%87%AA%E5%88%B6%E7%9A%84%E7%94%B5%E8%84%91%E6%9C%BA%E7%AE%B1/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E7%9C%8B%E7%9C%8B%E7%89%9B%E4%BA%BA%E7%94%A8%E7%BA%B8%E7%AE%B1%E8%87%AA%E5%88%B6%E7%9A%84%E7%94%B5%E8%84%91%E6%9C%BA%E7%AE%B1/20071219.JPG" alt="Featured image of post 看看牛人用纸箱自制的电脑机箱！" />&lt;p>&lt;img src="https://sbabybird.github.io/p/%E7%9C%8B%E7%9C%8B%E7%89%9B%E4%BA%BA%E7%94%A8%E7%BA%B8%E7%AE%B1%E8%87%AA%E5%88%B6%E7%9A%84%E7%94%B5%E8%84%91%E6%9C%BA%E7%AE%B1/20071219-1.JPG"
width="800"
height="600"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>
&lt;img src="https://sbabybird.github.io/p/%E7%9C%8B%E7%9C%8B%E7%89%9B%E4%BA%BA%E7%94%A8%E7%BA%B8%E7%AE%B1%E8%87%AA%E5%88%B6%E7%9A%84%E7%94%B5%E8%84%91%E6%9C%BA%E7%AE%B1/20071219-2.JPG"
width="800"
height="600"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>
&lt;img src="https://sbabybird.github.io/p/%E7%9C%8B%E7%9C%8B%E7%89%9B%E4%BA%BA%E7%94%A8%E7%BA%B8%E7%AE%B1%E8%87%AA%E5%88%B6%E7%9A%84%E7%94%B5%E8%84%91%E6%9C%BA%E7%AE%B1/20071219-3.JPG"
width="800"
height="600"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>
&lt;img src="https://sbabybird.github.io/p/%E7%9C%8B%E7%9C%8B%E7%89%9B%E4%BA%BA%E7%94%A8%E7%BA%B8%E7%AE%B1%E8%87%AA%E5%88%B6%E7%9A%84%E7%94%B5%E8%84%91%E6%9C%BA%E7%AE%B1/20071219-4.JPG"
width="800"
height="600"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>
有句话说的好：&amp;quot;牛人无处不在！&amp;quot;公司一哥们儿用笔记本电脑的包装箱 DIY 了一个电脑机箱，用起来挺爽，就是不知道散热咋样儿！还有就是好像还没有加光驱。看起来挺象那么回事儿吧？呵呵，还是联想的纸箱子。放倒了再看看接口部分，该有的都有。千万别以为是联想新出的 pc 啊！为了给 cpu 散热，所以上面也开了个口 cpu 和 cpu 风扇&amp;ndash;由 sbabybird 于 12/19/200705:50:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>做一个实验--关于把手机电池放冰箱里</title><link>https://sbabybird.github.io/p/%E5%81%9A%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%AA%8C--%E5%85%B3%E4%BA%8E%E6%8A%8A%E6%89%8B%E6%9C%BA%E7%94%B5%E6%B1%A0%E6%94%BE%E5%86%B0%E7%AE%B1%E9%87%8C/</link><pubDate>Sat, 15 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%81%9A%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%AA%8C--%E5%85%B3%E4%BA%8E%E6%8A%8A%E6%89%8B%E6%9C%BA%E7%94%B5%E6%B1%A0%E6%94%BE%E5%86%B0%E7%AE%B1%E9%87%8C/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%81%9A%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%AA%8C--%E5%85%B3%E4%BA%8E%E6%8A%8A%E6%89%8B%E6%9C%BA%E7%94%B5%E6%B1%A0%E6%94%BE%E5%86%B0%E7%AE%B1%E9%87%8C/20071215.JPG" alt="Featured image of post 做一个实验--关于把手机电池放冰箱里" />&lt;p>&lt;img src="https://sbabybird.github.io/p/%E5%81%9A%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%AA%8C--%E5%85%B3%E4%BA%8E%E6%8A%8A%E6%89%8B%E6%9C%BA%E7%94%B5%E6%B1%A0%E6%94%BE%E5%86%B0%E7%AE%B1%E9%87%8C/20071215-1.JPG"
width="480"
height="360"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>
偶然听到一个关于手机电池的传说：&amp;quot;把老化的电池用纸包好，放进冰箱里冻上两天，这个电池就会起死回生。&amp;quot;去网上搜索一下，发现很多人都在介绍这个&amp;quot;绝招&amp;quot;，也有人表示质疑，但是好像没有人亲身试验过，刚好我昨天换下来的那块电池还在，就顺手试一试这个方法，如果管用当然最好，如果不好使（这个可能性最大），那就把这条流言给终结了吧。我的那块旧电池包好放在冰箱的冷冻室里等候试验结果！&amp;ndash;由 sbabybird 于 12/15/200709:34:00 上午在从容地狂奔上发表电池放冰箱的实验结果&lt;/p></description></item><item><title>新买了手机......电池！</title><link>https://sbabybird.github.io/p/%E6%96%B0%E4%B9%B0%E4%BA%86%E6%89%8B%E6%9C%BA......%E7%94%B5%E6%B1%A0/</link><pubDate>Fri, 14 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%96%B0%E4%B9%B0%E4%BA%86%E6%89%8B%E6%9C%BA......%E7%94%B5%E6%B1%A0/</guid><description>&lt;p>新手机是没买，买了块电池倒是真的，我那块旧电池已经不行了，开始倚老卖老,随便打个电话就报电量低甚至关机，无奈选不到满意的新手机（请参见这里），而且手里这个旧手机其他一切正常，于是我决定先买块电池，再凑合用一段时间，起码用到咱们大陆开始上 3G。&lt;/p>
&lt;p>不过也有网友比较悲观，在网上发帖子说：&amp;quot;大陆 3G 能用时，家祭无忘告乃翁！&amp;quot;跑到卓越网上选了块原装电池（据说是原装），今天就给我送了过来，由于电池个头太小，我怕快递公司送货的拿着太轻松，觉得没有挑战性，会不乐意，就顺便再买了两本书，其中一本就是大名鼎鼎的霍大爷的《时间简史》留着我失眠的时候看，另一本是比较浅显的《万物简史》留着我上厕所时看。&amp;ndash;由 sbabybird 于 12/14/200701:00:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>到那时候</title><link>https://sbabybird.github.io/p/%E5%88%B0%E9%82%A3%E6%97%B6%E5%80%99/</link><pubDate>Thu, 13 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%88%B0%E9%82%A3%E6%97%B6%E5%80%99/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%88%B0%E9%82%A3%E6%97%B6%E5%80%99/20071213.png" alt="Featured image of post 到那时候" />&lt;p>下班了，还在干活儿 ing，瞅瞅我的任务栏：&lt;/p>
&lt;p>一边开着 TOAD 配置数据库，一边开着 Word 看着文档，在 Word 的隔壁是牛逼的 VC 在那儿咔咔编译程序，SourceSafe 正努力地 Checkin 一堆文件（脸都憋红了），点了两下&amp;quot;开始菜单&amp;quot;却不再搭理我，想开个 Firefox 看两个网页都不行。&lt;/p>
&lt;p>唉！什么时候，硬盘像内存那么快，内存像硬盘那么大，就好了什么时候，内存像 CPU 缓存那么快，CPU 缓存像内存那么大，就好了哼哼，到那时候&amp;hellip;&lt;/p>
&lt;p>估计是，Windows 上来先把资源吃掉三分之一，然后 TOAD 和 VC 这些用来干活儿的工具再吃掉三分之一，最后打开 Firefox 把剩下的全吃掉！&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 12/13/200705:49:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>第一场雪&amp;堵车</title><link>https://sbabybird.github.io/p/%E7%AC%AC%E4%B8%80%E5%9C%BA%E9%9B%AA%E5%A0%B5%E8%BD%A6/</link><pubDate>Mon, 10 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%AC%AC%E4%B8%80%E5%9C%BA%E9%9B%AA%E5%A0%B5%E8%BD%A6/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E7%AC%AC%E4%B8%80%E5%9C%BA%E9%9B%AA%E5%A0%B5%E8%BD%A6/20071210.png" alt="Featured image of post 第一场雪&amp;堵车" />&lt;p>早晨，出了门才知道下雪了，下的还不小，赶紧返回取雨伞。&lt;/p>
&lt;p>在路灯的照射下，雪花还挺大的，好歹也是第一场雪，感觉挺不错的。&lt;/p>
&lt;p>坐上车就傻眼了，公交车走的比蜗牛还慢，上高速的路口堵成一团，上了高速路还是堵成一团。&lt;/p>
&lt;p>花了平时两倍的时间才到公司。&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 12/10/200709:23:00 上午在从容地狂奔上发表&lt;/p></description></item><item><title>小鸟坐公交</title><link>https://sbabybird.github.io/p/%E5%B0%8F%E9%B8%9F%E5%9D%90%E5%85%AC%E4%BA%A4/</link><pubDate>Sat, 08 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%B0%8F%E9%B8%9F%E5%9D%90%E5%85%AC%E4%BA%A4/</guid><description>&lt;p>今天在公交车上看到一个老大爷上车带着他的鸟（此处的&amp;quot;鸟&amp;quot;没有别的意思），离得挺远，赶紧掏出相机，抓拍两张。&lt;/p>
&lt;p>不过也看不出这是什么鸟（麻雀？），被老大爷拴在棍子上应该不太爽吧。&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 12/08/200709:50:00 上午在从容地狂奔上发表&lt;/p></description></item><item><title>妹妹开始写博客</title><link>https://sbabybird.github.io/p/%E5%A6%B9%E5%A6%B9%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</link><pubDate>Thu, 06 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A6%B9%E5%A6%B9%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%A6%B9%E5%A6%B9%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/20071206.png" alt="Featured image of post 妹妹开始写博客" />&lt;p>中午收到小妹发过来的链接，打开一看，竟是她在新浪写的博客。&lt;/p>
&lt;p>我粗略地看了一下，已经写了几篇文字了。&lt;/p>
&lt;p>很显然地，她的作文比我写的要好，女孩子的感情细腻和多愁善感都表现在字里行间。&lt;/p>
&lt;p>她这个年纪不去 qq 空间里玩&amp;quot;踩啊踩&amp;quot;，却在新浪开博客，套句比较流行的话说：&amp;quot;我很欣慰啊！&amp;quot;光阴荏苒，白驹过隙，转眼间小妹大学就要毕业，离开校园马上就要面临现实中残酷的就业环境，在网上和我聊了几句，言语里流露出对前途的迷茫。&lt;/p>
&lt;p>是啊，我也曾感到过没有方向（现在何尝不是呢？），但是脚下的路总是要自己去走，未来还是把握在自己的手中。&lt;/p>
&lt;p>我忽然想起某位牛人说过的话：&amp;quot;睡着前最甜蜜；黎明前最黑暗；成功前最渺茫！&amp;quot;&lt;/p>
&lt;p>&amp;ndash;PostedBysbabybirdto 从容地狂奔 at12/06/200705:40:00 下午&lt;/p></description></item><item><title>大脑年龄的测试</title><link>https://sbabybird.github.io/p/%E5%A4%A7%E8%84%91%E5%B9%B4%E9%BE%84%E7%9A%84%E6%B5%8B%E8%AF%95/</link><pubDate>Wed, 05 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A4%A7%E8%84%91%E5%B9%B4%E9%BE%84%E7%9A%84%E6%B5%8B%E8%AF%95/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%A4%A7%E8%84%91%E5%B9%B4%E9%BE%84%E7%9A%84%E6%B5%8B%E8%AF%95/20071205.png" alt="Featured image of post 大脑年龄的测试" />&lt;p>午睡醒来，收到同事发来的 Flash 小游戏，据说可以根据你的反应速度测试出大脑的年龄，我试了一下，最后结果是：我的大脑有 30 岁了。&lt;/p>
&lt;p>还算靠谱，比实际老了点儿（没办法，这都是干活儿累的啊），记得有次我做心理年龄测试，结果是 60 岁了。&lt;/p>
&lt;p>(试试看）&amp;ndash;由 sbabybird 于 12/05/200701:26:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>关于短信</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E7%9F%AD%E4%BF%A1/</link><pubDate>Mon, 03 Dec 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E7%9F%AD%E4%BF%A1/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E7%9F%AD%E4%BF%A1/20071203.png" alt="Featured image of post 关于短信" />&lt;p>昨日喜收老友短信：“天气骤变，温度下降，注意身体，多喝水，以防感冒！”&lt;/p>
&lt;p>遂感叹友情比暖气还要温暖，欲回复信息以示感谢，孰料又收其短信一条：“别回了，我的短信包月没用完，不发都浪费了！”&lt;/p>
&lt;p>我靠！&lt;/p>
&lt;p>另一哥们儿，初上网，受某网站蛊惑（告其可免费发短信），通过该网站为我发“免费”短信一条，结果害我收到若干条此网站发来的广告短信，不得不打电话给这一哥们儿，重复强调“天下没有白吃的午餐”这条真理。&lt;/p></description></item><item><title>A Dream !</title><link>https://sbabybird.github.io/p/a-dream/</link><pubDate>Sat, 17 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/a-dream/</guid><description>&lt;img src="https://sbabybird.github.io/p/a-dream/20071117.png" alt="Featured image of post A Dream !" />&lt;p>听说国家大剧院下个月就要正式开演了，而且最低票价只有 30 元？&lt;/p>
&lt;p>要真是 30 块能去看的话，俺就省吃俭用一阵子，看看到时候能不能去感受一下&amp;quot;艺术的魅力&amp;quot;。&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 11/17/200711:01:00 上午在从容地狂奔上发表&lt;/p></description></item><item><title>捡到一首老歌--Lady</title><link>https://sbabybird.github.io/p/%E6%8D%A1%E5%88%B0%E4%B8%80%E9%A6%96%E8%80%81%E6%AD%8C--lady/</link><pubDate>Sat, 17 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8D%A1%E5%88%B0%E4%B8%80%E9%A6%96%E8%80%81%E6%AD%8C--lady/</guid><description>&lt;p>在 Winamp 的电台上捡到这首歌 Lady，马上被 kennyrogers 的嗓音吸引了。&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 11/17/200702:10:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>天气真的很冷了</title><link>https://sbabybird.github.io/p/%E5%A4%A9%E6%B0%94%E7%9C%9F%E7%9A%84%E5%BE%88%E5%86%B7%E4%BA%86/</link><pubDate>Thu, 15 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A4%A9%E6%B0%94%E7%9C%9F%E7%9A%84%E5%BE%88%E5%86%B7%E4%BA%86/</guid><description>&lt;p>天气真的很冷了，走在路上，我的鼻涕都冻出来了。&lt;/p>
&lt;p>搭车时，公交车都冻得无法启动。&lt;/p>
&lt;p>坐车时，腿冻得直打颤。&lt;/p>
&lt;p>开门时，牙冻得直打架。&lt;/p>
&lt;p>&amp;ndash;吃饭去！&amp;ndash;由 sbabybird 于 11/15/200708:13:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>Hello, Android!</title><link>https://sbabybird.github.io/p/hello-android/</link><pubDate>Wed, 14 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/hello-android/</guid><description>&lt;img src="https://sbabybird.github.io/p/hello-android/20071114-1.PNG" alt="Featured image of post Hello, Android!" />&lt;p>到家后立即下载 Android 的 SDK，按照帮助文档的提示，顺利运行伟大的&amp;quot;HelloWorld！&amp;quot;&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 11/14/200709:14:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>下载了android的SDK</title><link>https://sbabybird.github.io/p/%E4%B8%8B%E8%BD%BD%E4%BA%86android%E7%9A%84sdk/</link><pubDate>Wed, 14 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%8B%E8%BD%BD%E4%BA%86android%E7%9A%84sdk/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E4%B8%8B%E8%BD%BD%E4%BA%86android%E7%9A%84sdk/20071114.PNG" alt="Featured image of post 下载了android的SDK" />&lt;p>听说 android 放出 SDK 了，而且 Google 为了鼓励开发者开发出 NB 的应用特意发了 1000 万美元的红包，如果你能开发出有创意的精品软件，说不定也能拿到一笔钱呐！&lt;/p>
&lt;p>我也去下载了 SDK，这个是 android 的模拟器的样子，还挺漂亮的。&lt;/p>
&lt;p>等晚上回家先写一个 helloworld 再说！&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 11/14/200704:53:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>blogspot又封了？</title><link>https://sbabybird.github.io/p/blogspot%E5%8F%88%E5%B0%81%E4%BA%86/</link><pubDate>Tue, 13 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/blogspot%E5%8F%88%E5%B0%81%E4%BA%86/</guid><description>&lt;img src="https://sbabybird.github.io/p/blogspot%E5%8F%88%E5%B0%81%E4%BA%86/20071110.png" alt="Featured image of post blogspot又封了？" />&lt;p>刚刚好了没几天，访问 blogspot 又&amp;quot;该页无法显示&amp;quot;了。&amp;ndash;由 sbabybird 于 11/10/200703:33:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>偏色</title><link>https://sbabybird.github.io/p/%E5%81%8F%E8%89%B2/</link><pubDate>Tue, 13 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%81%8F%E8%89%B2/</guid><description>&lt;p>清晨的时候&amp;ndash;由 sbabybird 于 11/10/200709:02:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>晚上有雾</title><link>https://sbabybird.github.io/p/%E6%99%9A%E4%B8%8A%E6%9C%89%E9%9B%BE/</link><pubDate>Tue, 13 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%99%9A%E4%B8%8A%E6%9C%89%E9%9B%BE/</guid><description>&lt;p>晚上有雾&amp;ndash;由 sbabybird 于 11/12/200708:00:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>微波炉</title><link>https://sbabybird.github.io/p/%E5%BE%AE%E6%B3%A2%E7%82%89/</link><pubDate>Tue, 13 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BE%AE%E6%B3%A2%E7%82%89/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%BE%AE%E6%B3%A2%E7%82%89/20071110-1.png" alt="Featured image of post 微波炉" />&lt;p>画图板&amp;ndash;由 sbabybird 于 11/10/200703:31:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>伪LOMO</title><link>https://sbabybird.github.io/p/%E4%BC%AAlomo/</link><pubDate>Tue, 13 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%BC%AAlomo/</guid><description>&lt;p>用 A610 拍的，后期经过调色，模仿 LOMO 的那种效果，嘿嘿。&amp;ndash;由 sbabybird 于 11/10/200708:53:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>午休</title><link>https://sbabybird.github.io/p/%E5%8D%88%E4%BC%91/</link><pubDate>Tue, 13 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%8D%88%E4%BC%91/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%8D%88%E4%BC%91/20071109.png" alt="Featured image of post 午休" />&lt;p>&amp;ndash;由sbabybird于11/09/200712:58:00下午在从容地狂奔上发表&lt;/p></description></item><item><title>小鸟在脚下飞翔</title><link>https://sbabybird.github.io/p/%E5%B0%8F%E9%B8%9F%E5%9C%A8%E8%84%9A%E4%B8%8B%E9%A3%9E%E7%BF%94/</link><pubDate>Tue, 13 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%B0%8F%E9%B8%9F%E5%9C%A8%E8%84%9A%E4%B8%8B%E9%A3%9E%E7%BF%94/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E5%B0%8F%E9%B8%9F%E5%9C%A8%E8%84%9A%E4%B8%8B%E9%A3%9E%E7%BF%94/20071112.png" alt="Featured image of post 小鸟在脚下飞翔" />&lt;p>小鸟在脚下飞翔&amp;ndash;由 sbabybird 于 11/12/200701:56:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>夜路</title><link>https://sbabybird.github.io/p/%E5%A4%9C%E8%B7%AF/</link><pubDate>Tue, 13 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A4%9C%E8%B7%AF/</guid><description>&lt;p>路灯下我的影子&amp;ndash;由 sbabybird 于 11/10/200708:50:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>一碗牛肉面</title><link>https://sbabybird.github.io/p/%E4%B8%80%E7%A2%97%E7%89%9B%E8%82%89%E9%9D%A2/</link><pubDate>Tue, 13 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E4%B8%80%E7%A2%97%E7%89%9B%E8%82%89%E9%9D%A2/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E4%B8%80%E7%A2%97%E7%89%9B%E8%82%89%E9%9D%A2/20071113.png" alt="Featured image of post 一碗牛肉面" />&lt;p>一碗牛肉面，我的晚饭&amp;ndash;由 sbabybird 于 11/13/200706:00:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>早上去打了疫苗</title><link>https://sbabybird.github.io/p/%E6%97%A9%E4%B8%8A%E5%8E%BB%E6%89%93%E4%BA%86%E7%96%AB%E8%8B%97/</link><pubDate>Tue, 13 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%97%A9%E4%B8%8A%E5%8E%BB%E6%89%93%E4%BA%86%E7%96%AB%E8%8B%97/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%97%A9%E4%B8%8A%E5%8E%BB%E6%89%93%E4%BA%86%E7%96%AB%E8%8B%97/20071113-1.png" alt="Featured image of post 早上去打了疫苗" />&lt;p>前两天单位组织体检，一切正常，就是没有乙肝的抗体，印象中上学的时候已经打过疫苗，不过人家医生说，可能年代太久远了（靠，有那么远么？）&lt;/p>
&lt;p>抗体丢了，无奈，再去接种就是了。&lt;/p>
&lt;p>打针时，问人家会不会疼？&lt;/p>
&lt;p>人家护士答的很爽快：&amp;quot;你就放心吧，我打了 20 年的针。。。。&amp;quot;，&lt;/p>
&lt;p>等我疼完了又接着说：&amp;quot;没有一个不疼的！&amp;quot;&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 11/13/200710:40:00 上午在从容地狂奔上发表&lt;/p></description></item><item><title>重温Winamp</title><link>https://sbabybird.github.io/p/%E9%87%8D%E6%B8%A9winamp/</link><pubDate>Tue, 13 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%87%8D%E6%B8%A9winamp/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E9%87%8D%E6%B8%A9winamp/20071108.JPG" alt="Featured image of post 重温Winamp" />&lt;p>有几年不用 Winamp 了，最近 Winamp 又退出了 10 周年纪念版版。&lt;/p>
&lt;p>我下载了一个，感觉听听里面的网络电台什么的还挺不错的（边上班边听欧美最流行的音乐哈）。&lt;/p>
&lt;p>而且新版还包含了 podcast 的功能，可以搜索订阅网上的播客。&lt;/p>
&lt;p>在家听音乐的话，我还是选择 foobar。&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 11/08/200707:49:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>昨天我二十四</title><link>https://sbabybird.github.io/p/%E6%98%A8%E5%A4%A9%E6%88%91%E4%BA%8C%E5%8D%81%E5%9B%9B/</link><pubDate>Tue, 13 Nov 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%98%A8%E5%A4%A9%E6%88%91%E4%BA%8C%E5%8D%81%E5%9B%9B/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%98%A8%E5%A4%A9%E6%88%91%E4%BA%8C%E5%8D%81%E5%9B%9B/20071111.png" alt="Featured image of post 昨天我二十四" />&lt;p>昨天我二十四,今天我二十五&lt;/p>
&lt;p>&amp;ndash;由 sbabybird 于 11/11/200712:49:00 下午在从容地狂奔上发表&lt;/p></description></item><item><title>Under a Violet Moon</title><link>https://sbabybird.github.io/p/under-a-violet-moon/</link><pubDate>Sat, 22 Sep 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/under-a-violet-moon/</guid><description>&lt;p>nan&lt;/p></description></item><item><title>关于电脑配置的遐想（瞎想）</title><link>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE%E7%9A%84%E9%81%90%E6%83%B3%E7%9E%8E%E6%83%B3/</link><pubDate>Tue, 28 Aug 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B3%E4%BA%8E%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE%E7%9A%84%E9%81%90%E6%83%B3%E7%9E%8E%E6%83%B3/</guid><description>&lt;p>偶然翻看书架上的旧书，发现我以前在上面随手胡乱写了一个“梦幻配置”，那时应该是 2000 年，根据当时的硬件发展状况，我写了一个可望而不可及的硬件配置。&lt;/p>
&lt;p>具体什么配置就不说了（大概就是纯平显示器、笨三的 cpu），反正现在让你用你还嫌慢呢。&lt;/p>
&lt;p>现在六、七年过去了，心里又痒痒的，就让我再写一个可望而不可及的硬件配置吧，看看这个配置何时会过时。&lt;/p>
&lt;p>中央处理器：IntelCore2QuadprocessorQ6700（4 核，为了安静，散热采用水冷系统）&lt;/p>
&lt;p>主板：IntelD975XBX2 内存：海盗船 TWIN2X2048-6400×4（共 8G）&lt;/p>
&lt;p>外存储：SanDisk64G 闪存硬盘（用于系统存储），2TB 磁盘阵列（用于文件存储）&lt;/p>
&lt;p>显卡：丽台 NVIDIAQuadroFX5600×2（每块显卡可接四台屏幕）&lt;/p>
&lt;p>主显示器：Apple30&amp;quot;CinemaDisplay（上网、影视、游戏）&lt;/p>
&lt;p>副显示器：Apple20&amp;quot;CinemaDisplay×6（地理、虚拟现实、平面设计等）&lt;/p>
&lt;p>CreativeSoundBlasterX-FiElitePro+罗技 Z5500（用于电影、游戏、非专业录音）&lt;/p>
&lt;p>主板数字光纤输出+外置解码器+JBL 监听音箱（用于欣赏音乐）&lt;/p>
&lt;p>操作系统：自己动手定做(编译)Linux 版本，桌面环境采用 GONE（如果有兴趣就自己写个操作系统）&lt;/p>
&lt;p>备注：机箱易采用高厚度、高散热静音机箱，此系统搭建完成后将用于书房，共七台显示器需要用到特殊的显示器支架。&lt;/p></description></item><item><title>What i've done</title><link>https://sbabybird.github.io/p/what-ive-done/</link><pubDate>Sat, 18 Aug 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/what-ive-done/</guid><description>&lt;p> &lt;/p></description></item><item><title>Don't Cry</title><link>https://sbabybird.github.io/p/dont-cry/</link><pubDate>Sat, 11 Aug 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/dont-cry/</guid><description>&lt;p>nan&lt;/p></description></item><item><title>live space 的表现让我很失望</title><link>https://sbabybird.github.io/p/live-space-%E7%9A%84%E8%A1%A8%E7%8E%B0%E8%AE%A9%E6%88%91%E5%BE%88%E5%A4%B1%E6%9C%9B/</link><pubDate>Sat, 04 Aug 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/live-space-%E7%9A%84%E8%A1%A8%E7%8E%B0%E8%AE%A9%E6%88%91%E5%BE%88%E5%A4%B1%E6%9C%9B/</guid><description>&lt;p>不知是不是因为升级还没有进行完成，最近 livespaces 总是不能正常操作，用 firefox 访问有时还会出现乱码或者页面布局乱套，速度慢的惊人，资源占用很厉害。&lt;/p>
&lt;p>再加上他有太多的限制，这些问题都让我感到对 livespace 失望透顶。&lt;/p>
&lt;p>衷心希望 Googleblogger 能够早日解封！&lt;/p></description></item><item><title>昨天去电影院看了《憨豆先生的黄金周》</title><link>https://sbabybird.github.io/p/%E6%98%A8%E5%A4%A9%E5%8E%BB%E7%94%B5%E5%BD%B1%E9%99%A2%E7%9C%8B%E4%BA%86%E6%86%A8%E8%B1%86%E5%85%88%E7%94%9F%E7%9A%84%E9%BB%84%E9%87%91%E5%91%A8/</link><pubDate>Sat, 04 Aug 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%98%A8%E5%A4%A9%E5%8E%BB%E7%94%B5%E5%BD%B1%E9%99%A2%E7%9C%8B%E4%BA%86%E6%86%A8%E8%B1%86%E5%85%88%E7%94%9F%E7%9A%84%E9%BB%84%E9%87%91%E5%91%A8/</guid><description>&lt;p>昨天去电影院看了《憨豆先生的黄金周》，感觉还不错，憨豆先生还是那么滑稽可乐，有着独特的幽默方式，我虽然没有笑到肚皮抽筋、掐着大腿，但是 90 分钟的电影还是让我由衷地笑了半个小时（累计）。&lt;/p>
&lt;p>这里就不介绍剧情了（一般来说这种喜剧基本没剧情可言），网上到处都是介绍。&lt;/p>
&lt;p>整个影片从头到尾憨豆先生都拿着那只 SONY 新出的 DV，我估计 SONY 投了不少钱，还有就是片子的音乐配的还可以，轻快明亮。&lt;/p>
&lt;p>总的来说还值得一看。&lt;/p>
&lt;p>现在的电影院真是不景气啊，能容纳 500 号人的大厅坐了不到 100 人，不过挺爽的，谁让他们把票价订的那么贵，现在的票价是我小时候电影票价的 100 倍&lt;/p></description></item><item><title>在 live spaces 单篇日志中插入音乐 测试</title><link>https://sbabybird.github.io/p/%E5%9C%A8-live-spaces-%E5%8D%95%E7%AF%87%E6%97%A5%E5%BF%97%E4%B8%AD%E6%8F%92%E5%85%A5%E9%9F%B3%E4%B9%90-%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 30 Jul 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%9C%A8-live-spaces-%E5%8D%95%E7%AF%87%E6%97%A5%E5%BF%97%E4%B8%AD%E6%8F%92%E5%85%A5%E9%9F%B3%E4%B9%90-%E6%B5%8B%E8%AF%95/</guid><description>&lt;p> &lt;/p></description></item><item><title>理发2007</title><link>https://sbabybird.github.io/p/%E7%90%86%E5%8F%912007/</link><pubDate>Sun, 29 Jul 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%90%86%E5%8F%912007/</guid><description>&lt;p>对于我来说，理发是件很痛苦的事情，可能是有心理障碍吧。&lt;/p>
&lt;p>小的时候被老爸强行摁住理过一次发，我像一只小鸡那样被夹在腿上无力反抗，由于整个过程我都在不停地叫骂那个理发的，所以那家伙下手还不含糊，把推子使得嚓嚓直响，对着我的头皮和耳朵可劲儿招呼。&lt;/p>
&lt;p>整个过程是漫长的、痛苦的、令人发指的。&lt;/p>
&lt;p>最后我看着镜子里的凸了吧唧的头，还不忘使劲儿拧了一把鼻涕抹在老爸的裤腿上。&lt;/p>
&lt;p>此事后来成为笑谈，但爷儿俩在理发这种事情上一直都持有不同的观点，&lt;/p>
&lt;p>当然了，我还只能提出强烈抗议、强烈不满、强烈谴责，但采取进一步措施的权利还是保留了。&lt;/p>
&lt;p>一直到现在，当老爸跟我说：“快去把头发理一理！”时，我还是乖乖的狂奔去理发。&lt;/p>
&lt;p>不过，现在我离老爸远了，他管不了啦（主要是没看见），我可以尽情地把头发留到很长，然后再一下剪到很短（一般是回老家之前）。&lt;/p>
&lt;p>但是我的这种习惯却造成了另一件事情，给我理发的人极度不爽。&lt;/p>
&lt;p>每当我拖着留了几个月的长发走进理发店，告诉理发的师傅给我可劲儿剪短时，伊总是很扭捏，假惺惺地跟我说：“哎呀！你的发质这么好，又好不容易留了这么长，剪了多可惜啊！”&lt;/p>
&lt;p>其实谁不知道伊是想省点儿事儿，想拿剪刀在那三下两下剪完糊弄我。&lt;/p>
&lt;p>于是我只好说：“嗯嗯，本来是想留长的，但是现在突然想开了，不想留了，还是麻烦您给我剪短吧！”&lt;/p>
&lt;p>最后等着人家极不情愿（还很费时）地给我剪完，我才满意离去。&lt;/p>
&lt;p>但是这招下次就不能用了，所以我总是选择不同的理发店，反正这玩意儿多得是！&lt;/p>
&lt;p>今天我又理发了，从五一到现在大概有三个月了，很抱歉，又让一个理发师傅不爽了一把，不管他，这次理完了，谁知道我什么时候有心情理下回呀！&lt;/p></description></item><item><title>轻轻的，我将整蛊你</title><link>https://sbabybird.github.io/p/%E8%BD%BB%E8%BD%BB%E7%9A%84%E6%88%91%E5%B0%86%E6%95%B4%E8%9B%8A%E4%BD%A0/</link><pubDate>Tue, 24 Jul 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%BD%BB%E8%BD%BB%E7%9A%84%E6%88%91%E5%B0%86%E6%95%B4%E8%9B%8A%E4%BD%A0/</guid><description>&lt;p>天气这么闷热，生活这么枯燥，何不搞点小把戏调剂一下气氛呢？&lt;/p>
&lt;p>要是你现在刚好在办公室里，那么恭喜你了，下面我将教你几个在下秘密收藏的整蛊手段（一般人我不告诉他）。&lt;/p>
&lt;p>前提条件：&lt;/p>
&lt;p>1、你们用计算机办公；&lt;/p>
&lt;p>2、你们使用的是 Windows 操作系统；&lt;/p>
&lt;p>3、你要整蛊的同事没有暴力倾向；&lt;/p>
&lt;p>4、他刚好暂时离开一下。&lt;/p>
&lt;p>好了，准备好了就开始行动吧！&lt;/p>
&lt;p>场景一：“我的密码被改了？！”&lt;/p>
&lt;p>如果你的这位同事有锁定计算机的习惯，那就刚好实施一下，在他计算机的锁定状态下的密码框里提前敲入一个空格，这样一般他回来时不会发觉，等他输入完自己的密码后，会发现进不去了！（因为密码前面多输入了一个空格）。&lt;/p>
&lt;p>场景二：“用来干活儿的软件没有反应了！”&lt;/p>
&lt;p>如果他没有锁定计算机的习惯，那么刚才那个办法就不凑效了，怎么办呢，找到他用来工作的软件（VC，Word、Excel 等），把帮助菜单里的“关于（about）”对话框给打开，然后用鼠标把对话框拖动到一个屏幕上看不见的地方。哈哈，等着吧，他回来会发现他用来工作的软件怎么也不听话了，无论点击哪儿都没有反应。&lt;/p>
&lt;p>场景三：“鼠标不好使了”&lt;/p>
&lt;p>现在大家都用光电鼠标了，而光电鼠标全靠它屁股底下的那个激光眼，没错！你又猜对了，拿个小纸团把它那个小眼睛堵住，赶紧去吧！鼠标瞎了之后就罢工了。&lt;/p>
&lt;p>以上方法屡试不爽，我都亲自实验过，不过是别人在我身上实验的（这帮败家玩意儿）。&lt;/p>
&lt;p>注：以上操作纯属娱乐！产生后果自负。&lt;/p></description></item><item><title>我心目中的完美手机</title><link>https://sbabybird.github.io/p/%E6%88%91%E5%BF%83%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%AE%8C%E7%BE%8E%E6%89%8B%E6%9C%BA/</link><pubDate>Mon, 23 Jul 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E5%BF%83%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%AE%8C%E7%BE%8E%E6%89%8B%E6%9C%BA/</guid><description>&lt;p>我手里这个 Nokia6230 用了 3 年了，买的时候多加了一块电池。前两天，其中一块电池寿终正寝了，剩下的这块也差不多了，感觉就像我的胃，一吃就饱，一会儿就又饿了。&lt;/p>
&lt;p>我看着手里这个灰头土脸得就像从垃圾桶里捡回的手机，不禁有了换掉它的念头。&lt;/p>
&lt;p>到网上翻了翻信息，结果让我很失望，感觉 Nokia 不太长进，眼看着人家索爱扛着音乐、摄像的大旗在市场上占了一席之地，自己也跟着别人的屁股转，也在那儿搞音乐手机、摄像手机，却忘了自己的特色。&lt;/p>
&lt;p>没办法，别的牌子不愿意用，老 N 最近推出的新机不是我看不上就是我的钱包不让看（靠，就这还敢冒充 Nokia 的粉丝呀？）。&lt;/p>
&lt;p>苹果的 iPhone 最近倒是炒得挺火，看起来也挺不错，可是总觉的那玩意儿离咱太遥远了，还是不多看了，以免中毒。&lt;/p>
&lt;p>在查看了众多机型之后，长叹一声：“究竟什么样的手机才能让我满意呢！”&lt;/p>
&lt;p>总结以下大概要满足以下几点： 1. 屏幕要足够大、分辨率不用极高但也不能太低 2. 反应速度一定要快（目前我还没有发现一款智能手机反应速度飞快） 3. 个头不能太大、重量不能太沉 4. 电话、短信功能好用 5. 电量一定要持久，待机越长越好（这点最重要，功能再强没电也是白扯） 6. 非国产（这个不用多说）     &lt;/p>
&lt;pre>&lt;code> 这些要求不过分吧？像什么摄像、音乐等功能都没要求，可愣是找不到这样一款手机，反复对比后发现还是目前手上的这个更合要求一些。
算了，将就用吧。
结果，昨晚做梦，梦见我也设计了一款手机，以上条件除了第六条其余都满足，取名就叫“nbPhone”把苹果的Phone的风头给压下去了，乔布斯都跟我急了。
&lt;/code>&lt;/pre></description></item><item><title>真正牛逼的人，终究会牛逼起来！</title><link>https://sbabybird.github.io/p/%E7%9C%9F%E6%AD%A3%E7%89%9B%E9%80%BC%E7%9A%84%E4%BA%BA%E7%BB%88%E7%A9%B6%E4%BC%9A%E7%89%9B%E9%80%BC%E8%B5%B7%E6%9D%A5/</link><pubDate>Sat, 21 Jul 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%9C%9F%E6%AD%A3%E7%89%9B%E9%80%BC%E7%9A%84%E4%BA%BA%E7%BB%88%E7%A9%B6%E4%BC%9A%E7%89%9B%E9%80%BC%E8%B5%B7%E6%9D%A5/</guid><description>&lt;p>一个胖子，一个相貌平平而且豁牙的胖子，一个相貌平平而且豁牙的卖手机的胖子。&lt;/p>
&lt;p>这样的人参加选秀节目，如果你是评委的话，你会让他通过海选吗？&lt;/p>
&lt;p>如果他告诉你他要表演的是歌剧的话，你会跳下评委台把它踢出演播厅吗？！&lt;/p>
&lt;p>我想你会的，因为当时英国的那个选秀节目的评委也是这样想的。&lt;/p>
&lt;p>PaulPotts，这个我刚刚看到的英国小伙子，就是这样参加选秀节目的。&lt;/p>
&lt;p>当他极不自然地站在舞台上，傻傻地告诉评委他要表演歌剧，评委们都笑了，表现得有些不耐烦。&lt;/p>
&lt;p>可是，当他深情地唱起今夜无人入眠，当他那与帕瓦罗蒂一样激昂的男高音在演播厅响起时，赛场沸腾了！所有的人都站了起来，评委刁在嘴里的铅笔掉了下来，掌声雷动！&lt;/p>
&lt;p>这段由朋友发过来、我甚至懒得看的视频，看得我头皮发麻。&lt;/p>
&lt;p>在起了一身鸡皮疙瘩后，我的眼睛也不争气地湿润了（震撼，感动）。&lt;/p>
&lt;p>看了别人写的介绍，我了解到，这个叫 Paul 的小伙子有着不太顺利的人生际遇（大多数人如此吧），但是他从未怀疑过自己的理想，仍然执着地追求着歌剧表演的艺术魅力，直到他被生活所逼而不得不靠卖手机来糊口时，仍未放弃！&lt;/p>
&lt;p>终于，上天给了他最后一次机会，他成功了，他向世人再一次的证明了：真正牛逼的人，终究会牛逼起来！试了一下，msn 的空间居然还可以插入视频！&lt;/p></description></item><item><title>几天不见，LiveSpace变了</title><link>https://sbabybird.github.io/p/%E5%87%A0%E5%A4%A9%E4%B8%8D%E8%A7%81livespace%E5%8F%98%E4%BA%86/</link><pubDate>Fri, 20 Jul 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%87%A0%E5%A4%A9%E4%B8%8D%E8%A7%81livespace%E5%8F%98%E4%BA%86/</guid><description>&lt;p>我都已经好几天没有照看我的 msn 空间了（最近太累），今天访问一下，发现界面居然有了变化（别三日，刮目看），嗯哼，原来是微软的 Live 小组把咱的空间给升级了。&lt;/p>
&lt;p>首先是界面的整体风格有了改变，我审美不行，看不出是好看还是难看，感觉貌似顺眼一些。空间上方仍然悬挂着那个大大的广告条（我一直看它不爽），工具条的宽度变宽了，这样会占用更多的空间。&lt;/p>
&lt;p>进入空间的“自定义”功能，发现提供的模板多了一些，但一个比一个不耐看，所以我什么也没有动，继续保持现状。一直希望 Live 空间能够提供类似 WordPress 那样的模板（多漂亮啊），现在看来，要走的路还比较长（Live 小组继续加油啊！）。&lt;/p>
&lt;p>不过话又说回来，空间里整那么多花里胡哨的东东也没用，看得让人眼花缭乱的也不爽，我还是喜欢简约一点的风格，最好是让人进入我的空间后，感觉就像是打开了 windows 的记事本（过分了吧）。&lt;/p>
&lt;p>本来 Google 提供的那个 blog 挺好的，可是总是不能访问，还是老老实实的在微软提供的共享空间里得瑟吧。&lt;/p>
&lt;p>最后，再鄙视一下我自己，这几天由于懒惰而没有更新空间的内容，太不像话了！&lt;/p></description></item><item><title>嘛儿叫幸福？介就叫幸福！</title><link>https://sbabybird.github.io/p/%E5%98%9B%E5%84%BF%E5%8F%AB%E5%B9%B8%E7%A6%8F%E4%BB%8B%E5%B0%B1%E5%8F%AB%E5%B9%B8%E7%A6%8F/</link><pubDate>Fri, 20 Jul 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%98%9B%E5%84%BF%E5%8F%AB%E5%B9%B8%E7%A6%8F%E4%BB%8B%E5%B0%B1%E5%8F%AB%E5%B9%B8%E7%A6%8F/</guid><description>&lt;p>随着一阵悦耳的下班铃声，我提前结束了一天的工作，按照惯例，周末了，要去打球。&lt;/p>
&lt;p>叫上同事，抱起篮球，飞快地奔向球场。&lt;/p>
&lt;p>终于逃脱了闪烁的计算机屏幕，逃脱了无聊的工作计划，逃脱了漫长的会议，逃脱了郁闷的代码&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>各位观众，各位听众，也许你们刚刚打开电梯，现在为您直播的是&amp;ndash;火星杯篮球锦标赛！&lt;/p>
&lt;p>穿着运动鞋牛仔裤正在捡球的那家伙就是我，看呐，我在球场上尽情地狂奔，边打球边哼着歌曲“啊哼三分球，它在空中停留，漂亮的假动作，帅呆了我&amp;hellip;&amp;hellip;哦 shit！球丢了”。&lt;/p>
&lt;p>一口气打了两三个小时，直打到有人气喘吁吁，打到有人双腿抽筋，打到有人口吐白沫还不肯离去。&lt;/p>
&lt;p>天渐渐黑了，球框渐渐虚无缥缈起来，收拾家伙，撤！&lt;/p>
&lt;p>走到站牌，有车，有座，爽！上了高速，一路畅通，爽！&lt;/p>
&lt;p>到了家里，贤惠的老婆已经把饭菜做好，菜做的色香俱佳，啤酒冰得温度适中。&lt;/p>
&lt;p>如果这个时候你问我，什么是幸福？我会自在地夹一口菜，然后再悠闲地喝上一口啤酒，眯起眼睛跟你说：“嘛儿叫幸福？介就叫幸福！”&lt;/p>
&lt;p>幸福像花儿一样。&lt;/p></description></item><item><title>给点儿钱让我买吃的吧！</title><link>https://sbabybird.github.io/p/%E7%BB%99%E7%82%B9%E5%84%BF%E9%92%B1%E8%AE%A9%E6%88%91%E4%B9%B0%E5%90%83%E7%9A%84%E5%90%A7/</link><pubDate>Thu, 12 Jul 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%BB%99%E7%82%B9%E5%84%BF%E9%92%B1%E8%AE%A9%E6%88%91%E4%B9%B0%E5%90%83%E7%9A%84%E5%90%A7/</guid><description>&lt;p>加班后回家的路上，路灯十分昏暗，还没有吃晚饭，心情极度郁闷，我缓缓（没力气狂奔了）走向公车站牌，走着，走着，突然！&lt;/p>
&lt;p>一个黑影窜了过来，他跟我说：“兄弟，要盗版光盘不？”&lt;/p>
&lt;p>我没有理他，继续走，走着，走着，突然！&lt;/p>
&lt;p>又一个黑影窜了过来，他跟我说：“兄弟，要发票吗？”&lt;/p>
&lt;p>我没有理他，继续走，走着，走着，突然（靠，有完没完啊！）&lt;/p>
&lt;p>一大一小两个黑影窜了出来，原来是一个中年妇女领着一个七八岁的小女孩儿，夜色中看不清面目。小孩开口说话了：“叔叔，给点儿钱让我买吃的吧，我都饿了一天了&amp;hellip;&amp;hellip;”&lt;/p>
&lt;p>边说还边做有气无力状，大人也在一边附和。说得我心里一软，鼻涕快掉下来了，差点儿掏钱。&lt;/p>
&lt;p>但是转念一想，我 TM 也饿了快一天啦，也没吃饭呢，再何况，她们的行为也太让我愤怒了，因为就凭这些个破烂演技拿来唬我也太侮辱我的智商了吧！&lt;/p>
&lt;p>于是，我友善的冲她们说道：“小朋友，你看”我用手指了指马路，“往前走 500 米，那里有家派出所，你过去找警察叔叔要些吃的好不好？”&lt;/p>
&lt;p>小孩一时不吭声（台词没背下来），大人接着说：“你就可怜我们，给我们几块钱，买包方便面也行啊！”（我靠，我这么晚了还没吃饭，我求您别勾引我的食欲了！）&lt;/p>
&lt;p>我没办法，掏出手机，说：“既然你们不愿意亲自过去，那我帮你们打 110 吧&amp;hellip;&amp;hellip;”&lt;/p>
&lt;p>这句话还没有说完，说时迟那时快，只听得“嗖嗖”两声，两个人全都不见踪影，公车站牌下只剩下我和随风飘舞的碎纸片（好身手！）。&lt;/p></description></item><item><title>测试一把google的在线翻译工具</title><link>https://sbabybird.github.io/p/%E6%B5%8B%E8%AF%95%E4%B8%80%E6%8A%8Agoogle%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%BF%BB%E8%AF%91%E5%B7%A5%E5%85%B7/</link><pubDate>Fri, 06 Jul 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%B5%8B%E8%AF%95%E4%B8%80%E6%8A%8Agoogle%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%BF%BB%E8%AF%91%E5%B7%A5%E5%85%B7/</guid><description>&lt;p>听说 google 出了在线翻译的工具，而且还广受大家的好评，在美国举行的一次翻译比赛中还拿了冠军。&lt;/p>
&lt;p>我虽不是 google 的粉丝但也对 google 的产品挺感兴趣的，于是赶紧凑个热闹，看看伟大的 google 能不能给我带来惊喜。   由于我只会中文，那就看看 google 的英译中的水平怎么样。&lt;/p>
&lt;p>废话少说，赶紧拿来一首英文歌词《youneededme》（我最喜欢的英文歌曲之一）。&lt;/p>
&lt;p>YouneededmeIcriesatearyouwipeditdryIwasconfusedyouclearedmymindIsoldmysoulyouboughtitbackformeAndhelpmeupandgivemedignitySomehowyouneededmeYougavemestrengthtostandaloneagainTofacetheworldoutonmyownagainYouputmehighuponapedestalSohighthatIcouldalmostseeeternityYouneededme,youneededmeAndIcan'tbelieveit'syouIcan'tbelieveit'strueIneededyouandyouwerethereAndI'llneverleavewhyshouldIleaveI'dbeafoolCauseI'vefinallyfoundsomeoneWhoreallycaresYouheldmyhandwhenitwascoldWhenIlostyoutookmehomeYougavemehopewhenIwasattheendAndturnedmyliesbackintotruthagainYouevencalledmefriendYougavemestrengthtostandaloneagainTofacetheworldoutonmyownagainYouputmehighuponapedestalSohighthatIcouldalmostseeeternityYouneededme,youneededmeOh,yes,youneedmeYouneededme&lt;/p>
&lt;p>先试了一下整段翻译,把歌词复制进去,出来的结果让我忍俊不禁 google 自动翻译的文字：&lt;/p>
&lt;p>你需要我,我喊了眼泪,你擦它干,我摸你清我心中我卖出我的灵魂,你买回来,我和帮助我,让我有点尊严,你需要我你们给了我力量单独再次面对世界走出自己再次你就把我小时在室内一个台阶那么高,我几乎可以看到永恒,你需要我,多欧需要我,我也不相信是你,我不能相信这是真的,我需要你和你的笔在此,我永远不会离开,我为何要离开我就是一个傻瓜,我的事业总算发现有人真的三白族你握着我的手,当它冷时,我输了,你带我家,你给了我希望钨母鸡,我是在年底把我的谎言放回真话的时候,你甚至骂我的朋友,你克须缴我力量单独再次面对世界走出自己再次你就把我高美无源一个台阶那么高,我几乎可以看到永恒,你需要我,你需要我哦,多欧需要我,你需要我&lt;/p>
&lt;p>唉,比较失望啊,试一下 google 的翻译网页的功能吧,找到歌词的网页,然后让它翻译你需要我&lt;/p>
&lt;p>Icriedatear 我哭了眼泪 Youwipeditdry 你擦它干 Iwasconfused 我很困惑 Youclearedmymind 你清除了我的心 Isoldmysoul 我卖我的灵魂 Youboughtitbackforme 你买回来,我 Andheldtheearth 召开地球 Yougavemedignity 你给我尊严 Somehowyouneededme 某种程度上,你需要我 Yougavemestrength 你们给了我力量 Tostandaloneagain 单独再次 Tofacetheworld 面对世界 Outonmyownagain 出自己再次 Youputmehigh 你把我高 Uponapedestal 当佩服 SohighthatIcouldalmostseeeternity 如此高,我几乎可以看到永恒 Youneededme 你需要我 Youneededme 你需要我 Ican'tbelieveit'syou 我不能相信这是你 Ican'tbelieveit'syou 我不能相信这是你 Ineededyou 我需要你 Andyouwerethere 你有 AndI'llneverleave,whyshouldIleave?和我永远不会离开,我为何要离开?Ineededyou 我需要你 canIfinallyfoundsomeonewhoreallycares 可我终于发现有人真正关心(Youneededme)(你需要我)Youheldmyhand 你牵我的手 Itwascold 据冷 AndIwaslost 我失去了 Youtookmehome 你带我家 Yougavemelove 你们给我的爱 ThatIwasattheend 我是在结束 Iturnedmylife 我把我的生命 BackintotruthagainYouevencalledme'friend'放回真话的时候,你甚至骂我'朋友'Yougavemestrength 你们给了我力量 Tostandaloneagain 单独再次 Tofacetheworld 面对世界 Outonmyownagain 出自己再次 Youputmehigh 你把我高 Uponapedestal 当佩服 SohighthatIcouldalmostseeeternity 如此高,我几乎可以看到永恒 Youneededme 你需要我 Youneededme 你需要我 Youneededme 你需要我 Youneededme 你需要我 Oh,yes,youneededme 哦,你需要我 Youneededme 你需要我&lt;/p>
&lt;p>呵呵,这下看起来还像那么回事儿.感觉机器还是代替不了人啊.翻译有感情的东西总是那么生硬.&lt;/p></description></item><item><title>堵你千遍也不厌倦？</title><link>https://sbabybird.github.io/p/%E5%A0%B5%E4%BD%A0%E5%8D%83%E9%81%8D%E4%B9%9F%E4%B8%8D%E5%8E%8C%E5%80%A6/</link><pubDate>Wed, 04 Jul 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A0%B5%E4%BD%A0%E5%8D%83%E9%81%8D%E4%B9%9F%E4%B8%8D%E5%8E%8C%E5%80%A6/</guid><description>&lt;p>统计了一下我平时上班所需要的时间，要是堵车的话大概要一个小时多一些，要是特别堵的话大概要两个小时，要是跑步的话大概得三个小时多一些（推算的，可以忽略），要是夜里打车去上班的话大概得二十多分钟（极少，也可以忽略）。&lt;/p>
&lt;p>所以我一天大概有三个小时是堵在路上的，这导致了我的胃口极差，身材日渐消瘦，远看像铅笔近看像挂历！每天我都要坐在车上长吁短叹：“GR 的堵车啊！”&lt;/p>
&lt;p>是什么原因造成了这样的状况?&lt;/p>
&lt;p>原因有很多种，我想最直接的原因可能就是因为路上出现了车祸。&lt;/p>
&lt;p>无论是蹭了一下车屁股还是挂了一下后视镜，双方都会停好车，把路占上,然后撅起屁股在那儿查看爱车的状况，最后再各自打电话叫人&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>这个时候你要是刚好在路上，你就会感觉你置身于车的海洋，一辆挨着一辆的汽车望不到头，一片喇叭声，让人透不过气来。每当我乘坐的公交车慢慢的拱过出事地点，往往还能看到出事的双方（或多方）在那儿撅着。&lt;/p>
&lt;p>这种情况每天都要出现，所以每天都要堵车。&lt;/p>
&lt;p>据说从 8 月 7 号到 8 月 20 号，北京的交通管制要进行奥运预演.这对我们这些挤公交车上班的来说真是莫大的好消息啊!我们又可以感受像去年中非论坛期间的那种一路畅通的超快感了！&lt;/p>
&lt;p>不过，快乐永远是短暂的，过了那几天，还是得老老实实的坐在车去上体验“堵车不堵心”。&lt;/p></description></item><item><title>曾经，俺也DIY （怀念我的第一只音箱）</title><link>https://sbabybird.github.io/p/%E6%9B%BE%E7%BB%8F%E4%BF%BA%E4%B9%9Fdiy-%E6%80%80%E5%BF%B5%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%AA%E9%9F%B3%E7%AE%B1/</link><pubDate>Mon, 02 Jul 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9B%BE%E7%BB%8F%E4%BF%BA%E4%B9%9Fdiy-%E6%80%80%E5%BF%B5%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%AA%E9%9F%B3%E7%AE%B1/</guid><description>&lt;p>最羡慕那些有米的音响发烧友，手里攥着大把的钞票，买音响器材出手阔绰，有没有一双“金耳朵”不知道，反正当音响店的老板告诉他“这套音响，在听蔡琴唱歌的时候能听见她咽吐沫的声音”时，或者跟他说：“那套设备，在听交响乐的时候可以听见拉琴那小子不小心把曲谱翻掉在地上的声音”的时候，他们就会毫不犹豫的掏出几千乃至几万块大洋，把那些“宝贝”搬回家，反复的回放，听听蔡琴在什么时候换了一口气，或者听听吹长笛的坐在第几排。&lt;/p>
&lt;p>我也曾在这方面痴迷过，但仅仅是痴迷，没有什么实质性行动，原因很简单，掏不起那些闲钱呐！&lt;/p>
&lt;p>不过，在很早以前，读初中的时候就开始摆弄那些“音响器材”了，只是一堆喇叭，功率很小，大部分是从旧收录机上拆下来的，“音源”也就只有卡带，我曾试着把喇叭放到各种地方以调整他们的“音效”，比如放在蚊帐上除了可以在睡眠时有音乐环绕外还兼具“驱蚊”的效果，我为了得到更多的低音也曾把喇叭嵌入到书桌里（整个桌子就是音箱哈），甚至把喇叭放到洗衣机里，那音质真是惨不忍听。&lt;/p>
&lt;p>反正受当时的条件限制，我也只能是像小孩摆弄玩具似的，玩一玩儿而已，毕竟当时升学才是最大的目标。&lt;/p>
&lt;p>直到有一天，我翻看一本旧音响杂志，有人自制了个音箱，据说效果还不错，于是就动了自己也做一个的念头。&lt;/p>
&lt;p>再后来，到了上中师的时候，有了大把的空闲时间（但还是没空闲的钱），决定纯手工制作一只“有源音箱”！说干就干，开始行动！首先考虑的是功放电路采用什么形式，当时最佳的方案是使用“LM-1875”功放芯片，但由于囊中羞涩，最终放弃，后来买来一块晶体管放大板，也算将就了，喇叭买了两只，一个高音，一个中低音（8 寸），向我大舅要来了分频器。&lt;/p>
&lt;p>让老家木匠邻居帮忙做了个音箱的框架，剩下的就是我和我的一个哥儿们亲自动手了。&lt;/p>
&lt;p>箱体的材料比较奢侈，把我家的一个桌子给锯了（靠！太过分了）。&lt;/p>
&lt;p>后来组装的时候才发现，我竟然忘了考虑功放的前级，没办法，再次求救与大舅，从旧收录机上拆下来一块板子作为前级（居然还可以调高低音调）。&lt;/p>
&lt;p>就这样，前前后后忙活了有半个星期，我的音箱终于发出处女声了，这个时候音源已经是一台 VCD，那个时候我好像对蔡琴不感兴趣，于是先听了一首陈慧娴的《归来吧》，真是天籁啊！我当时感动的鼻涕都快掉下来了！&lt;/p>
&lt;p>当然了，我这么说是有一些夸张，其实音质不咋地，只是当时又没听过真正的音响，这只亲手做的音箱，让我体验到了充足的低音（说到低音，要感谢我的姥爷，他给了我一只大号的电源，具体功率不知道，反正很大很大），震耳欲聋的低音，就像是有人拿着锤子在敲打我的胸膛。&lt;/p>
&lt;p>这只音箱在当时带给了我无限的快乐和满足感，后来就去省会读大学了，买了电脑，买了几百块的音箱，那只音箱就被我扔到了角落，上面布满了灰尘。&lt;/p>
&lt;p>再后来，我干脆把它送给了我的大舅，听说他现在拿它当板凳，还挺结实的！&lt;/p></description></item><item><title>饭否，一群人的喃喃自语</title><link>https://sbabybird.github.io/p/%E9%A5%AD%E5%90%A6%E4%B8%80%E7%BE%A4%E4%BA%BA%E7%9A%84%E5%96%83%E5%96%83%E8%87%AA%E8%AF%AD/</link><pubDate>Sat, 30 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%A5%AD%E5%90%A6%E4%B8%80%E7%BE%A4%E4%BA%BA%E7%9A%84%E5%96%83%E5%96%83%E8%87%AA%E8%AF%AD/</guid><description>&lt;p>国外新兴一个叫 Twitter 的 Web2.0 站点，听说最近很火爆，很多人在那里叽叽咕咕，说一些有想法但又不至于发一篇 bolg 的“废话”。&lt;/p>
&lt;p>我去看了一眼，感觉跟那帮人文化差异挺大的也就没好意思去注册，但是国内的同志们也不示弱，一时间模仿该网站理念的站点如雨后春笋般涌现。&lt;/p>
&lt;p>在这些国内的叽咕站点里，有朋友就给我推荐这个“饭否”，说是一个迷你 Blog，像 Twitter 一样，只是大家都是中国人，叽咕的内容比较容易懂一些。&lt;/p>
&lt;p>我这个人最爱尝鲜，就忍不住过去注册了一个帐号。&lt;/p>
&lt;p>感觉还不错，可以绑定 MSN，QQ 等 IM 软件，方便通过 IM 软件在上面发言，甚至可以绑定手机，让你随时随地的把感受发到网上。&lt;/p>
&lt;p>人气还是挺旺的，不断有人在上面喃喃自语，也不乏有一搭没一搭的聊天者。&lt;/p>
&lt;p>发布的内容可以很无聊，比如“今天的天气真好”，也可以很有深度，比如“你们好啊，地球人！”&lt;/p>
&lt;p>呵呵，由于没用多久，所以还不能多加评论，我怀我有自闭的倾向，现在有了“饭否”，偶尔在里面发一下实时的感受，发泄一下心情而已，就当我是面对着墙壁在一个人喃喃自语吧。&lt;/p></description></item><item><title>共享空间无法访问!惊得我一身冷汗!</title><link>https://sbabybird.github.io/p/%E5%85%B1%E4%BA%AB%E7%A9%BA%E9%97%B4%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E6%83%8A%E5%BE%97%E6%88%91%E4%B8%80%E8%BA%AB%E5%86%B7%E6%B1%97/</link><pubDate>Sat, 30 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%85%B1%E4%BA%AB%E7%A9%BA%E9%97%B4%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E6%83%8A%E5%BE%97%E6%88%91%E4%B8%80%E8%BA%AB%E5%86%B7%E6%B1%97/</guid><description>&lt;p>早晨起来，像往常的周六一样，来到公司加班。&lt;/p>
&lt;p>打开电脑，然后习惯性的访问我的 msn 空间，“该页无法显示&amp;hellip;.”，不会吧，难道是网络断开了？&lt;/p>
&lt;p>没有啊，空间主页还是可以访问的，怎么一切换到我的空间就“该页无法显示”了呢？&lt;/p>
&lt;p>强制刷新浏览器还是不行，随便点了一个朋友的空间，可以访问。&lt;/p>
&lt;p>完了！莫非我的 msnspace 被封掉了？&lt;/p>
&lt;p>上网搜索一下，看看有没有出现同样问题的朋友，结果显示 msnspace 无法访问是常有的事儿，很多人都有过类似经历（国内用户），这其中的原因不言自明啊！&lt;/p>
&lt;p>我开始回忆，在我的日志里面到底有没有不该出现的敏感词汇？&lt;/p>
&lt;p>想了半天，答案是没有。可是要说是 msnsapce 的故障吧，别人的空间又是可以访问的，无奈只好跟微软的客服发了封电子邮件，暂时还未收到回复。&lt;/p>
&lt;p>我刚开始写网络日志，不为影响别人的看法，只为记录一下暂时的心情，本以为放到网上比放在本地还安全（相信微软的技术水平），结果还给我来这一手，想记录的时候却无法访问了，弄的心里还挺难受，担心以前的日志会不会丢掉啊！&lt;/p>
&lt;p>ps：就在刚才，它又突然可以访问了！&lt;/p></description></item><item><title>鲜果在线，让我尝一口鲜果</title><link>https://sbabybird.github.io/p/%E9%B2%9C%E6%9E%9C%E5%9C%A8%E7%BA%BF%E8%AE%A9%E6%88%91%E5%B0%9D%E4%B8%80%E5%8F%A3%E9%B2%9C%E6%9E%9C/</link><pubDate>Thu, 28 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E9%B2%9C%E6%9E%9C%E5%9C%A8%E7%BA%BF%E8%AE%A9%E6%88%91%E5%B0%9D%E4%B8%80%E5%8F%A3%E9%B2%9C%E6%9E%9C/</guid><description>&lt;p>偶然在 diglog 里发现了鲜果在线这个网站，名字很好听，于是乎，我就点击进去看了看。&lt;/p>
&lt;p>看了之后真有一种相见恨晚的感觉，这个站点本身不提供什么信息，只是提供一个在线的 RSS 阅读器，而且它提供的 RSS 频道都是根据大家的兴趣和订阅量进行排序的，也就是说，看某个频道的人越多，该频道就越靠前。&lt;/p>
&lt;p>这样就可以看到大家都喜欢看的东西，那些垃圾信息不会浮上来了（感谢 Web2.0 啊！）。&lt;/p>
&lt;p>在线阅读的操作也十分简单容易上手，而且界面清爽，有比较强大的自定义功能（我靠，怎么这么像托儿啊），我订阅了一些精品的频道，比如 Engadget、Solidot、cnBeta 等，顺便订阅了王小峰的“不许联想”（这个博客比较能扯淡，这算是夸他了）。&lt;/p>
&lt;p>这下就不用 Firefox 的 rss 阅读器了，直接把订阅的频道放在鲜果在线里存储到网上，在家和在公司都能看到同样的新鲜信息了，重装系统也不怕，把东西都放到网上，我想这也是以后互联网发展的趋势吧&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>ps：其实我早就把收藏的网址也放到网上了，在 Firefox 里安装一个扩展&amp;ndash;yoono，这个插件也很牛，有点儿像美味书签（del.icio.us），不过 yoono 最近增加了收藏整个网页的功能所以比较起来就更喜欢 yoono。&lt;/p></description></item><item><title>归去来</title><link>https://sbabybird.github.io/p/%E5%BD%92%E5%8E%BB%E6%9D%A5/</link><pubDate>Wed, 27 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%BD%92%E5%8E%BB%E6%9D%A5/</guid><description>&lt;p>雨后的空气格外清新，天气还没有完全放晴，乡间的柏油路上还是湿的，远处缓缓驶来一辆摩托车，骑车的人叼着烟，看起来懒洋洋的，十分惬意，没错，那就是我。&lt;/p>
&lt;p>我这几天回老家了，这个机会十分难得，暂时逃开北京繁忙的工作，溜回老家，无拘无束，自由自在。&lt;/p>
&lt;p>目光所及，尽是农田。&lt;/p>
&lt;p>空气中还飘散着青草混合大粪的味道，也算是沁人心脾吧。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">别再徘徊沉寂的心灵
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">别再留恋破碎的回忆
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">大地迎春雷抛弃你满腹的忧虑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">缤纷的彩虹等着你
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">别再犹豫等待的心湖
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">别再沉迷过去的旧梦
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">暖暖的春风走向那灿烂的天涯路
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">耀眼的阳光迎着你。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>我拿什么拯救你！我的晚餐！</title><link>https://sbabybird.github.io/p/%E6%88%91%E6%8B%BF%E4%BB%80%E4%B9%88%E6%8B%AF%E6%95%91%E4%BD%A0%E6%88%91%E7%9A%84%E6%99%9A%E9%A4%90/</link><pubDate>Wed, 27 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E6%8B%BF%E4%BB%80%E4%B9%88%E6%8B%AF%E6%95%91%E4%BD%A0%E6%88%91%E7%9A%84%E6%99%9A%E9%A4%90/</guid><description>&lt;p>今天又一次雨中漫步，原因很简单，受天气预报的干扰我又没带伞（干嘛要说又呢？）。&lt;/p>
&lt;p>拿起背包从容地奔向车站，嘴里也不忘哼着：“我能想到最郁闷的事~~，就是下雨却没有带伞~~”。&lt;/p>
&lt;p>淋雨就淋雨吧，挤上车，去思考一个很严重的问题，我的晚饭吃什么？&lt;/p>
&lt;p>别笑！这确实是一个很严重的问题。&lt;/p>
&lt;p>我不能像老婆在身边时那样说：“随便吧，做啥吃啥”（虽然心里想着最好炒两个菜，再冰上一瓶啤酒）。&lt;/p>
&lt;p>自己动手去做的话，倒不是嫌麻烦，只是吃我做的晚饭简直是虐待自己（大饼卷着馒头沾着米饭吃）。&lt;/p>
&lt;p>吃晚餐在我眼中确实是非常重要的事儿，平时上班的时候，早饭总是很虚无缥缈，不堵车的时候就慢慢坐在包子铺里吃包子，堵车时就没准儿了，也许是一个鸡蛋饼，也许是一个肉夹馍，也许，也许只有一杯开水。&lt;/p>
&lt;p>午饭就是普通的工作餐，千篇一律，除了米饭还是米饭。&lt;/p>
&lt;p>所以说，一日三餐也就晚饭是顿饭，我把吃晚饭看作是一件很神圣的事情，虽然不必在每次吃晚饭前都焚香沐浴，但我也在吃饭前做个深呼吸，抛开一天的烦恼，菩萨保佑、阿弥陀佛、无量天尊、阿门！感谢上天又让我吃了一顿晚饭！&lt;/p>
&lt;p>然后就对生活重新燃起热情，对工作又重新充满信心，活着不就是为了这顿晚饭嘛！&lt;/p>
&lt;p>可是，现在，我看了看车窗外，雨停了，道路渐渐不再拥堵，我的胃却越来越堵，没有胃口，吃还是不吃，这是个问题。&lt;/p>
&lt;p>下了车，路边的麻辣烫小摊熏得我的胃一阵抽搐，不远处的油炸臭豆腐老板正在卖力的吆喝，卖盗版书的小贩倒是省事儿，在大喇叭里循环播放“六块一本儿，随便挑随便拣&amp;hellip;&amp;hellip;”，喊得我头晕眼花，我真想冲过拿起他的喇叭然后在空中抛一个完美的弧线。&lt;/p>
&lt;p>还是那个晚饭情节，不想在外面饭馆里吃，尤其是一个人在饭馆里吃。&lt;/p>
&lt;p>拿起馒头，就着音乐和啤酒&amp;hellip;&amp;hellip;我怎么会舍得你走，这一去竟是几个秋冬请你好好珍重无须挂念我太多我的爱和从前一样这承诺当是万般重要尽管容颜会老这一生无以为靠我还是会爱你到老我不会让你苦恼也许我始终无法释怀我会假装一切都好。&lt;/p></description></item><item><title>我拧你！</title><link>https://sbabybird.github.io/p/%E6%88%91%E6%8B%A7%E4%BD%A0/</link><pubDate>Tue, 19 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%88%91%E6%8B%A7%E4%BD%A0/</guid><description>&lt;p>电视上充斥着广告，其中不乏精品，看完之后让人心情舒畅然后心甘情愿的掏腰包去买他们的产品。&lt;/p>
&lt;p>但是大多数广告都庸俗不堪，让人看得心慌气短、胃部抽搐、浑身起鸡皮疙瘩。&lt;/p>
&lt;p>这其中不必说“收礼只收搓澡巾”，也不必说“洗洗更健康”,单就是那位一口气上五楼的大爷就能让人抓狂了。&lt;/p>
&lt;p>时间长了，这些广告我吐啊吐啊的也就习惯了，对于这类垃圾广告也有了一定的免疫能力。&lt;/p>
&lt;p>但是最近又有一个广告冲破了我的心理防线！那就是某饮料的变态广告“我拧你！”&lt;/p>
&lt;p>画面上，一群疯子在那里晃来晃去的踢腿，就像得了羊癫疯似的，整个广告看了让人不知道他们在表达什么另类理念，还好导演没忘记让他们每人手里拿着一瓶该品牌的饮料。&lt;/p>
&lt;p>我估计作者的思路来源与某天他的鞋里进了个小石子，然后他就不停的甩啊甩，一直甩不出来，直到喝了他那个饮料才甩了出来，于是就创作了这个广告。&lt;/p>
&lt;p>关键是你在电视上恶心恶心我也就算了，在上下班的公交车上居然也循环的播放，而且还衍生出不同的版本出来，里面就没有一个正常人，都拿个腿在那儿踢来踢去的。&lt;/p>
&lt;p>也许从某种层面上来说，这也是一个很成功的广告，我看见很多人吵着要下载那段抽风的音乐作为手机铃声，但是我绝对不会去喝一口那种饮料，我怕晚上会做噩梦，然后再一脚把被子给踢到床底下去&amp;hellip;&amp;hellip;&lt;/p></description></item><item><title>冰箱里的灯</title><link>https://sbabybird.github.io/p/%E5%86%B0%E7%AE%B1%E9%87%8C%E7%9A%84%E7%81%AF/</link><pubDate>Mon, 18 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%86%B0%E7%AE%B1%E9%87%8C%E7%9A%84%E7%81%AF/</guid><description>&lt;p>你问：“把大象关冰箱里共分几步？”&lt;/p>
&lt;p>答：“分三步，把冰箱门打开，把大象放进去，把冰箱门带上”。&lt;/p>
&lt;p>你又问：“可是把大象关进去之后里面黑乎乎的大象不害怕吗？”&lt;/p>
&lt;p>反问：“你怎么知道关上之后里面还是黑乎乎的？你确定关上门之后那个灯灭了吗？”&lt;/p>
&lt;p>你：“~~~~~~”&lt;/p>
&lt;p>这个问题曾经也困扰我很久，因为冰箱的门只要一打开那个灯就亮起来，可是关上门之后你又看不到里面，所以还是不能确定里面到底是什么情况。&lt;/p>
&lt;p>听说国外曾经有人为这事儿想不开去自杀，更有人为此急得抓耳挠腮夜里都睡不着觉，直到他把冰箱的门上凿了个洞，看清了原来关上冰箱门后那个小灯真的灭了，这才安稳的睡去（估计这哥们是一环保人士，担心那灯太费电）。&lt;/p>
&lt;p>我没像那位牛人那样的使用暴力，但也自有办法。当然了，作为一个正常人，去探讨冰箱里的灯到底关了没有，这种做法实在是有些偏执（这不神经病吗！），你就姑且看作我是好奇心使然吧。&lt;/p>
&lt;p>反正，我的冰箱刚弄回来的时候我还真就动用了高科技手段&amp;ndash;拍照手机，我那手机带了个 30W 像素的鸡肋摄像头这下派上用场了。也是分了三步，把冰箱门打开，把手机定了时（定时 10 秒后拍摄）放进去，再把门带上。&lt;/p>
&lt;p>心中默念，时间到，开门取出，查看照片，出现了不可思议的结果！照片里那个灯竟然还亮着！再试一次，还是亮着。&lt;/p>
&lt;p>我那叫一个晕，觉得被冰箱厂家给忽悠了，口口声声说节能，这得多耗不少电呐。&lt;/p>
&lt;p>在仔细阅读了两遍说明书之后，总算恍然大悟，原来那不是普通的灯，它不仅仅担任了照明的工作（难道还用来制冷啊？），还兼具杀菌的功效，在关上门之后，它再持续照射几分钟食物，起到杀菌抑菌的效果。哦，原来如此，人家陈老师说了：“人不能无聊到这种地步！”&lt;/p></description></item><item><title>灭蚊记</title><link>https://sbabybird.github.io/p/%E7%81%AD%E8%9A%8A%E8%AE%B0/</link><pubDate>Sun, 17 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E7%81%AD%E8%9A%8A%E8%AE%B0/</guid><description>&lt;p>又到了蚊子最猖獗的季节了，现在每晚都有蚊子在我耳边盘旋，嗡嗡的声音若隐若现，让我神经高度紧张，却又懒得起来招呼它们，无奈，硬着头皮睡去。&lt;/p>
&lt;p>第二天胳膊腿上到处都是蚊子们留下的吻痕&amp;ndash;小红疙瘩，奇痒难忍。我发飙了，对付蚊子，我要开始行动！刚开始我采用的是防守战略，听说食用葱姜蒜可以使皮肤排出的汗味具有天然的驱蚊效果，本想采用此方法，但是吃了大蒜那味儿我更受不了只得放弃。&lt;/p>
&lt;p>还是在洗澡的时候多放点花露水吧，“六神特效驱蚊花露水”据说效果很好，洗完澡往身上狂撒，安静的躺在床上，等待蚊子飘然而来再飘然而去。&lt;/p>
&lt;p>结果，效果欠佳，蚊子依然如故的为我唱着催眠曲，而且我还被花露水熏得神清气爽、失眠健忘。&lt;/p>
&lt;p>防守看来不行，改变战略。&lt;/p>
&lt;p>男人！就要对别人狠一些！对付蚊子也不例外！&lt;/p>
&lt;p>狂奔去超市，买来“枪手”喷雾剂、“睡得香”电蚊香、电蚊拍、紫外光灭蚊灯等等，我要发起进攻了！&lt;/p>
&lt;p>晚饭毕，拿起“枪手”对卧室一通疯狂扫射，再将蚊香点燃，整个房间烟雾弥漫，关紧房门，外面客厅里的灭蚊灯发出幽幽的清华紫光。&lt;/p>
&lt;p>这下蚊子们彻底的玩完儿了，对不起了诸位，我已经够瘦弱了，您就给我留点儿血吧。&lt;/p>
&lt;p>沐浴后，推开卧室门，兴冲冲准备打扫战场，刚推开门我就被呛得眼泪鼻涕都下来了（我刚才喷的不是催泪瓦斯吧），蚊子倒是没有了，只是这屋里也不能待了（已经感觉呼吸困难了），无奈只有掐灭蚊香，打开窗户，终于，新鲜的空气伴随着新鲜的蚊子又进来了。&lt;/p>
&lt;p>灭蚊灯、灭蚊拍也收效甚微。灭蚊战争暂告一段落，蚊子暂时领先。&lt;/p>
&lt;p>先这样吧，实在不行就拿手拍吧，要是懒得拍就猛开空调把他们冻死，再或者，如果我的反应足够灵敏的话，我就在它们叮我的那一刹那，暗运内力把它们的嘴夹在肌肉里，我憋死它们！&lt;/p></description></item><item><title>自然醒</title><link>https://sbabybird.github.io/p/%E8%87%AA%E7%84%B6%E9%86%92/</link><pubDate>Sat, 16 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%87%AA%E7%84%B6%E9%86%92/</guid><description>&lt;p>如果有那么一天，我在沙滩上走着，突然从沙子里踢出一个神灯，我擦了三下，彭！的一声窜出一个魔鬼，对我龇牙咧嘴，非得满足我三个愿望。&lt;/p>
&lt;p>那么，我会许什么愿呢？我不会像周星驰那样无耻，许完了两个愿望后最后一个愿望竟是再要三个愿望。&lt;/p>
&lt;p>我想我也应该不那么自私，我会把头两个愿望交给公益事业，比如世界和平、环境保护啥的，然后留一个愿望给自己，那就是&amp;ndash;我想睡个自然醒。&lt;/p>
&lt;p>自从告别了自在潇洒的大学生活，参加工作以后，我就没有睡够过，也不是完全没有时间睡觉，而是能有机会睡懒觉的时候我都睡不着。&lt;/p>
&lt;p>在一周里里面，工作日期间肯定没睡懒觉的可能，一大早就狂奔到车站去挤车了，晚上又很晚才睡，所以这期间是十分缺觉的。&lt;/p>
&lt;p>只有周末的早晨才能有机会赖在床上，可是问题来了，周末的早晨我倍儿精神！平日里闹钟响了还想把它摁掉再小睡一会儿，可一旦到了周末，我往往比闹钟醒的还早，而且再也睡不着。&lt;/p>
&lt;p>这是为什么呢，苦苦思索之后，得到答案：周末是属于我自己的自由时间而且很短暂，我不舍的拿这点儿宝贵时间来睡觉！&lt;/p>
&lt;p>平时没时间干的我只有等到周末了，平时听不了音乐就周末抱着音响使劲儿听，平时没时间弹琴就等到周末抱着电子琴使劲儿得瑟，平时没时间摄影等到周末就溜达出去一通狂拍&amp;hellip;&amp;hellip;等等，有这些个好事儿等着我，我就算是想睡也真就睡不着了。   所以，我也不祈求啥别的太奢侈的事儿，就让我睡个自然醒吧。&lt;/p></description></item><item><title>老婆回家的第七天</title><link>https://sbabybird.github.io/p/%E8%80%81%E5%A9%86%E5%9B%9E%E5%AE%B6%E7%9A%84%E7%AC%AC%E4%B8%83%E5%A4%A9/</link><pubDate>Fri, 15 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E8%80%81%E5%A9%86%E5%9B%9E%E5%AE%B6%E7%9A%84%E7%AC%AC%E4%B8%83%E5%A4%A9/</guid><description>&lt;p>老家那边有些事儿需要老婆回去处理一下，用不了几天，可是转眼已经一个周过去了，据说还需要再呆几天才能回北京来。&lt;/p>
&lt;p>哎！郁闷呐！按照道理来说，作为一个正常的男人如果老婆回了娘家，那他应该感到万分的高兴才是（我曾经有个同事，从来都不吭声，结果有一次哼了一整天的小曲儿，一问才知道，人家老婆大人回娘家去了）。&lt;/p>
&lt;p>高兴是高兴，可是晚饭没有着落了，眼看着冰箱里的东西被我一点点地吃光了，就连平时不爱吃的饺子也在前天被我从冰箱的最底层翻了出来。&lt;/p>
&lt;p>家里实在没吃的那就在外面吃吧，昨晚上刚好有饭局，不吃白不吃啊，结果上当了，几个哥们儿都是贪杯的主儿，白的喝完换啤的，啤的喝完换冰的，一直喝到丧心病狂&amp;hellip;&amp;hellip;饭还没吃上几口。&lt;/p>
&lt;p>搞得今天蔫了吧唧不说，还浑身上火，鼻炎发作，咽炎发作，苦不堪言。&lt;/p>
&lt;p>站起来，叹了口气，转身就看到洗衣机里的衣服也快堆成小山了，都说能把袜子按颜色分类的男人和把袜子随便乱扔的男人是两种不同的生物，我显然是属于后者，看来只有等到周末统一解决了。&lt;/p></description></item><item><title>抽考</title><link>https://sbabybird.github.io/p/%E6%8A%BD%E8%80%83/</link><pubDate>Thu, 14 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%8A%BD%E8%80%83/</guid><description>&lt;p>   高考刚过，每年的这个时候都会有一大帮人在哪儿声泪俱下的控诉这万恶的高考制度。&lt;/p>
&lt;p>我也讨厌高考，但是在我的记忆里，另一种考试制度更令我恶心，那就是&amp;mdash;-抽考！&lt;/p>
&lt;p>在我上小学的时后，比较害怕的就是考试了，但最让我感到不安的是每个班级选拔“尖子生”的过程。&lt;/p>
&lt;p>那个时候每到期末每个班级总是抽出学习成绩最好的几个同学参加镇上的抽考，他们的考试成绩直接代表了整个班级的学习成绩，也代表了老师的教学水平。&lt;/p>
&lt;p>私下里大家管抽到的这些学生叫“尖子生”。&lt;/p>
&lt;p>从小学到初中我几乎一路是“尖子生”，至于为什么要有“尖子生”，这样考试有什么意义我就不去想了，只知道如果被老师抽到当“尖子生”就全家开心，我在家也可以放肆一些，万一抽不到就没人给我好脸色。&lt;/p>
&lt;p>好在屡次的抽考过程中我只有两次没有被选中，不知是幸运还是不幸。&lt;/p>
&lt;p>其中一次是在小学二年级的时候，虽然没有被选中，但是也参加了考试（数学替考），当时我的情况是语文极差但数学很好（至少比那些“尖子”要好一些），老师为了他们的荣誉，便让我替另外一个考生参加了数学考试，试卷虽然是我答的却不能填写我的名字。&lt;/p>
&lt;p>好在当时也没什么自尊心，也就爽快的答应了，现在想一想作为老师也太不应该了。（这也是我后来虽念了师范却最终没有选择做老师的原因之一）。&lt;/p>
&lt;p>到后来就越来越抵制这种虚伪的考试，大概是四年级，我越来越贪玩，成绩真的不行了，要期末考试了，老师们纷纷挑选“尖子”，刚开始还被提名，后来经过多层过滤，勉强坚持到了最后一轮评测，直到我们伟大的辛勤的园丁说：“好了，那谁，你回去吧，其他人留下”。&lt;/p>
&lt;p>于是我提着书包灰溜溜回家，心里却说不出的高兴，不用去参加 TMD 关系到班集体荣誉的考试了！爽！哼哼，我冷笑，冷笑。现在回忆起来，脑子里仍旧充斥着老师们那因为贪图班级的名次而扭曲的面容（这就是原因之二）。&lt;/p>
&lt;p>不知道现在怎么样了，在当时，这样的考试制度，它伤了太多太多孩子的心。ps：今日饮酒过渡沉醉不知归路兴尽打车走误入小区深处呕吐、呕吐引来保安无数！&lt;/p></description></item><item><title>天气预报</title><link>https://sbabybird.github.io/p/%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/</link><pubDate>Wed, 13 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/</guid><description>&lt;p>早晨，NB 烘烘的中国移动给我发天气预报说是阴转多云，在分析了昨晚电视上的预报加上收音机告诉我的降水概率后，我确定今天不会下雨，然后非常自信的没带伞就上班了,虽然头上的天阴的要滴水似的。&lt;/p>
&lt;p>谁知现在的天气预报已经不准确到让人发指的地步了！从下车到家的那段路程我只好雨中快步了（跑啊）。&lt;/p>
&lt;p>不是说现在计算机运算速度越来越快了吗？&lt;/p>
&lt;p>不是说建立的数据模型越来越接近真实了吗？&lt;/p>
&lt;p>不是说那什么风云 N 号也升空了吗？&lt;/p>
&lt;p>嗯？！忽悠谁啊！&lt;/p>
&lt;p>上次就报给我说最近西伯利亚那边有情况，未来几天有大风降温的天气，搞得我捂了一身痱子！现在到处是天气预报，各大网站上有，报纸上有，QQ 上有，收音机、电视就更有了，而且还花样儿繁多，一会儿是穿衣指数，一会儿又洗车指数，最后还忽悠你个降水概率，有雨就有雨没雨就没雨，整个指数百分之 60 鬼才知道到底要不要下！&lt;/p>
&lt;p>当然了，他们有预报准确的时候，那就是对局部地区的天气预报，反正局部地区天天要下雨甚至还有短时间的雷雨大风等强对流天气。&lt;/p>
&lt;p>我妈就曾经十分关切的问我：“为什么局部地区天天下雨，这个地区到底在哪儿？住在那儿的人可怎么活哟！”&lt;/p>
&lt;p>算啦，也不跟他们计较，我还是回去翻翻小学的语文课本，好好拜读一下里面的那篇《看云识天气》，以后再也不相信这 GR 的天气预报了！&lt;/p>
&lt;p>慢着，突然想起了倪萍大婶子曾经在“综艺大观”上做的即兴方言版天气预报，啧啧，那叫一个准啊！&lt;/p>
&lt;p>“社员同志们注意啦，哈。这个山东省荣成县寨子沟公社刘家村广播站现在开始播送天气预报，哈。这个明天头半晌儿阴有小雨儿，后半晌儿就变天了。南风转西北风 7-8 级。这个凄凄沥沥的小雨儿夹着嗖嗖的西北风，今儿刮，明儿刮儿，后儿还刮，一直刮到下个星期六，哈。这个咱再接着说天气预报。这个西北风一刮，这回最大的特点就是龙卷风，龙卷风啊，粮食要最重&amp;hellip;.”  &lt;/p></description></item><item><title>小王</title><link>https://sbabybird.github.io/p/%E5%B0%8F%E7%8E%8B/</link><pubDate>Tue, 12 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E5%B0%8F%E7%8E%8B/</guid><description>&lt;p>初来北京的时候，家里托着亲戚的亲戚的关系让我在一家单位实习，就像鲁迅小说里写的那样，掌柜的是一副凶脸孔，主顾也没有好声气。&lt;/p>
&lt;p>那时我一个人住在前门外大栅栏里的一家小旅馆里。&lt;/p>
&lt;p>我住的胡同往北走几步一拐就是北京著名的“大栅栏步行街”，那儿有着浓厚的京味儿，经常看到成群的外国鬼子。&lt;/p>
&lt;p>他们不停的拍照，吃小吃，买工艺品，所以这里一天到晚人山人海热闹非凡。有时候我也去转转，只是转转，并不买东西，那些让老外一看见就双眼冒光的玩意儿对我并没有多大吸引力。&lt;/p>
&lt;p>小王，我住的旅店里的服务员，瘦瘦的，头戴一顶鸭舌帽，手腕上戴了一只便宜手表。&lt;/p>
&lt;p>一天下午，我一个人站在楼顶上特别无聊，正好小王上来，我递给他一根“中南海”&lt;/p>
&lt;p>他笑笑接住说：“一个人在外无聊吧？”&lt;/p>
&lt;p>我说：“是”他说“那我就给你讲讲这一片儿的故事吧！”&lt;/p>
&lt;p>于是他就趴在栏杆上给我说了一通关于这个胡同的故事，说了这一带在清朝是曾经全是窑子。&lt;/p>
&lt;p>他抽了不少烟，我说“中南海这烟太冲了这边有没有柔和一点儿的烟？”&lt;/p>
&lt;p>他想了想说：“我抽的都是便宜烟，恩，不过便宜好抽就行&amp;hellip;”&lt;/p>
&lt;p>他给我说了两种。我到了晚上买来抽了几支觉得不好抽（那时我还不怎么抽烟）就都送给他了。&lt;/p>
&lt;p>以后就时常在一起谈天，混得很熟了，他经常早早的就把我的暖壶打满开水给提上来。&lt;/p>
&lt;p>只是又过了两三天，我一直也没见到小王，一问店老板才知道：“他回老家了，他是离家出走才来到这个小店的，没钱了，才在这儿打工，不求挣钱只要有吃有睡就行，前两天他哥哥找到这里就把他带回去了。”&lt;/p>
&lt;p>老板很惋惜：“多好的孩子呀！”&lt;/p></description></item><item><title>早晨的阳光真是灿烂</title><link>https://sbabybird.github.io/p/%E6%97%A9%E6%99%A8%E7%9A%84%E9%98%B3%E5%85%89%E7%9C%9F%E6%98%AF%E7%81%BF%E7%83%82/</link><pubDate>Mon, 11 Jun 2007 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%97%A9%E6%99%A8%E7%9A%84%E9%98%B3%E5%85%89%E7%9C%9F%E6%98%AF%E7%81%BF%E7%83%82/</guid><description>&lt;p>早晨的阳光真灿烂，虽然天气湿热有点儿桑拿天的苗头，但是我的心情很好，阳光洒在我的工作服上像是镶了金边，很是耀眼。&lt;/p>
&lt;p>对了，我是一个环卫工人，每天早晨都要在这儿清扫垃圾，这个工作是很神圣的，至少我这么认为，虽然和小时候的梦想（艺术家）差得很远，但是用某位相声演员的话说“这是一样一样一样的啊”！&lt;/p>
&lt;p>我愉快地拿起扫把，自在地吹着口哨，再把这条街扫完就可以收工了。&lt;/p>
&lt;p>我不由得加快了速度挥舞着扫把就像一个画家挥舞着手中的画笔，我气沉丹田暗用内力，短小的扫把被我使得是呼呼生风，卷起的沙尘就像一层薄雾。&lt;/p>
&lt;p>这个时候你出现了，挎着小包，下了公共汽车，高跟鞋踩在平坦的人行道上发出清脆的得得响，你的小手微微举起遮住当前还不算猛烈的太阳。真漂亮啊！我暗自赞道。&lt;/p>
&lt;p>上学时很不努力导致我的眼神儿非常好，我想，在工作时看到美女也算是一种福利吧！&lt;/p>
&lt;p>看着你向我走来，越走越近，不知是热的还是累得，我的手心开始出汗，我攥紧了扫把更卖力的扫了起来，地上的落叶伴随着纸片在沙尘中轻轻飞舞。&lt;/p>
&lt;p>你终于走到我的身边，冲我使劲的挥手，这么近的距离我终于看清了你的眼睛，很大、很圆，长长的睫毛。&lt;/p>
&lt;p>你竟然停下了脚步，盯住我迷离的眼神和唏嘘的胡茬，我期盼着你能给我说些什么，虽然黑夜给了你黑色的眼睛，但你却翻了个白眼儿给我：“你就不能轻点儿扫吗！还让不让人走路了！”。&lt;/p></description></item><item><title>Links</title><link>https://sbabybird.github.io/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/links/</guid><description>&lt;p>To use this feature, add &lt;code>links&lt;/code> section to frontmatter.&lt;/p>
&lt;p>This page&amp;rsquo;s frontmatter:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">links&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub is the world&amp;#39;s largest software development platform.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">website&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TypeScript&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">website&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://www.typescriptlang.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ts-logo-128.jpg&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>image&lt;/code> field accepts both local and external images.&lt;/p></description></item><item><title>Search</title><link>https://sbabybird.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/search/</guid><description/></item></channel></rss>