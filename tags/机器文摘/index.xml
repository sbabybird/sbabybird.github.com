<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>机器文摘 on Learning &amp; Writing！</title><link>https://sbabybird.github.io/tags/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98/</link><description>Recent content in 机器文摘 on Learning &amp; Writing！</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 19 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sbabybird.github.io/tags/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98/index.xml" rel="self" type="application/rss+xml"/><item><title>机器文摘 第 153 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/</link><pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-07-48.png" alt="Featured image of post 机器文摘 第 153 期" />&lt;h1 id="机器文摘-第-153-期">机器文摘 第 153 期
&lt;/h1>&lt;h3 id="电饭锅传数据">电饭锅传数据
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-06-50.png"
width="497"
height="864"
loading="lazy"
class="gallery-image"
data-flex-grow="57"
data-flex-basis="138px"
>
最近流传一个待证实的传说，使用电饭锅可以助力两台手机设备之间数据传输的速度（主要用于新机迁移时）。&lt;/p>
&lt;p>推测是电饭锅内胆的金属产生了“法拉第笼”效应，屏蔽了外界信号干扰，提升了手机信号强度？&lt;/p>
&lt;p>我没有做测试的条件，目前还在怀疑中。&lt;/p>
&lt;p>但第一个想到这个点子的人，当时是什么精神状态？&lt;/p>
&lt;p>具体讨论来自这个推：https://x.com/skaas777/status/1977201633256726833&lt;/p>
&lt;h3 id="信息安全专家张云海的墓碑">信息安全专家张云海的墓碑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-07-23.png"
width="690"
height="1166"
loading="lazy"
class="gallery-image"
data-flex-grow="59"
data-flex-basis="142px"
>
张云海（1979-2025）是绿盟科技天机实验室的负责人，该实验室专注于漏洞挖掘、分析与利用技术研究。&lt;/p>
&lt;p>其研究领域包括操作系统、应用软件、基础组件以及安全防御与对抗技术等，并致力于挖掘和分析漏洞，曾获得微软缓解绕过赏金计划奖励。&lt;/p>
&lt;p>近期有网友发出了其墓碑照片，碑文为一段汇编代码。&lt;/p>
&lt;p>这段代码结合了汇编语言和幽默元素，以一种风趣的方式描述了一个人在家庭、社会和技术领域的多重角色。&lt;/p>
&lt;p>同时通过模拟汇编语言的执行流程，表达了对生活的总结：从出生（程序启动）到承担角色（函数调用），再到最终离开（程序退出）。&lt;/p>
&lt;h3 id="基于终端的-word-文件预览工具">基于终端的 word 文件预览工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-07-48.png"
width="690"
height="590"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="280px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/bgreenwell/doxx" target="_blank" rel="noopener"
>doxx&lt;/a>，用于 Word 文件的快速终端原生文档查看器。查看、搜索和导出 .docx 文档，而无需离开命令行。&lt;/p>
&lt;p>支持图片、文本颜色、表格、公式等富文本信息显示。 ​​​&lt;/p>
&lt;h3 id="用于-llm-私有部署的负载均衡平台">用于 LLM 私有部署的负载均衡平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-07-58.png"
width="690"
height="310"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="534px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/intentee/paddler" target="_blank" rel="noopener"
>Paddler&lt;/a> 是一个开源的 LLM 负载均衡器和服务平台。它允许您在自己的基础架构上运行推理、部署和扩展 LLM，从而提供卓越的开发者体验。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>通过内置的 llama.cpp 引擎进行推理&lt;/li>
&lt;li>LLM 特定的负载平衡&lt;/li>
&lt;li>通过可动态添加的代理工作，允许与自动缩放工具集成&lt;/li>
&lt;li>请求缓冲，支持从零主机扩展&lt;/li>
&lt;li>动态模型交换&lt;/li>
&lt;li>内置 Web 管理面板，用于管理、监控和测试&lt;/li>
&lt;/ul>
&lt;h3 id="基于-rust-的-llm-学习项目">基于 Rust 的 LLM 学习项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-08-37.png"
width="693"
height="467"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/karpathy/nanochat" target="_blank" rel="noopener"
>nanochat&lt;/a>，不到 8000 行代码，完整实现了从训练到推理的 LLM 全流程。&lt;/p>
&lt;p>项目主要特点：&lt;/p>
&lt;ul>
&lt;li>用 Rust 实现了高效的 tokenizer 训练&lt;/li>
&lt;li>在 FineWeb 语料上预训练 Transformer LLM，并多维度评估核心指标&lt;/li>
&lt;li>中期训练结合用户-助手对话、选择题、工具调用等多样任务&lt;/li>
&lt;li>监督微调（SFT）后，模型在多项世界知识（ARC-E/C、MMLU）、数学（GSM8K）、代码（HumanEval）测试中表现优异&lt;/li>
&lt;li>可选用“GRPO”算法进行强化学习（RL），提升数学题解答能力&lt;/li>
&lt;li>轻量化推理引擎支持 KV 缓存、简单预填充/解码，集成 Python 沙箱工具，同时提供 CLI 和类 ChatGPT 网页 UI&lt;/li>
&lt;li>生成统一的 Markdown 报告，方便总结、打分和游戏化体验&lt;/li>
&lt;/ul>
&lt;h3 id="shell-脚本的-lisp-解释器">Shell 脚本的 Lisp 解释器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-153-%E6%9C%9F/2025-10-19-09-09-51.png"
width="536"
height="640"
loading="lazy"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="201px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/gue-ni/redstart" target="_blank" rel="noopener"
>Redstart&lt;/a>，是一个用 C++ 编写的轻量级 Lisp 解释器，专注于 Shell 脚本编写。它能够将 Lisp 的强大表达能力与 Unix Shell 的实用性相结合：您可以运行命令、捕获输出、在进程之间进行管道传输，同时仍然使用 Lisp 语法进行逻辑和结构编写。您可以将其视为用 Lisp 而不是 Bash 编写 Shell 脚本。&lt;/p>
&lt;p>有了这个，可以使用 Lisp 语言编写 Linux 的 Shell 脚本了。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 152 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/</link><pubDate>Sun, 12 Oct 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/2025-10-12-08-23-29.png" alt="Featured image of post 机器文摘 第 152 期" />&lt;h1 id="机器文摘-第-152-期">机器文摘 第 152 期
&lt;/h1>&lt;h3 id="构建逆向工程专用浏览器">构建逆向工程专用浏览器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/2025-10-12-08-22-46.png"
width="690"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://nullpt.rs/reverse-engineering-browser" target="_blank" rel="noopener"
>reverse-engineering-browser&lt;/a>，作者详细记录了从简单浏览器扩展到分叉Chromium内核的完整历程，实现了隐身hook机制和高级逆向工程功能。&lt;/p>
&lt;blockquote>
&lt;p>在AI蓬勃发展的时代，我的心仍然专注于AST转换、浏览器指纹识别和反机器人技术。但我的工作流程总是感觉很原始，需要手动筛选页面脚本、粘贴可疑片段到编辑器中，手工编写去混淆器。虽然有Webcrack和deobfuscate.io等工具，但端到端流程仍然缓慢且手动化。&lt;/p>
&lt;/blockquote>
&lt;p>核心要点:&lt;/p>
&lt;ul>
&lt;li>从浏览器扩展到Chromium分叉的演进过程&lt;/li>
&lt;li>解决内容脚本隔离、OOPIF、toString检测等技术挑战&lt;/li>
&lt;li>实现隐身hook机制绕过反检测措施&lt;/li>
&lt;li>集成去混淆、函数覆盖、指纹识别等高级功能&lt;/li>
&lt;/ul>
&lt;p>技术细节:&lt;/p>
&lt;ul>
&lt;li>Chrome DevTools Protocol (CDP) 的高级应用&lt;/li>
&lt;li>自定义Chromium内核和CDP域开发&lt;/li>
&lt;li>OOPIF (Origin-Isolated iframes) 绕过技术&lt;/li>
&lt;li>多层toString方法修补技术&lt;/li>
&lt;/ul>
&lt;p>实际应用:&lt;/p>
&lt;ul>
&lt;li>TikTok网站的数据收集分析&lt;/li>
&lt;li>Cloudflare Turnstile绕过&lt;/li>
&lt;li>FingerprintJS指纹捕获&lt;/li>
&lt;li>Canvas/WebGL指纹识别&lt;/li>
&lt;/ul>
&lt;h3 id="上手-qwen3-vl-的教程">上手 Qwen3-VL 的教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/2025-10-12-08-23-11.png"
width="982"
height="605"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/QwenLM/Qwen3-VL/tree/main/cookbooks" target="_blank" rel="noopener"
>Qwen3-VL cookbooks&lt;/a>，阿里官方的一套练习使用 Qwen3-VL 的教程。&lt;/p>
&lt;p>教程示例功能包括：
图文思维，看图推理，比如解题&lt;/p>
&lt;p>还有计算机操作智能体、多模态编程、全场景识别、文档解析、精准目标定位、通用OCR及关键信息提取、3D定位、长文档理解、空间推理、移动端智能体、视频理解等。&lt;/p>
&lt;h3 id="在网页里完美复刻红警2的故事">在网页里完美复刻红警2的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/2025-10-12-08-23-29.png"
width="690"
height="517"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/1959574914458711924" target="_blank" rel="noopener"
>没有源代码，他用5年时间把红警2给重写了&lt;/a>，一个国外小哥在没有源码的情况下，使用 ts 重写了 红警2 。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.ra2web.com/" target="_blank" rel="noopener"
>进入这个网址可以直接玩&lt;/a>，我试了一下，体验非常牛逼。&lt;/p>
&lt;h3 id="在线收听放松背景音">在线收听放松背景音
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/2025-10-12-08-23-55.png"
width="690"
height="565"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="293px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pease.day/" target="_blank" rel="noopener"
>pease&lt;/a> 是一个极简的环境音混音器（Ambient Sound Mixer），可以自由混合雨声、海浪、风声、咖啡厅、篝火、钢琴等 12 种自然声音，帮助你在工作、学习、冥想或睡眠时进入平静和专注的状态。&lt;/p>
&lt;p>特色亮点：
• 🎛️ 自由混音：支持多音源叠加与音量独立调节
• 💾 PWA 支持：安装后可离线使用
• 🎨 毛玻璃界面：深浅色主题自适应
• ⏱️ 定时功能：可设置播放时长
• 🔗 分享配置：可生成分享链接，传递你的专属混音&lt;/p>
&lt;h3 id="微软出品的研发智能体">微软出品的研发智能体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-152-%E6%9C%9F/2025-10-12-08-24-21.png"
width="823"
height="360"
loading="lazy"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="548px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/RD-Agent" target="_blank" rel="noopener"
>RD-Agent&lt;/a>，一个让 AI 能够自己做科研的系统——能提出问题、设计实验、验证结果、总结规律，整套科研流程都能自动化执行。&lt;/p>
&lt;blockquote>
&lt;p>研发 (R&amp;amp;D) 对于提升工业生产力至关重要，尤其是在人工智能时代，研发的核心主要集中在数据和模型上。我们致力于通过 R&amp;amp;D-Agent 实现这些高价值通用研发流程的自动化，让 AI 驱动数据驱动的 AI。&lt;/p>
&lt;/blockquote>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 151 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/</link><pubDate>Sun, 05 Oct 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/2025-10-05-10-44-53.png" alt="Featured image of post 机器文摘 第 151 期" />&lt;h1 id="机器文摘-第-151-期">机器文摘 第 151 期
&lt;/h1>&lt;h3 id="在地址栏玩贪食蛇">在地址栏玩贪食蛇
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/2025-10-05-10-43-26.png"
width="525"
height="199"
loading="lazy"
class="gallery-image"
data-flex-grow="263"
data-flex-basis="633px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://demian.ferrei.ro/[paused]" target="_blank" rel="noopener"
>snake&lt;/a> 这个网址点进去可以让你在浏览器的 URL 地址栏里玩贪食蛇游戏。&lt;/p>
&lt;p>通过定时器用 JS 实时更新地址栏的字符实现的效果：） ​​​&lt;/p>
&lt;h3 id="在线gpu性能测试">在线GPU性能测试
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/2025-10-05-10-43-45.png"
width="690"
height="493"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>
&lt;a class="link" href="https://www.volumeshader.dev/" target="_blank" rel="noopener"
>Volume Shader BM 在线GPU性能测试工具&lt;/a>&lt;/p>
&lt;p>这个网站是一个在线GPU性能测试工具，通过3D体积渲染来检测显卡性能。&lt;/p>
&lt;p>Volume Shader BM 网站主要用于测试和评估你电脑显卡（GPU）的3D渲染性能。它的核心功能包括：&lt;/p>
&lt;ul>
&lt;li>WebGL 体积渲染：直接在浏览器里运行3D体积着色器（volume shader）渲染，无需下载安装任何软件。&lt;/li>
&lt;li>实时性能数据：测试过程中会显示实时的帧率（FPS）、帧时间和显卡利用率等性能指标。&lt;/li>
&lt;li>跨平台支持：支持 Windows、macOS 和 Linux，只要浏览器支持 WebGL 就能用。&lt;/li>
&lt;li>结果导出与分享：测试完成后可以导出和分享你的显卡测试结果。&lt;/li>
&lt;/ul>
&lt;p>使用方法很简单：&lt;/p>
&lt;ol>
&lt;li>点击“Start GPU Test”按钮开始测试。&lt;/li>
&lt;li>浏览器会实时渲染3D体积效果，同时检测你的显卡性能。&lt;/li>
&lt;li>测试结束后可以查看详细的性能数据。&lt;/li>
&lt;/ol>
&lt;p>这个工具适合想要了解自己电脑显卡3D渲染能力、对比不同设备性能，或者开发者需要测试WebGL渲染效果的人群。&lt;/p>
&lt;h3 id="网页版视频字幕编辑工具">网页版视频字幕编辑工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/2025-10-05-10-43-59.png"
width="690"
height="467"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/x007xyz/flycut-caption" target="_blank" rel="noopener"
>FlyCutCaption&lt;/a> 纯前端实现的视频字幕编辑工具，支持字幕裁剪视频，视频字幕合成&lt;/p>
&lt;p>🎯 核心功能：&lt;/p>
&lt;ul>
&lt;li>🎤 智能语音识别：基于 Whisper 模型的高精度语音转文字，支持多种语言&lt;/li>
&lt;li>✂️ 可视化字幕编辑：直观的字幕片段选择和删除界面&lt;/li>
&lt;li>🎬 实时视频预览：与字幕同步的视频播放器，支持区间播放&lt;/li>
&lt;li>📤 多格式导出：支持 SRT、JSON 字幕格式以及视频文件导出&lt;/li>
&lt;li>🎨 字幕样式定制：自定义字幕字体、颜色、位置等样式&lt;/li>
&lt;li>🌐 国际化支持：组件化国际化设计，支持中文、英文、自定义语言包（如日语示例）&lt;/li>
&lt;li>🔧 技术特色&lt;/li>
&lt;li>⚡ 现代化技术栈：React 19 + TypeScript + Vite + Tailwind CSS&lt;/li>
&lt;li>🧠 本地 AI 处理：使用 Hugging Face Transformers.js 在浏览器本地运行 AI 模型&lt;/li>
&lt;li>🎯 Web Workers：ASR 处理在后台线程运行，不阻塞主界面&lt;/li>
&lt;li>📱 响应式设计：适配不同屏幕尺寸的现代化界面&lt;/li>
&lt;li>🎪 组件化架构：模块化设计，易于维护和扩展&lt;/li>
&lt;/ul>
&lt;h3 id="在我的世界构建一个-gpt">在“我的世界”构建一个 GPT
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/2025-10-05-10-44-53.png"
width="1000"
height="566"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>
油管视频博主&lt;a class="link" href="https://www.youtube.com/watch?v=VaeI9YgE1o8" target="_blank" rel="noopener"
>sammyuri&lt;/a>在游戏“我的世界”里通过红石系统构建了一个“chatGPT”。&lt;/p>
&lt;blockquote>
&lt;p>该模型拥有 5,087,280 个参数，使用 Python 在 TinyChat 基本英语对话数据集上进行训练。其嵌入维度为 240，词汇量为 1920 个 token，由 6 层组成。上下文窗口大小为 64 个 token，足以应对（非常）短的对话。大多数权重被量化为 8 位，但嵌入和 LayerNorm 权重分别以 18 位和 24 位存储。量化后的权重链接如下；它们被拆分成数百个文件，与构建过程中 ROM 的各个部分相对应。&lt;/p>
&lt;p>该建筑的体积为 1020x260x1656 方块。由于其巨大的体积，使用了 Distant Horizo​​ns 模组来拍摄整个建筑的画面；这导致远处的红石组件看起来很奇怪，因为它们的渲染细节较低。&lt;/p>
&lt;p>当使用 MCHPRS（Minecraft 高性能红石服务器）将滴答率提高到约 40,000 倍速度时，它可以在约 2 小时内产生响应。&lt;/p>
&lt;/blockquote>
&lt;h3 id="obs-跟随鼠标放大插件">OBS 跟随鼠标放大插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-151-%E6%9C%9F/2025-10-05-10-45-44.png"
width="1045"
height="746"
loading="lazy"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="336px"
>
&lt;a class="link" href="https://github.com/BlankSourceCode/obs-zoom-to-mouse" target="_blank" rel="noopener"
>OBS-Zoom-To-Mouse&lt;/a>，可让 OBS 自动跟随鼠标进行智能缩放。&lt;/p>
&lt;p>不仅能自动调整显示捕获源的缩放和位置，还支持一键缩放到鼠标位置，甚至能跟随鼠标的移动，同时有效避免画面抖动。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>一键缩放到当前鼠标位置，可自定义缩放倍数和动画速度；&lt;/li>
&lt;li>智能鼠标跟随模式，可设置跟随边界和锁定灵敏度；&lt;/li>
&lt;li>支持自动跟随和手动切换两种跟随方式；&lt;/li>
&lt;li>支持双机设置，可跟踪远程机器的鼠标位置；&lt;/li>
&lt;li>提供详细的手动位置设置，支持非显示捕获源。&lt;/li>
&lt;/ul>
&lt;p>兼容 Windows、Linux、macOS 三大平台，下载脚本文件导入到 OBS 即可使用。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 150 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/</link><pubDate>Sat, 27 Sep 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-35-53.png" alt="Featured image of post 机器文摘 第 150 期" />&lt;h1 id="机器文摘-第-150-期">机器文摘 第 150 期
&lt;/h1>&lt;h3 id="又一个私有云盘">又一个私有云盘
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-33-56.png"
width="952"
height="707"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://demo.foxel.cc/" target="_blank" rel="noopener"
>foxel&lt;/a>，为个人和团队提供高度可扩展的私有云存储解决方案，具有人工智能语义搜索功能。&lt;/p>
&lt;p>可以直接预览文件，支持图片、视频、PDF 等各种格式。&lt;/p>
&lt;p>完善的权限和分享功能，支持公开火私密分享链接给他人。&lt;/p>
&lt;p>通过 Docker 一键部署，简单配置一下即可使用，项目有提供了详细的安装教程。&lt;/p>
&lt;h3 id="基于-chrome-内核构建的高度隐私浏览器">基于 chrome 内核构建的高度隐私浏览器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-34-23.png"
width="805"
height="538"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://helium.computer/" target="_blank" rel="noopener"
>Helium&lt;/a>，氦气浏览器。高度注重隐私的浏览器。&lt;/p>
&lt;p>集成高效的广告拦截能力，追求极速、拒绝臃肿。&lt;/p>
&lt;p>目前仍在测试中。需要的可以下载试用。&lt;/p>
&lt;p>项目在 GitHub 开源：https://github.com/imputnet/helium&lt;/p>
&lt;h3 id="用于网页调试的-mcp">用于网页调试的 MCP
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-35-07.png"
width="537"
height="244"
loading="lazy"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="528px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ChromeDevTools/chrome-devtools-mcp" target="_blank" rel="noopener"
>chrome-devtools-mcp&lt;/a>，Chrome DevTools 推出了 MCP 并且代码已开源，可以直接让 AI 完成网页自动化测试、调试以及优化整套开发流程。&lt;/p>
&lt;p>能够自动进行网页导航、性能分析、截图调试等复杂操作，简化开发流程。&lt;/p>
&lt;p>可以模拟真人操作，比如页面点击、填写表单、元素拖拽等各种交互，可应用于自动化测试以及爬虫等场景。&lt;/p>
&lt;h3 id="极简-json-解析库">极简 JSON 解析库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-35-33.png"
width="657"
height="528"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/rxi/sj.h" target="_blank" rel="noopener"
>sj.h&lt;/a>，只有 150 行代码的 json 解析库，符合 c99 规范，极致轻量。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>仅约150行纯 C11 代码，极致轻量，零动态内存分配，状态占用极小&lt;/li>
&lt;li>精确错误定位，支持行列号提示，助力快速调试定位问题&lt;/li>
&lt;li>不含数字和字符串解析逻辑，strtod和unicode代理对由用户自定义，灵活度极高&lt;/li>
&lt;li>结构简单，便于集成，示例代码展示如何将 JSON 映射到自定义结构体，易于理解和扩展&lt;/li>
&lt;li>代码完全开源，Unlicense 许可，公共领域软件，无任何使用限制&lt;/li>
&lt;li>适合对性能和内存要求极高的场景，不依赖外部库，适合嵌入式、游戏引擎、系统工具等领域&lt;/li>
&lt;li>设计理念反直觉：舍弃繁重的全功能解析，专注核心解析需求，提升整体效率和可控性&lt;/li>
&lt;/ul>
&lt;h3 id="面向终端的创意编码环境">面向终端的创意编码环境
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-35-53.png"
width="721"
height="401"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>
&lt;a class="link" href="https://github.com/emprcl/runal" target="_blank" rel="noopener"
>runal&lt;/a>，面向终端的文本创意编程环境，赋予命令行艺术以全新生命。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>类似 processing 和 p5js，但所有渲染均以纯文本形式呈现，开启 ASCII 艺术与文本图形的无限可能&lt;/li>
&lt;li>支持 JavaScript 编写，内置 setup 和 draw 函数，实时监测脚本变动，无需重启即可动态更新画面&lt;/li>
&lt;li>提供键盘与鼠标事件响应接口（onKey、onMouseMove、onMouseClick 等），实现交互式文本创作&lt;/li>
&lt;li>同时支持 Go 包调用，方便集成到 Go 项目，满足多语言环境下的灵活开发需求&lt;/li>
&lt;li>轻量跨平台：Linux/macOS/Windows（推荐 Windows Terminal+Iosevka 字体），单文件运行或自定义编译均可&lt;/li>
&lt;/ul>
&lt;h2 id="想法">想法
&lt;/h2>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-150-%E6%9C%9F/2025-09-27-15-40-47.png"
width="690"
height="920"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>
经常需要提醒自己的是，世界还有很多精彩的未知。&lt;/p>
&lt;p>这并不代表着自己无知，而是未知里存在的那些精彩值得时常提醒。&lt;/p>
&lt;p>还有很多大门等待打开。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 149 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/</link><pubDate>Sun, 21 Sep 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-39-46.png" alt="Featured image of post 机器文摘 第 149 期" />&lt;h1 id="机器文摘-第-149-期">机器文摘 第 149 期
&lt;/h1>&lt;h3 id="怎样正确地浪费-cpu-资源">怎样“正确地”浪费 CPU 资源
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-39-03.png"
width="615"
height="373"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;p>还记得那个给甲方预先进行负优化的程序员段子，为了将来满足甲方的优化需求，提前让程序跑的特别慢，随着项目的推进再逐渐注释掉代码，程序性能“大幅提升”，深得甲方认可。&lt;/p>
&lt;p>然而，现在的编译器都有了比较完善的编译期优化技术，如果只是傻傻的写一些让 CPU 浪费时间的循环，很可能这段代码根本就不会被编译进去，直接被“优化”掉了。&lt;/p>
&lt;p>&lt;a class="link" href="https://mostlynerdless.de/blog/2025/09/19/how-to-waste-cpu-like-a-professional/" target="_blank" rel="noopener"
>《如何像专家一样“浪费”CPU资源》&lt;/a>，这篇文章通过一个“如何浪费CPU”的有趣问题，讲解了程序、编译器和操作系统之间的一些工作原理，比如系统调用、编译器优化等。&lt;/p>
&lt;p>想让CPU跑满的话，简单的写一个死循环很容易被现在的编译器给优化掉。为了解决代码被优化的问题，文章介绍了三种技巧：&lt;/p>
&lt;ol>
&lt;li>使用特定的编译器指令。&lt;/li>
&lt;li>访问一个volatile（易变）变量，告诉编译器这个值随时可能改变，不要优化。&lt;/li>
&lt;li>使用内联汇编代码。&lt;/li>
&lt;/ol>
&lt;p>以及，最优雅的方法：即使用“单调时钟”（monotonic clock）。这种方法既能精确计时，又能最大限度地减少系统调用，是实现CPU占用的最高效和最准确的方式。&lt;/p>
&lt;h3 id="rss-标准的故事">RSS 标准的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-39-22.png"
width="704"
height="333"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="507px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://buttondown.com/blog/rss-vs-ice" target="_blank" rel="noopener"
>RSS 标准是怎样干微软的&lt;/a>，这篇文章讲述了 RSS（简易信息聚合）如何在与微软等大厂支持的ICE（信息与内容交换）标准竞争中胜出的故事。&lt;/p>
&lt;p>文章通过对比Betamax与VHS（有人说是色情厂商的支持导致 VHS 胜出，但这还不是关键）的竞争，类比ICE与RSS的竞争，指出尽管ICE技术更先进、资金更雄厚，但RSS因其简单、开放、易用而最终胜出。&lt;/p>
&lt;p>开放的技术标准或格式总是更有力量和优势。&lt;/p>
&lt;h3 id="技术越无聊越好使">技术越无聊越好使
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-39-46.png"
width="657"
height="379"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="416px"
>
&lt;a class="link" href="https://jenson.org/boring/" target="_blank" rel="noopener"
>更无聊的技术更好用&lt;/a>。&lt;/p>
&lt;p>真正有价值的技术，往往看起来不那么炫酷，反而很“无聊”。&lt;/p>
&lt;p>就像电从大型发电机变成我们家里墙上的插座一样，AI也会慢慢从喧嚣走向日常，成为我们生活中安静又可靠的一部分。&lt;/p>
&lt;p>这篇文字让我重新思考：也许未来不是让机器像人，而是让机器更好地帮我们从琐事中解脱。&lt;/p>
&lt;h3 id="网站建在电子烟屁股上">网站建在电子烟屁股上
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-40-11.png"
width="582"
height="333"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://bogdanthegeek.github.io/blog/projects/vapeserver/" target="_blank" rel="noopener"
>在一次性电子烟上托管网站&lt;/a>，上次有哥们儿把博客网站建在了一个手机上，我轻蔑一笑。&lt;/p>
&lt;p>这次的得点个赞了，有哥们把网站建在了“电子烟”的烟屁股上了。 ​​​&lt;/p>
&lt;p>他直接把电子烟里的控制芯片（ESP32）当成一台“迷你服务器”： 用 Arduino 写了个最简 HTTP 服务器程序，烧录进芯片； 把需要展示的网页内容转成 C 数组，随固件一起刷进去；&lt;/p>
&lt;h3 id="可完全离线运行的-ai-语音转录工具">可完全离线运行的 AI 语音转录工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-40-45.png"
width="792"
height="449"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/kaixxx/noScribe" target="_blank" rel="noopener"
>noScribe&lt;/a>，专为于学术研究和新闻采访设计的语音转文字工具。&lt;/p>
&lt;p>能够自动识别不同说话人、支持 60 多种语言转录，还内置了专业的编辑器来校对结果。&lt;/p>
&lt;p>支持几乎所有音频和视频格式的自动转录，可进行音频同步播放校对。&lt;/p>
&lt;p>可以本地离线运行，提供即开即用安装包（支持 Windows、macOS 和 Linux 全平台）。&lt;/p>
&lt;h3 id="来自-huggingface-的大模型教学项目">来自 HuggingFace 的大模型教学项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-41-06.png"
width="806"
height="442"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/huggingface/picotron" target="_blank" rel="noopener"
>picotron&lt;/a>，HuggingFace 的从 0 预训练大模型的框架，官方还给了视频教程，核心部分的源代码文件，每个都不到300行。&lt;/p>
&lt;h3 id="一个开源监控工具">一个开源监控工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-41-39.png"
width="703"
height="411"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/luis22d/ZeroTrace-Stealer-13-2026" target="_blank" rel="noopener"
>ZeroTrace&lt;/a>，可从客户端窃取大量数据或信息，并发送到服务器。&lt;/p>
&lt;p>支持对 Chrome 浏览器进行提取密码、Cookies、浏览历史、书签等信息。&lt;/p>
&lt;p>并且具备实时客户端监控、数据收集、分析工具、安全特性等多项功能。&lt;/p>
&lt;p>同时提供一个直观的界面显示，包括仪表板、文件资源管理器、密码管理器等多个视图。&lt;/p>
&lt;p>此外，还支持自定义端口配置和客户端构建器，以适应不同的网络环境和需求。&lt;/p>
&lt;h3 id="渲染中文字到字符界面">渲染中文字到字符界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-42-00.png"
width="805"
height="278"
loading="lazy"
class="gallery-image"
data-flex-grow="289"
data-flex-basis="694px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Antonoko/oh-my-logo-CJK" target="_blank" rel="noopener"
>oh-my-logo-CJK&lt;/a>，&lt;a class="link" href="https://github.com/shinshin86/oh-my-logo" target="_blank" rel="noopener"
>oh-my-logo&lt;/a> 项目的中文版，能将输入的中、日、韩文本渲染为 CLI 中的像素风 ASCII 图，支持多种渐变色板。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>CJK 友好：基于像素字体采样（非预制 ASCII），支持中、日、韩等多语种&lt;/li>
&lt;li>从 oh-my-logo 偷了多种渐变色板与方向，支持 24-bit ANSI 颜色&lt;/li>
&lt;li>多种像素输出模式与样式（half/full、block/shade 等）&lt;/li>
&lt;li>开箱即用，跨平台（Windows 通过 colorama 兼容 ANSI）&lt;/li>
&lt;/ul>
&lt;h3 id="直接在终端里运行任何-gui-应用">直接在终端里运行任何 GUI 应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-149-%E6%9C%9F/2025-09-21-09-42-29.png"
width="823"
height="462"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>
&lt;a class="link" href="https://github.com/mmulet/term.everything" target="_blank" rel="noopener"
>Term.Everything&lt;/a>，可以让我们直接在终端里运行任何 GUI 应用。&lt;/p>
&lt;p>包括浏览器、游戏、视频等，并兼容 kitty、iTerm2 等终端，实现全分辨率渲染。&lt;/p>
&lt;p>同时支持通过 SSH 远程运行 GUI 应用，无需 X11 转发，提供了流畅使用体验。&lt;/p>
&lt;p>我推测其实现原理是直接将像素映射为终端里的字符，不知性能如何。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 148 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/</link><pubDate>Sun, 14 Sep 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-28-48.png" alt="Featured image of post 机器文摘 第 148 期" />&lt;h1 id="机器文摘-第-148-期">机器文摘 第 148 期
&lt;/h1>&lt;h3 id="创新科技creative-technology的发展简史">创新科技（Creative Technology）的发展简史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-28-27.png"
width="676"
height="899"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.abortretry.fail/p/the-story-of-creative-technology" target="_blank" rel="noopener"
>创新科技（Creative Technology）：一场关于“声音”的逆袭与教训&lt;/a>&lt;/p>
&lt;p>如果你曾经用PC玩过游戏、听过音乐，那么你大概率听过**Sound Blaster（声霸卡）&lt;strong>这个名字。&lt;br>
它曾是PC音频的代名词，是90年代多媒体革命的起点，也是新加坡科技史上最闪耀的一张名片。&lt;br>
但这家名叫&lt;/strong>Creative Technology（创新科技）**的公司，并非一路高歌猛进。它曾站在巅峰，也曾错失风口；它定义了一个时代，也被时代抛在身后。&lt;/p>
&lt;p>981年，新加坡工程师**沈望傅（Sim Wong Hoo）**在公交车上听到一段刺耳的音乐播放，忍不住吐槽：“这音质太烂了。”&lt;br>
这句抱怨，成了Creative Technology的起点。&lt;br>
他和两位合伙人成立公司，目标很简单：&lt;strong>让PC发出真正的“声音”&lt;/strong>。&lt;/p>
&lt;p>在那个PC还只能发出“哔哔”警报的年代，Creative推出的第一款声卡——&lt;strong>Sound Blaster&lt;/strong>，不仅支持8-bit音频采样，还能播放MIDI音乐，甚至能接游戏手柄。&lt;br>
这款产品迅速成为PC游戏玩家和音乐爱好者的“神器”，也奠定了Creative在音频领域的霸主地位。&lt;/p>
&lt;p>90年代是Creative的黄金时代。&lt;br>
随着Windows系统的普及和多媒体PC的兴起，Creative不断迭代Sound Blaster产品线，推出了&lt;strong>Sound Blaster 16、AWE32、AWE64 Gold&lt;/strong>等经典型号。&lt;br>
这些产品不仅音质出色，还引入了波表合成、硬件音效处理等先进技术，成为PC音频的行业标准。&lt;/p>
&lt;p>当时的市场几乎被Creative垄断，甚至英特尔和微软也不得不与其合作。&lt;br>
沈望傅一度豪言：&lt;strong>“只要PC要发声，就得用我们的技术。”&lt;/strong>&lt;br>
这句话并不夸张。Creative不仅定义了PC音频，还推动了整个多媒体生态的发展。&lt;/p>
&lt;p>进入2000年代，MP3开始流行，数字音乐浪潮来袭。&lt;br>
Creative迅速推出&lt;strong>Nomad系列MP3播放器&lt;/strong>，技术上并不落后，甚至在某些方面领先于苹果的iPod。&lt;br>
但问题在于：&lt;strong>产品体验太差了&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>软件难用，传歌慢&lt;/li>
&lt;li>设计厚重，缺乏美感&lt;/li>
&lt;li>品牌调性模糊，无法打动消费者&lt;/li>
&lt;/ul>
&lt;p>而苹果则凭借&lt;strong>iPod + iTunes&lt;/strong>的组合拳，打造出无缝的音乐体验，彻底改变了市场格局。&lt;br>
Creative错失了MP3时代，也错失了成为“音乐硬件王者”的机会。&lt;/p>
&lt;p>MP3败北后，Creative并未放弃消费电子市场。&lt;br>
他们推出了&lt;strong>Zen系列&lt;/strong>播放器，试图与iPod再战一场，但市场已今非昔比。&lt;br>
更致命的是，随着智能手机的崛起，&lt;strong>“独立播放器”这个市场本身正在消失&lt;/strong>。&lt;/p>
&lt;p>Creative试图转型，推出过Android平板、蓝牙音箱、游戏耳机等产品，但始终未能再造爆款。&lt;br>
在智能手机全面整合音频功能的浪潮下，&lt;strong>“声卡”这个品类也逐渐边缘化&lt;/strong>。&lt;br>
Creative从“标准制定者”变成了“边缘参与者”。&lt;/p>
&lt;p>如今的Creative已不再是消费市场的主角，但它并未消失。&lt;br>
他们转向&lt;strong>高端音频设备、专业录音、游戏耳机、VR音频技术&lt;/strong>等细分市场，继续为音频发烧友和专业用户提供服务。&lt;br>
其**Super X-Fi（声晰飞）**技术，甚至获得了CES多项大奖，被誉为“耳机中的全息音响”。&lt;/p>
&lt;p>虽然再也回不到90年代的巅峰，但Creative依然活着，&lt;strong>用自己的方式坚持对“声音”的探索&lt;/strong>。&lt;/p>
&lt;h3 id="改造与升级一台九十年代-pc">改造与“升级”一台九十年代 PC
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-28-48.png"
width="690"
height="391"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://fabiensanglard.net/2168/" target="_blank" rel="noopener"
>我替14岁的自己，圆了30年前的电脑梦&lt;/a>，买回小时候梦想电脑并升级修复。&lt;/p>
&lt;p>1993年的夏天，14岁的Fabien Sanglard被邻居书桌上的那台 IBM PS/1 2168 馋得走不动路。&lt;/p>
&lt;p>米色迷你塔式机箱、滑动式软驱挡板、顶部提手，像台可以拎着走的艺术品。&lt;/p>
&lt;p>486DX2-66 的 logo 在开机自检时一闪而过，DOOM 能跑满 25 fps，而他家的 Cyrix 486SLC 只能把分辨率缩成邮票大小才能勉强运行。&lt;/p>
&lt;p>三十年后，他在 eBay 刷到一台芬兰卖家挂出的整机，原盒、 manuals、深灰底座一样不少，连三十年前的购机收据都留着。&lt;/p>
&lt;p>快递横跨欧洲，泡沫碎成雪，机器却争气地第一次加电就点亮。&lt;/p>
&lt;p>于是一场没有deadline的“童年补完计划”正式启动：软驱磁头用棉签蘸酒精一点点擦，CRT色差信号接索尼PVM做无损采集，Sound Blaster 16 和 Roland SCP-55 同时出声，让 E1M1 的吉他 riff 在 ISA 总线上重新咆哮。&lt;/p>
&lt;p>他把 L2 Cache 从 128 kB升到 512 kB，帧率稳稳提升四分之一。&lt;/p>
&lt;h3 id="macbook-屏幕转轴角度传感器">Macbook 屏幕转轴角度传感器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-30-56.png"
width="348"
height="440"
loading="lazy"
class="gallery-image"
data-flex-grow="79"
data-flex-basis="189px"
>
国外有一位开发者发现了 MacBook 上一个未公开的屏幕角度传感器 API，并利用该 API 制作成一个有趣小工具：&lt;a class="link" href="https://github.com/samhenrigold/LidAngleSensor" target="_blank" rel="noopener"
>Lid Angle Sensor&lt;/a>。&lt;/p>
&lt;p>通过该工具能实时显示 MacBook 笔记本屏幕被盖上的角度数值，并发出逼真的木门开关声音，相当有趣。&lt;/p>
&lt;p>网友们也纷纷发挥创意让笔记本在开合屏幕的时候发出各种声音（比如乐曲solo等）。&lt;/p>
&lt;h3 id="中文-dos-游戏合集">中文 DOS 游戏合集
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-32-12.png"
width="855"
height="693"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="296px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/rwv/chinese-dos-games" target="_blank" rel="noopener"
>chinese-dos-games&lt;/a>，直接在浏览器里重温儿童经典。&lt;/p>
&lt;p>基于 em-dosbox 模拟器实现完美兼容，并提供完整游戏列表和搜索功能。&lt;/p>
&lt;p>同时提供 Python 脚本可以一键批量下载游戏文件到本地，支持 IPFS 分布式存储，确保资源永久可访问。&lt;/p>
&lt;p>目前共有 1898 款游戏。访问这个地址可以直接在线玩耍：https://dos.lol/&lt;/p>
&lt;h3 id="浏览器指纹信息查看">浏览器指纹信息查看
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-33-05.png"
width="775"
height="621"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="299px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://fingerprint.goldenowl.ai/" target="_blank" rel="noopener"
>Browser Fingerprint Detector&lt;/a>，这个网站可以直观展示你的浏览器当前暴露给服务端的隐私信息。&lt;/p>
&lt;p>可以点开看看，当你访问一个网站后，对方已经知道了你的多少信息了。&lt;/p>
&lt;h3 id="在线练习-vim-使用技巧">在线练习 vim 使用技巧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-33-25.png"
width="690"
height="490"
loading="lazy"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="337px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/renzorlive/vimmaster" target="_blank" rel="noopener"
>vim大师&lt;/a>，一个基于浏览器运行的小游戏，可以帮助你快速上手掌握vim编辑器的快捷操作命令。从入门到大师。 ​​​&lt;/p>
&lt;p>我 fork 后基于 GitHub Pages 做了个静态页面，可以访问这里使用：https://sbabybird.github.io/vimmaster/&lt;/p>
&lt;h3 id="基于浏览器的媒体处理工具">基于浏览器的媒体处理工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-34-41.png"
width="817"
height="618"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Vanilagy/mediabunny" target="_blank" rel="noopener"
>mediabunny&lt;/a>，纯 TypeScript 实现的浏览器端媒体处理利器，专注高性能视频音频文件的读写与转换。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持 MP4、MOV、WebM、MKV、WAVE、MP3、Ogg、ADTS 等多格式，内置25+编解码器，借助 WebCodecs API 实现硬件加速&lt;/li>
&lt;li>精确到微秒级的读写操作，支持转封装、转码、缩放、旋转、重采样、裁剪等复杂转换功能&lt;/li>
&lt;li>流式 I/O，内存占用极低，可处理任意大小文件，且体积极小，tree-shakable 最终包仅 5KB gzipped&lt;/li>
&lt;li>零依赖，跨平台兼容浏览器和 Node.js，基于 ECMAScript2021+，完全用 TypeScript 编写，类型支持最新版本&lt;/li>
&lt;li>类似 FFmpeg 却专为 Web 从零设计，具备极高性能和灵活性，满足现代前端对媒体处理的高要求&lt;/li>
&lt;li>开源且采用 MPL-2.0 许可证，允许商用和闭源项目使用，修改后需开源，确保生态健康持续发展&lt;/li>
&lt;/ul>
&lt;h3 id="专门给-qwen3-06b-用的迷你推理引擎">专门给 qwen3-0.6b 用的迷你推理引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-148-%E6%9C%9F/2025-09-14-08-35-30.png"
width="391"
height="416"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="225px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/yassa9/qwen600" target="_blank" rel="noopener"
>qwen600&lt;/a>，一个从0实现的推理引擎，专门面向 Qwen3-0.6B 设计, 在3050-8GB 上能跑到 116.15 token/s（ 比llama.cpp 还快）。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>单批次推理引擎&lt;/li>
&lt;li>静态常量优化，支持编译时优化&lt;/li>
&lt;li>纯 CUDA C/C++ 实现，无 Python 依赖（仅分词器初始化除外）&lt;/li>
&lt;li>极简依赖：仅使用 cuBLAS、CUB 和标准 IO 库&lt;/li>
&lt;li>高效内存流水线：支持 mmap、单 GPU 内存块、异步拷贝&lt;/li>
&lt;li>GPU 上基于指针的零开销权重管理&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 147 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/</link><pubDate>Sun, 07 Sep 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-49-06.png" alt="Featured image of post 机器文摘 第 147 期" />&lt;h1 id="机器文摘-第-147-期">机器文摘 第 147 期
&lt;/h1>&lt;h3 id="给只有初中数学基础的你讲明白大语言模型的原理">给只有初中数学基础的你讲明白大语言模型的原理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-47-02.png"
width="688"
height="405"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="407px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://medium.com/data-science/understanding-llms-from-scratch-using-middle-school-math-e602d27ec876" target="_blank" rel="noopener"
>用初中数学从零吃透大语言模型&lt;/a>，对法学硕士 (LLM) 内部运作的完整解释，来自 Meta 的数据科学总监 Rohit Patel 。&lt;/p>
&lt;blockquote>
&lt;p>在本文中，我们将从零开始讲解大型语言模型 (LLM) 的工作原理——前提是你知道如何进行两个数字的加法和乘法。本文力求内容完整。我们首先用纸笔构建一个简单的生成式人工智能，然后逐步讲解所有必要的知识，以便对现代 LLM 和 Transformer 架构有深入的理解。本文将摒弃机器学习中所有花哨的术语和专业术语，以数字的本质来表达一切。不过，我们仍然会标明这些术语的名称，以便在你阅读专业术语时，能够更好地理解你的思路。&lt;/p>
&lt;p>从加法/乘法到当今最先进的人工智能模型，无需假设其他知识或参考其他来源，意味着我们涵盖了很多领域这不是一篇关于 LLM 的简单解释——理论上，一个有决心的人可以根据这里的所有信息，重新构建一个现代的 LLM。&lt;/p>
&lt;/blockquote>
&lt;h3 id="基于物理的第一原理渲染">基于物理的第一原理渲染
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-47-38.png"
width="765"
height="499"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="367px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://imadr.me/pbr/" target="_blank" rel="noopener"
>基于物理的第一原理渲染&lt;/a>，这篇文章构建了一个可交互的网页，把“光到底是什么、物体为什么呈现不同颜色、游戏里的金属与塑料如何被算法还原”这些看似高冷的物理问题，拆成一连串可拖拽、可滑动、可即时呈现的小实验。&lt;/p>
&lt;p>它先带你从电荷与磁场的舞蹈里导出电磁波，再用 Snell 窗演示水下奇妙视角，最后把微表面模型、BRDF、GGX 高光等硬核公式浓缩成几组滑杆——轻轻一拉，粗糙度、金属度、折射率即时成像，仿佛把渲染管线握在指尖。&lt;/p>
&lt;p>无需深厚数学背景，也能在十分钟内获得“原来真实感是这样算出来”的通透体验，值得任何对图形学或物理光学感兴趣的人静心一读。&lt;/p>
&lt;blockquote>
&lt;p>在这篇互动文章中，我们将探索产生光的物理现象以及光与物质相互作用的基本定律。我们将学习人眼如何捕捉光线，以及大脑如何将其解读为视觉信息。之后，我们将对这些物理相互作用进行近似建模，并学习如何创建各种材质的物理逼真渲染。&lt;/p>
&lt;/blockquote>
&lt;h3 id="什么是嵌入">什么是“嵌入”？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-48-30.png"
width="556"
height="633"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://vickiboykis.com/what_are_embeddings/" target="_blank" rel="noopener"
>What are embeddings? &lt;/a>，这篇文章系统地介绍了“嵌入”（Embeddings）这一机器学习中的核心概念。 嵌入是将文本、图片等多模态数据转换为数值形式的向量，以便于深度学习模型进行计算和处理。&lt;/p>
&lt;blockquote>
&lt;p>如果我们不理解我们是如何从一个单词变成一个BERT表示（更重要的是，我们为什么要这样做）的基础知识，那么这些模型对我们来说将永远是黑匣子。&lt;/p>
&lt;p>如果你去巴塞罗那的毕加索博物馆，你会看到毕加索这位艺术家许多早期的作品。它们真的很有趣，因为它们看起来并不像我们所认为的毕加索风格。这些在他早年完成的画作，展示了他作为一名古典主义画家的技术天赋。&lt;/p>
&lt;p>一些特别令人惊叹的例子是《科学与慈善》和《第一次圣餐》。我最喜欢的其中一幅是《画家的母亲肖像》。这些都是在他十五岁时画的。你可以从中看到这位艺术家与生俱来的艺术创作能力，以及他未来巨大的潜力。但是，在达到可以摒弃传统风格的境界之前，毕加索必须先精通它们。&lt;/p>
&lt;p>这对于机器学习也是如此。在大语言模型的前沿领域，有着一个充满激动人心发展的全新世界。但在这些尖端技术的喧嚣中，许多重要的基础概念被忽略了。如果我们不理解我们是如何从一个单词变成一个BERT表示（更重要的是，我们为什么要这样做）的基础知识，那么这些模型对我们来说将永远是黑匣子。我们将无法在它们的基础上进行构建，也无法以我们想要的方式去驾驭它们。&lt;/p>
&lt;p>彼得·诺维格（Peter Norvig）敦促我们要用十年的时间来教自己编程。本着这种精神，在与“嵌入”（embeddings）——深度学习模型中的基础数据结构——打了几年的交道之后，我意识到要对它们有一个好的概念模型并非易事。而且，当我想学习更多时，却没有一个好的、通用的文本可以作为起点。现有的资料要么过于艰深和学术化，要么过于肤浅，是这个领域的供应商为了推销其解决方案而制作的内容。&lt;/p>
&lt;p>所以我开始了一个项目，旨在理解机器学习和自然语言处理的基本构件，特别是它们与当今推荐系统的关系。这个项目的结果就是这个网站上的PDF，它面向的是普通读者，除了“向量很酷”这个想法之外，不试图向你推销任何东西。我也一直在通过Viberary这个项目将这些想法付诸实践。&lt;/p>
&lt;p>除了他的艺术作品，毕加索还给我们留下了一句名言：&lt;/p>
&lt;p>&amp;mdash;当艺术评论家聚在一起时，他们谈论的是形式、结构和意义。当艺术家们聚在一起时，他们谈论的是哪里可以买到便宜的松节油。&lt;/p>
&lt;p>我写这篇文章是为了我自己的学习过程。但我希望这份文档能将“嵌入”置于商业和工程的背景下，以便包括工程师、产品经理、学生以及任何希望学习更多基础知识的人在内的其他人都能觉得它有用。&lt;/p>
&lt;p>机器学习，就像所有优秀的工程和艺术一样，最终是我们表达自我的一种方式，是一门由基本的构件和模式组成的技艺，它赋予我们力量，让我们能够在前人打下的坚实基础上，创造出美好的事物。我希望你在探索和使用“嵌入”的过程中，也能找到和我一样多的乐趣。&lt;/p>
&lt;/blockquote>
&lt;h3 id="把我的世界搓成球">把《我的世界》搓成球
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-49-06.png"
width="716"
height="539"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>[方块星球](&lt;a class="link" href="https://www.bowerbyte.com/posts/blocky-planet/" target="_blank" rel="noopener"
>https://www.bowerbyte.com/posts/blocky-planet/&lt;/a>）是一款由独立开发者鼓捣出的技术 Demo，灵感源自上古时期的同类实验。&lt;/p>
&lt;p>它把《我的世界》那种方方正正的体素世界，硬生生贴到了一颗圆滚滚的行星上——星球不大，却能从地表一路挖到地核；方块虽小，却多达二十余种，想咋拆就咋拆。&lt;/p>
&lt;p>为了让玩家随时“脚踏实地”，星球被切成六块扇形区域，再像洋葱一样套上一层又一层“壳层”。每往下一层，方块数量翻四倍，尺寸缩四倍，既保持了手感，又避免了“面条块”和“馒头块”的尴尬。再加上自定义重力、喷气背包、北极苔原与森林两种生物群系，整个星球虽小，五脏俱全。&lt;/p>
&lt;p>作者坦言，这只是下班后的“自嗨项目”，未必会做成收费游戏，但偶尔修修 Bug、添点新花样还是有可能的。&lt;/p>
&lt;p>如果你也想围着这颗“方块小丸子”跑一圈，直接去 Itch.io 白嫖即可——Windows 原生版最顺滑，网页版也能凑合玩。&lt;/p>
&lt;h3 id="用-c-语言实现的超轻量级-ai-agent">用 C 语言实现的超轻量级 AI Agent
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-49-31.png"
width="810"
height="469"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/bravenewxyz/agent-c" target="_blank" rel="noopener"
>Agent-C&lt;/a>，一个使用 C 语言实现的超轻量级 AI Agent，编译后体积仅 4.4KB。&lt;/p>
&lt;p>支持使用 OpenRouter API 接入各种模型，可直接执行 Shell 命令操作系统。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>工具调用功能，AI 可直接执行 shell 命令操作系统&lt;/li>
&lt;li>超轻量设计，macOS 下仅 4.4KB，Linux 下约 16KB&lt;/li>
&lt;li>滑动窗口记忆管理，保持对话连贯性的同时高效运行&lt;/li>
&lt;li>自动平台检测和最优压缩，无需手动配置&lt;/li>
&lt;li>支持 OpenRouter API，可接入多种大语言模型&lt;/li>
&lt;/ul>
&lt;p>跨平台支持，兼容 macOS 和 Linux 系统，使用 make 命令编译后设置 API 密钥即可运行。&lt;/p>
&lt;h3 id="装机之家">装机之家
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-49-51.png"
width="690"
height="448"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.zhuangji.net" target="_blank" rel="noopener"
>装机之家&lt;/a>，这个网站提供了电脑系统安装包和大量装机软件，无任何套路，直接就能下载。 ​​​&lt;/p>
&lt;h3 id="喵语编程">喵语编程！
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-50-14.png"
width="480"
height="660"
loading="lazy"
class="gallery-image"
data-flex-grow="72"
data-flex-basis="174px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/wixette/meowlang" target="_blank" rel="noopener"
>meowlang&lt;/a>，有人整了个不错的活，只使用“喵喵”词来实现图灵完备的编程。&lt;/p>
&lt;p>图中喵语代码可以打印一个斐波那契数列。&lt;/p>
&lt;p>注意代码里没有用零宽空格等隐藏字符，只用喵和分号两个符号。编写方法有点像汇编，用喵的数量来写指令和值。&lt;/p>
&lt;h3 id="基于-web-的服务器管理平台">基于 web 的服务器管理平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-147-%E6%9C%9F/2025-09-07-08-51-33.png"
width="1213"
height="679"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/LukeGus/Termix" target="_blank" rel="noopener"
>Termix&lt;/a>，提供了完整的 Web 界面来统一管理所有服务器，包括 SSH 终端、文件编辑、隧道管理等功能。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>SSH 终端访问，支持分屏显示（最多 4 个面板）和标签系统&lt;/li>
&lt;li>SSH 隧道管理，具备自动重连和健康监控功能&lt;/li>
&lt;li>远程文件编辑器，支持语法高亮和完整文件管理操作&lt;/li>
&lt;li>SSH 主机管理器，可保存和分类管理所有连接信息&lt;/li>
&lt;li>服务器状态监控，实时查看 CPU、内存和硬盘使用情况&lt;/li>
&lt;li>用户认证系统，支持管理员控制和 OIDC 认证&lt;/li>
&lt;/ul>
&lt;p>通过 Docker Compose 一键部署即可使用，需要管理多台服务器的运维人员和开发者，这个工具值得一看。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 146 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/</link><pubDate>Sun, 31 Aug 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-22-50.png" alt="Featured image of post 机器文摘 第 146 期" />&lt;h1 id="机器文摘-第-146-期">机器文摘 第 146 期
&lt;/h1>&lt;h3 id="关于安全启动和-tpm-的文章">关于安全启动和 TPM 的文章
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-22-23.png"
width="898"
height="508"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://andrewmoore.ca/blog/post/anticheat-secure-boot-tpm/" target="_blank" rel="noopener"
>安全启动与TPM技术成为游戏反作弊新手段&lt;/a>。&lt;/p>
&lt;p>硬件级安全功能正被用于打击游戏作弊，提升多人在线游戏的公平性。&lt;/p>
&lt;p>多家游戏开发商开始要求玩家启用安全启动（Secure Boot）和可信平台模块（TPM 2.0） 才能运行热门在线游戏。&lt;/p>
&lt;p>安全启动通过验证UEFI启动镜像和内核驱动程序的数字签名，防止加载未授权的代码。TPM则提供不可篡改的硬件唯一标识符（基于认可密钥），允许反作弊系统实施硬件封禁，增加作弊者成本。&lt;/p>
&lt;p>此外，TPM的平台配置寄存器（PCR） 可记录启动过程中的各种事件哈希值，为系统启动状态提供加密验证，确保启动链未被篡改。&lt;/p>
&lt;p>这些技术要求旨在对抗内核级作弊、内存修改、硬件ID欺骗等作弊手段，但也在玩家社群中引发了关于隐私和便利性的讨论。&lt;/p>
&lt;h3 id="腾讯开源的多智能体框架">腾讯开源的多智能体框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-22-50.png"
width="881"
height="630"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Tencent/Youtu-agent" target="_blank" rel="noopener"
>Youtu-agent&lt;/a>，是一个灵活、高性能的框架，用于构建、运行和评估自主智能体。除了在基准测试中名列前茅，该框架还提供了强大的智能体能力，例如数据分析、文件处理和深度研究。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>验证性能&lt;/strong>：在 WebWalkerQA 上达到 71.47% 的 pass@1，在 GAIA（纯文本子集）上达到 72.8% 的 pass@1，纯粹使用 &lt;code>DeepSeek-V3&lt;/code> 系列模型（不使用 Claude 或 GPT），建立了强大的开源起点。&lt;/li>
&lt;li>&lt;strong>开源友好且成本敏感&lt;/strong>：针对可访问、低成本部署进行了优化，不依赖封闭模型。&lt;/li>
&lt;li>&lt;strong>实际用例&lt;/strong>：开箱即用地支持 CSV 分析、文献综述、个人文件整理以及播客和视频生成等任务。（即将推出）&lt;/li>
&lt;li>&lt;strong>灵活的架构&lt;/strong>：基于 &lt;a class="link" href="https://github.com/openai/openai-agents-python" target="_blank" rel="noopener"
>openai-agents&lt;/a> 构建，可兼容各种模型 API（从 &lt;code>DeepSeek&lt;/code> 到 &lt;code>gpt-oss&lt;/code>）、工具集成和框架实现。&lt;/li>
&lt;li>&lt;strong>自动化与简洁性&lt;/strong>：基于 YAML 的配置、自动智能体生成和简化的设置减少了手动开销。&lt;/li>
&lt;/ul>
&lt;h3 id="短视频生成工厂">短视频生成工厂
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-23-13.png"
width="797"
height="478"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/YILS-LIN/short-video-factory" target="_blank" rel="noopener"
>short-video-factory&lt;/a>，一键生成产品营销与泛内容短视频，AI批量自动剪辑，高颜值跨平台桌面端工具。&lt;/p>
&lt;p>短视频工厂是一个开源的桌面端应用，旨在通过AI技术简化短视频的制作流程。用户可以通过简单的提示词文本+视频分镜素材，快速且自动的剪辑出高质量的产品营销和泛内容短视频。该项目集成了AI驱动的文案生成、语音合成、视频剪辑、字幕特效等功能，旨在为用户提供开箱即用的短视频制作体验。&lt;/p>
&lt;p>核心功能：&lt;/p>
&lt;ul>
&lt;li>🤖 AI驱动：集成了最新的AI技术，提升视频制作效率和质量&lt;/li>
&lt;li>📝 文案生成：基于提示词生成高质量的短视频文案&lt;/li>
&lt;li>🎥 自动剪辑：支持多种视频格式，自动化批量处理视频剪辑任务&lt;/li>
&lt;li>🎙️ 语音合成：将生成的文案转换为自然流畅的语音&lt;/li>
&lt;li>🎬 字幕特效：自动添加字幕和特效，提升视频质量&lt;/li>
&lt;li>📦 批量处理：支持批量任务，按预设自动持续合成视频&lt;/li>
&lt;li>🌐 多语言支持：支持中文、英文等多种语言，满足不同用户需求&lt;/li>
&lt;li>📦 开箱即用：无需复杂配置，用户可以快速上手&lt;/li>
&lt;li>📈 持续更新：定期发布新版本，修复bug并添加新功能&lt;/li>
&lt;li>🔒 安全可靠：完全本地本地化运行，确保用户数据安全&lt;/li>
&lt;li>🎨 用户友好：简洁直观的用户界面，易于操作
💻 多平台支持：支持Windows、macOS和Linux等多个操作系统&lt;/li>
&lt;/ul>
&lt;h3 id="可视化开发-python-图形界面">可视化开发 Python 图形界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-23-42.png"
width="822"
height="371"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="531px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/PaulleDemon/PyUIBuilder" target="_blank" rel="noopener"
>PyUIBuilder&lt;/a>，一款突破传统框架限制的 Python GUI 可视化构建工具，支持 Tkinter、CustomTkinter，Kivy 与未来的 PySide，颠覆你对 GUI 开发的认知。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>框架无关，生成纯 Python 代码，方便调试与后续维护，兼容多种主流 UI 库&lt;/li>
&lt;li>拖拽式设计，预置丰富 UI 组件，支持布局管理（flex、grid、绝对定位）和本地资源上传&lt;/li>
&lt;li>自动生成 requirements.txt，助力快速部署，提升开发效率&lt;/li>
&lt;li>即将支持事件处理、PyQt/PySide、Electron 桌面应用等高级功能，路线图公开透明&lt;/li>
&lt;li>免费网页版编辑器永远开放，付费版本享终身授权、优先支持和更多高级组件与功能&lt;/li>
&lt;li>开源社区活跃，作者独立维护，支持开源项目发展的同时享超值优惠预购许可&lt;/li>
&lt;li>适合快速原型设计、学习及商业项目，减少重复造轮子，释放更多时间专注业务逻辑&lt;/li>
&lt;/ul>
&lt;p>快速上手只需三步：选框架 + 拖组件 + 生成代码，Python GUI 开发从未如此简单高效📱💻&lt;/p>
&lt;h3 id="在本地浏览器中运行的pdf处理工具">在本地浏览器中运行的PDF处理工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-24-11.png"
width="860"
height="420"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/krmanik/local-pdf-tools" target="_blank" rel="noopener"
>Local PDF Tools&lt;/a>，一个完全在本地浏览器中运行的PDF处理工具。&lt;/p>
&lt;p>使用 Ghostscript WebAssembly 在浏览器中完全运行。它的主要功能包括：压缩、合并和拆分 PDF 文件。&lt;/p>
&lt;p>在线体验：krmanik.github.io/local-pdf-tools/&lt;/p>
&lt;h3 id="带渐变效果的编辑器主题">带渐变效果的编辑器主题
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-146-%E6%9C%9F/2025-08-31-09-24-52.png"
width="1092"
height="703"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/shaobeichen/gradient-theme" target="_blank" rel="noopener"
>gradient-theme&lt;/a>，基于多个知名主题如 Dracula、Monokai Pro 等添加了精美的渐变效果，通过修改 VS Code 核心文件实现真正的渐变背景。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持 8 种经典主题的渐变版本，包括 Dracula、Monokai Pro 等&lt;/li>
&lt;li>一键启用/禁用渐变效果，操作简单便捷&lt;/li>
&lt;li>支持自定义渐变样式，可以创建专属的个性化主题&lt;/li>
&lt;li>完全保留原主题的语法高亮和配色方案&lt;/li>
&lt;li>提供详细的自定义教程和在线压缩工具支持&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>有一天我看到了一个自已修改 VSCode 主题 CSS 文件的视频，&lt;/p>
&lt;p>于是我觉得我可以使用相同的方式来制作一个 VSCode 渐变效果 CSS 文件，&lt;/p>
&lt;p>然后我就开始使用 Custom CSS and JS Loader 插件来加载自定义的渐变 CSS，&lt;/p>
&lt;p>后来许多人觉得我的渐变主题非常好看，希望也能在自己的 VSCode 上能使用它，&lt;/p>
&lt;p>但是如果要使用它的话，需要安装插件还需要我给他们一份 CSS 文件，这太麻烦了！&lt;/p>
&lt;p>于是我去学习了如何制作一个 VSCode 主题插件，做出了这个渐变色主题插件。&lt;/p>
&lt;/blockquote>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 145 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-09-00-45.png" alt="Featured image of post 机器文摘 第 145 期" />&lt;h1 id="机器文摘-第-145-期">机器文摘 第 145 期
&lt;/h1>&lt;h3 id="用-excel-来学习多头注意力机制">用 Excel 来学习多头注意力机制
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-08-57-44.png"
width="771"
height="676"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="273px"
>&lt;/p>
&lt;p>什么是大模型赖以生存的“注意力机制”？论文读起来太枯燥？Excel 总会用吧？&lt;/p>
&lt;p>&lt;a class="link" href="https://www.byhand.ai/p/multihead-attention" target="_blank" rel="noopener"
>用 Excel 来学习多头注意力机制&lt;/a>，之前有人用 Excel 做了一个 CPU，现在又有人基于 Excel 实现了一个“多头注意力”模型。&lt;/p>
&lt;p>跟着作者可以一步一步理解其中的技术原理。&lt;/p>
&lt;p>Excel：俺也是图灵完备的哦！&lt;/p>
&lt;h3 id="操作-excel-的-mcp-server">操作 Excel 的 MCP Server
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-08-58-43.png"
width="857"
height="556"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/haris-musa/excel-mcp-server" target="_blank" rel="noopener"
>excel-mcp-server&lt;/a>，一个Excel mcp，用AI操作Excel表格。&lt;/p>
&lt;p>利用这个 mcp server 你就可以让 AI 创建销售数据表，把A列都乘1.1，结果放B 列，然后画个柱状图。&lt;/p>
&lt;p>支持创建、复制工作表；填数、写公式、画图表、调颜色、加透视表、保存、转 PDF 等 Excel 的常规操作。&lt;/p>
&lt;p>本地或远程都能跑，stdio、SSE、HTTP 三种连接方式。&lt;/p>
&lt;h3 id="量产的激光灭蚊套装">量产的激光灭蚊套装
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-08-59-08.png"
width="690"
height="429"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="386px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://photonmatrixlab.com/" target="_blank" rel="noopener"
>光子矩阵&lt;/a>，全球首款便携式激光灭蚊器。用激光雷达检测蚊子，用激光消灭蚊子。&lt;/p>
&lt;p>可以有效地识别和打击飞行速度不超过 1m/s、尺寸特征为 2~20mm 的蚊子。它也可以有效打击该特征范围内的其他飞虫，但对飞行速度要快得多的苍蝇等飞虫基本无效。 ​​​&lt;/p>
&lt;h3 id="开源跨平台多智能体框架">开源跨平台多智能体框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-08-59-22.png"
width="690"
height="445"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/X-PLUG/MobileAgent/blob/main/README_zh.md" target="_blank" rel="noopener"
>Mobile-Agent-v3&lt;/a>，是一款基于GUI-Owl的跨平台多智能体框架，GUI-Owl也同时被开源，这是一款多模态跨平台GUI虚拟层模型&lt;/p>
&lt;p>GUI-Owl 作为 GUI 自动化基础模型，具备GUI感知、落地、端到端操作能力。&lt;/p>
&lt;p>可以理解 GUI界面布局、元素，把指令转化为具体的屏幕坐标和操作，完成完整的GUI操作流程。&lt;/p>
&lt;p>Mobile-Agent-v3 利用 GUI-Owl 能力与 GUI 交互，具备任务分解、规划以及进度管理、异常处理和反射能力、关键信息记录能力。&lt;/p>
&lt;p>比如，完成特定目标制定行动计划，跟踪任务执行进度，反馈调整行动。&lt;/p>
&lt;p>具备关键信息记录能力，支持跨应用任务。&lt;/p>
&lt;h3 id="基于控制台终端的电子书阅读器">基于控制台终端的电子书“阅读器”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-08-59-42.png"
width="826"
height="463"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/superstarryeyes/lue" target="_blank" rel="noopener"
>lue&lt;/a>，在终端中运行的电子书阅读器，支持 EPUB、PDF、TXT 等多种格式，还自带 TTS 语音朗读功能，支持 100+ 种语言朗读。&lt;/p>
&lt;p>界面简洁完美融入终端，同时支持快捷键操作，可轻松上下翻页。&lt;/p>
&lt;p>看起来就像在敲代码，实际却在上班看小说。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持 EPUB、PDF、DOCX 等多种电子书格式&lt;/li>
&lt;li>内置 TTS 语音朗读，可以离线听书&lt;/li>
&lt;li>高颜值的终端界面，完美伪装成工作状态&lt;/li>
&lt;li>自动保存阅读进度，随时继续阅读&lt;/li>
&lt;li>提供快捷键导航与进阶阅读控制&lt;/li>
&lt;li>支持离线语音朗读，无需联网使用&lt;/li>
&lt;/ul>
&lt;p>程序员们，继续摸鱼吧，马上鱼就上岸啦。&lt;/p>
&lt;h3 id="开源数字人对话系统">开源数字人对话系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-09-00-45.png"
width="539"
height="268"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="482px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/HumanAIGC-Engineering/OpenAvatarChat" target="_blank" rel="noopener"
>Open Avatar Chat&lt;/a>，在自己个人电脑上就能运行一个能与我们实时对话的数字人系统，平均回答延迟仅 2.2 秒。支持 Docker 一键快速部署。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>低延迟数字人实时对话，平均响应时间 2.2 秒&lt;/li>
&lt;li>支持多模态交互，包括文本、音频、视频输入&lt;/li>
&lt;li>模块化架构设计，可灵活替换各个组件&lt;/li>
&lt;li>预置 100+ 数字人形象，支持 LiteAvatar 和 LAM 两种渲染方式&lt;/li>
&lt;li>前后端分离，方便自定义界面和扩展功能&lt;/li>
&lt;li>支持本地推理和云端 API 两种部署模式&lt;/li>
&lt;/ul>
&lt;h3 id="可以跑在计算器上的-lisp-解释器">可以跑在计算器上的 lisp 解释器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-145-%E6%9C%9F/2025-08-24-09-01-28.png"
width="798"
height="330"
loading="lazy"
class="gallery-image"
data-flex-grow="241"
data-flex-basis="580px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Robert-van-Engelen/tinylisp" target="_blank" rel="noopener"
>tinylisp&lt;/a>，这个项目教你如何使用 C 语言在 99 行代码内实现一个小型的 Lisp 解释器。&lt;/p>
&lt;p>尽管代码很简洁，但这个 Lisp 解释器具备 21 个内置原语、简单的垃圾回收和 REPL（交互式环境），使其比简单的示例更加实用，甚至可以在复古 Sharp PC-G850VS 掌上电脑上运行。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 144 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/</link><pubDate>Sat, 16 Aug 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-51-27.png" alt="Featured image of post 机器文摘 第 144 期" />&lt;h1 id="机器文摘-第-144-期">机器文摘 第 144 期
&lt;/h1>&lt;h3 id="windows-xp-的前世今生">Windows XP 的“前世今生”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-49-16.png"
width="690"
height="518"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.abortretry.fail/p/the-history-of-windows-xp" target="_blank" rel="noopener"
>一个差点不存在的传奇&lt;/a>，本文用大量幕后故事串起 XP 的诞生史——微软原本想靠 Neptune／Odyssey 取代 DOS，结果项目双双夭折，只得紧急合并成 Whistler，最终意外打造出史上寿命最长、影响最深远的 Windows XP。&lt;/p>
&lt;ol>
&lt;li>最初的计划：杀死 DOS，却“难产”
90 年代末，微软一直想摆脱老旧的 MS-DOS。
原本计划用 Windows 2000 直接终结 DOS 产品线，但最后一刻（1999 年 4 月）被叫停。
于是启动了两个全新分支：
Neptune：面向家庭用户，界面大改版（代号 Forms+）。
Odyssey：面向企业用户，升级 Windows 2000。
这两个项目最终都成了“黑洞”——功能越塞越多，进度却一拖再拖，1999 年 12 月被双双砍掉。&lt;/li>
&lt;li>紧急合并：Whistler 的诞生
为了不让努力白费，微软把 Neptune 和 Odyssey 合并为一个项目，代号 Whistler（加拿大滑雪胜地）。
2000 年初，Whistler 还只是“Windows 2000 加一点皮肤”，但迭代飞快：
3 月：开始引入 Windows Me 的界面元素。
10 月：首个 Beta 公开，已经可以切换“经典/新”界面。
2001 年 2 月：Beta 2 首次出现 Luna 主题（蓝绿渐变、圆润按钮），也就是我们后来熟知的“XP 脸”。&lt;/li>
&lt;li>最后一锤定音：XP 的惊险发布
2001 年 8 月 24 日，微软在总部办了一场“直升机发布会”——把 XP 的母盘装进手提箱，让 PC 厂商代表直接坐直升机带走。
10 月 25 日全球上市，营销预算高达 10 亿美元（微软 + 英特尔 + OEM 厂商各出 5 亿）。
口号从原本的“Prepare to Fly”因 9·11 事件紧急改成“Yes you can”，麦当娜的《Ray of Light》成为主题曲。&lt;/li>
&lt;li>彩蛋：那张“草地桌面”差点没拿到
XP 默认壁纸“Bliss”（蓝天白云绿草）其实是一张 1998 年拍的 Sonoma 山谷实景。
摄影师 Charles O’Rear 把照片上传到 Corbis（盖茨自己开的图库）后，微软想买断却发现“太贵，保险不保”，只能让他亲自坐飞机把底片送到总部。&lt;/li>
&lt;li>尾声：一个用了 13 年的系统
Vista、7、8 都没能完全取代 XP，它一直“坚挺”到 2014 年才结束官方支持。
直到今天，全球仍有 0.5% 的电脑在运行 XP——比某些 Linux 发行版还多。&lt;/li>
&lt;/ol>
&lt;h3 id="怎样构建一个能写代码的智能体">怎样构建一个能写代码的智能体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-50-02.png"
width="626"
height="485"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="309px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://ampcode.com/how-to-build-an-agent" target="_blank" rel="noopener"
>How to Build an Agent&lt;/a>，本文展示了如何用不到 400 行代码构建一个能与本地文件系统交互的代码编辑 Agent 。&lt;/p>
&lt;p>作者认为，现在所谓复杂的智能体架构都是皇帝的新装，事实上没有那么麻烦。&lt;/p>
&lt;p>构建代理的核心要素仅包括一个大型语言模型（LLM）、一个循环以及充足的 tokens，并无需复杂的框架。&lt;/p>
&lt;h3 id="用-ct-扫描仪扫描-386-处理器">用 CT 扫描仪扫描 386 处理器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-50-41.png"
width="497"
height="489"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="243px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.righto.com/2025/08/intel-386-package-ct-scan.html" target="_blank" rel="noopener"
>CT 扫描仪揭示了 386 处理器陶瓷封装内的惊喜&lt;/a>， 1985 年的 Intel 80386 处理器，外表只是一块灰扑扑的陶瓷方块。&lt;/p>
&lt;p>作者借来一台工业 CT，像给木乃伊做全身扫描一样，把它层层剥开：&lt;/p>
&lt;ul>
&lt;li>6 层陶瓷“地下管网”把电源、地线和信号送到每个角落；&lt;/li>
&lt;li>35 µm 的金丝比头发还细，却负责把硅片和世界连在一起；&lt;/li>
&lt;li>侧缘几乎看不见的金属“暗线”，原来是制造时为引脚电镀而临时接入的“施工电缆”；&lt;/li>
&lt;li>8 个标着“NC”的空闲引脚里，竟有一个悄悄连着内部信号，可能是调试接口的“后门”。&lt;/li>
&lt;/ul>
&lt;p>文章用 3D 扫描和显微照片把 1 µm 的晶体管一路放大到 2.54 mm 的引脚——2500 倍的尺度跨越，像把整座城市的地下管线、高架桥和毛细血管一次性拍成透视图。&lt;/p>
&lt;p>芯片封装从来不是“外壳”，而是一整套微型电力与信号的高速公路。&lt;/p>
&lt;h3 id="一款开源-llm-应用开发平台">一款开源 LLM 应用开发平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-51-06.png"
width="977"
height="617"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="380px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dataelement/bisheng" target="_blank" rel="noopener"
>BISHENG毕昇&lt;/a>，是一款 开源 LLM应用开发平台，主攻企业场景， 已有大量行业头部组织及世界500强企业在使用。&lt;/p>
&lt;p>“毕昇”是活字印刷术的发明人，活字印刷术为人类知识的传递起到了巨大的推动作用。项目作者希望“BISHENG毕昇”同样能够为智能应用的广泛落地提供有力支撑。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>🧩 独立、完备的应用编排框架：可在一个框架下实现各类任务（同类产品需要被 bot 调用，或划分成 chatflow 与 workflow 来完成不同类型的任务）。&lt;/li>
&lt;li>🔄 Human in the loop：支持用户在Workflow执行的中间过程进行干预和反馈（包括多轮对话），而同类产品只能从头执行到尾。&lt;/li>
&lt;li>💥 强大：支持成环、并行、跑批、判断逻辑以及所有逻辑的任意自由组合；支持多类型输入输出、撰写报告、内容审核等复杂场景。&lt;/li>
&lt;li>🖐️ 易用、符合直觉：如成环、并行、批量运行操作，在同类产品中用户需借助专门组件实现，在BISHENG中只需完全按照直觉连接成“流程图”即可（画圈成环、并列即并行、多选即批量）。&lt;/li>
&lt;/ul>
&lt;h3 id="提示词-hub">提示词 Hub
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-51-27.png"
width="923"
height="621"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;p>有人做了一个大佬提示词库 &lt;a class="link" href="https://www.prompterhub.cn/best-practices" target="_blank" rel="noopener"
>PrompterHub&lt;/a>，用于汇集中文 AI 优质提示词。作者按照提示词所生成的结果类型来分类，分为 SVG、HTML、文本、图片等类别。&lt;/p>
&lt;p>如果你有很不错的提示词，也可以去这里提交。&lt;/p>
&lt;h3 id="学习-cuda-c-编程的电子书">学习 CUDA C++ 编程的电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-51-58.png"
width="643"
height="519"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="297px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.nvidia.com/cuda/pdf/CUDA_C_Best_Practices_Guide.pdf" target="_blank" rel="noopener"
>《CUDA C++ 最佳实践指南》&lt;/a>，nvidia官方指南。&lt;/p>
&lt;p>本指南面向希望利用 NVIDIA GPU 强大的并行计算能力进行通用计算的开发者。&lt;/p>
&lt;p>虽然 GPU 能够同时执行数千个线程，但其架构与 CPU 截然不同，这带来了独特的编程挑战。&lt;/p>
&lt;p>本指南旨在解决一个核心问题：如何将一个可以正常运行的并行程序，转变为一个能够充分发挥硬件潜能的高性能程序。&lt;/p>
&lt;p>它通过阐述成熟的并行化和优化技术，指导开发者有效地利用 GPU 架构，从而最大限度地提高计算吞吐量并实现可扩展的、高效的程序。&lt;/p>
&lt;p>本文献适合已具备 C++ 编程语言基础 和 CUDA C++ 编程初步知识的开发者阅读。&lt;/p>
&lt;h3 id="每天六十秒看世界">每天六十秒看世界
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-144-%E6%9C%9F/2025-08-16-21-52-35.png"
width="561"
height="687"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="195px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/vikiboss/60s" target="_blank" rel="noopener"
>每天60s看世界&lt;/a>，资讯类API大合集，涵盖新闻、每日壁纸、每日热搜、每日段子、Epic免费游戏等常用又有趣的内容。&lt;/p>
&lt;p>它不仅开源，还支持Docker、Node.js、Deno、Bun、Cloudflare Workers等多种部署方式，文档托管在Apifox上，部署方便，更新机制也很透明。&lt;/p>
&lt;p>更灵活的一点是：新闻源并不是写死的，而是可以自定义成你喜欢的信息源，配好cookie后定时自动抓取，每天都有更新。&lt;/p>
&lt;p>如果当天信息源没更新，也会自动 fallback 到前一天的内容，不会返回空数据。&lt;/p>
&lt;h3 id="观点">观点
&lt;/h3>&lt;ul>
&lt;li>我对现在 AI 编程的看法：我总有一种感觉，随着AI编程的成熟，编码的代价越来越低，软件也许会更换一种形态出现，所有的信息系统演变为一种通用的系统，再也没有“专业”功能，系统会根据需要，实时“生成”功能。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 143 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-29-23.png" alt="Featured image of post 机器文摘 第 143 期" />&lt;h1 id="机器文摘-第-143-期">机器文摘 第 143 期
&lt;/h1>&lt;h3 id="使用-rust-从零开始构建容器">使用 Rust 从零开始构建容器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-28-05.png"
width="773"
height="441"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://brianshih1.github.io/mini-container/preface.html" target="_blank" rel="noopener"
>Building a Container from Scratch in Rust&lt;/a>，用 Rust 语言从零开始构建容器系列教程。&lt;/p>
&lt;p>主要内容：&lt;/p>
&lt;ul>
&lt;li>使用挂载命名空间隔离根文件系统；&lt;/li>
&lt;li>使用 cgroups 进行资源限制；&lt;/li>
&lt;li>使用 seccomp 限制系统调用；&lt;/li>
&lt;li>使用用户命名空间和 uid 映射隔离用户 ID 和组 ID；&lt;/li>
&lt;li>通过功能进行权限控制；&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>我使用 Docker 容器已经很多年了，但一直把它当作神奇的黑匣子。我知道 Docker 使用容器运行时来创建隔离环境以运行代码。 不过，我不知道“隔离”到底是什么意思。为了揭开这个黑匣子，我决定在 Rust 中从头开始实现一个玩具容器运行时。&lt;/p>
&lt;p>在这个博客系列中，我将从 Linux 新手的角度，介绍容器的理论基础和实现过程。 我还会尽可能多地提供演示，以展示构成容器的 Linux 原语是如何工作的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="跨平台命令行-gpunpu-监控工具">跨平台命令行 GPU/NPU 监控工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-28-55.png"
width="963"
height="758"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="304px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/inureyes/all-smi" target="_blank" rel="noopener"
>all-smi&lt;/a>，覆盖NVIDIA、Apple Silicon、Tenstorrent、Rebellions、Furiosa多种硬件，支持单机与集群远程实时监控，完美替代nvidia-smi。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>实时监控核心指标：GPU/NPU利用率、显存占用、温度、功耗、频率，多平台细节数据（如PCIe、DLA、ANE功耗、NPU核心负载等）。&lt;/li>
&lt;li>多节点集群视图：支持256+远程节点统一管理，带连接池与重连机制，自动调节刷新间隔，历史趋势图和多标签界面优化运维效率。&lt;/li>
&lt;li>进程级别监控：GPU进程内存、CPU占用、用户信息、命令行，支持多维度排序和全进程树展示，助力精准资源调度。&lt;/li>
&lt;li>CPU/内存/存储全面覆盖：多核利用率、频率、温度及功耗，系统内存及缓冲区细节，交换空间和磁盘使用状态实时呈现。&lt;/li>
&lt;li>极致交互体验：终端UI支持键鼠操作、颜色分级高亮、响应式布局、无闪烁渲染，兼顾美观与实用。&lt;/li>
&lt;li>多种安装途径：Homebrew、Ubuntu PPA、Deb包、Cargo安装，兼容Linux/macOS/NVIDIA Jetson，轻松部署。&lt;/li>
&lt;li>Prometheus API输出：硬件指标标准化暴露，方便集成到监控体系，支持自定义刷新周期和进程信息。&lt;/li>
&lt;li>持续迭代优化：最新版本支持容器感知资源监控，ARM CPU频率检测增强，流程列表UI升级，Apache 2.0开源协议。&lt;/li>
&lt;/ul>
&lt;h3 id="anthropic-和吴恩达一起出的-claude-code-教程">Anthropic 和吴恩达一起出的 Claude Code 教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-29-23.png"
width="1465"
height="866"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>
&lt;a class="link" href="https://learn.deeplearning.ai/courses/claude-code-a-highly-agentic-coding-assistant/lesson/66b35/introduction" target="_blank" rel="noopener"
>Claude Code: A Highly Agentic Coding Assistant&lt;/a>，&lt;/p>
&lt;p>课程内容：&lt;/p>
&lt;ul>
&lt;li>协调多个 Claude 子 Agent 同时处理代码库的不同部分&lt;/li>
&lt;li>在 GitHub 问题中标记 Claude，并让它自主创建、审查和合并拉取请求&lt;/li>
&lt;li>将杂乱的 Jupyter 笔记本转变为干净、可用于生产的仪表板&lt;/li>
&lt;li>使用 Playwright 等 MCP 工具，这样 Claude 就能发现你的 UI 出了什么问题，并自主修复它&lt;/li>
&lt;/ul>
&lt;h3 id="小红书开源了一个-ocr-识别的模型">小红书开源了一个 OCR 识别的模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-30-48.png"
width="591"
height="541"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="262px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/rednote-hilab/dots.ocr" target="_blank" rel="noopener"
>dots.ocr&lt;/a>，可以把一些书、图标、公式扫描到电脑中。&lt;/p>
&lt;p>模型只有1.7B参数，模型大小只有6G左右。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>强大的性能：dots.ocr 在 OmniDocBench 上实现了文本、表格和阅读顺序的 SOTA 性能，同时提供与豆包 1.5 和 gemini2.5-pro 等大型模型相当的公式识别结果。&lt;/li>
&lt;li>多语言支持：dots.ocr 展示了针对低资源语言的强大解析能力，在我们的内部多语言文档基准测试中，在布局检测和内容识别方面取得了决定性的优势。&lt;/li>
&lt;li>统一简单的架构：通过利用单一视觉语言模型，dots.ocr 提供了比依赖复杂多模型管道的传统方法更加精简的架构。只需更改输入提示即可完成任务之间的切换，证明与 DocLayout-YOLO 等传统检测模型相比，VLM 可以获得具有竞争力的检测结果。&lt;/li>
&lt;li>高效快速的性能：dots.ocr 建立在紧凑的 1.7B LLM 之上，提供比许多其他基于更大基础的高性能模型更快的推理速度。&lt;/li>
&lt;/ul>
&lt;h3 id="京东开源了-joyagent">京东开源了 JoyAgent
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-31-21.png"
width="1101"
height="749"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="352px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jd-opensource/joyagent-jdgenie" target="_blank" rel="noopener"
>JoyAgent&lt;/a>，业界首个开源高完成度轻量化通用多智能体产品(JoyAgent-JDGenie)。&lt;/p>
&lt;blockquote>
&lt;p>JoyAgent-JDGenie是一个通用的多智能体框架，对于用户需要定制的一些新场景功能，只需将相关的子智能体或者工具挂载到JoyAgent-Genie即可。为了验证JoyAgent-JDGenie的通用性，在GAIA榜单Validation集准确率75.15%、Test集65.12%，已超越OWL（CAMEL）、Smolagent（Huggingface）、LRC-Huawei（Huawei）、xManus（OpenManus）、AutoAgent（香港大学）等行业知名产品。&lt;/p>
&lt;p>当前相关开源agent主要是SDK或者框架，用户还需基于此做进一步的开发，无法直接做到开箱即用。我们开源的JoyAgent-JDGenie是端到端的多Agent产品，对于输入的query或者任务，可以直接回答或者解决。例如用户query&amp;quot;给我做一个最近美元和黄金的走势分析&amp;quot;，JoyAgent-Genie可以直接给出网页版或者PPT版的报告文档。&lt;/p>
&lt;p>我们整体开源了智能体产品JoyAgent-JDGenie，包括前端、后端、框架、引擎、核心子智能体（报告生成智能体、代码智能体、PPT智能体、文件智能体等）、想用微调后效果更好的欢迎使用JoyAgent。&lt;/p>
&lt;/blockquote>
&lt;h3 id="深度-ai-代理通用开源库">深度 AI 代理通用开源库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-31-46.png"
width="611"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/hwchase17/deepagents" target="_blank" rel="noopener"
>Deep Agents&lt;/a>，LangChain 团队深度挖掘 Claude Code、Manus 与 Deep Research 核心，整合详细系统提示、规划工具、子代理与文件系统访问，打造的通用Python框架。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>通过deepagents库轻松创建支持复杂长远任务的深度AI代理。&lt;/li>
&lt;li>支持多工具调用、子代理任务分解及虚拟文件系统，提升任务规划与执行能力。&lt;/li>
&lt;li>与 LangGraph 无缝集成，支持流式交互、人机协作及记忆持久化。&lt;/li>
&lt;/ul>
&lt;h3 id="notebooklm-开源平替">NotebookLM 开源平替
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-143-%E6%9C%9F/2025-08-10-11-34-09.png"
width="848"
height="464"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="438px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/souzatharsis/podcastfy" target="_blank" rel="noopener"
>Podcastfy.ai&lt;/a>，一款制作播客音频的开源工具，可作为 NotebookLM 开源平替。&lt;/p>
&lt;p>支持从网页、PDF、YouTube 视频甚至图片中提取内容，并自动生成有逻辑、有语气、有语音的自然流流畅播客对话。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持网页、PDF、图片、YouTube 视频等多种输入格式&lt;/li>
&lt;li>可生成短播客（2-5分钟）或长播客（30+分钟）&lt;/li>
&lt;li>自定义对话风格、语言和音频生成参数&lt;/li>
&lt;li>集成 100+ 种 LLM 模型进行文本生成&lt;/li>
&lt;li>支持本地 LLM 运行，保护数据隐私&lt;/li>
&lt;li>支持多语言，包括中文、英文、日文等&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 142 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-10-53.png" alt="Featured image of post 机器文摘 第 142 期" />&lt;h1 id="机器文摘-第-142-期">机器文摘 第 142 期
&lt;/h1>&lt;h3 id="让-qwen3-06b-拥有视觉的教程">让 Qwen3-0.6B 拥有视觉的教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-07-39.png"
width="695"
height="665"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mp.weixin.qq.com/s/dMr1KmlesrdQG2WNauzpwQ" target="_blank" rel="noopener"
>让Qwen3-0.6B拥有视觉&lt;/a>，介绍了一种将 SmolVLM2 视觉模块 和 Qwen3-0.6B 进行模型拼贴的方法，并通过微调实现具备「超小规模+多模态+支持中文」特性的“Qwen3-SmVL”。&lt;/p>
&lt;blockquote>
&lt;p>最近Huggingface团队发布了超小多模态模型SmolVLM2，可以做到端侧1GB显存推理。在怀着惊喜试用后发现，虽然模型有极其强大的视觉文本理解能力，但是模型却无法理解中文，这对中文技术社区并不是非常友好。&lt;/p>
&lt;p>刚好前段时间做SwanLab硬件检测适配时有一台未到期的沐曦曦云C500服务器，因此萌生了把当前中文小模型扛把子Qwen3与SmolVLM2直接微调拼接的想法。&lt;/p>
&lt;p>本教程将介绍一种模型拼接的思路，将SmolVLM2的视觉模块（0.09B）与Qwen3最小的模型（0.6B）进行对齐微调，最终使得Qwen模型具备一定的视觉理解能力。&lt;/p>
&lt;/blockquote>
&lt;h3 id="基于-llm-的结构化信息提取库">基于 LLM 的结构化信息提取库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-08-25.png"
width="830"
height="404"
loading="lazy"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="493px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/google/langextract" target="_blank" rel="noopener"
>LangExtract&lt;/a>，谷歌开源的一个能从非结构化信息中提取结构化信息的库。&lt;/p>
&lt;p>使用 LLMs 从非结构化文本文档中提取结构化信息，这些信息基于用户定义的指令。 它处理诸如临床笔记或报告之类的材料，识别并整理关键细节，同时确保提取的数据与源文本相对应。&lt;/p>
&lt;h3 id="终端中的-ai-编程助手">终端中的 AI 编程助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-08-52.png"
width="797"
height="450"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/charmbracelet/crush" target="_blank" rel="noopener"
>Crush&lt;/a>，将你喜爱的终端环境与多样化 LLM 无缝融合，打造专业、高效且灵活的 AI 编码工作站。深度整合多模型与工作流，提升开发效率与体验。&lt;/p>
&lt;p>设计理念凸显“工具即服务”的方法论，强调持续上下文管理和多模型协同，适应不同项目需求，具备长期演进潜力。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>多模型支持：可切换多种 LLM，支持 OpenAI、Anthropic 等兼容 API，实时转换模型不中断上下文&lt;/li>
&lt;li>会话管理：针对项目维护多会话、多上下文，代码与工具环境无缝串联&lt;/li>
&lt;li>LSP 集成：利用语言服务器协议增强上下文感知，辅助智能代码生成与提示&lt;/li>
&lt;li>拓展性强：支持 MCP（http、stdio、sse）协议扩展能力，灵活集成自定义功能&lt;/li>
&lt;li>跨平台兼容：macOS、Linux、Windows（PowerShell/WSL）、FreeBSD/OpenBSD/NetBSD 全面支持&lt;/li>
&lt;li>便捷安装：支持 Homebrew、npm、Arch、Nix、Go 等多种安装方式，Debian/RPM 包及多平台二进制均可用&lt;/li>
&lt;li>配置灵活：JSON 格式配置支持本地和全局，权限白名单及自定义 Provider 深度定制&lt;/li>
&lt;li>日志追踪：内置日志管理，支持实时查看和调试，助力问题快速定位&lt;/li>
&lt;/ul>
&lt;h3 id="一个深度研究-agent">一个深度研究 Agent
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-09-24.png"
width="824"
height="177"
loading="lazy"
class="gallery-image"
data-flex-grow="465"
data-flex-basis="1117px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/langchain-ai/open_deep_research" target="_blank" rel="noopener"
>Open Deep Research&lt;/a>，来自 LangChain 团队完全开源的一个深度研究 Agent。&lt;/p>
&lt;p>支持多种模型提供商和搜索工具，能够自行执行复杂的研究任务，从信息收集到分析整理自动化处理。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持 OpenAI、Anthropic、Google 等多种模型提供商&lt;/li>
&lt;li>集成 Tavily、原生网页搜索等多种搜索工具&lt;/li>
&lt;li>可配置的并发研究单元，提升研究效率&lt;/li>
&lt;li>支持 MCP 服务器扩展，增强研究能力&lt;/li>
&lt;li>提供 LangGraph Studio 可视化界面&lt;/li>
&lt;li>内置评估系统，确保研究质量&lt;/li>
&lt;/ul>
&lt;h3 id="在线配色生成器">在线配色生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-09-51.png"
width="1231"
height="719"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://kigen.design/color" target="_blank" rel="noopener"
>Color Generator&lt;/a>，这个配色生成器很适合我这种强迫症，输入一个颜色，自动帮你生成一批好看的颜色，界面真的很清新啊。可以直接复制网站给出的 CSS 代码。 ​​​&lt;/p>
&lt;h3 id="背景纹理生成器">背景纹理生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-10-24.png"
width="1097"
height="730"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://projects.verou.me/css3patterns/" target="_blank" rel="noopener"
>CSS3 Patterns Gallery&lt;/a>，这个网站有好多纯CSS3实现的各种背景纹理，包括程序员最爱的格子衫纹理。&lt;/p>
&lt;h3 id="通义万相-wan22-系列模型">通义万相 Wan2.2 系列模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-10-53.png"
width="661"
height="373"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Wan-Video/Wan2.2" target="_blank" rel="noopener"
>Wan2.2&lt;/a>，通义万相 2.2（Wan 2.2）是阿里云推出的新一代多模态生成模型。该模型采用创新的 MoE（Mixture of Experts）架构，由高噪专家模型和低噪专家模型组成，能够根据去噪时间步进行专家模型划分，从而生成更高质量的视频内容。&lt;/p>
&lt;p>Wan 2.2 具备三大核心特性：&lt;/p>
&lt;ul>
&lt;li>影视级美学控制，深度融合专业电影工业的美学标准，支持光影、色彩、构图等多维度视觉控制；&lt;/li>
&lt;li>大规模复杂运动，轻松还原各类复杂运动并强化运动的流畅度和可控性；&lt;/li>
&lt;li>精准语义遵循，在复杂场景和多对象生成方面表现卓越，更好还原用户的创意意图。&lt;/li>
&lt;/ul>
&lt;p>模型支持文生视频、图生视频等多种生成模式，适用于内容创作、艺术创作、教育培训等多种应用场景。&lt;/p>
&lt;p>目前 Wan2.2 支持在通义官网、魔搭社区、HuggingFace 和 GitHub 下载，也提供阿里云的 API 服务。&lt;/p>
&lt;h3 id="基于-python-的文件服务器工具">基于 Python 的文件服务器工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-11-38.png"
width="776"
height="260"
loading="lazy"
class="gallery-image"
data-flex-grow="298"
data-flex-basis="716px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/9001/copyparty" target="_blank" rel="noopener"
>copyparty&lt;/a>，只需 Python 即可运行，支持断点续传下载上传，兼容几乎所有网页浏览器，还能同时提供 HTTP、WebDAV、FTP、TFTP、SMB 多种协议访问。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持 HTTP/WebDAV/FTP/TFTP/SMB 多协议文件传输&lt;/li>
&lt;li>断点续传上传下载，网络中断也不怕&lt;/li>
&lt;li>内置音频播放器，支持几乎所有音频格式&lt;/li>
&lt;li>文件搜索和媒体标签索引功能&lt;/li>
&lt;li>用户权限管理，支持只读、只写等细粒度控制&lt;/li>
&lt;li>跨平台运行，支持 Windows、Linux、macOS、Android&lt;/li>
&lt;/ul>
&lt;p>提供一键 Python 脚本部署，也有 Windows exe 版本和 Docker 镜像。&lt;/p>
&lt;h3 id="100-行代码的智能体框架">100 行代码的智能体框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-142-%E6%9C%9F/2025-08-03-13-11-52.png"
width="822"
height="647"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="304px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SWE-agent/mini-swe-agent" target="_blank" rel="noopener"
>mini-swe-agent&lt;/a>，SWE-bench 推出的智能体框架，只有 100 行 python（环境、模型、脚本总共 +100 行），解决了 SWE-bench 验证基准测试（使用 Claude Sonnet 4）中 65% 的 GitHub 问题。&lt;/p>
&lt;p>带有 UI，除了本地部署之外，还可以使用 docker 容器方式构建。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 141 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/</link><pubDate>Sun, 27 Jul 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-44-15.png" alt="Featured image of post 机器文摘 第 141 期" />&lt;h1 id="机器文摘-第-141-期">机器文摘 第 141 期
&lt;/h1>&lt;h3 id="大语言模型的演进">大语言模型的演进
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-44-15.png"
width="707"
height="528"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="321px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://goyalpramod.github.io/blogs/evolution_of_LLMs/" target="_blank" rel="noopener"
>一篇长文，介绍大语言模型的演进&lt;/a>，（主要是自2017年 Transformer 架构被引入以来的演进）。&lt;/p>
&lt;p>这篇文章主要探讨了自2017年以来语言模型的演变历程，重点介绍了Transformer架构的引入以及随后在自然语言处理领域引发的数学基础、架构创新和训练突破。文章详细分析了Transformer、RLHF（基于人类偏好的强化学习）、PPO（近端策略优化）和MoE（混合专家模型）等关键技术和理论，并探讨了BERT、GPT-1等模型的创新之处。&lt;/p>
&lt;h3 id="llm-架构对比">LLM 架构对比
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-44-53.png"
width="1058"
height="741"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://sebastianraschka.com/blog/2025/the-big-llm-architecture-comparison.html" target="_blank" rel="noopener"
>大型 LLM 架构对比&lt;/a>，文中列举了 llama-3.2, Qwen3-4B, SmolLM3-3B, DeepSeek-V3, Qwen3-235B-A22B, Kimi-K2 的架构并详细探讨了他们的区别和优势。&lt;/p>
&lt;h3 id="字节跳动开源了扣子平台">字节跳动开源了“扣子”平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-45-27.png"
width="947"
height="375"
loading="lazy"
class="gallery-image"
data-flex-grow="252"
data-flex-basis="606px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/coze-dev/coze-studio" target="_blank" rel="noopener"
>Coze Studio&lt;/a>，是一站式 AI Agent 开发工具。提供各类最新大模型和工具、多种开发模式和框架，从开发到部署，为你提供最便捷的 AI Agent 开发环境。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>提供 AI Agent 开发所需的全部核心技术：Prompt、RAG、Plugin、Workflow，使得开发者可以聚焦创造 AI 核心价值。&lt;/li>
&lt;li>开箱即用，用最低的成本开发最专业的 AI Agent：Coze Studio 为开发者提供了健全的应用模板和编排框架，你可以基于它们快速构建各种 AI Agent ，将创意变为现实。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>功能模块&lt;/strong>&lt;/th>
&lt;th>&lt;strong>功能点&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>模型服务&lt;/td>
&lt;td>管理模型列表，可接入OpenAI、火山方舟 等在线或离线模型服务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>搭建智能体&lt;/td>
&lt;td>* 编排、发布、管理智能体 &lt;br> * 支持配置工作流、知识库等资源&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>搭建应用&lt;/td>
&lt;td>* 创建、发布应用 &lt;br> * 通过工作流搭建业务逻辑&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>搭建工作流&lt;/td>
&lt;td>创建、修改、发布、删除工作流&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>开发资源&lt;/td>
&lt;td>支持创建并管理以下资源： &lt;br> * 插件 &lt;br> * 知识库 &lt;br> * 数据库 &lt;br> * 提示词&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>API 与 SDK&lt;/td>
&lt;td>* 创建会话、发起对话等 OpenAPI &lt;br> * 通过 Chat SDK 将智能体或应用集成到自己的应用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>感觉会成为 dify 的强有力竞争对手。&lt;/p>
&lt;h3 id="浏览器阅读markdown的插件">浏览器阅读Markdown的插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-45-53.png"
width="754"
height="716"
loading="lazy"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://md-reader.github.io/" target="_blank" rel="noopener"
>Markdown Reader&lt;/a>，可以用这个扩展在浏览器里高效阅读Markdown 文件（支持本地文件需要开启权限）。 ​​​&lt;/p>
&lt;h3 id="帮你监控咸鱼的工具">帮你监控咸鱼的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-46-22.png"
width="831"
height="716"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="278px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dingyufei615/ai-goofish-monitor" target="_blank" rel="noopener"
>ai-goofish-monitor&lt;/a>，一个基于 Playwright 和AI过滤分析的闲鱼多任务实时监控与智能分析工具，配备了功能完善的 Web 管理界面。&lt;/p>
&lt;p>在闲鱼上越来越难淘到个人闲置的好东西了，刷到的大多是商家货。这个工具能实时监控和分析闲鱼商品。你只需用文字描述想买什么，它就能自动设置监控任务，帮你精准找到匹配的商品。&lt;/p>
&lt;h3 id="用类-markdown-语法快速生成多种复杂图表">用类 Markdown 语法快速生成多种复杂图表
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-47-28.png"
width="530"
height="720"
loading="lazy"
class="gallery-image"
data-flex-grow="73"
data-flex-basis="176px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mermaid.js.org/" target="_blank" rel="noopener"
>Mermaid&lt;/a>，用类 Markdown 语法快速生成多种复杂图表的开源 JavaScript 工具，为文档与开发流程无缝衔接提供高效方案。&lt;/p>
&lt;ul>
&lt;li>支持流程图、时序图、甘特图、类图、状态图、饼图、Git 图谱、用户旅程图、C4 架构图等多种图形表达形式。&lt;/li>
&lt;li>以文本驱动图形，降低绘图门槛，非程序员也能通过 Mermaid Live Editor 轻松创建和编辑。&lt;/li>
&lt;li>消除文档滞后的痛点，实现图文同步更新，提升团队沟通和知识管理效率。&lt;/li>
&lt;li>可集成到 GitHub 及主流应用中，支持 CDN 引入，适合嵌入生产脚本和自动化流程。&lt;/li>
&lt;li>强调视觉回归测试，保障图形变更的可控性和稳定性，提升维护质量。&lt;/li>
&lt;li>社区活跃，已有 8 万+星，持续迭代与贡献，MIT 许可证，开放共建。&lt;/li>
&lt;li>针对安全风险设计沙箱渲染模式，兼顾交互功能与防范恶意脚本。&lt;/li>
&lt;/ul>
&lt;p>通过“代码即文档”的理念，Mermaid 将图形表达纳入代码管理体系，促进文档的实时演进，打破传统图形工具的隔阂，实现开发与非开发人员的高效协作。长期看，这种基于文本的图形描述是构建可维护、透明且自动化文档体系的核心路径。&lt;/p>
&lt;h3 id="从零开始学习-rlhf人类反馈强化学习教程">从零开始学习 RLHF（人类反馈强化学习）教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-141-%E6%9C%9F/2025-07-27-07-48-30.png"
width="852"
height="457"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="447px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ash80/RLHF_in_notebooks" target="_blank" rel="noopener"
>RLHF_in_notebooks&lt;/a>，仅用 3 个完整 Notebook 笔记带我们一步步实现 RLHF 全流程。&lt;/p>
&lt;p>基于 GPT-2 模型和电影评论情感数据集，演示了从监督微调到奖励建模再到 PPO 强化学习的完整过程。&lt;/p>
&lt;p>主要内容：&lt;/p>
&lt;ul>
&lt;li>监督微调（SFT）：在情感数据集上微调 GPT-2 模型&lt;/li>
&lt;li>奖励模型训练：训练能够识别正面情感的奖励模型&lt;/li>
&lt;li>PPO 强化学习：使用策略优化让模型生成更积极的内容&lt;/li>
&lt;li>完整代码实现：三个独立的 Notebook 详细展示每个步骤&lt;/li>
&lt;li>实际案例演示：将 GPT-2 训练成只生成正面情感句子的模型&lt;/li>
&lt;li>配套视频教程：YouTube 上有对应的详细讲解视频&lt;/li>
&lt;/ul>
&lt;p>不仅如此，还配套了详细的视频教程，感兴趣的同学，按顺序运行三个 Notebook 即可完成学习。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 140 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/</link><pubDate>Mon, 21 Jul 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-29-42.png" alt="Featured image of post 机器文摘 第 140 期" />&lt;h1 id="机器文摘-第-140-期">机器文摘 第 140 期
&lt;/h1>&lt;h3 id="x64-汇编编程入门教程">x64 汇编编程入门教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-27-15.png"
width="690"
height="481"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="344px"
>&lt;/p>
&lt;p>如果你曾好奇C代码最终如何与 CPU 对话，或者想深入理解程序的性能瓶颈，这篇从零开始的 x64 汇编教程就是为你准备的。它没有陈旧的理论，只有直达核心的现代实战。&lt;/p>
&lt;p>来自 gpfault.net 的&lt;a class="link" href="https://gpfault.net/posts/asm-tut-0.txt.html" target="_blank" rel="noopener"
>这篇教程&lt;/a>是“现代 x64 汇编”系列的第一部分。作者没有一上来就抛出指令集，而是先回答了一个最重
要的问题：在2024年，我们为什么还要学习汇编？&lt;/p>
&lt;p>答案非常清晰：&lt;/p>
&lt;ol>
&lt;li>理解底层：真正明白我们的高级语言代码是如何在硬件上执行的。&lt;/li>
&lt;li>性能优化：识别并解决编译器无法优化的性能瓶颈。&lt;/li>
&lt;li>安全研究：进行逆向工程和漏洞分析。&lt;/li>
&lt;li>调试：在没有源码的情况下，深入调试复杂问题。&lt;/li>
&lt;/ol>
&lt;p>这篇文章最大的特点是它的纯粹性。它将带你使用 NASM 汇编器和 ld
链接器，在不依赖任何 C 标准库（libc）的情况下，编写一个打印 &amp;ldquo;Hello, world!&amp;rdquo; 的程序。&lt;/p>
&lt;p>你将直接通过系统调用
(syscall) 与Linux内核交互，亲手完成 write（写入屏幕）和 exit（退出程序）这两个核心操作。&lt;/p>
&lt;p>整个过程就像是剥开了操作系统的层层外壳，让你直接触摸到程序执行的最基本脉络。&lt;/p>
&lt;h3 id="被卡马克推荐的十大编程建议">被卡马克推荐的十大编程建议
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-27-45.png"
width="690"
height="620"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://x.com/jsuarez5341" target="_blank" rel="noopener"
>@Joseph Suárez&lt;/a> 在 X 上发表了关于编程的十条建议，如果希望成为编程高手，可以参考一下。&lt;/p>
&lt;p>&lt;em>该推还被游戏编程大神约翰卡马克转推并赞同了&lt;/em>。&lt;/p>
&lt;p>十条建议翻译为中文如下：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>通过实践学习。从耗时几小时的项目开始，逐步挑战需要数天完成的任务。简单的游戏是绝佳选择，因为你能快速获得大多数问题的可视化反馈。我推荐使用 raylib 进行渲染——它轻量级、支持几乎所有语言，且该库本身就是优秀软件设计的典范。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从 Python 开始。很多资深开发者讨厌 Python，我有时也讨厌它。但无论如何你都应该从 Python 入手，因为它能让你比几乎任何其他语言更快起步。你遇到的大多数 AI 项目至少表层代码都是用 Python 写的。不过别在 Python 上停留太久——语言的设计会引导你以特定方式思考问题。避免使用复杂的外部包、继承、装饰器，以及任何会让你偏离学习用赋值、条件、迭代和函数来表达逻辑的东西。写几个基础游戏、应用程序或工具后就转向其他语言。包管理推荐使用 uv。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尽早学习 C 语言。C 是一门非常适合编写高性能软件的极简语言。我之所以不建议初学者先学 C，唯一原因是它要求你同时理解计算机和操作系统的工作原理，这对新手来说信息量过大。你需要掌握的核心概念包括：数据类型、类型转换、结构体、（单遍）编译、链接、内存分配、栈与堆的区别、指针。现阶段请避开 C++，它只是在 C 语言基础上堆砌了大量你暂时用不着的复杂功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>警惕过度抽象。始终以最简单的方式解决眼前问题为目标。除非能百分百确定未来会出现某种情况，否则不要为了追求通用性而增加复杂度。即便真有这种需求，通常也等真正遇到时再解决更明智。C 语言在这方面表现优异，因为它移除了继承体系和臃肿第三方库这类诱人但事与愿违的工具。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 Git。这一点基础到我差点忘了提。默认在 GitHub 上创建新项目并频繁提交。这是避免工作丢失的最佳方式，还能为那些&amp;quot;明明之前能用&amp;quot;的代码提供版本回溯。~所有开源项目都通过 GitHub 运作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>善用调试器。调试器能让你逐行执行代码并检查局部变量值，比到处塞 print 语句高效灵活得多，还能快速跳转检查。Python 用 pdb，C 语言用 gdb 就够。写 C 语言务必搭配地址消毒器(Address Sanitizer)，它能提供可读的错误提示——重要到我建议没有它就别碰 C 语言。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>掌握基础 Unix 工具。尽快熟悉命令行操作，不必追求花哨。像 ls、pwd、cat、head、mv、cp、cd、mkdir、top 等基础命令就能满足 90%的日常需求，最常用的工具不超过 10 个。条件允许尽量用原生 Linux 系统，MacOS 尚可，Windows 则不建议——若不想双系统就装 WSL。推荐安装基础版 Ubuntu，别过度折腾系统定制。熟悉发行版的包管理工具（很可能是 apt），别用 snap。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>警惕技术陷阱。程序员总爱发明些让事情更糟的&amp;quot;聪明&amp;quot;办法来浪费你时间。新手尤其要避开：面向对象和函数式编程（都是教条）、测试驱动开发（少量测试无妨）、频繁更换语言和发行版、行业&amp;quot;最佳实践&amp;quot;（FAANG 里蹩脚工程师多的是）、Python 类型提示系统、C 语言的 make/cmake、Hydra 这类复杂配置解析器、GitHub 子模块和花哨的 CI、React 等现代前端框架（学基础 HTML+CSS 就够了）、系统美化、X 上最新的编程潮流，以及我在开发直播里吐槽过的一切。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不要为了学习而刷 LeetCode。虽然这对求职面试可能是种必要的妥协，但用巧妙算法解决刁钻问题并不能代表编程的全貌。你当然应该学习基础数据结构和算法，但相比构建更多项目，掌握十种动态编程变体在面试之外的作用有限。我已多年未参加编程面试，但我确信 18 岁的我会比 28 岁的我表现更好——而 28 岁的我在其他所有方面都更出色。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不必过度纠结 IDE 选择。这真的没那么重要。我只用带两个插件的 NeoVim，它轻量且不碍事。是的，我用过无数 IDE；不，这根本不重要。VSCode 就不错，但请坚持通过终端运行代码而非依赖项目配置和按钮。这会打破&amp;quot;IDE 是神奇必需品&amp;quot;的幻觉。别用 AI 优先的编辑器。当你掌握了基础后，像 Copilot 或 SuperMaven 这类代码补全工具无妨，但请仅用于节省打字和文档查阅时间——而非替代思考。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="bilibili-发布的文本生成语音大模型">Bilibili 发布的文本生成语音大模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-29-42.png"
width="973"
height="384"
loading="lazy"
class="gallery-image"
data-flex-grow="253"
data-flex-basis="608px"
>
&lt;a class="link" href="https://index-tts.github.io/index-tts2.github.io/" target="_blank" rel="noopener"
>IndexTTS2&lt;/a>，Bilibili Index 语音团队开发的文本到语音的大模型，效果惊人，他们用了《让子弹飞》、《甄嬛传》来示意这个模型的语音生成能力，不仅给张麻子、黄四郎、皇后、甄嬛加上了英配，还能精确控制情绪和时长（非常适合用来进行影视配音）。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>零样本语音克隆&lt;/li>
&lt;li>支持情绪分离&lt;/li>
&lt;li>指定 token 数量，来控制生成的语音长度&lt;/li>
&lt;li>基于 Qwen3 微调，支持手动编辑情绪&lt;/li>
&lt;/ul>
&lt;h3 id="windows-上-ffmpeg-的专业交互界面">Windows 上 FFmpeg 的专业交互界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-30-28.png"
width="1286"
height="693"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Lake1059/FFmpegFreeUI" target="_blank" rel="noopener"
>FFmpegFreeUI&lt;/a>，是 ffmpeg 在 Windows 上的轻度专业交互外壳，收录大量参数，界面美观，交互友好。此项目面向国内使用环境，让普通人也能够轻松压制视频和转换格式。&lt;/p>
&lt;p>对于不习惯使用命令行参数（主要是也不好记，我每次都是用大模型帮我生成命令）来操作 ffmpeg 进行音视频格式处理的人来说真是福音。&lt;/p>
&lt;p>亮点：&lt;/p>
&lt;ol>
&lt;li>永久免费、干净无广告；&lt;/li>
&lt;li>支持实时计算剩余时间和预估最终大小；&lt;/li>
&lt;li>开发插件扩展功能，VB 和 C# 都能写；&lt;/li>
&lt;/ol>
&lt;h3 id="blender-studio-官方发布了一个游戏">Blender Studio 官方发布了一个游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-30-45.png"
width="690"
height="599"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blenderstudio.itch.io/dogwalk" target="_blank" rel="noopener"
>Dog walk&lt;/a>。是一个简短的休闲互动故事。玩家将扮演一只可爱的大狗穿越冬季树林，帮助一个小孩子用隐藏在环境中的五颜六色的物品装饰雪人。&lt;/p>
&lt;p>在这个微型开放世界中，您可以尽情漫步露营地、森林小径、田园诗般的小溪和结冰的池塘。&lt;/p>
&lt;p>引导或拖动您拖着的小孩主人。互相帮助，成为威胁或做一个好孩子。&lt;/p>
&lt;p>该项目免费向所有人开放原始文档和代码，用于测试和改进 Blender 和 Godot 游戏引擎。&lt;/p>
&lt;h3 id="训练-agent-智能体能力的专用框架">训练 Agent 智能体能力的专用框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-140-%E6%9C%9F/2025-07-21-10-31-17.png"
width="842"
height="743"
loading="lazy"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="271px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/OpenPipe/ART" target="_blank" rel="noopener"
>ART （Agent Reinforcement Trainer）&lt;/a>，使用这个框架可以将 GRPO 【群体相对策略优化(GRPO，Group Relative Policy Optimization) 是一种强化学习 (RL) 算法，专门用于增强大型语言模型(LLM) 中的推理能力】集成到你的 python 应用中，比如使用这个训练 Qwen2.5-7B 搜索邮件，或者玩各种游戏。这里使用小模型是因为小模型更适合用于这些零散任务的驱动模型。&lt;/p>
&lt;p>使用 GRPO 训练多步骤代理完成实际任务。相当于为智能体提供在职培训。支持 Qwen2.5、Qwen3、Llama、Kimi 等 LLM；&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 139 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/</link><pubDate>Sun, 13 Jul 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-49-08.png" alt="Featured image of post 机器文摘 第 139 期" />&lt;h1 id="机器文摘-第-139-期">机器文摘 第 139 期
&lt;/h1>&lt;h3 id="构建可靠-llm-应用程序的原则">构建可靠 LLM 应用程序的原则
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-44-09.png"
width="811"
height="629"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="309px"
>
&lt;a class="link" href="https://github.com/humanlayer/12-factor-agents" target="_blank" rel="noopener"
>12-factor-agents&lt;/a>，我们可以使用哪些原则来构建真正足够好并可以交到生产客户手中的 LLM 软件？&lt;/p>
&lt;p>项目的作者对于智能体的构建进行了总结，总结出了 12 种模式和设计原则。&lt;/p>
&lt;p>主要内容：&lt;/p>
&lt;ul>
&lt;li>How We Got Here: A Brief History of Software 我们如何走到今天：软件简史&lt;/li>
&lt;li>Factor 1: Natural Language to Tool Calls 因素 1：自然语言到工具调用&lt;/li>
&lt;li>Factor 2: Own your prompts 因素 2：拥有自己的提示&lt;/li>
&lt;li>Factor 3: Own your context window 因素 3：拥有自己的上下文窗口&lt;/li>
&lt;li>Factor 4: Tools are just structured outputs 因素 4：工具只是结构化的输出&lt;/li>
&lt;li>Factor 5: Unify execution state and business state 因素 5：统一执行状态和业务状态&lt;/li>
&lt;li>Factor 6: Launch/Pause/Resume with simple APIs 因素 6：使用简单的 API 启动/暂停/恢复&lt;/li>
&lt;li>Factor 7: Contact humans with tool calls 因素 7：通过工具调用与人类联系&lt;/li>
&lt;li>Factor 8: Own your control flow 因素 8：拥有自己的控制流&lt;/li>
&lt;li>Factor 9: Compact Errors into Context Window 因素 9：将错误压缩到上下文窗口中&lt;/li>
&lt;li>Factor 10: Small, Focused Agents 因素 10：小型、专注的代理商&lt;/li>
&lt;li>Factor 11: Trigger from anywhere, meet users where they are 因素 11：随时随地触发，随时随地与用户见面&lt;/li>
&lt;li>Factor 12: Make your agent a stateless reducer 因素 12：让你的代理成为无状态的 Reducer&lt;/li>
&lt;/ul>
&lt;h3 id="函数调用为什么被叫做call-functions">“函数调用”为什么被叫做“call functions”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-45-12.png"
width="743"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="377px"
>&lt;/p>
&lt;p>我们每天都在写 foo()，但有没有想过——为什么这叫‘调用（call）’一个函数，而不是‘启动’、‘执行’或者‘使唤’？&lt;/p>
&lt;p>这篇趣味考据&lt;a class="link" href="https://quuxplusone.github.io/blog/2025/04/04/etymology-of-call/" target="_blank" rel="noopener"
>《Why do we “call” functions?》&lt;/a>给出了一个出人意料的答案：把函数“call”出来，其实源自图书馆的“call number（索书号）”！&lt;/p>
&lt;p>作者从 StackExchange 上的一次闲聊出发，一路追到 1876 年杜威十进分类法、1947 年冯·诺依曼架构的 EDVAC 报告、1958 年 Fortran II 手册，再到 1960 年代的 Algol 规范，用大量一手文献串起了“call”这个词从“到图书馆喊一嗓子取书”到“在代码里喊一嗓子取函数”的完整演化史。&lt;/p>
&lt;h3 id="开源证件照处理程序">开源证件照处理程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-46-12.png"
width="610"
height="742"
loading="lazy"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="197px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/aoguai/LiYing" target="_blank" rel="noopener"
>LiYing&lt;/a>，是一套适用于自动化 完成一般照相馆后期证件照处理流程的照片自动处理的程序。&lt;/p>
&lt;p>可以完成人体、人脸自动识别，角度自动纠正，自动更换任意背景色，任意尺寸证件照自动裁切，并自动排版。&lt;/p>
&lt;p>完全离线运行。所有图像处理操作都在本地运行。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>人脸和人体自动识别定位，精准抠图换背景&lt;/li>
&lt;li>照片角度自动纠正，解决拍摄角度问题&lt;/li>
&lt;li>支持任意背景色替换，一键生成不同底色证件照&lt;/li>
&lt;li>多种证件照尺寸自动裁切，涵盖1寸到6寸各种规格&lt;/li>
&lt;li>智能排版功能，自动生成照片表格便于打印&lt;/li>
&lt;li>完全离线运行，保护隐私且无需网络连接&lt;/li>
&lt;/ul>
&lt;p>提供 Windows 整合包直接使用，也可通过源码安装运行。&lt;/p>
&lt;h3 id="开源视频剪辑软件">开源视频剪辑软件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-47-39.png"
width="777"
height="660"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="282px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/OpenCut-app/OpenCut" target="_blank" rel="noopener"
>OpenCut&lt;/a>，适用于 Web、桌面和移动设备的免费开源视频编辑器。&lt;/p>
&lt;p>据说是有人嫌弃收费版的 CapCut 卖的太贵，发起了这个开源项目，完全免费，功能对标 CapCut。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>Timeline-based editing 基于时间轴的编辑&lt;/li>
&lt;li>Multi-track support 多轨支持&lt;/li>
&lt;li>Real-time preview 实时预览&lt;/li>
&lt;li>No watermarks or subscriptions 无水印或订阅&lt;/li>
&lt;li>Analytics provided by Databuddy, 100% Anonymized &amp;amp; Non-invasive. 由 Databuddy 提供的分析，100%匿名和非侵入性。&lt;/li>
&lt;/ul>
&lt;h3 id="大语言模型高质量数据集汇总20255-更新">大语言模型高质量数据集汇总（2025.5 更新）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-48-07.png"
width="811"
height="817"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ninehills/blog/issues/129" target="_blank" rel="noopener"
>大语言模型高质量数据集汇总&lt;/a>，本贴收藏整理了数十份用于训练和评估大模型的数据集。&lt;/p>
&lt;h3 id="微软官方的面向初学者的ai-agent开发课程">微软官方的面向初学者的AI Agent开发课程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-48-25.png"
width="823"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/ai-agents-for-beginners" target="_blank" rel="noopener"
>11 Lessons to Get Started Building AI Agents&lt;/a>，微软官方的面向初学者的AI Agent开发课程，包含 11 个课程，涵盖了构建 AI 代理的基本知识。&lt;/p>
&lt;p>既然是面向初学者的，就有一些“21 天精通 C++”的味道。不过也算适合入门。&lt;/p>
&lt;p>课程内容目前以英文为主，后续将翻译为多国语言支持。&lt;/p>
&lt;h3 id="hugging-face-开源的智能小机器人">Hugging Face 开源的智能小机器人
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-49-08.png"
width="811"
height="455"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;p>Hugging Face 的开源小机器人 &lt;a class="link" href="https://huggingface.co/blog/reachy-mini" target="_blank" rel="noopener"
>Reachy Mini&lt;/a> ，支持 Python 编程（即将支持 JavaScript 和 Scratch），价格 299 美元起（比起国内的开源机器人可是贵了不少，我之前试过的小智机器人开发板才不到一百块钱人民币）。&lt;/p>
&lt;p>Reachy Mini 高 28 厘米，宽16 厘米（睡眠模式下约 23 厘米高），重量 1.5 公斤。&lt;/p>
&lt;p>它以套件形式提供，有 Lite 版（299 美元，不带算力板，需接 Mac、Linux，稍后支持 Windows）和正式版（449 美元，配树莓派5、电池）两种版本。&lt;/p>
&lt;p>Reachy Mini 配备摄像头、麦克风和扬声器，头部有 6 个自由度，提供了 15 种以上的机器人行为，开箱即用。&lt;/p>
&lt;h3 id="开源-raw-图像编辑器">开源 RAW 图像编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-50-46.png"
width="690"
height="389"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/CyberTimon/RapidRAW" target="_blank" rel="noopener"
>RapidRAW&lt;/a>一款美观、无损且 GPU 加速的 RAW 图像编辑器，在构建时充分考虑了性能。&lt;/p>
&lt;p>RapidRAW 是 Adobe Lightroom 的现代、高性能替代品。它以适用于 Windows、macOS 和 Linux 的轻量级软件包（小于 30MB）提供功能丰富、美观的编辑体验。&lt;/p>
&lt;p>作者在 18 岁时开发了这个项目，作为一项个人挑战。目标是在 Google Gemini 的支持下，为自己的摄影工作流程创建一个高性能工具，同时加深其对 React 和 Rust 的理解。&lt;/p>
&lt;h3 id="一个网络监控工具">一个网络监控工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-139-%E6%9C%9F/2025-07-13-08-50-55.png"
width="690"
height="442"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="374px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://sniffnet.net/" target="_blank" rel="noopener"
>Sniffnet&lt;/a>，你可以看到你机器上的流量情况，包括在和谁交换数据，并且可以深入检查网络中的情况。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 138 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/</link><pubDate>Sun, 06 Jul 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-55-49.png" alt="Featured image of post 机器文摘 第 138 期" />&lt;h1 id="机器文摘-第-138-期">机器文摘 第 138 期
&lt;/h1>&lt;h3 id="在虚拟机中启用-cpu-风扇">在虚拟机中启用 CPU 风扇
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-55-06.png"
width="641"
height="552"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="278px"
>&lt;/p>
&lt;p>一位开发者通过调用冷门系统API，成功&lt;a class="link" href="https://wbenny.github.io/2025/06/29/i-made-my-vm-think-it-has-a-cpu-fan.html" target="_blank" rel="noopener"
>欺骗虚拟机（VM）使其认为自己配备了物理CPU风扇&lt;/a>。这篇文章讲述了一个关于如何让虚拟机（VM）误以为它拥有一个CPU风扇的故事。作者通过技术手段修改了虚拟机的系统管理BIOS（SMBIOS）数据，使得虚拟机中的恶意软件检测不到它运行在虚拟环境中。&lt;/p>
&lt;p>一些恶意软件会通过检测某些硬件组件是否存在来判断是否运行在虚拟机中，因为虚拟环境通常不会完整地模拟所有硬件。其中一个常见的检测点是CPU风扇，恶意软件会通过检查WMI（Windows Management Instrumentation）中的Win32_Fan类来判断。&lt;/p>
&lt;p>作者希望通过让虚拟机“拥有”CPU风扇，来欺骗恶意软件，使其认为自己运行在物理机上，从而绕过恶意软件的虚拟机检测机制。&lt;/p>
&lt;p>SMBIOS是一个存储系统硬件信息的标准，计算机通过读取SMBIOS数据来识别硬件设备，包括CPU风扇。&lt;/p>
&lt;p>作者通过反汇编cimwin32.dll发现，Win32_Fan类通过读取SMBIOS数据（特别是类型27的条目）来获取风扇设备信息。&lt;/p>
&lt;p>作者使用dmidecode工具从物理主机上获取了CPU风扇的SMBIOS数据，并将其转换为字节格式。&lt;/p>
&lt;p>通过伪造SMBIOS数据，作者成功让虚拟机“拥有”了CPU风扇，从而欺骗了恶意软件的检测机制。这一技术不仅可以用于CPU风扇，还可以扩展到其他硬件组件和WMI类。&lt;/p>
&lt;h3 id="编写玩具软件是一种乐趣">编写玩具软件是一种乐趣
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-55-19.png"
width="690"
height="359"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.jsbarretto.com/post/software-is-joy" target="_blank" rel="noopener"
>software is joy&lt;/a>，John Barretto 在这篇短文中抛出了一个反工业化开发的清新主张：当现代软件日益被效率、规模和AI工具裹挟时，亲手编写“玩具软件”才是重新触摸编程本真快乐的密钥。&lt;/p>
&lt;p>玩具软件的本质：指那些无商业压力、纯粹为探索或乐趣而建的“无用之物”（如迷你解释器、自制渲染器）。它们剥离了工业化开发的功利性，让开发者回归“创造欲”的原点。&lt;/p>
&lt;p>费曼名言的实践：文中引用物理学家费曼的箴言——“我无法创造的东西，我就无法理解”（What I cannot create, I do not understand），直指玩具项目的终极意义：通过从零构建，开发者能穿透技术表象，抵达系统性理解的深层愉悦。&lt;/p>
&lt;p>对抗“工具化”的良药：当AI生成代码逐渐普及，被动使用工具易导致思维钝化。而玩具项目要求开发者主动设计、调试与迭代，这种全链条的创造性掌控，正是抵御“工具化”的精神锚点1。&lt;/p>
&lt;h3 id="以数据为中心的-ai-系统">以数据为中心的 AI 系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-55-49.png"
width="984"
height="432"
loading="lazy"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/OpenDCAI/DataFlow" target="_blank" rel="noopener"
>DataFlow&lt;/a>，是一个数据准备系统，旨在从噪声数据源（PDF、纯文本、低质量问答）中解析，生成，加工并评估高质量数据，以提升大语言模型（LLMs）在特定领域的表现，支持预训练、监督微调（SFT）、强化学习训练以及基于知识库的 RAG 系统。&lt;/p>
&lt;blockquote>
&lt;p>我们在医疗、金融和法律等多个垂类领域实证验证了 DataFlow 的有效性。&lt;/p>
&lt;/blockquote>
&lt;p>主要特性：&lt;/p>
&lt;ol>
&lt;li>支持多种数据源（PDF、文本、低质量问答）的解析与处理；&lt;/li>
&lt;li>提供多种预构建的高效数据处理管道；&lt;/li>
&lt;li>配备智能DataFlow-agent，可根据任务需求动态构建新管道。&lt;/li>
&lt;/ol>
&lt;h3 id="用纯-css-来做出毛玻璃效果">用纯 CSS 来做出毛玻璃效果
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-56-22.png"
width="592"
height="891"
loading="lazy"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="159px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://glass3d.dev" target="_blank" rel="noopener"
>glass3d&lt;/a>，在市面上有很多玻璃拟态生成器，但 glass3d 想把这种效果做得更进一步！这个项目是作者花费数月时间，不断尝试CSS属性层叠并与各种浏览器兼容性问题作斗争的结果。&lt;/p>
&lt;p>效果包括：&lt;/p>
&lt;ol>
&lt;li>可调节的模糊、亮度和饱和度（通过 backdrop-filter 实现）&lt;/li>
&lt;li>微妙的半透明纹理&lt;/li>
&lt;li>仿3D斜角效果（使用 box-shadow 实现，而非 outline）&lt;/li>
&lt;/ol>
&lt;p>玻璃拟态效果相当消耗（计算机）资源，因此最好只用作点缀，并避免在宽大的桌面元素上使用。它应该与最新版本的Chrome、Safari和Firefox（桌面端和移动端）兼容。&lt;/p>
&lt;h3 id="一键搬运视频工具">一键搬运视频工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-57-17.png"
width="1011"
height="366"
loading="lazy"
class="gallery-image"
data-flex-grow="276"
data-flex-basis="662px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Huanshere/VideoLingo" target="_blank" rel="noopener"
>VideoLingo&lt;/a>，这个工具使用 yt-dlp下载油管视频，然后进行AI字幕分割，AI翻译，自动增字幕，使用大模型进行配音。实现了一个全流程的搬运工具。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>🎥 使用 yt-dlp 从 Youtube 链接下载视频&lt;/li>
&lt;li>🎙️ 使用 WhisperX 进行单词级和低幻觉字幕识别&lt;/li>
&lt;li>📝 使用 NLP 和 AI 进行字幕分割&lt;/li>
&lt;li>📚 自定义 + AI 生成术语库，保证翻译连贯性&lt;/li>
&lt;li>🔄 三步直译、反思、意译，实现影视级翻译质量&lt;/li>
&lt;li>✅ 按照 Netflix 标准检查单行长度，绝无双行字幕&lt;/li>
&lt;li>🗣️ 支持 GPT-SoVITS、Azure、OpenAI 等多种配音方案&lt;/li>
&lt;li>🚀 一键启动，在 streamlit 中一键出片&lt;/li>
&lt;li>🌍 多语言支持就绪的 streamlit UI&lt;/li>
&lt;li>📝 详细记录每步操作日志，支持随时中断和恢复进度&lt;/li>
&lt;/ul>
&lt;p>与同类项目相比的优势：绝无多行字幕，最佳的翻译质量，无缝的配音体验&lt;/p>
&lt;h3 id="集成在-ide-中的开源-ai-设计-agent">集成在 IDE 中的开源 AI 设计 Agent
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-58-32.png"
width="542"
height="625"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="208px"
>
&lt;a class="link" href="https://github.com/superdesigndev/superdesign" target="_blank" rel="noopener"
>SuperDesign&lt;/a>，可直接在 IDE 中生成 UI 设计。&lt;/p>
&lt;p>通过自然语言提示就能生成完整的 UI 界面、可复用组件和线框图，并支持 Cursor、Windsurf、VS Code 等主流 AI 编辑器。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>产品界面生成：通过单个提示即可创建完整 UI 界面&lt;/li>
&lt;li>UI 组件创建：生成可直接使用的可复用组件&lt;/li>
&lt;li>线框图绘制：快速探索低保真度布局设计&lt;/li>
&lt;li>设计分支和迭代：轻松复制和改进现有设计&lt;/li>
&lt;li>提示词转代码：将设计提示直接复制到 AI IDE 中&lt;/li>
&lt;/ul>
&lt;p>通过 Cursor/VS Code 市场安装插件即可使用，其中设计文件本地存储在 .superdesign/ 目录中。&lt;/p>
&lt;h3 id="从零开始构建-ai-agent-的完整教程指南">从零开始构建 AI Agent 的完整教程指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-138-%E6%9C%9F/2025-07-06-07-59-19.png"
width="735"
height="477"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/langchain-ai/agents-from-scratch" target="_blank" rel="noopener"
>Agents From Scratch&lt;/a>，LangChain 官方团队开放了一份从零开始构建 AI Agent 的完整教程指南。通过构建一个能管理邮件的智能助手，循序渐进地教授代理构建、评估、人机交互和记忆机制等核心技术，最终能连接真实的 Gmail API。&lt;/p>
&lt;p>主要内容：&lt;/p>
&lt;ul>
&lt;li>从基础智能代理到高级功能的完整学习路径&lt;/li>
&lt;li>实战构建邮件助手项目，包含邮件分类和自动回复&lt;/li>
&lt;li>智能代理评估方法，使用 LLM 作为评判器&lt;/li>
&lt;li>人机交互机制，支持用户审核关键操作&lt;/li>
&lt;li>记忆系统实现，让代理能学习和适应用户偏好&lt;/li>
&lt;li>Gmail API 集成和部署指南，可投入实际使用&lt;/li>
&lt;/ul>
&lt;p>适合想学习 AI Agent 开发的 AI 开发者，提供了完整的开发环境配置和测试方案。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 137 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/</link><pubDate>Sun, 29 Jun 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-08-59-21.png" alt="Featured image of post 机器文摘 第 137 期" />&lt;h1 id="机器文摘-第-137-期">机器文摘 第 137 期
&lt;/h1>&lt;h3 id="新手如何编写-linux-设备驱动程序">新手如何编写 Linux 设备驱动程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-08-57-40.png"
width="690"
height="511"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://crescentro.se/posts/writing-drivers/" target="_blank" rel="noopener"
>《编写基本的 Linux 设备驱动程序》&lt;/a>，展示了从零开始为特定 USB 设备开发 Linux 用户空间驱动的完整过程，包括前期的知识储备、工具使用、与内核驱动的交互、代码实现与调试等，对想了解 USB 设备驱动开发的读者有较大参考价值。&lt;/p>
&lt;p>作者因购买的 Nanoleaf Pegboard Desk Dock 仅支持 Windows 和 macOS，决定为其开发 Linux 驱动，尽管此前对 Linux 驱动和 USB 知识几乎一无所知。&lt;/p>
&lt;p>通过逆向工程官方驱动和联系厂商获取协议文档，作者选择用 Rust 语言结合 rusb 库编写用户空间驱动，而非内核驱动。&lt;/p>
&lt;p>在开发中，作者创建 udev 规则获取设备访问权限，通过 lsusb 查看设备信息，使用 rusb 库的相应方法实现设备的接口声明、数据发送与接收，并处理了内核驱动占用设备的问题。&lt;/p>
&lt;h3 id="用280个字符建模世界">用280个字符建模世界
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-08-57-53.png"
width="690"
height="508"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tympanus.net/codrops/2025/06/23/modeling-the-world-in-280-characters/" target="_blank" rel="noopener"
>《Modeling the World in 280 Characters》&lt;/a>，这篇文章主要讲述了作者作为一名图形程序员，热衷于编写 280 字符以内的 GLSL 代码片段（即 “代码高尔夫”），并通过分享自己的创作过程、动机和相关技巧，鼓励读者尝试这一有趣的编程方式。&lt;/p>
&lt;p>作者 &lt;a class="link" href="https://xordev.com/" target="_blank" rel="noopener"
>Xor&lt;/a> 是一名图形程序员，负责视频效果等的开发，他喜欢编写紧凑的着色器程序，认为这一过程充满乐趣、挑战，还能激发对图形编程的兴趣并推动学习发现。同时，他通过此结识了众多有趣的人。&lt;/p>
&lt;p>着色器运行在 GPU 上而非 CPU，碎片着色器（片段着色器）是 “推特着色器” 的类型，主要功能是根据输入的片段坐标输出颜色和不透明度。&lt;/p>
&lt;p>作者以写 “Milky” 星星着色器为例(可在&lt;a class="link" href="https://twigl.app/%e4%bd%93%e9%aa%8c" target="_blank" rel="noopener"
>twigl.app&lt;/a>)，介绍了创作思路，包括确定初始想法、进行中心化与缩放以适应不同分辨率和宽高比、循环创建环绕中心的点光源、添加发光效果、运用三角函数确定粒子位置、使用正弦波进行着色等步骤，还强调了代码高尔夫需要平衡多方面因素。&lt;/p>
&lt;h3 id="电子书principles-of-programming-languages编程语言原理">电子书《Principles of Programming Languages》编程语言原理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-08-58-35.png"
width="363"
height="475"
loading="lazy"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="183px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pl.cs.jhu.edu/pl/book/book.pdf" target="_blank" rel="noopener"
>《编程语言原理》&lt;/a>是由 Mike Grant、Zachary Palmer 和 Scott Smith 编写的教材，主要面向计算机科学专业的高年级本科生和研究生。内容涉及编程语言的核心概念、设计原则和实现技术，涵盖了从基础的函数式编程到高级的并发编程和类型系统等多个方面。&lt;/p>
&lt;blockquote>
&lt;p>“在这本书中，我们的目标是研究编程语言中的基本概念，而不是学习一系列特定的语言。语言易于学习，难的是理解它们背后的概念。我们依次研究的基本特性包括高阶函数、以记录和变量形式的数据结构、可变状态、异常、对象和类以及类型。我们还研究语言实现，包括语言解释器和语言编译器。在整本书中，我们为玩具语言编写小型解释器，而在第8章，我们编写了一个有原则的编译器。我们定义类型检查器来确定哪些程序是类型正确的，哪些不是。我们还通过操作语义和类型系统的概念，对解释器和类型检查器进行了更精确、数学化的理解。这两个概念历史上是从逻辑学家对编程的视角演变而来的。”&lt;/p>
&lt;/blockquote>
&lt;h3 id="图形化编程教育游戏机">图形化编程教育游戏机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-08-59-21.png"
width="824"
height="417"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="474px"
>
&lt;a class="link" href="https://github.com/ScratchArcade/arcade-lite" target="_blank" rel="noopener"
>Scratch Arcade&lt;/a>，这是一款针对少儿编程可编程游戏机硬件产品，解决当前Scratch教学模式单一，程序模版化，没有硬件关联，导致学生兴趣下滑。这款产品将完全弥补这些不足，提升教学内容的丰富性，程序的多样性和变化性，学生的成就感获得完全提升，并且完全不改变现在已有的教学内容，完全拿来即用。&lt;/p>
&lt;blockquote>
&lt;p>“目前市面上图形化编程教育游戏机大多是基于MakeCode Arcade设计，但MakeCode并不符合中国教育环境，大部分人只熟悉Scratch图形编程，于是诞生了这个基于Scratch设计的游戏机。”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>“本人从小就热爱玩游戏，并从事游戏开发工作十多年，自2018年开始接触到Scratch少儿编程，一开始只是完成由游戏开发者到少儿编程教育工作者转型。由于工作关系接触到了开源硬件micro:bit, 偶然发现micro:bit V2加上LCD屏幕可以使用MakeCode Arcade图形化工具来开发游戏。任何人真的可以通过图形化的工具给自己制作开发游戏还可以下载到游戏机里面去玩。接触这个软件后对我一个传统游戏开发者来说是非常震惊的，于是立马淘宝上买了一个回来玩，玩了一阵子后，职业的原因让我发现了一些用户体验问题，MakeCode Arcade编程所有的游戏场景，背景，元素全部在一个主程序里面，并且控制器都要依赖游戏机本身的硬件，这样导致游戏程序的编写难度偏大。别说是小朋友和新手用户，就算是我这个游戏开发多年的人来说都感觉有点绕，MakeCode Arcade还是有一种程序员在做游戏开发的影子在里面。相比而言Scratch游戏编程就显得简单很多，常用图标，声音元素可以直接使用自带的或者电脑上传，不需要全部靠编程去实现。不同角色可以独立模块化编程，无论是编程框架还是编程思想，用户都能很容易理解。我在实际教学应用中也验证了这点，教学难度Scratch远低于MakeCode Arcade。”&lt;/p>
&lt;/blockquote>
&lt;h3 id="开源智能客服-agent">开源智能客服 Agent
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-09-00-07.png"
width="826"
height="402"
loading="lazy"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="493px"
>
&lt;a class="link" href="https://github.com/openai/openai-cs-agents-demo" target="_blank" rel="noopener"
>openai-cs-agents-demo&lt;/a>，OpenAI 开源的一个客服 Agent 演示 Demo，值得一看，对我们构建一套 AI 客服系统有一定启发。&lt;/p>
&lt;p>基于 OpenAI Agents SDK 构建，一套航空公司智能客服系统，内置多个 Agent，系统能自动识别问题类型并路由给对应的专业 Agent。&lt;/p>
&lt;p>主要有如下 Agent 组成，实现完善的航空客服系统：&lt;/p>
&lt;ul>
&lt;li>智能分流 Agent，自动识别并路由不同类型客户请求&lt;/li>
&lt;li>专业座位预订 Agent，处理座位更改和互动座位图&lt;/li>
&lt;li>航班状态 Agent，提供实时航班信息查询&lt;/li>
&lt;li>FAQ Agent，回答常见问题和机型信息&lt;/li>
&lt;li>取消服务 Agent，处理退票和改签业务&lt;/li>
&lt;/ul>
&lt;p>同时提供了安全防护机制，防止越狱攻击和无关话题。&lt;/p>
&lt;h3 id="用-pytorch-重新实现-stable-diffusion-35-模型">用 PyTorch 重新实现 Stable Diffusion 3.5 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-09-00-31.png"
width="692"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="357px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/yousef-rafat/miniDiffusion" target="_blank" rel="noopener"
>miniDiffusion&lt;/a>，它以最少的代码（约2800行）从头开始复现Stable Diffusion 3.5，包括从VAE到DiT以及训练和数据集脚本。项目包含核心图像生成模块、文本编码器、字节对和单体分词器等组件，还提供训练和推理脚本。该项目用于教育和实验目的。&lt;/p>
&lt;h3 id="构建语音-ai-agent-的框架库">构建语音 AI Agent 的框架库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-137-%E6%9C%9F/2025-06-29-09-01-37.png"
width="669"
height="398"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="403px"
>
&lt;a class="link" href="https://github.com/livekit/agents" target="_blank" rel="noopener"
>livekit/agents&lt;/a>，这个库包括了语音转文本、大型语言模型、文本转语音和实时 API，甚至还包括各种检测用户开始说话，停止说话，与手机电话集成等等各种实用的微型模型和脚本。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 136 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/</link><pubDate>Sun, 22 Jun 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-23-29.png" alt="Featured image of post 机器文摘 第 136 期" />&lt;h1 id="机器文摘-第-136-期">机器文摘 第 136 期
&lt;/h1>&lt;h3 id="用收据打印机管理任务">用收据打印机管理任务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-21-07.png"
width="690"
height="520"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://joshworth.com/dev/pixelspace/pixelspace_solarsystem.html" target="_blank" rel="noopener"
>《收据打印机治好了我的拖延症》&lt;/a>，这篇文章的作者分享了自己如何借助热敏式收据打印机克服拖延症并提升生产力的心路历程。&lt;/p>
&lt;p>作者曾因拖延症导致健康问题和事业失败，但在深入研究视频游戏的成瘾机制后，发现游戏通过即时反馈和重复的游戏循环让人们沉浸其中。&lt;/p>
&lt;p>他将这一原理应用于自己的日常生活，通过将任务分解成小步骤并使用便签纸记录任务完成情况，创造出即时反馈的机制。&lt;/p>
&lt;p>然而，手写便签的繁琐促使他采用热敏式收据打印机打印每日任务，实现快速、批量的任务管理。&lt;/p>
&lt;p>最终，作者通过开发自定义软件与打印机结合，构建了一套高效的生产力系统，显著提升了工作效率并摆脱了低效拖延的困扰。&lt;/p>
&lt;p>这种方法不仅对作者个人产生了积极影响，也提供了对科技如何辅助个人提升生产力的创新思考。&lt;/p>
&lt;h3 id="如果月球只有-1-个像素">如果月球只有 1 个像素
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-21-21.png"
width="690"
height="589"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://joshworth.com/dev/pixelspace/pixelspace_solarsystem.html" target="_blank" rel="noopener"
>一个乏味而精确的太阳系模型&lt;/a>，个项目以一种直观且颇具创意的方式，展示了太阳系行星之间的浩瀚距离。&lt;/p>
&lt;p>它通过一个互动式的太阳系模型，使我们仿佛在太空中旅行，体验从地球到其他行星的漫长旅程。&lt;/p>
&lt;p>太阳系中大部分区域实际上是空无一物的，这也是为什么大多数太阳系地图无法按比例绘制的原因。&lt;/p>
&lt;p>作者通过生动的比喻和数据，强调了行星之间距离的遥远以及太阳系中 “空无一物” 的本质。&lt;/p>
&lt;p>尽管我们可能无法完全理解这些巨大的空间尺度，但正是这些渺小的行星和恒星的存在，让我们在这广阔的宇宙中显得尤为珍贵。&lt;/p>
&lt;h3 id="开源-ai-agents-开发框架">开源 AI Agents 开发框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-22-40.png"
width="839"
height="727"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>
&lt;a class="link" href="https://github.com/strands-agents/tools" target="_blank" rel="noopener"
>Strands Agents Tools&lt;/a>，仅需几行代码就能构建出强大的智能助手。&lt;/p>
&lt;p>提供了 30 多种实用工具，涵盖文件操作、系统命令、HTTP 请求、Python 执行等核心功能，还支持集群智能协调多个代理解决复杂问题。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>文件读写编辑，支持语法高亮和智能修改&lt;/li>
&lt;li>Shell 命令执行和系统交互，确保安全性&lt;/li>
&lt;li>HTTP 客户端和 AWS 服务集成，轻松对接外部 API&lt;/li>
&lt;li>Python 代码执行，带状态持久化和安全确认&lt;/li>
&lt;li>批量工具并行调用，大幅提升处理效率&lt;/li>
&lt;li>内存管理和任务调度，提供完整的代理生命周期支持&lt;/li>
&lt;/ul>
&lt;h3 id="自动生成软著申请文档">自动生成软著申请文档
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-23-04.png"
width="845"
height="729"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="278px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.textimagecraft.com/zh/ruanzhu" target="_blank" rel="noopener"
>ruanzhu&lt;/a>，一键生成软著申请所需文档，可导出 MD 文件。&lt;/p>
&lt;h3 id="麻省理工免费电子书">麻省理工免费电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-23-29.png"
width="690"
height="774"
loading="lazy"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="213px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://visionbook.mit.edu/" target="_blank" rel="noopener"
>《计算机视觉基础》&lt;/a>，本书涵盖了计算机视觉领域的基础主题，并从图像处理和机器学习的角度进行讲解。我们希望培养读者的直觉，因此本书包含了许多可视化效果。本书的读者对象是即将进入该领域的本科生和研究生，但我​​们希望经验丰富的从业者也能从本书中受益。&lt;/p>
&lt;blockquote>
&lt;p>我们最初的目标是写一本涵盖该领域的厚书。可惜的是，计算机视觉领域实在太庞大，我们无法做到这一点。因此，我们决定写一本小书，每章不超过五页。这样的目标迫使我们真正专注于理解每个主题所需的重要概念。写一本短书非常合适，因为我们没有时间写长书，而且读者也没有时间阅读。可惜的是，我们也未能实现这个目标。&lt;/p>
&lt;/blockquote>
&lt;h3 id="生产级智能体">生产级智能体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-24-23.png"
width="847"
height="815"
loading="lazy"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="249px"
>
&lt;a class="link" href="https://github.com/NirDiamant/agents-towards-production" target="_blank" rel="noopener"
>Agents Towards Production&lt;/a>，是一个开源项目，帮助开发者将AI代理从概念转化为实际产品。&lt;/p>
&lt;p>提供了一系列的教程、工具和代码示例，涵盖从零到生产部署的全过程。这些教程包括编排、工具集成、可观测性、部署、安全等多个方面，旨在帮助开发者快速从概念验证转向生产环境。&lt;/p>
&lt;p>项目还提供了详细的文档和代码，方便开发者学习和应用。&lt;/p>
&lt;h3 id="李宏毅深度学习教程">李宏毅深度学习教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-136-%E6%9C%9F/2025-06-22-09-24-56.png"
width="583"
height="540"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="259px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/datawhalechina/leedl-tutorial" target="_blank" rel="noopener"
>LeeDL-Tutorial（苹果书）&lt;/a>，李宏毅老师是台湾大学的教授，其《机器学习》（2021年春）是深度学习领域经典的中文视频之一。&lt;/p>
&lt;p>李老师幽默风趣的授课风格深受大家喜爱，让晦涩难懂的深度学习理论变得轻松易懂，他会通过很多动漫相关的有趣例子来讲解深度学习理论。&lt;/p>
&lt;p>李老师的课程内容很全面，覆盖了到深度学习必须掌握的常见理论，能让学生对于深度学习的绝大多数领域都有一定了解，从而可以进一步选择想要深入的方向进行学习，培养深度学习的直觉，对于想入门深度学习又想看中文讲解的同学是非常推荐的。&lt;/p>
&lt;p>本教程主要内容源于《机器学习》（2021年春），并在其基础上进行了一定的原创。&lt;/p>
&lt;p>比如，为了尽可能地降低阅读门槛，笔者对这门公开课的精华内容进行选取并优化，对所涉及的公式都给出详细的推导过程，对较难理解的知识点进行了重点讲解和强化，以方便读者较为轻松地入门。&lt;/p>
&lt;p>此外，为了丰富内容，笔者在教程中选取了《机器学习》（2017年春） 的部分内容，并补充了不少除这门公开课之外的深度学习相关知识。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 135 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/</link><pubDate>Sun, 15 Jun 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-17-06.png" alt="Featured image of post 机器文摘 第 135 期" />&lt;h1 id="机器文摘-第-135-期">机器文摘 第 135 期
&lt;/h1>&lt;h3 id="跨平台现代文件管理器">跨平台现代文件管理器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-13-45.png"
width="1782"
height="1090"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="392px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/gtsteffaniak/filebrowser" target="_blank" rel="noopener"
>FileBrowser Quantum&lt;/a>，最好的免费自托管基于 Web 的文件管理器。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>实时搜索和文件监控，边输入边显示结果&lt;/li>
&lt;li>支持多个文件源同时管理，告别单一目录限制&lt;/li>
&lt;li>Office 和视频文件在线预览，无需下载查看&lt;/li>
&lt;li>OIDC、密码+2FA 等多种登录方式保障安全&lt;/li>
&lt;li>开发者 API 支持，可集成到自己的项目中&lt;/li>
&lt;li>文件夹大小显示和高级过滤搜索功能&lt;/li>
&lt;/ul>
&lt;p>在项目发布页面提供了开箱即用安装包，支持 Windows、macOS 和 Linux 系统。&lt;/p>
&lt;h3 id="本周最新最火的-ocr-模型工具箱">本周最新最火的 OCR 模型工具箱
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-14-26.png"
width="1078"
height="623"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="415px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/allenai/olmocr" target="_blank" rel="noopener"
>olmOCR&lt;/a>，将 PDF 和其他基于图像的文档格式转换为干净、可读、纯文本格式的工具包。&lt;/p>
&lt;p>仅仅 3B 参数，性能超越 Gemini 2.5 Pro 等闭源模型，不仅能精确识别文字、公式和表格，还能保持原有的文档结构和布局关系。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>将基于 PDF、PNG 和 JPEG 的文档转换为干净的 Markdown&lt;/li>
&lt;li>支持方程式、表格、手写和复杂格式&lt;/li>
&lt;li>自动删除页眉和页脚&lt;/li>
&lt;li>转换为具有自然阅读顺序的文本，即使存在图形、多列布局和插图&lt;/li>
&lt;li>高效，每转换一百万页的成本不到 200 美元&lt;/li>
&lt;li>基于 7B 参数 VLM，因此需要 GPU&lt;/li>
&lt;/ul>
&lt;h3 id="人工智能工程中心">人工智能工程中心
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-15-19.png"
width="674"
height="655"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/patchy631/ai-engineering-hub" target="_blank" rel="noopener"
>AI Engineering Hub&lt;/a>，有关 LLM、RAG 和真实世界 AI 代理应用的深入教程。&lt;/p>
&lt;p>人工智能工程正在快速发展，保持领先地位需要深刻的理解和实践经验。在这里，您将了解：&lt;/p>
&lt;ul>
&lt;li>关于 LLM 和 RAG 的深入教程；&lt;/li>
&lt;li>现实世界的智能体应用程序；&lt;/li>
&lt;li>在您的项目中实施、调整和扩展的示例；&lt;/li>
&lt;/ul>
&lt;p>无论您是初学者、从业者还是研究人员，此 repo 都为各个技能水平的人员提供了资源，以便他们在 AI 工程中进行实验并取得成功。&lt;/p>
&lt;h3 id="线性代数开源书籍">线性代数开源书籍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-15-46.png"
width="510"
height="607"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="201px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Visualize-ML/Linear-Algebra-Made-Easy---Learn-with-Python-and-Visualization" target="_blank" rel="noopener"
>”数学不难“ 之 《线性代数不难》上下册&lt;/a>，一本让学习线性代数变得生动有趣的开源书籍，分为上下两册从基础到高阶内容，通过大量几何图形和动画展示向量、矩阵、特征值分解等数学概念。&lt;/p>
&lt;p>配有 Python 实战示例，可直接运行的 .ipynb 文件，通过动手实践对抽象理论知识有更深刻的理解。&lt;/p>
&lt;p>适合想系统掌握线性代数并应用到数据分析、机器学习领域的开发者学习。&lt;/p>
&lt;h3 id="一个-rag-教学项目">一个 RAG 教学项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-16-41.png"
width="790"
height="579"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://github.com/fareedkhan-dev/all-rag-techniques" target="_blank" rel="noopener"
>all-rag-techniques&lt;/a>，采用了一种清晰、亲身实践的方法来讲解检索增强生成（RAG），将各种先进技术分解为直截了当、易于理解的实现。这里的所有内容都是使用我们熟悉的 Python 库（如 openai、numpy、matplotlib 及其他几个库）构建的，而不是依赖 LangChain 或 FAISS 等框架。&lt;/p>
&lt;p>目标很简单：提供可读、可修改且具有教育意义的代码。通过专注于基础原理，本项目旨在揭开 RAG 的神秘面紗，让您更容易理解其真实的工作原理。&lt;/p>
&lt;h3 id="为大语言模型提供高效知识蒸馏的工具包">为大语言模型提供高效知识蒸馏的工具包
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-17-06.png"
width="807"
height="638"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/modelscope/easydistill" target="_blank" rel="noopener"
>EasyDistill&lt;/a>，帮助研究人员和开发者轻松实现大语言模型的知识蒸馏，将复杂的大模型性能迁移到小模型中。&lt;/p>
&lt;p>EasyDistill 提供了一个多功能且用户友好的平台来简化知识蒸馏过程，支持黑盒和白盒两种方法。它促进高效的模型训练，使较小的模型能够在不损失准确性的情况下模拟较大模型的性能。EasyDistill 拥有广泛的功能特性，包括数据合成、监督微调、排序优化和强化学习，所有这些都针对各种知识蒸馏场景进行了定制。该工具包设计用于适应系统1（快速、直觉）和系统2（缓慢、分析）认知模型，具有模块化和易于使用的特点，配备简单的命令行界面来指导用户。除了学术探索之外，EasyDistill 还锚定实际的工业解决方案，提供强大的蒸馏模型和开源数据集，同时展示与阿里云AI平台PAI的无缝集成。致力于连接理论进步与实际需求，EasyDistill 赋能NLP社区，使最先进的知识蒸馏策略对研究人员和行业从业者都变得可及。&lt;/p>
&lt;p>亮点：&lt;/p>
&lt;ol>
&lt;li>支持黑箱和白箱蒸馏方法；&lt;/li>
&lt;li>提供数据合成、监督微调、强化学习等多种功能；&lt;/li>
&lt;li>与阿里云PAI平台无缝集成&lt;/li>
&lt;/ol>
&lt;h3 id="离线开源语音识别工具包">离线开源语音识别工具包
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-135-%E6%9C%9F/2025-06-15-09-18-13.png"
width="786"
height="487"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/alphacep/vosk-api" target="_blank" rel="noopener"
>vosk&lt;/a>，支持 20 多种语言识别，模型仅 50MB 却能提供连续大词汇量转录，还支持流式 API 和说话人识别等高级功能。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持英语、中文、俄语、德语、法语等 20+ 种语言&lt;/li>
&lt;li>完全离线运行，无需网络连接和 API 费用&lt;/li>
&lt;li>零延迟响应，提供流式 API 接口&lt;/li>
&lt;li>模型小巧（50MB）支持连续大词汇量转录&lt;/li>
&lt;li>支持说话人识别和可重新配置词汇表&lt;/li>
&lt;li>提供 Python、Java、C++、Node.js 等多语言绑定&lt;/li>
&lt;li>适用于聊天机器人、智能家居、字幕生成等场景&lt;/li>
&lt;/ul>
&lt;p>提供了详细安装说明和使用示例，可通过官网下载对应语言模型。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 134 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/</link><pubDate>Sun, 08 Jun 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-18-40.png" alt="Featured image of post 机器文摘 第 134 期" />&lt;h1 id="机器文摘-第-134-期">机器文摘 第 134 期
&lt;/h1>&lt;h3 id="教你从头从与非门开始构建一台计算机的游戏">教你从头（从与非门开始）构建一台计算机的游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-16-08.png"
width="937"
height="912"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.nandgame.com/" target="_blank" rel="noopener"
>欢迎来到 Nand 游戏世界&lt;/a>，你将从基础部件开始组装一台计算机。&lt;/p>
&lt;p>游戏包含一系列关卡。在每一关里，你需要按照要求构建一个功能符合规范的组件，该组件可在后续关卡中作为基础模块使用。&lt;/p>
&lt;p>本游戏无需预先掌握计算机架构或软件知识，数学方面也只需用到加减法即可。（不过需要一定耐心——部分关卡可能需要花些时间才能破解！）&lt;/p>
&lt;p>你的首要任务是制作一个与非门元件。&lt;/p>
&lt;h3 id="又一个强大的开源-tts-模型">又一个强大的开源 TTS 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-16-47.png"
width="749"
height="823"
loading="lazy"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="218px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/resemble-ai/chatterbox" target="_blank" rel="noopener"
>Chatterbox TTS&lt;/a>，基于 0.5B Llama 架构训练，不仅支持零样本语音克隆，还独创了情感夸张控制功能，能够让合成语音更生动有趣。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>零样本文本转语音，无需训练即可模仿任何声音&lt;/li>
&lt;li>情感夸张控制，可调节语音的戏剧化程度&lt;/li>
&lt;li>超稳定对齐推理，确保输出质量始终如一&lt;/li>
&lt;li>内置声音转换脚本，轻松实现声音克隆&lt;/li>
&lt;li>内置 PerTh 水印保护，防止恶意使用&lt;/li>
&lt;li>在盲测中击败 ElevenLabs，质量有保障&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://huggingface.co/spaces/ResembleAI/Chatterbox" target="_blank" rel="noopener"
>在线体验 Chatterbox TTS&lt;/a>。&lt;/p>
&lt;h3 id="自托管专业级语音合成服务">自托管专业级语音合成服务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-17-37.png"
width="810"
height="728"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>
&lt;a class="link" href="https://github.com/devnen/Chatterbox-TTS-Server" target="_blank" rel="noopener"
>Chatterbox-TTS-Server&lt;/a>，基于 &lt;a class="link" href="https://github.com/resemble-ai/chatterbox" target="_blank" rel="noopener"
>Chatterbox TTS&lt;/a> 模型构建，提供可视化 Web 界面和完整 API，支持声音克隆、智能长文本分块处理，还有 GPU 加速。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>提供 Web UI 界面，支持文本输入和参数调节&lt;/li>
&lt;li>支持声音克隆功能，可上传参考音频生成相似声音&lt;/li>
&lt;li>预定义声音库，提供多种高质量合成声音选择&lt;/li>
&lt;li>智能长文本处理，自动分块避免生成限制&lt;/li>
&lt;li>OpenAI 兼容 API 接口，方便集成到现有项目&lt;/li>
&lt;li>支持GPU 加速和 Docker 部署，性能强劲易于部署&lt;/li>
&lt;/ul>
&lt;h3 id="基于视频文件存储-ai-的记忆">基于视频文件存储 AI 的记忆
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-18-08.png"
width="830"
height="555"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>&lt;/p>
&lt;p>把用于 AI 模型的向量数据存储在视频里？&lt;a class="link" href="https://github.com/olow304/memvid" target="_blank" rel="noopener"
>Memvid&lt;/a>，颠覆传统的向量数据库处理方式，直接将文本数据编码成视频文件。&lt;/p>
&lt;p>通过将数百万文本块压缩到单个 MP4 文件中，不仅实现了 10 倍的存储压缩率，还能在亚秒级时间内完成语义搜索，完全无需数据库服务器。&lt;/p>
&lt;p>项目内置对话功能，可与知识库进行上下文感知的对话，同时支持直接导入 PDF 文档并自动索引处理。&lt;/p>
&lt;p>可完全离线工作，视频生成后无需网络连接。&lt;/p>
&lt;h3 id="一键生成手写文稿">一键生成手写文稿
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-18-40.png"
width="703"
height="696"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="242px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.autohanding.com/" target="_blank" rel="noopener"
>autohanding&lt;/a>，一键生成手写文稿，模仿真实笔迹。支持多种字体选择与纸张背景设置，用户可上传 Word 文件并进行个性化调整，打印出高质量的手写效果，满足各种需求。&lt;/p>
&lt;p>支持以指定概率进行随机文字涂改。&lt;/p>
&lt;p>支持设置文字凌乱度。&lt;/p>
&lt;h3 id="可视化-gpt-2-小模型的注意力矩阵">可视化 GPT-2 “小模型”的注意力矩阵
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-19-55.png"
width="927"
height="882"
loading="lazy"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://amanvir.com/gpt-2-attention" target="_blank" rel="noopener"
>gpt-2-attention&lt;/a>，这个网站可以可视化 GPT-2（小模型）生成文本时的每一个注意力权重矩阵。&lt;/p>
&lt;h3 id="从零实现高斯泼溅-3d-渲染">从零实现高斯泼溅 3D 渲染
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-134-%E6%9C%9F/2025-06-08-08-22-15.png"
width="853"
height="847"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/guoriyue/3dgs-warp-scratch" target="_blank" rel="noopener"
>3D Gaussian Splatting with NVIDIA Warp&lt;/a>，用Python从零构建3D高斯绘制，无需CUDA即可在CPU/GPU上运行。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ol>
&lt;li>无需复杂CUDA设置，无缝切换CPU/GPU；&lt;/li>
&lt;li>代码简洁易懂，适合学习现代图形学；&lt;/li>
&lt;li>仅需Python和NVIDIA Warp，无需昂贵GPU。&lt;/li>
&lt;/ol>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 133 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/</link><pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-46-39.png" alt="Featured image of post 机器文摘 第 133 期" />&lt;h1 id="机器文摘-第-133-期">机器文摘 第 133 期
&lt;/h1>&lt;h3 id="多模态智能体训练方法">多模态智能体训练方法
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-38-11.png"
width="1010"
height="479"
loading="lazy"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="506px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://arxiv.org/pdf/2505.14246" target="_blank" rel="noopener"
>Visual Agentic Reinforcement Fine-Tuning&lt;/a>，上海交大、上海 AI Lab、港中文、武汉大学的研究团队最新推出的多模态智能体训练方法，专为赋予视觉语言模型（LVLMs）以「工具智能体」能力而设计。&lt;/p>
&lt;p>&lt;a class="link" href="https://weibo.com/ttarticle/p/show?id=2309405170925888209091" target="_blank" rel="noopener"
>机器之心解读这篇论文的文章&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Visual-ARFT 让模型不仅能看图、能理解，还能「动脑推理、动手操作」，主要包括以下三个方面的核心能力：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>模型能够自动调用搜索引擎查资料或者编写并执行 Python 代码处理图像；
面对复杂任务，能够自主拆解问题、规划步骤、调用合适工具完成任务；
支持多步推理、多模态输入，具备强大的跨模态泛化能力！&lt;/p>
&lt;/blockquote>
&lt;h3 id="开源跨平台智能对话机器人">开源跨平台智能对话机器人
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-41-34.png"
width="1389"
height="891"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="374px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com//zhayujie/chatgpt-on-wechat" target="_blank" rel="noopener"
>chatgpt-on-wechat&lt;/a>，基于大模型搭建的聊天机器人，同时支持 微信公众号、企业微信应用、飞书、钉钉 等接入，可选择 GPT4.1/GPT-4o/GPT-o1/ DeepSeek/Claude/文心一言/讯飞星火/通义千问/ Gemini/GLM-4/Kimi/LinkAI，能处理文本、语音和图片，访问操作系统和互联网，支持基于自有知识库进行定制企业智能客服。&lt;/p>
&lt;p>支持的功能如下：&lt;/p>
&lt;ul>
&lt;li>✅ 多端部署： 有多种部署方式可选择且功能完备，目前已支持微信公众号、企业微信应用、飞书、钉钉等部署方式&lt;/li>
&lt;li>✅ 基础对话： 私聊及群聊的消息智能回复，支持多轮会话上下文记忆，支持 GPT-4o系列, GPT-4.1系列, Claude, Gemini, 文心一言, 讯飞星火, 通义千问，ChatGLM-4，Kimi, MiniMax, GiteeAI, ModelScope&lt;/li>
&lt;li>✅ 语音能力： 可识别语音消息，通过文字或语音回复，支持 azure, baidu, google, openai(whisper/tts) 等多种语音模型&lt;/li>
&lt;li>✅ 图像能力： 支持图片生成、图片识别、图生图（如照片修复），可选择 Dall-E-3, stable diffusion, replicate, midjourney, CogView-3, vision模型&lt;/li>
&lt;li>✅ 丰富插件： 支持自定义插件扩展，已实现多角色切换、文字冒险、敏感词过滤、聊天记录总结、文档总结和对话、联网搜索等插件&lt;/li>
&lt;li>✅ Agent能力： 支持访问浏览器、终端、文件系统、搜索引擎等各类工具，并可通过多智能体协作完成复杂任务，基于 AgentMesh 框架实现&lt;/li>
&lt;li>✅ 知识库： 通过上传知识库文件自定义专属机器人，可作为数字分身、智能客服、私域助手使用，基于 LinkAI 实现&lt;/li>
&lt;/ul>
&lt;h3 id="通过游戏学习-javascript-编程">通过游戏学习 Javascript 编程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-42-03.png"
width="690"
height="812"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="203px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://warriorjs.com/" target="_blank" rel="noopener"
>warriorjs&lt;/a>，一个通过游戏来学习 js 的网站​​​。&lt;/p>
&lt;h3 id="在安卓手机上跑本地大模型">在安卓手机上跑本地大模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-46-39.png"
width="748"
height="492"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="364px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/google-ai-edge/gallery" target="_blank" rel="noopener"
>Google AI Edge Gallery&lt;/a>，谷歌发布的一个开源安卓应用，专门跑他们的本地模型。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>完全离线使用&lt;/li>
&lt;li>支持多模态理解&lt;/li>
&lt;/ul>
&lt;p>可以直接试用前几天发布的端侧多模态模型 Gemma 3n&lt;/p>
&lt;h3 id="基于-markdown-的开源排版系统">基于 Markdown 的开源排版系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-43-00.png"
width="804"
height="495"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/iamgio/quarkdown" target="_blank" rel="noopener"
>Quarkdown&lt;/a>，是一个集成了 Markdown 和 LaTeX 功能的现代排式系统，免费且开源，用于创建演示文稿、文章或书籍。&lt;/p>
&lt;h3 id="跨平台剪贴板同步方案">跨平台剪贴板同步方案
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-43-48.png"
width="815"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Jeric-X/SyncClipboard" target="_blank" rel="noopener"
>SyncClipboard&lt;/a>，通过服务器同步各设备的剪贴板内容，支持文字、图片和文件，还能解决从浏览器复制动态图变静态的问题，甚至能自动转换图片格式。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>多设备剪贴板实时同步，支持文字、图片和文件；&lt;/li>
&lt;li>从浏览器复制图片时自动下载原图，保留动态图效果；&lt;/li>
&lt;li>智能图片格式转换，解决不同应用间的兼容性问题；&lt;/li>
&lt;li>支持 WebDAV 网盘作为服务器，也可独立部署；&lt;/li>
&lt;li>iOS 通过快捷指令、Android 通过多种工具实现同步；&lt;/li>
&lt;li>支持自动提取并同步短信验证码。&lt;/li>
&lt;/ul>
&lt;p>服务器支持 Docker 一键部署，提供全平台桌面客户端，并内置了服务器功能。&lt;/p>
&lt;h3 id="强化学习后训练框架">强化学习后训练框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-44-12.png"
width="756"
height="364"
loading="lazy"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="498px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Simple-Efficient/RL-Factory" target="_blank" rel="noopener"
>RL-Factory&lt;/a>，专门用于智能体学习的强化学习框架。该框架采用环境解耦设计，只需提供工具配置和奖励函数就能开始训练，还支持异步工具调用让训练速度提升 2 倍。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>环境解耦设计，一键式配置 MCP 工具和自定义工具；&lt;/li>
&lt;li>异步并行工具调用，训练效率比传统框架提升 2 倍；&lt;/li>
&lt;li>原生支持 Qwen3 模型，无需 SFT 即可准确调用工具；&lt;/li>
&lt;li>多种奖励计算方式，支持规则、模型判断和工具调用；&lt;/li>
&lt;li>批处理和分布式模型判断，大幅提升训练效率；&lt;/li>
&lt;li>多代理扩展支持，可转换为 MCP 格式进行交互。&lt;/li>
&lt;/ul>
&lt;h3 id="在-vs-code-里管理-postgresql-数据库">在 VS Code 里管理 PostgreSQL 数据库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-44-30.png"
width="690"
height="425"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://techcommunity.microsoft.com/blog/adforpostgresql/announcing-a-new-ide-for-postgresql-in-vs-code-from-microsoft/4414648" target="_blank" rel="noopener"
>微软推出的一款 VS Code 扩展&lt;/a>，该扩展为管理 PostgreSQL 数据库设计，旨在简化 PostgreSQL 数据库管理和开发工作流程。&lt;/p>
&lt;p>这一扩展使开发者能够在不离开 VS Code 的情况下管理数据库对象、草拟查询，并获得上下文感知的 IntelliSense 和 GitHub Copilot 的 “@pgsql” 智能助手的智能协助。&lt;/p>
&lt;h3 id="图形引擎教程">图形引擎教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-45-07.png"
width="690"
height="508"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://italink.github.io/ModernGraphicsEngineGuide/" target="_blank" rel="noopener"
>现代图形引擎入门指南&lt;/a>，一本在线教程，从 c++ 开始讲起的现代图形引擎入门教程，作者写了两年多了，还一直在更新。&lt;/p>
&lt;h3 id="linux-命令行编程教程">Linux 命令行编程教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-133-%E6%9C%9F/2025-06-02-09-46-03.png"
width="487"
height="689"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://learnbyexample.github.io/cli-computing/" target="_blank" rel="noopener"
>Linux Command Line Computing&lt;/a>，本书面向初级至中级用户，重点讲解 Linux 命令行工具与 Shell 脚本编程，核心内容涵盖文件管理及文本处理任务，不涉及系统管理和网络等高级主题。&lt;/p>
&lt;p>本书包含大量的示例和练习，在线阅读免费，制作好的pdf版收费。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 132 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/</link><pubDate>Sun, 25 May 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-53-53.png" alt="Featured image of post 机器文摘 第 132 期" />&lt;h1 id="机器文摘-第-132-期">机器文摘 第 132 期
&lt;/h1>&lt;h3 id="开发游戏但不使用任何引擎">开发游戏但不使用任何引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-53-12.png"
width="690"
height="443"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="373px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://noelberry.ca/posts/making_games_in_2025" target="_blank" rel="noopener"
>《在 2025 年制作游戏》&lt;/a>来自一位开发了 20 年游戏的从业者 Noel Berry 。&lt;/p>
&lt;p>文中分享了他自己制作游戏的流程和所使用的工具。尽管很多人认为不用大型商业游戏引擎就很难做游戏，但 Noel 认为对于其制作的游戏类型，不需要大型引擎的 90% 的功能，且大型引擎的默认功能实现往往不能满足其需求，最终项目还是会变成主要使用自己工具和系统，而引擎只是提供一些界面和渲染功能，所以 Noel 选择不使用大型游戏引擎，而是自己编写特定用途的小工具来制作游戏，这样更有趣，也能够掌控开发流程，方便快速找到问题并解决，不用担心引擎的更新或商业决策影响自己的游戏。&lt;/p>
&lt;p>主要工具：&lt;/p>
&lt;ul>
&lt;li>编程语言：C#&lt;/li>
&lt;li>窗口管理、渲染、输入、音频：SDL3&lt;/li>
&lt;li>操作系统：Noel 提到自己已不再使用 Windows 进行游戏开发（仅用于测试），因为其更倾向于使用开源、跨平台的工具和库，而且觉得 Windows 越来越令人沮丧，Linux 则能更快速优雅地满足其编程游戏的需求。&lt;/li>
&lt;/ul>
&lt;h3 id="不到-1000-行代码写一个带语法高亮的编辑器">不到 1000 行代码写一个带语法高亮的编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-53-40.png"
width="690"
height="499"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/antirez/kilo" target="_blank" rel="noopener"
>kilo&lt;/a>，不依赖任何库，用不到 1k 行 C 代码写一个可以在 VT100 兼容终端中运行的编辑器。支持快捷键操作、语法高亮和内容查询。 ​​​&lt;/p>
&lt;h3 id="将小爱音箱接入小智语音助手">将小爱音箱接入小智语音助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-53-53.png"
width="690"
height="401"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="412px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/idootop/open-xiaoai" target="_blank" rel="noopener"
>open-xiaoai&lt;/a>，开源项目让小爱音箱「听见你的声音」。&lt;/p>
&lt;p>MiGPT 的增强版本，小爱音箱刷机后，获取系统+硬件控制权，接管小爱音箱的耳朵（麦克风）和嘴巴（扬声器）。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>支持自定义小爱音箱唤醒词（离线部署 + 中英文）&lt;/li>
&lt;li>支持定制多个唤醒词服务，不同唤醒词之间互不干扰&lt;/li>
&lt;li>不影响小爱音箱的任何原有功能，支持随时切换回原系统&lt;/li>
&lt;li>支持接入 Gemini Live API 和 OpenAI Realtime API 等多模态大模型&lt;/li>
&lt;li>支持接入小智 AI 等语音助手，超低延时、超流畅的对话体验，支持连续对话，任意打断&lt;/li>
&lt;li>支持自定义消息回复，方便对接其他 LLM、AI Workflow（Dify、扣子）、AI Agent 等服务&lt;/li>
&lt;/ul>
&lt;h3 id="自动完成数学建模全流程的强大-ai-助手">自动完成数学建模全流程的强大 AI 助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-54-16.png"
width="690"
height="496"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="333px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jihe520/MathModelAgent" target="_blank" rel="noopener"
>MathModelAgent&lt;/a>，内置多个智能体分别负责不同环节，如代码手（带有反思模块，本地代码解释器）、论文手、建模手等，实现全自动分析问题、建模、编写代码、纠错生成一份格式完整的论文。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>自动分析问题、数学建模、编写代码、纠错和撰写论文；&lt;/li>
&lt;li>本地代码解释器，确保代码可执行性；&lt;/li>
&lt;li>生成格式完善的建模论文，直接可用；&lt;/li>
&lt;li>多 Agent 协作：代码 Agent、论文 Agent 分工合作；&lt;/li>
&lt;li>支持多种 LLM 模型，每个 Agent 可单独设置不同模型；&lt;/li>
&lt;li>成本低廉，单次任务约 1 元人民币。&lt;/li>
&lt;/ul>
&lt;p>支持 WebUI 和命令行两种方式使用，只需配置好环境并填写 API 密钥即可使用。&lt;/p>
&lt;h3 id="从零实现一个-deep-research-智能体">从零实现一个 Deep Research 智能体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-55-12.png"
width="858"
height="445"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/liyuan24/nanoDeepResearch" target="_blank" rel="noopener"
>nanoDeepResearch&lt;/a>, 作者受到字节开源的 DeerFlow 启发，决定从零开始构建一个深度研究 Agents，不依赖任何现有的框架，如 LangGraph。&lt;/p>
&lt;p>通过该项目，我们可以清晰了解到工作流程中每个步骤，例如：&lt;/p>
&lt;ul>
&lt;li>对于网络搜索，LLM 建议搜索什么内容；&lt;/li>
&lt;li>对于编码，LLM 生成了什么代码；&lt;/li>
&lt;li>对于规划，LLM 输出了什么研究计划。&lt;/li>
&lt;/ul>
&lt;p>主要功能特性：&lt;/p>
&lt;ul>
&lt;li>完整实现 ReAct 代理系统，能自主推理和行动；&lt;/li>
&lt;li>多专家协作系统，包括规划者、研究者、编码者和报告者；&lt;/li>
&lt;li>透明展示每个步骤的决策过程和生成内容；&lt;/li>
&lt;li>支持网络搜索、网页爬取和 Python 编程工具。&lt;/li>
&lt;/ul>
&lt;h3 id="从零构建小大语言模型的教程">从零构建“小”大语言模型的教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-55-48.png"
width="415"
height="523"
loading="lazy"
class="gallery-image"
data-flex-grow="79"
data-flex-basis="190px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/KaihuaTang/Building-a-Small-LLM-from-Scratch" target="_blank" rel="noopener"
>Building-a-Small-LLM-from-Scratch&lt;/a>，该系列的目的是让读者可以在基础的pytorch上，不依赖任何其他现成的外部库，从零开始理解并实现一个大语言模型的所有组成部分。&lt;/p>
&lt;p>以及训练微调代码，读者仅需python，pytorch和最基础深度学习背景知识即可。&lt;/p>
&lt;p>目前还在更新中，已经完成的有三章。&lt;/p>
&lt;h3 id="一个本地-ai-应用的全家桶">一个本地 AI 应用的全家桶
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-56-36.png"
width="848"
height="623"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/badboysm890/ClaraVerse" target="_blank" rel="noopener"
>Clara&lt;/a>，隐私优先，完全本地化的 AI 工作空间，包含 Ollama LLM 聊天、工具调用、代理构建器、稳定扩散以及嵌入式 n8n 式自动化功能。无需后端，无需 API 密钥。&lt;/p>
&lt;p>Windows 系统安装部署需要依赖本地有 Python 环境以及 DockerDesktop。&lt;/p>
&lt;p>我安装测试后感觉体验还有待提升，主要是智能体编排方面的功能实现还不够完整，项目还在开发中。&lt;/p>
&lt;h3 id="能自我进化的编码智能体">能自我进化的编码智能体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-132-%E6%9C%9F/2025-05-25-09-57-58.png"
width="852"
height="487"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/shyamsaktawat/OpenAlpha_Evolve" target="_blank" rel="noopener"
>OpenAlpha_Evolve&lt;/a>，是一款受DeepMind突破性研究成果&amp;quot;AlphaEvolve&amp;quot;等自主编码智能体启发而开发的开源Python框架。&lt;/p>
&lt;p>该项目通过运用谷歌Gemini等大型语言模型（LLMs），在进化原则的指导下，实现了核心思想的重现：构建一个能持续执行代码编写、测试与优化的智能系统，通过迭代演进实现代码的自主进化。&lt;/p>
&lt;p>他们的使命是为研究人员、开发者和技术爱好者打造一个易用、易懂且可扩展的平台，助力探索人工智能、代码生成与自动化问题解决领域令人着迷的交叉创新。&lt;/p>
&lt;blockquote>
&lt;p>通过这一平台，我们致力于推动AI技术在实际编程场景中的应用边界，赋能更智能的自动化软件开发流程。&lt;/p>
&lt;/blockquote>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 131 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/</link><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-28-28.png" alt="Featured image of post 机器文摘 第 131 期" />&lt;h1 id="机器文摘-第-131-期">机器文摘 第 131 期
&lt;/h1>&lt;h3 id="你的代码是如何在cpu里执行的">你的代码是如何在CPU里执行的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-23-38.png"
width="587"
height="442"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chessman7.substack.com/p/how-your-code-runs-the-journey-of" target="_blank" rel="noopener"
>程序在 CPU 中的运行过程&lt;/a>，中央处理器 (CPU) 是强大的引擎，驱动着从简单计算到复杂模拟的一切任务。理解它的架构和执行流程不仅仅是学术兴趣，更是任何深入编程或计算机科学人士的必修课。&lt;/p>
&lt;p>这篇博文旨在通过探索 CPU 的架构和执行流程，并用一个实际的代码示例来解释这些概念，从而解释 CPU 的内部工作原理。&lt;/p>
&lt;p>详细讲解了 CPU 的主要组成部分：控制单元（CU）负责协调指令的获取、解码和执行；算术逻辑单元（ALU）执行算术和逻辑运算；寄存器临时存储数据和指令；内存包括 RAM、ROM 和缓存；组合逻辑负责处理输入信号并输出结果。&lt;/p>
&lt;p>重点介绍了 CPU 操作围绕的取指 - 译码 - 执行循环：取指阶段，CPU 根据程序计数器（PC）从内存中获取指令；译码阶段，确定指令的操作码和操作数；执行阶段，执行指令指定的操作，可能涉及 ALU 或寄存器和内存间的数据移动；最后将结果写回寄存器或内存。&lt;/p>
&lt;p>以一个简单的 C 程序为例，展示了程序从编写到运行的整个过程：编译阶段，C 代码被编译为对象文件，再与库链接成可执行文件；加载阶段，加载器将可执行文件从硬盘加载到内存；执行阶段，CPU 从内存中获取、解码和执行指令；输出阶段，程序通过 printf 函数将结果输出到屏幕。同时介绍了程序运行中涉及的内存段、操作系统、硬盘和主板等组件的作用。&lt;/p>
&lt;h3 id="huggingface官方出的-mcp-教学课程">huggingface官方出的 mcp 教学课程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-24-14.png"
width="600"
height="612"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="235px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/mcp-course" target="_blank" rel="noopener"
>《模型上下文协议（MCP）课程》&lt;/a>，将指导您理解、使用和构建尖端 AI 应用，这些应用将基于最新的 MCP 标准，利用外部数据和工具。这门免费课程旨在帮助您从 MCP 领域的初学者成长为经验丰富的实践者。&lt;/p>
&lt;p>课程内容：&lt;/p>
&lt;ul>
&lt;li>基础单元 ：从理论上学习 MCP 概念。&lt;/li>
&lt;li>用例分配 ：将学到的概念应用于现实世界的问题。&lt;/li>
&lt;li>合作 ：采用 Hugging Face 及其合作伙伴的最新 MCP 实施和工具。&lt;/li>
&lt;/ul>
&lt;h3 id="开源自动化-ai-工具">开源自动化 AI 工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-29-50.png"
width="721"
height="404"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/mediar-ai/terminator" target="_blank" rel="noopener"
>Terminator&lt;/a>，旨在使用类似 Playwright 的 API 与 Windows 上的原生 GUI 应用程序交互，例如解析网站。&lt;/p>
&lt;p>通过利用操作系统级的辅助功能 API，Terminator 的 AI 代理速度比基于视觉的方法更快、更可靠，并且可以与后台应用程序交互。&lt;/p>
&lt;p>对比传统 OCR 自动化工具，有如下的特点：&lt;/p>
&lt;ul>
&lt;li>速度特别快，比传统方法快很多倍；&lt;/li>
&lt;li>即使软件窗口被遮挡或在后台，也能操作；&lt;/li>
&lt;li>非常稳定，不容易因为界面变化而失效。&lt;/li>
&lt;/ul>
&lt;h3 id="smolvlm-webgpu-版本">SmolVLM webgpu 版本
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-28-28.png"
width="681"
height="786"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="207px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/spaces/webml-community/smolvlm-realtime-webgpu" target="_blank" rel="noopener"
>smolvlm-realtime-webgpu&lt;/a>，这个模型可以识别视频中的物体，识别率相当不错，模型大小只有500M。&lt;/p>
&lt;p>现在出了 webgpu 版本，可以直接在网页中运行，实时监测视频流里的物品。&lt;/p>
&lt;h3 id="一键把电子书变成有声书">一键把电子书变成有声书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-32-39.png"
width="1889"
height="843"
loading="lazy"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="537px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://b2t.pingfury.top/" target="_blank" rel="noopener"
>Book2TTS&lt;/a>，一键把电子书变成有声书&lt;/p>
&lt;p>亮点：&lt;/p>
&lt;ul>
&lt;li>支持上传 EPUB、PDF 等格式&lt;/li>
&lt;li>可选择不同语音合成模型，如 Edge-TTS / OpenAI / ElevenLabs 等&lt;/li>
&lt;li>多语言支持，包括中文神经音色&lt;/li>
&lt;li>支持 RSS 订阅&lt;/li>
&lt;li>自动分页，可自由选择章节生成&lt;/li>
&lt;li>可下载音频或直接发布&lt;/li>
&lt;li>界面简洁、操作直观，适合播客、有声读物、学习场景使用&lt;/li>
&lt;/ul>
&lt;h3 id="纯原生-web-技术教程">纯原生 Web 技术教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-33-16.png"
width="757"
height="690"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="263px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://plainvanillaweb.com/index.html" target="_blank" rel="noopener"
>Plain Vanilla&lt;/a>一个介绍纯 Vanilla web 技术的合集教程，使用原生的 HTML、CSS 和 JavaScript 进行网页和 Web 应用开发，摒弃复杂的框架和构建工具。&lt;/p>
&lt;p>主要内容：&lt;/p>
&lt;ul>
&lt;li>无框架、无构建工具&lt;/li>
&lt;li>Web Components - 替代 Vue/React&lt;/li>
&lt;li>现代 CSS - 不用 PostCSS / SASS&lt;/li>
&lt;li>部署与优化 ​​​&lt;/li>
&lt;/ul>
&lt;h3 id="一个免费的在线工具箱">一个免费的在线工具箱
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-131-%E6%9C%9F/2025-05-18-09-33-41.png"
width="876"
height="650"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://uiedtool.com/" target="_blank" rel="noopener"
>UIED Tools&lt;/a>，是由 &lt;a class="link" href="https://fsuied.com/" target="_blank" rel="noopener"
>UIED技术团队&lt;/a> 设计开发的在线工具平台。&lt;/p>
&lt;p>网站汇聚大量在线即开即用的工具，包括 AI、设计、图片处理、办公等。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 130 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/</link><pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-54-40.png" alt="Featured image of post 机器文摘 第 130 期" />&lt;h1 id="机器文摘-第-130-期">机器文摘 第 130 期
&lt;/h1>&lt;h3 id="用微信聊天记录创造数字分身">用微信聊天记录创造数字分身
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-53-52.png"
width="3790"
height="1594"
loading="lazy"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="570px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/xming521/WeClone" target="_blank" rel="noopener"
>WeClone&lt;/a>，用自己的微信聊天记录训练LLM，搞一个自己的数字分身，支持微信语音克隆。&lt;/p>
&lt;p>支持绑定到微信、QQ、Telegram、企微、飞书机器人等，作为个人助手，忙的时候应付简单社交比较实用。&lt;/p>
&lt;p>项目仓库里包含了从聊天数据导出、预处理、模型训练以及部署的全流程。&lt;/p>
&lt;p>项目默认使用 Qwen2.5-7B-Instruct 模型，LoRA 方法对 sft 阶段微调，大约需要 16GB 显存。也可以使用 LLaMA Factory 支持的其他模型和方法。&lt;/p>
&lt;h3 id="计算部署大模型所需资源的工具">计算部署大模型所需资源的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-54-13.png"
width="690"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="350px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://apxml.com/tools/vram-calculator" target="_blank" rel="noopener"
>vram-calculator&lt;/a>，一个计算大模型推理和训练所占内存的在线工具。&lt;/p>
&lt;p>工具的特点是比较精准，且可调整很多细节参数，能够比较精准预测你最终所需的资源。&lt;/p>
&lt;p>能计算 MoE 的模型，会算不同的 attention 机制，支持修改 batch size、seq length 和并发数。 ​​​&lt;/p>
&lt;h3 id="开源-cursor-平替">开源 cursor 平替
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-54-40.png"
width="690"
height="274"
loading="lazy"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="604px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/voideditor/void" target="_blank" rel="noopener"
>Void&lt;/a>，像 cursor 一样基于 vscode 开发的基于 AI 的智能 IDE 环境。&lt;/p>
&lt;p>支持在项目工程中直接使用 AI Agent 进行编码、调试等任务的执行。&lt;/p>
&lt;p>可以对接任意大模型 LLM，包括云端服务或本地部署服务。&lt;/p>
&lt;h3 id="速度极快的语音识别模型">速度极快的语音识别模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-55-26.png"
width="690"
height="549"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/nvidia/parakeet-tdt-0.6b-v2" target="_blank" rel="noopener"
>Parakeet TDT 0.6B V2&lt;/a>，英伟达开源的一个语音识别模型，发布后迅速登顶 OpenASR 榜单。&lt;/p>
&lt;p>能够在 1 秒内实现高质量转录 60 分钟的音频，而且参数仅仅 0.6B，轻松击败了所有主流闭源模型。&lt;/p>
&lt;p>不过目前仅支持识别英文，采用的是 CC-BY-4.0 开源许可，允许商业使用。&lt;/p>
&lt;h3 id="条形码在线生成">条形码在线生成
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-55-52.png"
width="935"
height="821"
loading="lazy"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="273px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://barcode-maker.com" target="_blank" rel="noopener"
>Barcode Maker&lt;/a>，一个免费、开源的在线条码生成工具，支持多种一维条码和二维码格式的实时批量生成。无需注册，没有数量限制，并且支持多种格式下载。&lt;/p>
&lt;p>支持 Code 128、EAN/UPC、Code 39、ITF、MSI Plessey、Pharmacode、Codabar 等一维码，以及 QR Code、Data Matrix、PDF417、Aztec Code 等二维码&lt;/p>
&lt;p>支持 PNG、JPG、GIF、SVG 格式下载，批量生成时会打包为 ZIP 文件。&lt;/p>
&lt;p>完全响应式设计，适用于电脑、平板和智能手机。&lt;/p>
&lt;h3 id="操作excel的-mcp-服务">操作excel的 mcp 服务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-130-%E6%9C%9F/2025-05-11-09-56-30.png"
width="869"
height="431"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="483px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/haris-musa/excel-mcp-server" target="_blank" rel="noopener"
>excel-mcp-server&lt;/a>，允许 AI 操作 Excel 文件，且无需安装 Microsoft Excel。&lt;/p>
&lt;p>支持使用 AI Agent 创建、读取和修改 Excel 工作簿。&lt;/p>
&lt;ul>
&lt;li>📊 创建和修改 Excel 工作簿&lt;/li>
&lt;li>📝 读取和写入数据&lt;/li>
&lt;li>🎨 应用格式和样式&lt;/li>
&lt;li>📈 创建图表和可视化&lt;/li>
&lt;li>📊 生成数据透视表&lt;/li>
&lt;li>🔄 管理工作表和区域&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 129 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/</link><pubDate>Mon, 05 May 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/2025-05-05-13-25-14.png" alt="Featured image of post 机器文摘 第 129 期" />&lt;h1 id="机器文摘-第-129-期">机器文摘 第 129 期
&lt;/h1>&lt;h3 id="一个涵盖所有-github-代码库的免费百科全书">一个涵盖所有 GitHub 代码库的免费百科全书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/2025-05-05-13-22-56.png"
width="1065"
height="717"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://deepwiki.com/" target="_blank" rel="noopener"
>DeepWiki&lt;/a>，本周最火项目，将任何公共 GitHub 代码库的 URL 替换为“ https:// deepwiki. com/org/repo ”即可获得类似维基百科的精准库描述。&lt;/p>
&lt;p>可一键将任意代码库转换成详细易懂的知识库文档并与之对话 DeepWiki 通过分析 GitHub 公共代码库的代码、README 和配置文件，然后会自动自动生成一个详细的、易读的文档、交互式图表，并有一个对话式 AI 助手。&lt;/p>
&lt;p>一共索引了 3 万个库，40 亿行代码。&lt;/p>
&lt;p>&lt;a class="link" href="https://greasyfork.org/zh-CN/scripts/534213-github-to-deepwiki" target="_blank" rel="noopener"
>这里有一个油猴脚本，可以让你在浏览 Github 仓库页面的时候直接一键跳转到对应的 Deepwiki 页&lt;/a>：https://greasyfork.org/zh-CN/scripts/534213-github-to-deepwiki&lt;/p>
&lt;h3 id="8-个超实用的-ai-音乐生成工具">8 个超实用的 AI 音乐生成工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/2025-05-05-13-23-35.png"
width="1088"
height="848"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://soundraw.io" target="_blank" rel="noopener"
>Soundraw&lt;/a>，支持高度自定义的AI音乐生成平台，可调整节奏和旋律，支持多种风格和音乐流派选择。&lt;/li>
&lt;li>&lt;a class="link" href="https://mubert.com/render/moods" target="_blank" rel="noopener"
>Mubert&lt;/a>，操作简单，支持快速生成多种风格的背景音乐。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.beatoven.ai" target="_blank" rel="noopener"
>Beatoven&lt;/a>，输入文本即可快速生成符合场景需求的音乐，每次可生成多段1分钟左右的音频。&lt;/li>
&lt;li>&lt;a class="link" href="https://soundful.com" target="_blank" rel="noopener"
>Soundful&lt;/a>，擅长生成冥想和放松类音乐，能生成超过5分钟的冥想音频，非常适合制作长时背景音乐。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.loudly.com" target="_blank" rel="noopener"
>Loudly&lt;/a>，文本转音乐功能，能生成30秒音乐，支持风格融合。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.aiva.ai" target="_blank" rel="noopener"
>Aiva&lt;/a>，集成专业编辑工具和海量素材库的平台，提供数百种预设风格。&lt;/li>
&lt;li>&lt;a class="link" href="https://stability.ai/stable-audio" target="_blank" rel="noopener"
>Stable Audio&lt;/a>，支持生成45秒的高质量音频，支持二次创作功能。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.splashmusic.com" target="_blank" rel="noopener"
>Splash Music&lt;/a>，在线合成自然音效和背景音的平台，提供在线使用版本，无需下载。&lt;/li>
&lt;/ol>
&lt;h3 id="学术论文阅读工具">学术论文阅读工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/2025-05-05-13-23-53.png"
width="831"
height="531"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/LYiHub/mad-professor-public" target="_blank" rel="noopener"
>mad-professor&lt;/a>，集PDF处理、AI翻译、RAG检索、AI问答及语音聊天于一体。&lt;/p>
&lt;p>导入PDF后它会自动提取、翻译和结构化论文内容，并且支持中英文对照阅读&lt;/p>
&lt;p>支持AI智能问答，分屏界面，左侧论文右侧AI问答，可以语音提问和TTS语音回答&lt;/p>
&lt;p>mad-professor 被赋予了个性角色，回答问题时会带有教授的性格和情感特点，支持更换不同的教授人设/声音&lt;/p>
&lt;h3 id="轻量级-llm-离线运行工具">轻量级 LLM 离线运行工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/2025-05-05-13-24-35.png"
width="822"
height="464"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Genta-Technology/Kolosal" target="_blank" rel="noopener"
>Kolosal AI&lt;/a>，让大语言模型在本地设备上轻松运行。&lt;/p>
&lt;p>主要特点：&lt;/p>
&lt;ol>
&lt;li>仅需约20MB的编译体积，适合边缘设备；&lt;/li>
&lt;li>支持 AVX2 CPU、AMD和 NVIDIA GPU，硬件适配广泛；&lt;/li>
&lt;li>支持多种流行模型，如 Mistral、LLaMA、Qwen 等。&lt;/li>
&lt;/ol>
&lt;h3 id="android-自动化工具">Android 自动化工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-129-%E6%9C%9F/2025-05-05-13-25-14.png"
width="1066"
height="700"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/droidrun/droidrun" target="_blank" rel="noopener"
>DroidRun&lt;/a>，用 AI 操作手机。&lt;/p>
&lt;p>通过自然语言直接控制 Android 设备，比如说 “打开设置查看电池用量” 这样的简单指令，AI 就能自动帮我们完成，就像有个助手在替我们操作手机一样方便。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>使用自然语言命令控制 Android 设备，无需编程知识&lt;/li>
&lt;li>支持多种大模型（OpenAI、Anthropic、Gemini）作为决策大脑&lt;/li>
&lt;li>简单易用的命令行界面，一行命令就能完成复杂操作&lt;/li>
&lt;li>提供 Python API 接口，方便开发者集成自定义功能&lt;/li>
&lt;li>支持截图分析，让 AI 能&amp;quot;看到&amp;quot;手机屏幕内容&lt;/li>
&lt;li>轻松实现 UI 测试、日常任务自动化等功能&lt;/li>
&lt;/ul>
&lt;p>安装配置简单，通过 USB 或 ADB 即可连接操控，特别适合需要自动化手机操作和测试的开发者与个人。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 128 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/</link><pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-56-22.png" alt="Featured image of post 机器文摘 第 128 期" />&lt;h1 id="机器文摘-第-128-期">机器文摘 第 128 期
&lt;/h1>&lt;h3 id="用-docker-快速搭建-mcp-服务器">用 Docker 快速搭建 MCP 服务器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-55-27.png"
width="847"
height="769"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="264px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/metorial/mcp-containers" target="_blank" rel="noopener"
>MCP Containers&lt;/a> 将数百个常用 MCP 服务器打包成即用即取的 Docker 镜像，直接一键部署各种 AI 能力扩展的 MCP 工具。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>一键部署体验，通过简单的 Docker 命令即可使用任何 MCP 服务器&lt;/li>
&lt;li>自动更新机制，服务器镜像每日更新，始终与源仓库同步&lt;/li>
&lt;li>安全隔离环境，各服务器在独立容器中运行互不干扰&lt;/li>
&lt;li>支持数百种 MCP 服务器，从网络搜索、浏览器控制到各类 API 集成&lt;/li>
&lt;li>丰富的文档和使用指南，帮助快速上手&lt;/li>
&lt;/ul>
&lt;p>只需拉取需要的 Docker 镜像即可，同时每一个 MCP 服务器都有详细的使用教程。&lt;/p>
&lt;h3 id="性能强大的目标跟踪库">性能强大的目标跟踪库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-56-22.png"
width="762"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/roboflow/trackers" target="_blank" rel="noopener"
>trackers&lt;/a>，是一个统一的库，提供领先的多目标跟踪算法的全新实现。其模块化设计让您可以轻松替换跟踪器，并将其与来自各种库（例如 inference 、 ultralytics 或 transformers 的目标检测器集成。&lt;/p>
&lt;p>虽然 repo 介绍里面没有写这个算法的最大跟总量，但是演示视频里面跟踪鸡蛋的场景最大有标记为 269 的鸡蛋，也就是说它至少可以动态跟踪200+目标。&lt;/p>
&lt;h3 id="桌面宠物猫">桌面宠物猫
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-57-14.png"
width="416"
height="278"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ayangweb/BongoCat" target="_blank" rel="noopener"
>BongoCat&lt;/a>，在电脑上显示一个可爱的猫咪，跟随着你敲打的键盘和移动的鼠标进行互动，工作累了困了可玩下解压。&lt;/p>
&lt;p>提供 Windows、macOS 和 Linux 系统安装包，可直接开箱即用。&lt;/p>
&lt;h3 id="利用多模态大模型实时分析视频流">利用多模态大模型实时分析视频流
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-58-05.png"
width="690"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://showlab.github.io/livecc/" target="_blank" rel="noopener"
>LiveCC&lt;/a>，能实时分析视频的模型，基于Qwen2-VL-7B后训练，能实时分析出视频的内容，速度快效果好。&lt;/p>
&lt;p>从演示效果上来看，十分厉害的样子。&lt;/p>
&lt;p>能够直接读出演讲者在白板上实时手写的单词。&lt;/p>
&lt;p>观看球赛视频能够做到及时解说当前战况。&lt;/p>
&lt;h3 id="性能强大的视频生成框架">性能强大的视频生成框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-59-09.png"
width="827"
height="633"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/lllyasviel/FramePack" target="_blank" rel="noopener"
>FramePack&lt;/a>，是一个渐进式生成视频的下一帧（下一帧部分）预测神经网络结构。&lt;/p>
&lt;p>FramePack 将输入上下文压缩为恒定长度，以便生成工作量不受视频长度的影响。&lt;/p>
&lt;p>即使在笔记本电脑 GPU 上，FramePack 也可以使用 13B 模型处理大量帧。&lt;/p>
&lt;p>FramePack 可以使用更大的批量大小进行训练，类似于图像扩散训练的批量大小。&lt;/p>
&lt;p>使用 13B 模型生成 1 分钟视频（60 秒），30fps（1800 帧），最低所需的 GPU 内存为 6GB。&lt;/p>
&lt;p>官方只提供了windows构建版本，下载后使用 update.bat 进行更新，使用 run.bat 运行。框架会直接从HuggingFace 上下载模型&lt;/p>
&lt;h3 id="小巧又逼真的语音生成模型">小巧又逼真的语音生成模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-09-59-55.png"
width="810"
height="387"
loading="lazy"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/nari-labs/dia" target="_blank" rel="noopener"
>Dia-1.6B&lt;/a>，一款超逼真的文本转语音生成模型，号称超越 ElevenLabs 和 Sesame。&lt;/p>
&lt;p>仅仅只有 1.6B 参数，能直接从文本生成高度逼真的对话，还支持控制情感和语调，甚至可以生成笑声、咳嗽等非语言声音。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>通过 [S1] 和 [S2] 标签控制生成多角色对话；&lt;/li>
&lt;li>支持生成笑声、清嗓子、叹息等非语言表达；&lt;/li>
&lt;li>提供声音克隆功能，可复制特定声音风格；&lt;/li>
&lt;li>实时生成，A4000 GPU 上约 40 tokens/s。&lt;/li>
&lt;/ul>
&lt;p>提供 Gradio UI 界面，操作简单易上手，同时还可以在 Hugging Face 上在线体验。&lt;/p>
&lt;h3 id="ai-生成骨骼">AI 生成骨骼
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-10-00-54.png"
width="818"
height="268"
loading="lazy"
class="gallery-image"
data-flex-grow="305"
data-flex-basis="732px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/VAST-AI-Research/UniRig" target="_blank" rel="noopener"
>UniRig&lt;/a>，自动为3D模型生成骨骼，比此前的方法精度大幅提升，不仅能生成人物骨骼，也能生成各种动物的骨骼。&lt;/p>
&lt;p>AI生成3D模型，AI再生成3D骨骼，再通过骨骼生成动作，3D影视和游戏会有比较可控的落地方案。&lt;/p>
&lt;h3 id="微软开源基于-cpu-推理框架">微软开源基于 CPU 推理框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-10-01-27.png"
width="827"
height="518"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/BitNet" target="_blank" rel="noopener"
>BitNet.cpp&lt;/a>，可直接在 CPU 上运行 1-bit 模型推理（如 BitNet b1.58）。&lt;/p>
&lt;p>提供多种优化内核，支持在 CPU 上实现快速无损推理，使模型速度提升 1.37-6.17 倍，同时能耗降低高达 82.2%，可在单 CPU 上运行 100B 规模模型。&lt;/p>
&lt;p>官方提供了 2B 参数模型可直接使用，支持多种 Hugging Face 上的 1-bit 模型。&lt;/p>
&lt;p>同时提供完整的示例代码和详细的使用指南，适用于 Windows、Linux 和 macOS 系统。&lt;/p>
&lt;h3 id="基于-live2d-的-ai-虚拟助手">基于 Live2D 的 AI 虚拟助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-128-%E6%9C%9F/2025-04-27-10-02-01.png"
width="799"
height="781"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="245px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/fagenorn/handcrafted-persona-engine" target="_blank" rel="noopener"
>Persona Engine&lt;/a>，AI 虚拟助手项目，结合了大语言模型，Live2D，自动语音识别，文本转语音，实时语音克隆。&lt;/p>
&lt;p>达到了直接跟虚拟人物对话的能力，可以直接集成到 OBS 里面做AI虚拟主播。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 127 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/</link><pubDate>Sun, 20 Apr 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-03-07.png" alt="Featured image of post 机器文摘 第 127 期" />&lt;h1 id="机器文摘-第-127-期">机器文摘 第 127 期
&lt;/h1>&lt;h3 id="破解一个智能家居设备">破解一个智能家居设备
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-00-17.png"
width="690"
height="335"
loading="lazy"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="494px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://jmswrnr.com/blog/hacking-a-smart-home-device" target="_blank" rel="noopener"
>《破解一个智能家居设备》&lt;/a>，这篇文章讲述了一位技术爱好者如何通过逆向工程破解了一款基于ESP32的智能家居设备（空气净化器），并将其成功集成到Home Assistant智能家居系统中的故事。&lt;/p>
&lt;p>作者对家中所有设备都希望通过Home Assistant进行统一控制，但一款昂贵的空气净化器只能通过其官方App操作，并且依赖云端服务。为了实现本地化控制，作者决定对设备进行逆向工程。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>分析设备通信&lt;/strong>：&lt;br>
作者通过抓包发现设备与云端服务器通过UDP协议通信，且数据经过加密。进一步分析表明，设备使用了自定义协议，而非标准的DTLS。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>硬件拆解与固件提取&lt;/strong>：&lt;br>
作者拆解设备，发现其核心是ESP32芯片。通过串口连接和固件转储，作者提取了设备的存储数据和应用逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>破解加密协议&lt;/strong>：&lt;br>
通过分析固件和网络数据包，作者发现设备使用了ECDH密钥交换和AES加密。他成功破解了加密逻辑，并实现了中间人攻击（MITM），能够解密设备与云端的通信。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>构建本地服务器&lt;/strong>：&lt;br>
作者搭建了一个本地服务器，模拟云端服务，将设备的控制逻辑完全本地化。通过MQTT协议，他将设备与Home Assistant连接，实现了远程控制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>最终实现&lt;/strong>：&lt;br>
设备成功集成到Home Assistant中，作者可以通过自动化规则（如空气质量监测）控制空气净化器。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="一次性密码otps的工作原理">一次性密码（OTPs）的工作原理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-00-31.png"
width="690"
height="617"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.dogac.dev/how-do-one-time-passwords-work/" target="_blank" rel="noopener"
>《一次性密码的工作原理》&lt;/a>，这篇文章深入浅出地讲解了一次性密码（OTPs）的工作原理，特别是HOTP（基于HMAC的一次性密码）和TOTP（基于时间的一次性密码），并分享了作者从零开始实现这些算法的经验。&lt;/p>
&lt;p>作者对一次性密码（如Google Authenticator中的6位数字代码）的神秘性感到好奇，决定深入研究其背后的机制。&lt;/p>
&lt;p>文章通过通俗易懂的方式解释了HOTP和TOTP的原理，并展示了如何从零开始实现它们。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>OTPs的基本概念&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>OTPs是一次性密码，通常用于双因素认证（2FA），比传统密码更安全，因为它们只能使用一次或在有限时间内有效。&lt;/li>
&lt;li>与传统密码不同，OTPs是动态的，减少了密码被重复使用（重放攻击）的风险。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>HOTP和TOTP的区别&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>HOTP&lt;/strong>：基于一个递增的计数器生成密码。每次生成密码后，计数器加一。&lt;/li>
&lt;li>&lt;strong>TOTP&lt;/strong>：基于当前时间生成密码，通常每30秒更新一次。这种方法利用了现代设备的时间同步技术（如NTP），使得密码生成更加方便和安全。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>密码生成的算法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>作者详细解释了如何使用HMAC（基于哈希的消息认证码）来生成密码。HMAC结合了一个秘密密钥和一个计数器（或时间戳）来生成动态密码。&lt;/li>
&lt;li>TOTP实际上是HOTP的一个变种，它将当前时间作为计数器的输入。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>作者的实现过程&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>作者分享了自己如何从零开始实现HOTP和TOTP，并发布了一个演示应用来验证和展示这些算法的工作原理。&lt;/li>
&lt;li>他强调了理解这些算法背后的数学和逻辑的重要性，并展示了如何通过简单的步骤生成安全的一次性密码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="开源的多模态视觉模型">开源的多模态视觉模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-01-14.png"
width="827"
height="717"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jingyaogong/minimind-v" target="_blank" rel="noopener"
>MiniMind-V&lt;/a>，是一款可以从零开始训练多模态视觉模型的开源项目。&lt;/p>
&lt;p>它提供详细的训练流程，仅用1.3块钱成本 + 1小时！即可训练出26M参数的超小多模态视觉语言模型，支持识图与对话。&lt;/p>
&lt;p>MiniMind-V 26M 参数的超轻量设计，提供从数据处理到指令微调的全流程代码。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>超轻量模型：仅 26M 参数（0.026B），约为 GPT-3 的 1/7000，单卡 3090 即可训练。&lt;/li>
&lt;li>多模态能力：支持单图和多图输入，结合文本进行对话。&lt;/li>
&lt;li>全流程开源：包含数据处理、预训练、SFT 和推理完整代码，支持数据集清洗和自定义配置。&lt;/li>
&lt;li>跨模态对齐：采用简单线性变换，将 CLIP 的 768 维视觉 token 对齐到 LLM 空间。&lt;/li>
&lt;li>易用接口：提供 OpenAI 兼容 API，可接入 FastGPT、OpenWebUI 等。&lt;/li>
&lt;/ul>
&lt;h3 id="浏览器中运行-linux-或其他操作系统">浏览器中运行 Linux 或其他操作系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-01-45.png"
width="690"
height="536"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="308px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.bellard.org/jslinux/" target="_blank" rel="noopener"
>jslinux&lt;/a>，是一个运行在网页中的虚拟机，可以让你在浏览器中运行老式操作系统，包括 win2000、dos、linux等。&lt;/p>
&lt;h3 id="面向-sql-生成和-rdbms-的-rag-框架">面向 SQL 生成和 RDBMS 的 RAG 框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-02-43.png"
width="814"
height="580"
loading="lazy"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="336px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/vanna-ai/vanna" target="_blank" rel="noopener"
>vanna&lt;/a>，这个 RAG 框架支持很多 RDBMS 包括 PostgreSQL，MySQL，Apache Hive，ClickHouse，Snowflake，Oracle，Microsoft SQL Server，BigQuery，SQLite，DuckDB 等等，并且可以自动获取数据库库表结构。&lt;/p>
&lt;p>它还有自我学习功能，正确的问题到 SQL 的对应关系被存储起来，可以使未来的结果更加准确。&lt;/p>
&lt;h3 id="微信公众号-markdown-编辑器">微信公众号 Markdown 编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-02-57.png"
width="690"
height="483"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jaywcjlove/wxmp" target="_blank" rel="noopener"
>wxpm&lt;/a>，开源免费的 Mardown 编辑器，支持 Markdown 所有基础语法、自定义 CSS 样式、多种主题选择、实时编辑预览以及色盘取色等等功能。&lt;/p>
&lt;p>提供 Docker 快速部署在线使用，轻松创建出一篇简洁美观大方的微信公众号图文。&lt;/p>
&lt;h3 id="相机镜头景深效果在线模拟">相机镜头景深效果在线模拟
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-127-%E6%9C%9F/2025-04-20-11-03-07.png"
width="690"
height="315"
loading="lazy"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="525px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dofsimulator.net/en/" target="_blank" rel="noopener"
>dofsimulator&lt;/a>，这个工具可是太棒了，可以在线模拟各品牌相机镜头的景深效果，直接调整光圈、拍照距离、镜头焦段，实时预览景深效果。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 126 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-34-08.png" alt="Featured image of post 机器文摘 第 126 期" />&lt;h1 id="机器文摘-第-126-期">机器文摘 第 126 期
&lt;/h1>&lt;h3 id="比尔盖茨眼里的微软-50-年">比尔盖茨眼里的微软 50 年
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-30-38.png"
width="690"
height="502"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.gatesnotes.com/meet-bill/source-code/reader/microsoft-original-source-code" target="_blank" rel="noopener"
>微软50周年的回忆&lt;/a>，今年是微软诞生50周年，比尔盖茨写了这篇回忆文章，介绍了他怎么会创立这家公司，文末给出了微软第一个产品 Altair BASIC 的源码下载。 ​​​&lt;/p>
&lt;p>这篇文章回顾了比尔盖茨在成长过程中遇到的几位对他影响深远的老师，并详细描述了这些老师如何通过独特的教学方式和对他的信任，塑造了他的思维方式和未来成就。&lt;/p>
&lt;p>值得一提的是，这篇文章的排版颇具复古计算机风格。&lt;/p>
&lt;h3 id="提示词分享网站">提示词分享网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-31-19.png"
width="1301"
height="564"
loading="lazy"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="553px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://promptup.net/" target="_blank" rel="noopener"
>promptup&lt;/a>，这个网站汇集了市面上很多AI大佬写的非常优秀的提示词案例，比如：&lt;/p>
&lt;ol>
&lt;li>如何将文档变成可视化网页的提示词；&lt;/li>
&lt;li>SVG图形大师，如何使用 Claude 生成美妙的SVG 图；&lt;/li>
&lt;li>还有网页设计PPT大师的提示词，生成漂亮的网页 PPT；&lt;/li>
&lt;li>如何一句话生成好看的单词闪卡的提示词；&lt;/li>
&lt;li>去除 AI 味 Prompt。&lt;/li>
&lt;/ol>
&lt;h3 id="将网站内容转换为-mcp-服务器">将网站内容转换为 MCP 服务器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-31-57.png"
width="665"
height="395"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ryoppippi/sitemcp" target="_blank" rel="noopener"
>sitemcp&lt;/a>, 它能一键抓取整个网站内容并将其转化为 MCP 服务器，再搭配 Claude 等 MCP 客户端，就能直接对网站内容进行对话提问。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>支持一次性抓取整个网站，并缓存到本地&lt;/li>
&lt;li>可设置并发数提高抓取速度&lt;/li>
&lt;li>支持多种工具命名策略，便于 AI 客户端调用&lt;/li>
&lt;li>提供路径匹配功能，可选择性抓取特定页面&lt;/li>
&lt;li>支持内容选择器，确保提取页面中最有价值的内容&lt;/li>
&lt;/ul>
&lt;p>可通过命令行一键安装使用，并无缝集成到各种 MCP 客户端。&lt;/p>
&lt;h3 id="开源-ai-会议助手">开源 AI 会议助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-32-46.png"
width="706"
height="520"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Zackriya-Solutions/meeting-minutes" target="_blank" rel="noopener"
>metting-minutes&lt;/a>，它能实时捕获会议音频、进行转录并生成摘要，无需服务器所有处理在本地完成，确保数据隐私安全。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>实时捕获麦克风和系统音频&lt;/li>
&lt;li>使用本地 Whisper 模型进行即时语音转录&lt;/li>
&lt;li>支持多种 LLM 提供商，包括 Anthropic、Groq 和 Ollama&lt;/li>
&lt;li>完全本地处理，无需外部服务器，保护隐私&lt;/li>
&lt;/ul>
&lt;p>提供 Windows、macOS 系统安装包，下载即可使用。&lt;/p>
&lt;h3 id="零样本复刻任意人声">零样本复刻任意人声
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-33-09.png"
width="671"
height="326"
loading="lazy"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="493px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SparkAudio/Spark-TTS" target="_blank" rel="noopener"
>Spark-TTS&lt;/a> 基于 Qwen2.5 架构直出语音编码，零样本复刻任意人声，中英文混合生成丝滑无界。无需专业设备/海量数据，即刻生成媲美真人的多语言语音。 ​​​&lt;/p>
&lt;h3 id="awesome-rag">Awesome-RAG
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-33-43.png"
width="690"
height="2005"
loading="lazy"
class="gallery-image"
data-flex-grow="34"
data-flex-basis="82px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Danielskry/Awesome-RAG" target="_blank" rel="noopener"
>Awesome-RAG&lt;/a>，GitHub 上一份精心整理的检索增强生成（RAG）技术资源集合。&lt;/p>
&lt;p>这份列表系统整理了 RAG 相关的理论知识、实现方法、开发框架、关键技术以及评估指标等内容。&lt;/p>
&lt;p>从基本原理到高级技术详解，再到实现步骤，有助于我们更好学习与使用 RAG。&lt;/p>
&lt;h3 id="多平台直播流自动录制工具">多平台直播流自动录制工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-33-59.png"
width="690"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ihmily/StreamCap" target="_blank" rel="noopener"
>StreamCap&lt;/a>，一个基于FFmpeg的直播流录制客户端，可录制覆盖 40+ 国内外主流直播平台。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>系统支持：Windows 11/10 | macOS 12+ (x86/ARM)&lt;/li>
&lt;li>功能支持：支持批量录制、循环监控、定时监控、消息推送以及自动转码&lt;/li>
&lt;li>画质支持：蓝光、超清、高清、标清、流畅&lt;/li>
&lt;li>支持的保存格式：MP4、TS、FLV、MKV、MOV、MP3、WAV、M4A&lt;/li>
&lt;/ul>
&lt;p>已支持平台：&lt;/p>
&lt;ul>
&lt;li>国内平台（30+）：抖音、快手、虎牙、斗鱼、B站、小红书、YY、映客、Acfun、Blued、京东、淘宝&lt;/li>
&lt;li>海外平台（10+）：TikTok、Twitch、PandTV、Soop、Twitcasting、CHZZK、Shopee、Youtube、LiveMe、Flextv、Popkontv、Bigo&lt;/li>
&lt;/ul>
&lt;h3 id="音频可视化画布">音频可视化画布
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-126-%E6%9C%9F/2025-04-13-16-34-08.png"
width="690"
height="411"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="402px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/RylanBot/melody-canvas" target="_blank" rel="noopener"
>melody-canvas&lt;/a>，开源音频可视化前端库。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>💕 音频可视化
&lt;ul>
&lt;li>基于 Web Audio API，实现音频分析算法&lt;/li>
&lt;li>支持多种类型元素的创建，提供灵活的自定义选项&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>💕 画布编辑
&lt;ul>
&lt;li>使用 FabricJS 库，实现可拖拽编辑器&lt;/li>
&lt;li>支持图片和文本的添加，方便组合搭配&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>💕 视频导出
&lt;ul>
&lt;li>使用基于 WebCodecs API 的 WebAV 库，实现在浏览器环境下加工视频&lt;/li>
&lt;li>支持视频在渲染的过程中，继续调整其它内容&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 125 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-36-42.png" alt="Featured image of post 机器文摘 第 125 期" />&lt;h1 id="机器文摘-第-125-期">机器文摘 第 125 期
&lt;/h1>&lt;h3 id="如何实现一个分词器">如何实现一个分词器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-36-11.png"
width="465"
height="241"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="463px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://juejin.cn/post/7397701403378155530" target="_blank" rel="noopener"
>如何实现一个分词器&lt;/a>，本文详细介绍了如何实现一个分词器，并探讨了其在自然语言处理和代码补全中的应用。&lt;/p>
&lt;p>通过理解BPE算法的原理和实现过程，我们不仅能够创建自定义的分词器，还能更好地适配和优化大语言模型的使用。&lt;/p>
&lt;p>本文提供的分词器实现方案不仅适用于代码补全工具，还可以扩展到其他需要文本处理的领域。&lt;/p>
&lt;h3 id="当广播电台成了软件商店1980年代的科技魔法">当广播电台成了“软件商店”：1980年代的科技魔法
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-36-42.png"
width="690"
height="425"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>
&lt;a class="link" href="https://newslttrs.com/yes-in-the-1980s-we-downloaded-games-from-the-radio" target="_blank" rel="noopener"
>通过广播下载游戏&lt;/a>，这篇文章讲述了1980年代英国的一项令人难以置信的技术现象。&lt;/p>
&lt;p>1980年代的某个深夜，英国的无线电波中突然响起一阵刺耳的尖叫——这不是恐怖电影配乐，而是一群孩子屏住呼吸等待的“魔法咒语”。他们把磁带机对准收音机，按下录音键，然后祈祷这段噪音能在明天变成一场太空射击游戏。&lt;/p>
&lt;p>这是真的。&lt;/p>
&lt;p>当时英国正经历家庭电脑革命，但问题是：市面上的ZX Spectrum、Commodore 64、BBC Micro彼此完全不兼容，软件像巴尔干半岛一样割裂。BBC电台的《The Chip Shop》节目组急中生智，从荷兰广播公司NOS引进了BASICODE——一种能让不同电脑“听懂同一种语言”的跨平台代码。用户只需先装一个“翻译器”，就能把广播里的噪音转化为程序。&lt;/p>
&lt;p>想象一下：深夜电台开始播放“嘟嘟声”，你用磁带录下来，插进录音机连上电脑，几分钟后屏幕上蹦出一个文字冒险游戏。虽然没有图形，但当像素文字告诉你“你发现了藏宝图！”时，那种心跳至今让老玩家怀念。&lt;/p>
&lt;blockquote>
&lt;p>当互联网让软件分发变成瞬间的事，BASICODE的尖叫渐渐消失在电波里。今天，当我在Facebook看到有人质疑这段历史时，才意识到：我们这一代人的童年，已经成了下一代人眼中的“科幻故事”。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在没有App Store的年代，我们用噪音编织了整个数字世界。&lt;/p>
&lt;/blockquote>
&lt;h3 id="mcp-中文资源合集">MCP 中文资源合集
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-37-45.png"
width="854"
height="701"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="292px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/yzfly/Awesome-MCP-ZH" target="_blank" rel="noopener"
>Awesome-MCP-ZH&lt;/a>，是一个关于MCP的中文资源合集，涵盖了MCP的基础知识、客户端、服务器以及相关工具和教程，旨在帮助中文用户快速上手MCP。&lt;/p>
&lt;h3 id="网易开源的-tts-语音合成项目">网易开源的 TTS 语音合成项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-40-06.png"
width="681"
height="528"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="309px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/netease-youdao/EmotiVoice" target="_blank" rel="noopener"
>EmotiVoice&lt;/a>，是网易有道开源的多语言、多声音和提示控制的文本到语音（TTS）系统。&lt;/p>
&lt;p>支持英语和中文，提供超过2000种声音，支持基于提示生成带有不同情感（如开心、悲伤、愤怒等）的语音。&lt;/p>
&lt;p>具备情感合成、语音克隆等功能，提供Web界面和OpenAl兼容的API，方便用户使用和开发者集成，适合用在语音助手、有声读物等多种场景。&lt;/p>
&lt;h3 id="帮你自动画架构图的-ai">帮你自动画架构图的 AI
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-40-18.png"
width="690"
height="460"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://halomate.ai/" target="_blank" rel="noopener"
>halomate&lt;/a>，一款收费 AI 绘图产品，可以根据文字生成图像，有别于其他文生图模型，这款产品能够根据文字描述帮助用户生成软件产品架构图、思维导图等专业图形。&lt;/p>
&lt;h3 id="开源跨设备文件共享工具">开源跨设备文件共享工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-40-55.png"
width="810"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="418px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/schollz/croc" target="_blank" rel="noopener"
>croc&lt;/a>，一款跨设备文件分享的开源免费工具，无需在同一网络下，允许任意两台电脑之间传输文件或文件夹，不限制大小，并提供端到端加密，更安全更快速地分享。&lt;/p>
&lt;p>支持多文件传输，以及中断后的断点续传功能。&lt;/p>
&lt;p>支持 Windows、Linux 和 macOS 一键安装使用。&lt;/p>
&lt;h3 id="基于-cloudflare-pages-的开源免费文件托管解决方案">基于 CloudFlare Pages 的开源免费文件托管解决方案
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-41-30.png"
width="807"
height="460"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;p>在写文章或教程时，我们经常需要插入大量的图片和文件，往往需要一个稳定且不限大小的图床。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/MarSeventh/CloudFlare-ImgBed" target="_blank" rel="noopener"
>CloudFlare ImgBed&lt;/a>，一个基于 CloudFlare Pages 的开源免费文件托管解决方案，可作为图床、文件床、网盘。&lt;/p>
&lt;p>提供上传、管理、读取、删除等全链路功能，并支持鉴权、目录、图片审查、随机图等各项特性。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持多种存储渠道（Telegram Bot、Cloudflare R2、S3 等）与多种上传方式&lt;/li>
&lt;li>支持目录功能、上传认证、图片审查、防滥用与 IP 黑名单&lt;/li>
&lt;li>提供丰富 API 接口，包含上传 API 与随机图 API&lt;/li>
&lt;li>可自定义网站外观、背景、图床名称、Logo 等界面元素&lt;/li>
&lt;li>完全基于 Cloudflare 免费额度，无需额外购买服务器和域名&lt;/li>
&lt;/ul>
&lt;h3 id="自媒体平台自动化工具">自媒体平台自动化工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-41-49.png"
width="797"
height="467"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dreammis/social-auto-upload" target="_blank" rel="noopener"
>social-auto-upload&lt;/a>，可以自动化发布视频到自媒体平台。&lt;/p>
&lt;p>支持抖音、小红书、视频号、tiktok、youtube、bilibili等&lt;/p>
&lt;p>支持定时上传和计划任务上传&lt;/p>
&lt;h3 id="从零开始的-llama-32">从零开始的 Llama 3.2
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-125-%E6%9C%9F/2025-04-06-11-42-29.png"
width="1328"
height="728"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/p>
&lt;p>想学习开源项目，自己撸一遍才能知其所以然。&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/rasbt/llama-3.2-from-scratch" target="_blank" rel="noopener"
>llama-3.2-from-scratch&lt;/a>，这个huggingface项目介绍了一个从零开始实现的 PyTorch 版本的 Llama 3.2 文本模型，代码简洁易懂，适合学习和研究。&lt;/p>
&lt;p>它提供了详细的使用指南，包括模型设置、权重下载、文本生成等步骤。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 124 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/</link><pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-35-52.png" alt="Featured image of post 机器文摘 第 124 期" />&lt;h1 id="机器文摘-第-124-期">机器文摘 第 124 期
&lt;/h1>&lt;h3 id="mcp-是什么">MCP 是什么？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-31-38.png"
width="740"
height="288"
loading="lazy"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="616px"
>&lt;/p>
&lt;p>最近 MCP 协议实在是太火了，它到底是什么？与智能体、LLM 到底是什么关系？&lt;/p>
&lt;p>&lt;a class="link" href="https://read.highgrowthengineer.com/p/mcps-simply-explained" target="_blank" rel="noopener"
>MCP（模型上下文协议）：5 分钟简单解释&lt;/a>，MCP，即模型上下文协议 ，本文将为您简化 MCP 的含义，向您展示如何使用它来提高工作效率，并解释其幕后工作原理。&lt;/p>
&lt;p>简而言之，MCP 是一种可以让 LLM 大语言模型更轻松地与外部工具集成的方式。&lt;/p>
&lt;p>默认情况下，当您与 Claude、ChatGPT 或 Cursor IDE 对话时，如果您要求它“从 Sentry 中提取最新错误并修复它们”，它将不知道您在说什么。同样，它也不知道如何做以下任何事情：&lt;/p>
&lt;ul>
&lt;li>阅读 PM 提供的 PRD 并编写符合要求的测试&lt;/li>
&lt;li>在 Slack 中阅读 #alerts 频道中的消息并进行调试&lt;/li>
&lt;li>为你发现需要重构的一些代码创建 JIRA 票证&lt;/li>
&lt;/ul>
&lt;p>MCP 可让您完成所有这些工作。这是工程师可以遵循的标准协议，以向公众展示这些工具。&lt;/p>
&lt;p>有两个关键组成部分：&lt;/p>
&lt;ul>
&lt;li>MCP 服务器： Sentry、Slack、JIRA、Gmail 等提供商围绕遵循 MCP 协议的 API 设置适配器 。任何工程师也可以开源自己的服务器！&lt;/li>
&lt;li>MCP 客户端： 您使用的各种客户端和应用程序（如 Cursor）知道如何使用“MCP 协议”进行通信。&lt;/li>
&lt;/ul>
&lt;h3 id="mcp-编程极速入门中文教程">MCP 编程极速入门中文教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-32-15.png"
width="721"
height="495"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://github.com/liaokongVFX/MCP-Chinese-Getting-Started-Guide" target="_blank" rel="noopener"
>MCP-Chinese-Started-Guide&lt;/a>，这有一份关于 MCP 的中文教程，作者一步步讲解了如何从开发 MCP 服务器，到调试 MCP 服务器，再到结合
DeepSeek + Cline 构建图文生成实例。&lt;/p>
&lt;blockquote>
&lt;p>模型上下文协议（MCP）是一个创新的开源协议，它重新定义了大语言模型（LLM）与外部世界的互动方式。MCP 提供了一种标准化方法，使任意大语音模型能够轻松连接各种数据源和工具，实现信息的无缝访问和处理。MCP 就像是 AI 应用程序的 USB-C 接口，为 AI 模型提供了一种标准化的方式来连接不同的数据源和工具。&lt;/p>
&lt;/blockquote>
&lt;h3 id="知识库增强语言模型">知识库增强语言模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-33-20.png"
width="964"
height="510"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="453px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/KBLaM" target="_blank" rel="noopener"
>KBLaM&lt;/a>，是微软最新推出的一种利用外部知识进行增强的新方法。与检索增强生成（RAG）不同，KBLaM 消除了外部检索模块；与上下文学习不同，它的计算开销与 KB 大小成线性关系，而不是二次关系。&lt;/p>
&lt;p>KBLaM 相当于给AI配了个&amp;quot;活字典&amp;quot;，解决了LLM高效整合外部知识的问题。&lt;/p>
&lt;p>KBLaM可以随时更新，不用重新训练。它把外部知识转换成连续的键值向量对，直接嵌入到模型的注意力层中，从而实现隐式检索，当知识库更新时，只需要更新对应的键值对即可，无需重新训练整个模型。&lt;/p>
&lt;p>这种方法比RAG更直接，不需要外部检索；比上下文学习更高效，可以处理更多知识；比微调更灵活，可以随时更新知识。&lt;/p>
&lt;h3 id="在线绘图板但是可以做动画">在线绘图板，但是可以做动画
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-33-43.png"
width="601"
height="725"
loading="lazy"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="198px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://inscribed.app/" target="_blank" rel="noopener"
> Inscribed&lt;/a>，可生成动画的在线绘图板。&lt;/p>
&lt;p>功能特点:&lt;/p>
&lt;ul>
&lt;li>🎨 由 Excalidraw 驱动的交互式绘图画布&lt;/li>
&lt;li>⌨️ 支持键盘快捷键&lt;/li>
&lt;li>📏 可自定义文档尺寸&lt;/li>
&lt;li>🖼️ 图片导入和处理&lt;/li>
&lt;li>🔤 集成 Google 字体&lt;/li>
&lt;li>🎭 演示模式支持&lt;/li>
&lt;li>📤 支持导出 GIF 动画&lt;/li>
&lt;li>💾 数据导出/导入功能&lt;/li>
&lt;li>🔗 支持通过 Gist 托管的 iframe 嵌入&lt;/li>
&lt;/ul>
&lt;h3 id="开源音乐生成模型">开源音乐生成模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-34-09.png"
width="690"
height="253"
loading="lazy"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="654px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ASLP-lab/DiffRhythm" target="_blank" rel="noopener"
>Di♪♪Rhythm(中文名：谛韵）&lt;/a>，是第一个能够创作完整歌曲的开源基于扩散的音乐生成模型。&lt;/p>
&lt;p>速度确实快，用base模型20s就能生成出来1m35s的音乐，需要16g显存。&lt;/p>
&lt;p>以后写歌更方便了。 ​​​&lt;/p>
&lt;h3 id="开源-b-站历史记录管理工具">开源 B 站历史记录管理工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-34-25.png"
width="690"
height="312"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="530px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/2977094657/BilibiliHistoryFetcher" target="_blank" rel="noopener"
>BilibiliHistoryFetcher&lt;/a>，这是一个B站历史记录管理工具，解决了B站历史记录只能保存最近几个月、无法复杂筛选、没有数据分析等痛点。它使用Python开发，采用SQLite数据库存储，支持视频下载、数据分析、AI摘要等功能&lt;/p>
&lt;p>获取b站历史记录，保存到本地数据库，可下载对应视频及时存档，生成详细的年度总结，自动化任务部署到服务器实现自动同步，以及自动发送日志邮件。&lt;/p>
&lt;h3 id="ai-直接生成二进制可执行文件">AI 直接生成二进制可执行文件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-35-27.png"
width="1178"
height="389"
loading="lazy"
class="gallery-image"
data-flex-grow="302"
data-flex-basis="726px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SamsungSAILMontreal/ByteCraft" target="_blank" rel="noopener"
>ByteCraft&lt;/a>，我们已经见多了AI生成文字、图像、视频，这个项目不太一样，是让AI直接生成可执行的二进制文件。&lt;/p>
&lt;p>ByteCraft，是通过在 4 个 GPU 上对 7B 参数的LLM（Qwen2.5）进行微调，以 32K 的生成上下文长度训练了 4 个月，以生成基于文本描述的视频游戏和动画的二进制文件。&lt;/p>
&lt;blockquote>
&lt;p>想象一下这样一个世界：你可以编写一个描述你想要的视频游戏或动画的提示，然后生成一个功能齐全的可执行文件。我们通过训练一个模型来生成视频游戏和动画的字节，首次尝试实现这个疯狂的目标！&lt;/p>
&lt;/blockquote>
&lt;h3 id="阿里巴巴集团统一实验室制作的数字人模型">阿里巴巴集团统一实验室制作的数字人模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-124-%E6%9C%9F/2025-03-30-16-35-52.png"
width="705"
height="392"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://lingtengqiu.github.io/LHM/" target="_blank" rel="noopener"
>LHM&lt;/a>，一个能从单张图像几秒钟重建出可动画化的3D数字人模型，支持实时渲染、姿态控制。&lt;/p>
&lt;p>一张照片几秒钟创建出一个3D数字人，这个数字人可以做各种动作，效果看起来逼真，衣服、头发、面部等细节保持的很好。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 123 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/</link><pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-08-27.png" alt="Featured image of post 机器文摘 第 123 期" />&lt;h1 id="机器文摘-第-123-期">机器文摘 第 123 期
&lt;/h1>&lt;h3 id="一个-开源-低成本2000-人形机器人">一个 开源 低成本(~¥2000) “人形”机器人
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-03-46.png"
width="690"
height="618"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/timqian/bambot" target="_blank" rel="noopener"
>Bambot&lt;/a>，是一个开源项目，旨在以廉价的硬件拼装出可用的“人形”机器人。&lt;/p>
&lt;p>我看了项目视频，虽然距离“人形”还有不少差距，但是从可用性上来说，还是有一些东西的，主要是价格便宜，全部硬件加起来不超过 300 美元。&lt;/p>
&lt;h3 id="绝版游戏保护工程">绝版游戏保护工程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-05-06.png"
width="557"
height="681"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>
&lt;a class="link" href="https://github.com/skywind3000/preserve-cd" target="_blank" rel="noopener"
>preserve-cd&lt;/a>，该项目不仅收集了 64+ 款几乎绝版的精品 DOS 游戏，还有 100+ 款上手简单但超级耐玩的 Windows 和 Flash 小游戏。&lt;/p>
&lt;blockquote>
&lt;p>今天互联网上的内容，由于各种原因，正在以越来越快的速度消失，而新一代网民们，却并没有备份和记录的习惯及意识。不远的将来，会有一天，当你特别想找一个东西却搜尽互联网都找不到时就来麻烦了，本项目立足于将这样的损失最小化。&lt;/p>
&lt;/blockquote>
&lt;p>此外，该项目还有一个兄弟项目&lt;a class="link" href="https://github.com/skywind3000/preserve-iso" target="_blank" rel="noopener"
>绝版软件保护工程&lt;/a>，收录了很多“历史上”经典的开发环境相关工具及套件。&lt;/p>
&lt;h3 id="开源圆角等宽字体适合编程">开源圆角等宽字体（适合编程）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-05-37.png"
width="832"
height="801"
loading="lazy"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="249px"
>
&lt;a class="link" href="https://github.com/subframe7536/maple-font" target="_blank" rel="noopener"
>Maple Mono&lt;/a>：开源圆角等宽字体，中英文宽度完美2:1，细粒度的自定义选项 。&lt;/p>
&lt;p>字体作者说：&lt;/p>
&lt;blockquote>
&lt;p>市面上有这么多优秀的等宽字体，经由专业的设计师设计，看起来整洁美观。但是，当他真正把它们作为主要字体用来写代码时，他发现其中很多的字体总有一些地方让他不太满意，例如：&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>JetBrains Mono 虽然字形设计精炼、排版整齐划一，但是风格有些死板。&lt;/li>
&lt;li>Fira Code 虽然有丰富的连字，但是缺少斜体，自动生成的斜体角度过大。&lt;/li>
&lt;li>Victor Mono 虽然具有手写风格的斜体，但是其稍显夸张的风格让他有些难以接受。&lt;/li>
&lt;li>Sarasa Gothic 虽然中英文 2:1 等宽，但是英文部分过于狭窄，阅读体验不太好。&lt;/li>
&lt;li>很少有等宽字体设计有圆角。&lt;/li>
&lt;li>很少有等宽字体对 Nerd-Font 和中文优先支持。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>因此，他制作了这一款字形整洁、拥有手写风格的斜体、细粒度自定义配置、内置 Nerd-Font、中英文 2:1 等宽的字体，用于提升自己的工作效率，希望它也能对其他人有所帮助。&lt;/p>
&lt;/blockquote>
&lt;h3 id="执行网页数据抓取的-mcp-server">执行网页数据抓取的 MCP Server
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-06-54.png"
width="839"
height="843"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jae-jae/fetcher-mcp" target="_blank" rel="noopener"
>fetcher-mcp&lt;/a>，一个基于Playwright无头浏览器的网页内容抓取MCP server项目。&lt;/p>
&lt;p>支持JavaScript，用Playwright执行JavaScript，能处理动态网页内容和现代网页应用&lt;/p>
&lt;p>内置Readability算法，可自动提取网页主要内容，去除广告、导航等非核心元素&lt;/p>
&lt;p>可并行处理，支持HTML和Markdown输出&lt;/p>
&lt;p>可自动屏蔽不必要的资源，图片、样式表、字体、媒体等。&lt;/p>
&lt;p>&lt;a class="link" href="https://onevcat.com/2025/02/mcp/" target="_blank" rel="noopener"
>MCP 是什么，可以看这篇文章&lt;/a>：MCP (Model Context Protocol，模型上下文协议) 是由 Anthropic 在 2024 年底推出的一种开放协议，它通过提供一种标准化的接口，旨在通过标准化的接口实现大语言模型 (LLM) 与外部数据源及工具的无缝集成。&lt;/p>
&lt;h3 id="专门矢量作图的-ai-模型">专门矢量作图的 AI 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-08-03.png"
width="1046"
height="777"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/joanrod/star-vector" target="_blank" rel="noopener"
>StarVector&lt;/a>， 是一个专为 SVG 向量图形生成 设计的基础模型，其目标是：&lt;/p>
&lt;p>用大模型（VLM）从图像或文本中理解语义结构，并自动生成标准可编辑的 SVG代码，适用于图标、技术图、LOGO、表情等。&lt;/p>
&lt;p>也就是将 SVG 矢量图的生成转化为“代码生成任务”，支持从图像或文本生成高质量 SVG 文件。&lt;/p>
&lt;p>StarVector 使用多模态架构来处理图像和文本。&lt;/p>
&lt;p>执行图像到 SVG（或图像矢量化）时，图像被投影到视觉标记中，并生成 SVG 代码。&lt;/p>
&lt;p>执行文本到 SVG 时，模型仅接收文本指令（不提供图像），并创建一个新的 SVG。&lt;/p>
&lt;h3 id="用于激光点云矢量化的大模型">用于激光点云矢量化的大模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-08-27.png"
width="690"
height="454"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="364px"
>
&lt;a class="link" href="https://huggingface.co/manycore-research/SpatialLM-Llama-1B" target="_blank" rel="noopener"
>SpatialLM&lt;/a> 是一种 3D 大型语言模型，旨在处理 3D 点云数据并生成结构化的 3D 场景理解输出。&lt;/p>
&lt;p>这些输出包括建筑元素，如墙壁、门、窗户和定向物体边界框及其语义类别。&lt;/p>
&lt;p>与以前需要专门设备进行数据收集的方法不同，SpatialLM 可以处理来自各种来源的点云，例如单目视频序列、RGBD 图像和 LiDAR 传感器。&lt;/p>
&lt;p>这种多模态架构有效地弥合了非结构化 3D 几何数据和结构化 3D 表示之间的差距，提供了高级语义理解。&lt;/p>
&lt;p>它增强了空间推理能力，适用于具象机器人、自主导航和其他复杂的 3D 场景分析任务中的应用。&lt;/p>
&lt;h3 id="控制-unity-游戏引擎的-mcp-server-也来了">控制 Unity 游戏引擎的 MCP Server 也来了
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-10-29.png"
width="538"
height="295"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>
继 &lt;a class="link" href="https://github.com/ahujasid/blender-mcp" target="_blank" rel="noopener"
>blender-mcp&lt;/a> 之后，果然也有人做出了&lt;a class="link" href="https://github.com/justinpbarnett/unity-mcp" target="_blank" rel="noopener"
>Unity MCP&lt;/a>，通过 LLM 对话来控制 Unity 去设计游戏。&lt;/p>
&lt;p>Unity MCP Server 提供了 Unity（通过 C#）与 Python 服务器之间的双向通信通道，支持：&lt;/p>
&lt;ul>
&lt;li>资产管理：以编程方式创建、导入和操作 Unity 资产。&lt;/li>
&lt;li>场景控制：管理场景、对象及其属性。&lt;/li>
&lt;li>材质编辑：修改材质及其属性。&lt;/li>
&lt;li>脚本集成：查看、创建和更新 Unity 脚本。&lt;/li>
&lt;li>编辑器自动化：控制 Unity 编辑器功能，如撤销、重做、播放和构建。&lt;/li>
&lt;/ul>
&lt;p>项目适合希望利用LLMs来增强其 Unity 项目或自动化重复任务的开发者。&lt;/p>
&lt;h3 id="大模型微调数据集创建工具">大模型微调数据集创建工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-123-%E6%9C%9F/2025-03-23-18-11-07.png"
width="690"
height="416"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="398px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ConardLi/easy-dataset" target="_blank" rel="noopener"
>Easy DataSet&lt;/a>，提供了直观的界面，上传文件，智能分割内容，生成问题，并为模型微调生成高质量的训练数据。&lt;/p>
&lt;p>此外，还支持导出 Alpaca、JSON 等多种格式数据集，同时兼容所有遵循 OpenAI 格式的 LLM API。&lt;/p>
&lt;p>提供 Windows、MacOS 和 Linux 安装包下载，开箱即用，也支持 Docker 部署和 NPM 安装。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 122 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/</link><pubDate>Sun, 16 Mar 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-46-46.png" alt="Featured image of post 机器文摘 第 122 期" />&lt;h1 id="机器文摘-第-122-期">机器文摘 第 122 期
&lt;/h1>&lt;h3 id="被勒索软件加密的文件有破解可能吗">被勒索软件加密的文件有破解可能吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-44-32.png"
width="517"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="357px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tinyhack.com/2025/03/13/decrypting-encrypted-files-from-akira-ransomware-linux-esxi-variant-2024-using-a-bunch-of-gpus/" target="_blank" rel="noopener"
>用 GPU 解密被勒索软件加密的文件&lt;/a>，作者最近帮助一家公司从 Akira 勒索软件中恢复了数据，而无需支付赎金。为此专门写了一篇博客，分享他是如何做到的，以及完整的源代码。&lt;/p>
&lt;p>这篇文章深入探讨了如何利用 GPU 破解 Akira 勒索软件（Linux/ESXI 2024 变种）加密的文件，无需支付赎金。文章首先介绍了 Akira 勒索软件的背景，指出该变种使用当前时间（纳秒）作为种子进行加密，且每个文件都有唯一的密钥。作者通过分析恶意软件的代码和加密原理，发现可以通过暴力破解时间戳来恢复文件。&lt;/p>
&lt;p>文章详细描述了暴力破解的可行性、实施步骤以及相关代码和工具的使用。作者还分享了如何获取明文样本、测量服务器速度、划分工作负载、租用 GPU 等实用信息。此外，文章还提供了恢复文件的具体步骤，包括获取时间戳、密文和明文，以及如何运行暴力破解和解密工具。&lt;/p>
&lt;p>作者在文中强调了这一过程的复杂性和挑战性，同时也分享了成功恢复文件的经验和教训。&lt;/p>
&lt;p>文章最后指出，虽然大多数勒索软件情况下无法在没有密钥的情况下恢复数据，但有时通过深入研究和分析，仍有可能找到解决方案。&lt;/p>
&lt;h3 id="大模型核心概念科普文token-是什么">大模型核心概念科普文：Token 是什么?
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-44-54.png"
width="657"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mp.weixin.qq.com/s/SXT2wuM0sox34PRrqWWAzw" target="_blank" rel="noopener"
>Token 是什么?&lt;/a>&lt;/p>
&lt;ol>
&lt;li>Token（标记）&lt;/li>
&lt;/ol>
&lt;p>定义：文本处理的基本单位，1个中文≈1 Token，1英文≈0.3 Token
作用：模型通过Token处理文本，直接影响上下文长度计算
2. 上下文长度（Context Window）&lt;/p>
&lt;p>定义：单次推理可处理的输入+输出Token总量上限（如DeepSeek为64K≈6万字）
特点：
多轮对话需拼接历史记录，超出限制时触发&amp;quot;上下文截断&amp;quot;（丢弃早期内容）
实际使用中服务端自动截断，用户感知为模型&amp;quot;遗忘&amp;quot;早期对话
3. 最大输出长度&lt;/p>
&lt;p>定义：单次生成内容的最大Token数（如DeepSeek为8K≈8000字）
输入限制：上下文长度 - 最大输出长度 = 最大输入限制（如64K-8K=56K）
典型场景策略&lt;/p>
&lt;p>短输入长输出：输入1K时最多输出63K（需质量检测）
长输入短输出：输入60K文档时最多输出4K摘要
多轮对话管理：通过截断保留最新内容（如累计64K时新输入5K，则丢弃最早5K）
技术原理&lt;/p>
&lt;p>受三大因素限制：
位置编码范围（如RoPE、ALiBi）
自注意力机制计算复杂度
KV Cache显存占用与序列长度正相关
厂商对比&lt;/p>
&lt;p>OpenAI GPT-4：上下文128K，输出4K
Anthropic Claude 3：上下文200K，输出4K
DeepSeek：上下文64K，输出8K
使用建议&lt;/p>
&lt;p>长文本生成需分段请求
关键信息尽量放在对话后期
敏感场景主动设置max_tokens参数
重要内容建议本地存储避免依赖模型记忆
（注：文中数据以DeepSeek模型为例，不同厂商参数存在差异）&lt;/p>
&lt;h3 id="智能体设计引擎">智能体设计引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-45-15.png"
width="690"
height="970"
loading="lazy"
class="gallery-image"
data-flex-grow="71"
data-flex-basis="170px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/emcie-co/parlant" target="_blank" rel="noopener"
>Parlant&lt;/a>，这是一款对话式 AI 引擎，它利用行为指南、运行时监督等，让开发人员能够控制面向用户的 AI Agent。&lt;/p>
&lt;p>来源：&lt;a class="link" href="https://weibo.com/2169039837/PisZ1trIm" target="_blank" rel="noopener"
>@karminski-牙医&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>相信大家都打过移动客服，客服会根据你按的数字键进入下一个对话。这个工具的功能类似，你可以预设用户的提问，然后针对每个提问场景来编写功能，比如是RAG查询还是调用函数去给客户订票等等。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>估计企业客户会对这个框架比较感兴趣，用来搭建自己的智能客服。&lt;/p>
&lt;/blockquote>
&lt;h3 id="像素级精度复制任何ui界面">像素级精度复制任何UI界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-45-44.png"
width="522"
height="304"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="412px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://Same.dev" target="_blank" rel="noopener"
>Same dev&lt;/a>，宣称可以以像素级精度复制任何用户界面（UI），只需提供网页 URL、截图或设计文件（如 Figma），即可生成对应的代码，确保视觉效果与原始界面高度一致。&lt;/p>
&lt;p>通过 AI 驱动，网页链接 将 UI 转化为可运行的代码，支持多种前端技术栈。&lt;/p>
&lt;p>支持的框架包括 HTML/CSS、React、Tailwind CSS 等&lt;/p>
&lt;h3 id="为大模型提供浏览器自动化能力的工具">为大模型提供浏览器自动化能力的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-46-22.png"
width="690"
height="584"
loading="lazy"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="283px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/executeautomation/mcp-playwright" target="_blank" rel="noopener"
>Playwright MCP Server&lt;/a>，通过模型上下文协议（MCP）服务器，让 LLM 可以与网页交互、截取屏幕截图、在真实浏览器环境中执行 JavaScript，实现智能 AI 网页浏览和操作。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>为 Claude 等 LLM 提供浏览器自动化能力&lt;/li>
&lt;li>支持与网页交互、表单填写和导航操作&lt;/li>
&lt;li>能够截取网页截图，帮助 AI 理解网页内容&lt;/li>
&lt;li>支持在浏览器环境中执行 JavaScript 代码&lt;/li>
&lt;li>集成 Smithery 和 mcp-get 等工具，简化安装配置&lt;/li>
&lt;/ul>
&lt;h3 id="让大模型操作-blender-自动建模的工具">让大模型操作 Blender 自动建模的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-46-46.png"
width="526"
height="305"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ahujasid/blender-mcp" target="_blank" rel="noopener"
>BlenderMCP&lt;/a>，一个通过 MCP 实现 Claude 直接操控 Blender 的开源项目：BlenderMCP。&lt;/p>
&lt;p>只需简单的提示词，即可让 Claude 控制 Blender 自动进行 3D 建模、场景创建和模型操作，实现 AI 辅助 3D 内容的创作。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>双向通信：Claude AI 可直接与 Blender 进行实时交互和控制&lt;/li>
&lt;li>对象操作：创建、修改、删除 Blender 中的 3D 对象&lt;/li>
&lt;li>材质控制：应用和修改材质与颜色属性&lt;/li>
&lt;li>场景检查：获取当前 Blender 场景的详细信息&lt;/li>
&lt;li>代码执行：从 Claude 在 Blender 中运行 Python 代码&lt;/li>
&lt;/ul>
&lt;p>提供简单的安装步骤，需先安装 uv 包管理器，然后将插件添加到 Blender 中，并在 Claude 设置中配置 MCP 服务。&lt;/p>
&lt;p>然后输入：&amp;ldquo;创建一个低面数地牢场景，里面有一条龙守卫着一锅金子&amp;rdquo;，Claude 就能直接控制 Blender 创建完整的 3D 场景。&lt;/p>
&lt;h3 id="一个开源的-mcp-客户端工具">一个开源的 MCP 客户端工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-47-28.png"
width="824"
height="462"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/CopilotKit/open-mcp-client" target="_blank" rel="noopener"
>Open MCP Client&lt;/a>，能让我们轻松地在任何应用中与 MCP 服务器进行交互的客户端，只需从 Composio 获取一个 URL 即可快速连接。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>基于网页的 MCP 客户端，可直接在浏览器中使用；&lt;/li>
&lt;li>开源客户端库，可轻松集成到任何应用程序中；&lt;/li>
&lt;li>使用 CopilotKit 构建客户端和交互层；&lt;/li>
&lt;li>集成 LangChain LangGraph ReAct 智能体协调 MCP 调用；&lt;/li>
&lt;li>仅需 40 行代码即可实现 MCP 服务器的连接功能。&lt;/li>
&lt;/ul>
&lt;p>感兴趣的可以部署在 Vercel 平台上，或者直接访问给出体验链接，也可以选择集成到自己的应用中使用。&lt;/p>
&lt;h3 id="llm-微调教程">LLM 微调教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-48-38.png"
width="802"
height="727"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="264px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unsloth.ai/get-started/fine-tuning-guide" target="_blank" rel="noopener"
>Fine-tuning Guide&lt;/a>，一个指南来教您如何正确地微调 LLM！&lt;/p>
&lt;p>主要内容：&lt;/p>
&lt;ul>
&lt;li>选择正确的参数和训练方法&lt;/li>
&lt;li>RL、GRPO、DPO 和 CPT&lt;/li>
&lt;li>数据准备、过度拟合和评估&lt;/li>
&lt;li>使用 Unsloth 进行训练并在 vLLM、Ollama、Open WebUI 上部署&lt;/li>
&lt;/ul>
&lt;h3 id="网易云音乐无损解析开源工具">网易云音乐无损解析开源工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-122-%E6%9C%9F/2025-03-16-17-48-55.png"
width="690"
height="776"
loading="lazy"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="213px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Suxiaoqinx/Netease_url" target="_blank" rel="noopener"
>Netease_url&lt;/a>，只需复制粘贴歌曲链接，即可解析各种音质，包括超清母带、沉浸环绕声等高质量音质，并可打包下载歌曲文件、封面图以及歌词等。&lt;/p>
&lt;p>主要功能：&lt;/p>
&lt;ul>
&lt;li>支持多种音质解析，从标准到超清母带全覆盖；&lt;/li>
&lt;li>提供 GUI 模式和 API 模式两种使用方式；&lt;/li>
&lt;li>自动打包封面图和歌词，一次下载全部资源；&lt;/li>
&lt;li>可通过命令行参数自定义音质和解析方式。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 121 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/</link><pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-03-07.png" alt="Featured image of post 机器文摘 第 121 期" />&lt;h1 id="机器文摘-第-121-期">机器文摘 第 121 期
&lt;/h1>&lt;h3 id="永不落伍的技能">永不落伍的技能
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-16-57-04.png"
width="2415"
height="622"
loading="lazy"
class="gallery-image"
data-flex-grow="388"
data-flex-basis="931px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.autodidacts.io/troubleshooting/" target="_blank" rel="noopener"
>《故障排除：永不落伍的技能》&lt;/a>，本文探讨了故障排除（troubleshooting）作为一种核心技能的重要性，并详细介绍了如何提升这一技能。&lt;/p>
&lt;p>故障排除是系统性地确定系统中不期望行为的原因并加以修复的过程，它在多个领域中都具有普遍适用性。&lt;/p>
&lt;p>文章通过一系列具体的步骤和策略，如“后退一步”“确保你在调整正确的琴弦”“确定流程”“观察症状”“隔离问题”等，指导读者如何更有效地进行故障排除。&lt;/p>
&lt;p>此外，作者还讨论了如何通过缩短反馈循环、减少噪声、记录问题等方式提高效率，并指出故障排除能力可以通过实践和反思得到提升。&lt;/p>
&lt;h3 id="intel-arc-显卡也能跑-deepseek-r1-满血版大模型了">intel arc 显卡也能跑 deepseek-r1 满血版大模型了
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-16-57-35.png"
width="579"
height="474"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="293px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/intel/ipex-llm/blob/main/docs/mddocs/Quickstart/llamacpp_portable_zip_gpu_quickstart.zh-CN.md" target="_blank" rel="noopener"
>使用 IPEX-LLM 在 Intel GPU 运行 llama.cpp Portable Zip&lt;/a>，本指南演示如何使用 llama.cpp portable zip 通过 ipex-llm 在 Intel GPU 上直接免安装运行。&lt;/p>
&lt;p>使用最新版 llama.cpp Portable Zip 可以在 Xeon 上通过1到2张 Arc A770 GPU 运行 DeepSeek-R1-671B-Q4_K_M ​​​&lt;/p>
&lt;h3 id="本地化智能学习助手">本地化智能学习助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-16-58-39.png"
width="1211"
height="794"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://wisemind-ai.com/" target="_blank" rel="noopener"
>WiseMindAI&lt;/a>，是一款融合了 AI 功能的本地知识库产品。创建知识库并总结📑、与知识库对话💬、生成知识卡片📏，全都能轻松搞定！&lt;/p>
&lt;p>如果你使用过 ima、Cherry Studio，应该会喜欢 WiseMindAI，它就像是 ima + Cherry Studio 的本地化升级版，功能更强大，使用也更安心～&lt;/p>
&lt;p>数据完全本地化，支持文档总结、对话、笔记、海报、10+个AI大模型等收起。&lt;/p>
&lt;p>&lt;a class="link" href="https://mp.weixin.qq.com/s/FmvGxFPKNjhAwD7M2OTaHw" target="_blank" rel="noopener"
>作者还写了一篇文章带你快速掌握WiseMindAI&lt;/a>&lt;/p>
&lt;h3 id="关于大模型的电子书">关于大模型的电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-16-59-07.png"
width="491"
height="650"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="181px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://luhengshiwo.github.io/LLMForEverybody/" target="_blank" rel="noopener"
>LLMForEverybody&lt;/a>&lt;/p>
&lt;h3 id="在线文件格式转换平台">在线文件格式转换平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-00-00.png"
width="1127"
height="640"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="422px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.alltoall.net" target="_blank" rel="noopener"
>alltoall&lt;/a>，最全类型的在线文件转换平台，免费、快速，支持200+文件格式的转换、压缩、AI抠图等。虽然对文件大小有一定限制，但日常使用足够了。&lt;/p>
&lt;h3 id="一款-ai-语音增强与转换工具">一款 AI 语音增强与转换工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-01-00.png"
width="916"
height="850"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="258px"
>
&lt;a class="link" href="https://xiaohu.ai/c/ai-23cc23/micdrop-ai-5ec77392-9592-4925-80ff-d5cbbe7ecdc5" target="_blank" rel="noopener"
>MicDrop&lt;/a>，一款 AI 语音增强与转换工具，可以将你的歌声实时转换成录影棚级别的质量&lt;/p>
&lt;p>✅ 实时变声，无需后期处理 🎙️
✅ 将你的声音变成各种声音，创作独特音效 🎷🎻
✅ AI 自动和声，让你的作品更饱满 🎼
✅ 一键提升录音质量，适用于直播、播客、电影配音 🎬
✅ 免版税声音库，可自由商用 💰&lt;/p>
&lt;p>你只用手机录了一段歌声，MicDrop 可以让它听起来像是在录音棚里录制的专业配音！&lt;/p>
&lt;p>它可与所有主流数字音频工作站（DAW）兼容，支持 AU 和 VST3 插件格式。&lt;/p>
&lt;h3 id="本地化的-ai-桌面应用">本地化的 AI 桌面应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-01-30.png"
width="690"
height="455"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/signerlabs/klee-client" target="_blank" rel="noopener"
>Klee&lt;/a>，这款应用内置 RAG 知识库和 Markdown 笔记支持，让我们能在本地运行开源大模型，完全离线使用且零数据收集，保护隐私安全。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>可下载并在桌面运行开源 LLM 模型&lt;/li>
&lt;li>完全离线使用，零数据收集，保障隐私安全&lt;/li>
&lt;li>内置 Markdown 笔记功能，便于记录和整理思路&lt;/li>
&lt;li>支持文件和文件夹知识库，建立个性化 AI 助手&lt;/li>
&lt;li>基于 Ollama 和 LlamaIndex 构建，运行快速高效&lt;/li>
&lt;/ul>
&lt;p>提供各平台安装包，直接下载安装即可使用，也支持从源码构建安装。&lt;/p>
&lt;h3 id="开源音乐生成模型">开源音乐生成模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-02-28.png"
width="964"
height="521"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="444px"
>
&lt;a class="link" href="https://github.com/smthemex/ComfyUI_YuE" target="_blank" rel="noopener"
>YUE&lt;/a>，香港科技大学开源的音乐模型，可以作为著名AI音乐应用suno的平替。&lt;/p>
&lt;p>这个模型专为音乐生成而设计，专门用于将歌词转换为完整歌曲 （lyrics2song）。&lt;/p>
&lt;p>它可以生成一首完整的歌曲，持续几分钟，其中包括朗朗上口的音轨和伴奏音轨。&lt;/p>
&lt;p>YuE 能够对不同的流派/语言/声乐技巧进行建模，无论是流行乐，是是重金属。&lt;/p>
&lt;p>同时，也可以生成人声，包括中文、英文、韩文、日文等等。&lt;/p>
&lt;p>可以作为视频模型的配音来用。&lt;/p>
&lt;h3 id="又一款语音自然的-tts-模型">又一款语音自然的 TTS 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-03-07.png"
width="533"
height="296"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/collections/HKUSTAudio/llasa-679b87dbd06ac556cc0e0f44" target="_blank" rel="noopener"
>Llasa&lt;/a>，一款基于Llama的TTS系统。&lt;/p>
&lt;p>它通过扩展训练时间和推理时间计算，提高了语音合成的自然度、韵律准确性和情感表达能力&lt;/p>
&lt;p>生成效果自然流畅富有感情，开心、悲伤等情感表现的比较自然，适合做有声读物或语音助手&lt;/p>
&lt;p>它用了一个Xcodec2语音分词器，把语音分解成一个个小的标记，使计算机更容易处理语音，这些标记不仅能表示语音的内容，还能保留语音的情感和音色信息&lt;/p>
&lt;p>核心在于其单一Transformer架构和规模化训练/推理策略，结合Xcodec2语音分词器，使其能生成更自然、更富有表现力的语音&lt;/p>
&lt;p>有1B、3B、8B三个版本，支持中英文&lt;/p>
&lt;h3 id="每天根据新闻生成语音博客">每天根据新闻生成语音博客
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-03-27.png"
width="756"
height="753"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://hacker-news.agi.li/" target="_blank" rel="noopener"
>hacker-news&lt;/a>，一个基于 AI 的 Hacker News 中文播客项目，每天自动抓取 Hacker News 热门文章，通过 AI 生成中文总结并转换为播客内容。&lt;/p>
&lt;p>主要特性&lt;/p>
&lt;ul>
&lt;li>🤖 自动抓取 Hacker News 每日热门文章&lt;/li>
&lt;li>🎯 使用 AI 智能总结文章内容和评论&lt;/li>
&lt;li>🎙️ 通过 Edge TTS 生成中文播报&lt;/li>
&lt;li>📱 支持网页和播客 App 收听&lt;/li>
&lt;li>🔄 每日自动更新&lt;/li>
&lt;li>📝 提供文章摘要和完整播报文本
技术栈&lt;/li>
&lt;li>Next.js 应用框架&lt;/li>
&lt;li>Cloudflare Workers 部署和运行环境&lt;/li>
&lt;li>Edge TTS 语音合成&lt;/li>
&lt;li>OpenAI API 内容生成&lt;/li>
&lt;li>Tailwind CSS 样式处理&lt;/li>
&lt;li>shadcn UI 组件库&lt;/li>
&lt;/ul>
&lt;p>我试听了一下，感觉效果很棒，有很大潜力啊，以后每个人都可以设置自己的个性化主播和电台。&lt;/p>
&lt;h3 id="ai驱动的电子表格">AI驱动的电子表格
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-121-%E6%9C%9F/2025-03-09-17-04-30.png"
width="816"
height="695"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/PragmaticMachineLearning/probly" target="_blank" rel="noopener"
>Probly&lt;/a>，一款AI驱动的电子表格应用：Probly，它结合了电子表格功能、Python数据分析和AI的能力，所有操作都在浏览器内完成，&lt;/p>
&lt;p>具备全功能的电子表格能力，支持各种公式&lt;/p>
&lt;p>可以直接在浏览器中运行Python代码&lt;/p>
&lt;p>支持数据可视化，可以根据数据创建图表和可视化效果&lt;/p>
&lt;p>内置AI提供智能建议和自动化分析，可以用自然语言提问题，比如“帮我预测下个月的销售额”，或“找出哪些客户最有可能流失”，它会自动分析数据并给出答案，还能生成图表和可视化报告&lt;/p>
&lt;p>数据分析全部在浏览器本地完成&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 120 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/</link><pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-20-53.png" alt="Featured image of post 机器文摘 第 120 期" />&lt;h1 id="机器文摘-第-120-期">机器文摘 第 120 期
&lt;/h1>&lt;h3 id="用240个浏览器标签页中运行经典弹球游戏">用240个浏览器标签页中运行经典弹球游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-14-55.png"
width="538"
height="351"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="367px"
>
&lt;a class="link" href="https://eieio.games/blog/running-pong-in-240-browser-tabs" target="_blank" rel="noopener"
>Pong 的奇特实验&lt;/a>，这篇文章介绍了一个有趣的项目，利用浏览器标签页运行《Pong》游戏。&lt;/p>
&lt;p>作者通过在8x30网格排列的240个浏览器标签页中运行经典游戏Pong，探索了一种创新的浏览器标签页使用方式。&lt;/p>
&lt;p>受朋友&lt;a class="link" href="https://mewtru.com/flappyfavi" target="_blank" rel="noopener"
>Tru的项目（Flappy Favi）&lt;/a>启发，作者解决了如何创建标签页网格、在后台标签页中更新收藏夹图标以及标签页之间的同步通信等挑战。&lt;/p>
&lt;p>通过使用AppleScript、Web Workers和Broadcast Channels等工具，作者实现了在主画布和标签栏之间的平滑动画和交互。&lt;/p>
&lt;p>最终效果是Pong游戏中的球和球拍能够在前景窗口和标签栏之间无缝移动。&lt;/p>
&lt;h3 id="全世界最好的大语言模型资源汇总">全世界最好的大语言模型资源汇总
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-15-46.png"
width="340"
height="533"
loading="lazy"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="153px"
>
&lt;a class="link" href="https://github.com/WangRongsheng/awesome-LLM-resourses" target="_blank" rel="noopener"
>AI资源合集&lt;/a>，这个项目整理了500（还在持续更新中）多个资源，包括从数据到论文，教程等一应俱全。&lt;/p>
&lt;h3 id="从零实现-deepseek-r1">从零实现 DeepSeek R1
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-16-52.png"
width="855"
height="526"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>
&lt;a class="link" href="https://github.com/FareedKhan-dev/train-deepseek-r1" target="_blank" rel="noopener"
>train-deepseek-r1&lt;/a>，GitHub 上一个从零实现 DeepSeek R1 训练过程的开源项目。通过手绘流程图和代码解析，让复杂的 AI 训练变得易懂。&lt;/p>
&lt;p>详细展示了 DeepSeek R1 的训练流程，从基础模型开始，通过强化学习、监督微调等阶段，最终构建出具有卓越推理能力的语言模型。&lt;/p>
&lt;p>项目包含了：&lt;/p>
&lt;ul>
&lt;li>使用手绘流程图详解 DeepSeek R1 架构&lt;/li>
&lt;li>完整实现 GRPO 算法训练 R1 Zero 初始版本&lt;/li>
&lt;li>通过 SFT 解决 R1 Zero 的混乱推理和语言混合问题&lt;/li>
&lt;li>基于推理导向的强化学习优化模型能力&lt;/li>
&lt;li>使用小型基础模型，让本地训练和实验成为可能&lt;/li>
&lt;li>包含奖励函数、拒绝采样等关键技术实现细节&lt;/li>
&lt;/ul>
&lt;h3 id="高性能-ocr-模型">高性能 OCR 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-17-26.png"
width="815"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>
&lt;a class="link" href="https://github.com/allenai/olmocr" target="_blank" rel="noopener"
>olmOCR&lt;/a>，一款开源的高性能 OCR 模型，专门用于将 PDF 和文档图像转换为清晰、结构化的纯文本。模型足够小，可以在本地运行。&lt;/p>
&lt;p>基于 Qwen2-VL-7B-Instruct 构建。它通过在多样化数据集上微调，并结合高效的推理引擎，实现了低成本、高质量的文本提取。&lt;/p>
&lt;p>olmOCR 的优势在于其性能卓越，能够处理复杂布局的文档；&lt;/p>
&lt;p>输出为 Markdown 格式，便于解析；&lt;/p>
&lt;h3 id="免费音乐播放器">免费音乐播放器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-18-27.png"
width="828"
height="464"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>
&lt;a class="link" href="https://github.com/nukeop/nuclear" target="_blank" rel="noopener"
>nuclear&lt;/a>，GitHub 上一款专注于免费流媒体资源的桌面音乐播放器。&lt;/p>
&lt;p>从互联网的各个角落拉取免费的音乐资源，并提供了一个美观、强大的播放界面。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>搜索和播放YouTube上的音乐功能&lt;/li>
&lt;li>专辑搜索功能，查看专辑, 基于艺术家和曲目名称的自动歌曲查询&lt;/li>
&lt;li>歌曲队列，可以作为播放列表导出。&lt;/li>
&lt;li>加载保存的播放列表 (储存在json格式文件中)。&lt;/li>
&lt;li>带评论的最新出版歌曲 - 专辑和音轨。&lt;/li>
&lt;li>按照音乐流派浏览。&lt;/li>
&lt;li>音乐电台模式 (自动排查类似的曲目)。&lt;/li>
&lt;li>无限制的下载 (基于youtube提供的服务)。&lt;/li>
&lt;li>实时歌词展示。&lt;/li>
&lt;li>将喜欢的歌曲添加到你的喜爱曲目列表中。&lt;/li>
&lt;li>在本地库文件中听歌。&lt;/li>
&lt;/ul>
&lt;p>提供 Windows、macOS 和 Linux 安装包，可直接开箱即用。&lt;/p>
&lt;h3 id="一站式-ai-数字人系统">一站式 AI 数字人系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-19-22.png"
width="809"
height="533"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="364px"
>
&lt;a class="link" href="https://github.com/modstart-lib/aigcpanel" target="_blank" rel="noopener"
>AigcPanel&lt;/a>，支持视频合成、声音合成、声音克隆，简化本地模型管理、一键导入和使用 AI 模型。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>支持视频数字人合成，支持视频画面和声音换口型匹配&lt;/li>
&lt;li>支持语音合成、语音克隆，多种声音参数可设置&lt;/li>
&lt;li>支持多模型导入、一键启动、模型设置、模型日志查看&lt;/li>
&lt;li>支持国际化，支持简体中文、英语等&lt;/li>
&lt;li>支持多种模型一键启动包，如 CosyVoice、MuseTalk、LatentSync、Wav2Lip 等&lt;/li>
&lt;/ul>
&lt;h3 id="阿里的视频生成模型">阿里的视频生成模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-20-53.png"
width="538"
height="302"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>
&lt;a class="link" href="https://github.com/Wan-Video/Wan2.1" target="_blank" rel="noopener"
>Wan2.1&lt;/a>，阿里开源的视频生成模型，超过了现有开源模型和商业方案，支持消费级GPU运行&lt;/p>
&lt;p>支持文本生成视频、图像生成视频、视频编辑、文本生成图像及视频生成音频&lt;/p>
&lt;p>支持生成包含中英文文本的视频内容&lt;/p>
&lt;p>其在复杂运动动态生成、物理场景模拟、以及文本渲染上表现优秀&lt;/p>
&lt;p>3D VAE架构，可处理任意长度的1080P视频，并保持时序信息&lt;/p>
&lt;h3 id="一款开源的轻量级-web-应用防火墙">一款开源的轻量级 Web 应用防火墙
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-24-43.png"
width="997"
height="552"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>
&lt;a class="link" href="https://github.com/samwafgo/SamWaf" target="_blank" rel="noopener"
>SamWaf&lt;/a>，一款完全开源的轻量级 Web 应用防火墙，支持私有化部署，提供 Bot 检测、URL 白名单、CC 防护、自定义防护规则等功能，适用于小型企业、工作室和个人网站。&lt;/p>
&lt;h3 id="关于数据收集的开源实用工具">关于数据收集的开源实用工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-25-06.png"
width="862"
height="654"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>
&lt;a class="link" href="https://github.com/patrickloeber/llm-data-scrapers" target="_blank" rel="noopener"
>LLM Data Scrapers&lt;/a>，一份整理了关于数据收集的开源实用工具和抓取数据列表。&lt;/p>
&lt;p>涵盖了从不同来源，如代码库、网页和 PDF 文档等，提取数据的多种方法，并将数据转换为 LLMs 可以处理的格式。&lt;/p>
&lt;p>除此之外，还提供了相关的数据和更多的实用工具列表。&lt;/p>
&lt;h3 id="云粘贴">云粘贴
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-120-%E6%9C%9F/2025-03-02-19-25-44.png"
width="572"
height="431"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>
&lt;a class="link" href="https://toolsonline.app/remote-paste" target="_blank" rel="noopener"
>remote-paste&lt;/a>，一个实验性的工具，这个网站可以让你迅速将内容在手机和电脑之间复制粘贴。&lt;/p>
&lt;blockquote>
&lt;p>作者介绍：有无数次，我想把手机上的一个链接，或者一段文本拷贝到电脑上，我都需要打开一个类似于社交软件的东西；然后在手机上发送到某个窗口，然后在电脑上打开。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>有的朋友会推荐我说，用微信输入法等工具，但是对于没有使用该输入法的人依然会有很长的操作路径&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>于是我开发了一个网站，操作路径如下，文字看起来有点长但是使用起来我很轻松。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>用户打开网站&lt;/li>
&lt;li>用手机扫码二维码在手机上打开&lt;/li>
&lt;li>把手机上的 link/text 复制到文本框，点击生成&lt;/li>
&lt;li>生成之后的页面会生成一个长度为四位的code，用户在电脑上输入对应的四位code之后即可复制。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 119 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/</link><pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-02-11.png" alt="Featured image of post 机器文摘 第 119 期" />&lt;h1 id="机器文摘-第-119-期">机器文摘 第 119 期
&lt;/h1>&lt;h3 id="用纯-jax-实现-llama3-模型">用纯 JAX 实现 LLaMA3 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-01-47.png"
width="690"
height="527"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>
JAX 是一个由 Google 开发的 Python 库，它结合了 NumPy 的易用性 和 自动微分、即时编译 (JIT) 以及 在加速器（GPU/TPU）上运行的能力。&lt;/p>
&lt;p>阅读这篇&lt;a class="link" href="https://saurabhalone.com/blogs/llama3/web" target="_blank" rel="noopener"
>《用纯 JAX 实现 LLaMA3 模型》&lt;/a>，可以深入了解 JAX 在构建高效深度学习模型中的优势，以及如何从零开始实现一个现代语言模型。文章强调了 JAX 的纯函数特性、JIT 编译等优势，并提供了完整的代码实现，适合有一定 Python 和 Transformer 基础的读者学习。&lt;/p>
&lt;h3 id="一个稳定有良好泛化能力的r1风格视觉语言模型">一个稳定有良好泛化能力的R1风格视觉语言模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-02-11.png"
width="2210"
height="1080"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>
&lt;a class="link" href="https://github.com/om-ai-lab/VLM-R1" target="_blank" rel="noopener"
>VLM-R1&lt;/a>，把DeepSeek的R1方法用到了视觉上模型上，增强了模型稳定性和泛化能力。&lt;/p>
&lt;p>基于Qwen2.5-VL 构建，能同时处理图像和文本输入，特别强化了对图像中特定目标的定位能力。&lt;/p>
&lt;p>擅长指代表达类理解，比如&amp;quot;这个红色的杯子在哪里&amp;quot;这样的问题，并在图像中定位目标。&lt;/p>
&lt;h3 id="可以在端侧运行的视觉模型">可以在端侧运行的视觉模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-27-43.png"
width="515"
height="834"
loading="lazy"
class="gallery-image"
data-flex-grow="61"
data-flex-basis="148px"
>
&lt;a class="link" href="https://huggingface.co/blog/smolvlm2" target="_blank" rel="noopener"
>Smolvlm2&lt;/a>，这个视觉模型非常小，提供了 256M, 500M, 2.2B 三个版本。&lt;/p>
&lt;p>500M 版本就能装在 iPhone 上流畅运行。&lt;/p>
&lt;p>模型能识别物体，并且可以给出一定的问题回答（打开冰箱识别牛奶在哪里），还能对视频做总结。&lt;/p>
&lt;h3 id="深入挖掘llama3的从零实现中英文版">深入挖掘llama3的从零实现(中英文版)
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-28-06.png"
width="690"
height="1212"
loading="lazy"
class="gallery-image"
data-flex-grow="56"
data-flex-basis="136px"
>
&lt;a class="link" href="https://github.com/therealoliver/Deepdive-llama3-from-scratch" target="_blank" rel="noopener"
>一篇关于从零实现LLaMA3模型的详细教程&lt;/a>，也是基于 naklecha/llama3-from-scratch 的增强版本。在原项目的基础上进行了全面的改进和优化，旨在帮助大家更轻松地理解和掌握llama3模型的实现原理以及详细的推理流程。&lt;/p>
&lt;p>教程里涉及的代码均有中文注释。&lt;/p>
&lt;h3 id="开源-ai-agent-引擎">开源 AI Agent 引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-28-46.png"
width="825"
height="303"
loading="lazy"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="653px"
>
&lt;a class="link" href="https://github.com/refly-ai/refly" target="_blank" rel="noopener"
>ReflyAI&lt;/a>，可视化构建你自己的 AI 工作流，比 dify 轻量一些。&lt;/p>
&lt;h3 id="电子书计算机视觉算法与应用">电子书《计算机视觉：算法与应用》
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-29-17.png"
width="820"
height="298"
loading="lazy"
class="gallery-image"
data-flex-grow="275"
data-flex-basis="660px"
>
&lt;a class="link" href="https://szeliski.org/Book/" target="_blank" rel="noopener"
>Computer Vision: Algorithms and Applications&lt;/a>，这本书是计算机视觉领域的经典教材，涵盖了从基础到高级的多种算法和技术。全书内容丰富，涉及图像形成、处理、特征检测、模型拟合、深度学习、识别等多个方面。&lt;/p>
&lt;p>除了书籍下载，页面上还提供了一些拿本书当教材的大学课程主页，可以下载课件。&lt;/p>
&lt;h3 id="可本地部署的-pdf-文件处理工具合集">可本地部署的 PDF 文件处理工具合集
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-29-35.png"
width="690"
height="590"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="280px"
>
&lt;a class="link" href="https://github.com/Frooodle/Stirling-PDF" target="_blank" rel="noopener"
>Stirling-PDF&lt;/a>，一款强大的本地网页版 PDF 文件处理工具，可 Docker 部署。&lt;/p>
&lt;p>提供了丰富的 PDF 文件操作功能，包括拆分、合并、格式转换、内容排列、添加图片、旋转、压缩等。&lt;/p>
&lt;p>其安全私密性非常高，所有文件和 PDF 操作都是在客户端进行，或者仅在服务器内存中临时处理，任务完成后即刻删除。&lt;/p>
&lt;p>一旦用户下载了文件，该文件就会从服务器上删除。&lt;/p>
&lt;h3 id="给-ai-agent-用的浏览器自动化工具">给 AI Agent 用的浏览器自动化工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-31-33.png"
width="694"
height="492"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="338px"
>
&lt;a class="link" href="https://github.com/steel-dev/steel-browser" target="_blank" rel="noopener"
>Steel&lt;/a>，这个工具可以让大模型直接操作浏览器，从而实现完全的浏览器AI自动化。&lt;/p>
&lt;h3 id="快速搭建你自己的-ai-集群">快速搭建你自己的 AI 集群
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-32-15.png"
width="819"
height="525"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="374px"
>
&lt;a class="link" href="https://github.com/exo-explore/exo" target="_blank" rel="noopener"
>exo&lt;/a>，一个可帮你在家快速搭建 AI 集群的开源项目，支持将现有设备统一到一个功能强大的GPU中，支持 iPhone，iPad，Android，Mac，Nvidia，树莓派等等几乎所有设备。&lt;/p>
&lt;p>在项目部署成功后，一旦有新设备联网，即可接入使用，充当 AI 算力集群的一部分。&lt;/p>
&lt;h3 id="开源倒计时工具">开源倒计时工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-119-%E6%9C%9F/2025-02-24-14-32-34.png"
width="690"
height="383"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/vladelaina/Catime" target="_blank" rel="noopener"
>Catime&lt;/a>，一款简洁的 Windows 倒计时工具，支持番茄时钟功能，具有透明界面和丰富的自定义选项。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>倒计时、正计时、时钟显示&lt;/li>
&lt;li>超时动作：通知、锁屏、关机等&lt;/li>
&lt;li>界面：透明、点击穿透、自由调整、自定义颜色 ​​​&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 118 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-03-47.png" alt="Featured image of post 机器文摘 第 118 期" />&lt;h1 id="机器文摘-第-118-期">机器文摘 第 118 期
&lt;/h1>&lt;h3 id="从零开始构建一个深度学习库">从零开始构建一个深度学习库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-02-13.png"
width="498"
height="756"
loading="lazy"
class="gallery-image"
data-flex-grow="65"
data-flex-basis="158px"
>&lt;/p>
&lt;p>这篇文章&lt;a class="link" href="https://www.henrypan.com/blog/2025-02-06-ml-by-hand/" target="_blank" rel="noopener"
>《How I Built a Deep Learning Library from Scratch Using Only Python, NumPy &amp;amp; Math》&lt;/a>由 Henry Pan 撰写，详细介绍了他如何仅使用 Python 和 NumPy 从零开始构建一个深度学习库——ML by Hand。&lt;/p>
&lt;p>该库的目的是为了帮助学习者深入理解深度学习模型和库的构建原理，而不是为了替代现有的高效库如 PyTorch 或 TensorFlow。&lt;/p>
&lt;p>Henry Pan 开始这个项目的动机是出于对如何从数学公式出发构建深度学习模型的好奇心。&lt;/p>
&lt;p>他希望通过这个项目，从第一原理（微积分和线性代数）出发，将这些原理以最原始的形式表达在代码中。&lt;/p>
&lt;p>该项目的灵感来源于 Andrej Karpathy 的 Micrograd 项目，最初只是想创建一个自动求导引擎，但最终发展成为一个完整的机器学习库。&lt;/p>
&lt;p>通过这篇文章，读者可以深入了解如何从零开始构建一个深度学习库，以及在构建过程中需要考虑的各种技术和设计问题。&lt;/p>
&lt;h3 id="98-版电视剧水浒传的官方网站">98 版电视剧水浒传的官方网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-02-28.png"
width="478"
height="272"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://1link.fun/i/98-quSrAu73_WS/" target="_blank" rel="noopener"
>水浒传官网长啥样 - 探究央视 98 版水浒传网址&lt;/a>，本文通过一段抖音视频，引出了对央视98版《水浒传》官网的探究。&lt;/p>
&lt;p>视频中提到的网址存在错误，正确的网址应为http://www.chinapages.com/shuihu&lt;/p>
&lt;p>这个网址曾属于中国黄页（China Pages），由马云于1995年创立，旨在将中国企业介绍给全世界。&lt;/p>
&lt;p>通过互联网档案馆（Wayback Machine），作者找到了该网址在1998年5月9日的快照，网页设计具有浓厚的年代感。&lt;/p>
&lt;p>该网站一直存活到2001年6月6日，之后变为404状态。这段历史不仅展示了互联网发展的早期阶段，也反映了中国互联网产业的起步。&lt;/p>
&lt;h3 id="ai-生成-ppt">AI 生成 PPT
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-02-40.png"
width="690"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="355px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://aipptmaker.ai/create" target="_blank" rel="noopener"
>aipptmaker&lt;/a>，一个通过 AI 在线制作 PPT 的工具。&lt;/p>
&lt;ul>
&lt;li>无需安装，登录后即可在线使用；&lt;/li>
&lt;li>无需切换，在一个工具上就可以完成全部任务；&lt;/li>
&lt;/ul>
&lt;h3 id="批量提取网页图片">批量提取网页图片
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-02-49.png"
width="690"
height="394"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chromewebstore.google.com/detail/fetchimage/oecdebfgcmkgdfepfacnfhmkhjgbafde" target="_blank" rel="noopener"
>FetchImage&lt;/a> 是一款让网页图片提取变得极致简单的 Chrome 扩展程序。&lt;/p>
&lt;p>无论是设计灵感收集、内容创作，还是日常图片整理，FetchImage 都能帮助您快速、高效地完成任务。&lt;/p>
&lt;p>主要功能:&lt;/p>
&lt;ul>
&lt;li>✅ 一键提取：从任何网页瞬间提取所有图片。&lt;/li>
&lt;li>✅ 尺寸筛选：轻松筛选符合需求的图片大小。&lt;/li>
&lt;li>✅ 批量下载：支持一键批量保存图片。&lt;/li>
&lt;li>✅ 隐私至上：所有操作均在本地执行，绝不收集任何数据。&lt;/li>
&lt;/ul>
&lt;p>支持网站：Instagram、X（原 Twitter）、Pinterest、Facebook、Google 图片等主流平台。&lt;/p>
&lt;h3 id="deep-research-开源版">Deep Research 开源版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-03-03.png"
width="690"
height="576"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/zilliztech/deep-searcher" target="_blank" rel="noopener"
>DeepSearcher&lt;/a>，结合了大模型和向量数据库，为个人/企业知识管理、智能问答、信息搜索等场景提供高度准确的答案和全面分析。&lt;/p>
&lt;p>支持本地文件导入，以及网络数据爬取等文档加载，支持 DeepSeek、OpenAI 等大模型。&lt;/p>
&lt;h3 id="抱抱脸hugging-face团队推出的智能体agent库">抱抱脸（Hugging Face）团队推出的智能体（agent）库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-03-47.png"
width="813"
height="515"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/huggingface/smolagents" target="_blank" rel="noopener"
>smolagents&lt;/a> 是由 Hugging Face 团队开发的一个轻量级库，旨在帮助开发者快速构建和部署智能代理（agents）。&lt;/p>
&lt;p>该项目的核心目标是通过简洁的设计和强大的功能，使开发者能够轻松创建能够执行复杂任务的代理，这些任务包括调用工具、编写代码以及协调其他代理的工作。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>简洁性：smolagents 的设计非常简洁，核心逻辑集中在 agents.py 文件中，易于上手和定制。&lt;/li>
&lt;li>代码代理：支持 CodeAgent，这是一种能够通过编写 Python 代码来执行操作的代理。与传统的基于文本的代理相比，代码代理在执行复杂任务时更加高效。&lt;/li>
&lt;li>模型无关性：支持多种语言模型（LLM），包括本地的 transformers 模型、OpenAI、Anthropic 等提供的模型，以及通过 LiteLLM 集成的 100 多种模型。&lt;/li>
&lt;li>工具无关性：支持多种工具，包括 LangChain、Anthropic 的 MCP，甚至可以将 Hugging Face 的 Hub Space 作为工具使用。&lt;/li>
&lt;li>模态无关性：支持文本、图像、视频甚至音频输入，适用于多种应用场景。&lt;/li>
&lt;li>安全性：提供沙盒环境（通过 E2B）来安全地执行代码，防止对系统造成潜在风险。&lt;/li>
&lt;/ul>
&lt;h3 id="用自然语言和数据对话">用自然语言和数据对话
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-04-12.png"
width="787"
height="699"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sinaptik-ai/pandas-ai" target="_blank" rel="noopener"
>PandaAI&lt;/a>是一个Python平台，可以轻松以自然语言向您的数据提出问题。&lt;/p>
&lt;p>它可以帮助非技术用户以更自然的方式与数据进行交互，并帮助技术用户在处理数据时节省时间和精力。&lt;/p>
&lt;p>将该库依赖到自己项目中，只需几行代码，轻松实现数据读取，并能通过对话方式向数据进行提问。&lt;/p>
&lt;p>比如查询数据，做数据分析，甚至还可以直接为我们生成趋势图。目前已支持 SQL、CSV、Parquet 等数据存储格式。&lt;/p>
&lt;p>如果开发人员开放一个可视化界面，产品或销售就能直接做数据分析，再也不用导出数据并生成表格。&lt;/p>
&lt;h3 id="连载教程从零开始理解大语言模型">连载教程“从零开始理解大语言模型”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-04-29.png"
width="690"
height="871"
loading="lazy"
class="gallery-image"
data-flex-grow="79"
data-flex-basis="190px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/KaihuaTang/All-you-need-to-know-about-LLM" target="_blank" rel="noopener"
>https://github.com/KaihuaTang/All-you-need-to-know-about-LLM&lt;/a>&lt;/p>
&lt;p>本系列教程的目的是让读者可以在基础的pytorch上，不依赖任何其他现成的外部库，从零开始理解并实现一个大语言模型的所有组成部分，以及训练微调代码，因此读者仅需python，pytorch和最基础深度学习背景知识即可。&lt;/p>
&lt;p>可以先收藏，&lt;del>反正收藏了就等于学会了&lt;/del>。&lt;/p>
&lt;h3 id="一个经典的操作系统开发教程2008-年的">一个经典的操作系统开发教程（2008 年的）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-118-%E6%9C%9F/2025-02-17-15-04-50.png"
width="690"
height="1266"
loading="lazy"
class="gallery-image"
data-flex-grow="54"
data-flex-basis="130px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.brokenthorn.com/Resources/OSDevIndex.html" target="_blank" rel="noopener"
>http://www.brokenthorn.com/Resources/OSDevIndex.html&lt;/a>&lt;/p>
&lt;p>面向初学者，一步步开发一个操作系统。用到的语言是 C 语言和 x86 汇编语言&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 117 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/</link><pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-22-11.png" alt="Featured image of post 机器文摘 第 117 期" />&lt;h1 id="机器文摘-第-117-期">机器文摘 第 117 期
&lt;/h1>&lt;h3 id="使用-esp32-cam-将旧的水电燃气等计量单元连接到数字世界">使用 ESP32-CAM 将旧的水、电、燃气等计量单元连接到数字世界
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-19-48.png"
width="690"
height="555"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/p>
&lt;p>人工智能无处不在，从语音到图像识别。尽管大多数 AI 系统都依靠强大的处理器或云计算，但边缘计算通过利用现代处理器的功能使 AI 更接近最终用户。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jomjol/AI-on-the-edge-device" target="_blank" rel="noopener"
>ESP32-CAM&lt;/a>，项目展示了使用 ESP32 （一种低成本，具有AI功能的设备）来数字化模拟仪表（无论是水，气或电力）数字化的边缘计算。&lt;/p>
&lt;p>通过负担得起的硬件和简单的说明，您可以将任何标准仪表变成智能设备。&lt;/p>
&lt;p>关键特性：&lt;/p>
&lt;ul>
&lt;li>🔗Tensorflow Lite（Tflite）集成- 包括易于使用的包装器。&lt;/li>
&lt;li>📸内联图像处理（特征检测，对齐，ROI提取）。&lt;/li>
&lt;li>💡小型且负担得起的设备（3 x 4.5 x 2cm³，小于10欧元）。&lt;/li>
&lt;li>📷集成相机和照明。&lt;/li>
&lt;li>🌐用于管理和控制的Web界面。&lt;/li>
&lt;li>🔄用于直接通过Web接口更新的OTA接口。&lt;/li>
&lt;li>🏠与 Home Assistant 的完全集成。&lt;/li>
&lt;li>📡 MQTT协议支持。&lt;/li>
&lt;li>📥可用于数据访问的REST API 。&lt;/li>
&lt;/ul>
&lt;h3 id="专业逆向工程大模型">专业逆向工程大模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-20-03.png"
width="394"
height="680"
loading="lazy"
class="gallery-image"
data-flex-grow="57"
data-flex-basis="139px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/albertan017/LLM4Decompile" target="_blank" rel="noopener"
>LLM4Decompile&lt;/a>，这个模型可以将 x86_64二进制程序反编译为 C 代码，模型大小从 1.3B 到 22B 都有，22B 如果 Q4 量化的话只有 10G左右，Q8 大概 22G。好一点的显卡就能本地用了 ​​​。&lt;/p>
&lt;h3 id="awesome-deepseek-integration">Awesome DeepSeek Integration
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-20-18.png"
width="690"
height="1418"
loading="lazy"
class="gallery-image"
data-flex-grow="48"
data-flex-basis="116px"
>&lt;/p>
&lt;p>DeepSeek 最近很火，这个仓库收集了&lt;a class="link" href="https://github.com/deepseek-ai/awesome-deepseek-integration" target="_blank" rel="noopener"
>一份支持 DeepSeek 大模型的各类软件列表&lt;/a>，来自 DeepSeek 官方团队收集整理，涵盖了应用程序、AI Agent 框架、RAG 框架、即时通讯插件、浏览器插件、VS Code 插件等等。在这份列表上面，我们能快速找到那些已支持 DeepSeek 的应用、框架、插件，并按需选择使用。&lt;/p>
&lt;h3 id="方便微调视觉语言模型的工具">方便微调视觉语言模型的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-20-33.png"
width="690"
height="418"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/roboflow/maestro" target="_blank" rel="noopener"
>Maestro&lt;/a>，这个工具把PaliGemma 2、Florence-2、Qwen2.5-VL的微调流程，打包成“开箱即用”的方案，而且还支持CLI和Python API，甚至在Colab上也能跑。不用考虑各种繁琐的配置、数据加载、训练循环和复现问题，用户只需专注于模型调优的核心部分。&lt;/p>
&lt;h3 id="如何用-deepseek-r1-蒸馏出属于你自己的大模型">如何用 DeepSeek-R1 蒸馏出属于你自己的大模型？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-21-16.png"
width="869"
height="817"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Kiln-AI/Kiln" target="_blank" rel="noopener"
>Kiln&lt;/a>，一个新的 fune-tune 框架，可以在 1 小时内让DeepSeek-R1蒸馏出属于你自己的小模型，整个过程是全自动的，不需要编写代码或者手动调节，仅需定义你的数据集即可。&lt;/p>
&lt;p>项目支持跨平台桌面应用，无论是 Windows、Mac、Linux，均可下载安装包即开即用。&lt;/p>
&lt;h3 id="大规模预训练语言模型的教程">大规模预训练语言模型的教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-21-36.png"
width="690"
height="979"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/datawhalechina/so-large-lm" target="_blank" rel="noopener"
>《大模型基础》&lt;/a>，一文了解大模型基础知识。&lt;/p>
&lt;p>基于斯坦福大学和李宏毅的课程，并结合开源贡献者的补充和最新研究进展，旨在为读者提供深入的理论知识和实践方法。&lt;/p>
&lt;p>内容涵盖了模型架构、数据收集、模型训练、智能体，以及模型在安全、环境和法律方面的应用等。&lt;/p>
&lt;h3 id="在手机端离线运行-llm-大模型">在手机端离线运行 LLM 大模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-22-11.png"
width="793"
height="452"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/alibaba/MNN" target="_blank" rel="noopener"
>MnnLlmApp&lt;/a>，基于 MNN-LLM 框架的 Android 手机应用，阿里开源项目，支持各类 LLM 在手机上离线运行，支持多种多模态任务，文本生成文本、图像生成文本、音频转文本以及文本生成图像。&lt;/p>
&lt;p>在安卓平台上，MNN-LLM的CPU性能优秀，预填充速度较 llama.cpp 提高了 8.6 倍，较 fastllm 提升了 20.5倍，解码速度分别快了2.3倍、8.9倍&lt;/p>
&lt;p>支持多种模型，Qwen、Gemma、Llama（涵盖TinyLlama与MobileLLM）、Baichuan、Yi、DeepSeek、InternLM、Phi、ReaderLM、Smolm等&lt;/p>
&lt;p>完全在设备本地运行。&lt;/p>
&lt;h3 id="非结构化数据转换工具">非结构化数据转换工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-117-%E6%9C%9F/2025-02-10-10-22-35.png"
width="836"
height="485"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/adithya-s-k/omniparse" target="_blank" rel="noopener"
>omniparse&lt;/a>，一个可以把各种非结构化数据转为结构化数据的工具：OmniParse，本地运行，支持约20种文件格式。&lt;/p>
&lt;p>支持文档、表格、图像、视频、音频、网页等，能提取表格、识别图片内容、转录音视频、爬取网页，把数据转成高结构化Markdown 格式。&lt;/p>
&lt;p>适合需要批量处理各种数据并用于AI应用的场景，目前支持Linux系统。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 116 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/</link><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-46-34.png" alt="Featured image of post 机器文摘 第 116 期" />&lt;h1 id="机器文摘-第-116-期">机器文摘 第 116 期
&lt;/h1>&lt;h3 id="展开说说关于编程的未来">展开说说关于编程的未来
&lt;/h3>&lt;p>这几天思考了关于未来编程方式变革。&lt;/p>
&lt;p>当前这种使用“专属高级程序语言”编程的方式将像之前“纸带打孔编程”那样逐渐消失，取而代之的是使用自然语言进行“编程”。&lt;/p>
&lt;p>码农这个职业可能不复存在，但是编程的工作仍然需求旺盛，只是形式变了、工具变了、工作场景也变了，对“程序员”的要求也变了。&lt;/p>
&lt;p>技术的核心目标无非是提升生产力和生产效率，改善人类的生活水平，信息科技也无非是通过数字化、信息化手段来实现这个目标。&lt;/p>
&lt;p>之前是那种高级语言编程实现，现在跳过了“编码”过程，直接以一种前所未有的交互方式来创造“软件”。&lt;/p>
&lt;p>既然创造方式改变了，那么必定会带来其他的改变，我能想到以下几点：&lt;/p>
&lt;ol>
&lt;li>软件的量必然膨胀，构建软件的成本变得十分低廉，生产软件的速度也呈指数级增长，一切能用软件的地方都得用上软件。&lt;/li>
&lt;li>软件的架构可能改变，之前编程还需要照顾人类的阅读，现在无所谓了，变量命名、代码复用、模块化、扩展性，实现方式变了，比起精心设计的可复用模块，可能每次都实时生成代码更经济。&lt;/li>
&lt;li>编程的职业可能泛化，软件创造被拉下高科技的神坛，人人都能编程，人人都能创造软件。&lt;/li>
&lt;/ol>
&lt;p>那会诞生哪些公司机会呢？&lt;/p>
&lt;ol>
&lt;li>提供新型的工具，帮助人人创造软件（各种 ai 创业公司都在做，以提供新型编程工具、环境为主要产品）。&lt;/li>
&lt;li>利用新型的工具，满足之前没有被服务到位的需求（之前可能因为软件建设太昂贵），就像拼多多那样（目前字节的扣子平台有点儿这个意思）。&lt;/li>
&lt;li>培训，教人学习和使用这些工具，当然了，是面向未来的“新型程序员”。&lt;/li>
&lt;/ol>
&lt;h3 id="20251版ai-agent工具全景图-从入门到进阶的12个关键工具">2025.1版AI Agent工具全景图： 从入门到进阶的12个关键工具
&lt;/h3>&lt;p>&lt;em>来自微博&lt;a class="link" href="https://weibo.com/u/1402400261" target="_blank" rel="noopener"
>@爱可可-爱生活&lt;/a>&lt;/em>&lt;/p>
&lt;ol>
&lt;li>入门首选： PydanticAI&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>特点：类型安全 + FastAPI风格&lt;/li>
&lt;li>优势：模型通用性强，上手门槛低&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>团队协作利器： CrewAI&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>主打多智能体协同&lt;/li>
&lt;li>适合复杂项目开发&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>可视化开发神器： n8n&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>提供数百种集成选项&lt;/li>
&lt;li>所见即所得的工作流构建&lt;/li>
&lt;/ul>
&lt;p>4-6. 企业级开发三剑客：&lt;/p>
&lt;ul>
&lt;li>AutoGen(微软)： 开源框架，专注多智能体&lt;/li>
&lt;li>Smolagents(HF)： 简码开发，环境兼容性强&lt;/li>
&lt;li>Phidata： 智能体记忆管理，文档完善&lt;/li>
&lt;/ul>
&lt;p>7-9. 进阶开发工具链：&lt;/p>
&lt;ul>
&lt;li>AgentOps： DevOps全流程支持&lt;/li>
&lt;li>Vercel AI SDK： 与AI-SDK完美集成&lt;/li>
&lt;li>Rig(Rust)： 新手友好的智能体开发工具&lt;/li>
&lt;/ul>
&lt;p>10-12. 特色应用工具：&lt;/p>
&lt;ul>
&lt;li>Eliza： 跨渠道智能交互&lt;/li>
&lt;li>LangGraph： 基于LangChain的高级应用&lt;/li>
&lt;li>Memó： 个性化交互增强工具&lt;/li>
&lt;/ul>
&lt;p>核心价值：这套工具链涵盖了从入门到专业的全周期开发需求，既有低代码平台助力快速起步，也有专业框架支撑进阶开发。新手可以逐步尝试，专业开发者也能找到趁手工具。&lt;/p>
&lt;p>建议：&lt;/p>
&lt;ol>
&lt;li>建议先从可视化工具入手&lt;/li>
&lt;li>逐步过渡到代码开发&lt;/li>
&lt;li>根据项目需求选择合适工具&lt;/li>
&lt;li>关注工具间的协同效应&lt;/li>
&lt;/ol>
&lt;p>无论你是初学者还是专家，这12个工具都值得收藏。&lt;/p>
&lt;h3 id="流体模拟吊坠">流体模拟吊坠
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-40-29.png"
width="690"
height="571"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="290px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mitxela.com/projects/fluid-pendant" target="_blank" rel="noopener"
>流体模拟吊坠&lt;/a>，这篇文章详细介绍了作者制作的一款流体模拟吊坠（Fluid Simulation Pendant）的全过程。&lt;/p>
&lt;p>吊坠是一件手工制作的珠宝，运行实时的FLIP流体模拟。外壳镀金，显示屏由手表玻璃保护。&lt;/p>
&lt;p>流体模拟基于Matthias Müller的工作，特别是他的&lt;a class="link" href="https://matthias-research.github.io/pages/tenMinutePhysics/index.html" target="_blank" rel="noopener"
>“Ten Minute Physics”&lt;/a>网站上的“&lt;a class="link" href="https://matthias-research.github.io/pages/tenMinutePhysics/18-flip.html" target="_blank" rel="noopener"
>如何编写FLIP水模拟器&lt;/a>”教程。&lt;/p>
&lt;p>作者在项目中并没有直接移植，而是根据教程重新实现的。&lt;/p>
&lt;p>组成吊坠的硬件包括STM32L432KC（ARM Cortex-M4带FPU，超频至100MHz）、ADXL362超低功耗加速度计、MCP73832锂电充电控制器、TPS7A02稳压器（极低功耗）和TPS3839监控器。所有这些组件都集成在一个四层0.8mm的PCB上。&lt;/p>
&lt;h3 id="只有56个字节的贪吃蛇游戏">只有56个字节的贪吃蛇游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-40-44.png"
width="690"
height="726"
loading="lazy"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="228px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/donno2048/snake" target="_blank" rel="noopener"
>snake&lt;/a>，不是 56Kb，而是只有 56 字节。 ​​​&lt;/p>
&lt;h3 id="高性能语音转文本工具">高性能语音转文本工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-41-31.png"
width="821"
height="460"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/KoljaB/RealtimeSTT" target="_blank" rel="noopener"
>RealtimeSTT&lt;/a>，一个强大高效、低延迟的语音转文本工具。&lt;/p>
&lt;p>简单易用，支持开始和停止说话的状态监测，支持指定唤醒词触发工作，实时进行将语音转换为文本。&lt;/p>
&lt;p>可以在 Windows、macOS 以及 Linux 系统上安装使用，同时支持 CUDA 进行 GPU 加速。&lt;/p>
&lt;h3 id="白嫖微软-edge-在线文本转语音服务">白嫖微软 Edge 在线文本转语音服务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-42-05.png"
width="690"
height="652"
loading="lazy"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="253px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/travisvn/openai-edge-tts" target="_blank" rel="noopener"
>openai-edge-tts&lt;/a>，利用微软 Edge 的在线语音服务，提供免费的文本转语音功能，且可以像使用 OpenAI 的语音一样使用该 API。&lt;/p>
&lt;p>同时，支持多种音频格式，如 mp3、aac、flac、wav 等，可自由调节播放速度，以及有多种语音和语言选择。&lt;/p>
&lt;p>可通过 Docker 一键部署方式，快速体验。&lt;/p>
&lt;h3 id="轻量级文本转语音模型">轻量级文本转语音模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-42-28.png"
width="690"
height="556"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="297px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://kokorotts.online" target="_blank" rel="noopener"
>Kokoro TTS&lt;/a>，一个只有 82M 参数的文本合成语音模型。&lt;/p>
&lt;p>有着极高的生成速度和非常自然的发音效果。&lt;/p>
&lt;p>支持中文，但特长是美式发音和英式发音的英语，适合生成英文配音。&lt;/p>
&lt;p>Kokoro TTS 基于 Apache 2.0 许可开源。&lt;/p>
&lt;h3 id="轻量级大模型">轻量级大模型
&lt;/h3>&lt;p>&lt;em>来自微博&lt;a class="link" href="https://weibo.com/u/2169039837" target="_blank" rel="noopener"
>@karminski-牙医&lt;/a>&lt;/em>
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-45-19.png"
width="690"
height="843"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;blockquote>
&lt;p>搜索引擎&amp;amp;爬虫工程师的工具链感觉现在全面面临洗牌了。以前靠SVM来分类，靠 TF-IDF 来抽关键词，trie-tree 来过滤敏感词，基于文本密度算法来抽正文，靠余弦相似度等相似度算法来消重。
现在，大模型能全面取代这些传统NLP做法了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我现在抽正文就在用 reader-lm-1.5b，这个模型能把 html 转 markdown，然后再消息队列塞给下游模型用定义好的Agent来分类，提取关键词和摘要。最后入库之前RAG检索做消重。尤其是文本内容的对抗进化没那么快，现在打不过LLM（比如写点抽象的东西来规避过滤，LLM能轻松认出来，但是基于敏感词的 trie-tree 效果就很差）。所以LLM除了耗资源几乎无缺点了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>reader-lm-1.5b 地址：huggingface.co/jinaai/reader-lm-1.5b
这个模型小到不用量化，纯CPU都能跑得飞起。&lt;/p>
&lt;/blockquote>
&lt;h3 id="一个在纯pdf文件里运行的俄罗斯方块">一个在纯pdf文件里运行的俄罗斯方块
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-45-31.png"
width="690"
height="1106"
loading="lazy"
class="gallery-image"
data-flex-grow="62"
data-flex-basis="149px"
>&lt;/p>
&lt;p>生成pdf的代码： github.com/ThomasRinsma/pdftris&lt;/p>
&lt;p>演示地址：th0mas.nl/downloads/pdftris.pdf&lt;/p>
&lt;p>实际上运行需要依赖现代桌面浏览器中的 PDF 引擎（PDFium 和 PDF.js）,也就是在浏览器中打开这个pdf文件，如果用普通的pdf程序如sumatrapdf打开这个pdf文件是没法运行的。&lt;/p>
&lt;p>当然这也意味着pdf的安全风险。&lt;/p>
&lt;h3 id="屏蔽搜索结果的垃圾内容">屏蔽搜索结果的垃圾内容
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-45-44.png"
width="585"
height="433"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>现在互联网搜索引擎搜索出的内容，由 AI 制造的垃圾内容越来越多，&lt;a class="link" href="https://github.com/popcar2/BadWebsiteBlocklist" target="_blank" rel="noopener"
>BadWebsiteBlocklist&lt;/a>，这里提供了一份黑名单，借助 &lt;a class="link" href="https://iorate.github.io/ublacklist/docs" target="_blank" rel="noopener"
>uBlackList&lt;/a>浏览器插件，可以有效屏蔽搜索结果中这些垃圾内容。 ​​​&lt;/p>
&lt;h3 id="ffmpeg-命令在线参考">ffmpeg 命令在线参考
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-45-53.png"
width="690"
height="318"
loading="lazy"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="520px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://ffmpegbyexample.com/" target="_blank" rel="noopener"
>https://ffmpegbyexample.com/&lt;/a> 这个网站可以查看 ffmpeg 的全部命令参数以及使用方式，网站列举了几十种常见转换任务的命令行示例。&lt;/p>
&lt;h3 id="检测视频中人眼视线的模型">检测视频中人眼视线的模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-46-34.png"
width="536"
height="295"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/vikhyatk/moondream2/tree/main" target="_blank" rel="noopener"
>Moondream&lt;/a> 是一个 非常强大而且小巧的视觉模型。&lt;/p>
&lt;p>0.5B INT4 版本甚至只有 400M&lt;/p>
&lt;p>支持结构化 OCR 输出、图片描述、物体检测和位置标注&lt;/p>
&lt;p>最近更是更新了 视线检测，给一段视频就可以看到视频中每个人的视线&lt;/p>
&lt;p>这个很适合用来恶搞和意图检测&lt;/p>
&lt;p>Comfyui 插件也已经上线，显存占用为 6G&lt;/p>
&lt;h3 id="stttts框架">STT/TTS框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-116-%E6%9C%9F/2025-01-20-09-47-02.png"
width="690"
height="1323"
loading="lazy"
class="gallery-image"
data-flex-grow="52"
data-flex-basis="125px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/k2-fsa/sherpa-onnx" target="_blank" rel="noopener"
>sherpa-onnx&lt;/a>，这个框架可以语音转文字，文字转语音，说话人识别，说话人验证，语言识别，音频标签，关键词检测，添加标点符号等等功能。
支持架构也非常广泛，从 x86 到 arm 到 risc-v。主流编程语言也全部支持。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 115 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/</link><pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-57-33.png" alt="Featured image of post 机器文摘 第 115 期" />&lt;h1 id="机器文摘-第-115-期">机器文摘 第 115 期
&lt;/h1>&lt;h3 id="图灵机原理介绍">图灵机原理介绍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-53-53.png"
width="690"
height="497"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="333px"
>&lt;/p>
&lt;p>这是一篇交互型文章：https://samwho.dev/turing-machines/&lt;/p>
&lt;p>文章内容是对图灵机(现代计算机的理论原型)的介绍。&lt;/p>
&lt;p>图灵机尽管设计简单，只有四个部件和五条指令，但事实证明它能够执行任何可能的计算，为现代计算机奠定了理论基础。&lt;/p>
&lt;p>文章内嵌入了很有趣的图灵机交互控件，可以跟随作者一边学习知识概念，一边体验计算的魅力。&lt;/p>
&lt;h3 id="做一个能听懂键盘敲击键位的玩具">做一个能听懂键盘敲击键位的「玩具」
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-56-36.png"
width="246"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="48"
data-flex-basis="117px"
>&lt;/p>
&lt;p>基于声学信号处理及深度学习的键盘敲击识别系统。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ZhuoZhuoCrayon/AcousticKeyBoard-Web" target="_blank" rel="noopener"
>AcousticKeyBoard&lt;/a> 源自一个想法「做一个听懂键盘敲击键位的玩具？」，用于学习信号处理 / 深度学习 / 安卓 / Django。 ​​​&lt;/p>
&lt;p>基本原理：&lt;/p>
&lt;ul>
&lt;li>按键敲击最高世界记录约为 800 / min，平均每 75 ms 敲击一次键盘，即按键重叠发生在 3,600 的 silence 片段。&lt;/li>
&lt;li>单人敲击键盘场景下，Hit 片段不会重合，并且不同按键所处位置、形状有所区别，Hit 具有可识别特征。&lt;/li>
&lt;li>空格与其他按键形状不同，敲击声已明显不同。&lt;/li>
&lt;li>不同按键周围的固体环境有差异，声音信号基于固体传导，在峰段存在差异。&lt;/li>
&lt;/ul>
&lt;h3 id="关于-ai-智能体agents的详细介绍">关于 AI 智能体（Agents）的详细介绍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-57-14.png"
width="796"
height="642"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="297px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://huyenchip.com//2025/01/07/agents.html" target="_blank" rel="noopener"
>&lt;/a> ，文章深入介绍了 AI Agents 的核心概念、关键组成部分以及实践经验，包括如下内容：&lt;/p>
&lt;ul>
&lt;li>AI Agents 的详细介绍：一个能感知环境并采取行动的智能系统；&lt;/li>
&lt;li>Agents 两大核心能力支柱：工具集（知识增强、能力扩展、操作能力）和规划能力（执行、反思、纠错）；&lt;/li>
&lt;li>Agents 三大失败模式：规划失败、工具失败和效率问题。&lt;/li>
&lt;/ul>
&lt;h3 id="一个免费白噪音网站">一个免费白噪音网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-57-33.png"
width="690"
height="401"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="412px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.ppbzy.com/" target="_blank" rel="noopener"
>泡泡白噪音&lt;/a>：提升专注与放松的一站式白噪音平台&lt;/p>
&lt;p>🌟 产品亮点
1️⃣ 丰富的白噪音选择
提供上百种高质量的白噪音场景，包括自然环境、城市氛围和独特的声音素材：
☕ 咖啡厅背景声、火车行驶声、飞机白噪音
🌊 雨声、海浪声、森林风声等自然白噪音
🎵 Lofi 音乐与轻柔旋律，适合舒缓放松
2️⃣ 白噪音组合与收藏功能
支持多个白噪音的自由组合，每个音源都可以单独调整音量，随心定制属于你的专属音效！
比如同时播放「咖啡厅」+「下雨声」+「键盘敲击声」，打造最适合你的工作氛围。
收藏功能：将喜欢的白噪音组合一键保存，随时快速切换。
3️⃣ 场景模式，一键开启 + 放松视频
根据不同需求设计了 3 大场景模式：
工作模式：提升注意力，适合学习、写作和编码。
助眠模式：舒缓身心，帮助快速入睡。
冥想模式：沉浸在自然的声音中，平静你的心灵。
放松场景视频：提供沉浸式动画场景切换（如雨夜中的温馨小屋），增强沉浸感。
4️⃣ 定时功能
设置播放时长，白噪音将在指定时间后自动关闭，让你放心工作、学习或入睡，无需手动操作。
5️⃣ 音质选择功能
支持多种音质选择，从高音质到低音质，满足不同设备和网络环境需求。
6️⃣ 内置番茄钟功能
集成了 番茄计时器，帮助你专注工作或学习，同时享受喜欢的白噪音。
7️⃣ 背景主题切换
可根据个人喜好选择背景主题（白天、夜晚等），增加沉浸感，贴合当下的情绪与状态。
8️⃣ 无干扰体验
简洁的设计，无广告，无注册，无干扰，让你专注于自己想做的事。&lt;/p>
&lt;h3 id="音乐合成器知识学习">音乐合成器知识学习
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-57-48.png"
width="690"
height="382"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://learningsynths.ableton.com/zh-Hans" target="_blank" rel="noopener"
>音乐合成器入门&lt;/a>，这是一个在线交互站点，可以一边学习合成器的基础知识一边上手体验。&lt;/p>
&lt;p>网站也支持 MIDI 键盘输入，跟着教程捏出自己独有的音色之后还可以来一段现场演奏。 ​​​&lt;/p>
&lt;p>之前还出过一个姊妹篇：&lt;a class="link" href="https://learningmusic.ableton.com/zh-Hans/" target="_blank" rel="noopener"
>在线学习编曲&lt;/a>。&lt;/p>
&lt;h3 id="透明背景视频生成">透明背景视频生成
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-58-12.png"
width="506"
height="304"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/wileewang/TransPixar" target="_blank" rel="noopener"
>TransPixar&lt;/a>, 是由 Adobe 和香港科大开源的一款可以生成透明视频的项目，它可以生成包含烟雾、反射、水滴等透明元素的视频，看起来非常真实、更自然。&lt;/p>
&lt;p>这给比如电影特效制作、游戏画面渲染、虚拟现实创作提供了更多的便利性。&lt;/p>
&lt;h3 id="操作系统教程">操作系统教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-58-26.png"
width="690"
height="648"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://operating-system-in-1000-lines.vercel.app/en" target="_blank" rel="noopener"
>用大概1000行代码，从零开始构建一个小型的操作系统&lt;/a>。&lt;/p>
&lt;p>这个教程详细介绍了构建一个小型操作系统的过程，包括实现基本的上下文切换、分页、用户模式、命令行Shell、磁盘设备驱动程序以及文件的读写操作。尽管这些听起来很复杂，但整个操作系统的代码量仅为 1000 行。&lt;/p>
&lt;h3 id="用视觉模型将-pdf-转换为-markdown-格式">用视觉模型将 PDF 转换为 Markdown 格式
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-58-38.png"
width="690"
height="259"
loading="lazy"
class="gallery-image"
data-flex-grow="266"
data-flex-basis="639px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/getomni-ai/zerox" target="_blank" rel="noopener"
>zerox&lt;/a>，一个基于视觉模型的 OCR 工具，因为其在识别过程中调用了大模型的能力，所以对于带有特殊布局、表格、图表的文档转换效果要高于普通 OCR 文字识别程序。 ​​​&lt;/p>
&lt;h3 id="绘画点子生成器">绘画点子生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-58-48.png"
width="690"
height="531"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://whattodraw.art/" target="_blank" rel="noopener"
>画点儿啥&lt;/a>，解决想画画但是又不知道画点儿啥的问题。&lt;/p>
&lt;p>这个网站可以随机生成一些绘画主意，可以在线作画，然后将你的结果提交与全网进行比对得分。 ​​​&lt;/p>
&lt;h3 id="安卓设备调试界面工具">安卓设备调试界面工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-58-57.png"
width="690"
height="458"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/liriliri/aya" target="_blank" rel="noopener"
>aya&lt;/a>，是一个用于简化对安卓设备操作控制的桌面应用程序，可以看作是 ADB 的图形用户界面。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>内置 ADB，安装即用，无需任何额外的复杂操作。&lt;/li>
&lt;li>按类别分为多个面板，包括应用程序管理、性能监控、流程管理等。&lt;/li>
&lt;li>图形用户界面，一键操作，无需输入任何命令。&lt;/li>
&lt;/ul>
&lt;h3 id="免费ai歌曲生成器-free-ai-song-generator">免费AI歌曲生成器 Free AI Song Generator
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-115-%E6%9C%9F/2025-01-13-10-59-10.png"
width="690"
height="425"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>网址：https://ai-song.ai/&lt;/p>
&lt;p>输入歌词，AI 会根据歌词生成一首歌曲，自动完成谱曲、编曲、演唱全部内容，可以选择不同的风格和情感。&lt;/p>
&lt;h3 id="关于-ai-对编程行业影响的不负责任推测">关于 AI 对编程行业影响的不负责任推测
&lt;/h3>&lt;p>经过几天的 AI 大模型 Agent 发展现状的研究，我感觉未来属于有想象力的、能吹牛逼讲故事的人（可能过去也是一直属于这种人）。&lt;/p>
&lt;p>要说之前吹牛逼的人还需要忽悠真人帮他实现梦想，实现起来有点儿难度之外，现在直接有无限个 AI 机器人任劳任怨地帮你实现梦想。&lt;/p>
&lt;p>对着 AI 讲故事，然后它们把故事实现，这是未来的主要商业模式（看看抖音的扣子平台，已经涌现出大量的这样的产品了）。&lt;/p>
&lt;p>未来的编程方式也会完全改变，当今的高级语言不会再有人使用，或者就像汇编语言那样只在特殊场景才被特殊群体使用。&lt;/p>
&lt;p>取而代之的编程语言就是自然语言，由 AI 模型将自然语言解析成为计算机语言。&lt;/p>
&lt;p>软件架构将产生巨大颠覆，现在所谓的代码复用、可扩展性、可伸缩性在新的 AI 架构下将不再作为重点目标，AI 编程的时候可以完全无视这些，需要代码就随时生成，统统写死，一次性地运行也将成为一种经济型策略。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 114 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/</link><pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-21-20.png" alt="Featured image of post 机器文摘 第 114 期" />&lt;h1 id="机器文摘-第-114-期">机器文摘 第 114 期
&lt;/h1>&lt;h3 id="跟孩子一起制作一个-8bit-个人电脑吧">跟孩子一起制作一个 8bit 个人电脑吧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-19-49.png"
width="640"
height="430"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="357px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.codycomputer.org/" target="_blank" rel="noopener"
>Cody Computer&lt;/a>，是一个 DIY 项目，灵感来自于20世纪80年代康懋达（Commodore）家用电脑（但并不兼容它）。&lt;/p>
&lt;p>Cody Computer 围绕 Western Design Center 的 65C02 和 65C22 微处理器以及 Parallax Propeller 微控制器构建。&lt;/p>
&lt;p>它并不是要与现代电脑或旧电脑的新版本竞争，而是作为一个简单、有趣、可能还有点教育意义的项目。&lt;/p>
&lt;p>项目使用 KiCad 设计电子部分，使用 OpenSCAD 和 Inkscape 开发机械部件，所有设计文件和软件均在 GPLv3 许可证下发布。&lt;/p>
&lt;p>功能特性&lt;/p>
&lt;ul>
&lt;li>易于组装：基于现代65C02、65C22 和 P8X32A 构建。&lt;/li>
&lt;li>3D打印部件：包括机械部件和键盘，以及定制的3D打印键帽套装。&lt;/li>
&lt;li>Cody BASIC：启动时进入 &amp;ldquo;Cody BASIC&amp;rdquo; 环境，支持使用 64tass 进行汇编语言交叉开发。&lt;/li>
&lt;li>视频：160x200 NTSC 视频图形，灵感来自 VIC-II 的多色模式。&lt;/li>
&lt;li>音频：实现 Commodore SID 功能的有限子集。&lt;/li>
&lt;li>端口：包括扩展/卡带端口、两个缓冲UART和Atari风格的操纵杆连接器。&lt;/li>
&lt;/ul>
&lt;h3 id="绕过-windows-11版本-24h2上的-bitlocker-加密">绕过 Windows 11（版本 24H2）上的 BitLocker 加密
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-20-49.png"
width="525"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="333px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://noinitrd.github.io/Memory-Dump-UEFI/" target="_blank" rel="noopener"
>这篇文章&lt;/a>是关于如何绕过 Windows 11（版本 24H2）上的 BitLocker 加密。&lt;/p>
&lt;p>作者通过使用自己开发的工具 Memory-Dump-UEFI 从内存中提取完整的卷加密密钥（FVEK）来实现这一目标。&lt;/p>
&lt;p>如果攻击者能够物理接触设备，他们可能会通过突然重启计算机并转储最近运行的 Windows 实例的 RAM 来获取访问权限。捕获的内存可以被分析以定位敏感信息，如 FVEK 密钥。这种技术并非万无一失，因为一旦断电，RAM 中的内容会迅速退化。&lt;/p>
&lt;p>步骤 1：创建可启动的 USB 设备&lt;/p>
&lt;p>为了完成这一步，你需要一个大于目标系统 RAM 容量的 USB 存储设备。作者提供了一个名为 flashimage.sh 的脚本来简化这个过程。&lt;/p>
&lt;p>步骤 2：突然重启目标系统&lt;/p>
&lt;p>这可以通过多种方式完成，但目标是最小化计算机完全断电的时间。作者在 Windows 加载但登录屏幕尚未出现之前重启系统时，找到了 FVEK 密钥。&lt;/p>
&lt;p>步骤 3：从 USB 设备启动&lt;/p>
&lt;p>立即从 USB 设备启动 Memory-Dump-UEFI。你将到达 UEFI shell，在那里你可以找到并执行 app.efi。这个过程的时间取决于正在转储的 RAM 量和 USB 设备的速度。&lt;/p>
&lt;p>步骤 4：分析转储&lt;/p>
&lt;ul>
&lt;li>设置：应用程序可能会产生几个转储文件，这是由于 FAT32 文件系统对文件大小有 4GB 的限制。作者提供了一个名为 concatDumps.py 的脚本，可以将几个转储文件按时间顺序合并为一个。&lt;/li>
&lt;li>池标签：池标签是 4 个字符长的标识符，指示 Windows 内核内存池的位置。这些池由 Windows 内核分配，是寻找敏感信息的好地方。&lt;/li>
&lt;li>FVEK 密钥恢复：作者在 dFVE 池标签下找到了 FVEK 密钥，这表明是由 dumpfve.sys 分配的内存，与 BitLocker 驱动器加密的完整卷加密崩溃转储过滤器有关。&lt;/li>
&lt;/ul>
&lt;p>在获得密钥后，需要在密钥前加上使用的算法。然后，将密钥转储到文件中，并使用 dislocker 工具套件来解锁 BitLocker 保护的分区。&lt;/p>
&lt;h3 id="1-秒为什么是-1-秒">1 秒为什么是 1 秒？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-21-09.png"
width="481"
height="354"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="326px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.johndcook.com/blog/2024/12/29/what-exactly-is-a-second/" target="_blank" rel="noopener"
>到底什么是 1 秒？&lt;/a>，一篇关于 1 秒为什么是 1 秒，以及现代人是如何对其进行精确定义的科普文。&lt;/p>
&lt;p>文章从Unix时间的微妙不准确性聊起，引出了对秒定义的深入讨论。他解释了为何地球自转的逐渐减慢促使科学家们在1967年重新定义秒，将其与铯原子的辐射周期挂钩，而非依赖于地球的自转。&lt;/p>
&lt;p>这种定义的转变，不仅保证了时间测量的精确性，也体现了科学对恒定标准的不懈追求。&lt;/p>
&lt;p>通过这篇文章，我们得以一窥秒背后的科学奥秘，以及它如何与我们的日常生活和科技进步紧密相连。&lt;/p>
&lt;h3 id="做一个蜂鸣器提醒自己不要久坐">做一个蜂鸣器，提醒自己不要久坐
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-21-20.png"
width="690"
height="660"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.jacobvosmaer.nl/0036-beeper/" target="_blank" rel="noopener"
>我最喜欢的人体工学&lt;/a>，作者介绍了他自创的一个名为 &amp;ldquo;The Beeper&amp;rdquo;（蜂鸣器）的 DIY 设备，这个设备帮助他解决了长时间坐在电脑前工作导致的身体疼痛问题。&lt;/p>
&lt;p>&amp;ldquo;The Beeper&amp;rdquo; 由三个部分组成：硬件、运行在硬件上的固件，以及在工作电脑上运行的软件。如果作者的电脑屏幕解锁时间过长，&amp;ldquo;The Beeper&amp;rdquo; 会开始发出蜂鸣声，因为设备放置在远离书桌的地方，所以他必须起身去关闭它，从而解决了长时间静坐的问题。&lt;/p>
&lt;p>硬件方面，&amp;ldquo;The Beeper&amp;rdquo; 被安装在一个小型的 ABS 塑料外壳中，内部包括一个 ESP8266 开发板、一个瞬时开关和一个压电蜂鸣器。蜂鸣器被粘在外壳上。&lt;/p>
&lt;p>在作者的笔记本电脑上运行的软件是经过多年调整，已经符合了作者的工作习惯。软件通过 macOS LaunchAgent 自动启动，每 20 分钟检查一次是否应该发出蜂鸣声，如果是，则激活 &amp;ldquo;The Beeper&amp;rdquo;。但如果作者的屏幕被锁定，或者他正在使用外接显示器，或者正在进行 Zoom 会议，软件则不会发出蜂鸣声。&lt;/p>
&lt;h3 id="openai-canvas-开源版本">OpenAI Canvas 开源版本
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-21-49.png"
width="767"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/langchain-ai/open-canvas" target="_blank" rel="noopener"
>Open Canvas&lt;/a>，是一个开源 Web 应用程序，用于与代理协作更好地编写文档。它的灵感来自OpenAI 的“Canvas” ，但是完全开源。&lt;/p>
&lt;p>不仅支持 Claude、Gemini、ChatGPT 等主流 LLM，还支持本地 Ollama 模型，同时内置记忆功能，更好记住我们的使用习惯与风格。&lt;/p>
&lt;p>主要特性如下：&lt;/p>
&lt;ul>
&lt;li>内置记忆 Agents：自动生成反馈和记忆，存储样式规则和用户见解；&lt;/li>
&lt;li>快捷操作：可自定义提示词，在不同对话中使用，提供常见的写作和编码等任务提示词；&lt;/li>
&lt;li>兼容多种格式：支持代码和 Markdown 等多种格式，同时可自由切换；&lt;/li>
&lt;li>实时渲染：在编辑 Markdown 可实时预览渲染效果；&lt;/li>
&lt;li>版本控制：所有内容都有版本记录，可以自由查看历史版本。&lt;/li>
&lt;/ul>
&lt;h3 id="ai-在-cad-领域的一种尝试">AI 在 CAD 领域的一种尝试
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-23-19.png"
width="690"
height="418"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zoo.dev/text-to-cad" target="_blank" rel="noopener"
>text-to-cad&lt;/a>。&lt;/p>
&lt;p>Text-to-CAD 是一个开源提示界面，用于通过文本提示生成 CAD 文件。生成可以导入到您选择的 CAD 程序中的模型。 ​​​&lt;/p>
&lt;h3 id="基于-webgl-的流体力学模拟">基于 webgl 的流体力学模拟
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-23-38.png"
width="690"
height="623"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://paveldogreat.github.io/WebGL-Fluid-Simulation/" target="_blank" rel="noopener"
>Fluid-Simulation&lt;/a>，是一个基于 WebGL 的流体力学模拟项目，可以
在网页中模拟流体运动，用户通过鼠标交互，项目同时提供了一个可在手机上运行的移动版本。 ​​​&lt;/p>
&lt;h3 id="基于-webrtc-的去中心化匿名聊天浏览器插件">基于 WebRTC 的去中心化匿名聊天浏览器插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-24-17.png"
width="475"
height="267"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/molvqingtai/WebChat" target="_blank" rel="noopener"
>WebChat&lt;/a>，在任何网站上，无需注册，一键开启与他人聊天，利用 WebRTC 端到端加密，所有聊天数据保存到本地，安全隐私。&lt;/p>
&lt;p>在任何网站上，无需注册，一键开启与他人聊天，利用 WebRTC 端到端加密，所有聊天数据保存到本地，安全隐私。&lt;/p>
&lt;h3 id="大模型导航资源">大模型导航资源
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-114-%E6%9C%9F/2025-01-06-16-25-17.png"
width="817"
height="660"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="297px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Hannibal046/Awesome-LLM" target="_blank" rel="noopener"
>Awesome-LLM&lt;/a>，里面收集了几乎全部的模型，具有里程碑意义的论文，排行榜，测试集，训练框架，部署，应用，书籍等。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 113 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-55-02.png" alt="Featured image of post 机器文摘 第 113 期" />&lt;h1 id="机器文摘-第-113-期">机器文摘 第 113 期
&lt;/h1>&lt;h3 id="用-esp32-做一个无人机">用 ESP32 做一个无人机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-55-02.png"
width="524"
height="355"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.digikey.cn/zh/maker/projects/a-step-by-step-guide-to-build-a-low-cost-drone-using-esp32/8afccd0690574bcebfa0d2ad6fd0a391" target="_blank" rel="noopener"
>一个使用 ESP32 制作廉价无人机的项目&lt;/a>&lt;/p>
&lt;p>教人们如何使用 ESP32 微控制器构建一个低成本的无人机。&lt;/p>
&lt;p>ESP32是一款功能强大的低成本微控制器，广泛用于物联网(IoT)项目和嵌入式系统。它具有Wi-Fi和蓝牙功能，适合用于需要无线连接的项目。&lt;/p>
&lt;p>项目特点：&lt;/p>
&lt;ul>
&lt;li>Wi-Fi控制：可以通过智能手机控制。&lt;/li>
&lt;li>MPU6050 IMU：用于稳定性控制。&lt;/li>
&lt;li>一体化PCB：不需要任何3D打印部件。&lt;/li>
&lt;li>易于升级：可以通过外部模块添加定位保持或高度保持等额外功能。&lt;/li>
&lt;li>小尺寸和轻量级。&lt;/li>
&lt;li>内置电池充电器。&lt;/li>
&lt;li>内置USB接口：用于编程和调试。&lt;/li>
&lt;li>支持Android和iOS应用。&lt;/li>
&lt;li>开源。&lt;/li>
&lt;/ul>
&lt;p>基于 Espressif 的 ESP-drone 固件，使用 ESP-IDF 4.4.5 版本编写。可以通过提供的&lt;a class="link" href="https://github.com/Circuit-Digest/ESP-Drone" target="_blank" rel="noopener"
>GitHub仓库&lt;/a>从头开始构建固件，或者如果不想麻烦，可以直接刷入提供的二进制文件。&lt;/p>
&lt;h3 id="将-sqlite-性能提升-10-倍">将 SQLite 性能提升 10 倍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-55-17.png"
width="663"
height="321"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="495px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://avi.im/blag/2024/sqlite-past-present-future/" target="_blank" rel="noopener"
>这篇深入探讨SQLite数据库性能优化&lt;/a>的文章，详细阐述了如何通过引入布隆过滤器这一创新技术，显著提升了SQLite在处理分析查询时的速度，实现了高达10倍的性能飞跃。&lt;/p>
&lt;p>文章不仅回顾了SQLite的发展历程，还深入分析了数据库连接操作的内部机制，并探讨了优化数据库查询的策略，最终展示了这一改进如何在SQLite v3.38.0版本中得到实际应用。&lt;/p>
&lt;h3 id="教程---用-c-语言写-shell">教程 - 用 C 语言写 Shell
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-55-35.png"
width="442"
height="595"
loading="lazy"
class="gallery-image"
data-flex-grow="74"
data-flex-basis="178px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://brennan.io/2015/01/16/write-a-shell-in-c/" target="_blank" rel="noopener"
>用 C 语言编写一个 Shell&lt;/a>，这篇教程带领读者用 C 语言实现一个简易的 shell，对于希望进阶的程序员来说，实现一个自己的 shell 有助于更深入地了解操作系统、shell 等概念以及底层技术。&lt;/p>
&lt;h3 id="教程---用-c-语言写虚拟机">教程 - 用 C 语言写虚拟机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-55-48.png"
width="560"
height="365"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.jmeiners.com/lc3-vm/" target="_blank" rel="noopener"
>编写您自己的虚拟机&lt;/a>，这是一份手把手教授读者进行虚拟机编写的教程。&lt;/p>
&lt;p>跟随教程可以实现一个可以运行汇编程序的真正 VM，可以运行一些自己编写的游戏。&lt;/p>
&lt;p>成品只有大概 250 行 C 代码，但作者讲的比较细，文档量比代码量大多了。 ​​​&lt;/p>
&lt;h3 id="一个脑洞清奇的网络安全项目">一个脑洞清奇的网络安全项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-56-01.png"
width="690"
height="760"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/drk1wi/portspoof" target="_blank" rel="noopener"
>Portspoof&lt;/a>，这个项目在安全防护方面主打一个逆向思维，你不是扫我端口开没开吗？老子把 65536 个端口全打开了（伪装），慢慢扫吧。&lt;/p>
&lt;p>这个安全工具的逻辑是：通过使所有 TCP 端口始终处于开放状态，以及模拟服务响应，增加攻击者对系统进行侦察的难度。&lt;/p>
&lt;p>核心功能&lt;/p>
&lt;ul>
&lt;li>端口欺骗：Portspoof 使所有 65535 个 TCP 端口都显示为开放状态。当攻击者尝试连接到任何端口时，Portspoof 会返回 SYN+ACK，而不是告知端口是关闭或被过滤的。&lt;/li>
&lt;li>服务模拟：Portspoof 拥有一个庞大的动态服务签名数据库，用于生成虚假的服务标识（banners），以欺骗扫描器。这使得攻击者难以确定哪些端口真正在使用服务。&lt;/li>
&lt;/ul>
&lt;p>攻击者估计一脸宋小宝：玩儿呐？&lt;/p>
&lt;h3 id="构建自己的音乐流媒体中心">构建自己的音乐流媒体中心
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-56-37.png"
width="690"
height="381"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="434px"
>&lt;/p>
&lt;p>爱收藏音乐的 NAS 佬又有可以折腾的项目了。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/blackcandy-org/blackcandy" target="_blank" rel="noopener"
>Black Candy&lt;/a>是一个开源自托管音乐流媒体服务器。适合那些希望拥有个人音乐库并能够自托管音乐流媒体服务的用户。通过 Black Candy，用户可以轻松地管理和播放自己的音乐收藏，同时享受自托管带来的隐私和控制优势。&lt;/p>
&lt;p>主要功能特性：&lt;/p>
&lt;ul>
&lt;li>音乐流媒体：作为一个自托管的音乐流媒体服务器，用户可以播放存储在服务器上的音乐。&lt;/li>
&lt;li>移动应用：提供了移动应用，可在各大应用商店下载。&lt;/li>
&lt;/ul>
&lt;p>项目目前还在积极开发中，可能还不太稳定。&lt;/p>
&lt;h3 id="全平台网页收藏工具">全平台网页收藏工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-113-%E6%9C%9F/2024-12-30-09-56-48.png"
width="690"
height="423"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="391px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/hoarder-app/hoarder" target="_blank" rel="noopener"
>Hoarder&lt;/a> 是一个自托管的、能够保存书签、笔记、图片和 PDF 文件的平台，并且具有基于人工智能的自动标记和全文搜索功能。&lt;/p>
&lt;p>这个项目的开发者在日常生活中经常在手机上浏览 Reddit、Twitter 和 Hacker News，发现有趣的内容（文章、工具等）想要保存以便在电脑前阅读。最初使用 Pocket 作为稍后阅读的应用，但后来对自托管产生了兴趣，希望构建一个自托管的解决方案。&lt;/p>
&lt;p>主要功能特性：
书签管理：可以保存链接、简单的笔记、图片和 PDF 文件。
自动获取：自动获取链接的标题、描述和图片。
分类整理：将书签分类到不同的列表中。
全文搜索：对存储的所有内容进行全文搜索。
AI自动标记：使用 AI（如 chatgpt）进行自动标记，支持使用本地模型。
OCR技术：从图片中提取文本。
浏览器插件：提供 Chrome 和 Firefox 插件，方便快速书签保存。
移动应用：提供 iOS 和 Android 应用。
RSS订阅：自动从 RSS 订阅中保存内容。
REST API：提供 REST API 接口。
页面归档：使用 &lt;a class="link" href="https://github.com/Y2Z/monolith" target="_blank" rel="noopener"
>monolith&lt;/a> 进行全页面归档，防止链接失效，自动使用 youtube-dl 归档视频。&lt;/p>
&lt;p>“去我的收藏夹吃灰”又多了一个工具。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 112 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/</link><pubDate>Mon, 23 Dec 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-07-18.png" alt="Featured image of post 机器文摘 第 112 期" />&lt;h1 id="机器文摘-第-112-期">机器文摘 第 112 期
&lt;/h1>&lt;h3 id="xbox-360-游戏机的破解原理">XBox 360 游戏机的破解原理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-06-24.png"
width="466"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>由于当年微软在发布 xbox 游戏机初代时安全方面做的不足，导致该机器很快被破解，后来虽然微软发布了 6 次修补程序，也无济于事（每次补丁都在数周内被破解）。&lt;/p>
&lt;p>所以xbox 360 游戏机在发布时做足了安全方面的工作，也确实很难破解，无法运行任何未通过“微软签名”认证的程序。一度被认为是不可破解的游戏机。&lt;/p>
&lt;p>然而在该机发布的 6 年后，还是有聪明的黑客，通过“硬件”手段，找到了破解方法。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/README.md" target="_blank" rel="noopener"
>《xbox360硬件安全漏洞研究》&lt;/a>记录了详细的实现原理。&lt;/p>
&lt;p>基本原理概括如下：
xbox 360 启动时加载引导程序，此时它会比对程序是否被签名过。&lt;/p>
&lt;p>既然是“比对”那就有相应的指令：memcmp。&lt;/p>
&lt;p>在cpu旁边等着，在它执行签名认证的 memcmp 指令的那一刻，给它的 reset 引脚发射一个大约 10 纳秒的脉冲信号，让它哆嗦一下，发生了硬件故障但不至于死机。此时这条指令就会返回 0x00，也就是说无论比对是否成功，都会认为成功。&lt;/p>
&lt;p>基于此，你就可以让游戏机加载并运行你的未签名的程序了。&lt;/p>
&lt;h3 id="给-html-的元素设置一个不存在的颜色">给 HTML 的元素设置一个不存在的颜色
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-06-37.png"
width="690"
height="593"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="279px"
>&lt;/p>
&lt;p>在 HTML 的元素属性里有个 Color 属性，可以设置元素颜色，支持 &lt;code>#000000&lt;/code> HEX 色值以及颜色名的方式（比如 black、white、green 等）指定颜色。&lt;/p>
&lt;p>如果你设置了一个奇怪的名称给 Color，浏览器也会试图解析它，比如：&lt;code>&amp;lt;font color=&amp;quot;chucknorris&amp;quot;&amp;gt;&lt;/code>，会显示红色的字体。&lt;/p>
&lt;p>&lt;a class="link" href="http://t.cn/A6msThEe" target="_blank" rel="noopener"
>《我最喜欢的颜色是 chucknorris 红》&lt;/a>探讨了在 HTML 中设置文本颜色的一种非常规方法，并解释了为什么浏览器会把 chucknorris 解析为红色。&lt;/p>
&lt;p>文章详细解释了浏览器如何处理无效的颜色值，包括：&lt;/p>
&lt;ul>
&lt;li>清理：移除颜色值前的 #。&lt;/li>
&lt;li>替换无效字符：非十六进制字符被替换为 0。&lt;/li>
&lt;li>标准化长度：不足部分补 0。&lt;/li>
&lt;li>分割成红绿蓝三部分。&lt;/li>
&lt;li>处理长度：过长的组件会被截断，过短的会被补足。&lt;/li>
&lt;li>最终组合：将处理后的红绿蓝值组合成最终的颜色。&lt;/li>
&lt;/ul>
&lt;p>按照上面的规则chucknorris最终被浏览器解析为红色。&lt;/p>
&lt;h3 id="为什么使用极坐标绘制质数图案呈现出一个星系">为什么使用极坐标绘制质数图案呈现出一个星系
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-07-07.png"
width="639"
height="731"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="209px"
>&lt;/p>
&lt;p>将多个质数按极坐标绘制出来时，如果数量足够多，其图案将呈现出螺旋状，就像一个星系。&lt;/p>
&lt;p>&lt;a class="link" href="https://jaketae.github.io/study/prime-spirals/" target="_blank" rel="noopener"
>这篇文章&lt;/a>进行了一些分析。&lt;/p>
&lt;p>事实上，呈现出螺旋状与质数无关，即使绘制所有正整数也会呈现类似效果。&lt;/p>
&lt;p>此文从数学的角度，解释了呈现螺旋的原因。&lt;/p>
&lt;h3 id="自制一个显示课程表的电子墨水屏">自制一个显示课程表的电子墨水屏
&lt;/h3>&lt;p>​​​&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-07-18.png"
width="649"
height="394"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mfasold.net/blog/displaying-website-content-on-an-e-ink-display/" target="_blank" rel="noopener"
>在电子墨水屏上显示网站内容&lt;/a>，本文介绍了一个将学校课程表自动显示在电子墨水屏上的项目。&lt;/p>
&lt;p>作者选用了搭载 ESP32 微控制器的 Inkplate 6COLOR 设备，通过 MicroPython 编程实现。&lt;/p>
&lt;p>项目通过 Playwright 进行网页抓取，Pillow 库处理图像，再利用 Werkzeug 搭建简易服务器发布图像。&lt;/p>
&lt;p>最终，通过 Arduino 库在电子墨水屏上显示处理后的课程表图像，实现低功耗、定时更新。这个DIY项目不仅提高了家庭日常效率，还展示了如何将网络内容自动化展示在电子设备上。&lt;/p>
&lt;p>关键技术点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>电子墨水屏技术&lt;/strong>：电子墨水屏以其低功耗和类似纸张的阅读体验而闻名，适合长时间显示静态内容，如课程表。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>微控制器编程&lt;/strong>：通过Arduino或MicroPython对ESP32微控制器进行编程，实现设备控制和网络通信。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>网络抓取（Web Scraping）&lt;/strong>：使用Playwright等工具模拟浏览器操作，从网站上提取所需数据，即使网站有登录限制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图像处理&lt;/strong>：利用Pillow库对抓取的网页内容进行颜色量化和尺寸调整，以适配电子墨水屏的显示要求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实时时钟（RTC）&lt;/strong>：使用RTC模块设置设备定时唤醒，更新显示内容，然后再次进入深度睡眠模式以节省电力。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Wi-Fi通信&lt;/strong>：ESP32微控制器的Wi-Fi功能用于从互联网获取数据，实现远程内容更新。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Docker容器化&lt;/strong>：将应用及其依赖打包进Docker容器，简化部署和维护，适用于多种云服务和虚拟私有服务器。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="将各种文件转换为-markdown">将各种文件转换为 Markdown
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-08-16.png"
width="569"
height="499"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="273px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://github.com/microsoft/markitdown" target="_blank" rel="noopener"
>markitdown&lt;/a>，微软发布的一个开源工具，用于将各种文件转换为 Markdown 格式。&lt;/p>
&lt;p>支持：&lt;/p>
&lt;ul>
&lt;li>PDF（.pdf）&lt;/li>
&lt;li>PowerPoint （.pptx）&lt;/li>
&lt;li>Word （.docx）&lt;/li>
&lt;li>Excel (.xlsx)&lt;/li>
&lt;li>图像（EXIF 元数据和 OCR）&lt;/li>
&lt;li>音频（EXIF 元数据和语音转录）&lt;/li>
&lt;li>HTML（维基百科等的特殊处理）&lt;/li>
&lt;li>各种其他基于文本的格式（csv、json、xml 等）&lt;/li>
&lt;/ul>
&lt;h3 id="excel-cpu">excel CPU
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-08-40.png"
width="690"
height="441"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/InkboxSoftware/excelCPU" target="_blank" rel="noopener"
>excelCPU&lt;/a>, 一个用 Excel 表格实现的 CPU 模拟器，可以在 Excel 中模拟 CPU 的运行过程，包括指令集、寄存器、内存、堆栈等。&lt;/p>
&lt;p>项目包括CPU.xlsx、ROM.xlsx、InstructionSet.xlsx等文件，以及一个Python编译器用于将Excel-ASM16语言编写的程序编译成Excel可以理解的格式。&lt;/p>
&lt;p>用户可以通过修改Excel工作表中的值来控制CPU，执行程序，并观察CPU的运行状态。&lt;/p>
&lt;p>项目提供了详细的指令集和操作说明，允许用户深入了解和实践基于Excel的计算和编程。&lt;/p>
&lt;h3 id="一个帮助提升英语水平的新闻网站">一个帮助提升英语水平的新闻网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-08-54.png"
width="690"
height="487"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://englishnewsinlevels.com" target="_blank" rel="noopener"
>englishnewsinlevels.com&lt;/a>，一个帮助提升英语水平的新闻网站，提供了不同难度的新闻，分为三个级别：1级、2级、3级。&lt;/p>
&lt;p>1级：适合初学者，使用简单的词汇和句子，新闻内容简单易懂。&lt;/p>
&lt;p>2级：适合中级水平，使用更多的词汇和句子，新闻内容更丰富。&lt;/p>
&lt;p>3级：适合高级水平，使用更复杂的词汇和句子，新闻内容更深入。&lt;/p>
&lt;ul>
&lt;li>每篇新闻配备优质音频和重点词汇注释&lt;/li>
&lt;li>文章难度分级精确，循序渐进&lt;/li>
&lt;li>阅读后有理解测验，帮助巩固学习&lt;/li>
&lt;li>个人词汇本功能，可收藏和复习生词&lt;/li>
&lt;li>自动统计学习数据：已掌握词汇量、阅读文章数、连续学习天数等&lt;/li>
&lt;li>支持下载 PDF，方便离线阅读&lt;/li>
&lt;li>界面简洁无广告，专注于学习体验&lt;/li>
&lt;/ul>
&lt;h3 id="几句话就能生成可调节的音效音频">几句话就能生成可调节的音效音频
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-09-10.png"
width="690"
height="685"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tiktokvoice.net/en/sounds-effect" target="_blank" rel="noopener"
>sounds-effect&lt;/a>&lt;/p>
&lt;p>应用场景场景：&lt;/p>
&lt;ul>
&lt;li>🎮 生成游戏开发中音效，比如：击打，乐器，环境声音等；&lt;/li>
&lt;li>🍀 白噪音视频和音频中的背景音，比如：下雨，打雷，风吹声等；&lt;/li>
&lt;li>💡 创意视频和广告中的特殊声音，比如：飞碟降落，塞车疾驰，宇宙飞行等； ​​​&lt;/li>
&lt;/ul>
&lt;h3 id="机器人训练源码">机器人训练源码
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-09-46.png"
width="585"
height="575"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="244px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/unitreerobotics/unitree_rl_gym" target="_blank" rel="noopener"
>Unitree RL GYM&lt;/a>，Unitree 宇树科技开源了其机器人训练的所有源代码，包括了 强化学习（RL）训练代码、从模拟到模拟（Sim-to-Sim） 和 从模拟到现实（Sim-to-Real） 的源代码。&lt;/p>
&lt;p>该项目可以帮助开发者或研究人员在虚拟环境中模拟和训练机器人，然后把训练结果转移到机器人上。是宇树科技Unitree H1、H1-2 和 G1 机器人已经验证过的技术。&lt;/p>
&lt;h3 id="专为通用-ai-训练而设计的物理模拟平台">专为通用 AI 训练而设计的物理模拟平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-112-%E6%9C%9F/2024-12-23-11-10-40.png"
width="826"
height="690"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Genesis-Embodied-AI/Genesis" target="_blank" rel="noopener"
>Genesis&lt;/a>，生成式物理引擎，可以生成基于真实物理的4D动态世界，面向机器人和物理AI的通用模拟平台。&lt;/p>
&lt;p>四个主要能力：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>物理引擎：可以模拟现实世界的各种物理现象，包括刚体、关节体、液体、气体、可变形物体、薄壳物体和颗粒材料等，这些物理现象可以在统一框架下相互作用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>机器人仿真平台：轻量级、超快速、Python化、用户友好&lt;/p>
&lt;/li>
&lt;li>
&lt;p>渲染系统：可生成照片级真实的画面&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成式数据引擎：可以根据文字描述自动生成各类数据&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;em>这里未来可能诞生奴役人类的 The Matix。&lt;/em>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 111 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/</link><pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-42-31.png" alt="Featured image of post 机器文摘 第 111 期" />&lt;h1 id="机器文摘-第-111-期">机器文摘 第 111 期
&lt;/h1>&lt;h3 id="用不到-3000-个字节的-c-代码实现一个-chatgpt">用不到 3000 个字节的 C 代码，实现一个 chatGPT
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-42-31.png"
width="690"
height="566"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="292px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://nicholas.carlini.com/writing/2023/chat-gpt-2-in-c.html" target="_blank" rel="noopener"
>用大约3000字节的C语言代码实现l了个类似于ChatGPT的程序&lt;/a>，基于 GPT-2 模型。&lt;/p>
&lt;p>GPT-2是一个开源的自然语言处理模型，虽然它的能力远不及后来的 GPT-4（ChatGPT使用的模型），但它非常适合学习和理解 LLM 的工作原理，基于 GPT-2 你可以自己动手实现一个完全可用的聊天模型。&lt;/p>
&lt;p>这个 C 程序主要包括：&lt;/p>
&lt;ul>
&lt;li>基础矩阵数学库：由于神经网络本质上是矩阵运算，作者首先创建了一个极简的矩阵库，包括矩阵与常数的运算和矩阵间的运算。&lt;/li>
&lt;li>快速矩阵乘法：作者实现了一个基础的矩阵乘法算法，并对其进行了优化，使其能够更快地运行。&lt;/li>
&lt;li>神经网络层：为了构建一个变换器（transformer），作者定义了一些特殊的神经网络层，包括GELU激活函数和层归一化（LayerNorm）。&lt;/li>
&lt;li>变换器架构：在600字节的代码中，作者实现了变换器模型，这是GPT-2的核心。&lt;/li>
&lt;li>字节对编码（Byte pair encoding, BPE）：为了处理词汇表中单词的无限性，GPT-2使用BPE将单词分解为“词片”。作者描述了如何在C语言中实现BPE。&lt;/li>
&lt;li>权重加载：加载神经网络的实际权重也是必要的步骤，作者解释了如何从磁盘读取这些权重。&lt;/li>
&lt;li>BPE词汇表加载：为了执行BPE，作者需要从磁盘加载BPE词汇表，这个过程涉及到一些复杂的UTF-8编码处理。&lt;/li>
&lt;/ul>
&lt;h3 id="基于哈希值识别相似图像">基于哈希值识别相似图像
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-42-55.png"
width="470"
height="297"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="379px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/JohannesBuchner/imagehash" target="_blank" rel="noopener"
>imagehash&lt;/a>，该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。&lt;/p>
&lt;h3 id="完全本地运行的跨平台图像处理应用">完全本地运行的跨平台图像处理应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-43-12.png"
width="690"
height="430"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/zhongweili/imagenie" target="_blank" rel="noopener"
>Imagenie&lt;/a>。&lt;/p>
&lt;p>核心功能：人像修复、超分辨率放大、背景移除。&lt;/p>
&lt;p>技术原理：本地运行 AI 模型进行图像处理，基于 tauri 框架，本地使用 rust 语言开发核心功能，兼顾性能与跨平台。&lt;/p>
&lt;p>应用特点：AI 驱动：每个功能都是由 AI 模型本地化推理实现，完全本地运行，不必担心照片上传到 web。&lt;/p>
&lt;h3 id="将-markdown-文本-转换为美观的图片海报">将 Markdown 文本 转换为美观的图片海报
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-43-47.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/gcui-art/markdown-to-image" target="_blank" rel="noopener"
>Markdown-to-Image&lt;/a>，开源的 Markdown 转图片工具。&lt;/p>
&lt;ul>
&lt;li>直接将Markdown 格式的内容渲染成适合社交媒体分享的图片。&lt;/li>
&lt;li>可以选择内置的模板，也可以自己设计模板样式&lt;/li>
&lt;li>自带 9 种主题（比如不同的背景、配色风格）&lt;/li>
&lt;li>输出的图片可以直接复制，也可以转成 HTML 代码，粘贴到文章、邮件或编辑器里&lt;/li>
&lt;li>支持一键部署到你自己的服务器&lt;/li>
&lt;/ul>
&lt;h3 id="开源-excel-电子表格操作库java">开源 excel 电子表格操作库（Java）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-44-01.png"
width="622"
height="614"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="243px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/CodePhiliaX/fastexcel" target="_blank" rel="noopener"
>FastExcel&lt;/a>，由easyexcel(已停止维护)作者最新推出的新版本， 快速、简洁、解决大文件内存溢出的java处理Excel工具。&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;pre>&lt;code>1. 完全兼容 EasyExcel，平滑过渡
FastExcel 完全兼容原 EasyExcel 的所有功能和特性。这意味着现有使用 EasyExcel 的项目，可以毫无障碍地迁移到 FastExcel。您只需简单地更换包名和 Maven 依赖，即可完成升级，无需担心任何兼容性问题。
2. 高性能表现，卓越体验
正如其名，FastExcel 在性能上有了显著的提升。通过对底层算法的优化和内存管理的改进，FastExcel 能够更加高效地处理大规模的 Excel 数据，大幅降低了内存消耗和处理时间。
3. 免费开源，MIT 协议
我们承诺，FastExcel 将始终免费开源，并采用最开放的 MIT 协议。这为开发者和企业提供了极大的自由度和灵活性，可以在任何商业化场景中自由使用 FastExcel，无需担心版权和授权问题。
4. 功能创新，超越自我
FastExcel 不仅继承了 EasyExcel 的所有功能，还在此基础上进行了许多创新和改进。在 1.0.0 版本中，我们新增了以下实用功能：
读取 Excel 指定行数：您可以根据需求，只读取感兴趣的部分数据，提高了数据处理的效率。
Excel 转换为 PDF：直接将 Excel 文件转换为 PDF，满足多样化的文档输出需求。
&lt;/code>&lt;/pre>
&lt;h3 id="一个工具解决管理开发环境版本的所有问题">一个工具解决管理开发环境版本的所有问题
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-44-17.png"
width="690"
height="344"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mise.jdx.dev/about.html" target="_blank" rel="noopener"
>Mise&lt;/a>是一个开发环境版本管理工具，作用类似于 pyenv、nvm等，但是更全面。&lt;/p>
&lt;p>可以管理多种语言的开发环境包括不限于 node、python、cmake、terraform等。&lt;/p>
&lt;p>安装和管理 Node、Python 或 Terraform 等开发工具/运行时，既简化了这些工具的安装，又允许您指定要在不同项目中使用这些工具的哪个版本。 Mise 支持 数百 种开发工具。&lt;/p>
&lt;p>同时 Mise 也是一个任务运行程序，可用于在开发人员之间共享项目中的常见任务，并简化文件更改时运行任务等操作。&lt;/p>
&lt;h3 id="基于纯键盘操作的浏览器">基于纯键盘操作的浏览器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-44-28.png"
width="690"
height="416"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="398px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.qutebrowser.org/" target="_blank" rel="noopener"
>qutebrowser&lt;/a>是一个以键盘为中心的开源浏览器（基于 Python 和 Qt）。&lt;/p>
&lt;p>具有最小化的 GUI 界面，使用与 Vim 编辑器相同的快捷键操作方式进行交互，让人沉浸在网页内容浏览之中。&lt;/p>
&lt;p>浏览器的制作灵感来自于 vimperator 插件，该插件允许用户使用 Vim 编辑器的快捷键操作浏览器（chrome 和 edge 浏览器版本的插件为 vimium）。&lt;/p>
&lt;h3 id="使用-webgpu-加速构建的文本转语音-web-应用程序">使用 WebGPU 加速构建的文本转语音 Web 应用程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-111-%E6%9C%9F/2024-12-16-13-46-48.png"
width="521"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="248px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/huggingface/transformers.js-examples/tree/main/text-to-speech-webgpu" target="_blank" rel="noopener"
>TTS WebGPU&lt;/a>，第一个使用 WebGPU 加速构建的文本转语音 Web 应用程序。&lt;/p>
&lt;p>由 OuteTTS 和 Transformers.js 提供支持的高质量自然语音生成，100% 在浏览器中本地运行。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 110 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/</link><pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-27-19.png" alt="Featured image of post 机器文摘 第 110 期" />&lt;h1 id="机器文摘-第-110-期">机器文摘 第 110 期
&lt;/h1>&lt;h3 id="物理遮挡摄像头并非多此一举">物理遮挡摄像头并非多此一举
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-26-29.png"
width="690"
height="392"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="422px"
>&lt;/p>
&lt;p>多年的担心还是发生了，近日有安全人员公布了一个开源工具仓库。&lt;/p>
&lt;p>里面提供的相关工具包可以将 thinkpad x230 笔记本的摄像头 LED 关闭，并偷偷进行视频录制。&lt;/p>
&lt;p>开源仓库地址在：https://github.com/xairy/lights-out
记录有演讲细节的pdf：https://docs.google.com/presentation/d/1NSS2frdiyRVr-5vIjAU-2wf_agzpdiMR1DvVhz2eDwc/edit#slide=id.g3003eb4ed53_5_160&lt;/p>
&lt;p>具体技术原理：&lt;/p>
&lt;ul>
&lt;li>ThinkPad X230（以及同一时代的其他一些笔记本电脑）上使用的网络摄像头基于 Ricoh R5U8710 USB 相机控制器。该控制器将其固件的一部分（SROM 部分）存储在位于网络摄像头板上的 SPI 闪存芯片上。控制器还允许通过 USB 重新刷新 SPI 芯片的内容。&lt;/li>
&lt;li>X230 网络摄像头板上的 LED 连接到 R5U8710 控制器的 GPIO B1 引脚。GPIO B 端口映射到 R5U8710 内部基于 8051 的 CPU 的 XDATA 内存空间中的 0x80 地址。因此，更改该地址的值会更改 LED 的状态。无论网络摄像头当前是否正在流式传输视频，这都有效。&lt;/li>
&lt;li>库中提供的工具允许使用 USB 控制的所谓“通用植入物”将自定义固件刷入网络摄像头板上的 SPI 芯片。此植入程序允许将受控数据写入任意地址（在 XDATA 内存空间内）并调用任意地址（在 CODE 内存空间内;与从偏移量 0xb000 开始的 XDATA 别名）。&lt;/li>
&lt;/ul>
&lt;p>看来联想后来给 thinkpad 笔记本摄像头都加入了物理遮挡开关的行为并非多次一举，恐怕是早就知道了这种技术漏洞了吧。&lt;/p>
&lt;h3 id="用上世纪五十年代的真空管攒一个电脑">用上世纪五十年代的真空管“攒”一个“电脑”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-26-44.png"
width="458"
height="654"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="168px"
>&lt;/p>
&lt;p>电子计算机在最开始使用的主要电子元件就是真空管（又称电子管），为了验证这个事情，&lt;a class="link" href="https://www.thetubecomputer.com/" target="_blank" rel="noopener"
>The Tube Computer&lt;/a>一文作者亲自用回收的老真空管制作了一个放在家里占满了一面墙的 8 位计算机。&lt;/p>
&lt;p>这台计算机采用更现代的 8bit 设计，真空管全部采用上世纪五十年代生产的老管子（估计是拆机件）。&lt;/p>
&lt;p>运转起来既发光又发热，可以给整个房间供暖。&lt;/p>
&lt;p>这个项目启动的初衷是作者希望让自己的孙子能够真正的“看见”电子计算机的运行。&lt;/p>
&lt;p>真是一个爱动手、能动手的老极客啊。&lt;/p>
&lt;h3 id="可以-diy-的-开源-ai-聊天机器人">可以 DIY 的 开源 AI 聊天机器人
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-27-19.png"
width="640"
height="480"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/78/xiaozhi-esp32" target="_blank" rel="noopener"
>小智 AI 聊天机器人&lt;/a>，基于 ESP32+SenseVoice+Qwen72B 的开源 AI 硬件项目。&lt;/p>
&lt;p>支持 Wi-Fi 配网和 4G 通信，具备离线语音唤醒、5种语言识别、声纹识别、流式对话等功能。&lt;/p>
&lt;p>可自定义角色设定和提示词，支持对话记忆，适合AI硬件开发学习者使用。&lt;/p>
&lt;p>提供免开发环境固件和详细教程。&lt;/p>
&lt;p>所有材料均可在淘宝上买到，我试着下单凑齐了零件（没买 4G 通信模块），共花费 90 元（含邮费）。&lt;/p>
&lt;h3 id="又一个开源知识图谱平台">又一个开源知识图谱平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-28-03.png"
width="564"
height="318"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/whyhow-ai/knowledge-graph-studio" target="_blank" rel="noopener"
>knowledge-graph-studio&lt;/a>，一个开源的知识图谱构建和管理平台，专为RAG应用设计。支持基于规则的实体解析、模块化图谱构建、灵活的数据接入等功能。基于NoSQL数据库构建，提供API优先的设计理念和SDK支持，可用于构建动态的图谱驱动AI工作流，适用于实验性和大规模应用场景。&lt;/p>
&lt;h3 id="复制当前网页为-markdown-格式的插件">复制当前网页为 Markdown 格式的插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-28-40.png"
width="581"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="362px"
>
&lt;a class="link" href="https://github.com/AnswerDotAI/web2md-ext" target="_blank" rel="noopener"
>Web2MD 浏览器插件&lt;/a>：一个简单实用的 Chrome 扩展工具，通过快捷键 Ctrl+Shift+O 可以一键将当前网页内容转换为 Markdown 格式并自动复制到剪贴板，支持自定义快捷键，提高文档处理效率。&lt;/p>
&lt;h3 id="生成式-ai-学习资源">生成式 AI 学习资源
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-110-%E6%9C%9F/2024-12-09-10-29-18.png"
width="557"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>
&lt;a class="link" href="https://github.com/genaibook/genaibook" target="_blank" rel="noopener"
>GenAI Book&lt;/a>，《Hands-On Generative AI with Transformers and Diffusion Models》一书的配套资源库，包含完整的代码示例和练习答案。涵盖了生成式AI的核心内容，从Transformers到扩散模型，从语言模型到图像生成，并包含实践应用案例。适合想要系统学习生成式AI的开发者使用.&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 109 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/</link><pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-04-25.png" alt="Featured image of post 机器文摘 第 109 期" />&lt;h1 id="机器文摘-第-109-期">机器文摘 第 109 期
&lt;/h1>&lt;h3 id="计算机内存的一些历史">计算机内存的一些历史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-03-52.png"
width="690"
height="460"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://lcamtuf.substack.com/p/memory-the-forgotten-history" target="_blank" rel="noopener"
>被遗忘的内存历史&lt;/a>，文章详细介绍了了从继电器到真空管、动态存储器，再到磁介质存储的发展，强调了内存在个人计算发展中的重要性，并探讨了各种存储技术的优势与局限。 ​​​&lt;/p>
&lt;h3 id="dos-内存模型的一些知识">DOS 内存模型的一些知识
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-04-14.png"
width="690"
height="383"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blogsystem5.substack.com/p/dos-memory-models" target="_blank" rel="noopener"
>重新审视 DOS 内存模型&lt;/a>，探讨了DOS操作系统如何克服x86实模式下内存限制的各种技巧，特别是那个时代编译可执行程序所需要了解的不同“内存模型”。&lt;/p>
&lt;p>作者先是带大家回顾了 8086（也就是 DOS 主要面向的 CPU） 的内存访问架构（段地址：偏移地址），然后分别分析了几种在 DOS 下常见的可执行文件封装格式（COM、EXE）。&lt;/p>
&lt;blockquote>
&lt;p>COM文件是最简单的可执行文件格式，它们包含原始机器代码，可以放置在几乎任何内存位置并执行，无需任何后处理。COM文件利用8086的分段架构，总是加载到任何段的100h偏移处，所有内存地址必须相对于这个偏移。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>为了解决COM文件的限制，微软为DOS设计了另一种可执行文件格式：EXE文件。与COM文件相比，EXE文件有内部结构，不受64KB限制，可以包含更大的代码和数据块。EXE文件包含多个段，并将代码和数据分布在它们之间。&lt;/p>
&lt;/blockquote>
&lt;p>文章在最后解释了旧编译器中常见的内存模型，包括 Tiny、Small、Compact、Medium、Large 和 Huge 模型，每种模型都有其特定的指针使用方式和内存布局。&lt;/p>
&lt;h3 id="游戏画面的抗锯齿技术详解">游戏画面的抗锯齿技术详解
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-04-25.png"
width="690"
height="603"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="274px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.frost.kiwi/analytical-anti-aliasing/" target="_blank" rel="noopener"
>AAA - Analytical Anti-Aliasing&lt;/a>，这篇文章来自Frost Kiwi的博客，主要讨论了抗锯齿技术，特别是分析性抗锯齿（Analytical Anti-Aliasing，简称AAA）。&lt;/p>
&lt;p>文章详细介绍了从简单的超采样抗锯齿（SSAA）到基于理论的SMAA，再到使用机器学习的DLAA等多种抗锯齿技术，以及它们如何以不同的方法实现相同的目标：消除图像中的锯齿效应。&lt;/p>
&lt;p>文章通过WebGL示例展示了如何实现抗锯齿技术。&lt;/p>
&lt;p>作者提供了详细的代码示例，包括顶点着色器、片段着色器和JavaScript代码，这些代码可以在WebGL画布上绘制一个移动的圆，并展示不同抗锯齿技术的效果。&lt;/p>
&lt;h3 id="使用-vscode-为-commodore64-开发应用程序">使用 vscode 为 commodore64 开发应用程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-04-43.png"
width="690"
height="418"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>commodore64（在文中简称C64）是上世纪 80 年代十分风靡的一款 8 位个人电脑。&lt;/p>
&lt;p>在二十一世纪的今天，也有很多复古电脑爱好者，为其开发应用程序。（YouTube上有个 8BitGuy 是我见过的最热衷此事的，好像还做了发售的游戏，&lt;em>&lt;a class="link" href="https://space.bilibili.com/556805805" target="_blank" rel="noopener"
>同时在 B 站也有他的频道:The 8-Bit Guy&lt;/a>&lt;/em>）&lt;/p>
&lt;p>&lt;a class="link" href="https://retrogamecoders.com/c64-visual-studio-code/" target="_blank" rel="noopener"
>Programming the C64 with Visual Studio Code&lt;/a>一文介绍了怎样在vscode这个目前最流行的现代编辑器上通过安装插件的方式为 C64 开发应用程序。&lt;/p>
&lt;p>主要用到了一个名为 &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=rosc.vs64" target="_blank" rel="noopener"
>VS64&lt;/a> 的插件，该插件在不安装额外工具链的情况下即可支持使用 BASIC 语言为 C64 开发程序。&lt;/p>
&lt;p>如使用 C、6502汇编进行开发，还需安装配套的编译和调试工具。&lt;/p>
&lt;h3 id="用-excel-做一个向量数据库">用 excel 做一个向量数据库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-04-58.png"
width="690"
height="438"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>向量数据库最近大火，主要是受 LLM 火爆的影响，在执行 RAG 相关任务时，向量数据库是必备的数据存储和语义检索基础。&lt;/p>
&lt;p>想要深入理解其原理，这里有一个项目，作者&lt;a class="link" href="https://aibyhand.substack.com/p/building-a-vector-database-in-excel" target="_blank" rel="noopener"
>用 excel 实现了一个向量数据库原型&lt;/a>，主要用于展示其背后的技术原理。&lt;/p>
&lt;h3 id="一个视频看明白卷积神经网络cnn的运行机制">一个视频看明白卷积神经网络（CNN）的运行机制
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-05-22.png"
width="572"
height="381"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>这是目前为止我看过的关于卷积神经网络运作最清晰、最容易理解的视频，使用可视化语言 Processing 制作，清晰地展现下述过程：&lt;/p>
&lt;ol>
&lt;li>输入图像的像素被卷积层处理；&lt;/li>
&lt;li>特征图被池化层处理；&lt;/li>
&lt;li>特征图被全连接层处理；&lt;/li>
&lt;/ol>
&lt;p>视频项目的源码在：https://github.com/okdalto/CNN-visualization&lt;/p>
&lt;h3 id="监控网页任意元素并显示在-title-中">监控网页任意元素并显示在 title 中
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-05-57.png"
width="690"
height="431"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chromewebstore.google.com/detail/title-mirror/mkffplgaiikhbnihpedpmgkkpemmlohf" target="_blank" rel="noopener"
>Title Mirror&lt;/a> 一个有意思的插件，把网页中任意元素内容投射在网页title区域。&lt;/p>
&lt;p>可以用来进行股市盯盘、球赛比分关注等摸鱼活动。&lt;/p>
&lt;h3 id="使用-ollama-支持的视觉模型llama-32-visionminicpm-v-等实现图片-ocr">使用 Ollama 支持的视觉模型（llama 3.2-vision/minicpm-v 等）实现图片 OCR
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-07-15.png"
width="556"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="289px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/bytefer/ollama-ocr" target="_blank" rel="noopener"
>Ollama-OCR&lt;/a>，使用 Llama 3.2-Vision/ minicpm-v 等 Ollama 支持的视觉模型，进行 OCR 识别。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ul>
&lt;li>保留原始文本格式和结构&lt;/li>
&lt;li>支持多种图像格式：JPG、JPEG、PNG&lt;/li>
&lt;li>可自定义的识别提示词和模型&lt;/li>
&lt;li>支持输出 Markdown 格式文档&lt;/li>
&lt;/ul>
&lt;h3 id="阿里开源的-agent-框架">阿里开源的 agent 框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-08-39.png"
width="667"
height="419"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;p>阿里开源了一个基于Qwen2.0的agent框架：&lt;a class="link" href="https://github.com/QwenLM/Qwen-Agent" target="_blank" rel="noopener"
>Qwen-Agent&lt;/a>，具有指令遵循、工具使用、任务规划和记忆能力。&lt;/p>
&lt;p>你可以用它来构建各种能执行复杂任务的AI代理，它可以调用工具，计算器、搜索引擎，可以处理长文档等，你可以构建比如，浏览器助手、代码解释器、自定义助手等。&lt;/p>
&lt;h3 id="基于-webrtc-技术的屏幕共享工具">基于 WebRTC 技术的屏幕共享工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-109-%E6%9C%9F/2024-12-02-14-09-02.png"
width="483"
height="793"
loading="lazy"
class="gallery-image"
data-flex-grow="60"
data-flex-basis="146px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://getbananas.net/" target="_blank" rel="noopener"
>Bananas Screen Sharing&lt;/a>，开源跨平台屏幕共享工具，基于 WebRTC 技术，实现点对点的安全连接。无需注册或配置，用户只需生成链接并分享即可开始使用。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 108 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/</link><pubDate>Tue, 26 Nov 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-36-35.png" alt="Featured image of post 机器文摘 第 108 期" />&lt;h1 id="机器文摘-第-108-期">机器文摘 第 108 期
&lt;/h1>&lt;h3 id="计算机除了数字的还有模拟的">计算机除了数字的，还有模拟的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-34-35.png"
width="477"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="245px"
>&lt;/p>
&lt;p>基于二进制的数字计算机流行，使得人们往往忽略了还有其他范式的计算机，实际上还有模拟的和量子的。&lt;/p>
&lt;p>随着数字计算接近摩尔定律的极限，模拟计算提供了一种可替代的可能性。&lt;/p>
&lt;p>模拟计算特别适合于动态系统建模和神经形态人工智能应用，比数字计算更节能，面对网络威胁时也更安全。&lt;/p>
&lt;p>&lt;a class="link" href="https://the-analog-thing.org/" target="_blank" rel="noopener"
>The Analog Thing&lt;/a>（简称THAT）是一个高质量、低成本、开源且非盈利的尖端模拟计算机项目。&lt;/p>
&lt;p>旨在提供一个能够快速、并行、高效地模拟动态系统的平台。&lt;/p>
&lt;p>它将实践操作与数学理论相结合，自然融入设计和工程实践，如试错探索和使用比例模型。THAT不仅有助于理解现状（是什么的模型），还能帮助实现理想状态（应该是什么的模型）。&lt;/p>
&lt;p>THAT设计精巧，使用少量计算元件就能实现广泛的模拟计算应用。包括5个积分器、4个求和器、2个比较器、主从端口、8个系数电位器、2个乘法器、面板仪表和混合端口等。&lt;/p>
&lt;p>使用THAT，你可以模拟包括市场经济、疾病传播与控制、人口动态、化学反应、机械系统以及各种数学吸引子在内的动态系统。&lt;/p>
&lt;p>THAT还提供了学习微积分、模拟电路和控制工程的机会。模拟计算与变化率和数量积累紧密相关，提供了一种实践微积分的方法。通过操作放大器构建的计算元件，用户可以直观地理解模拟电路。在自适应控制系统中，模拟计算提供了控制工程的实践入门。&lt;/p>
&lt;p>不过值得注意的是，这款产品并非开源，其硬件成品需要付费购买，定价在 450 - 500 欧元。&lt;/p>
&lt;h3 id="构建自己的-rag-应用">构建自己的 RAG 应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-34-53.png"
width="1586"
height="1202"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>RAG（搜索增强生成）是当下最热的基于 LLM （大语言模型）的应用技术，市面上也充斥着大量的相关开源项目。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/bRAGAI/bRAG-langchain" target="_blank" rel="noopener"
>bRAG-langchain&lt;/a>，是一个帮助你学习 RAG 技术构建自己应用的开源项目，提供了从基础环境配置到高级应用架构的一系列教程。&lt;/p>
&lt;p>教程内容基于 jupyter-notebook 构建，可以边实践边学习。&lt;/p>
&lt;p>正如项目介绍中所说：构建 RAG 应用所需要了解的一切，都在这里。&lt;/p>
&lt;h3 id="强化学习算法集">强化学习算法集
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-35-54.png"
width="335"
height="410"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/XinJingHao/DRL-Pytorch" target="_blank" rel="noopener"
>DRL-Pytorch&lt;/a>，最全面的深度强化学习算法 PyTorch 实现合集，整合了 13 种主流强化学习算法。&lt;/p>
&lt;p>包括从入门级的Q-learning到高阶的SAC、TD3等，每个算法都配有详细文档、完整训练曲线和论文引用。&lt;/p>
&lt;p>项目还提供了丰富的学习资源推荐，包括环境配置、经典书籍、在线课程和重要论文等。&lt;/p>
&lt;h3 id="基于-ai-的实时世界场景生成">基于 AI 的实时世界场景生成
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-36-35.png"
width="690"
height="517"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://thematrix1999.github.io/" target="_blank" rel="noopener"
>“The Matrix”&lt;/a>是一个前沿的实时、高分辨率、无限地平线的世界模拟系统。&lt;/p>
&lt;p>项目名称和灵感来源于1999年的电影《The Matrix》（国内译为：黑客帝国），旨在通过AI技术创造一个逼真的、沉浸式的互动世界，模糊现实与幻觉之间的界限。&lt;/p>
&lt;p>其核心原理是：基于用户输入的视角控制信息，用 AI 实时生成视频帧画面。&lt;/p>
&lt;p>AI 模型的视频生成能力学习自很多大型游戏的渲染结果。&lt;/p>
&lt;p>技术特点&lt;/p>
&lt;ul>
&lt;li>帧级精度：用户交互响应达到电影中的水平。&lt;/li>
&lt;li>AAA级视觉效果：提供接近现实的沉浸式场景。&lt;/li>
&lt;li>无限生成能力：超越当前视频模型的限制，支持无尽探索。&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="基于控制台的-3d-模型查看工具">基于控制台的 3D 模型查看工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-37-26.png"
width="690"
height="440"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/liam-ilan/terminal3d" target="_blank" rel="noopener"
>Terminal3d&lt;/a>，是一款用于在终端控制台中查看 3d .obj 文件的工具。&lt;/p>
&lt;p>特性：&lt;/p>
&lt;ol>
&lt;li>读取 .obj 文件并将其呈现到终端。&lt;/li>
&lt;li>使用 盲文 （⡟） 和 块 （▛） 字符进行渲染。&lt;/li>
&lt;li>在线框和顶点模式之间进行选择。&lt;/li>
&lt;li>支持鼠标控制场景相机。 ​​​&lt;/li>
&lt;/ol>
&lt;h3 id="端到端实时语音翻译系统">端到端实时语音翻译系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-108-%E6%9C%9F/2024-11-26-09-37-52.png"
width="534"
height="266"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>
&lt;a class="link" href="https://github.com/nethermanpro/transvip" target="_blank" rel="noopener"
>TransVIP&lt;/a>，上海交大和微软开源的一款端到端的语音到语音翻译系统，它可以保持原声特征、保持源语音和目标语音时长同步。&lt;/p>
&lt;p>它的声音特点和说话的节奏感保持的非常不错，比较自然流畅，时长控制的也比较精确，很适合做视频配音、跨语言直播或实时语音翻译。&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ul>
&lt;li>直接从源语音到目标语音，无需中间步骤，处理延迟低&lt;/li>
&lt;li>源语音和目标语音时长保持一致，可以避免口型不同步问题&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 107 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/</link><pubDate>Tue, 19 Nov 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-39-45.png" alt="Featured image of post 机器文摘 第 107 期" />&lt;h1 id="机器文摘-第-107-期">机器文摘 第 107 期
&lt;/h1>&lt;h3 id="用linux自带命令做一个数据库">用Linux自带命令做一个数据库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-38-23.png"
width="690"
height="716"
loading="lazy"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="231px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.howtogeek.com/build-a-database-with-powerful-linux-built-in-tools/" target="_blank" rel="noopener"
>用Linux自带命令做一个数据库&lt;/a>。&lt;/p>
&lt;p>本文向读者揭示了Linux文本文件处理的奥秘，展示了如何将普通的文本文件转变为一个功能完备的数据库。&lt;/p>
&lt;p>全部工具所使用的都是 Linux 内置的命令工具，包括对文本文件进行搜索（grep）、提取（cut）、复杂处理（awk）、排序（sort）、分页（head和tail）以及合并（join）等操作命令。&lt;/p>
&lt;p>作者通过构建一个简单的待办事项应用数据库的例子，逐步引导读者如何使用这些工具。&lt;/p>
&lt;p>内容包括：&lt;/p>
&lt;ol>
&lt;li>如何创建表（以DSV格式的平面文件）&lt;/li>
&lt;li>如何插入新数据&lt;/li>
&lt;li>如何查询整个表，如何仅选择特定的列，以及如何根据条件过滤行。&lt;/li>
&lt;li>如何对结果进行排序和分页，以及如何实现表之间的关联。&lt;/li>
&lt;/ol>
&lt;p>作者最终将一个复杂的SQL查询转换为一系列Linux命令行操作，展示了Linux工具的强大能力，也证明了即使在没有传统数据库管理系统的情况下，也能够实现高效的数据管理和查询。&lt;/p>
&lt;h3 id="写一个-8-位单片机模拟器但是用-latex-">写一个 8 位单片机模拟器，但是用 LaTeX ？！
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-38-44.png"
width="250"
height="250"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://gitlab.brokenpipe.de/stettberger/avremu/tree/master" target="_blank" rel="noopener"
>avremu&lt;/a>。&lt;/p>
&lt;p>LaTeX 是一个排版系统（写学术论文离不了）。但底层的 TeX 系统是一个强大的宏处理器。&lt;/p>
&lt;p>事实上，TeX 是一种图灵完备的编程语言。TeX 可以计算任何可计算的东西（可计算性是理论计算机科学中的一个概念，因为计算机也不是啥都能计算，比如著名的“停机问题”就搞不定，不过这扯远了）。&lt;/p>
&lt;p>图灵完备意味着，Tex 可以给任何编程语言编写合适的解释器（理论上）。&lt;/p>
&lt;p>于是就有蛋疼之人挑战了一把，用 Tex 宏编写了一个 8 位单片机的模拟器（见上述链接）。&lt;/p>
&lt;p>链接里是一个 git 仓库，里面存放了完整的代码。据作者说，他这个模拟器在自己的笔记本电脑上，可以运行达到 2.5KHz。&lt;/p>
&lt;p>配图为作者使用该模拟器运行 44 个小时生成。&lt;/p>
&lt;h3 id="浏览器是如何渲染网页的">浏览器是如何渲染网页的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-39-05.png"
width="644"
height="715"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="216px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://abhisaha.com/blog/exploring-browser-rendering-process/" target="_blank" rel="noopener"
>探索浏览器的渲染过程&lt;/a>，一篇很不错的科普文章，讲述了从键入 URL 地址到你能看到网页内容期间发生了什么事情。&lt;/p>
&lt;p>比较有特点的是，这篇文章在网页里嵌入了交互式的演示动画，充分展示了浏览器所做工作的具体细节。 ​​​&lt;/p>
&lt;h3 id="免费冥想音效网站">免费冥想音效网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-39-17.png"
width="690"
height="536"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="308px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://soundbox.fun/" target="_blank" rel="noopener"
>Sound Box&lt;/a> 是一款专业的免费在线情境音效平台，提供多种自然环境音效以及白噪音，帮助用户打造完美的声音空间。无论是为了专注工作、放松心情，还是助眠解压，都能找到最适合的声音组合。&lt;/p>
&lt;p>除了免费之外，这个网站还有以下特点：&lt;/p>
&lt;ol>
&lt;li>丰富的声音库
&lt;ul>
&lt;li>精选优质环境音效：雨声、海浪、鸟鸣、虫鸣等自然声音&lt;/li>
&lt;li>白噪音与环境音：咖啡厅、火焰、风声等氛围音效&lt;/li>
&lt;li>每个音效都经过专业处理，确保最佳音质&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>专业混音功能
&lt;ul>
&lt;li>支持多声道混音，可同时播放多个音效&lt;/li>
&lt;li>独立音量控制，精确调节每个声道&lt;/li>
&lt;li>智能音量平滑过渡，避免突兀变化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="开源数字人智能对话系统">开源数字人智能对话系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-39-45.png"
width="690"
height="502"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Kedreamix/Linly-Talker" target="_blank" rel="noopener"
>Linly-Talker &lt;/a> 是一个将大型语言模型与视觉模型相结合的智能 A 系统。&lt;/p>
&lt;p>它集成了各种技术，例如 Whisper、Linly、微软语音服务和 SadTalker 会说话的生成系统。&lt;/p>
&lt;p>该系统部署在 Gradio(一个基于 Python 的 Web 应用快速开发框架) 上，允许用户通过提供图像与 A1助手进行交谈。&lt;/p>
&lt;p>用户可以根据自己的喜好进行自由的对话或内容生成。&lt;/p>
&lt;h3 id="开源画布框架">开源画布框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-40-46.png"
width="690"
height="359"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dgmjs/dgmjs" target="_blank" rel="noopener"
>DGM.js&lt;/a>，具有智能形状的开源无限画布，支持智能图形、实时协作、多页面、手绘风格以及导出为图片和 JSON 功能。&lt;/p>
&lt;p>制作网页版绘图（架构图、草图、界面原型）工具。&lt;/p>
&lt;h3 id="开源在线电子表格">开源在线电子表格
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-49-41.png"
width="907"
height="590"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.ironcalc.com/" target="_blank" rel="noopener"
>IronCalc&lt;/a>一款开源电子表格引擎，它能在浏览器中打开，并可以集成到 SaaS 产品和 Web 应用中，甚至能直接嵌入到博客帖子中。&lt;/p>
&lt;p>主要特性如下：&lt;/p>
&lt;ul>
&lt;li>轻量化：用 Rust 编写并在浏览器中运行，无需服务器支持，快速轻量。&lt;/li>
&lt;li>兼容性：支持各种类似Excel 的函数，能处理大部分 Excel 公式。&lt;/li>
&lt;li>开源：在 MIT/Apache 2.0 许可证下可用，允许集成到项目中，根据需求定制。&lt;/li>
&lt;li>可扩展性：支持无 UI 运行，也可嵌入 Python 和 JavaScript 中，灵活适应不同开发需求。&lt;/li>
&lt;li>协作功能：任何人都能在线使用并轻松共享电子表格。&lt;/li>
&lt;/ul>
&lt;h3 id="多智能体人格模拟">多智能体人格模拟
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-51-04.png"
width="1024"
height="1024"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/TinyTroupe" target="_blank" rel="noopener"
>TinyTroupe&lt;/a>，微软推出的一个由 LLM 驱动的多智能体人格模拟工具。&lt;/p>
&lt;p>其最大的特点是可以模拟具有特定性格、兴趣和目标的虚拟人物。&lt;/p>
&lt;p>通过调用 LLM 语言模型，它能够生成逼真的人物行为和互动场景。&lt;/p>
&lt;p>可应用在：广告、软件测试、产品和项目管理等工作场景中，提供接近真实的数据模拟。&lt;/p>
&lt;h3 id="轻量-ocr-工具">轻量 OCR 工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-107-%E6%9C%9F/2024-11-19-09-51-54.png"
width="655"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.npmjs.com/package/llama-ocr" target="_blank" rel="noopener"
>llama-ocr&lt;/a>，核心是调用 LLama3.2 的模型能力，实现 OCR 功能，输入图像（本地或网络），输出markdown格式文本。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 106 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/</link><pubDate>Tue, 12 Nov 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-10-01-17.png" alt="Featured image of post 机器文摘 第 106 期" />&lt;h1 id="机器文摘-第-106-期">机器文摘 第 106 期
&lt;/h1>&lt;h3 id="入侵-ea-的-7-亿个在线账号">入侵 EA 的 7 亿个在线账号
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-56-39.png"
width="690"
height="338"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="489px"
>&lt;/p>
&lt;p>著名游戏公司 EA，最近有研究人员发现可以通过一些“特殊手段”窃取其在线账号里的个人数字资产。&lt;/p>
&lt;p>利用所发现的漏洞，可以将别人账号下的游戏数据挪到自己账号下。&lt;/p>
&lt;p>作者后来将情况反馈给了 EA，现在已经被修复（据作者说这项工作 EA 拖了好几个月时间）。&lt;/p>
&lt;p>&lt;a class="link" href="https://battleda.sh/blog/ea-account-takeover" target="_blank" rel="noopener"
>《黑客入侵 7 亿个 Electronic Arts 帐户》&lt;/a>记录了整个探索发现的过程。&lt;/p>
&lt;p>大意如下：&lt;/p>
&lt;ol>
&lt;li>在EA的开发者环境中，一个安全研究员发现了一些不应该被公开的API文档。通过这些文档，他发现了一个关键的API接口，允许修改用户的身份标识（persona）信息。&lt;/li>
&lt;li>他发现可以利用一个特定的API接口（/identity/pids/{pidId}/personas/{personaId}），通过PUT请求来更新任何用户的persona信息，包括用户名、状态和账户ID。&lt;/li>
&lt;li>研究员测试了这个API接口，成功将自己的Steam账户与另一个EA账户关联，然后断开，证明了API端点的控制能力。&lt;/li>
&lt;li>他进一步发现，通过将其他用户的persona移动到自己的账户下，理论上可以完全控制那个账户，包括用户名和游戏数据。&lt;/li>
&lt;/ol>
&lt;h3 id="3d视频游戏中阴影技术的发展历程">3D视频游戏中阴影技术的发展历程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-56-52.png"
width="508"
height="360"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="338px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://30fps.net/pages/videogame-shadows/" target="_blank" rel="noopener"
>《经典的 3D 电子游戏阴影技术》&lt;/a>，探讨了 3D 视频游戏中阴影技术的发展历程和不同实现方法。&lt;/p>
&lt;p>在现实世界中，单一光源下的阴影并不会因为重叠而变暗，但在游戏里，情况就不同了。&lt;/p>
&lt;p>在3D游戏中，阴影不仅仅是为了增加真实感，它们还影响着游戏的性能和视觉效果。&lt;/p>
&lt;p>文章介绍了几种不同的阴影技术，比如在角色脚下画一个简单的暗色圆盘（Blob阴影），或者在角色上方渲染一个阴影纹理（平面阴影）。&lt;/p>
&lt;p>这些技术可以让阴影看起来更自然，但也需要在性能和视觉效果之间找到平衡。&lt;/p>
&lt;p>还有一些更高级的技术，比如阴影贴图和模板阴影，这些技术可以让阴影在不同表面上看起来更加真实。&lt;/p>
&lt;p>但这些技术也有它们的问题，可能会出现一些视觉错误，或者需要大量的计算资源。&lt;/p>
&lt;p>随着技术的发展，现代游戏开始使用更复杂的阴影技术，比如光线追踪阴影，这种技术可以模拟出更真实的光影效果，但也需要更多的计算能力。&lt;/p>
&lt;p>有时候，为了游戏的其他方面，比如性能或者艺术风格，开发者可能会选择不使用阴影，或者使用简化的阴影效果。&lt;/p>
&lt;h3 id="微软发布的多智能体系统">微软发布的“多智能体”系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-57-30.png"
width="796"
height="447"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;p>最近基于大模型的“智能体”技术大火，其核心是基于大模型对于自然语言理解和逻辑推理能力，使得计算机可以自主地做一些稍微复杂的事务。&lt;/p>
&lt;p>比如今年新出的高端智能手机大部分都带有基于“智能体”技术的智能助理，比之前 siri 级别的对话助手要强大一些，可以根据语音输入做出复杂任务：如去外卖app帮你下单点一杯咖啡。&lt;/p>
&lt;p>这其中的技术原理基本上就是让大模型基于一些预定规则，扮演具有特定能力的“角色”，分工配合完成任务。&lt;/p>
&lt;p>微软发布的类似贾维斯的通用多代理系统： &lt;a class="link" href="https://www.microsoft.com/en-us/research/articles/magentic-one-a-generalist-multi-agent-system-for-solving-complex-tasks/" target="_blank" rel="noopener"
>Magentic-One&lt;/a> 采用了一个名为 Orchestrator 的首席代理来指导其他四个代理完成任务。&lt;/p>
&lt;p>这些代理分别是 WebSurfer（操作 Chromium 浏览器）、FileSurfer（读取本地文件）、Coder（编写和执行 Python 代码）和 ComputerTerminal（执行程序和安装新的编程库）。&lt;/p>
&lt;p>能够在不修改其核心功能或架构的情况下，在多个挑战性的代理基准上实现竞争性能。&lt;/p>
&lt;p>系统基于 AutoGen 开源框架构建，这使得系统具有模块化和灵活性，并且支持代理的即插即用设计。&lt;/p>
&lt;h3 id="makrdown-电子书工具">Makrdown 电子书工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-57-51.png"
width="690"
height="760"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://rust-lang.github.io/mdBook/" target="_blank" rel="noopener"
>mdBook&lt;/a> 是一个命令行工具，用于使用 Markdown 创建书籍。它非常适合创建产品或 API 文档、教程、课程材料或任何需要干净、易于导航和可自定义的演示文稿的内容。&lt;/p>
&lt;p>特性如下：&lt;/p>
&lt;ol>
&lt;li>轻量级 Markdown 语法可帮助你更专注于内容&lt;/li>
&lt;li>集成 搜索 支持&lt;/li>
&lt;li>为许多不同语言的代码块提供颜色语法高亮显示&lt;/li>
&lt;li>主题 文件允许自定义输出的格式&lt;/li>
&lt;li>预处理器 可以为自定义语法和修改内容提供扩展&lt;/li>
&lt;li>后端 可以将输出渲染为多种格式&lt;/li>
&lt;li>用 Rust 编写，实现速度、安全性和简单性&lt;/li>
&lt;/ol>
&lt;h3 id="网页里的复古电脑">网页里的复古电脑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-58-03.png"
width="690"
height="611"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="271px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pieter.com/" target="_blank" rel="noopener"
>pieter&lt;/a> 是一个运行在网页里的 windows3.1 环境，页面同时模拟了复古计算机的外观（有点儿像上世纪八九十年代的电脑）。让你完全沉浸在老系统的环境里。 ​​​&lt;/p>
&lt;h3 id="语音一体化处理工具">语音一体化处理工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-58-30.png"
width="543"
height="312"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="417px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/abus-aikorea/voice-pro" target="_blank" rel="noopener"
>Voice-Pro&lt;/a>，一款基于 Gradio Web UI 的语音识别、翻译和TTS的语音一体化处理工具，支持实时转录、翻译，一键安装。&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ol>
&lt;li>提供YouTube下载器、噪音去除、字幕、翻译和TTS的集成环境&lt;/li>
&lt;li>支持100种语言的语音识别和字幕创建，可翻译成100多种语言并通过TTS生成语音，可调整TTS语音速度、音量和音调&lt;/li>
&lt;li>原始视频的背景音乐和音效在多语言视频中保持不变&lt;/li>
&lt;li>支持批量处理&lt;/li>
&lt;/ol>
&lt;h3 id="gpu-加速的屏幕截图">GPU 加速的屏幕截图
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-58-47.png"
width="690"
height="382"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Exotik850/cleave" target="_blank" rel="noopener"
>Cleave&lt;/a>，是一个Rust写的轻量级、GPU加速的截图工具。&lt;/p>
&lt;p>使用Rust和WGPU构建，提供流畅的性能和最小的资源占用。主要特点包括GPU加速渲染、交互式屏幕区域选择、键盘控制、直接复制到剪贴板、支持高DPI显示和实时视觉反馈。 ​​​&lt;/p>
&lt;h3 id="在线生成练字字帖">在线生成练字字帖
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-59-03.png"
width="690"
height="458"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.zivip.com/" target="_blank" rel="noopener"
>超级字帖&lt;/a>，字帖生成网站，可以生成汉字（1-6年级的都有）、拼音、英文、数字等六大类字帖。&lt;/p>
&lt;h3 id="微积分电子书">微积分电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-09-59-47.png"
width="543"
height="277"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;/p>
&lt;p>微积分知识，对于AI也很重要了。&lt;/p>
&lt;p>计算损失“梯度”，反向传播，都要用到微积分。&lt;/p>
&lt;p>不过高校学习的高数课本都太枯燥难学了，如果业余时间想复习一下，看课本有些看不进去。&lt;/p>
&lt;p>Wolfram（就是那个做出著名数学软件 Mathematica 的公司） 发布了一本免费电子教科书&lt;a class="link" href="https://wolfram-media.com/products/introduction-to-calculus/" target="_blank" rel="noopener"
>《微积分导论》&lt;/a>。&lt;/p>
&lt;p>这本电子书介绍了微积分的基本概念及其应用，涵盖了微积分 1 的所有内容以及部分微积分 2 的内容。&lt;/p>
&lt;p>书中首先介绍函数和极限，然后是微分学，接着转向积分学，并简要讨论微分方程。&lt;/p>
&lt;p>最后提供了基于 AP 微积分 AB 课程的样本考试的完整解答。&lt;/p>
&lt;p>与书中涵盖的主题相关的视频、练习题、习题和测验，都可以在互动的 Wolfram U 课程&lt;a class="link" href="https://wolframcloud.com/obj/online-courses/introduction-to-calculus/what-is-calculus.html" target="_blank" rel="noopener"
>《微积分导论》&lt;/a>中找到。&lt;/p>
&lt;h3 id="专为音频对话开发的会话音频开源模型">专为音频对话开发的会话音频开源模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-10-00-39.png"
width="699"
height="608"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="275px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Standard-Intelligence/hertz-dev" target="_blank" rel="noopener"
>Hertz-dev&lt;/a>，是由 Standard Intelligence 公司开发的首个会话音频开源模型。hertz-dev 是一个全双工、仅支持音频的 Transformer 基础模型。&lt;/p>
&lt;p>它的主要功能是用于生成对话音频，也就是模拟人类对话的语音生成。支持全双工音频，它可以同时接收和生成音频，就像电话或实时对话一样，不需要等待说完一句话才能回复。&lt;/p>
&lt;p>Hertz-dev 拥有85亿参数，基于2千万小时的高质量音频数据训练，支持单声道和全双工生成选项。模型因使用了真实世界会话音频的超大数据集，能表现人类语音特征，如停顿和情感语调。&lt;/p>
&lt;h3 id="开源个人云电脑">开源个人云电脑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-10-00-54.png"
width="690"
height="511"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/HeyPuter/puter" target="_blank" rel="noopener"
>Puter&lt;/a>，一款开源免费且可一键部署个人云电脑的工具。提供了丰富的功能、极致速度体验，并且可高度个性化定制，打造专属个人云端操作系统。&lt;/p>
&lt;p>具有如下特性：&lt;/p>
&lt;ul>
&lt;li>一站式个人云平台，所有文件、应用和游戏都可以安全保存，随时随地访问；&lt;/li>
&lt;li>可作为 Dropbox、Google Drive、OneDrive 等传统网盘的升级替代，提供更强大的功能；&lt;/li>
&lt;li>支持构建和发布网站、Web 应用程序和游戏，是开发者的得力助手；&lt;/li>
&lt;li>提供完整的远程桌面环境，可用作服务器和工作站；&lt;/li>
&lt;li>支持自行托管，数据完全自主可控，充分保护隐私安全；&lt;/li>
&lt;li>支持多种部署方式，提供 Docker 一键部署方式；&lt;/li>
&lt;li>界面设计简洁美观，操作流畅，轻松上手使用。&lt;/li>
&lt;/ul>
&lt;h3 id="一个可以更改人物表情的工具">一个可以更改人物表情的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-106-%E6%9C%9F/2024-11-12-10-01-17.png"
width="563"
height="277"
loading="lazy"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="487px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jhj0517/AdvancedLivePortrait-WebUI" target="_blank" rel="noopener"
>AdvancedLivePortrait-WebUI&lt;/a>，可以让照片中的人物眨眼、挑眉、嘟嘴，可以用它制作表情包、视频后期制作等。&lt;/p>
&lt;p>特性如下：&lt;/p>
&lt;ol>
&lt;li>可以精确调整，比如单独控制眼睛、眉毛或嘴型&lt;/li>
&lt;li>支持批量处理&lt;/li>
&lt;li>基于Gradio的Web界面工具，可实时预览&lt;/li>
&lt;/ol>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 105 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/</link><pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-43-35.png" alt="Featured image of post 机器文摘 第 105 期" />&lt;h1 id="机器文摘-第-105-期">机器文摘 第 105 期
&lt;/h1>&lt;h3 id="手写一个-git-版本控制系统">手写一个 Git 版本控制系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-36-45.png"
width="305"
height="353"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="207px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/hanyujie2002/wyag-zh" target="_blank" rel="noopener"
>自己动手写 Git&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>本文旨在从基础开始，深入解释 Git 版本控制系统。这听起来并不简单，过去的尝试往往效果不佳。但有一个简单的方法：要理解 Git 的内部机制，只需从头实现一个 Git。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>这不是开玩笑，也并不复杂：如果你仔细阅读这篇文章并编写代码（或者直接 下载代码 压缩包——但我强烈建议你自己动手写代码），你将得到一个名为 wyag 的程序，它实现了 Git 的基本功能：init、add、rm、status、commit、log……而且与 Git 本身兼容，甚至可以说最后添加关于提交部分的记录是由 wyag 本身而不是 Git 创建的 （链接）。所有这一切仅需 988 行简单的 Python 代码。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>那么，Git 真的有那么复杂吗？我认为复杂性是个误解。确实，Git 是一个功能丰富的大型程序，但其核心其实非常简单，表面上的复杂性往往源于其深奥之处（而且 Git 被比作墨西哥卷饼 的讨论可能也没有帮助）。实际上，让 Git 令人困惑的，正是它核心模型的极简与强大。核心的简单性与丰富的应用之间的结合，常常让人难以理解，因为需要一定的思维跳跃才能从基本的简单性中推导出各种应用。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>通过实现 Git，我们将能更清晰地认识其基本原理。&lt;/p>
&lt;/blockquote>
&lt;h3 id="自然语言处理中的-embedding-是什么">自然语言处理中的 Embedding 是什么？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-37-17.png"
width="690"
height="771"
loading="lazy"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="214px"
>&lt;/p>
&lt;p>Embedding 直译过来是嵌入，但实际上这个技术的主要作用是将文本进行向量化（给文本提取多维度特征，用于判断文本之间的关系远近）。&lt;/p>
&lt;p>&lt;a class="link" href="%e7%bd%91%e9%a1%b5%e9%93%be%e6%8e%a5" >《嵌入被低估了》&lt;/a>，这篇文章讨论了机器学习（ML）技术中的嵌入技术对技术写作领域可能产生的影响。&lt;/p>
&lt;p>文章介绍了如何使用嵌入技术，以及它们是如何工作的。例如，使用 Gemini 服务提供商的 API 来生成嵌入向量的结果。&lt;/p>
&lt;p>嵌入技术将文本映射到一个多维空间中，每个维度代表一个特征。通过比较两个嵌入在这个多维空间中的距离，可以确定两个文本在语义上的接近程度。&lt;/p>
&lt;p>作者进行了一个实验，通过 Sphinx 扩展为每个文档生成嵌入，并将结果存储在 embeddings.json 文件中。然后，使用线性代数方法找到每个文档的最近邻，即与当前页面相关的推荐页面。&lt;/p>
&lt;p>实验表明，嵌入技术可能为我们维护文档的能力带来数量级上的提升。&lt;/p>
&lt;h3 id="基于自然语言的数据可视化">基于自然语言的数据可视化
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-37-34.png"
width="3840"
height="1916"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/data-formulator" target="_blank" rel="noopener"
>data-formulator&lt;/a>，微软开源的一个数据可视化AI工具项目：data-formulator，支持用户界面交互和自然语言输入结合的方式，进行数据转换并创建可视化效果。&lt;/p>
&lt;p>能处理图片和混乱文本，专业分析师和普通用户都能用。&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ol>
&lt;li>结合了拖拽操作和自然语言输入，不用写代码；&lt;/li>
&lt;li>可以自动理解数据关系，智能推荐合适的图表类型，能自动转换和清理数据，可以处理复杂的数据计算；&lt;/li>
&lt;li>可以调整图表样式，支持迭代式修改，可以基于现有图表继续优化；&lt;/li>
&lt;li>支持多种图表类型，能处理图片和混乱文本，自动生成数据转换的代码；&lt;/li>
&lt;/ol>
&lt;h3 id="专门绘制神经网络的绘图工具">专门绘制神经网络的绘图工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-38-13.png"
width="1359"
height="812"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/alexlenail/NN-SVG" target="_blank" rel="noopener"
>NN-SVG&lt;/a>，一个参数化生成神经网络（NN）架构图的工具，能帮助科研人员快速画出学术级别的示意图，支持一键导出SVG格式。&lt;/p>
&lt;p>节点层数、数量、颜色、大小等各类属性，都可以自定义设置。支持绘制多种神经网络图，比如：&lt;/p>
&lt;ol>
&lt;li>全连接神经网络（FCNN）；&lt;/li>
&lt;li>卷积神经网络（CNN）；&lt;/li>
&lt;li>深度神经网络，参考 AlexNet 论文的风格；&lt;/li>
&lt;/ol>
&lt;h3 id="纸质文档数字化存档工具">纸质文档数字化存档工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-38-44.png"
width="690"
height="494"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/paperless-ngx/paperless-ngxpaperless-ngx" target="_blank" rel="noopener"
>paperless-ngx&lt;/a>，一个基于 Django 的文档管理系统，可将纸质文档转换成可搜索的在线存档。不同于普通的扫描仪将实体书变为难以检索的图片或 PDF 格式，它通过文档扫描器实现电子化，转化为易于检索的格式。&lt;/p>
&lt;h3 id="免费在线文本转语音">免费在线文本转语音
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-38-53.png"
width="690"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="477px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tts.femoon.top/cn" target="_blank" rel="noopener"
>Azure TTS Web&lt;/a>，支持一次最多转换2000字，生成的声音非常真实、自然，有男性、女性的角色可选，情绪可匹配亲切、愉悦、兴奋、抱歉等。 ​​​&lt;/p>
&lt;h3 id="transformer-可视化">transformer 可视化
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-105-%E6%9C%9F/2024-11-05-09-43-35.png"
width="690"
height="438"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://poloclub.github.io/transformer-explainer/" target="_blank" rel="noopener"
>transformer-explainer&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>Transformers 彻底改变了机器学习，但它们的内部工作原理对许多人来说仍然模糊不清。我们推出了 Transformer Explainer，这是一个互动可视化工具，旨在帮助非专业人士通过 GPT-2 模型了解 Transformers。我们的工具通过整合模型概览并在数学操作和模型结构的不同抽象层次之间平滑过渡，帮助用户理解复杂的 Transformer 概念。
它在用户的浏览器中本地运行一个实时 GPT-2 实例，让用户能够输入自己的内容，并实时观察 Transformer 的内部组件和参数如何协同工作来预测下一个词元。该工具无需安装或特殊硬件，从而扩大了大众对现代生成式 AI 技术的教育途径。&lt;/p>
&lt;/blockquote>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 104 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-21-08.png" alt="Featured image of post 机器文摘 第 104 期" />&lt;h1 id="机器文摘-第-104-期">机器文摘 第 104 期
&lt;/h1>&lt;h3 id="基于比-unreal-更-real-的游戏引擎制作游戏">基于比 Unreal 更 Real 的“游戏引擎”制作游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-19-02.png"
width="690"
height="415"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p>
&lt;p>在游戏界，Unreal Engine 是许多开发者的得力助手，能够制作出十分逼真的游戏场景。&lt;/p>
&lt;p>但是看多了也会腻。&lt;/p>
&lt;p>于是，有位开发者决定&lt;a class="link" href="https://novalis.org/blog/2024-10-18-building-a-game-with-the-real-engine.html" target="_blank" rel="noopener"
>用“Real Engine”——也就是他的双手和一堆材料——来打造一个 Real 游戏&lt;/a>。&lt;/p>
&lt;p>此游戏的开发，不建模、不编写 shader，而是直接动手做模型，拍照，然后像拼图一样在游戏里拼出他的世界。&lt;/p>
&lt;p>在这个过程中，作者遇到了不少挑战，比如光线泄漏、视觉设计问题，还有材质选择的纠结。&lt;/p>
&lt;p>虽然原型只花了几天时间，但他很快意识到，完成整个游戏可能需要他余生的所有周末。&lt;/p>
&lt;p>作者在文中也解释了为什么他没有选择 Blender 或 AI 生成艺术，因为他想要的是独一无二的真实感（全部来自实拍！）。&lt;/p>
&lt;p>他甚至自制了一个基于 Raspberry Pi 的相机系统，用来拍摄那些精心制作的模型，确保每个细节都能在游戏中完美呈现。&lt;/p>
&lt;p>手工侠坚持不用现成的模型家具和3D打印件，因为他不想让游戏看起来像是宜家的样板间。&lt;/p>
&lt;p>他用定格技术制作动画，虽然他承认自己的作品和专业动画师还有差距，但至少游戏作品不会让人在第一关就猜到结局。&lt;/p>
&lt;p>作者乐观预计在2025年或2026年发布他的游戏“High Mountain Abbey”。&lt;/p>
&lt;h3 id="编写属于你自己的虚拟机">编写属于你自己的虚拟机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-19-19.png"
width="690"
height="856"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="193px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.jmeiners.com/lc3-vm/" target="_blank" rel="noopener"
>Write your Own Virtual Machine&lt;/a>，本文指导读者如何编写自己的虚拟机（VM），以运行汇编语言程序。文章提供了一个关于虚拟机的全面介绍，包括其定义、LC-3架构、汇编示例、执行程序、实现指令集、陷阱例程等。最终代码仅约250行C语言。学习要求读者具备基本的C/C++和二进制算术知识。&lt;/p>
&lt;h3 id="开源反恐精英游戏">开源反恐精英游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-19-37.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/solcloud/Counter-Strike" target="_blank" rel="noopener"
>Counter-Strike&lt;/a>，项目提供编译好的客户端可执行文件，以及后端服务代码。&lt;/p>
&lt;p>运行联网游戏需要自行搭建服务。 ​​​&lt;/p>
&lt;h3 id="手机投屏电脑工具">手机投屏电脑工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-20-00.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/barry-ran/QtScrcpy" target="_blank" rel="noopener"
>QtScrcpy&lt;/a>，支持通过 USB 或 WIFI 一键连接 Android 设备到电脑，实现屏幕显示和控制，无需 root 权限。&lt;/p>
&lt;p>提供了丰富功能，包括实时屏幕显示、键鼠控制、屏幕录制、截图、批量操作、文件传输、剪贴板同步等。&lt;/p>
&lt;p>支持 GNU/Linux、Windows 和 macOS 主流平台，提供高性能、高质量、低延迟和快速启动的使用体验。&lt;/p>
&lt;h3 id="架构图但是-3d-的">架构图，但是 3D 的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-20-23.png"
width="690"
height="499"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://icraft.gantcloud.com/" target="_blank" rel="noopener"
>icraft&lt;/a>，一个绘制 3D 架构图的工具。&lt;/p>
&lt;p>iCraft Editor 是一款免费的3D架构图绘制工具，用来绘制3D架构图，采用真实3D场景展现架构图、网络拓扑图、其他3D结构图，绘制AWS|GCP|Azure|AliCloud架构图，将您的AWS|GCP|Azure|AliCloud环境可视化为等距架构图, 可旋转视角、嵌套子场景，帮助您轻松绘制出色的3D架构图&lt;/p>
&lt;p>iCraft Editor的主要特点：&lt;/p>
&lt;ol>
&lt;li>可免费在线使用&lt;/li>
&lt;li>真3D场景，可自由切换视角&lt;/li>
&lt;li>可嵌套子场景&lt;/li>
&lt;li>可编辑动画&lt;/li>
&lt;/ol>
&lt;h3 id="pgs-字幕格式详解">PGS 字幕格式详解
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-20-36.png"
width="768"
height="432"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>蓝光里面有个叫 PGS（Presentation Graphic Stream）的字幕格式，是以图片形式存储的字幕，扩展名一般为 .SUP。播放器在播放的时候就是跟着时间轴读取图片然后渲染到画面上。&lt;/p>
&lt;p>这个格式的技术信息，资料较少，&lt;a class="link" href="https://blog.thescorpius.com/index.php/2017/07/15/presentation-graphic-stream-sup-files-bluray-subtitle-format/" target="_blank" rel="noopener"
>这篇文章解析了 PGS 的技术规格&lt;/a>。&lt;/p>
&lt;p>相关开源仓库：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/Sec-ant/BDSupReader" target="_blank" rel="noopener"
>https://github.com/Sec-ant/BDSupReader&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/mjuhasz/BDSup2Sub" target="_blank" rel="noopener"
>https://github.com/mjuhasz/BDSup2Sub&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/xwlcn/BDSupSubPlus" target="_blank" rel="noopener"
>https://github.com/xwlcn/BDSupSubPlus&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/wswartzendruber/PGS4NET" target="_blank" rel="noopener"
>https://github.com/wswartzendruber/PGS4NET&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="开源人形机器人">开源人形机器人
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-21-08.png"
width="756"
height="599"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="302px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.zhiyuan-robot.com/DOCS" target="_blank" rel="noopener"
>智元机器人&lt;/a>，稚晖君创业研发的：智元人形机器人，全套资料全球开源，包括设计图纸和代码。&lt;/p>
&lt;p>灵犀X1全身包含29个关节（R86-2&lt;em>9、R86-3&lt;/em>6、R52&lt;em>10、L28&lt;/em>4）和2个夹爪，支持扩展头部3自由度。&lt;/p>
&lt;p>开发资料包括：BOM清单、整机图纸、装机SOP等。&lt;/p>
&lt;p>从硬件上来看，该机器人使用了一台 i7-13620H 迷你主机作为计算中枢，使用一台 glient MT2500A 有线路由器作为网络中枢。&lt;/p>
&lt;p>有趣的是，在物料清单上，有些电子料和成品套件还给出了淘宝链接（上链接！）。&lt;/p>
&lt;h3 id="解析屏幕界面交互的工具">解析屏幕界面交互的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-22-15.png"
width="689"
height="419"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="394px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/OmniParser" target="_blank" rel="noopener"
>OmniParser&lt;/a>，微软开源的一款可以解析和识别屏幕上可交互图标的工具，它能准确的识别出用户界面中的可交互图标，在解析方面优于 GPT-4V。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>双重识别能力，能找出界面上所有可以点击的地方，具备语义理解能力，能理解按钮或图标的具体功能&lt;/li>
&lt;li>可以作为插件，与Phi-3.5-V、 Llama-3.2-V以及其他模型结合使用&lt;/li>
&lt;li>支持结构化输出，除了识别屏幕上的元素，还能将这些元素转换成结构化的数据&lt;/li>
&lt;/ul>
&lt;h3 id="端到端情感语音对话模型">端到端情感语音对话模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-23-10.png"
width="827"
height="351"
loading="lazy"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="565px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/THUDM/GLM-4-Voice" target="_blank" rel="noopener"
>GLM-4.Voice&lt;/a>，智谱开源的情感语音模型，一款端到端语音模型，能情感共鸣、支持打断、多语言多方言支持。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>情感表达和情感共鸣：可以模拟不同的情感和语调，高兴、悲伤、生气、害怕等情绪，会用合适的情绪语气回复&lt;/li>
&lt;li>调节语速：可以要求 ta 快点说 or 慢点说&lt;/li>
&lt;li>随时打断：可以根据实时的指令，调整语音输出的内容、风格和情感，支持更灵活的对话互动&lt;/li>
&lt;li>多语言、多方言支持：目前支持中英文语音以及中国各地方言，擅长粤语、重庆话、北京话&lt;/li>
&lt;/ul>
&lt;h3 id="开源视频翻译工具">开源视频翻译工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-104-%E6%9C%9F/2024-10-29-10-23-51.png"
width="1003"
height="392"
loading="lazy"
class="gallery-image"
data-flex-grow="255"
data-flex-basis="614px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Huanshere/VideoLingo" target="_blank" rel="noopener"
>VideoLingo&lt;/a>，是一站式视频翻译本地化配音工具，旨在生成 Netflix 级别的高质量字幕，告别生硬机翻，告别多行字幕，还能加上高质量的配音，让全世界的知识能够跨越语言的障碍共享。通过直观的 Streamlit 网页界面，只需点击两下就能完成从视频链接到内嵌高质量双语字幕甚至带上配音的整个流程，轻松创建 Netflix 品质的本地化视频。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ul>
&lt;li>🎥 使用 yt-dlp 从 Youtube 链接下载视频&lt;/li>
&lt;li>🎙️ 使用 WhisperX 进行单词级时间轴字幕识别&lt;/li>
&lt;li>📝 使用 NLP 和 GPT 根据句意进行字幕分割&lt;/li>
&lt;li>📚 GPT 总结提取术语知识库，上下文连贯翻译&lt;/li>
&lt;li>🔄 三步直译、反思、意译，媲美字幕组精翻效果&lt;/li>
&lt;li>✅ 按照 Netflix 标准检查单行长度，绝无双行字幕&lt;/li>
&lt;li>🗣️ 使用 GPT-SoVITS 等方法对齐配音&lt;/li>
&lt;li>🚀 整合包一键启动，在 streamlit 中一键出片&lt;/li>
&lt;li>📝 详细记录每步操作日志，支持随时中断和恢复进度&lt;/li>
&lt;li>🌐 全面的多语言支持，轻松实现跨语言视频本地化&lt;/li>
&lt;/ul>
&lt;p>VideoLingo 提供 一键简易包 和 源码安装 两种本地安装方式。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 103 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/</link><pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-35-29.png" alt="Featured image of post 机器文摘 第 103 期" />&lt;h1 id="机器文摘-第-103-期">机器文摘 第 103 期
&lt;/h1>&lt;h3 id="制作一个带全息图像的窗户">制作一个带全息图像的窗户
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-31-04.png"
width="609"
height="585"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="249px"
>&lt;/p>
&lt;p>一扇透明的窗户在特定光线下能展现出隐藏的图像，甚至3D全息图？&lt;/p>
&lt;p>文章&lt;a class="link" href="https://mattferraro.dev/posts/caustics-engineering" target="_blank" rel="noopener"
>《Hiding Images in Plain Sight: The Physics Of Magic Windows》&lt;/a>讲述了如何制作一个具有魔力的透明亚克力窗户。&lt;/p>
&lt;p>这个窗户在正常情况下看起来是完全透明的，但当你用手电筒照射或在阳光下时，它能形成图像或3D全息图。&lt;/p>
&lt;p>实现这个魔法背后的物理原理是光的折射和一种称为“焦散”的现象。&lt;/p>
&lt;p>焦散是当光线照射到透明物体时形成的明亮光斑。&lt;/p>
&lt;p>即使是物体表面微小的不平整也能形成强大的透镜效果，产生强烈的焦散图案。&lt;/p>
&lt;p>作者通过精确控制亚克力表面的形状（通过控制表面的凹凸），使得折射的光线能够形成焦散图像。他将这个过程比作传统的凸透镜，通过调整透镜的曲率来控制光线的汇聚或发散，从而影响图像的亮度。&lt;/p>
&lt;p>作者在文中详细介绍了如何通过数学建模和计算来设计这样的窗户。首先，他将问题公式化，然后通过迭代方法逐步求解。&lt;/p>
&lt;p>使用类似于计算流体动力学的方法，通过定义一个“速度势”来模拟光线压力的分布，并通过求解泊松方程来找到所需的表面形状。&lt;/p>
&lt;p>文末提供了相关代码和设计文件。&lt;/p>
&lt;h3 id="使用-pytorch-从零开始构建大型语言模型">使用 Pytorch 从零开始构建大型语言模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-31-46.png"
width="643"
height="270"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="571px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://medium.com/@msouza.os/llm-from-scratch-with-pytorch-9f21808c6319" target="_blank" rel="noopener"
>《LLM from scratch with Pytorch》&lt;/a>，作者 Matheus Oliveira De Souza，介绍了如何使用 Pytorch 从零开始构建大型语言模型（LLM）。&lt;/p>
&lt;p>文章先解释了生成模型和LLM的基本概念，然后逐步介绍了模型的各个组成部分，包括Tokenization、Embedding层、Transformer架构以及Attention机制。&lt;/p>
&lt;p>作者分享了自己使用 Pytorch 实现 Medium 文章生成器的经历，包括数据集准备、模型训练和测试。&lt;/p>
&lt;p>文章还探讨了使用预训练的 GPT-2 嵌入层来加速训练过程。&lt;/p>
&lt;h3 id="基于编程的物理教程">基于编程的物理教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-32-10.png"
width="738"
height="521"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://matthias-research.github.io/pages/tenMinutePhysics/index.html" target="_blank" rel="noopener"
>十分钟物理&lt;/a>，教你用 JavaScript 模拟物理现象，如火焰、弹球碰撞、欧拉流体等很多内容。&lt;/p>
&lt;p>每则教程配有详细的笔记、代码、demo和教学视频。 ​​​&lt;/p>
&lt;h3 id="教你如何编写游戏模拟器">教你如何编写游戏模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-32-47.png"
width="337"
height="721"
loading="lazy"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="112px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.emulator101.com/" target="_blank" rel="noopener"
>Emulator 101&lt;/a>，该教程以C语言为基础，适合想要深入了解CPU工作原理的学习者。&lt;/p>
&lt;p>教程指导读者一步步编写一个模拟 Space Invaders 游戏的 8080 CPU 仿真器，通过实际操作帮助理解 CPU 的工作原理和汇编语言。&lt;/p>
&lt;p>除了基础的编程知识，还涵盖了二进制和十六进制的介绍、CPU的快速入门、逻辑操作、汇编语言、堆栈等内容。此外，还提供了针对不同平台（如Mac OS X、iOS）的模拟器移植指南。&lt;/p>
&lt;h3 id="效果极好的-tts文本合成语音">效果极好的 TTS(文本合成语音)
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-33-22.png"
width="537"
height="297"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SWivid/F5-TTS" target="_blank" rel="noopener"
>F5-TTS&lt;/a>&lt;/p>
&lt;ol>
&lt;li>零样本声音克隆，生成的语音自然且富有表现力&lt;/li>
&lt;li>推理实时率达到0.15，优于现有基于扩散的TTS模型&lt;/li>
&lt;li>支持控制语音速度，并保持声音自然&lt;/li>
&lt;li>支持无缝在不同语言/方言间平滑过渡&lt;/li>
&lt;/ol>
&lt;h3 id="一款开源免费的远程会话管理工具">一款开源免费的远程会话管理工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-33-44.png"
width="690"
height="648"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/1Remote/1Remote" target="_blank" rel="noopener"
>1Remote&lt;/a>，能够让你在任何时候快速开启一个远程会话，支持微软远程桌面(RDP)、VNC、SSH、Telnet、SFTP, FTP, RemoteApp 等协议。&lt;/p>
&lt;p>具有如下特性：&lt;/p>
&lt;ul>
&lt;li>多协议支持：支持 RDP, SSH, VNC, Telnet, (S)FTP, RemoteApp 等协议，颇为全面；&lt;/li>
&lt;li>快速启动：可通过 Alt + M 快速启动远程会话，支持拼音检索汉字；&lt;/li>
&lt;li>多显示器支持：提供了出色的 RDP 多显示器远程管理体验；&lt;/li>
&lt;li>细节配置：可以为每个连接设置 标签、图标、连接前后执行脚本等；&lt;/li>
&lt;li>界面定制：支持多语言和多主题切换，还可以根据个人喜好调整界面布局；&lt;/li>
&lt;li>可自定义启动器，在 sFTP、VNC 等协议中，用自己喜欢的程序来替换内置程序；&lt;/li>
&lt;li>开箱即用： Exe 版本下载解包即可，不需要执行任何安装操作。&lt;/li>
&lt;/ul>
&lt;h3 id="一个全能离线-ocr-桌面工具">一个全能离线 OCR 桌面工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-34-06.png"
width="690"
height="592"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="279px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/xushengfeng/eSearch" target="_blank" rel="noopener"
>eSearch&lt;/a>，截屏 离线OCR 搜索翻译 以图搜图 贴图 录屏 万向滚动截屏 屏幕翻译 。&lt;/p>
&lt;p>作者自荐：&amp;gt; eSearch 是Information-portal的:electron:重写版(顺便加了亿些功能)&lt;/p>
&lt;blockquote>
&lt;p>主要是想在 Linux 上(win 和 mac 上也能用)实现锤子大爆炸或小米传送门这样的屏幕搜索功能，当然也是一款方便的截屏软件。
经过数次版本迭代，eSearch 的功能愈加丰富
即拥有 截屏+OCR+搜索+翻译+贴图+屏幕翻译+以图搜图+滚动截屏+录屏&lt;/p>
&lt;/blockquote>
&lt;h3 id="开源虚拟数字人">开源虚拟数字人
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-103-%E6%9C%9F/2024-10-22-09-35-29.png"
width="292"
height="435"
loading="lazy"
class="gallery-image"
data-flex-grow="67"
data-flex-basis="161px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/yakami129/VirtualWife" target="_blank" rel="noopener"
>Virtualwife&lt;/a>，是一个创新的虚拟数字人项目，专注于开发具有 AI 的虚拟角色。&lt;/p>
&lt;p>角色设计用于在B站等直播平台上进行互动，提供娱乐和信息。&lt;/p>
&lt;p>通过集成先进的 AI 技术，如自然语言处理和机器学习，Virtualwife 的角色能理解和响应用户输入，提供更加自然和智能的交流体验。&lt;/p>
&lt;p>Virtualwife 基于 OpenAI 等 AI 研究机构的技术增强虚拟角色的能力。&lt;/p>
&lt;blockquote>
&lt;p>VirtualWife是一个虚拟数字人项目，项目还处于孵化阶段，有很多需要优化的地方，作者想打造一个拥有自己“灵魂”的虚拟数字人，你可以像朋友一样和她相识，作者希望虚拟数字人融入人类生活，作为恋爱导师，心理咨询师，解决人类的情感需求。&lt;/p>
&lt;/blockquote>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 102 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/</link><pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-50-31.png" alt="Featured image of post 机器文摘 第 102 期" />&lt;h1 id="机器文摘-第-102-期">机器文摘 第 102 期
&lt;/h1>&lt;h3 id="上海交通大学的大模型课程">上海交通大学的大模型课程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-49-30.png"
width="690"
height="2077"
loading="lazy"
class="gallery-image"
data-flex-grow="33"
data-flex-basis="79px"
>&lt;/p>
&lt;p>LLM 大语言模型技术已经引发了技术革命，对自然语言处理、机器翻译、自动文本生成等领域产生了深远影响。&lt;/p>
&lt;p>&lt;a class="link" href="https://gair-nlp.github.io/cs2916/docs/intro/" target="_blank" rel="noopener"
>这个来自上海交大的课程（号称国内首个 LLM 课程）&lt;/a>，将帮助学生理解这一革命的本质、历史和未来发展，为他们在相关领域的工作做好准备。&lt;/p>
&lt;p>每个章节都可以下载课件并给出了推荐阅读材料。&lt;/p>
&lt;h3 id="一份从中级到高级的-ai-学习路径">一份从中级到高级的 AI 学习路径
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-50-31.png"
width="690"
height="690"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/hesamsheikh/ml-retreat" target="_blank" rel="noopener"
>ML Retreat&lt;/a>，来自国外一名技术博主分享，记录了其在学习高级机器学习时的个人笔记和资源，涵盖了从基础到更高级主题的深入理解。&lt;/p>
&lt;p>目前已分享如何从头构建大语言模型、LLM 幻觉深入研究以及 LLM 超越注意力机制等相关笔记。&lt;/p>
&lt;h3 id="实现一个-256kb-的迷你文件系统">实现一个 256KB 的迷你文件系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-51-02.png"
width="690"
height="189"
loading="lazy"
class="gallery-image"
data-flex-grow="365"
data-flex-basis="876px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.qtmuniao.com/2024/02/28/mini-filesystem/" target="_blank" rel="noopener"
>螺蛳壳里做道场：实现一个 256KB 的迷你文件系统&lt;/a>，提供了一个迷你文件系统的实现示例，涵盖了文件系统的多个关键组成部分，包括数据结构、读写流程、目录组织和空闲空间管理。通过这个简单的模型，读者可以对文件系统的工作原理有一个直观的理解。&lt;/p>
&lt;blockquote>
&lt;p>本文主要 “编译” 自书籍&lt;a class="link" href="https://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="noopener"
>《Operating Systems: Three Easy Pieces》&lt;/a>第 40 章，这是一本非常深入浅出的书，推荐给所有对操作系统感到迷茫的同学。本文件系统基于一个非常小的硬盘空间，以数据结构和读写流程为主线，从零到一的推导出各个基本环节，可以帮你快速建立起对文件系统的直觉。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>文件系统基本都是构建于块存储之上的。但当然，现在的一些分布式文件系统，如 JuiceFS，底层是基于对象存储的。但无论块存储还是对象存储，其本质都是按 “数据块” 进行寻址和数据交换的。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我们首先会探讨一个完整的文件系统在硬盘上的数据结构，也即布局；然后再通过打开关闭、读写流程将各个子模块串起来，从而完成对一个文件系统要点的覆盖。&lt;/p>
&lt;/blockquote>
&lt;h3 id="开局一张图剩下全靠编">开局一张图，剩下全靠编？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-51-36.png"
width="770"
height="552"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="334px"
>&lt;/p>
&lt;p>日内瓦大学等机构研究的强化学习智能体——&lt;a class="link" href="https://diamond-wm.github.io/" target="_blank" rel="noopener"
>DIAMOND世界模型（World model）&lt;/a>，做到了。&lt;/p>
&lt;p>这个项目验证了一种新的图形技术：不使用传统游戏渲染技术，而是通过模型预测，实时生成游戏的视频帧。&lt;/p>
&lt;p>也就是说，用户通过鼠标键盘进行输入，模型便会根据用户的操作生成下一帧视频。&lt;/p>
&lt;p>基本原理：&lt;/p>
&lt;ol>
&lt;li>扩散模型：核心模块，通过逆向学习噪声过程来生成高质量的视觉数据。输入过去的观察与动作数据，模型可以预测未来的画面、奖励和任务是否终止。&lt;/li>
&lt;li>奖励模型：使智能体能够评估其行为，并通过这些评估优化决策能力。奖励信号是强化学习系统中至关重要的一环，驱动智能体不断改进其策略。&lt;/li>
&lt;li>终止模型：该模型能帮助智能体识别任务何时结束，或者需要重新开始。例如在自动驾驶中，智能体需要知道自己何时到达目的地。&lt;/li>
&lt;/ol>
&lt;h3 id="python-图形库">Python 图形库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-52-48.png"
width="964"
height="776"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/panda3d/panda3d" target="_blank" rel="noopener"
>Panda3D&lt;/a>，一个开源、跨平台的游戏引擎，专为开发实时 3D 图形应用程序而设计。它由迪士尼和卡内基梅隆大学共同开发，提供了丰富的功能和灵活的 API，使开发者能够快速构建复杂的 3D 应用程序和游戏。Panda3D 支持 Python 和 C++ 编程语言，适合不同层次的开发者使用。&lt;/p>
&lt;h3 id="机器人算法实践">机器人算法实践
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-53-18.png"
width="853"
height="1000"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="204px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/carlos-argueta/rse_prob_robotics" target="_blank" rel="noopener"
>机器人算法实践&lt;/a>，基于《概率机器人学》书中的机器人算法在 &lt;a class="link" href="http://dev.ros2.fishros.com/doc/" target="_blank" rel="noopener"
>ROS 2&lt;/a>（用于构建机器人的第二代机器人操作系统，其包含了大量的机器人相关软件库和工具集。） 上的实现，旨在通过 Python 和 C++ 代码，将书中的理论与现实世界中的机器人应用相结合，实现快速原型开发和深入理解。&lt;/p>
&lt;h3 id="开源搜索引擎">开源搜索引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-54-20.png"
width="886"
height="736"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/KoriIku/luxirty-search" target="_blank" rel="noopener"
>Luxirty Search&lt;/a>，基于 Google，屏蔽内容农场，具有无广告、无跟踪、干净、简洁，快等特点。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ol>
&lt;li>内置内容农场屏蔽，包括 CSDN 等 SEO 站点和 Stack Overflow 中文翻译站。&lt;/li>
&lt;li>一键提升 GitHub、Stack Overflow、V2EX、博客园搜索权重，无需手动输入 site:。&lt;/li>
&lt;li>一键搜索 v2ex、Raddit。&lt;/li>
&lt;li>内置广告屏蔽、跟踪链接移除。&lt;/li>
&lt;/ol>
&lt;h3 id="高性能开源-ocr-工具">高性能开源 OCR 工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-55-10.png"
width="699"
height="316"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="530px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/VikParuchuri/surya" target="_blank" rel="noopener"
>Surya&lt;/a>，超强的开源 OCR 工具，新版本使用了新的架构，性能优于当前的SoTA开源模型 Table Transformer。&lt;/p>
&lt;p>功能特性：&lt;/p>
&lt;ol>
&lt;li>识别表格行、列和单元格和具体的字符。&lt;/li>
&lt;li>识别复杂的布局（标题、图像等等）和旋转的表格。&lt;/li>
&lt;li>支持包括中文在内的90多种语言。&lt;/li>
&lt;li>可在本地运行，提供API。&lt;/li>
&lt;/ol>
&lt;h3 id="极简-gif-录制工具">极简 GIF 录制工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-102-%E6%9C%9F/2024-10-15-09-55-32.png"
width="813"
height="423"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cockos.com/licecap" target="_blank" rel="noopener"
>LICEcap&lt;/a>，一个十分简洁的 GIF 录制工具，软件体积仅几百 KB，录制生成的 GIF 品质优异，生成的文件体积也很小。支持 Windows 和 Mac 平台。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 101 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/</link><pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/2024-10-08-10-11-47.png" alt="Featured image of post 机器文摘 第 101 期" />&lt;h1 id="机器文摘-第-101-期">机器文摘 第 101 期
&lt;/h1>&lt;h3 id="用点阵打印机给自己每天打一份日报">用点阵打印机给自己每天打一份日报
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/2024-10-08-10-08-34.png"
width="700"
height="551"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="304px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://aschmelyun.com/blog/getting-my-daily-news-from-a-dot-matrix-printer/" target="_blank" rel="noopener"
>《打印日报》&lt;/a>，这篇文章讲述了作者如何利用点阵打印机来获取每日新闻的经历。&lt;/p>
&lt;p>作者原本习惯于每天早上通过手机浏览新闻和社交媒体，了解外界发生的事情。&lt;/p>
&lt;p>然而，碎片化信息的严重过载，使他决定减少屏幕使用时间。&lt;/p>
&lt;p>尽管如此，他还是希望在早晨起床后能够及时获取信息。&lt;/p>
&lt;p>为了实现这个目标，作者从eBay上购买了一台点阵打印机，并计划每天打印出一份定制的“日报”来阅读。&lt;/p>
&lt;p>文章详细描述了他如何搭建这个系统：&lt;/p>
&lt;h4 id="硬件配置">硬件配置
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>点阵打印机&lt;/strong>：一台 Star NP-10 型号的打印机。&lt;/li>
&lt;li>&lt;strong>Raspberry Pi Zero W&lt;/strong>：用于连接打印机并处理数据。&lt;/li>
&lt;li>&lt;strong>串口转USB适配器&lt;/strong>：用于将打印机的串行端口转换为 USB 接口，方便连接。&lt;/li>
&lt;li>&lt;strong>电源&lt;/strong>：为打印机和 Raspberry Pi 提供电力。&lt;/li>
&lt;/ul>
&lt;h4 id="数据内容">数据内容
&lt;/h4>&lt;p>作者希望“日报”包含四个部分：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>天气&lt;/strong>：提供当天的天气情况。&lt;/li>
&lt;li>&lt;strong>股票&lt;/strong>：展示股票市场的动态。&lt;/li>
&lt;li>&lt;strong>新闻头条&lt;/strong>：主要新闻的摘要。&lt;/li>
&lt;li>&lt;strong>Reddit热门帖子&lt;/strong>：Reddit上受欢迎的帖子。&lt;/li>
&lt;/ol>
&lt;p>他通过免费的公共API获取这些信息。&lt;/p>
&lt;h4 id="自动化打印">自动化打印
&lt;/h4>&lt;p>作者通过设置定时任务，使得打印机每天早上8点左右自动打印出他的个性化“日报”。&lt;/p>
&lt;p>效果比较令作者满意，这种有限的信息量，通过一张纸呈现的方式，比在网站和社交媒体应用上无休止地滚动浏览要好得多。&lt;/p>
&lt;p>发挥一点儿创意，将旧技术与现代技术相结合，有时候可以创造出既有趣又实用的解决方案。&lt;/p>
&lt;h3 id="用一个打火机来获取-root-权限">用一个打火机来获取 root 权限？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/2024-10-08-10-09-02.png"
width="595"
height="784"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="182px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.da.vidbuchanan.co.uk/blog/dram-emfi.html" target="_blank" rel="noopener"
>《你能只用一个打火机获得root权限吗？》&lt;/a>，文章探讨了通过硬件故障注入（EMFI）来实现黑客攻击的可能性。&lt;/p>
&lt;p>要编写一个漏洞利用程序，首先需要一个漏洞。如果没有现成的漏洞，就需要创造性地使用故障注入技术。&lt;/p>
&lt;p>注入可以采取多种形式，包括软件控制的数据损坏、电源故障、时钟故障、电磁脉冲、激光等。（我记得 Xbox360 游戏机的硬件破解就是针对 CPU 发送合适的电击脉冲，从而导致某些保护指令失效）&lt;/p>
&lt;p>硬件故障注入通常需要专门的（且昂贵的）设备，因为需要在故障注入的时机和位置方面具有高度的精确性。&lt;/p>
&lt;p>作者之前了解到使用压电点火器和电感器作为电磁故障注入（EMFI）的低成本工具，并成功利用DFA攻击了运行在Arduino上的AES软件实现。但作者并不满足于此，他想要利用更“真实”的目标。&lt;/p>
&lt;p>作者选择了一台2011年生产的三星S3520笔记本电脑作为测试对象，配备有 Intel i3-2310M CPU和 1GB DDR3 RAM。&lt;/p>
&lt;p>这台电脑足够新，可以运行轻量级的桌面Linux发行版（作者选择了Arch Linux），但又足够老旧，即使变砖也不会太担心。&lt;/p>
&lt;p>他计划通过在这些数据传输引脚上注入故障来实现攻击（作者认为笔记本电脑中最易受物理攻击的部分是连接DRAM内存和系统其余部分的DDR总线。）。&lt;/p>
&lt;p>&lt;em>值得注意的是，作者应该是实现了这个目标，但是文章中并未介绍实施攻击的过程，仅仅提供了大概的思路（可能是出于安全性考虑）&lt;/em>&lt;/p>
&lt;h3 id="cuda-编程教程">CUDA 编程教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/2024-10-08-10-11-02.png"
width="690"
height="278"
loading="lazy"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="595px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/srush/GPU-Puzzles" target="_blank" rel="noopener"
>GPU-Puzzles&lt;/a>，GPU 拼图，一套通过实践学习 CUDA 编程的教程。&lt;/p>
&lt;p>课程采用 Python 笔记本的方式进行教学，可以下载自己的副本在具有 GPU 的环境中执行，也可直接使用在线的免费环境（如 Colab）进行执行。 ​​​&lt;/p>
&lt;h3 id="数学动画库">数学动画库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/2024-10-08-10-11-32.png"
width="525"
height="268"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="470px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ManimCommunity/manim" target="_blank" rel="noopener"
>Manim&lt;/a>，一个可以用于创建数学动画的开源工具。&lt;/p>
&lt;p>可以通过动画的方式精确的展示数学概念和过程。&lt;/p>
&lt;p>支持生成各种数学图形和动画，几何图形变换、函数图像绘制、微积分概念演示等。&lt;/p>
&lt;h3 id="高颜值浏览器主页插件">高颜值浏览器主页插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-101-%E6%9C%9F/2024-10-08-10-11-47.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>
&lt;a class="link" href="https://github.com/XengShi/materialYouNewTab" target="_blank" rel="noopener"
>materialYouNewTab&lt;/a>，一款颜值颇高的浏览器主页插件，采用 Google Material You 的设计风格，提供了自定义搜索引擎、自定义快捷网站图标、主题切换等多种功能。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 100 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/</link><pubDate>Tue, 24 Sep 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-09-55-05.png" alt="Featured image of post 机器文摘 第 100 期" />&lt;h1 id="机器文摘-第-100-期">机器文摘 第 100 期
&lt;/h1>&lt;h3 id="基于-nfc-的电影点播系统">基于 NFC 的电影点播系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-09-55-05.png"
width="690"
height="509"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>HN 上一个很有爱的家长，写了一篇&lt;a class="link" href="https://simplyexplained.com/blog/how-i-built-an-nfc-movie-library-for-my-kids/" target="_blank" rel="noopener"
>《我是如何为我的孩子构建一个 NFC 电影库的》&lt;/a>，记录了他的一个爱心创意。&lt;/p>
&lt;p>为了让孩子们看电影方便，作者自己动手做了一个可以识别 NFC 卡片的电影播放系统，孩子们拿着实体卡放在读卡器上即可实现对应影片的播放。&lt;/p>
&lt;p>之所以做这一一个系统，是因为作者感觉拿着遥控器在电视上选来选去，太缺乏仪式感了。&lt;/p>
&lt;p>他想让孩子体验自己在童年时跟小伙伴一起挑选 VHS 录像带，并将其放入播放器的那种兴奋感觉。&lt;/p>
&lt;p>但是现在像 VHS 这种老旧的播放系统早已被淘汰，于是作者一拍脑袋想到了这个新旧融合的点子。&lt;/p>
&lt;p>作者使用了包括一个 ESP32 开发板在内的硬件组合，零件成本大约 25 欧元。&lt;/p>
&lt;p>以及自己动手写了一些控制用的代码。&lt;/p>
&lt;p>文章记录了整个制作过程，并开源了所用到的图纸和代码。&lt;/p>
&lt;h3 id="windows-shell-推荐">Windows shell 推荐
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-09-55-20.png"
width="653"
height="370"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>除了 CMD.EXE、PowerShell 以及 WSL，在 Windows 使用命令行还有另外一种选择&lt;/p>
&lt;p>&lt;a class="link" href="https://www.ii.com/git-bash-is-my-preferred-windows-shell/" target="_blank" rel="noopener"
>《我最推荐的 windows shell》&lt;/a>，这篇文章是关于作者为什么喜欢在 Windows 系统中使用 Git Bash 作为命令行工具的个人体验分享。&lt;/p>
&lt;p>Git Bash 是在 Win 系统中安装 Git 时自带的一个 shell，本意在方便用户以 bash 的习惯在 Win 下使用命令行。&lt;/p>
&lt;p>作者在文中列举了一些 Win 平台下可用的命令行 shell，并详细介绍了 Git Bash 的特点，以及为什么最终选用它作为日常操作的 shell。&lt;/p>
&lt;p>主要原因：&lt;/p>
&lt;ol>
&lt;li>喜欢用 Bash，有多年的使用习惯，和对大量常用命令的依赖（比如 less、awk、cat 等）。&lt;/li>
&lt;li>容易安装，随 Git 的安装就带着了。&lt;/li>
&lt;li>与 Win 资源管理器完美整合（带有右键菜单：Git Bash Here）。&lt;/li>
&lt;li>直接使用 Windows 本身的环境变量（这点儿与 WSL 不同）。&lt;/li>
&lt;li>原生支持 UTF-8 编码。&lt;/li>
&lt;/ol>
&lt;p>文中还分享了一些定制化技巧以及一些使用上的 tips ，值得收藏。&lt;/p>
&lt;h3 id="星系可视化">星系可视化
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-09-55-38.png"
width="637"
height="361"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Avicted/galaxy_visualization_raylib" target="_blank" rel="noopener"
>Galaxy Visualization 星系可视化&lt;/a> 是一个的数据可视化任务项目，它通过蓝色展示100,000个真实星系和红色展示100,000个随机分布的星系，为我们提供了一个直观的宇宙结构视图。&lt;/p>
&lt;p>这个项目是 &lt;a class="link" href="https://studiehandboken.abo.fi/en/course/IT00CG19/19162?period=2024-2027" target="_blank" rel="noopener"
>Åbo Akademi 大学 GPU 编程课程&lt;/a> 的一部分，该课程专注于教授 CUDA 并行编程技术。&lt;/p>
&lt;p>学生们面临的挑战是使用 CUDA 技术计算星系间的 100亿个角度，并验证这些星系的分布并非随机，这一任务需要他们利用超级计算机的GPU资源独立完成。&lt;/p>
&lt;p>预期的计算时间仅为大约 3 秒，这不仅考验了学生对CUDA编程的掌握程度，也展示了高性能计算在处理大规模数据集时的潜力。&lt;/p>
&lt;p>项目本身提供的是数据的可视化展示，而非课程作业的具体解决方案，它为学生提供了一个直观的参考，帮助他们更好地理解和探索星系分布的复杂性。&lt;/p>
&lt;p>项目使用 &lt;a class="link" href="https://www.raylib.com/" target="_blank" rel="noopener"
>Raylib&lt;/a> 作为渲染引擎。&lt;/p>
&lt;h3 id="面向高级语言-javascript-rust-c等程序员的汇编语言入门指南">面向高级语言（ JavaScript, Rust, C等）程序员的汇编语言入门指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-09-56-13.png"
width="690"
height="1167"
loading="lazy"
class="gallery-image"
data-flex-grow="59"
data-flex-basis="141px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://shikaan.github.io/assembly/x86/guide/2024/09/08/x86-64-introduction-hello.html" target="_blank" rel="noopener"
>《写给高级语言用户的汇编语言入门指南》&lt;/a>，
本文以，以“Hello, World!”程序为例，介绍了x86-64汇编语言的基础知识。逐步介绍了x86-64汇编语言的特点、指令结构、寄存器使用、数据存储、程序结构和系统调用。 ​​​&lt;/p>
&lt;h3 id="使用纯-c-语言构建-android-应用">使用纯 C 语言构建 Android 应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-10-03-07.png"
width="480"
height="360"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/cnlohr/rawdrawandroid" target="_blank" rel="noopener"
>rawdrawandroid&lt;/a>，是一个开源安卓项目框架模板，提前配置好了使用 C 语言开发构建 Android App 的全部环境。&lt;/p>
&lt;p>这种并非主流做法，作者提供此框架的目的也只是希望避开一些“必须”使用 Java 才能做的事情，证明只使用 C 语言也同样可以做到并且构建的成果占用资源低且效率高。&lt;/p>
&lt;h3 id="机器视觉入门教程">机器视觉入门教程
&lt;/h3>&lt;p>AI 界的 github &lt;a class="link" href="https://huggingface.co/learn/computer-vision-course/unit0/welcome/welcome" target="_blank" rel="noopener"
>huggingface.co 出了一个关于机器视觉的教程&lt;/a>，从入门到实践，内容非常全面，也很有趣味性。&lt;/p>
&lt;h3 id="机器视觉开源工具">机器视觉开源工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-10-04-54.png"
width="690"
height="689"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/roboflow/supervision" target="_blank" rel="noopener"
>supervision&lt;/a>，GitHub 上一个开箱即用的计算机视觉工具，功能非常强大，可用于在图像或视频上绘制指定目标且它完全开源，已有 18.9k star。&lt;/p>
&lt;h3 id="用-github-搭建个人博客的另一种方式">用 Github 搭建个人博客的另一种方式
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-10-05-17.png"
width="532"
height="471"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="271px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.tinymind.me" target="_blank" rel="noopener"
>https://www.tinymind.me&lt;/a>，
授权你的 Github 账号，就可以用它来写你的个人博客和短想法，每条新日记都会立刻同步到你 Github 一个名为&amp;quot;tinymind-blog&amp;quot;的 repo 里。&lt;/p>
&lt;p>这是一个开源产品、没有服务器，只授权公开 repo 的写权限，不会读取 private repo ，只要 Github 不倒闭，你的日记数据就不会丢失。&lt;/p>
&lt;p>原理：
用 Github API 在你的目录下创建一个&amp;quot;tinymind-blog&amp;quot; repo
你的每次提交(blog/thoughts)，都会进行一次 commit ，数据被提交到这个 repo 。
读取最新的 blog/thoughts 数据，然后渲染在网页上。&lt;/p>
&lt;h3 id="一个远程桌面控制软件">一个远程桌面控制软件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-10-15-43.png"
width="684"
height="781"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://gv.163.com" target="_blank" rel="noopener"
>GameViewer&lt;/a>，网易出品的远程控制软件，完全免费，支持 Windows 、macOS 、安卓、iPhone 、iPad 。&lt;/p>
&lt;p>使用简单，打开就知道怎么操作。使用场景包括：远程协助、远程办公、远程游戏，具有超低延迟、流畅稳定、高清高帧、多点触控等特点。&lt;/p>
&lt;h3 id="计算机组成原理开源书籍">计算机组成原理开源书籍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-100-%E6%9C%9F/2024-09-24-10-16-15.png"
width="690"
height="430"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;p>分享一本开源免费可在线阅读的书籍：《计算机体系结构基础》（第三版）。&lt;/p>
&lt;p>由被誉为 “龙芯之父” 的胡伟武老师等一线科研人员编写，共十二章，涵盖指令系统结构、计算机硬件结构、CPU 微结构、并行处理结构、计算机性能分析等主要内容。&lt;/p>
&lt;p>GitHub：https://github.com/foxsen/archbase
在线阅读：https://foxsen.github.io/archbase/index.html&lt;/p>
&lt;p>本书可作为高等学校本科生教材，也适合研究生和计算机技术人员参考阅读。&lt;/p>
&lt;h3 id="关于创造价值">关于创造价值
&lt;/h3>&lt;p>任何工作创造的价值，最终都会转化为刺激产生多巴胺的东西。&lt;/p>
&lt;p>也就是满足人们的需求。&lt;/p>
&lt;p>但最本质的需求还是多巴胺。&lt;/p>
&lt;p>你从事高尚事业，看似与之无关，你只不过提供了中间过程罢了，最终还是一样。&lt;/p>
&lt;p>脱口秀演员比较直接，刚讲完段子，观众就分泌了。&lt;/p>
&lt;p>当然那些从事特殊职业的，可以更直接的让客人分泌。&lt;/p>
&lt;p>所以，你想挣钱，得满足市场需求这不假，但琢磨来琢磨去，发现无非就是围绕怎样让人分泌多巴胺。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 099 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/</link><pubDate>Tue, 10 Sep 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-44-37.png" alt="Featured image of post 机器文摘 第 099 期" />&lt;h1 id="机器文摘-第-099-期">机器文摘 第 099 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="创始人模式">创始人模式
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-43-25.png"
width="545"
height="425"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;p>Paul Graham 写了一篇非常精彩的文章&lt;a class="link" href="https://paulgraham.com/foundermode.html" target="_blank" rel="noopener"
>《创始人模式》&lt;/a>，微博网友&lt;a class="link" href="https://weibo.com/1560906700/Ovi5A5w3m" target="_blank" rel="noopener"
>@阑夕&lt;/a>对此进行了精简版翻译。&lt;/p>
&lt;p>文章精彩，翻译亦精彩。&lt;/p>
&lt;p>摘录部分内容如下：&lt;/p>
&lt;blockquote>
&lt;p>这么说吧，世上有两种不同的模式来经营公司：创始人模式和管理人模式，在今天，即使是硅谷，也存在着某种潜在的共识，认为扩大规模就意味着转向管理人模式。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>据我所知，还没有专门解释创始人模式的书被出版，商学院也不知其存在，所以我们能得到的，只有少数创始人自己过河时摸到的石头。不过，既然我们确定了想找什么，事情就好办多了，我希望再过几年，创始人模式也能像管理人模式一样为人熟知，何况现在其实已经能猜到其中的区别在哪。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>是的，找来优秀的员工，让他们充分发挥，听上去非常有道理，但从一个个创始人的血泪教训来看，这种建议的潜台词就是：雇佣专业的骗子，让他们把公司掏空。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>创始人意识到自己受到了来自两个方向的操纵：有人告诉他们必须像管理人一样经营公司，而当他们这么做了，又会受到来自被他们管理的员工的压力，他们会让创始人相信，在周围的人都不认同你的判断时，你就应该反思是不是自己错了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>比如，乔布斯就为他认为对苹果公司而言最重要的100个人专门组织过一次静修会议，而这100个人并不是按职位级别顺序选出来的，你能想象在一家普通公司需要多大的能力才能推进这样的事情吗？&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="现代与古典的结合在-dos-环境里用-javascript-写交互动画">现代与古典的结合：在 DOS 环境里用 JavaScript 写交互动画
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-44-37.png"
width="638"
height="419"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SuperIlu/DOjS" target="_blank" rel="noopener"
>DOjS&lt;/a>，是一个 JavaScript 编程环境，适用于运行 MS-DOS、 FreeDOS 或任何基于 DOS 的 Windows（如 95、98、ME）的系统。它具有集成的编辑器、图形和声音输出、鼠标/键盘/摇杆输入等功能。&lt;/p>
&lt;p>DOjS 的功能有点儿类似于 Processing（一个多媒体交互开发环境，有 Java 版本和 Javascript 版本）。&lt;/p>
&lt;p>但特点是它确实可以在真正的 DOS 环境下运行，假如你有一台老掉牙的 386 电脑的话，不妨试试这个。&lt;/p>
&lt;h3 id="用-sql-玩俄罗斯方块">用 SQL 玩俄罗斯方块
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-44-50.png"
width="618"
height="586"
loading="lazy"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="253px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/nuno-faria/tetris-sql" target="_blank" rel="noopener"
>tetris-sql&lt;/a>，是一个利用 SQL 语言的图灵完备性来构建一个俄罗斯方块（Tetris）游戏。&lt;/p>
&lt;p>实现原理：&lt;/p>
&lt;ol>
&lt;li>递归公共表表达式 (CTE)：使用 SQL 的递归 CTE 来创建游戏循环，模拟编程语言中的循环结构。&lt;/li>
&lt;li>输出处理：使用 RAISE NOTICE 命令在 PostgreSQL 中输出游戏状态，因为 SQL 标准查询不适用于实时渲染。&lt;/li>
&lt;li>输入处理：通过数据库表接收用户输入，游戏循环通过查询这个表来读取玩家操作。&lt;/li>
&lt;li>游戏状态管理：使用 SQL 表和数组存储游戏状态，如当前得分、游戏板、玩家操作等。&lt;/li>
&lt;li>游戏逻辑：包括方块的移动、旋转、碰撞检测和行消除等逻辑，都通过 SQL 查询和函数实现。&lt;/li>
&lt;li>渲染游戏：将游戏板和方块的状态转换为字符串，以在终端或命令行界面中显示。&lt;/li>
&lt;li>资源消耗：虽然 CPU 使用率低，但内存和磁盘使用量会随着游戏的进行而增加，因为 SQL 查询保留了中间数据。&lt;/li>
&lt;/ol>
&lt;p>SQL 不仅可以用于数据库操作，还能通过创新方法实现复杂的游戏逻辑和算法。&lt;/p>
&lt;h3 id="一个功能强大且高颜值的-markdown-编辑器">一个功能强大且高颜值的 Markdown 编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-45-39.png"
width="815"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="458px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/udecode/plate" target="_blank" rel="noopener"
>Plate&lt;/a>，基于 React 的富文本编辑器框架，提供了 50+ 个插件直接开箱即用，可以无缝与你系统集成，同时还支持组件定制开发。&lt;/p>
&lt;p>UI 响应式设计，支持深浅色主题。&lt;/p>
&lt;h3 id="微软-autogen-的用户界面">微软 AutoGen 的用户界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-46-22.png"
width="939"
height="603"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="373px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/autogen/tree/main/samples/apps/autogen-studio" target="_blank" rel="noopener"
>AutoGen Studio&lt;/a>，提供了一个可视化界面，用户可以通过拖放、点击的方式定义和修改智能体以及工作流程。&lt;/p>
&lt;ol>
&lt;li>定义和修改智能体：支持通过界面定义智能体的属性，包括技能、配置和工作流程。&lt;/li>
&lt;li>创建和管理会话：支持创建会话，与智能体进行交互，并查看结果，包括聊天历史记录、生成的文件和执行时间。&lt;/li>
&lt;li>添加技能：支持为智能体添加技能，以扩展其功能，比如生成图像、查找论文等。&lt;/li>
&lt;li>支持将会话发布到本地库。&lt;/li>
&lt;/ol>
&lt;h3 id="llm-全栈应用框架">LLM 全栈应用框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-46-35.png"
width="690"
height="373"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Mintplex-Labs/anything-llm" target="_blank" rel="noopener"
>AnythingLLM&lt;/a>，这是一个全栈应用程序，可以将任何文档、资源（如网址链接、音频、视频）或内容片段转换为上下文，以便任何大语言模型（LLM）在聊天期间作为参考使用。&lt;/p>
&lt;p>此应用程序允许选择使用哪个LLM或向量数据库，同时支持多用户管理并设置不同权限。&lt;/p>
&lt;p>AnythingLLM 将文档划分为称为 workspaces (工作区)的对象。&lt;/p>
&lt;p>工作区的功能类似于线程，同时增加了文档的容器化。&lt;/p>
&lt;p>工作区可以共享文档，但工作区之间的内容不会互相干扰或污染，因此可以保持每个工作区的上下文清晰。&lt;/p>
&lt;h3 id="nanite-渲染引擎基于-webgpu-的实现">nanite 渲染引擎基于 WebGPU 的实现
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-46-52.png"
width="690"
height="327"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="506px"
>&lt;/p>
&lt;p>黑神话悟空的火爆让虚幻引擎 UE5 受到更广泛的关注，渲染组件 nanite 亦功不可没。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Scthe/nanite-webgpu" target="_blank" rel="noopener"
>nanite-webgpu&lt;/a>，是一个使用 WebGPU 在 Web 浏览器中的 Nanite 实现。&lt;/p>
&lt;p>包括网格 LOD 层次结构、软件光栅化器。基于每个实例和每个网格进行剔除（在这两种情况下都是视锥体和遮挡剔除）。&lt;/p>
&lt;p>支持纹理和逐顶点法线。&lt;/p>
&lt;p>可以使用 Deno 离线工作。&lt;/p>
&lt;h3 id="开源-ai-语音工具箱">开源 AI 语音工具箱
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-099-%E6%9C%9F/2024-09-10-09-47-04.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Spr-Aachen/Easy-Voice-Toolkit" target="_blank" rel="noopener"
>Easy Voice Toolkit&lt;/a>，包括音频处理、语音识别、语音转录、数据集制作和语音合成等多种音频工具，形成了一套完整语音模型训练的工作流。&lt;/p>
&lt;p>各个工具均支持中文、英文和日文三种语言，提供 Windows 开箱即用的安装包，支持本地部署以及 Google Colab 云端部署。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 098 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/</link><pubDate>Tue, 03 Sep 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-55-02.png" alt="Featured image of post 机器文摘 第 098 期" />&lt;h1 id="机器文摘-第-098-期">机器文摘 第 098 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="探索机器学习的本质">探索机器学习的本质
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-55-02.png"
width="690"
height="351"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>尽管我们在工程层面上已经取得了巨大进展，但机器学习的基础原理仍然是一个谜。&lt;/p>
&lt;p>&lt;a class="link" href="https://writings.stephenwolfram.com/2024/08/whats-really-going-on-in-machine-learning-some-minimal-models/" target="_blank" rel="noopener"
>《机器学习中真正发生的事情：一些最小模型》&lt;/a>，一篇来自Stephen Wolfram的最新力作，深入探讨了机器学习的核心奥秘，并通过一系列极简模型揭示了机器学习背后的基本原理。&lt;/p>
&lt;p>此文是对机器学习领域的一次深刻反思，不仅为技术人员提供了新的视角，也为对人工智能未来充满好奇的观察者提供了丰富的思考素材。&lt;/p>
&lt;p>在文中，作者试图通过构建和讲解一些极简模型来揭开这层神秘的面纱。&lt;/p>
&lt;p>文中展示了即使是最简单的模型也能复现机器学习中的复杂现象。&lt;/p>
&lt;p>这些模型的简单性让我们更容易理解机器学习的本质。&lt;/p>
&lt;blockquote>
&lt;p>“我在这里尝试做的是尽可能深入挖掘——并且尽可能地简化事物。我将探索一些极简模型——这些模型，除了其他优点外，更适合于直观化展示。起初，我并不确信这些极简模型是否能够重现我们在机器学习中观察到的现象。但令人惊讶的是，它们似乎确实可以。”&lt;/p>
&lt;/blockquote>
&lt;h3 id="防火墙背后的秘密如何安全地打破规则">防火墙背后的秘密：如何安全地“打破”规则
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-55-22.png"
width="690"
height="400"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.haskellforall.com/2024/08/firewall-rules-not-as-secure-as-you.html" target="_blank" rel="noopener"
>《防火墙可能没你想的那么安全》&lt;/a>，一篇非常有趣且实用的科技文章，可能会颠覆你对网络安全的一些基本看法。&lt;/p>
&lt;p>作者向我们展示了如何在严格的企业防火墙下，依然能够安全地进行网络通信。&lt;/p>
&lt;p>文中展示了一些技术，表明“如果同一个人或组织控制了连接的两端，那么通常任何防火墙规则都可能被绕过。”&lt;/p>
&lt;blockquote>
&lt;p>“一个常见的技巧是在客户的数据中心内部主机（即内部主机）创建一个外部主机（即你的数据中心）作为代理。这是非常有效的，因为客户无法控制代理和上游主机之间的流量。”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>“SSH反向隧道允许内部机器（例如internal.example.com）通过外部机器（例如external.example.com）发起的出站TCP请求，保持TCP连接活跃，并监听外部机器上的EXTERNAL_PORT上的入站请求。”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>“corkscrew是一个非常简单的工具，它将SSH连接包装在HTTP连接中。这让我们可以将SSH流量伪装成HTTP流量（然后我们可以通过使用stunnel加密连接，进一步将其伪装成HTTPS流量）。”&lt;/p>
&lt;/blockquote>
&lt;p>这意味着即使在严格的网络监控下，人们仍然有可能安全地传输数据。&lt;/p>
&lt;h3 id="一个无限画布教程">一个无限画布教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-55-34.png"
width="690"
height="429"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="386px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://infinitecanvas.cc/zh/guide/what-is-an-infinite-canvas" target="_blank" rel="noopener"
>一步步构建一个可用的无限画布&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>什么是无限画布？
infinitecanvas 对“无限”的描述如下：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>高扩展性。用户可以以非线形的形式自由组织内容结构。
缩放。模拟真实世界中的“放大”纵览全局和“缩小”观察细节。
直接操作。提供对于基础图形的直观编辑能力，包括移动、成组、修改样式等。
实时协作。
你一定见过甚至使用过各种包含无限画布的应用，infinitecanvas 上就展示了从设计工具到创意画板在内的众多案例，其中不乏一些知名产品包括 Figma、Modyfi、rnote、tldraw、excalidraw等等。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>作为一个前端，我对其中涉及到的渲染技术很感兴趣。尽管 tldraw、excalidraw 等普遍使用易用性更高的 Canvas2D / SVG 技术，但 JS 和 Rust 生态中也有很多编辑器、设计工具使用更底层的渲染技术对 2D 图形进行 GPU 加速，以获得更好的性能和体验：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>因此在这个教程中，我希望实现以下特性：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>使用 @antv/g-device-api 作为硬件抽象层，支持 WebGL1/2 和 WebGPU。
参考 mapbox 和 Figma，尝试使用 Tile-based 渲染。
使用 SDF 渲染圆、椭圆、矩形等。
GPU 加速的文本和贝塞尔曲线渲染。
使用 rough.js 支持手绘风格。
使用 CRDT 支持协同 Yjs。&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="摩根大通的-python-培训课程">摩根大通的 Python 培训课程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-55-46.png"
width="690"
height="477"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jpmorganchase/python-training" target="_blank" rel="noopener"
>python-training&lt;/a>，此 Python 培训面向摩根大通业务分析师和交易员，以及精选客户。&lt;/p>
&lt;p>本课程旨在介绍 Python 中的数值计算和数据可视化。&lt;/p>
&lt;p>它不是一门完整的计算机科学或编程课程，主要面对没有正式编程背景的人。 ​​​&lt;/p>
&lt;h3 id="手工爱好者技能树">手工爱好者技能树
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-55-55.png"
width="690"
height="448"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sjpiper145/MakerSkillTree" target="_blank" rel="noopener"
>MakerSkillTree&lt;/a>，一个包含制作者技能树和模板的存储库，供您制作自己的技能树。爱 DIY 的人可以收藏。&lt;/p>
&lt;p>里面的技能清单都可以打印到 A4 纸上进行随时翻阅。&lt;/p>
&lt;p>包括：汽车、钓鱼、盖房、锻造、铸造、音乐、摄影、缝纫等 20 种经典技能，以及科技技能、生活类技能各 20 种。&lt;/p>
&lt;p>把这些技能学完之后估计比 手工耿+李子柒 还厉害。&lt;/p>
&lt;h3 id="用小游戏练习高效使用-vim">用小游戏练习高效使用 vim
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-098-%E6%9C%9F/2024-09-03-09-56-04.png"
width="690"
height="315"
loading="lazy"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="525px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://vim-racer.com/" target="_blank" rel="noopener"
>vim-racer&lt;/a>，这个网站教你快速地在 VIM 中进行跳转。&lt;/p>
&lt;p>网站提供了一个小游戏，模拟了 VIM 的编辑环境，给出了若干个需要移动光标到那儿的目标。&lt;/p>
&lt;p>你的任务就是快速定位光标过去，随便用什么方法。&lt;/p>
&lt;p>结束后会告你你的得分，以及别人高手的得分。&lt;/p>
&lt;p>可以在游戏之后查看网站给出的小 TIPS，练习更优雅快速的跳转方式。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="玩是一种十分罕见的心理状态">“玩”是一种十分罕见的心理状态
&lt;/h3>&lt;p>来自微博：&lt;a class="link" href="https://weibo.com/1973422271/OvdPqcffQ" target="_blank" rel="noopener"
>@赵丹赵丹喵&lt;/a>&lt;/p>
&lt;p>从脑神经科学的角度看，“玩”是一种极其精细、罕见的心理状态，甚至很脆弱。任何一点竞争的动机或者情绪，都会压制住“玩”的感觉。&lt;/p>
&lt;p>英文原文是，Neurologically speaking, play is a very fragile state. Any competing motivation or emotion will suppress play.&lt;/p>
&lt;p>这个「玩」的状态，其实也意味着创造力、高能量、热爱、快乐等等一系列的心理状态。所谓的单纯享受过程而不是追逐结果，在「做事」的时候因为「内心享受」收获回报。&lt;/p>
&lt;p>热爱驱动而不是恐惧驱动，过程驱动而不是结果驱动，无限游戏而不是有限游戏，这个原理我已经懂了好几年了，可在做事，在写作，在创业的时候，一次又一次丢掉过程只问结果。今天听播客这句话直接击穿我，因为这个「纯粹的玩」的状态，从大脑的生理构成上来看，就是极其难以达到的。&lt;/p>
&lt;p>「玩」的对立面就是「竞争心」。竞争心意味着追逐结果，想要赢而害怕输，追逐好而害怕坏，二元对立，好坏分离。这个竞争心，心理学里面叫“小我”，佛学里面叫“我执”。执心一起，贪心一生，纯粹的玩的状态就不复存在了。人就紧绷了，咬牙切齿了，患得患失了，不松弛不快乐不自洽了。&lt;/p>
&lt;p>怎么能让自己时时刻刻都在「玩」呢？觉察，觉察，觉察，觉察身体，觉察心，觉察脑，觉察情绪和念头。observe yourself, only then you can be free.&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 097 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/</link><pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-17-48.png" alt="Featured image of post 机器文摘 第 097 期" />&lt;h1 id="机器文摘-第-097-期">机器文摘 第 097 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="五万吨液压机的故事">五万吨液压机的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-17-39.png"
width="677"
height="645"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="251px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.construction-physics.com/p/how-to-build-a-50000-ton-forging" target="_blank" rel="noopener"
>《怎样建造 50000 吨的锻造液压机》&lt;/a>，此文看似介绍液压机的建造技术，实则回顾了大型锻造液压机的发展历史，以及引申分析了一些军事技术惠及民用的模式。&lt;/p>
&lt;p>大型锻造液压机计划最初来自于美国，在上世纪 50 年代，出于对生产轻量化、高度集成的战斗机零件的需求，他们设计并建造了两台 50000 吨级的液压机。&lt;/p>
&lt;p>虽然建造时间很长（大概花了 4 年），并且为此突破了很多技术层面的困难，很多零件的供应都是专门生产，甚至连零件的运输都专门设计了车辆。&lt;/p>
&lt;p>但带来的好处是显而易见的，之前需要用铆钉连接的数百个飞机零件，现在只需要液压机挤压生产成为四五个大件即可，可靠性、空气动力等性能也得到了大幅提升。&lt;/p>
&lt;p>这种冲压锻造技术后来还下放到民用领域，其生产的产品给普通人的生活带来了巨大方便。&lt;/p>
&lt;p>这两台机器最终服役到 2018 年，被新建造的 60000 吨级机器所取代。&lt;/p>
&lt;p>文末提到了一个有意思的点，那就是，目前世界上最大的液压机在中国（80000吨级），而且国外用的很多液压机的零部件和生产厂商也多为中国企业。&lt;/p>
&lt;p>最后作者不得不感慨：&lt;/p>
&lt;blockquote>
&lt;p>技术进步意味着建造以前从未建造过的东西，这通常意味着推动制造技术的界限向前发展。如果做不到这一点，你就有可能被这样做的人超越。&lt;/p>
&lt;/blockquote>
&lt;h3 id="超级任天堂图形系统详解">超级任天堂图形系统详解
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-17-48.png"
width="690"
height="507"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>超级任天堂（SFC），在北美又称 SNES，是任天堂公司在上世纪 90 年代发售的游戏机，是经典红白机（FC）的升级产品。&lt;/p>
&lt;p>对比 FC，该机拥有强大的图形处理能力以及 16 位中央处理器，使得游戏体验得到了极大提升。&lt;/p>
&lt;p>这里有一组文章，讲解了&lt;a class="link" href="https://fabiensanglard.net/snes_video/" target="_blank" rel="noopener"
>超级任天堂游戏机的图形系统是如何工作的&lt;/a>。&lt;/p>
&lt;p>文章深入探讨了SNES图形系统的技术细节，包括CRT的工作原理、SNES如何适应当时的电视标准，以及它如何创新地处理分辨率和信号输出。&lt;/p>
&lt;p>作者对 90 年代基于 CRT 的显示技术了如指掌，还顺便解释了为什么美国 NTSC 制式的电视机刷新率为 59.94 这个奇怪的不整的数字（当时黑白转彩色时为了兼容以及偷懒选了一个毕竟奇葩的技术标准）。&lt;/p>
&lt;h3 id="潜艇触屏交互界面导致美国海军损失过亿">潜艇触屏交互界面导致美国海军损失过亿
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-18-00.png"
width="690"
height="481"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="344px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://adrian3.com/blog/2019/2019-09-28-The-US-Navys-100-million-dollar-checkbox.php" target="_blank" rel="noopener"
>《The U.S. Navy&amp;rsquo;s $100M checkbox (2019)》&lt;/a>，这是一个悲惨的故事，看完之后你会更加怀念物理按键时代。&lt;/p>
&lt;p>同时更加痛恨现在由触摸屏构建的各种交互环境（包括各种汽车主机厂商令人讨厌的触摸屏交互）。&lt;/p>
&lt;p>文章写于 2019 年，故事发生在 2017 年。&lt;/p>
&lt;p>一艘美国海军驱逐舰与一艘利比亚油轮相撞，导致十名水手死亡，损失上亿美元。&lt;/p>
&lt;p>而造成这一惨剧的罪魁祸首是触摸屏上的一个复选框（checkbox）。&lt;/p>
&lt;p>虽然最终进行这种 UI 设计的设计师躲过了惩罚，但是本文作者不依不饶。&lt;/p>
&lt;p>写了此文对整个事件进行详细分析，以说明糟糕的交互设计是如何一步一步酿成惨剧的。&lt;/p>
&lt;h3 id="上世纪-80-年代的纯黑客测试">上世纪 80 年代的“纯”黑客测试
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-18-20.png"
width="611"
height="700"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="209px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.armory.com/tests/hacker.html" target="_blank" rel="noopener"
>hacker-checklist&lt;/a>，这里有一份测试问卷，编写于上世纪 80 年代。&lt;/p>
&lt;p>里面的问题展示了当时作为一个计算机黑客所应该具备的一些特质。&lt;/p>
&lt;p>问卷展示了技术工作者的某种古典幽默，读起来让人忍俊不禁。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="开源版的-figma">开源版的 Figma
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-19-53.png"
width="416"
height="231"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/penpot/penpot" target="_blank" rel="noopener"
>Penpot&lt;/a>，是第一个开源的设计工具，用于设计和代码协作。设计师可以创建精美的设计、互动原型和大规模的设计系统，而开发者则能享受即用型代码，使他们的工作流程变得轻松快捷，且无需为交接烦恼。&lt;/p>
&lt;h3 id="在浏览器运行的语音识别工具">在浏览器运行的语音识别工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-20-38.png"
width="1236"
height="658"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/supabase-community/babelfish.ai" target="_blank" rel="noopener"
>Babelfish.ai&lt;/a>，一款基于AI的实时转录和翻译工具，可在浏览器中本地运行&lt;/p>
&lt;p>基于 Huggingface Transformer.js 、Supabase Realtime 构建的，可以实时识别语音并将其转换为目标语言文本&lt;/p>
&lt;p>适用于实时会议翻译、在线教育、多语言聊天等场景&lt;/p>
&lt;p>特点:&lt;/p>
&lt;ol>
&lt;li>实时语音转录: 利用OpenAI Whisper模型，在浏览器中实现实时语音转录&lt;/li>
&lt;li>实时翻译: 使用Meta的NLLB-200模型，将转录后的文本实时翻译成 200 种语言&lt;/li>
&lt;/ol>
&lt;h3 id="在线合成器">在线合成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-097-%E6%9C%9F/2024-08-27-09-20-54.png"
width="690"
height="452"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://cardinal.kx.studio/live" target="_blank" rel="noopener"
>Cardinal&lt;/a>是一个免费且开源的虚拟模块化合成器插件， 提供 AudioUnit/CLAP/LV2/VST2/VST3 插件格式，并作为 FreeBSD、Linux、macOS、Windows 和 Web 的独立应用程序使用。&lt;/p>
&lt;p>可以在线体验，喜欢模块化复古合成器的可以试试。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 096 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/</link><pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-22-40.png" alt="Featured image of post 机器文摘 第 096 期" />&lt;h1 id="机器文摘-第-096-期">机器文摘 第 096 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="激光麦克风">激光麦克风
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-22-40.png"
width="690"
height="313"
loading="lazy"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="529px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.wired.com/story/infrared-laser-microphone-keystroke-surveillance/" target="_blank" rel="noopener"
>《用激光窃听键盘输入》&lt;/a>这篇文章讲述了一个利用红外激光技术进行窃听的故事。&lt;/p>
&lt;p>在拉斯维加斯举行的 Defcon 安全会议上，著名黑客 Samy Kamkar 展示了他自己的DIY激光监视技术。他能够将一种肉眼看不见的红外激光对准远处的笔记本电脑，通过窗户检测计算机的振动，重建几乎每一个输入的字符。这种技术利用了敲击不同键盘键产生的微妙声学特性，即使没有看到键盘，只要黑客能够看到目标笔记本电脑上的任何相对反射的部分，也能工作。&lt;/p>
&lt;p>实现这种神奇窃听效果的关键技术有三个：&lt;/p>
&lt;ol>
&lt;li>基于激光的音频输入：发射每秒频闪 40K 赫兹的激光光源，通过镜头接收反射光，使用传感器以 400K 赫兹进行采样，以便进行光电转换和频率分析。&lt;/li>
&lt;li>使用 iZotopeRX 软件进行噪声处理以获取想要的音频信息。&lt;/li>
&lt;li>使用开源软件 Keytap3 （基于 AI 的听声识别键位）将音频识别为按键信息。&lt;/li>
&lt;/ol>
&lt;p>ps：作者说，由于苹果笔记本有个反光良好的镜面 LOGO，所以针对苹果笔记本的窃听效果最好。&lt;/p>
&lt;h3 id="用-c-语言在-40-年前的老系统上进行编程是什么体验">用 C 语言在 40 年前的老系统上进行编程是什么体验？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-22-53.png"
width="557"
height="372"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://kevinboone.me/cpm-c.html" target="_blank" rel="noopener"
>《回到 CP/M 的 C 编程》&lt;/a>讲述了作者在一台真正的（物理上）CP/M 机器进行编程的经历。&lt;/p>
&lt;p>C/PM ：（&amp;ldquo;Control Program for Microcomputers&amp;quot;的缩写），即“微机控制程序”。它是1970年代为 Intel 8080 微处理器开发的一个操作系统。&lt;/p>
&lt;p>C/PM是早期微计算机操作系统的先驱之一，它为后来的操作系统，包括MS-DOS（微软磁盘操作系统），奠定了基础。&lt;/p>
&lt;p>文中介绍了在不依赖现代环境的前提下，完全基于老式系统进行编程是何种体验：&lt;/p>
&lt;ol>
&lt;li>古老的编译器需要用户手动执行三次命令才能完成程序生成，包括编译 C 代码到 ASM 汇编、编译汇编、链接可执行程序；&lt;/li>
&lt;li>早期的 ANSI C 语法，函数及变量必须在块定义之前声明，否则无法编译（也就是说 &lt;code>for(int i;;;)&lt;/code> 这种写法不行，必须得把 &lt;code>int i&lt;/code> 这个定义提到前面去）；&lt;/li>
&lt;li>int 类型和指针为 16 位，但 float 为 32 位，double 为 64 位（但要谨慎使用因为没有指令加速，计算非常慢）；&lt;/li>
&lt;li>极简的标准库、原始的内存管理等等。&lt;/li>
&lt;/ol>
&lt;p>看来当个 80 年代的程序员真的不容易。&lt;/p>
&lt;h3 id="嵌入在字体里的语法高亮">嵌入在字体里的语法高亮
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-23-36.png"
width="690"
height="348"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;p>用技术挑战可能性的故事最让人欣赏。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://blog.glyphdrawing.club/font-with-built-in-syntax-highlighting/" target="_blank" rel="noopener"
>《集成代码高亮的字体》&lt;/a>的作者估计有强迫症吧。&lt;/p>
&lt;p>为了给自己的博客增加手写 HTML、CSS 的能力（想要代码语法高亮，但是又不想引入 JS 库），不惜做了一个自带高亮效果的字体。&lt;/p>
&lt;p>实现原理：&lt;/p>
&lt;ol>
&lt;li>OpenType COLOR 表可以使得字体文件支持颜色。&lt;/li>
&lt;li>OpenType 上下文替换技术可以让字体根据识别到的模式自动返回对应颜色。&lt;/li>
&lt;li>给 JS、HTML、CSS 等语言的关键字创建大量的“上下文替换规则”。&lt;/li>
&lt;li>在网页中加载该字体使用，即使输入的是纯文本，也会带有颜色高亮效果了。&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="读写-json-csv-等文本数据的工具">读写 json csv 等文本数据的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-24-01.png"
width="602"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="370px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/TomWright/dasel" target="_blank" rel="noopener"
>dasel&lt;/a>，一个可以对多种单文本数据文件读写的命令行工具。&lt;/p>
&lt;p>支持 JSON, TOML, YAML, XML 和 CSV，而且可以方便地在这些格式之间进行转换。&lt;/p>
&lt;p>用于需要在命令行批量对这些文本数据进行增删改查。 ​​​&lt;/p>
&lt;h3 id="基于大模型的开源-ocr-工具">基于大模型的开源 OCR 工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-24-16.png"
width="690"
height="389"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Dicklesworthstone/llm_aided_ocr" target="_blank" rel="noopener"
>LLM-Aided OCR&lt;/a>，一个基于 LLM 的 OCR 扫描 PDF 开源工具 。&lt;/p>
&lt;p>旨在通过利用多模态大语言模型（LLM）将原始的 OCR 扫描 PDF 文本转换成高准确度、格式正确且易于阅读的 Markdown 文档。&lt;/p>
&lt;p>实现思路：首先将 PDF 文件转图像，进行 OCR 扫描处理提取文本，再利用本地 LLM 或 API（如 OpenAI、Anthropic）纠正 OCR 错误，最后转换成高准确度、高质量的 Markdown 文本。&lt;/p>
&lt;h3 id="imgui-设计器">ImGUI 设计器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-24-26.png"
width="690"
height="471"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/tpecholt/imrad" target="_blank" rel="noopener"
>ImRAD&lt;/a>，可视化设计制作 ImGUI 界面的工具。&lt;/p>
&lt;h3 id="通过口令认证在两台计算机上安全地迁移文件">通过口令认证在两台计算机上安全地迁移文件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-24-47.png"
width="690"
height="382"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/magic-wormhole/magic-wormhole" target="_blank" rel="noopener"
>魔法虫洞&lt;/a>&lt;/p>
&lt;p>安全地将东西从一台计算机移动到另一台计算机。&lt;/p>
&lt;p>该软件包提供了一个库和一个名为 wormhole 的命令行工具，它可以将任意大小的文件和目录（或短文本）从一台计算机转移到另一台计算机。&lt;/p>
&lt;p>两端通过使用相同的“虫洞代码”来识别：通常，发送者机生成密码，然后接收端通过输入这个密码建立连接&lt;/p>
&lt;h3 id="另一个传输工具">另一个传输工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-25-01.png"
width="690"
height="676"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="244px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/LeastAuthority/destiny" target="_blank" rel="noopener"
>destiny&lt;/a>，
可以在非局域网下，任何平台或设备之间传输文件。上传者分享传输码就可以下载，点对点加密，没有中心服务器，不需要注册，开箱即用。&lt;/p>
&lt;h3 id="一行命令优化-windows-11-体验">一行命令优化 Windows 11 体验
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-25-19.png"
width="690"
height="177"
loading="lazy"
class="gallery-image"
data-flex-grow="389"
data-flex-basis="935px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Raphire/Win11Debloat" target="_blank" rel="noopener"
>Win11Debloat&lt;/a>，一个针对win11系统的优化脚本。&lt;/p>
&lt;p>可以用来移除 Windows 预装的应用程序，禁用遥测，从 Windows 搜索中移除 Bing，以及执行各种其他更改来清理并改善您的 Windows 体验。这个脚本适用于 Windows 10 和 Windows 11。 ​​​&lt;/p>
&lt;h3 id="用安卓手机当电脑麦克风">用安卓手机当电脑麦克风
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-096-%E6%9C%9F/2024-08-20-11-25-28.png"
width="690"
height="513"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/gdzx/audiosource" target="_blank" rel="noopener"
>AudioSource&lt;/a>，你的电脑可能没有麦克风，需要的时候，又不想买一个麦克风，这时候就可以把你的 Android 当作麦克风来用。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 095 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/</link><pubDate>Tue, 13 Aug 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/2024-08-13-09-19-48.png" alt="Featured image of post 机器文摘 第 095 期" />&lt;h1 id="机器文摘-第-095-期">机器文摘 第 095 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="不懂-cpu-原理那就自己动手编程模拟一个">不懂 CPU 原理？那就自己动手编程模拟一个
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/2024-08-13-09-18-27.png"
width="688"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://djharper.dev/post/2019/05/21/i-dont-know-how-cpus-work-so-i-simulated-one-in-code/" target="_blank" rel="noopener"
>《我不知道 CPU 是怎么工作的，于是我写程序模拟了一个》&lt;/a>&lt;/p>
&lt;p>不懂 CPU 工作原理，看别人的解释视频和文章都不过瘾，干脆自己来吧，从底层模拟一个 CPU ，这下可以拿捏各种细节了。&lt;/p>
&lt;p>不过等一下，作者并非真的不理解，实际上，早在 2013 年他就动手写过一个任天堂 GameBoy 模拟器。&lt;/p>
&lt;p>只是作者认为当时的硬件肯定没有现在的计算机硬件这么攒劲，于是作者又犯了“绝不允许自己不知道引擎盖下的机器是如何工作的”综合征。&lt;/p>
&lt;p>而且，与一般的模拟器不同（只是暴露了兼容指令集），这次作者在代码层面真正模拟了硬件电路级别的 CPU，包括 ALU 算逻运算单元、中断电路等。&lt;/p>
&lt;p>文章记录了动手过程，包括一些踩坑花絮。&lt;/p>
&lt;h3 id="如何极快地构建任何东西">如何极快地构建任何东西
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/2024-08-13-09-18-38.png"
width="399"
height="341"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="280px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://learnhowtolearn.org/how-to-build-extremely-quickly/" target="_blank" rel="noopener"
>《如何极快地构建任何东西》&lt;/a>，这是一篇教你提高做事（尤其是创造性劳动）效率的文章。&lt;/p>
&lt;p>其核心理念只有一条：先完成，再完善。&lt;/p>
&lt;p>也就是不要陷入到细节里。&lt;/p>
&lt;p>你的构建进度条不是慢慢从左走到右，而是基于一个基础框架，反复迭代，以逐步增添细节的方式填满的。&lt;/p>
&lt;p>展开来说：&lt;/p>
&lt;ol>
&lt;li>做任何事情先做提纲（框架、地基，都一个意思）。&lt;/li>
&lt;li>扫描你的框架，做更细一级的补充，循环此过程。&lt;/li>
&lt;li>在完成核心功能之前不要关注细节。&lt;/li>
&lt;/ol>
&lt;p>作者在文中以写作和编程进行了举例，几乎手把手教你了。&lt;/p>
&lt;h3 id="ai-模型的量化是什么它跟常说的量化交易有关系吗">AI 模型的“量化”是什么，它跟常说的“量化交易”有关系吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/2024-08-13-09-19-00.png"
width="688"
height="439"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;p>答案是：卡巴斯基和巴基斯坦的关系。&lt;/p>
&lt;p>AI 模型的量化（Quantization）是一种在机器学习和人工智能领域中用于优化大型模型的技术。&lt;/p>
&lt;p>这篇文章&lt;a class="link" href="%e7%bd%91%e9%a1%b5%e9%93%be%e6%8e%a5" >《A Visual Guide to Quantization》&lt;/a>解释了量化的基本概念和实现原理。&lt;/p>
&lt;p>什么是量化？
量化是一种数据压缩技术，它用于减少模型参数所需的存储空间和计算资源。在机器学习模型中，参数通常以浮点数（一种可以表示小数的数值类型）的形式存储，这需要较多的内存和计算能力。量化通过将这些浮点数转换为更简单的数值格式（如整数），从而降低模型对计算资源的需求。&lt;/p>
&lt;p>为什么要量化？&lt;/p>
&lt;ol>
&lt;li>硬件限制：大型语言模型（LLMs）通常包含数十亿参数，它们在消费级硬件上运行时会受到内存和处理能力的限制。&lt;/li>
&lt;li>效率提升：量化可以显著减少模型的大小，使其能够在更小、更慢的设备上运行，比如智能手机或嵌入式设备。&lt;/li>
&lt;li>成本降低：减少对高性能硬件的依赖可以降低部署和运行模型的成本。&lt;/li>
&lt;li>实时应用：在需要快速响应的应用场景中，量化可以加快模型的推理速度。&lt;/li>
&lt;/ol>
&lt;p>量化的技术依据：&lt;/p>
&lt;ol>
&lt;li>数值表示：在计算机中，数值通常以浮点数的形式表示，包括符号位、指数位和尾数位。量化则是将这些浮点数转换为更简单的格式，比如8位整数（INT8）。&lt;/li>
&lt;li>精度与范围：量化会牺牲一定的数值精度以换取更小的数值范围。例如，使用INT8量化时，数值的范围和精度都会比32位浮点数（FP32）小。&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="webgpu-在线教程">WebGPU 在线教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/2024-08-13-09-19-13.png"
width="289"
height="398"
loading="lazy"
class="gallery-image"
data-flex-grow="72"
data-flex-basis="174px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://shi-yan.github.io/webgpuunleashed/" target="_blank" rel="noopener"
>WebGPU Unleashed&lt;/a>，一本在线交互式电子书。&lt;/p>
&lt;p>将教你使用 WebGPU 在 JavaScript 中进行图形编程，带你做好每一个练习，可在线运行。&lt;/p>
&lt;h3 id="70-岁奶奶编写的游戏">70 岁奶奶编写的游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-095-%E6%9C%9F/2024-08-13-09-19-23.png"
width="506"
height="403"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://news.ycombinator.com/item?id=41217109" target="_blank" rel="noopener"
>HN &lt;/a>上的一位网友放出了一个链接，是他 &lt;a class="link" href="https://grandmasword.com/" target="_blank" rel="noopener"
>70岁的奶奶刚学会编程做的文字游戏&lt;/a>。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 094 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/</link><pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-43-19.png" alt="Featured image of post 机器文摘 第 094 期" />&lt;h1 id="机器文摘-第-094-期">机器文摘 第 094 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="用-c-重写一个-2d-游戏引擎">用 C 重写一个 2D 游戏引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-40-27.png"
width="690"
height="458"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://phoboslab.org/log/2024/08/high_impact" target="_blank" rel="noopener"
>high_impact&lt;/a>，是一个用 C 写的 2D 动作游戏引擎，很简洁但是很强大。&lt;/p>
&lt;p>作者在这篇文章里记述了这个引擎的诞生历程。&lt;/p>
&lt;p>与其他游戏引擎不同的是，这个引擎是先有了 JavaScript 版本，然后才做的 C 语言版本。&lt;/p>
&lt;p>作者在文中不但回顾了 JavaScript 版本的开发始末，还详细讲解了 C 语言版本的实现思路，包括：渲染、碰撞、粒子系统等。&lt;/p>
&lt;p>我十分认同作者的一句话：“我喜欢的游戏和技术都有一个特点，那就是他们很容易上手，但是不容易精通。”（作者在文中指 C 语言）&lt;/p>
&lt;h3 id="终端操作高级技巧">终端操作高级技巧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-40-43.png"
width="459"
height="313"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;p>经常在 Linux 进行服务端编程或者运维操作的人员，离不了跟终端、命令行窗口打交道。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.bitsand.cloud/posts/terminal-tips/" target="_blank" rel="noopener"
>《终端操作高级技巧》&lt;/a>整理了若干条非常棒的操作技巧（秘籍），可以极大提升你的工作体验。&lt;/p>
&lt;p>摘录部分如下：&lt;/p>
&lt;ol>
&lt;li>使用命令行编辑：输错长串的大段命令不要着急，无需重新输入，Ctrl+E 可以进入编辑界面，直接编辑你的大段命令。&lt;/li>
&lt;li>通过 tmux 脚本控制终端行为（可以完成一些自动化交互操作）。&lt;/li>
&lt;li>fzf 模糊查找整合到命令行历史查找中，Ctrl + R 可以快速搜寻曾经执行过的命令。&lt;/li>
&lt;/ol>
&lt;h3 id="计算机逆向工程大全">计算机逆向工程大全
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-41-03.png"
width="597"
height="600"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;p>提到“逆向工程”大家首先想到的就是“破解”，事实上也是这样。&lt;/p>
&lt;p>不过除了搞越狱、破解之外，学习逆向工程也是了解计算机底层原理的绝佳途径。&lt;/p>
&lt;p>&lt;a class="link" href="https://0xinfection.github.io/reversing" target="_blank" rel="noopener"
>《逆向工程》&lt;/a>这本电子书整理了一份十分详尽的学习手册。&lt;/p>
&lt;p>内容涵盖了 x86、arm 等主流平台关于如何进行“逆向”的全部工作指南。&lt;/p>
&lt;p>手册不仅介绍基础的原理知识，还整理了关于环境安装、配套的工具使用等方面的信息，适合边学边练&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="纯-python-写-web-界面">纯 Python 写 Web 界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-41-28.png"
width="690"
height="254"
loading="lazy"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="651px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://fastht.ml/" target="_blank" rel="noopener"
>FastHTML&lt;/a>，一个好玩的项目，用纯 Python 开发现代网页应用。&lt;/p>
&lt;p>不需要了解前端知识，只需能写 Python 代码，即可做出美观易用的网页程序。 ​​​&lt;/p>
&lt;h3 id="一个实验性质的-js-引擎">一个实验性质的 Js 引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-41-37.png"
width="567"
height="514"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="264px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://porffor.dev/" target="_blank" rel="noopener"
>porffor&lt;/a>，一个从零实现的 JS 解释器。&lt;/p>
&lt;p>Porffor 是一个独特的 JS 引擎/编译器/运行时，将 JS 代码提前编译为 WebAssembly 或原生代码。&lt;/p>
&lt;p>目前该项目在 Github 开源，仅用于研究用途。&lt;/p>
&lt;p>不过，从项目主页给出的测试数据来看，目前还不具备实用性，仅通过了 35% 的语法标准测试。&lt;/p>
&lt;h3 id="在容器里运行-macos">在容器里运行 MacOS
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-41-46.png"
width="690"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sickcodes/Docker-OSX" target="_blank" rel="noopener"
>Docker-OSX&lt;/a>，这个开源项目可以让你在 docker 里运行 MacOS 系统。&lt;/p>
&lt;p>通过强大的虚拟机模拟器 QEMU 实现。 ​​​&lt;/p>
&lt;h3 id="科研写作专用编辑器">科研写作专用编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-094-%E6%9C%9F/2024-08-06-08-41-56.png"
width="690"
height="743"
loading="lazy"
class="gallery-image"
data-flex-grow="92"
data-flex-basis="222px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.stempad.io/editor" target="_blank" rel="noopener"
>stempad&lt;/a>，一个专门用于科研写作的在线工具，浏览器访问直接使用，所有数据保存在本地。&lt;/p>
&lt;p>特色是内嵌可视化公式编辑器以及公式图形绘制功能。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 093 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/</link><pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-23-44.png" alt="Featured image of post 机器文摘 第 093 期" />&lt;h1 id="机器文摘-第-093-期">机器文摘 第 093 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="可以挂在钥匙链上的-wii-游戏机">可以挂在钥匙链上的 Wii 游戏机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-23-34.png"
width="690"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://bitbuilt.net/forums/index.php?threads/kawaii.6474/" target="_blank" rel="noopener"
>Kawaii&lt;/a>（意为“可爱”）是一个功能齐全的 Wii 游戏机，但是体积比任天堂发售的 Wii 游戏机缩小了数倍，还不到一个巴掌大小。&lt;/p>
&lt;p>方案思路来自于一个叫做 GC Nano 的项目，不过做的更小，设计了更好的外壳和扩展。&lt;/p>
&lt;p>主要手段，就是切割原有 Wii 游戏机的电路板，保留核心部件，重新设计外壳和扩展接口。&lt;/p>
&lt;p>规格包括：&lt;/p>
&lt;ol>
&lt;li>60x60x16mm 的 CNC 铝制外壳（被动冷却），带有激光蚀刻艺术作品。&lt;/li>
&lt;li>类似 MagSafe 的 12 针磁性 pogo pin 连接器。&lt;/li>
&lt;li>带有 USB-C 电源输入、x4 GCC 控制器端口、复合/分量视频输出和立体声音频输出的底座。&lt;/li>
&lt;li>钥匙链环。&lt;/li>
&lt;/ol>
&lt;p>像 GC Nano 和 Short Stack 一样，Kawaii 完成后将完全开源。&lt;/p>
&lt;h3 id="css-的-box-shadows-还能干啥">CSS 的 box-shadows 还能干啥
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-23-44.png"
width="690"
height="418"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dgerrells.com/blog/how-not-to-use-box-shadows" target="_blank" rel="noopener"
>box-shadows&lt;/a>，一篇讲解前端技术的精品文章。&lt;/p>
&lt;p>探讨了如何以创造性的方式使用 CSS 的 box-shadows，看看使用 box-shadows 都是有哪些限制，以及可以整出什么花活儿。&lt;/p>
&lt;p>作者前端技术功底深厚，文中提供了多个有趣的效果展示 Demo。&lt;/p>
&lt;p>除了 CSS 相关的技巧外，作者对于 JavaScript 代码的相关优化也颇有心得。&lt;/p>
&lt;p>亮点如下：&lt;/p>
&lt;ol>
&lt;li>层叠多个 box shadows 可以创建深度视觉效果（3D 渲染）；&lt;/li>
&lt;li>使用 box shadows 实现光线追踪渲染；&lt;/li>
&lt;li>在线交互体验作者编写的 Demo；&lt;/li>
&lt;/ol>
&lt;h3 id="设计就是抄袭">设计就是抄袭
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-24-03.png"
width="690"
height="393"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;p>设计工作中，原创为主？还是临摹、抄袭、复制、山寨为主？&lt;/p>
&lt;p>不同的人有不同的看法。&lt;/p>
&lt;p>一些设计师认为保持作品的“原创性”是必须的，否则跟偷窃有何分别？&lt;/p>
&lt;p>一些人则认为大量的“复制”、“山寨”才是设计工作的主流，是这些复制品让市场繁荣，让作品得以传承，更多人受益。&lt;/p>
&lt;p>当然也有一些人格分裂者，复制别人的时候是“致敬”，但绝不允许别人复制自己的（乔布斯：没错！正是在下）。&lt;/p>
&lt;p>&lt;a class="link" href="https://matthewstrom.com/writing/copying/" target="_blank" rel="noopener"
>《设计工作的方式是复制》&lt;/a>一文对抄袭和设计的关系进行了探讨。&lt;/p>
&lt;p>作者的观点是倾向于鼓励复制的，因为作者在开头就声明了本文可以随意转载、下载、重置、复制并发布。&lt;/p>
&lt;p>文中主要讲了几个工业设计（主要是消费电子产品）历史上的有趣故事，借此讨论了“复制”这一看似不合理的行为是怎样成为设计的主要工作方式的。&lt;/p>
&lt;p>有几个有趣的点：&lt;/p>
&lt;ol>
&lt;li>乔布斯当年从施乐实验室偷走了图形界面的创意，然后转头起诉微软抄袭苹果电脑的界面，回过味儿的施乐公司开始起诉苹果。这事儿后来比尔盖茨回忆说，就好像自己看上了邻居家里的电视机，进屋去偷的时候发现乔布斯已经把它搬走了。&lt;/li>
&lt;li>苹果公司后来甚至起诉三星公司，说自己拥有“圆角矩形”专利，不允许三星生产圆角的平板电脑，法院驳回了，但是三星也赔了不少钱。&lt;/li>
&lt;li>最牛的游戏程序员，约翰卡马克成功在 PC 上复刻了任天堂的超级马里奥3，首次实现了 PC 电脑上的卷轴动画游戏，后来老板希望申请专利，但是卡马克拒绝说：你要敢申请，我就敢辞职。（卡马克在我心目中是世界最牛程序员之一，另一个是 Linus）&lt;/li>
&lt;/ol>
&lt;h3 id="业余无线电文化美国的历史">业余无线电文化（美国）的历史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-24-16.png"
width="690"
height="409"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://thereader.mitpress.mit.edu/the-rich-history-of-ham-radio-culture/" target="_blank" rel="noopener"
>《业余无线电文化的丰富历史》&lt;/a>由历史学家克里斯滕·哈林（Kristen Haring）撰写，深入探讨了业余无线电爱好者（通常称为“火腿”）的世界。&lt;/p>
&lt;p>文章描绘了业余无线电文化（美国）的形成过程以及它的丰富多彩。&lt;/p>
&lt;p>一些有趣的点：&lt;/p>
&lt;ol>
&lt;li>火腿们通过摩尔斯电码展示他们的技术身份，他们对这种编码的热爱源于FCC许可考试中对编码技能的重视，以及他们对如何将语言转化为电码的欣赏。电码操作者能够通过电码的“触感”识别彼此，这种“触感”几乎和指纹一样独特。&lt;/li>
&lt;li>一些火腿通过摩尔斯电码在公共场合进行秘密交流。例如，一个火腿描述了他如何在约会时与兄弟通过摩尔斯电码讨论他们的约会对象，而对方却浑然不觉。&lt;/li>
&lt;li>美国无线电中继联盟（ARRL）发布的“业余者的准则”强调了火腿应具备的特质，如绅士风度、忠诚、进步、友好、平衡和爱国。这些准则不仅为火腿们提供了行为模范，还通过大众媒体的广泛传播，成为公众对火腿形象的一种认知。&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="可以像架构图那样组织编辑窗口的编辑器">可以像架构图那样组织编辑窗口的编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-24-25.png"
width="690"
height="488"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://haystackeditor.com/" target="_blank" rel="noopener"
>haystackeditor&lt;/a>，一个很有意思的编辑器，可以在一个无限大的画布上摊开你要编辑的多个文件。&lt;/p>
&lt;p>比起用分割窗口、TAB页来管理多个打开的文件，有一个很大的优势，就可以按照你的代码调用关系来摆放编辑窗口的大小和位置。&lt;/p>
&lt;p>各个代码源文件的关系一目了然。&lt;/p>
&lt;h3 id="wgpu-学习教程">wgpu 学习教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-24-36.png"
width="231"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="49"
data-flex-basis="119px"
>&lt;/p>
&lt;p>WebGPU 是由 W3C GPU for the Web 社区组所发布的规范，目标是允许网页代码以高性能且安全可靠的方式访问 GPU 功能。它通过借鉴 Vulkan API，并将其转换为宿主硬件上使用的各式 API（如 DirectX、Metal、Vulkan）来实现这一目标。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/gfx-rs/wgpu" target="_blank" rel="noopener"
>wgpu&lt;/a> 是基于 WebGPU API 规范的、跨平台的、安全的、纯 Rust 图形 API。它是 Firefox、Servo 和 Deno 中 WebGPU 整合的核心。&lt;/p>
&lt;p>wgpu 不仅可以在 Web 环境运行，还可以在 macOS / iOS、Android、Window 和 Linux 等系统上原生运行。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sotrh/learn-wgpu" target="_blank" rel="noopener"
>learn-wgpu&lt;/a>是一套针对 wgpu 开发的教程，包括入门和进阶部分，热心网友翻译的 &lt;a class="link" href="https://jinleili.github.io/learn-wgpu-zh/" target="_blank" rel="noopener"
>learn-wgpu 中文版&lt;/a>还增加了集成与调试的章节。&lt;/p>
&lt;h3 id="学习计算机知识的实体卡牌游戏">学习计算机知识的实体卡牌游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-24-46.png"
width="471"
height="377"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="299px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://punkx.org/unix-pipe-game/" target="_blank" rel="noopener"
>card-game&lt;/a>，这个网站提供了一些可以自行下载打印的游戏卡牌，都是与计算机基础知识相关的桌游。&lt;/p>
&lt;p>可以让父母跟孩子一起通过做游戏学习知识，寓教于乐，而且是桌游的感觉。&lt;/p>
&lt;p>可以学习的知识包括：UNIX 管道、C 语言指针与数组、Python 编程等等。&lt;/p>
&lt;h3 id="从网页中偷按钮的设计">从网页中“偷”按钮的设计
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-093-%E6%9C%9F/2024-07-30-09-24-59.png"
width="690"
height="488"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://anatolyzenkov.com/stolen-buttons/button-stealer" target="_blank" rel="noopener"
>Button Stealer&lt;/a>，这个插件只干一件事，从你浏览的每一个网页里偷取按钮。&lt;/p>
&lt;p>日积月累你会发现它积攒了一堆各式各样的按钮。&lt;/p>
&lt;p>作者说了，这个功能没啥用，但是好像挺有趣。&lt;/p>
&lt;p>插件不会收集用户信息，所有数据都保存在本地。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 092 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-48-15.png" alt="Featured image of post 机器文摘 第 092 期" />&lt;h1 id="机器文摘-第-092-期">机器文摘 第 092 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="苏联计算器简史">苏联计算器简史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-47-59.png"
width="603"
height="522"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="277px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://kimi.moonshot.cn/chat/cqat74ucp7fcufcoehug" target="_blank" rel="noopener"
>苏联计算器简史&lt;/a>&lt;/p>
&lt;p>这篇文章讲述了苏联计算器的发展历程，从最初的独特操作语言到后来的现代化设计。&lt;/p>
&lt;p>在上世纪 70 年代初，计算器的交互操作才开始变得通用，而早期的计算器，比如列宁格勒“Svetlana”工厂生产的C3-07，每个型号都有自己特定的操作程序。&lt;/p>
&lt;p>B3-18 是苏联第一款工程计算器，它能够进行更复杂的数学运算，比如三角函数和对数运算，这在当时非常先进。&lt;/p>
&lt;p>文章还提到了苏联计算器的一些有趣特点，某些型号的计算器在显示数字时会用到一些特殊的技巧。&lt;/p>
&lt;p>比如在C3-07型号上，零的高度只有正常数字的一半，以帮助用户更容易地找到最重要的数字。&lt;/p>
&lt;p>随着技术的发展，苏联的计算器也开始使用集成电路和更先进的能源技术，比如太阳能和液晶显示，这使得计算器更加节能和便携。&lt;/p>
&lt;p>B3-34 是苏联最受欢迎的计算器之一，它不仅功能强大，而且具有一些未公开的特殊功能，在特定条件下，一些按键会有不同寻常的作用。&lt;/p>
&lt;p>通过本文，可以了解苏联工程师在计算器设计上的创新和努力。&lt;/p>
&lt;p>即使在技术和资源受限的情况下，工程师们也能够创造出功能丰富且有趣的计算器。&lt;/p>
&lt;h3 id="box-shadows-都是能干啥">box-shadows 都是能干啥
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-48-15.png"
width="690"
height="418"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dgerrells.com/blog/how-not-to-use-box-shadows" target="_blank" rel="noopener"
>box-shadows&lt;/a>，一篇讲解前端技术的精品文章。&lt;/p>
&lt;p>探讨了如何以创造性的方式使用 CSS 的 box-shadows，看看使用 box-shadows 都是有哪些限制，以及可以整出什么花活儿。&lt;/p>
&lt;p>作者前端技术功底深厚，文中提供了多个有趣的效果展示 Demo。&lt;/p>
&lt;p>除了 CSS 相关的技巧外，作者对于 JavaScript 代码的相关优化也颇有心得。&lt;/p>
&lt;p>亮点如下：&lt;/p>
&lt;ol>
&lt;li>层叠多个 box shadows 可以创建深度视觉效果（3D 渲染）；&lt;/li>
&lt;li>使用 box shadows 实现光线追踪渲染；&lt;/li>
&lt;li>在线交互体验作者编写的 Demo；&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="在-amd-显卡上跑-cuda-程序">在 AMD 显卡上跑 CUDA 程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-48-38.png"
width="690"
height="437"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>不用改一行代码，即可将你的 CUDA 程序在 AMD 显卡上运行。&lt;/p>
&lt;p>AI 时代，天下苦 Nvidia 久矣！&lt;/p>
&lt;p>大量的 AI 研究与计算都依赖基于 Nvidia 显卡的 CUDA 计算平台。&lt;/p>
&lt;p>而且 CUDA 这个计算平台是商业封闭平台，不能在别的底层硬件运行（比如 AMD 、Intel 等厂商的显卡）。&lt;/p>
&lt;p>所以 N 卡价格水涨船高，老黄股票赚了个盆满钵满。&lt;/p>
&lt;p>现在看到了希望，&lt;a class="link" href="https://docs.scale-lang.com/" target="_blank" rel="noopener"
>SCALE&lt;/a>，一个在 AMD 平台模拟 CUDA 的中间层。&lt;/p>
&lt;p>通过 GPGPU 编程将普通的 AMD GPU 也提供了一层 CUDA 接口。&lt;/p>
&lt;p>我不知道这种假装会不会带来侵权问题。&lt;/p>
&lt;p>不过可以先观望一下，这个项目目前已经做到了在部分 A 卡上运行一大批依赖 CUDA 的计算应用了。&lt;/p>
&lt;h3 id="电子书计算机是如何工作的">电子书《计算机是如何工作的》
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-49-04.png"
width="540"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.fastchip.net/howcomputerswork/p1.html" target="_blank" rel="noopener"
>《 How Computers Work ：Processor and Main Memory 》&lt;/a>&lt;/p>
&lt;p>本书从头开始讲cpu是怎么工作的，有 pdf 和 doc 两种格式供下载 。&lt;/p>
&lt;p>具体内容涵盖了计算机的基础知识、内存、指令、处理器、编程和其他相关话题。书中使用继电器而非晶体管来简化电路，适合没有技术背景的读者。&lt;/p>
&lt;h3 id="代码图片生成器">代码图片生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-49-16.png"
width="690"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>来自 Raycast 团队开源的一个 Web 工具箱 ray.so。&lt;/p>
&lt;p>提供了精美的代码图片生成器、图标制作器以及多种高颜值的 Raycast 主题等等。&lt;/p>
&lt;p>GitHub：https://github.com/raycast/ray-so&lt;/p>
&lt;h3 id="在线设计电路板并记录笔记">在线设计电路板并记录笔记
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-49-26.png"
width="690"
height="468"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://viscircuit.com/demo" target="_blank" rel="noopener"
>viscircuit&lt;/a>，这个网站可以让你在线以可视化的绘制电路板图纸，并使用 Markdown 格式做笔记。&lt;/p>
&lt;h3 id="在线获取图书信息的-api">在线获取图书信息的 API
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-49-34.png"
width="690"
height="415"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://book-db-v1.saltyleo.com/" target="_blank" rel="noopener"
>SaltyLeo 的图书元数据 API&lt;/a>&lt;/p>
&lt;p>这个网址提供了一个在线 API ，用于获取图书的元信息：作者、出版社、封面、简介等。&lt;/p>
&lt;p>可以用来刮削元数据补充自己的书库，也可以用作建站使用。 ​​​&lt;/p>
&lt;h3 id="基于-webassembly-技术的-linux-虚拟环境">基于 WebAssembly 技术的 Linux 虚拟环境
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-092-%E6%9C%9F/2024-07-23-08-49-45.png"
width="651"
height="505"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="309px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://webvm.io/" target="_blank" rel="noopener"
>WebVM&lt;/a> 是一个无服务器的虚拟 Linux 环境，完全在 HTML5/WebAssembly 中客户端运行。&lt;/p>
&lt;p>WebVM 由 CheerpX 虚拟化引擎驱动，它使得在任何浏览器上安全、沙盒化的客户端执行 x86 二进制文件成为可能。&lt;/p>
&lt;p>CheerpX 包括一个 x86 到 WebAssembly 的即时编译器（JIT 编译器）、一个基于虚拟块的文件系统，以及一个 Linux 系统调用模拟器。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="复古游戏更划算">复古游戏更划算
&lt;/h3>&lt;p>电脑使用 7 年前的主流配置，玩 15 年前的主流游戏，是一个非常划算的事情。&lt;/p>
&lt;p>或者使用模拟器玩更复古的主机游戏，比如索尼的 PS2、世嘉的 Dreamcast、任天堂的 Wii 等，拿今年的行情来说，两千块钱捡破烂配置的 PC 就可以超高质量运行上述主机模拟。&lt;/p>
&lt;p>而且还有海量的经典大作，游戏画面质量比起现在虽然差点儿，但搁在当年是十分惊艳的（是要斥巨资才能享受到的）。&lt;/p>
&lt;p>当年的大作在游戏性方面比现在堆画面、吃配置、一个游戏动辄上百 G 资源的所谓 3A 体验要好很多，而且玩起来有一种超值的心理。&lt;/p>
&lt;p>引申来说，读书又何尝不是呢？经典的好书常看常新、历久弥新，影响深远。&lt;/p>
&lt;p>何必要追捧当前畅销的“佳作”，打个时间差，多看看过去经典作品，比一味追新，会更有收获。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 091 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/</link><pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-55-17.png" alt="Featured image of post 机器文摘 第 091 期" />&lt;h1 id="机器文摘-第-091-期">机器文摘 第 091 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="在终端命令行界面输入文本这事儿挺复杂">在终端命令行界面输入文本这事儿挺复杂
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-54-43.png"
width="690"
height="404"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/p>
&lt;p>如果工作中经常需要登陆远程主机 shell，使用终端的命令行界面进行文本输入是最频繁的事情了。&lt;/p>
&lt;p>然而很多时候这种文本输入的体验并不一致，很让人困惑。&lt;/p>
&lt;p>比如即便是资深的人士，也不敢保证在某个命令行窗口，键入 Ctrl+E 是将光标移动到行尾，Ctrl+A 移动到命令开头。&lt;/p>
&lt;p>这种行为是否有效，取决于各种因素，有的时候是 shell 的版本导致，或者对于快捷键绑定的方式不一样。&lt;/p>
&lt;p>或者干脆，如果你正好在某个古老命令的交互界面，那么你在键盘的方向键上按箭头以及按各种 Ctrl+ 快捷键，很可能得到这样的回显：“&lt;code>^[[D^[[D^[[C^[[C^&lt;/code>”。&lt;/p>
&lt;p>这一切是怎么回事？&lt;/p>
&lt;p>&lt;a class="link" href="https://jvns.ca/blog/2024/07/08/readline/" target="_blank" rel="noopener"
>《在终端中输入文本很复杂》&lt;/a>，这篇文章做了比较深入的分析。&lt;/p>
&lt;p>了解了背后的原理之后，就不会对终端的文本交互行为感到困惑了。&lt;/p>
&lt;p>简单概括：要想在命令行交互时获得比较一致的体验，取决于对一个叫做 readline 库的使用。&lt;/p>
&lt;p>所执行程序如果底层依赖 readline 做文本交互（事实上大部分是用这个库做的实现），即可保证一些基本的键盘响应一致：&lt;/p>
&lt;ol>
&lt;li>Ctrl+A 到行首；&lt;/li>
&lt;li>Ctrl+E 到行尾；&lt;/li>
&lt;li>Ctrl+U 删除当前行；&lt;/li>
&lt;li>Ctrl+W 向前删除一个词；&lt;/li>
&lt;li>Ctrl+左右箭头键：前后移动一个词；&lt;/li>
&lt;li>Ctrl+R 搜索历史记录；&lt;/li>
&lt;/ol>
&lt;p>最后，文章讨论了很多引申问题，比如 shell 的 vi 键绑定或者 emacs 绑定等等，还有很多细节问题会影响文本输入体验。&lt;/p>
&lt;h3 id="写作是思考的工具">写作是思考的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-55-03.png"
width="633"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="439px"
>&lt;/p>
&lt;p>如果你有什么想法，或者你深信不疑的观点，最好把它写下来，在写的过程中你也许会发现逻辑上的漏洞甚至错误。&lt;/p>
&lt;p>如果不写下来，只停留在想法上，你会觉得你的观点很完美，无懈可击，你就陷入这样自我欺骗的循环里了。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.henrikkarlsson.xyz/p/writing-to-think" target="_blank" rel="noopener"
>《如何在写作中思考》&lt;/a>花费大量篇幅展示并论证了一个观点：写作可以帮助你完善你的思维。&lt;/p>
&lt;p>写作可以迅速使你在脑海里模棱两可的东西固化成文字，使你开始怀疑这些文字的正确性。&lt;/p>
&lt;p>这个从动态思维到静态文字的过程，特别像量子力学所说的“波函数坍缩”。&lt;/p>
&lt;p>当一切皆有可能的东西变成实在，你就不再有理由给自己找借口：“我不是那个意思。。。”&lt;/p>
&lt;p>这种硬性的要求，迫使你进行更深入的思考，以及清晰的表达。&lt;/p>
&lt;h3 id="装在软驱里的电脑">装在软驱里的电脑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-55-17.png"
width="596"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://abe.today/blogs/main/floppy8-a-tiny-computer-in-a-floppy-drive" target="_blank" rel="noopener"
>《Floppy8 一个小电脑，但是在软驱里》&lt;/a>。&lt;/p>
&lt;p>作者逛 ebay 的时候发现了一个长相有点儿像古老电脑 Amiga 1010 磁盘驱动器的软驱，虽然不确定这就是 Amiga 的产品，但是设计感十足。&lt;/p>
&lt;p>总之就是，这个设备的外观一下子打动了他，福至心灵，情怀上脑，他决定将这个软驱买回来，然后改造一番。&lt;/p>
&lt;p>大概花了几个周的时间，作者实现了支持外插“游戏卡带”的小计算机，可以运行一些复古游戏，甚至能够播放 4k 视频。&lt;/p>
&lt;p>整个项目的亮点在于作者精心设计了一个可以插入软驱的卡带（实际存储用的 micro SD 卡），通过插入电脑来实现更换游戏内容。&lt;/p>
&lt;p>文中完整记录了制作过程。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="pcsx2-模拟器出了-20-正式版了">pcsx2 模拟器出了 2.0 正式版了
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-55-31.png"
width="690"
height="293"
loading="lazy"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="565px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pcsx2.net/blog/2024/pcsx2-2-release" target="_blank" rel="noopener"
>pcsx2&lt;/a> 是一个模拟索尼 PlayStation 2 游戏机的模拟器， 可以加载游戏光盘镜像进行游玩。&lt;/p>
&lt;p>此次发布 2.0 稳定版本比之前的 1.6.x 稳定版本在体验上有了巨大提升：&lt;/p>
&lt;ol>
&lt;li>使用 QT 作为界面渲染框架，支持现代化的全屏交互操作；&lt;/li>
&lt;li>更高性能的 cpu 、内存模拟，游戏体验提升；&lt;/li>
&lt;li>更高的兼容性，GTA 重影、极品飞车模糊、狂暴飞车天空看不见等大量的兼容性图形问题得到修复；&lt;/li>
&lt;li>支持单个游戏独立配置，有些游戏需要开启或关闭某些模拟器特性才能正常运行，可以单独给他配置，系统在加载时自动切换；&lt;/li>
&lt;li>渲染后端支持现代图形 API Vulcan ，渲染性能提升超过 30%；&lt;/li>
&lt;/ol>
&lt;h3 id="边缘设备上的whisper实时语音转录工具">边缘设备上的Whisper实时语音转录工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-56-06.png"
width="755"
height="528"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="343px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/maxbbraun/whisper-edge" target="_blank" rel="noopener"
>Whisper Edge&lt;/a>，利用硬件机器学习加速器实现始终在线的语音识别。当前支持Jetson Nano和Coral Edge TPU设备。&lt;/p>
&lt;h3 id="基于-python-的复古游戏引擎">基于 Python 的复古游戏引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-56-22.png"
width="690"
height="387"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/kitao/pyxel" target="_blank" rel="noopener"
>Pyxel&lt;/a>是一个 python 的经典像素风游戏制作引擎。&lt;/p>
&lt;p>由于像素风游戏的机制非常简单 (如：最多只能显示 16 种颜色、播放 4 种声音等)，现在你也可以轻松地享受这种游戏的制作过程。&lt;/p>
&lt;h3 id="使用-rust-编写的开源代码编辑器-zed-出-linux-版本了">使用 Rust 编写的开源代码编辑器 Zed 出 Linux 版本了
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-091-%E6%9C%9F/2024-07-16-08-56-33.png"
width="690"
height="583"
loading="lazy"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="284px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zed.dev/linux" target="_blank" rel="noopener"
>zed linux&lt;/a>&lt;/p>
&lt;p>可以直接通过一行命令脚本进行安装。&lt;/p>
&lt;blockquote>
&lt;p>编辑器本体代码采用 GPL 授权形式，服务器端组件使用 AGPL 授权，GPUI 用户界面框架则以 Apache 2 授权发布。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Zed 编辑器最大的优势是“高性能”，号称能够充分利用设备的 CPU、GPU 能力，让应用程序启动、文件加载、键盘响应速度“更快”，官方声称，与微软 Visual Studio Code 相比，Zed 的启动速度快了 4 倍，而 RAM 占用少了一半。&lt;/p>
&lt;/blockquote>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="谷歌浏览器内置插件">谷歌浏览器内置插件
&lt;/h3>&lt;p>今天在 V 站听说一个有趣的事情：谷歌浏览器里面带有一个隐藏的插件。&lt;/p>
&lt;p>当用户访问谷歌网站的时候（即网址为 google.com），这个插件就启动收集用户的硬件信息，内容相当的丰富。&lt;/p>
&lt;p>这个插件的代码是写死在 chrome 代码里的，也就是说用户无法屏蔽。&lt;/p>
&lt;p>看来，谷歌早就不是那个自称“不作恶”的谷歌了。 ​​​&lt;/p>
&lt;h3 id="物联网图形编程">物联网图形编程
&lt;/h3>&lt;p>昨天，我大舅竟然问我写程序的问题&lt;/p>
&lt;p>他买了个廉价单片机芯片电路板，准备折腾物联网智能家居控制。&lt;/p>
&lt;p>但是编写程序烧录不到板子上，找我远程连线。&lt;/p>
&lt;p>最后我发现是编程环境的中文路径问题，帮他解决了。&lt;/p>
&lt;p>他用的就是那种积木编程，少儿学编程的那种拖拽界面。&lt;/p>
&lt;p>看来想折腾不一定非得要什么语言，还是得在具体的项目上练。&lt;/p>
&lt;p>现在国内的物联网芯片商家很卷，二十块钱卖你一套板子，还送你编程教程、各种打包编译环境。&lt;/p>
&lt;h3 id="不能离线安装的游戏">不能离线安装的游戏
&lt;/h3>&lt;p>微软有个游戏叫模拟飞行（开飞机的），它的资源库大小有多大呢&lt;/p>
&lt;p>10PB。&lt;/p>
&lt;p>也就是 1万 T，或者 1千万 G。&lt;/p>
&lt;p>所以都装在本地的话，连硬盘都买不起。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 090 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-40-16.png" alt="Featured image of post 机器文摘 第 090 期" />&lt;h1 id="机器文摘-第-090-期">机器文摘 第 090 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="git-的故事">Git 的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-39-51.png"
width="656"
height="516"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="305px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.brachiosoft.com/posts/git/" target="_blank" rel="noopener"
>《Git 的故事：这次没有这么好玩》&lt;/a>（文章支持繁体中文和英文两个版本）。&lt;/p>
&lt;p>这是一篇真正的长文，长的几乎像一本小书了。&lt;/p>
&lt;p>在阅读这篇文章之前，我曾一度认为 Git 就是 Linus 这个大神在某个商用的版本管理工具不让使用之后，一怒之下花了一周时间再次创造的奇迹（上一次是 Linux）。&lt;/p>
&lt;p>然而，事实并非如此，Linus 虽然天才，但是也不是那么简单就拿出了 Git，虽然这次仍然体现了他的天才创意在里面，但这个工具的思想已经有了很多前人的经验在里面了。&lt;/p>
&lt;p>文章作者可能具有撰写科技传记的经验，故事写的看似平铺直叙，但又生动有趣。&lt;/p>
&lt;p>里面再次提到 Linus 所推崇的设计理念：“简单”，好的设计一定是简单的设计。&lt;/p>
&lt;p>看完既激励人心，又让人对那些默默无闻的社区贡献者心生敬意。&lt;/p>
&lt;blockquote>
&lt;p>Stack Overflow 在 2022 的調查中，Git 市佔率高達 94%，以至於隔年 Stack Overflow 乾脆放棄問大家用什麼版控系統。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>歷史上從來沒有一個版控軟體能如此稱霸市場，下一個能取代 Git 的會是什麼？不少人說可能會與 AI 有關，但沒人說得準，不過可以確信的是，過程中一定會有一連串的偶發事件和一群傑出的駭客。&lt;/p>
&lt;/blockquote>
&lt;h3 id="手把手教你写一个-json-解析器">手把手教你写一个 JSON 解析器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-40-01.png"
width="621"
height="400"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.davimiku.com/tutorials/json-parsing-rust-1" target="_blank" rel="noopener"
>《实现 JSON 解析 （Rust）》&lt;/a>，通过从头开始实现 JSON 解析来学习解析器的基础知识。&lt;/p>
&lt;p>这篇文章既适合想要入门解析器编写的人，又适合没用过 Rust 但是想看看 Rust 语言怎么样的人。&lt;/p>
&lt;p>作者写的非常细心，文章经过精心排版。&lt;/p>
&lt;p>连最基础的语法介绍都不放过，看完相当于学习了解析器的编写思路，也熟悉了一下 Rust 语言。&lt;/p>
&lt;h3 id="使用-javascript-模拟-2000-万个粒子">使用 JavaScript 模拟 2000 万个粒子
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-40-16.png"
width="690"
height="369"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/p>
&lt;p>即使在资源有限的情况下，通过创新和优化，也能够达成看似不可能的目标。&lt;/p>
&lt;p>&lt;a class="link" href="https://dgerrells.com/blog/how-fast-is-javascript-simulating-20-000-000-particles" target="_blank" rel="noopener"
>《使用 JavaScript 模拟 2000 万个粒子》&lt;/a>记录了一位拥有黑客精神的程序员在资源受限的情况下，进行大规模粒子实时渲染的探索故事。&lt;/p>
&lt;p>在手机上只用 CPU 的情况下，达到了渲染 100 万个粒子运动 60fps 的帧率。在他的 M1 芯片苹果电脑上达到了 2000 万粒子 20 fps，更高性能的桌面电脑上这个数字可达 3000 万。&lt;/p>
&lt;p>其实，对于大部分编程问题，要解决的根本问题就是如何组织数据的问题。&lt;/p>
&lt;p>拿本文这个问题来说，如果使用传统的数组对象，对上千万的粒子数据进行随机存取，会带来极低的缓存命中率和执行效率。&lt;/p>
&lt;p>作者也是首先就想到了这一点，他先从找到更合适的数组表示方法（选用了 JavaScript 里的 TypeArray）下手。&lt;/p>
&lt;p>通过 Web Workers 进行多线程计算。&lt;/p>
&lt;p>使用 ImageData 建立像素缓冲区，逐步提升效率。&lt;/p>
&lt;p>最终找到了一个天才的渲染策略：他用粒子网格计数作为纹理，渲染一个全屏的四边形，而不是一个个实例化的粒子。这种方法固定了每帧传输到GPU的数据量，使得渲染过程不再依赖于粒子的数量。达到了想要的目标。&lt;/p>
&lt;h3 id="intel-无线模块产品规格对比">intel 无线模块产品规格对比
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-40-44.png"
width="690"
height="183"
loading="lazy"
class="gallery-image"
data-flex-grow="377"
data-flex-basis="904px"
>&lt;/p>
&lt;p>我最近购买 intel 无线模块踩了个坑。&lt;/p>
&lt;p>Intel AX 系列无线模块是目前在笔记本、迷你主机、单片机等设备中广泛使用的网络硬件。&lt;/p>
&lt;p>当前主要流行的有：AX200、AX210、AX201、AX211 等版本，看上去感觉就是新旧程度不同，感觉都差不多。&lt;/p>
&lt;p>&lt;a class="link" href="https://ark.intel.com/content/www/cn/zh/ark/compare.html?productIds=189347%2C130293" target="_blank" rel="noopener"
>但是这里面有一个重大区别&lt;/a>。&lt;/p>
&lt;p>AX 系列尾号为 1 的型号，只能搭配 Intel 酷睿 10 代及以上 CPU 进行使用，原因是无线模块的部分功能需要依赖 CPU 里面的专属接口。&lt;/p>
&lt;p>而尾号为 0 的型号就没有这个问题，可以用于各种设备，包括 ARM 架构的单片机、AMD 的 x64 CPU 等。&lt;/p>
&lt;h3 id="那个惹人厌的-ds_store-文件夹哪儿来的">那个惹人厌的 .DS_Store 文件夹哪儿来的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-40-53.png"
width="548"
height="348"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="377px"
>&lt;/p>
&lt;p>如果你尝试过从苹果电脑拷贝文件夹到 Windows 电脑，你一定见过一个文件 .DS_Store ，特别的碍眼。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.arno.org/on-the-origins-of-ds-store" target="_blank" rel="noopener"
>《浅谈 DS_store 的起源》&lt;/a>，文章记录了这个玩意儿诞生的原因，以及为什么现在这么泛滥。&lt;/p>
&lt;p>一句话来说：苹果电脑的“文件资源管理器”程序需要用它来记录一些“元信息”，但是由于设计失误，导致过度创建这个文件。而且 .DS_Store 这个名字取得也太随意，跟它的作用并没有太大关系。&lt;/p>
&lt;p>ps：看来，无论哪儿的公司，多牛逼的程序员，都逃脱不了维护屎山的命运。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="命令行里的-excel但是-vim-风格">命令行里的 excel，但是 vim 风格
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-41-08.png"
width="669"
height="850"
loading="lazy"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="188px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/andmarti1424/sc-im" target="_blank" rel="noopener"
>sc-im&lt;/a>，是一个在终端控制台运行的电子表格程序。&lt;/p>
&lt;p>通过控制台的字符进行界面渲染，最大支持 65536 行、702 列数据。&lt;/p>
&lt;p>支持 csv、tab、xlsx 文件的导入，支持导出 markdown。&lt;/p>
&lt;p>最大的特点是采用了 vim 的命令风格，可以使用键盘快速操控导航。&lt;/p>
&lt;p>有强大的命令支持（跟 vim 一样采用 ：冒号输入），甚至可以绘制图表。&lt;/p>
&lt;h3 id="关爱程序员健康的十六进制编辑器">关爱程序员健康的十六进制编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-41-19.png"
width="690"
height="424"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/WerWolv/ImHex" target="_blank" rel="noopener"
>ImHex&lt;/a>是一个开源跨平台（Windows、MacOS、Linux、Web）十六进制编辑器，主要用于程序员调试和编辑二进制文件。&lt;/p>
&lt;p>使用 &lt;a class="link" href="https://github.com/ocornut/imgui" target="_blank" rel="noopener"
>Dear ImGUI&lt;/a> 作为界面渲染库。&lt;/p>
&lt;p>支持暗黑模式，据作者说，做这款编辑器主要是为了夜猫子程序员的视网膜着想。&lt;/p>
&lt;h3 id="用-vim-script-编写的-c-语言编译器">用 Vim script 编写的 C 语言编译器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-41-38.png"
width="690"
height="301"
loading="lazy"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="550px"
>&lt;/p>
&lt;p>Vim script 本来是在编辑器之神 Vim 中运行的脚本语言，用于给 Vim 编写扩展。&lt;/p>
&lt;p>现在有人用它&lt;a class="link" href="https://github.com/rhysd/8cc.vim" target="_blank" rel="noopener"
>实现了一个支持 C11 标准的编译器&lt;/a>。&lt;/p>
&lt;p>至于为什么要这样做，我想这就是骇客精神吧。&lt;/p>
&lt;p>如果非要说有点儿用的话，我推测，也许在 Vim 中作为一个 LSP 语法解析的后端或许能用。&lt;/p>
&lt;h3 id="基于-web-的视频特效工具">基于 Web 的视频特效工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-090-%E6%9C%9F/2024-07-09-08-41-47.png"
width="690"
height="398"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="416px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pikimov.com/" target="_blank" rel="noopener"
>PKIMOV&lt;/a>，Adobe After Effects 的免费平替。而且还不用安装，直接在线使用。&lt;/p>
&lt;p>如果有轻量的在线制作视频特效合成需求，可以尝试一下这个工具。&lt;/p>
&lt;p>操作界面与交互逻辑与 AE 非常相似。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="选择的问题">选择的问题
&lt;/h3>&lt;p>人们有时会感到后悔，是因为陷入了一个思维误区，即：认为自己有得选。&lt;/p>
&lt;p>实际上几乎所有人在所有时间，在面临选择的时候，都是没得选的。&lt;/p>
&lt;p>这牵涉到“自由意志”的哲学问题，但也是人性决定的，很多事情让你回到过去，你还是会做出一模一样的选择。&lt;/p>
&lt;p>当意识到自己没得选的时候，痛苦就会减少，很多人把精神托付给宗教也是这个原因，他们希望一切“让别人安排”。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 089 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/</link><pubDate>Tue, 02 Jul 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-36-52.png" alt="Featured image of post 机器文摘 第 089 期" />&lt;h1 id="机器文摘-第-089-期">机器文摘 第 089 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="圆角矩形的故事">圆角矩形的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-35-27.png"
width="360"
height="269"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="321px"
>&lt;/p>
&lt;p>苹果 Macintosh 电脑的图形界面开发，在早期层遇到过不少的挑战。&lt;/p>
&lt;p>怎样快速地绘制“圆角矩形”就是其中一项。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.folklore.org/Round_Rects_Are_Everywhere.html" target="_blank" rel="noopener"
>《圆角矩形无处不在》&lt;/a>记录了当时（1981年）乔布斯“逼迫”技术人员实现高速圆角矩形绘制的故事。&lt;/p>
&lt;p>当时 Macintosh 电脑所用的 68000 处理器在硬件层面并不支持浮点数预算，而绘制圆形或椭圆意味着要大量求解平方根，这是硬件级别的限制。&lt;/p>
&lt;p>工程师比尔发明了一个快速绘制圆形和椭圆的算法，不依靠高精度浮点运算，仅仅使用普通的加减法。&lt;/p>
&lt;p>当他兴高采烈地到公司进行演示时，并没有获得期望中的赞赏，而是乔布斯还想要自行车：“能不能快速绘制圆和矩形的组合？。。。”&lt;/p>
&lt;p>比尔有些失落，并且提出并没有绘制圆角矩形的必要，不过乔布斯不吃这一套，拉着他到大街上溜达了一圈，找出了很多现实中圆角矩形的例子。&lt;/p>
&lt;p>最终比尔被说服，回家熬了一个通宵实现了圆角矩形高速绘制的算法。&lt;/p>
&lt;h3 id="用傅里叶变换加速多项式相乘">用傅里叶变换加速多项式相乘
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-35-45.png"
width="546"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>&lt;/p>
&lt;p>不要被标题吓到，&lt;a class="link" href="https://www.alvarorevuelta.com/posts/fft-polynomials" target="_blank" rel="noopener"
>这是一篇很有趣且容易理解的文章&lt;/a>。&lt;/p>
&lt;p>只要初中数学水平，就知道如何进行多项式相乘：把他们的项分别相乘，然后再将结果加起来，最后合并同类项化简即可。&lt;/p>
&lt;p>然而使用上述方法的复杂度会随着多项式的阶数增高而迅速增高（具体来说是：O(n^2))。&lt;/p>
&lt;p>这篇文章以科普的方式，介绍了一种将复杂度降低至 O（nlogn）的方法，文章写的算是容易理解，具体要点如下：&lt;/p>
&lt;ol>
&lt;li>多项式可以使用傅里叶变换从“值域”转换为“频域”，如果采用 FFT 快速傅里叶变换算法则复杂度为 O（nlogn）。&lt;/li>
&lt;li>转换为“频域”后再进行相乘，其复杂度仅为 O（n），因为这变成了简单的元素相乘。&lt;/li>
&lt;li>再将相乘的结果转换为“值域”使用 IFFT 算法的话复杂度仍为 O（nlogn）。&lt;/li>
&lt;/ol>
&lt;p>虽然貌似步骤增多了，但是其计算速度得以极大提升（尤其是复杂的多项式）。&lt;/p>
&lt;p>那么问题来了，多项式相乘在现实中有什么用吗？&lt;/p>
&lt;p>答案是，在很多领域都有重要意义，包括不限于：信号处理、数字通信、计算机图形学、密码学、物理模拟、经济学和金融。&lt;/p>
&lt;h3 id="可编程字体">可编程字体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-35-58.png"
width="690"
height="543"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="304px"
>&lt;/p>
&lt;p>原来字体文件可以做这么多事情？&lt;/p>
&lt;p>用于 Firefox 和 Chrome 等应用程序的字体整形引擎 HarfBuzz 带有一个可执行 Wasm 整形器，允许使用任意代码来“整形”文本。&lt;/p>
&lt;p>然而有人发现它可以做的事情远不止给字体“整形”。&lt;/p>
&lt;p>&lt;a class="link" href="https://fuglede.github.io/llama.ttf/" target="_blank" rel="noopener"
>llama.ttf&lt;/a>，将一个大语言模型放入到字体文件里，并且可以在所有使用了 HarfBuzz 的软件中体验。&lt;/p>
&lt;p>只需选择那种字体，然后键入一串用于激活的魔法字符串，即可开始人机对话。。。&lt;/p>
&lt;p>作者还给出了一些用字体所做的有趣的事情，甚至可以用于打游戏。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="用开源代码组成的银河系">用开源代码组成的银河系
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-36-20.png"
width="690"
height="376"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="440px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://anvaka.github.io/" target="_blank" rel="noopener"
>代码星系&lt;/a>，基于各种流行的包管理体系，提取出软件包的信息，制作出类似星系云图的可视化效果。&lt;/p>
&lt;p>可以通过键盘鼠标进行交互漫游，有种在太空中飞速遨游的感觉。 ​​​&lt;/p>
&lt;h3 id="可视化远古-cpu-的运行">可视化远古 CPU 的运行
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-36-30.png"
width="690"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/floooh/v6502r" target="_blank" rel="noopener"
>v6502r&lt;/a>是一个将 6502 CPU 内部结构及其运行过程进行可视化的开源项目。&lt;/p>
&lt;p>&lt;a class="link" href="https://floooh.github.io/visualz80remix/" target="_blank" rel="noopener"
>visualz80remix&lt;/a>，则是基于 v6502r 做了一个在线页面，实时在网页里可视化 z80 CPU 的内部构造和指令执行过程。&lt;/p>
&lt;p>注：z80 和 6502 都是上世纪 70 年代生产的经典 CPU，字长均为 8 位，基于它们诞生了一大批经典的、物美价廉的个人电脑。&lt;/p>
&lt;h3 id="流体模拟">流体模拟
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-36-52.png"
width="567"
height="606"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="224px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://grantkot.com/ll/" target="_blank" rel="noopener"
>ll&lt;/a>，基于 WASM 技术的流体模拟页面 Demo，效果酷炫。可以设置重力加速、粒子颜色等，如果在手机上还能体验通过传感器控制。 ​​​&lt;/p>
&lt;h3 id="适用于现代-windows-的平铺桌面管理器">适用于现代 Windows 的平铺桌面管理器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-37-07.png"
width="690"
height="377"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="439px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/LGUG2Z/komorebi" target="_blank" rel="noopener"
>komorebi&lt;/a>是一个平铺窗口管理器，可作为Windows 10及更高版本中Microsoft桌面窗口管理器的扩展。&lt;/p>
&lt;p>komorebi 允许您使用一个控制台程序来控制应用程序窗口、虚拟工作区和显示显示器，该命令可与第三方软件（如 AutoHotKey）一起使用，以设置用户定义的键盘快捷键。&lt;/p>
&lt;h3 id="初创公司-resend-开源了他们公司">初创公司 Resend 开源了他们公司
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-089-%E6%9C%9F/2024-07-02-08-37-21.png"
width="690"
height="302"
loading="lazy"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="548px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://resend.com/handbook" target="_blank" rel="noopener"
>handbook&lt;/a>，这里是他们提供的全部手册，涵盖了公司经营理念、用人、技术栈、设计、售后服务、市场营销等运营整个公司相关的全部文档指南。&lt;/p>
&lt;p>对于如何运营一个现代化科技初创公司感兴趣的朋友可以了解一下。&lt;/p>
&lt;p>Resend 创立于 2023 年 1月份，主打产品是电子邮件相关的效率工具，公司愿景是提升人们的沟通效率。&lt;/p>
&lt;p>公司推崇远程办公和线上协作，并严格限制加班时间。&lt;/p>
&lt;p>选择将这些信息开源出来，也是对营销方式的一种探索。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="不负责任地猜想">不负责任地猜想
&lt;/h3>&lt;p>资源过剩的时代，帮人筛选东西应该也是一种刚需。&lt;/p>
&lt;p>不一定是物理实体，数字消费品也算。&lt;/p>
&lt;p>你帮别人严格把关，严格到极致，就产生了价值。&lt;/p>
&lt;p>这样，就连喜欢挑剔的人，也有了创造和输出价值的方式。&lt;/p>
&lt;p>不过，需要什么样的渠道呢？大众点评那种恐怕不行，还不够严格。&lt;/p>
&lt;p>东方甄选，网易严选这种带货卖货的，又太泛。&lt;/p>
&lt;p>应该再垂直一些。&lt;/p>
&lt;p>形成某些细分领域的权威。&lt;/p>
&lt;p>给现在的网络评测，测评人，恰饭的环境及业务逻辑升升级，不收厂商的钱，改收用户的钱，也许能探索一条新路。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 088 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/2024-06-25-08-51-28.png" alt="Featured image of post 机器文摘 第 088 期" />&lt;h1 id="机器文摘-第-088-期">机器文摘 第 088 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="通过重新定义问题来降低本质复杂性">通过重新定义问题来降低本质复杂性
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/2024-06-25-08-51-15.png"
width="639"
height="369"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="415px"
>&lt;/p>
&lt;p>在《人月神话》里，把复杂性分为两种：&lt;/p>
&lt;ol>
&lt;li>本质复杂性（Essential Complexity），指的是你要解决的问题本身的复杂性，是无法避免的。&lt;/li>
&lt;li>附属复杂性（Accidental Complexity），是指我们在解决本质问题时，所采用的解决方案而引入的复杂性。&lt;/li>
&lt;/ol>
&lt;p>书中提出了十分经典的，具有长久影响力的那句话：“没有银弹”：指的是软件本质的复杂度是无法避免的。&lt;/p>
&lt;p>然而，作为一名软件工程师，要懂得质疑。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://olano.dev/blog/a-note-on-essential-complexity" target="_blank" rel="noopener"
>《关于本质复杂性的笔记》&lt;/a>（原文是西班牙文，后被翻译为英文），就质疑了软件本质复杂性无法降低的观点。&lt;/p>
&lt;p>文章认为：&lt;/p>
&lt;blockquote>
&lt;p>即使我们不能仅通过改变软件来消除本质复杂性，但这并不意味着我们对此无能为力。如果我们能够改变问题的定义，或者让世界适应软件，而不是相反，那么软件解决的问题可以重新定义，本质不是一成不变的，而是可以讨论的，是工程师可以工作的一部分。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>通过重新定义问题，软件工程师的目标可以简化为减少任何类型的复杂性。这涉及到质疑假设、说服利益相关者，并可能需要重新考虑软件系统或组织本身的复杂性。&lt;/p>
&lt;/blockquote>
&lt;p>如果延申思考的话，解决任何问题都可以视为一个管理复杂度的任务。&lt;/p>
&lt;p>当你觉得问题麻烦无法解决的时候，有人已经重新定义了该问题。&lt;/p>
&lt;h3 id="光盘的历史意义">光盘的历史意义
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/2024-06-25-08-51-28.png"
width="669"
height="374"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="429px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.fastcompany.com/91128052/history-of-cd-roms-encarta-myst" target="_blank" rel="noopener"
>《光盘简史》&lt;/a>，讲述了CD-ROM技术及其在90年代对数字媒体和互动娱乐的影响，特别是它如何推动了多媒体百科全书和游戏的发展。&lt;/p>
&lt;p>文章回顾了CD-ROM作为存储介质的兴起和衰落，以及它在技术史上的地位。&lt;/p>
&lt;p>CD-ROM（光盘只读存储器）在90年代初作为新兴的存储技术，以其大容量和快速读取能力，彻底改变了数字媒体的存储和分发方式。&lt;/p>
&lt;p>CD-ROM使得丰富的多媒体内容，包括视频、音频和图像，能够被集成到单一的光盘上，为用户带来了前所未有的互动体验。&lt;/p>
&lt;p>微软的《Encarta》作为首款CD-ROM百科全书，不仅提供了丰富的信息，还集成了互动功能，标志着传统印刷百科全书向数字媒体的转变。&lt;/p>
&lt;p>游戏《Myst》利用CD-ROM的存储优势，创造了一个沉浸式的虚拟世界，成为当时最畅销的电脑游戏之一。&lt;/p>
&lt;p>CD-ROM的普及促进了家庭电脑的升级，加速了互联网和在线媒体的发展，为后来的数字时代奠定了基础。&lt;/p>
&lt;p>尽管CD-ROM在技术上具有重要意义，但随着更高效存储技术的出现，如DVD和在线流媒体，CD-ROM逐渐退出了主流市场。&lt;/p>
&lt;p>CD-ROM时代的产品，如《Encarta》和《Myst》，不仅是技术成就，也成为了90年代文化和技术发展的重要标志，值得被保存和研究。&lt;/p>
&lt;h3 id="怎样做大数运算">怎样做大数运算？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/2024-06-25-08-51-38.png"
width="690"
height="132"
loading="lazy"
class="gallery-image"
data-flex-grow="522"
data-flex-basis="1254px"
>&lt;/p>
&lt;p>现在计算机大部分都是 64 位的字长，64 位用于表示整型数字的话，最大可以到 18,446,744,073,709,551,615&lt;/p>
&lt;p>如果超出这个大小，还能算吗？&lt;/p>
&lt;p>如果你手头有一个 Python 解释器（C 实现版本），你可以尝试在它的交互命令中输入比较大的数字让他进行运算试试。&lt;/p>
&lt;p>你会发现 CPython 可以处理非常大的数字，他是怎么实现的？&lt;/p>
&lt;p>&lt;a class="link" href="https://austinhenley.com/blog/bignum1.html" target="_blank" rel="noopener"
>《动手写一个大数计算库》&lt;/a>，提供了一种简单易懂的方法。&lt;/p>
&lt;p>作者首先翻看了 CPython 的源码，找到了大数处理部分，发现比较复杂（超过 6000 行代码和 100 多个函数）。&lt;/p>
&lt;p>然后自己动手写了一个极简的（只支持：比较大小、加、乘运算，不过其它的也好处理）。&lt;/p>
&lt;p>核心思路是将数字用字符串存储起来，然后按单个字符为一位进行对应计算。&lt;/p>
&lt;p>虽然实现不完整，但是很容易就能理解他的代码思想。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="俄罗斯方块字体">俄罗斯方块字体
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-088-%E6%9C%9F/2024-06-25-08-52-03.png"
width="690"
height="349"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="474px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://erikdemaine.org/fonts/tetris/?text=hello&amp;#43;world&amp;amp;speed=10" target="_blank" rel="noopener"
>tetris-font&lt;/a>&lt;/p>
&lt;p>这个网站可以用俄罗斯方块将你输入的字符拼凑出来，并带有动画效果。&lt;/p>
&lt;p>只支持 26 个英文字母，不支持标点符号和其他字符。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="程序排错的通用思路">程序排错的通用思路
&lt;/h3>&lt;p>最近指导同事解决了几个他们一度认为不可能解决的技术问题。&lt;/p>
&lt;p>给他们信心带来极大提升的同时，我也在思考这背后的统一方法。&lt;/p>
&lt;p>实际上整个解决过程我并没有亲自动手。&lt;/p>
&lt;p>我只是给他们提供思路。&lt;/p>
&lt;p>具体操作和实施都是他们进行的，因为我是通过互联网远程遥控指挥他们。&lt;/p>
&lt;p>但是这背后的思想其实都是同一个思想。&lt;/p>
&lt;p>那就是“逐步缩小错误发生的范围”。&lt;/p>
&lt;p>怎么理解这个？&lt;/p>
&lt;p>就是，首先拿出一个基础环境，这个基础环境绝对正常，然后一步一步引入有问题的模块。&lt;/p>
&lt;p>先保证一个最小化的正确环境，将所有模块都屏蔽掉，逐渐打开它们，慢慢加到一个出错的临界点。&lt;/p>
&lt;p>直到定位到一个模块，一打开，就出错，那么范围就缩小到了这个地方了。&lt;/p>
&lt;p>这就是“缩小范围”。&lt;/p>
&lt;p>当然我在这里所说的模块。&lt;/p>
&lt;p>不一定是一个物理实体。&lt;/p>
&lt;p>可能是一个函数、一段代码、一个子系统。&lt;/p>
&lt;p>这个方法看似简单。但要在合理的时间合理的地点运用起来，它的力量非常强大。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 087 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/</link><pubDate>Tue, 18 Jun 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-47-55.png" alt="Featured image of post 机器文摘 第 087 期" />&lt;h1 id="机器文摘-第-087-期">机器文摘 第 087 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="家常软件和赤脚程序员">家常软件和赤脚程序员
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-47-35.png"
width="690"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;p>在端午假期这几天，我在 chatGPT 的帮助下给老婆写了一个浏览器插件，它的功能只有一个，将网页中任何图片上的字给扣出来。&lt;/p>
&lt;p>写的过程虽然不算轻松，但受益于 AI 技术的强大，在写代码方面不用动用太多脑力，很多不熟悉的 API 或者方法调用，都可以借助 AI 实现。&lt;/p>
&lt;p>从使用结果上来看，老婆十分满意，而且有一种尊贵 VIP 的感觉。&lt;/p>
&lt;p>&lt;em>这款插件目前过于简陋，我暂时还无法将其上架至插件商店。&lt;/em>&lt;/p>
&lt;p>我还没来及给这样的软件下定义，今天就看到一个有意思的名词，“Home cooked app”————家常软件。&lt;/p>
&lt;p>像“家常菜”那样的家常软件，虽然不像饭店里的那样具有商业价值，但是是你亲手端出来的，别有一番风味。&lt;/p>
&lt;p>&lt;a class="link" href="https://maggieappleton.com/home-cooked-software" target="_blank" rel="noopener"
>《home-cooked-software》&lt;/a>，是一篇演讲记录，作者提到了家常软件这个概念，并且表达了对于其发展的个人预判。&lt;/p>
&lt;p>作者认为，随着 AI 能力的提升，软件开发的门槛急速降低，人们对于这种以前“不好意思提出的极度个性的需求”将迅速膨胀。&lt;/p>
&lt;p>“家常软件”开发者将越来越多，并且进入一个黄金时代。&lt;/p>
&lt;p>作者甚至参考中国上世纪 60 年代的“赤脚医生”概念，创造了一个“赤脚开发者”称谓。&lt;/p>
&lt;p>演讲内容值得一看，摘抄部分有趣的观点如下（坦白说，我觉得作者有些过于乐观了）：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用专业软件就像是餐厅专业厨师制作的一顿饭或蛋糕，可能比家常的好吃多了，但是你无法控制它的制作方式，以及他们在里面放了多少黄油。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>商业的标准化软件是由不太了解我们的人为我们制作的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>工业软件的定位迫使它们不可能满足小众需求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这个世界充满了需要解决的问题。虽然并非所有这些问题都有软件形状的解决方案，但其中有一大堆问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将工具和逻辑链接在一起的架构使语言模型比其他方式更强大，最终能够在我们现有的编程环境中完成相当复杂的任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这些人（指赤脚开发者）深深植根于他们的社区，因此他们了解周围人的需求和问题。因此，他们完全有能力解决本地问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="史上最好的屏幕保护程序">史上最好的屏幕保护程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-47-55.png"
width="690"
height="389"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>这里有个故事&lt;a class="link" href="https://gizmodo.com/you-can-now-enjoy-the-best-screensaver-of-all-time-in-y-1847738622" target="_blank" rel="noopener"
>讲述了 Windows NT 屏保 &amp;ldquo;3D Pipes&amp;rdquo; 的诞生&lt;/a>。&lt;/p>
&lt;p>当时 Windwos NT 3.5 首次实现了对 OpenGL 的完整硬件加速支持，但苦于没有什么程序可以展示这个牛逼特性。&lt;/p>
&lt;p>于是他们在内部团队搞了一个编程竞赛，谁能写的程序被投票最多，就把它加入到系统自带的屏幕保护程序中。&lt;/p>
&lt;p>之所以要作为屏幕保护程序推出，主要是出于安全考虑，因为一旦程序出毛病倒不至于给系统带来太大麻烦，告诉用户先别用那个屏保即可。&lt;/p>
&lt;p>于是诞生了一组酷炫的、发挥 OpenGL 图形优势的程序，其中包括：3D 文本、3D 迷宫、3D 飞行物，以及本文主角：3D Pipes。&lt;/p>
&lt;p>文章最后还提供了&lt;a class="link" href="https://1j01.github.io/pipes/" target="_blank" rel="noopener"
>一个在线体验该屏保的地址&lt;/a>。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="苹果的-备忘录数学计算器-开源版">苹果的 “备忘录数学计算器” 开源版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-49-12.png"
width="749"
height="474"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="379px"
>&lt;/p>
&lt;p>苹果 WWDC 2024 大会上，在 iPad 上演示通过键入或手写数学表达式后，利用 AI 可立即呈现解答结果。&lt;/p>
&lt;p>在 GitHub 上发现有一个开源版 &lt;a class="link" href="https://github.com/ayushpai/AI-Math-Notes" target="_blank" rel="noopener"
>“AI Math Notes”&lt;/a>，完美实现类似的功能。&lt;/p>
&lt;p>这是一款用 Python 语言开发的交互式绘图应用，允许你在画布上绘制数学方程，再使用多模态 LLM 来计算并在旁边显示结果。&lt;/p>
&lt;h3 id="xv6-中文文档">xv6 中文文档
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-49-35.png"
width="611"
height="1531"
loading="lazy"
class="gallery-image"
data-flex-grow="39"
data-flex-basis="95px"
>&lt;/p>
&lt;p>xv6 是 MIT 开发的一个教学用的完整的类 Unix 操作系统，并且在 MIT 的操作系统课程 6.828 中使用。通过阅读并理解 xv6 的代码，可以清楚地了解操作系统中众多核心的概念，对操作系统感兴趣的同学十分推荐一读！这份&lt;a class="link" href="https://th0ar.gitbooks.io/xv6-chinese/content/index.html" target="_blank" rel="noopener"
>中文翻译的 MIT xv6 文档&lt;/a>是阅读代码过程中非常好的参考资料。&lt;/p>
&lt;h3 id="古老的绘图设备收藏">古老的绘图设备收藏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-49-44.png"
width="690"
height="374"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://drawingmachines.org/" target="_blank" rel="noopener"
>DrawingMachines.org&lt;/a>，是一个专注于收集和记录光学、机械和自动化绘图机器、设备、辅助工具和仪器的档案网站。&lt;/p>
&lt;p>目标是揭示那些被遗忘、过时或不熟悉的绘图技术，记录艺术与技术之间关系的历史，并尝试揭示他们的原理。&lt;/p>
&lt;p>去看一下在没有计算机的时代，人们是怎样作出精美的图形的吧。&lt;/p>
&lt;h3 id="无需-flash-插件的小游戏网">无需 flash 插件的小游戏网
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-49-55.png"
width="690"
height="441"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://1u9u.com/" target="_blank" rel="noopener"
>1u9u&lt;/a>，1.8 万个 flash 小游戏。不需要安装 flash 插件，直接在线玩。&lt;/p>
&lt;p>每个游戏均有截图。&lt;/p>
&lt;p>使用 &lt;a class="link" href="https://ruffle.rs/" target="_blank" rel="noopener"
>ruffle&lt;/a> 模拟 flash 插件。 ​​​&lt;/p>
&lt;h3 id="一个干净的从零开始编写的-html-渲染库">一个干净的，从零开始编写的 HTML 渲染库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-50-07.png"
width="690"
height="280"
loading="lazy"
class="gallery-image"
data-flex-grow="246"
data-flex-basis="591px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/lexbor/lexbor" target="_blank" rel="noopener"
>lexbor&lt;/a>，一个开源的 HTML 渲染库。&lt;/p>
&lt;p>对于有志于浏览器开发的程序员（在下佩服！），这个库可以看一下，是一个完整的 HTML 渲染引擎，而且十分简洁。&lt;/p>
&lt;p>主要特点：&lt;/p>
&lt;ul>
&lt;li>纯 C 语言实现，速度快，支持 C99。&lt;/li>
&lt;li>没有任何外部依赖。&lt;/li>
&lt;li>模块化设计，每个模块相对独立，可单独使用。&lt;/li>
&lt;/ul>
&lt;h3 id="一个超好的-sooundfonts-资源站">一个超好的 SooundFonts 资源站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-50-27.png"
width="690"
height="546"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>发现一个超级好的 &lt;a class="link" href="https://baike.baidu.com/item/Sound%20Font/3442190" target="_blank" rel="noopener"
>SoundFonts&lt;/a> 资源站&lt;a class="link" href="https://sites.google.com/site/soundfonts4u/" target="_blank" rel="noopener"
>soundfonts4u&lt;/a>。&lt;/p>
&lt;p>SOUNDFONT，顾名思义，就是“声音字体”。文件扩展名为 *.SF 或 *.SF2。 它是由新加坡创新公司 Creative Technology 在中档声卡上 (EMU SoundBlaster)使用的音色库技术（现在用的较少了）。&lt;/p>
&lt;p>但是这项技术十分牛逼，可以做到用很逼真的音色来播放 MIDI 歌曲，虽然现在随着网速的增加，大家已经在线可以听无损音乐了，但是 MIDI 有它自己的韵味儿。&lt;/p>
&lt;p>soundfonts4u 这个网站里提供了很多优质的 sf 格式的音色库，最大的竟然高达 968MB，当然不敢用创新声卡加载了，但是网站也提供了软件用于加载音色。&lt;/p>
&lt;p>希望在电脑上播放高品质 MIDI 音乐的朋友绝对要收藏。&lt;/p>
&lt;h3 id="把网站保存在-zip-包里">把网站保存在 zip 包里
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-087-%E6%9C%9F/2024-06-18-08-50-40.png"
width="557"
height="334"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/potahtml/mpa-archive" target="_blank" rel="noopener"
>map-archive&lt;/a>是一个运行在 node.js 环境的爬虫工具，可以将多页面网站保存到本地的 zip 包里，并且重新通过这个 zip 包在本地进行发布站点。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="人们只想回到过去">人们只想回到过去
&lt;/h3>&lt;p>人们对旧时的物件、文艺作品、甚至演员艺人，往往都会加上一层美化滤镜，不由自主地觉得越古老就越“正宗”、“功夫越深”，并深切鄙视当下。&lt;/p>
&lt;p>造成这种行为的根本原因在于，生命对于时间之箭的无能为力，人几乎从一出生开始，就拼命地想回到过去。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 086 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-57-02.png" alt="Featured image of post 机器文摘 第 086 期" />&lt;h1 id="机器文摘-第-086-期">机器文摘 第 086 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="用三个月时间做一个游戏引擎">用三个月时间做一个游戏引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-55-50.png"
width="634"
height="419"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;p>游戏编程、图形编程总是那么迷人，但是对于初学者来说往往不知该从何处下手。&lt;/p>
&lt;p>有句话叫读万卷书不如行万里路，学习一项技能最好的方法就是动手去做。&lt;/p>
&lt;p>不用设想一步到位或者找到一条完美的训练路径，或者做好了十足准备再去动手，那样你可能永远也无法入门。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://edw.is/learning-vulkan/" target="_blank" rel="noopener"
>《我是怎样学 Vulkan 编程的》&lt;/a>文章作者便是十足的行动派，在 0 经验的情况下，三个月撸了一个还算凑合的游戏引擎。&lt;/p>
&lt;p>在本文里作者详细记录了学习过程和经验，对于想涉猎游戏图形编程的人来说，是一份不错的参考（也是激励）。&lt;/p>
&lt;p>主要内容如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>要学习的基础知识：OpenGL 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一些需要避免的陷阱：不要试图做一个全能的东西。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择合适的图形 API：根据你希望运行的平台决定，目前在 Windows + Linux 开发跨平台小游戏似乎 Vulkan 是首选。WebGPU 也可以，但是目前标准还不够稳定。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Vulkan 学习资料。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>引擎架构设计。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>学习心得：主要是踩的坑。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="cpu-的缓存为什么要分级">CPU 的缓存为什么要分级？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-56-05.png"
width="453"
height="648"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="167px"
>&lt;/p>
&lt;p>现代 CPU 一般把缓存分为 3 级，L1、L2、L3，容量依次增加，速度依次降低。&lt;/p>
&lt;p>有网友询问，为什么不能把一级缓存做得跟三级缓存一样大，然后去掉后面两级不就行了吗？&lt;/p>
&lt;p>答案是不行，&lt;a class="link" href="https://fgiesen.wordpress.com/2016/08/07/why-do-cpus-have-multiple-cache-levels" target="_blank" rel="noopener"
>这篇文章给出了解释&lt;/a>。&lt;/p>
&lt;p>简单来说：&lt;/p>
&lt;p>1、想象一下，你是公司的CEO，你负责处理所有的决策和任务。但你不可能记住每一个细节，所以你需要一个助手团队来帮助你。&lt;/p>
&lt;p>2、你的办公桌抽屉（L1缓存）是最方便的，里面放着你经常需要快速查阅的文件和信息。当需要做出快速决策时，你可以直接从抽屉里拿文件，这非常快。&lt;/p>
&lt;p>3、但是，抽屉的空间有限，不能放太多东西。所以，你还有一个更大的文件柜（L2缓存），它就在你的办公室里，虽然不如抽屉那么快，但比去公司的档案室（主存储器）要快得多。&lt;/p>
&lt;p>4、如果文件不在抽屉或文件柜里，你就得去档案室（L3缓存或主存储器）查找，这需要更多的时间，但档案室可以存储大量的文件和信息。&lt;/p>
&lt;p>回到最初的问题，如果把 L1 做的跟 L3 一样大行吗？&lt;/p>
&lt;p>如果做那么大，他就不是抽屉了（L1）了，你也不可能在一个像房间那么大的抽屉里快速去到想要的东西。&lt;/p>
&lt;h3 id="当心你的-wifi-路由被安装后门">当心你的 Wifi 路由被安装后门
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-56-24.png"
width="690"
height="402"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;p>有一个名叫 Sam 的电脑高手，在家里的网络中尝试进行一项秘密任务：利用一个漏洞从一台服务器上窃取文件。&lt;/p>
&lt;p>为了这个任务，他启动了一个小型的网络服务器，用来接收那些偷偷摸摸的数据。&lt;/p>
&lt;p>但是，当他测试自己的服务时，一件奇怪的事情发生了。&lt;/p>
&lt;p>日志文件显示，有一个神秘的“访客”几乎在他发送测试信息的同时，就复制并发送了完全相同的信息。&lt;/p>
&lt;p>这就像是有人悄悄地站在 Sam 的肩膀上，看着他的每一个动作，然后迅速模仿。&lt;/p>
&lt;p>Sam 感到非常困惑，心想：“这真是太奇怪了，难道我的电脑被黑客入侵了吗？”于是，Sam 决定用他的 iPhone 再试一次，结果发现那个神秘的IP地址又出现了，就像是一个看不见的影子，紧紧跟随着他的每一个网络请求。&lt;/p>
&lt;p>Sam 开始调查这个神秘的 IP 地址，就像侦探追踪罪犯一样。他发现这个 IP 地址属于一个叫 DigitalOcean 的公司，而且与一些可疑的网站有关联，这些网站曾经被用来进行网络钓鱼攻击。Sam 意识到，这个 IP 地址可能是一个网络犯罪团伙的老巢。&lt;/p>
&lt;p>时间飞逝，三年后的一次度假中，Sam和一群网络安全专家朋友聊天时提起了这件事。&lt;/p>
&lt;p>他们决定像一群网络世界的探险家一样，深入挖掘这个谜团。&lt;/p>
&lt;p>他们发现了一个模式，表明可能有恶意软件使用特殊的技巧来隐藏自己的行踪。&lt;/p>
&lt;p>Sam 进一步探索了一种叫做 TR-069 的神秘协议，这是互联网服务提供商用来远程管理用户的网络设备的后门。&lt;/p>
&lt;p>他发现了一个巨大的安全漏洞，这个漏洞允许任何人通过网络进入并控制 Cox 公司客户的设备，就像是给了黑客一把万能钥匙。&lt;/p>
&lt;p>最后，Sam像一个负责任的超级英雄一样，向Cox公司报告了这些漏洞。&lt;/p>
&lt;p>Cox公司迅速行动，修复了这些安全问题，阻止了潜在的网络灾难。&lt;/p>
&lt;p>看完&lt;a class="link" href="https://samcurry.net/hacking-millions-of-modems" target="_blank" rel="noopener"
>这个 Sam 的故事&lt;/a>，我看了一眼我家的 Wifi 路由器（也支持远程控制），我现在觉得它一点儿也不安全。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="c-封装的-webgpu-api">C 封装的 WebGPU API
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-56-47.png"
width="690"
height="575"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/eliemichel/WebGPU-Cpp" target="_blank" rel="noopener"
>WebGPU-Cpp&lt;/a>：为WebGPU原生API提供单文件、零开销、C++风格的封装，使C API在C++编程中更为简洁，主要增加语法糖以减少冗余。&lt;/p>
&lt;h3 id="pong-游戏的网页升级版">Pong 游戏的网页升级版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-57-02.png"
width="690"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://raould.github.io/pn0gstr0m/" target="_blank" rel="noopener"
>paddle&lt;/a>，一个 web 2d 游戏，类似早期的 Pong 游戏，跟计算机对打乒乓球，球速降低了（反应时间增加了），但是球会根据回合次数自动分裂，以对方接不住的球数为己方得分。我玩了一会儿，已加入摸鱼收藏夹。 ​​​&lt;/p>
&lt;h3 id="c-开发图形引擎电子书">C++ 开发图形引擎电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-57-15.png"
width="641"
height="1926"
loading="lazy"
class="gallery-image"
data-flex-grow="33"
data-flex-basis="79px"
>
&lt;a class="link" href="https://italink.github.io/ModernGraphicsEngineGuide/" target="_blank" rel="noopener"
>《 现代图形引擎入门指南 》&lt;/a>系列文章适用于有志于从事 C++ 开发的学生，主要技术路线是图形和引擎，对于其他相关方向，前面一些章节也具有参考意义。&lt;/p>
&lt;blockquote>
&lt;p>该系列文章旨在归纳现代图形引擎开发必备的基本技术路线，它并不是一个细致入微的教程，也没有包含太多的高级篇章，这些文章的目的不是为了让读者走捷径，而是为了让初学者 少走弯路 ，把更多的精力放在更高级的理论技术上面，在此之前，读者至少要达到一个这样的境界 — I can do anything if I want&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在这些文章中，你能学到：
🌟现代C++开发工作流 ：工具链、平台、内存、库、宏、模板、反射。
🌟GUI及工程架构
🌟现代化的图形API ：是Vulkan，还是DX12、Metal呢？哦，都不是，但包您满意，拭目以待。
🌟Unreal Engine 5&lt;/p>
&lt;/blockquote>
&lt;h3 id="用-gpt-把小爱音箱变成-ai-语音助手">用 GPT 把小爱音箱变成 AI 语音助手
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-57-34.png"
width="690"
height="404"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/idootop/mi-gpt" target="_blank" rel="noopener"
>MiGPT&lt;/a>，旨在将小爱音箱打造成你的专属 AI 语音助手。&lt;/p>
&lt;blockquote>
&lt;p>通过该项目，你可以将小爱音箱和米家智能设备与 ChatGPT 的理解能力完美融合，打造成一个懂你、有温度与你共同进化的家。&lt;/p>
&lt;p>项目亮点：&lt;/p>
&lt;ul>
&lt;li>LLM 回答：通过接入 ChatGPT 等大模型，让你的小爱音箱变身聊天高手。&lt;/li>
&lt;li>角色扮演：一秒调教小爱，成为你的完美伴侣或贴心闺蜜。&lt;/li>
&lt;li>流式响应：可快速响应你的指令，对你的爱意秒回。&lt;/li>
&lt;li>长短期记忆：记住与你每一次的对话，越聊越默契。&lt;/li>
&lt;li>自定义 TTS：可接入豆包同款音色替换小爱同学的语音。&lt;/li>
&lt;li>智能家居 Agent：根据你的心情为你播放喜欢的音乐，调节灯光，逗你开心。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="在线鼓机">在线鼓机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-086-%E6%9C%9F/2024-06-11-08-57-48.png"
width="690"
height="494"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://martinwecke.de/108/" target="_blank" rel="noopener"
>108&lt;/a>，这个网站提供了一个在线鼓机，具有 5 个经典采样。&lt;/p>
&lt;p>可以帮你快速制作一组 beat 节奏，并导出 wav 文件到本机。&lt;/p>
&lt;p>作者开放了其源码：https://github.com/hatsumatsu/108 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="用与学">用与学
&lt;/h3>&lt;p>所有的工具，都是在实际项目中边用边学才掌握。&lt;/p>
&lt;p>不存在单独的课程去把它训练好，那样即使当时会了过了也忘。&lt;/p>
&lt;p>工具类的技能，跟语文数学这种基础知识有些不同。工具类技能非常侧重于在实际项目上的练习。&lt;/p>
&lt;p>不要想着找个时间像上课那样专门把他学好，应该拿起就用，在实际的 project 中反复使用，直到烂熟于心。&lt;/p>
&lt;p>推荐这个项目列表：https://github.com/practical-tutorials/project-based-learning&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 085 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/</link><pubDate>Tue, 04 Jun 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-26-37.png" alt="Featured image of post 机器文摘 第 085 期" />&lt;h1 id="机器文摘-第-085-期">机器文摘 第 085 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="没有硬件加速的年代怎样快速求平方根">没有硬件加速的年代，怎样快速求平方根
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-23-40.png"
width="673"
height="324"
loading="lazy"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="498px"
>&lt;/p>
&lt;p>约翰卡马克当年在编写 Quake （雷神之锤）时，找了一个快速求平方根的算法，极大地提升了当时依赖 CPU 进行 3D 图形渲染的速度。&lt;/p>
&lt;p>不过卡据马克自己说，这个算法他也是抄来的，并且当时也没有真正理解代码中出现的那一串神奇的魔术数字&lt;code>0x5f3759df&lt;/code>（还在代码注释里写了句 WTF）。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://github.com/francisrstokes/githublog/blob/main/2024/5/29/fast-inverse-sqrt.md" target="_blank" rel="noopener"
>《关于快速求平方根倒数算法的一切》&lt;/a>，给出了该算法从数学层面的解释。&lt;/p>
&lt;p>详细解释了那串魔术数字&lt;code>0x5f3759df&lt;/code>的由来。&lt;/p>
&lt;p>要想弄明白该算法的原理，既需要了解计算机存储浮点数的原理，又要具有一定的数学知识。&lt;/p>
&lt;p>看完之后，忍不住赞叹，发明这个算法的人简直是个天才。&lt;/p>
&lt;p>因为该算法直接利用了计算机存储浮点数的方式（1位符号位，8位指数位，23位有效数字位）以及指数值与平方根算法的猜测值之间的关系，给求平方根这件事巧妙地增加了“硬件级别的加速”。&lt;/p>
&lt;h3 id="400-行代码实现一个-reactjs">400 行代码实现一个 React.js
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-24-07.png"
width="668"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>如果你是一个前端工程师，你可能已经使用 React 一段时间了，但可能还不知道它的工作原理。&lt;/p>
&lt;p>&lt;a class="link" href="https://webdeveloper.beehiiv.com/p/build-react-400-lines-code" target="_blank" rel="noopener"
>《Build Your Own React.js in 400 Lines of Code》&lt;/a>一文作者发布了一个项目，&lt;a class="link" href="https://github.com/ZacharyL2/mini-react" target="_blank" rel="noopener"
>使用 400 行 js 代码实现一个自己的 React 框架&lt;/a>（具有 React 的核心能力）。&lt;/p>
&lt;p>文章从 JSX 的概念讲起，逐步实现了一个渲染网页元素 Render 渲染器。&lt;/p>
&lt;p>由于只实现核心功能，所以代码很简练，便于理解背后原理。&lt;/p>
&lt;h3 id="通过一个真实的项目学习数据库表设计">通过一个真实的项目学习数据库表设计
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-24-18.png"
width="623"
height="760"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://kb.databasedesignbook.com/posts/google-calendar/" target="_blank" rel="noopener"
>《Database Design for Google Calendar: a tutorial》&lt;/a>是一篇关于数据库设计的教程。&lt;/p>
&lt;p>旨在展示如何为一个具有相当复杂性的现实世界项目（Google日历的克隆版）设计数据库表。&lt;/p>
&lt;p>通过阅读本文，可以跟随作者一步步构建起一个功能完备的 Google日历系统克隆版，从概念到实现，每个细节都经过精心打磨。&lt;/p>
&lt;p>对于从模糊的需求概念到系统设计这类任务，本文提供了一种全新的、以最小化建模为核心的设计方法论。&lt;/p>
&lt;h3 id="通过降低固态硬盘容量以增加其读写寿命">通过降低固态硬盘容量以增加其读写寿命
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-24-38.png"
width="690"
height="344"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>固态硬盘（SSD）的 QL C和 SLC 是指不同的闪存技术，它们根据存储单元中可以存储的数据位数来区分。&lt;/p>
&lt;p>QLC（Quad-Level Cell） 中，每个存储单元可以存储 4 位（bit）的数据，即 2 个比特（bit）的信息。与之前的技术相比，QLC 提供了更高的存储密度，这意味着在相同的物理空间内可以存储更多的数据。QLC技术的一个优点是成本较低，因为它能在更小的空间内存储更多数据。然而，QLC闪存的写入寿命和性能通常低于SLC和MLC闪存。QLC SSD通常适合于对写入次数要求不高的应用场景，例如大容量数据存储。&lt;/p>
&lt;p>SLC（Single-Level Cell） 中，每个存储单元只存储 1 位数据。SLC 闪存因其较高的写入寿命和更快的读写速度而受到青睐，但成本相对较高，且存储密度较低。SLC SSD通常用于需要高性能和高可靠性的应用，例如服务器、高端个人电脑和其他对性能要求极高的场景。&lt;/p>
&lt;p>我一直以为这种颗粒生产出来就是固定形式的了，但有一篇文章刷新了我的认知。&lt;/p>
&lt;p>&lt;a class="link" href="https://theoverclockingpage.com/2024/05/13/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance/" target="_blank" rel="noopener"
>通过降低固态硬盘容量以增加其读写寿命&lt;/a>，这篇文章介绍了一种方法，通过重新开卡的方式（指对新的SSD进行初始化设置，使其能够被操作系统识别并使用的过程，应该就是低级格式化），将固态硬盘颗粒从 QLC 改为 SLC，增加硬盘读写寿命的方法。但同时也牺牲了容量。&lt;/p>
&lt;p>文章里，作者将一块固态硬盘从 500G 改为 120G 容量，但擦写寿命预期从原有的 120TB 提升到了 40000TB（增加了 33 倍）。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="运行在浏览器里的雷神之锤">运行在浏览器里的雷神之锤
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-25-00.png"
width="690"
height="523"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://js13kgames.com/entries/q1k3" target="_blank" rel="noopener"
>q1k3&lt;/a>，运行在浏览器里 13k 大小的雷神之锤。&lt;/p>
&lt;h3 id="又一个在线学习-css-布局的小游戏">又一个在线学习 CSS 布局的小游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-25-09.png"
width="534"
height="539"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="237px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://cssgridgarden.com/" target="_blank" rel="noopener"
>cssgridgarden&lt;/a>，一个专门学习 CSS Grid 布局的小游戏，通过编写 CSS 代码来通过关卡。&lt;/p>
&lt;h3 id="94-岁的视频-up-主">94 岁的视频 UP 主
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-25-38.png"
width="690"
height="361"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/p>
&lt;p>在油管上看到一个数学UP主，讲解细致入微，步骤详尽（从来不略），更难得的是他已经94岁高龄，且以教育和传授知识为人生意义，实在让人敬佩。&lt;/p>
&lt;p>账号为 &lt;a class="link" href="https://www.youtube.com/@ycmathematicsphysicsandche5659" target="_blank" rel="noopener"
>@ycmathematicsphysicsandche5659&lt;/a>&lt;/p>
&lt;h3 id="开箱即用的-chattts-安装包">开箱即用的 ChatTTS 安装包
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-26-16.png"
width="690"
height="448"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>最近爆火的 TTS 项目 ChatTTS，开源社区有位大佬为它创建 Web 界面和 API 接口。&lt;/p>
&lt;p>提供了网页中使用 ChatTTS 合成语音及 API 接口服务，支持 Windows、Linux、macOS 部署。&lt;/p>
&lt;p>其中 Windows 用户可直接下载安装包，一键安装开箱即用！&lt;/p>
&lt;p>GitHub：https://github.com/jianchang512/ChatTTS-ui&lt;/p>
&lt;h3 id="好酷的终端动画效果库">好酷的终端动画效果库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-26-37.png"
width="566"
height="505"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="268px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chrisbuilds.github.io/terminaltexteffects/showroom/" target="_blank" rel="noopener"
>showroom&lt;/a>，一个在文字终端靠字符颜色渲染动画效果的库。&lt;/p>
&lt;h3 id="浏览器自动化插件">浏览器自动化插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-26-53.png"
width="498"
height="437"
loading="lazy"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="273px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/AutomaApp/automa" target="_blank" rel="noopener"
>Automa&lt;/a>是一款浏览器扩展，通过连接模块实现浏览器自动化，能够自动填表、执行重复任务、截图和抓取网站数据。&lt;/p>
&lt;p>可以像 comfyui 一样在 chrome 中自定义创建能自动完成某种工作的网页工作流。&lt;/p>
&lt;h3 id="一个有趣的网页笔记本">一个有趣的网页笔记本
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-085-%E6%9C%9F/2024-06-04-09-27-08.png"
width="690"
height="412"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://notepadtab.com/" target="_blank" rel="noopener"
>notepadtab&lt;/a>打开后是一个极简的笔记编辑框，直接输入任意内容即可。&lt;/p>
&lt;p>巧妙的是，这个页面会根据输入内容自动更新 URL 地址。&lt;/p>
&lt;p>也就是说输入内容记录在了 URL 里，可以随时收藏、拷贝、转发。&lt;/p>
&lt;p>如果你把它保存在浏览器的收藏夹里，而浏览器又可以同步收藏夹的话，那就真正做到了“云”同步了。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="健康地获取信息与健康饮食同样重要">健康地获取信息与健康饮食同样重要
&lt;/h3>&lt;p>最近打算把睡前刷 B 站的习惯也给戒掉。&lt;/p>
&lt;p>过量的信息输入会带来焦虑，因为到处都是看到别人在输出、在表达，给自己的精神带来了无形的压力。&lt;/p>
&lt;p>应该进一步降低信息输入量和速度。&lt;/p>
&lt;p>打个不太贴切的比方，信息整理和输出是你在锻炼精神肌肉，而大量垃圾信息（刷视频、刷新闻）就像垃圾食品只能带给你脂肪，脂肪一旦多起来就危害健康了。&lt;/p>
&lt;p>健康地获取信息与健康饮食同样重要，在信息时代的今天，前者甚至更容易带来风险，毕竟健康饮食人人都知道，而信息获取习惯则还没有足够引起人们的重视。&lt;/p>
&lt;h3 id="最早的信息注入攻击">最早的信息注入攻击
&lt;/h3>&lt;p>现在想想，马三立那段经典的《逗你玩儿》，里面那个贼算是我国最早使用“&lt;a class="link" href="https://zh.wikipedia.org/zh-cn/%E4%BB%A3%E7%A2%BC%E6%B3%A8%E5%85%A5" target="_blank" rel="noopener"
>注入攻击&lt;/a>”的人了吧。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 084 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-52-13.png" alt="Featured image of post 机器文摘 第 084 期" />&lt;h1 id="机器文摘-第-084-期">机器文摘 第 084 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="50-行-c-代码实现一个可以玩精灵宝可梦的-gb-模拟器">50 行 C++ 代码实现一个可以玩精灵宝可梦的 GB 模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-50-04.png"
width="320"
height="289"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
>&lt;/p>
&lt;p>GameBoy 是任天堂出品的经典游戏掌机（大家习惯简称 GB），上面诞生了一大批经典游戏（比如宝可梦系列）；&lt;/p>
&lt;p>GB 的硬件十分简单（现在看来），采用 16 位 CPU（有点像 Intel 8080 和 Zilog Z80）和一块 160x144 分辨率的 LCD 屏幕。&lt;/p>
&lt;p>现在已经有一大批可以运行 GB 游戏的模拟器，在各个平台，比如你的手机、PC 、电视机、机顶盒，甚至是 Web 浏览器。&lt;/p>
&lt;p>不过这款比较特殊，来自这篇&lt;a class="link" href="https://binji.github.io/posts/pokegb/" target="_blank" rel="noopener"
>《一个只玩神奇宝贝蓝色的 gameboy 模拟器》&lt;/a>。&lt;/p>
&lt;p>这个模拟器仅用了 50 行（去除空格空行压缩混淆后） C++ 代码就实现了 GB 掌机大部分的功能。&lt;/p>
&lt;p>为了精简指令和特性，作者选择只实现了精灵宝可梦蓝这款游戏所需的相关指令。&lt;/p>
&lt;p>文章里作者十分详尽地介绍了这个项目的来龙去脉，以及各种实现细节原理，读完不禁佩服作者的巧思妙想，以及对当时的掌机设计者表示敬意。&lt;/p>
&lt;p>为了便于清晰阅读源码和理解原理，作者还给出了&lt;a class="link" href="https://gist.github.com/binji/395669d45e9005950232043ab4378abe" target="_blank" rel="noopener"
>未混淆压缩的原始代码&lt;/a>，大约 500 行，即便是这个代码量级，能够实现如此出色的模拟也很值得敬佩了。&lt;/p>
&lt;h3 id="如何使用-javascript-来创建手写体文字效果">如何使用 Javascript 来创建手写体文字效果
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-50-27.png"
width="690"
height="435"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="380px"
>&lt;/p>
&lt;p>手写体效果可能没有想象的那么难实现。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript" target="_blank" rel="noopener"
>《编程实现手写体》&lt;/a>的作者起初也觉得自己不可能做到。&lt;/p>
&lt;p>后来经过两个月的摸索，她做到了相当不错的效果。&lt;/p>
&lt;p>使用 JavaScript 成功将自己的手写字体显示在网页中。&lt;/p>
&lt;p>具体思路如下：&lt;/p>
&lt;p>1、首先从自己的笔迹照片中抠出 26 个英文字母的图片（找具有典型代表的字迹）；&lt;/p>
&lt;p>2、给这 26 个字母描出矢量轨迹，每个字母大概十个控制点（使用 Chaikin 算法进行平滑）；&lt;/p>
&lt;p>3、使用 p5.js 绘制形状路径；&lt;/p>
&lt;p>4、构建连字规则，为字母增加一些特殊的附加控制点，用于多个字母连接时笔迹更自然；&lt;/p>
&lt;p>5、对于绘制笔迹的宽度、路径弯曲程度等使用 Perlin 噪声添加一些抖动，使其更接近人的手写；&lt;/p>
&lt;h3 id="common-lisp-从入门到精通">Common Lisp 从入门到精通
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-50-42.png"
width="588"
height="822"
loading="lazy"
class="gallery-image"
data-flex-grow="71"
data-flex-basis="171px"
>&lt;/p>
&lt;p>我对 Lisp 语言的认知主要来自于那本著名的《计算机程序构造与解释》（即 SICP），书中讲解编程的通用核心思想时使用的就是 Lisp 语言作为示例。&lt;/p>
&lt;p>再者就是《黑客与画家》的作者保罗·格雷纳姆的疯狂推荐，伟大网站（Hacker News）的后台（如果有后台的话）据说就是 Lisp 写的，作者对此沾沾自喜。&lt;/p>
&lt;p>但是 Lisp 不易掌握，编程思想与我之前入门的 C 语言家族十分不同，学起来有种先学会了自行车就不能再骑三轮车的感觉。&lt;/p>
&lt;p>&lt;a class="link" href="https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/" target="_blank" rel="noopener"
>《通往 Common Lisp 之路》&lt;/a>是一篇很棒的指南文章（作者特意强调，是 A road 而不是 The road），讲解怎样入门 Common Lisp 编程。&lt;em>Common Lisp 是 Lisp 的一种方言&lt;/em>&lt;/p>
&lt;p>作者在开头就很有经验地花功夫讲解了 Common Lisp 的历史（这很符合我的胃口）。&lt;/p>
&lt;p>然后本文还事无巨细的提供了准备开发环境的教程，算得上是手把手了。&lt;/p>
&lt;p>关于编辑器，作者自嘲地说，只要你的编辑器带括号匹配就行（暗嘲 Lisp 写起来括号巨多。据说有个笑话说冷战期间苏联派间谍牺牲色相换取了美国航天飞机控制代码最后十页，但由于使用的是 Lisp 语言，所以代码内容都是 &amp;lsquo;))))))&amp;rsquo;）。&lt;/p>
&lt;p>按照文中推荐的书籍和练习应该可以做到从入门到精通吧。&lt;/p>
&lt;h3 id="那些-64k-大小的精美-intro-程序是如何制作的">那些 64k 大小的精美 intro 程序是如何制作的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-50-57.png"
width="690"
height="417"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>&lt;/p>
&lt;p>intro 这个名字来自 “crack intros”这个概念。&lt;/p>
&lt;p>早期的一些破解程序自带一些介绍内容，并以 demoscene（实时计算机图像和音乐表演） 的形式进行展现（炫技）。&lt;/p>
&lt;p>久而久之，这些非常小的（一般小于等于 64k 字节）demoscene 程序就被称为 intro 了。&lt;/p>
&lt;p>很多人第一次观看这种演示场景的时候会被其绚丽的视觉效果和优美的音乐所吸引，当知道它的可执行文件是如此紧凑微小时更是感到无比震惊。&lt;/p>
&lt;p>不禁好奇是什么样的魔法才能造就这样的程序。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.lofibucket.com/articles/64k_intro.html" target="_blank" rel="noopener"
>《怎样制作一个 64k intro》&lt;/a>介绍了制作一个这样的程序所需要的完整流程。&lt;/p>
&lt;p>包括怎样设计剧情、选用工具、压缩代码、音效制作、合成等等。&lt;/p>
&lt;p>文字列举了多个十分优秀的 intro 作品作为举例，介绍了它们从构思到实现的过程。&lt;/p>
&lt;h3 id="256-个字节创造一座城市">256 个字节创造一座城市
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-51-09.png"
width="499"
height="300"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">canvas&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">width:99%&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">c&lt;/span> &lt;span class="na">onclick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">setInterval(&amp;#39;for(c.width=w=99,++t,i=6e3;i--;c.getContext`2d`.fillRect(i%w,i/w|0,1-d*Z/w+s,1))for(a=i%w/50-1,s=b=1-i/4e3,X=t,Y=Z=d=1;++Z&amp;lt;w&amp;amp;(Y&amp;lt;6-(32&amp;lt;Z&amp;amp;27&amp;lt;X%w&amp;amp;&amp;amp;X/9^Z/8)*8%46||d|(s=(X&amp;amp;Y&amp;amp;Z)%3/Z,a=b=1,d=Z/w));Y-=b)X+=a&amp;#39;,t=9)&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上这段代码，使用光线追踪技术在 Web 页面的 Canvas 画布上显示了一个城市的场景。&lt;/p>
&lt;p>打开你的记事本，将这段代码保存到一个扩展名为 html 的文件里，即可用浏览器加载它了（稍等几秒钟后就能看到图像）。&lt;/p>
&lt;p>其作者在&lt;a class="link" href="https://frankforce.com/city-in-a-bottle-a-256-byte-raycasting-system/" target="_blank" rel="noopener"
>这篇文章中介绍了实现原理及思路&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>这个惊人的程序在非常小的空间中使用了许多不同的概念，理解它有点像解决一个难题。有几个主要部分，包括 html 代码、帧更新循环、渲染系统、光线投射引擎和城市本身。
你可能认为需要一些高深的数学才能解开这个谜团，但实际上不是，代码相当简单，只使用基本代数，甚至没有使用任何三角函数。尽管有一些技巧可以让所有东西结合在一起，并取得令人印象深刻的结果。&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="开源单片机固件">开源单片机固件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-51-31.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/arendst/Tasmota" target="_blank" rel="noopener"
>Tasmota&lt;/a>，这是一个为 ESP8266 和 ESP32 设备提供的替代固件，通过 WebUI 进行简单配置，支持 OTA 更新，定时器或规则实现自动化，可通过 MQTT、HTTP、串口 或 KNX 进行本地控制。&lt;/p>
&lt;p>相比其他竞品，Tasmota 易于安装，提供固件二进制文件下载，并支持平台化开发。&lt;/p>
&lt;h3 id="开源项目从零开始写浏览器">开源项目，从零开始写浏览器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-51-45.png"
width="690"
height="469"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ZeroX-DG/moon" target="_blank" rel="noopener"
>moon&lt;/a>，这是一个使用 Rust 从头开始​​开发的 Web 浏览器。为了契合“从头开始制作”的精神，浏览器的开发尽可能避免使用外部库。
同时作者在他的博客上用&lt;a class="link" href="https://viethung.space/blog/tags/browser-from-scratch/" target="_blank" rel="noopener"
>系列博文介绍了开发过程&lt;/a>&lt;/p>
&lt;h3 id="开源项目从零实现-llama3">开源项目，从零实现 llama3
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-52-13.png"
width="669"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>一个月前，Meta 发布了开源大模型 llama3 系列，在多个关键基准测试中优于业界 SOTA 模型，并在代码生成任务上全面领先。&lt;/p>
&lt;p>此后，开发者们便开始了本地部署和实现，比如 llama3 的中文实现、llama3 的纯 NumPy 实现等。&lt;/p>
&lt;p>Github 上有位名为「Nishant Aklecha」的开发者发布了&lt;a class="link" href="https://github.com/naklecha/llama3-from-scratch" target="_blank" rel="noopener"
>一个从零开始实现 llama3 的存储库&lt;/a>，包括跨多个头的注意力矩阵乘法、位置编码和每个层在内都有非常详细的解释。&lt;/p>
&lt;p>跟随项目，作者最终会教你从零实现一个 llama3 模型。&lt;/p>
&lt;h3 id="开源项目从零开始实现一套-cad">开源项目，从零开始实现一套 CAD
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-53-04.png"
width="615"
height="328"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/MattFerraro/CADmium" target="_blank" rel="noopener"
>CADminum&lt;/a>，一个值得关注的开源项目。&lt;/p>
&lt;p>作者希望使用 Rust 重写一个开源 CAD 设计软件（基于 Web WASM 技术）。&lt;/p>
&lt;p>这是一项巨型工程，其难度接近“操作系统”、“Web 浏览器”级别。&lt;/p>
&lt;p>作者在&lt;a class="link" href="https://mattferraro.dev/posts/cadmium" target="_blank" rel="noopener"
>这篇文章里分析了当前技术格局，以及介绍了他为什么这做&lt;/a>。&lt;/p>
&lt;p>我很喜欢作者在讲解技术时用汽车品牌来进行做比喻，诙谐并比较贴切。&lt;/p>
&lt;blockquote>
&lt;p>Parasolid 是 b-rep 内核的凯迪拉克凯雷德，它巨大、昂贵，它提供了您可以要求的所有便利设施以及您没有要求的一堆便利设施。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>唯一流行的开源 b-rep 内核是 OpenCascade，它是 b-rep 内核的庞蒂亚克 Aztek，它很丑陋，可能会在你身上崩溃，但它能开，而你也可以免费获得一个。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>SolveSpace（Blender 所使用的几何引擎） 是一辆嘟嘟车，因为它是由一个人在车库里建造的，它用很少的东西做了很多事情，但如果你眯着眼睛，它看起来就像一辆汽车。&lt;/p>
&lt;/blockquote>
&lt;h3 id="可以绕过反爬检测的-python-库">可以绕过反爬检测的 Python 库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-53-41.png"
width="535"
height="437"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="293px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ultrafunkamsterdam/undetected-chromedriver" target="_blank" rel="noopener"
>undetected-chromedriver&lt;/a>，这是一个经过优化的 Selenium WebDriver 补丁，专门用于防止浏览器自动化过程中，触发反机器人机制。它能够隐藏浏览器特征（指纹），使用起来十分方便，就像一个 Python 的第三方库一样。&lt;/p>
&lt;h3 id="实时流式数字头像">实时流式数字头像
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-54-00.png"
width="541"
height="319"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="407px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Hujiazeng/Vach" target="_blank" rel="noopener"
>Vach&lt;/a>，实时流式数字头像，实现音视频同步对话，基本达到商用效果，支持文本和语音交互，适用于直播间业务和展厅显示屏互动。&lt;/p>
&lt;h3 id="一个在线拨弹的竖琴">一个在线拨弹的竖琴
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-084-%E6%9C%9F/2024-05-28-08-54-11.png"
width="690"
height="362"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://string.spiel.com/" target="_blank" rel="noopener"
>spiel&lt;/a>，这个网站提供了一个在线竖琴，使用极简的界面让你用鼠标演奏；&lt;/p>
&lt;p>默认提供了 1645（C、Am、F、G） 四个和弦，即使不懂弹琴，也可以一遍扒拉一边弹唱流行歌曲了（使用 1645 走向的流行歌曲太多了）。&lt;/p>
&lt;p>当然你也可以使用编辑功能，定制自己的琴弦排布。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 083 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/</link><pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-48-11.png" alt="Featured image of post 机器文摘 第 083 期" />&lt;h1 id="机器文摘-第-083-期">机器文摘 第 083 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="打造拥有-600-万词库的微软拼音输入法">打造拥有 600 万词库的微软拼音输入法
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-47-59.png"
width="690"
height="608"
loading="lazy"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="272px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/416966473" target="_blank" rel="noopener"
>打造拥有 600 万词库的微软拼音输入法&lt;/a>。&lt;/p>
&lt;p>微软拼音输入法难用，主要是缺少国内一些常用的词汇，而且首选的候选往往会出现很诡异的错词。&lt;/p>
&lt;p>但是我也已经忍了很久，因为不想被安装全家桶或者遭遇隐私问题（不想用某度或者某狗的输入法），只得忍着用。&lt;/p>
&lt;p>上面这篇文章介绍了一个很不错的方法，充分发挥了微软拼音输入法的自定义词汇功能。&lt;/p>
&lt;p>一次性导入 600 万常用词汇，让候选词的丰富程度和靠谱程度得到了大幅提升。&lt;/p>
&lt;p>经过我的测试效果很好，不过偶尔会有网络用语冲在正式用语前面的情况，瑕不掩瑜吧。&lt;/p>
&lt;p>600 万词库下载地址：https://pan.baidu.com/s/1uIdt_2nerdi6vhA9BB6M2A&lt;/p>
&lt;p>分享码：yrhl&lt;/p>
&lt;p>&lt;em>个人使用三天后的体验&lt;/em>：词汇确实比之前好很多了，但是个别时候有一些网络用语冲到了最前面，也会造成不方便。&lt;/p>
&lt;h3 id="adobe-photoshop-101-版本的源代码">Adobe Photoshop 1.0.1 版本的源代码
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-48-11.png"
width="625"
height="350"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>Photoshop，著名图像处理软件，又叫 PS，已成为一个动词，用于表示修图的行为。&lt;/p>
&lt;p>它已诞生 35 年，&lt;a class="link" href="https://computerhistory.org/blog/adobe-photoshop-source-code/" target="_blank" rel="noopener"
>这篇文章介绍了它的诞生历程以及对最初版本源码的解释&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>密歇根大学计算机视觉博士生托马斯·诺尔（Thomas Knoll）在1987年编写了一个程序来显示和修改数字图像。他的兄弟约翰在电影视觉效果公司工业光魔公司工作，发现它对编辑照片很有用，但它并不打算成为一种产品。托马斯说：“我们最初是为了我们自己使用而开发的&amp;hellip;&amp;hellip;”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>渐渐地，这个名为“Display”的程序变得更加复杂。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>1988年夏天，他们意识到它确实可以成为一种可靠的商业产品。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>他们将其重命名为“Photoshop”，并开始寻找一家公司来分发它。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>大约 200 份 0.87 版被玻片扫描仪制造商 Barneyscan 捆绑为“Barneyscan XP”。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>当Adobe在其艺术总监Russell Brown的鼓励下决定购买发行Photoshop增强版的许可证时，Photoshop的命运就此注定。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>该交易于 1989 年 4 月完成，1.0 版于 1990 年初开始发货。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在接下来的十年中，Photoshop 的销量超过 300 万份。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Photoshop 的第一个版本主要是用 Pascal 为 Apple Macintosh 编写的，为底层的摩托罗拉 68000 微处理器编写了一些机器语言。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>第一个版本只有 Thomas 一个人开发，第二个版本团队增加到了两个工程师：Thomas 开发基本应用程序，John 编写图像处理插件。&lt;/p>
&lt;/blockquote>
&lt;p>下载 1.0.1 版本代码的地址在这里（必须先同意不用于商业用途的许可条款）：https://computerhistory.org/blogs/photoshop-software-license-agreement/&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="linux-bash-参考指南">Linux Bash 参考指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-48-29.png"
width="690"
height="1215"
loading="lazy"
class="gallery-image"
data-flex-grow="56"
data-flex-basis="136px"
>&lt;/p>
&lt;p>在线阅读地址：https://mr-dai.github.io/linux_bash_reference/&lt;/p>
&lt;blockquote>
&lt;p>我写这篇文章主要是用来作为我的 Linux Bash 工具书的，希望这篇文章对你也能起到同样的效果。随着我学习到更多有关 Linux Bash 的知识，我会不断地更新这篇文章。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>本文的内容假设你对 Linux 和 Linux 命令行有基本的了解。本文的内容分为三个主要部分：
🌟Linux Shell 脚本编程
🌟Linux Bash 内置命令
🌟常见的轻量级 Linux 命令工具&lt;/p>
&lt;/blockquote>
&lt;h3 id="像素艺术编辑器">像素艺术编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-48-53.png"
width="764"
height="497"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/foxnne/pixi" target="_blank" rel="noopener"
>用 Zig 语言编写的跨平台开源像素艺术编辑器和动画编辑器&lt;/a>, Pixel art editor made with Zig.&lt;/p>
&lt;h3 id="导出微信读书的电子版">导出微信读书的电子版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-49-19.png"
width="670"
height="622"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="258px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/drunkdream/weread-exporter" target="_blank" rel="noopener"
>weread-exporter&lt;/a> ​​​一个可以将微信读书中的书籍导出成epub、pdf、mobi等格式的工具。&lt;/p>
&lt;h3 id="展示各种语言编译过程的在线工具">展示各种语言编译过程的在线工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-49-53.png"
width="690"
height="192"
loading="lazy"
class="gallery-image"
data-flex-grow="359"
data-flex-basis="862px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://godbolt.org/" target="_blank" rel="noopener"
>Compiler Explorer&lt;/a>&lt;/p>
&lt;p>一个在线工具，直观展示各种编程语言的编译过程。&lt;/p>
&lt;p>适合任何对编译器或计算机体系结构感兴趣的人。&lt;/p>
&lt;p>只需在左侧窗格中输入源代码，站点就会立即在右侧的面板中显示编译后的输出（通常是汇编语言）。&lt;/p>
&lt;p>&lt;a class="link" href="https://thechipletter.substack.com/p/compiler-explorer" target="_blank" rel="noopener"
>这里有一篇文章详细介绍了这个工具&lt;/a>。&lt;/p>
&lt;h3 id="搭建自己的今日热榜">搭建自己的“今日热榜”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-50-08.png"
width="690"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/glanceapp/glance" target="_blank" rel="noopener"
>glance&lt;/a>&lt;/p>
&lt;p>是一个漂亮的自托管个性化阅读看板。&lt;/p>
&lt;p>支持 RSS 订阅源和各种小组件（天气、股票等）。&lt;/p>
&lt;p>可以打造一个个性化的看板首页，根据自己的喜好将自己关注的信息一页看完。&lt;/p>
&lt;h3 id="精美高效的应用程序启动器">精美高效的应用程序启动器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-083-%E6%9C%9F/2024-05-21-08-50-18.png"
width="496"
height="320"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Flow-Launcher/Flow.Launcher" target="_blank" rel="noopener"
>Flow.Launcher&lt;/a>&lt;/p>
&lt;p>适用于 Windows 的快速文件搜索和应用程序启动器，具有成熟的插件生态。&lt;/p>
&lt;p>可以快速的查找文件（支持 Windows 自己的索引）、启动应用、做算术计算、打开网址、执行 cmd 命令、预览图片和 pdf 等文件内容。&lt;/p>
&lt;p>喜欢快捷启动器的人不能错过，不过我还是喜欢老派的 Everything。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="做简单的事情不会使你成功">做简单的事情不会使你成功
&lt;/h3>&lt;p>不要假装努力，总挑一些简单的事儿去做，应该挑一些难的。 ​​​&lt;/p>
&lt;h3 id="好的教学一定是把背景铺垫做的足足的">好的教学，一定是把背景铺垫做的足足的。
&lt;/h3>&lt;p>读《微积分的力量》过半，作者铺垫了三章的内容，终于讲到了微分和积分的推导过程，揭示答案那一刻，“就像魔术师从帽子里拿出兔子”（这句是书中原话）。&lt;/p>
&lt;p>如果没有前面的铺垫，直接告诉答案，那就失去了本书的意义，与大学教材无异了。&lt;/p>
&lt;p>这类深入浅出循循善诱的介绍数学的书籍极少，能够读到真乃幸事。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 082 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/</link><pubDate>Tue, 14 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-53-57.png" alt="Featured image of post 机器文摘 第 082 期" />&lt;h1 id="机器文摘-第-082-期">机器文摘 第 082 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="微软是如何做到在-windows-里直接运行-linux-的-gui-程序的">微软是如何做到在 Windows 里直接运行 Linux 的 GUI 程序的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-53-18.png"
width="690"
height="402"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;p>我是 微软 WSL 的重度用户。&lt;/p>
&lt;p>日常办公用 Windows 系统，一些必须在 Linux 下进行的开发试验工作就在 WSL 环境中，跟 Windows 无缝集成，同时性能又比虚拟机高一些，很满意。&lt;/p>
&lt;p>从 2021 年开始，微软又发力，给 WSL 带来了图形支持（WSLg），可以在内部提供 GPU 硬件加速能力，以及图形界面的渲染。&lt;/p>
&lt;p>可以直接使用 Linux 下的各种图形软件，跟普通 Linux 桌面的效果体验一致。&lt;/p>
&lt;p>比如，在命令行输入 gedit、gvim 等带有图形界面的程序，窗口会直接在 Windows 里弹出，如果不仔细看，会觉得是 Windows 的原生程序。&lt;/p>
&lt;p>我很好奇这种效果是怎样的技术路线做到的，之前在 Docker 里运行过带界面的程序，是通过在 Windows 上安装一个 X Server 实现的。&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/377263437" target="_blank" rel="noopener"
>《WSLg：为WSL增光添彩》&lt;/a>，这篇文章详细介绍了其实现原理，跟我之前想象的还是有些差别的。&lt;/p>
&lt;p>微软果然还是喜欢骚操作，而且会凭借实力让这个骚操作成为既成事实的标准。&lt;/p>
&lt;p>具体来说：&lt;/p>
&lt;blockquote>
&lt;p>微软做了个和WSL用户发行版（User Distro，如Ubuntu、Debian、openSUSE、CentOS等）平级的“WSLg System Distro”，这个 Linux 发行版原本是微软内部在 Azure 云上的 Linux 系统，叫做“CBL-Mariner”，现在经过精心剪裁一番魔改之后，专门干一件事——跑 X Server。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>好了现在 X Server 有了，但图形界面是显示在 WSLg System Distro 里，怎么进到这个系统里看呢？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>微软在 WSLg System Distro 里加了远程桌面服务套件——FreeRDP，一个支持Windows远程桌面协议（RDP）的服务端，如果是在 Windows 里装 Linux虚拟机的话，可以用 Windows 自带的远程桌面客户端和虚拟 Linux 系统中的 FreeRDP 通信。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>就这样，通过Windows -&amp;gt; RDP -&amp;gt; X Server一层套一层，把图形窗口“无缝”地集成到了Windows桌面环境中，整个形成了 WSLg 的架构。&lt;/p>
&lt;/blockquote>
&lt;h3 id="使用-sockets-操作-x-window-窗口">使用 sockets 操作 X Window 窗口
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-53-33.png"
width="661"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/p>
&lt;p>既然上面讲 WSL2 里实现图形界面的事情，不妨再来一篇探索 X Server 技术的文章。&lt;/p>
&lt;p>在这篇&lt;a class="link" href="https://hereket.com/posts/from-scratch-x11-windowing/" target="_blank" rel="noopener"
>《在 linux 中用 200 行纯手写 C 代码打开一个图形窗口》&lt;/a>里，作者为了研究 X11 窗口图形协议，决定在不调用 xlib 这种基础库的情况下，通过套接字发送指令的方式，创建一个 GUI 窗口程序。&lt;/p>
&lt;p>实际上 Linux 中用于显示图形界面的 X Server 也是一种网络服务，通过 X11 协议渲染图形界面，只要能够发送正确的信息给服务，就能进行图形界面的显示和交互。&lt;/p>
&lt;p>虽然理论上是这样，然而实际实现时却没这么容易，作者花功夫研读了相关技术文档，并且进行了若干次尝试才最终成功。&lt;/p>
&lt;p>作者在文末写道：&lt;/p>
&lt;blockquote>
&lt;p>X Server 在 linux 世界中正在慢慢被剥夺，并被 Wayland 取代。尽管如此，X11 仍然是一个有趣的协议。&lt;/p>
&lt;/blockquote>
&lt;h3 id="向量嵌入的一些基础知识">向量嵌入的一些基础知识
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-53-57.png"
width="613"
height="357"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="412px"
>&lt;/p>
&lt;p>随着 LLM 大模型的应用日趋成熟，基于 LLM 进行知识库搭建、模型微调等操作变得越来越普遍。&lt;/p>
&lt;p>普通技术人员在进行此类应用操作时，接触到的第一个新技术名词可能就是“向量嵌入（Vector Embeddings）”，这是在 NLP 领域的一个基本概念。&lt;/p>
&lt;p>理解它有助于在使用 LLM 模型进行应用层开发（尤其是在检索增强生成类应用）时充分发挥模型的力量，也能做到“知其所以然”。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.timescale.com/blog/a-beginners-guide-to-vector-embeddings/" target="_blank" rel="noopener"
>《A Beginner’s Guide to Vector Embeddings》&lt;/a>为读者提供了关于向量嵌入（Vector Embeddings）的基础知识，包括概念的定义、工作原理、如何在产品中应用等方面。&lt;/p>
&lt;p>&lt;em>虽然有 timescale 广告的成分，但是文章本身质量还挺高&lt;/em>&lt;/p>
&lt;h3 id="基于-sqlite-做一个搜索引擎">基于 SQLite 做一个搜索引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-54-09.png"
width="471"
height="212"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="533px"
>&lt;/p>
&lt;p>基于 SQLite 可以做全文检索吗？&lt;/p>
&lt;p>答案是可以，SQLite FTS4 和 FTS5 扩展允许您对加载到 SQLite 中的文档执行全文搜索。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.philipotoole.com/building-a-highly-available-search-engine-using-sqlite/" target="_blank" rel="noopener"
>使用 SQLite 构建高可用性搜索引擎&lt;/a>&lt;/p>
&lt;p>这篇文章介绍了一个叫做 &lt;a class="link" href="https://rqlite.io/" target="_blank" rel="noopener"
>rqlite&lt;/a> 的项目，它基于 SQLite 数据库实现了一个可用的搜索引擎。&lt;/p>
&lt;p>文章详细介绍了使用这个搜索引擎进行测试和索引 Apache 日志的步骤。&lt;/p>
&lt;p>像搭建轻量级全文检索服务的，不妨试一试。&lt;/p>
&lt;h3 id="爱上-makefile">爱上 Makefile
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-54-22.png"
width="466"
height="382"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="292px"
>&lt;/p>
&lt;p>如果你和我一样对 Makefile 充满恐惧，不愿意碰它一下。&lt;/p>
&lt;p>甚至认为它只是用于构建某个蹩脚的 C++ 工程所使用的老掉牙工具。&lt;/p>
&lt;p>那可以看看这篇&lt;a class="link" href="https://gagor.pro/2024/02/how-i-stopped-worrying-and-loved-makefiles" target="_blank" rel="noopener"
>《我是如何爱上 Makefile 的》&lt;/a>。&lt;/p>
&lt;p>Makefile 拥有包括进行软件构建在内的多种用途，虽然大部分人仅仅用它来编译源码。&lt;/p>
&lt;p>文章作者介绍了自己对 Makefile 由浅入深的使用过程，以及各种非软件构建的场景：包括 发送邮件、给 Python 项目准备环境、静态博客网站的生成等等。&lt;/p>
&lt;p>如果你愿意的话，甚至可以用它来煮咖啡。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="基于终端的文件管理器">基于终端的文件管理器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-54-46.png"
width="690"
height="485"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="341px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/MHNightCat/superfile" target="_blank" rel="noopener"
>Superfile&lt;/a>，针对 Terminal 的文件管理应用。&lt;/p>
&lt;p>界面很漂亮，可以方便地在控制台管理文件。&lt;/p>
&lt;p>支持自定义主题和快捷键。 ​​​&lt;/p>
&lt;h3 id="阿里出的语音识别模型">阿里出的语音识别模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-54-58.png"
width="690"
height="1493"
loading="lazy"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="110px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/alibaba-damo-academy/FunASR" target="_blank" rel="noopener"
>FunASR&lt;/a>，阿里巴巴的语音转文字，funasr，中文效果卓越，可以离线使用。&lt;/p>
&lt;h3 id="用-airpod-发射摩斯码">用 airpod 发射摩斯码
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-55-08.png"
width="360"
height="540"
loading="lazy"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="160px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/EtherDream/headphone-morse-transmitter" target="_blank" rel="noopener"
>headphone-morse-transmitter&lt;/a>。&lt;/p>
&lt;p>这个开源项目可以把你的 airpod 耳机变成一个莫尔斯码发射器。&lt;/p>
&lt;p>想象一下梁朝伟在无间道中使用耳机发送“有内鬼，终止交易”。 ​​​&lt;/p>
&lt;h3 id="c-的坑一网打尽">C++ 的坑，一网打尽。
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-55-18.png"
width="690"
height="691"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="239px"
>&lt;/p>
&lt;p>地址：https://fouronnes.github.io/cppiceberg/&lt;/p>
&lt;p>网站列举了 C++ 语言的一些反直觉的特性，标识在一座冰山上，点击链接可以看到该问题的详解。 ​​​&lt;/p>
&lt;p>这其中就包含有网友整理的&lt;a class="link" href="https://gist.github.com/aras-p/6224951" target="_blank" rel="noopener"
>“离职之前可以提交的代码片段”&lt;/a>。&lt;/p>
&lt;p>可真是太能整活了, 加上它们会导致程序大概能跑，但是会不定期出 BUG。&lt;/p>
&lt;h3 id="开发-ai-助手的程序框架">开发 AI 助手的程序框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-55-36.png"
width="690"
height="366"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/CopilotKit/CopilotKit" target="_blank" rel="noopener"
>CopilotKit&lt;/a>，一个用于构建自定义 AI 智能助手的框架，包括应用内 AI 聊天机器人、应用内 Agent 代理和 AI 补全的文本编辑区域。 ​​​&lt;/p>
&lt;h3 id="一款100免费的在线pdf工具功能众多界面好看-">一款100%免费的在线PDF工具，功能众多，界面好看。 ​​​
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-55-47.png"
width="690"
height="373"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>地址：https://onlinepdfedit.com/zh-cn/&lt;/p>
&lt;h3 id="codepen-的国内替代">CodePen 的国内替代。
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-082-%E6%9C%9F/2024-05-14-08-55-58.png"
width="550"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>地址：https://bi.cool/&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="不能根据想象感受真实">不能根据想象感受真实
&lt;/h3>&lt;p>电影《心灵捕手》中有段对白：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">肖恩：如果我问你艺术,你可能会提出艺术书籍中的粗浅论调。有关米开朗基罗,你知道很多，他的满腔政治热情，与教皇相交莫逆，你对他很清楚吧？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">但你连西斯汀教堂的气味也不曾嗅到？你未曾站在那儿，昂首眺望天花板上的名画吧？可是我见过。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">你年轻彪悍，我如果和你谈论战争，你会向我大抛莎士比亚， 朗诵“共赴战场，亲爱的朋友”
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">但你从未亲临战阵，未试过把挚友的头拥入怀里，看着他吸着最后一口气，凝望着你，垂死向你求助。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>我的体会是，感受一样东西，不能只靠想象（不是不能想象，而是不能仅依赖）。&lt;/li>
&lt;li>也就是说，无论你从电视上、书本里、别人的讲述中能获取多少关于一件事物（或一个地方、一个人）的信息，在你真正与它接触之前，你都不可能真正认识它。&lt;/li>
&lt;li>但不幸的是，现在数字化生活已经将人与真实生活剥离得过于孤立，我们仿佛被各种电子设备（尤其是手机）催眠了。&lt;/li>
&lt;li>足不出户是很难感受完整的世界的，如果有可能，还是尽可能去自然中感受真实的东西。&lt;/li>
&lt;/ul>
&lt;h3 id="看书与电视没多大区别">看书与电视没多大区别
&lt;/h3>&lt;p>对我来说，吃完晚饭看书对比坐沙发看美剧的最大区别，就是看书可以走动以活动身体。&lt;/p>
&lt;p>从吸收的内容营养上来说，看书并不比看电视高明到哪儿去，目前都是当作消遣的一种方式。&lt;/p>
&lt;p>很多人过于抬高了读书的好，以及看电视的坏。&lt;/p>
&lt;p>但如果一件事情能让人沉浸和放松，那就是最大的益处。&lt;/p>
&lt;p>做事一旦太功利，就很无趣了。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 081 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-54-53.png" alt="Featured image of post 机器文摘 第 081 期" />&lt;h1 id="机器文摘-第-081-期">机器文摘 第 081 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="为什么-sqlite-使用字节码来执行-sql">为什么 SQLite 使用字节码来执行 SQL
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-54-03.png"
width="363"
height="452"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="192px"
>&lt;/p>
&lt;p>每个 SQL 数据库引擎的执行 SQL 的步骤都差不多，一般来说都会先将输入的 SQL 文本转换为机器更容易理解的“预执行语句”。&lt;/p>
&lt;p>然后通过某种“虚拟机”去执行它以生成结果。&lt;/p>
&lt;p>如果了解一点儿编译原理的话，基本上所有的高级语言都会有类似的处理过程，SQL 有点儿像解释执行的语言。&lt;/p>
&lt;p>具体虚拟机如何执行处理后的“预执行语句”，在数据库领域有两大技术路线，分别是：&lt;/p>
&lt;p>1、字节码：输入 SQL 被转换为虚拟机语言，然后由虚拟机解释器运行。这是SQLite使用的技术。&lt;/p>
&lt;p>2、对象树：输入 SQL 在表示要完成的处理的对象树中进行转换。SQL 是通过遍历此树来执行的。这是MySQL和PostgreSQL使用的技术。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://sqlite.org/draft/whybytecode.html" target="_blank" rel="noopener"
>《为什么 SQLite 使用字节码》&lt;/a>是 SQLite 的开发者写的解释文章，对比了这两种路线的各自优势，并解释了他们做出这样选择的理由。&lt;/p>
&lt;p>简单来说，使用字节码的优点是：简单容易理解（是引擎容易理解，就像 CPU 更理解汇编语言）、容易调试、可以增量运行、占用空间小。&lt;/p>
&lt;p>使用对象树的优点是：有些查询可以推迟运行（便于性能优化）、数据流程易于并行化（还是有利于性能）。&lt;/p>
&lt;h3 id="c-编译器的历史">C 编译器的历史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-54-53.png"
width="690"
height="493"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/p>
&lt;p>这篇文章是&lt;a class="link" href="https://thechipletter.substack.com/p/a-history-of-c-compilers-part-1-performance" target="_blank" rel="noopener"
>《The Chip Letter》&lt;/a>系列的一部分，主题是 C 编译器的历史。&lt;/p>
&lt;p>文章从C语言的起源讲起，探讨了 C 编译器的发展，以及它们对计算机架构、操作系统和编程语言的影响。&lt;/p>
&lt;p>文章强调了C语言的可移植性对于软件行业的经济优势，以及 Richard Stallman 创建的 GCC 编译器对自由软件运动的重要性。&lt;/p>
&lt;p>随着计算机架构的快速发展，如 Arm 和 RISC-V，高性能编译器成为支持这些架构的关键。&lt;/p>
&lt;p>文章还提到了微软在Windows操作系统上的 C 编译器，以及 GCC 和 LLVM 编译器生态系统在支持新硬件和架构方面的重要作用。&lt;/p>
&lt;p>最后，文章指出，高质量的 C 编译器对于任何成功的硬件生态系统都是必不可少的。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="用于科研的命令行技巧">用于科研的命令行技巧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-55-08.png"
width="235"
height="779"
loading="lazy"
class="gallery-image"
data-flex-grow="30"
data-flex-basis="72px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://jeroenjanssens.com/dsatcl/" target="_blank" rel="noopener"
>命令行中的数据科学&lt;/a>&lt;/p>
&lt;p>这本在线电子书籍，讲解了在 Linux / Unix 命令行环境下进行数据建模和处理的工具使用技巧。&lt;/p>
&lt;blockquote>
&lt;p>这份经过全面修订的指南演示了命令行的灵活性如何帮助您成为更高效、更富有成效的数据科学家。
您将学习如何结合小而强大的命令行工具，以快速获取、清理、浏览和建模数据。
为了帮助您入门，作者 Jeroen Janssens 提供了一个包含 100 多种 Unix 强大工具的 Docker 映像，无论您使用 Windows、macOS 还是 Linux，这对您的工作都很有帮助。&lt;/p>
&lt;/blockquote>
&lt;h3 id="一个新的-ocr-框架">一个新的 OCR 框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-55-17.png"
width="690"
height="629"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="263px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/VikParuchuri/surya" target="_blank" rel="noopener"
>surya&lt;/a>&lt;/p>
&lt;p>一个新的 OCR 框架，效果据说比 EasyOCR 要好。&lt;/p>
&lt;h3 id="开源多模态-llm-模型">开源多模态 LLM 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-55-28.png"
width="534"
height="633"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="202px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/mbzuai-oryx/LLaVA-pp" target="_blank" rel="noopener"
>LLaVA++&lt;/a>&lt;/p>
&lt;p>基于 Phi-3 和 LLaMA-3 的开源多模态 LLM，项目扩展了LLaVA模型，集成了 Phi-3 Mini Instruct 和 LLaMA-3 Instruct 模型，提升了模型的视觉和语言指令处理能力。&lt;/p>
&lt;h3 id="开源-gpu-学习项目">开源 GPU 学习项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-081-%E6%9C%9F/2024-05-07-08-55-41.png"
width="690"
height="933"
loading="lazy"
class="gallery-image"
data-flex-grow="73"
data-flex-basis="177px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/adam-maj/tiny-gpu" target="_blank" rel="noopener"
>tiny-gpu&lt;/a>，一个最小 GPU 实现，用于从头开始了解 GPU 的工作原理。&lt;/p>
&lt;p>这个项目主要集中于探索：&lt;/p>
&lt;ul>
&lt;li>架构 - GPU的架构是什么样子的？最重要的元素是什么？&lt;/li>
&lt;li>并行化 - SIMD编程模型是如何在硬件中实现的？&lt;/li>
&lt;li>内存 - GPU如何解决有限内存带宽的限制？ ​​​&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="关于未来技术趋势的一点儿判断">关于未来技术趋势的一点儿判断
&lt;/h3>&lt;p>AI 技术经过几十年长期发展，自去年开始引爆了应用点（大语言模型带来的自然语言对话以及多媒体生成技术）之后。基本上已经成为继云计算、移动互联网、物联网等超级技术概念之后的又一热点。&lt;/p>
&lt;p>即便是理性看待，AI 也已经成为任何信息化相关产品不可或缺的能力，理论突破在提速、数据规模的增加在提速、各种意义上的基础设施也越来越完善，技术路线从实验室到消费端的周期也越来越短。&lt;/p>
&lt;p>但是很难说 AI 是一个行业，应该把它看作是基于计算机技术的信息化、数字化行业的技术革新，是给各个行业进行赋能的一项技术。&lt;/p>
&lt;p>所以，AI 技术本身只是一个基础，如果希望深耕，还需要细分出想要瞄准的应用市场，因为基础理论部分只能靠科学家去推动，我等凡人安心做好应用层工作已经不容易了。&lt;/p>
&lt;p>如果说 AI 是未来信息技术的基础能力的话，那么虚拟增强现实则是在人机交互方面的发展必然。&lt;/p>
&lt;p>人机交互自计算机诞生以来一直进展缓慢，输入输出设备虽然对应了人类的听觉、视觉、触觉等感官，但是交互方式仍然偏机械，而且缺乏互动性。&lt;/p>
&lt;p>按照人类生物本能的需求，在交互方面肯定希望以一种自然的、不增加外部环节的人机沟通和交流，目前的输入输出设备还差的很远。&lt;/p>
&lt;p>但随着芯片技术发展，算力增强的同时体积和能耗减小，增强现实设备有望以轻便的方式接入人眼，甚至达到现在无线耳机的佩戴舒适度，届时将类似 chatGPT 一样引爆交互革命。&lt;/p>
&lt;p>伴随而来的就是面向新终端、场景的新一轮内容制作和应用制作的市场需求，人类可能在娱乐、效率生产力等方面全面依赖虚拟增强现实技术，像淘汰报纸、杂志一样淘汰现有的电视、电影、PC或手机。&lt;/p>
&lt;p>护理机器人的发展严重依赖 AI 技术和工业制造能力，对其的强烈需求不是来自于工业生产，而是老龄化社会带来的护理需求。&lt;/p>
&lt;p>可以想象，如果合理发展的话，未来针对行动不便老人的护理工作一定会以智能机器人为主，真人劳动力的成本将再一次大幅提升，生产力更加获得解放。&lt;/p>
&lt;p>普通人在这样的趋势下所能获得市场机会，恐怕只能是内容创作、基础设施运维等低端工作，或者是非物质类的价值输出（比如聊天、网游陪玩等）；&lt;/p>
&lt;p>客观规律决定了人类没有能力控制或改变历史进程的发展，恐怕赛博朋克 2077 那样的世界将不可避免地到来了。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 080 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-58-14.png" alt="Featured image of post 机器文摘 第 080 期" />&lt;h1 id="机器文摘-第-080-期">机器文摘 第 080 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="利用计算机图形学模拟木星大红斑">利用计算机图形学模拟木星大红斑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-54-40.png"
width="690"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://emildziewanowski.com/flowfields/" target="_blank" rel="noopener"
>《流场》：模拟木星的大气流动效果&lt;/a>，这是一篇讲解视觉效果生成的文章，作者分享了他通过设计一些有趣的 Shader 着色器来实现模拟木星大气层流动效果的方法。&lt;/p>
&lt;p>无论是否掌握着色器编程或者游戏引擎的材质制作技术，都可以跟随作者逐渐深入了解视觉效果的实现过程。&lt;/p>
&lt;p>为了方便理解，作者从最古老的红白机游戏动画效果的技术讲起（魂斗罗里动态的水流实际上是基于对调色板的动态切换）。&lt;/p>
&lt;p>然后使用 UE5 游戏引擎的材质编辑器逐渐创建示例，由浅入深展示实现效果的原理。&lt;/p>
&lt;p>为了阅读体验更佳，页面中还嵌入了基于 ShaderToy 的可运行 Demo，直接渲染出了视觉效果（估计是使用的 UE5 的 GLSL 导出功能，否则光写这些 Demo 也够费劲的了）。&lt;/p>
&lt;h3 id="执行-sql-时到底发生了什么">执行 SQL 时到底发生了什么？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-55-06.png"
width="663"
height="609"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="261px"
>&lt;/p>
&lt;p>理解SQL查询背后的复杂过程对于开发者至关重要，不仅可以提升查询性能，还能帮助选择有效的索引策略、改善资源管理，并有效诊断和解决性能瓶颈。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://blog.bytebytego.com/p/what-happens-when-a-sql-is-executed" target="_blank" rel="noopener"
>《执行 SQL 时到底发生了什么》&lt;/a>深入探讨了 SQL 命令在数据库中的执行过程，揭示了 SQL 作为现代数据管理的核心语言，是如何在关系型数据库中高效地检索、操纵和管理信息的。&lt;/p>
&lt;p>文章以MySQL为例，详细阐述了SQL语句的生命周期，包括SQL解析器、查询优化器、执行引擎以及底层存储引擎的作用。&lt;/p>
&lt;p>此外，还介绍了 SQL 标准的发展历程，从早期的 SQL-86、SQL-89 和 SQL-92，到现代的 SQL:1999 及后续标准，展示了 SQL 语言的不断进化和完善。&lt;/p>
&lt;h3 id="读什么你就是什么">读什么你就是什么
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-56-32.png"
width="500"
height="200"
loading="lazy"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="600px"
>&lt;/p>
&lt;p>我不记得我读过的书，也不记得我吃过的饭菜。&lt;/p>
&lt;p>即便如此，他们还是造就了我。&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.jim-nielsen.com/2024/you-are-what-you-read/" target="_blank" rel="noopener"
>《读什么你就是什么》&lt;/a> ​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="8bit-复古音效制作">8bit 复古音效制作
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-57-28.png"
width="690"
height="732"
loading="lazy"
class="gallery-image"
data-flex-grow="94"
data-flex-basis="226px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://sfxr.me/" target="_blank" rel="noopener"
>jsfxr&lt;/a>，一个在线音效制作工具，专门用于合成 8bit 风格的声音效果。&lt;/p>
&lt;p>通过其提供的 js 库，可以将制作的成果集成到自己的网页游戏中。 ​​​&lt;/p>
&lt;h3 id="把手机作为电脑摄像头">把手机作为电脑摄像头
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-57-43.png"
width="512"
height="447"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="274px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.dev47apps.com/" target="_blank" rel="noopener"
>DroidCam&lt;/a>&lt;/p>
&lt;p>一个很方便的小工具，可以让你的手机作为你的电脑摄像头。&lt;/p>
&lt;p>手机端支持安卓和苹果系统，电脑端支持 Windows、Linux 和 Mac。&lt;/p>
&lt;p>应急开个视频会议，或者让手机当作你的视频采集终端应该没问题。 ​​​&lt;/p>
&lt;h3 id="前端拖拽库">前端拖拽库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-58-14.png"
width="690"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="400px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/atlassian/pragmatic-drag-and-drop" target="_blank" rel="noopener"
>pragmatic-drag-and-drop&lt;/a>&lt;/p>
&lt;p>可以应用在任何前端技术栈（react、svelte 、 vue 、 angular）上的拖放组件库。 ​​​&lt;/p>
&lt;h3 id="从原理讲解基于-webglwebgpu-进行画布渲染">从原理讲解基于 webgl、webgpu 进行画布渲染
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-58-37.png"
width="690"
height="397"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/p>
&lt;p>这儿有一套关于&lt;a class="link" href="https://infinitecanvas.cc/" target="_blank" rel="noopener"
>使用 WebGL 和 WebGPU 实现一套无线画布的教程&lt;/a>。&lt;/p>
&lt;p>以下是原作者的介绍：&lt;/p>
&lt;blockquote>
&lt;p>一些知名产品包括 Figma、Modyfi、rnote、tldraw、excalidraw等等都会使用无限画布。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>作为一个前端，我对其中涉及到的渲染技术很感兴趣。尽管 tldraw、excalidraw 等普遍使用易用性更高的 Canvas2D / SVG 技术，但 JS 和 Rust 生态中也有很多编辑器、设计工具使用更底层的渲染技术对 2D 图形进行 GPU 加速，以获得更好的性能和体验，例如：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Figma 使用 C++ 编写了一个 tile-based 的渲染引擎，编译成 WASM 后调用 WebGL 渲染
Modyfi 使用了 Rust 生态中的 wgpu，同样编译成 WASM 后调用 WebGL2 渲染
因此我想通过一份教程一步步实现一个简单的无限画布，主要通过 WebGL1/2 和WebGPU 实现高性能渲染。&lt;/p>
&lt;/blockquote>
&lt;h3 id="计算机原理教学项目">计算机原理教学项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-080-%E6%9C%9F/2024-04-30-08-59-07.png"
width="1292"
height="732"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ArhanChaudhary/NAND" target="_blank" rel="noopener"
>NAND&lt;/a>，是一个图灵等价的16位计算机，完全由时钟频率和在Web上模拟的与非门电路组成。NAND拥有自己的CPU、机器语言、汇编语言、汇编器、虚拟机语言、虚拟机翻译器、编程语言、编译器、集成开发环境（IDE）和用户界面。&lt;/p>
&lt;p>从第一原理构建现代计算机：从Nand到Tetris（以项目为中心的课程）&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="关于-shell-编程">关于 shell 编程
&lt;/h3>&lt;p>我一直对于 Shell 编程怀有抵触情绪，虽然它很强大，很多在命令行中生存的程序员也根本无法拒绝 Shell 编程。&lt;/p>
&lt;p>但是我基本对 Shell 编程提不起兴趣，如果非要说原因的话，那就是：“Shell 编程对空格非常敏感”。&lt;/p>
&lt;p>还记得那个笑话：在使用 rm 命令的时候，多打了一个空格，导致整个系统被删了 &lt;code>rm -rf /空格/foo/bar&lt;/code>。&lt;/p>
&lt;p>这足以说明 Shell 如果作为一个编程语言的话，特别容易产生难以捉摸的 Bug。&lt;/p>
&lt;h3 id="梦想与努力">梦想与努力
&lt;/h3>&lt;p>我的梦想通过努力根本实现不了。&lt;/p>
&lt;p>只有通过不努力才能实现。&lt;/p>
&lt;p>请问您的梦想是什么？&lt;/p>
&lt;p>当神仙。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 079 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/</link><pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-48-07.png" alt="Featured image of post 机器文摘 第 079 期" />&lt;h1 id="机器文摘-第-079-期">机器文摘 第 079 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="人类关于航空武器的终极幻想空中航母">人类关于航空武器的终极幻想：空中航母
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-46-34.png"
width="389"
height="456"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="204px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://neverwasmag.com/2019/08/flying-aircraft-carriers/" target="_blank" rel="noopener"
>《空中航母》&lt;/a>探讨了空中航空母舰（flying aircraft carriers）这一概念，它在蒸汽朋克（steampunk）、柴油朋克（dieselpunk）和原子朋克（atompunk）等科幻小说中经常出现，已经成为这些类型文学的一个典型元素。&lt;/p>
&lt;p>文章回顾了历史上的一些尝试，以及在流行文化中的各种表现。&lt;/p>
&lt;p>大意如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>历史背景&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>空中航母的概念在现实中有其基础。一战时期的英国飞艇携带了可以保卫母舰的双翼飞机。&lt;/li>
&lt;li>二战期间，苏联通过Zveno项目在图波列夫TB-3轰炸机的机翼下携带小型战斗机。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>海军将领的预言&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>威廉·W·莫菲特（William W. Moffett）海军少将在1923年为《大众科学》（Popular Science）杂志撰写文章，预言了携带飞机的飞艇的诞生。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>美国海军的尝试&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>美国海军建造了两艘空中航母：阿克伦号（Akron）和梅肯号（Macon），它们是有史以来最大的氦气填充飞艇，但最终都在恶劣天气中失事。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>太阳能飞行甲板&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>1934年，《现代机械》（Modern Mechanix）杂志报道了一个提案，即使用可以兼作太阳能电池板的着陆带。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>广告和设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>固特异（Goodyear）在1942年的《大众机械》（Popular Mechanics）杂志中宣传了一种“战斗机飞行航母”，声称其速度超过当时水面航母的两倍。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Lockheed的CL-1201&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>20世纪50年代，洛克希德（Lockheed）进行了一项更为严肃的研究，设计了CL-1201，这是一款核动力空中航母，翼下携带一系列喷气式飞机。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>波音747的改造&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>70年代初，美国空军研究了将波音747客机改造为空中航母的可能性，主要挑战在于开发足够小的战斗机以适应其内部空间。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>虚构作品中的例子&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>文章列举了多个虚构作品中的空中航母，包括漫威漫画和电影中的神盾局（S.H.I.E.L.D.）的直升机航母、《铁甲飞龙》（Girl Genius）中的沃尔芬巴赫城堡（Castle Wulfenbach）、《神秘博士》（Doctor Who）中的联合国情报特遣队（UNIT）的飞行航空母舰“勇者号”（Valiant），以及其他一些动画、游戏和电影中的类似设定。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="为什么编程语言爱用分号作为语句终止符">为什么编程语言爱用分号作为语句终止符？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-46-55.png"
width="516"
height="285"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="434px"
>&lt;/p>
&lt;p>很多编程语言都使用 &lt;code>;&lt;/code> 分号作为一个语句的终结符号，如果你也跟我一样好奇产生这个结果的原因，可以看看&lt;a class="link" href="https://ntietz.com/blog/researching-why-we-use-semicolons-as-statement-terminators" target="_blank" rel="noopener"
>《分号在编程语言中的起源和优势》&lt;/a>这篇文章。&lt;/p>
&lt;p>作者在做这项无聊的研究之前，本来是希望给自己的编程语言寻找一个合适的终结符，作者比较心仪 &lt;code>.&lt;/code> 或者 &lt;code>!&lt;/code> 这两个符号，但一番研究之后，作者选择随大流，仍然使用分号。&lt;/p>
&lt;p>首先是为什么。&lt;/p>
&lt;p>作者推测，早期的输入设备能够输入的字符比较有限，设计语法的人，需要找到一个字符既不像句号那么常用又得出现在键盘上，于是分号就进入候选了。&lt;/p>
&lt;p>再者就是，使用分号进行断句，也比较符合英语的语法。&lt;/p>
&lt;p>不会产生语义冲突，再拿句号举例，句号有时又表示小数点，这就有些麻烦。&lt;/p>
&lt;p>最后作者说还可以选择一些比较偏门的符号（现在键盘都够用了），但是如果考虑到编程习惯，为了让他的语言更好上手，还是选择分号作为断句字符吧。&lt;/p>
&lt;h3 id="居中对齐没你想象的那么简单">居中对齐没你想象的那么简单
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-47-10.png"
width="690"
height="483"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://tonsky.me/blog/centering/" target="_blank" rel="noopener"
>《计算机科学中最难的事儿》&lt;/a>的作者有些强迫症，他总能轻易发现网页或者 App 应用里各种本该居中却没有居中的元素。&lt;/p>
&lt;p>文中他认真阐述了造成这些不完美的原因，并列举了苹果、微软等大公司也在居中方面所犯的错误，证实即使是大公司，也不能保证在任何时候都能完美解决居中问题。&lt;/p>
&lt;h3 id="手搓一个-gps-接收器">手搓一个 GPS 接收器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-47-37.png"
width="690"
height="446"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>&lt;/p>
&lt;p>这是一篇很硬核的文章，&lt;a class="link" href="https://axleos.com/building-a-gps-receiver-part-1-hearing-whispers/" target="_blank" rel="noopener"
>《手搓一个 GPS 接收器》&lt;/a>。&lt;/p>
&lt;p>这是由 4 部分组成的系列文章，作者从最基本的原理讲起，带领你一步步构建一个 GPS 接收装置。&lt;/p>
&lt;p>基本步骤：
1、首先买一个 SDR（软件定义无线电）设备，用于接收各种无线电信号。&lt;/p>
&lt;p>2、用计算机处理接收到的信号（由于卫星距离很远且速度很快，需要处理多普勒效应）。&lt;/p>
&lt;p>3、追踪和解析信号。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="宇宙的尺度">宇宙的尺度
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-48-07.png"
width="690"
height="577"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://scaleofuniverse.com/en" target="_blank" rel="noopener"
>scaleofuniverse&lt;/a>&lt;/p>
&lt;p>这个网站可以让你直观感受宇宙在不同尺度观察到的样子。&lt;/p>
&lt;p>从普朗克长度，到最大的可观测宇宙。 ​​​&lt;/p>
&lt;h3 id="最强-wii-主机改造">最强 Wii 主机改造
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-48-25.png"
width="690"
height="485"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="341px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/loopj/short-stack" target="_blank" rel="noopener"
>short-stack&lt;/a>&lt;/p>
&lt;p>家有废旧任天堂 Wii 游戏机的不要扔。&lt;/p>
&lt;p>按照这个开源教程操作一下，隔壁小孩馋哭了。&lt;/p>
&lt;p>这是一个打磨 Wii 硬件（电路板）的开源项目，作者提供了相关图纸和操作步骤。&lt;/p>
&lt;p>目的是将原本摆放在电视机旁边的 DVD 大小的游戏机，改装成一个像一盒扑克大小的可随身携带的游戏主机。&lt;/p>
&lt;h3 id="打字学英语两不误">打字学英语两不误
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-48-41.png"
width="690"
height="447"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="370px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.termtyper.com/" target="_blank" rel="noopener"
>TermTyper&lt;/a>&lt;/p>
&lt;p>通过打字练习学习一门语言（英文、法语、德语、西班牙语等）。 ​​​&lt;/p>
&lt;h3 id="在线生成字帖">在线生成字帖
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-48-53.png"
width="690"
height="438"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://paper.z2h.cn/" target="_blank" rel="noopener"
>paper&lt;/a>&lt;/p>
&lt;p>一个优雅实用的在线字帖生成网站。&lt;/p>
&lt;p>提供对中文汉字、词组和段落，以及英文字母、单词和段落的生成模式支持。其界面简洁清新，操作简单，可轻松自定义所需字帖内容。 ​​​&lt;/p>
&lt;h3 id="linux-内核实验室">Linux 内核实验室
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-49-04.png"
width="326"
height="515"
loading="lazy"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="151px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://linux-kernel-labs-zh.xyz/" target="_blank" rel="noopener"
>linux-kernel-labs&lt;/a>&lt;/p>
&lt;p>布加勒斯特理工大学的 Linux 内核教学课程。该课程通过动手实践设备驱动编写，使学习者深入理解 Linux 内核，适合所有对 Linux 内核原理感兴趣的人阅读。&lt;/p>
&lt;p>本文档主要分为两个模块，一个是“课程”，还有一个是“实验”。“课程”部分写得不甚详细，更适合有经验的教师上课时使用。而“实验”部分则是本文档最有价值的部分，写的非常的详细而且由浅入深，Linux 内核零基础的同学也可以来学习。注意“实验”模块学习之前，并不需要学习“课程”模块。&lt;/p>
&lt;h3 id="又一个波形渲染库">又一个波形渲染库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-079-%E6%9C%9F/2024-04-23-08-49-13.png"
width="505"
height="239"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="507px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://aykev.dev/webgpu-waveform/" target="_blank" rel="noopener"
>webgpu-waveform&lt;/a>。&lt;/p>
&lt;p>一个使用 WebGPU 将音频波形渲染到 HTML 画布的 js 库。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;p>也许不久之后，新出的个人电脑都带有 AI 模型的加速芯片，都本地加载了类似 Coplit 之类的智能助理，届时操作电脑的体验可能又会有所不同。&lt;/p>
&lt;p>一个可能的情况是，计算机厂商将会尝试提供一个围绕大模型的应用市场（或平台），应用开发者们，将再次像当年移动互联网流行那样，提供新一轮的各种创新应用。&lt;/p>
&lt;p>只是不知这次引领着会是谁，以及会面临怎样的法律困扰等麻烦。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 078 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/</link><pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-40-19.png" alt="Featured image of post 机器文摘 第 078 期" />&lt;h1 id="机器文摘-第-078-期">机器文摘 第 078 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="hello-world-不简单">Hello world 不简单
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-38-56.png"
width="690"
height="325"
loading="lazy"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://thecoder08.github.io/hello-world.html" target="_blank" rel="noopener"
>《hello-world》&lt;/a>，讲解了一个 C 语言编写的 helloworld 程序到底干了什么，它是怎样做到的。&lt;/p>
&lt;p>文章提供了对“Hello World”程序从源代码到最终输出的全面解析，展示了现代操作系统和硬件之间复杂的交互过程。&lt;/p>
&lt;p>通过这篇文章，可以更好地理解程序是如何在计算机上运行的，以及操作系统和硬件是如何协同工作的。&lt;/p>
&lt;h3 id="家庭服务器机架搭建指南">家庭服务器机架搭建指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-39-11.png"
width="354"
height="453"
loading="lazy"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="187px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mtlynch.io/building-first-homelab-rack/" target="_blank" rel="noopener"
>家庭服务器机架搭建指南&lt;/a>。&lt;/p>
&lt;p>如果你也考虑给自己的家庭服务器安装更专业的机架的话，可以参考这篇文章。&lt;/p>
&lt;p>文章是关于作者Mike Lynch如何构建他的第一个家庭实验室（homelab）机架的经历。文章详细介绍了他为什么决定建立一个服务器机架、如何选择和购买各种组件、以及他在搭建过程中遇到的挑战和学到的经验教训。&lt;/p>
&lt;h3 id="有效利用你的-shell-历史记录">有效利用你的 shell 历史记录
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-39-22.png"
width="436"
height="195"
loading="lazy"
class="gallery-image"
data-flex-grow="223"
data-flex-basis="536px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://martinheinz.dev/blog/110" target="_blank" rel="noopener"
>有效利用你的 shell 历史记录&lt;/a>。&lt;/p>
&lt;p>如果您经常在 shell/terminal 中工作，那么随着时间的推移，历史记录将成为您的个人知识库、文档和命令参考。能够有效地使用这些个人文档可以极大地提高您的工作效率。因此，这里有一些关于如何优化 shell 历史记录配置和使用以充分利用它的提示。 ​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="三维可视化前端库">三维可视化前端库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-39-32.png"
width="690"
height="392"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="422px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/hawk86104/icegl-three-vue-tres" target="_blank" rel="noopener"
>three vue ts js&lt;/a>。&lt;/p>
&lt;p>一款让你的三维可视化项目快速落地の开源框架 🎊🎉🎉 永久开源，免费商用 ​​​。&lt;/p>
&lt;h3 id="开源大模型实用指南">开源大模型实用指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-39-41.png"
width="690"
height="237"
loading="lazy"
class="gallery-image"
data-flex-grow="291"
data-flex-basis="698px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/datawhalechina/self-llm" target="_blank" rel="noopener"
>self-llm&lt;/a> 是一个围绕开源大模型、针对国内初学者、基于 AutoDL 平台的大模型教程，针对各类开源大模型提供包括环境配置、本地部署、高效微调等技能在内的全流程指导，简化开源大模型的部署、使用和应用流程，让更多的普通学生、研究者更好地使用开源大模型，帮助开源、自由的大模型更快融入到普通学习者的生活中。&lt;/p>
&lt;h3 id="网络编程入门教程">网络编程入门教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-39-50.png"
width="385"
height="339"
loading="lazy"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="272px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/rogerzhu/-bgnet0-cn" target="_blank" rel="noopener"
>Beej 的网络编程课（中文版）&lt;/a>&lt;/p>
&lt;p>国内有网友将 Beej 大神的 &lt;a class="link" href="https://github.com/beejjorgensen/bgnet0" target="_blank" rel="noopener"
>Beej&amp;rsquo;s Guide to Network Concepts&lt;/a> 翻译为中文。&lt;/p>
&lt;p>译者自介绍：&lt;/p>
&lt;blockquote>
&lt;p>我还记得我第一次看到 Beej 大神的文字是很多年前的一本基于c语言讲的计算机网络。按照 Beej 自己的官网上说法，这一系列的文章算不上一本正式的书，是他大学上课的资料整理。不同于之前的c语言版本，这一资料用的是现在使用的最广泛的语言之一python 来介绍原理，更加贴近整个学校的教学体系。&lt;/p>
&lt;/blockquote>
&lt;p>开头段落引用：&lt;/p>
&lt;blockquote>
&lt;p>这是一份介绍计算机网络中一系列常见概念的读物，注意，这份文档里面并不是我的另外那本《Beej的网络编程指南&amp;ndash;C语言版》[flbg[Beej的 的网络编程指南|bgnet]]。这一系列文章旨在让读者对各种繁杂的网络术语有所了解，当然，为了加深理解，文章中会有一些使用python进行的编程练习和例子。&lt;/p>
&lt;/blockquote>
&lt;h3 id="通过游戏学习-git">通过游戏学习 Git
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-40-02.png"
width="690"
height="421"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="393px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://ohmygit.org/" target="_blank" rel="noopener"
>ohmygit&lt;/a>，一个学习 Git 操作的开源小游戏。&lt;/p>
&lt;p>游戏通过故事性关卡的设置，让玩家可以再每一关都学习一个基本的 Git 操作。 ​​​&lt;/p>
&lt;h3 id="在终端里显示地图">在终端里显示地图
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-078-%E6%9C%9F/2024-04-16-08-40-19.png"
width="690"
height="410"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="403px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/rastapasta/mapscii" target="_blank" rel="noopener"
>mapscii&lt;/a>，一个有趣的项目，在终端里用字符绘制地图。&lt;/p>
&lt;p>基于 nodejs 实现。&lt;/p>
&lt;p>支持用鼠标缩放。&lt;/p>
&lt;p>兼容大多数终端（Windows 需要使用 Putty 进行登录）。&lt;/p>
&lt;p>以下命令可快速体验：telnet mapscii.me ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="克制">克制
&lt;/h3>&lt;p>保持克制，是感受幸福和美好的关键基础，正像是玩游戏不能作弊无限命那样，一旦失去限制，事情要么走向无聊和乏味，要么走向美好幸福的反面。&lt;/p>
&lt;p>无论是工作还是日常生活，都适用。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 077 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-48-53.png" alt="Featured image of post 机器文摘 第 077 期" />&lt;h1 id="机器文摘-第-077-期">机器文摘 第 077 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="不下雨就不能上网">不下雨就不能上网？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-48-38.png"
width="510"
height="209"
loading="lazy"
class="gallery-image"
data-flex-grow="244"
data-flex-basis="585px"
>&lt;/p>
&lt;p>当年有个流传很广的关于汽车的故事。说的是福特工程师接到一个顾客投诉，他每天开车路过冰淇淋商店买冰淇淋，每当买香草冰淇淋的时候，发动机就会锁死。&lt;/p>
&lt;p>看似很玄的一个故障，在工程师不屑的努力下，发现了故障原因&amp;mdash;-“香草冰淇淋制作时间非常短”，顾客短时间内停车再发动，导致车载电脑开启了保护模式。&lt;/p>
&lt;p>现在又有一个关于 Wi-fi 的真实段子，来源于这篇&lt;a class="link" href="https://predr.ag/blog/wifi-only-works-when-its-raining/" target="_blank" rel="noopener"
>《只有下雨才有 Wi-fi》&lt;/a>。&lt;/p>
&lt;p>这篇文章是作者在愚人节发布的，旨在以幽默的方式探讨一个看似荒谬的现象。&lt;/p>
&lt;p>作者分享了一个非常“走近科学”的故事，即：家里的 Wi-Fi 信号只有在下雨时才能正常工作。&lt;/p>
&lt;p>每当下雨时，Wi-Fi 连接就会变得非常稳定，而雨停后不久，连接就会变得不稳定。&lt;/p>
&lt;p>为了解决这个问题，作者开始调查家庭网络设置。&lt;/p>
&lt;p>他们家使用的是一种通过两个高增益定向 Wi-Fi 天线建立的视线Wi-Fi桥接（line-of-sight Wi-Fi bridge）连接，这种设置在过去的十年里一直运行得很好。&lt;/p>
&lt;p>作者通过一系列的排查和调试，包括重启设备、检查网络硬件、测试有线连接等，都没有找到问题的根源。&lt;/p>
&lt;p>最终，作者在一次检查过程中意识到，他们家附近的一棵大树随着时间的增长，其顶部的树枝开始干扰 Wi-Fi 信号。&lt;/p>
&lt;p>每次下雨时，雨水的重量会使树枝下垂，暂时避开了对 Wi-Fi 信号的遮挡，&lt;/p>
&lt;p>这就是为什么雨停后不久 Wi-Fi 就会再次出现问题的原因。&lt;/p>
&lt;p>解决这个问题的方法是升级硬件。&lt;/p>
&lt;p>作者家更换了新的 802.11n Wi-Fi 设备，这些设备采用了“波束成形”（beamforming）技术，可以在多天线传输时形成和引导信号，提高信号的有效范围和质量。通过这次升级，即使在不下雨的时候，Wi-Fi 连接也能保持稳定。&lt;/p>
&lt;h3 id="软件一直迭代更新是软件企业的阴谋吗">软件一直迭代更新是软件企业的阴谋吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-48-53.png"
width="631"
height="316"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="479px"
>&lt;/p>
&lt;p>安德鲁·凯利（Andrew Kelly）写过一篇文章，阐述了为什么我们不可能拥有完美的软件。&lt;/p>
&lt;p>他指出软件需要经常升级是一件很诡异的事情，因为“数字信息实际上不会自行腐烂”。&lt;/p>
&lt;p>也就是说，软件不应该仅仅因为搁置在那里就会自动变得更糟（他不会不知道热力学第二定律）。&lt;/p>
&lt;p>他认为这种维护工作是一种人为的需求。&lt;/p>
&lt;p>也就是说，持续维护是公司的阴谋，为了盈利，公司会做出不必要的软件升级。&lt;/p>
&lt;p>（微软：你在教我做事？）&lt;/p>
&lt;p>不过接下来这篇文章&lt;a class="link" href="https://two-wrongs.com/laws-of-software-evolution" target="_blank" rel="noopener"
>《软件演化法则》&lt;/a>，则认为“软件持续迭代更新并不仅仅是软件企业的阴谋”。&lt;/p>
&lt;p>文章指出，软件存在是为了支持现实世界的任务，随着现实世界的变化，软件也必须随之变化，否则就会变得不再相关。&lt;/p>
&lt;p>此外，随着软件的变化，其复杂性会增加，除非投入努力来抵消这种效应，否则进一步变更的成本会增加。&lt;/p>
&lt;p>文中还提到，软件需要适应不断变化的环境、其他软件以及用户——即人们。人们会根据环境改变他们的态度和流程，软件也需要围绕这些变化进行适应。&lt;/p>
&lt;p>因此，软件的持续迭代和更新不仅仅是企业为了利润而进行的行为，而是由于软件需要适应不断变化的现实世界和用户需求。这种适应性是软件发展的一个重要方面，也是软件维护工作的一个重要驱动力。&lt;/p>
&lt;p>（微软：我谢谢你）&lt;/p>
&lt;h3 id="ray-marching-渲染入门">Ray Marching 渲染入门
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-49-05.png"
width="591"
height="406"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://connorahaskins.substack.com/p/ray-marching-menger-sponge-breakdown" target="_blank" rel="noopener"
>ray-marching-menger-sponge-breakdown&lt;/a>&lt;/p>
&lt;p>本文的作者Connor A. Haskins，通过详尽的解析和丰富的示例，带领我们一步步了解“射线行进”的原理和应用。&lt;/p>
&lt;p>射线行进技术是一种介于光栅化和光线追踪之间的渲染方法。&lt;/p>
&lt;p>与光线追踪不同，它不是从像素出发去计算与场景的交点。&lt;/p>
&lt;p>射线行进通过迭代的方式，从屏幕像素发出射线，利用有符号距离场（SDF）来计算射线与场景中物体的距离，从而实现高效的渲染。&lt;/p>
&lt;p>文章中，作者详细介绍了如何使用 &lt;a class="link" href="www.shadertoy.com/" >ShaderToy&lt;/a> 平台上的 GLSL ES 代码片段来实现射线行进算法。&lt;/p>
&lt;p>通过不断的迭代和计算，我们可以精确地渲染出Menger海绵的每一个细节。这个过程不仅展示了数学和计算机图形学的完美结合，也为我们提供了一种全新的视角来理解和探索三维空间。&lt;/p>
&lt;h3 id="使用-dos-调试器-debugger-编程">使用 DOS 调试器 (Debugger) 编程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-49-32.png"
width="379"
height="478"
loading="lazy"
class="gallery-image"
data-flex-grow="79"
data-flex-basis="190px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://susam.net/programming-with-dos-debugger.html" target="_blank" rel="noopener"
>使用 DOS 调试器(Debugger)编程&lt;/a>。&lt;/p>
&lt;p>上世纪九十年代，如果你有一台装有 MS-DOS 或者 Windows 98 的个人电脑。&lt;/p>
&lt;p>当你希望动手编程，但是手上恰好没有各种编译器、IDE 集成开发环境时，你可以考虑使用 Debugger 来应急。&lt;/p>
&lt;p>理论上，它可以做任何事情（我想起了那个老段子，电脑高手手写刻录光盘帮朋友连夜做了一个操作系统）。&lt;/p>
&lt;p>MS-DOS 和 Windows 98 都带有一个名为 DEBUG.EXE 的调试器程序，可用于处理汇编语言指令和机器代码。在 MS-DOS 版本 6.22 中，此程序被命名为 DEBUG.EXE ，它通常出现在 C:\DOS\DEBUG.EXE 。在 Windows 98 上，此程序通常位于 C:\Windows\Command\Debug.exe 。它是一个面向行的调试器，支持各种有用的功能来处理和调试由机器代码组成的二进制可执行程序。&lt;/p>
&lt;p>在上面这篇文章中，我们将看到如何使用这个调试器程序来“编”一些最小的程序，这些程序将一些字符打印到标准输出。&lt;/p>
&lt;p>当然包括经典的“hello， world”。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="南瓜操作系统">南瓜操作系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-49-54.png"
width="463"
height="339"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/migueletto/PumpkinOS" target="_blank" rel="noopener"
>PumpkinOS&lt;/a> 是 PalmOS 的开源实现，运行在现代架构（x86、ARM 等）上。它不是普通的 PalmOS 模拟器（它不需要 PalmOS ROM），但它可以运行 m68K PalmOS 应用程序。&lt;/p>
&lt;p>内含 PalmOS 上的四个 PIM 应用程序：AddressBook、MemoPad、ToDoList 和 DateBook。这些应用程序的源代码分布在一个或多个 PalmOS SDK 中，并经过调整以在 PumpkinOS 上正确编译。&lt;/p>
&lt;p>有关描述 PumpkinOS 各方面详情，见这里：https://pmig96.wordpress.com/category/palmos/&lt;/p>
&lt;h3 id="随机卡通头像生成器">随机卡通头像生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-50-08.png"
width="606"
height="538"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zengm.com/facesjs/" target="_blank" rel="noopener"
>face.js&lt;/a>，&lt;/p>
&lt;p>比&lt;a class="link" href="https://txstc55.github.io/ugly-avatar/" target="_blank" rel="noopener"
>丑丑头像生成器&lt;/a>好看那么一点儿的头像生成库。&lt;/p>
&lt;p>faces.js 是一个生成和显示卡通面孔的 JavaScript 库，有点让人想起任天堂 Wii 生成随机 Miis 的方式。人脸绘制为可缩放矢量图形 （SVG）。 ​​​&lt;/p>
&lt;h3 id="又一个提示词市场">又一个提示词市场
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-077-%E6%9C%9F/2024-04-09-08-50-25.png"
width="690"
height="531"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://artiversehub.ai/cn/prompt-marketplace" target="_blank" rel="noopener"
>prompt-marketplace&lt;/a>。&lt;/p>
&lt;p>文生图提示词市场，适用于多个平台的免费 AI 图像提示。每天更新提示。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="关于微软偷偷给-windows-用户安装微软电脑管家">关于微软偷偷给 Windows 用户安装“微软电脑管家”
&lt;/h3>&lt;p>微软偷摸给 windows 用户安装自家的“管家”软件的行为，就好像你在被窝裸睡正爽，突然有一双手伸进来，默默给你穿上了内裤。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会不定期分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 076 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/</link><pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-40-10.png" alt="Featured image of post 机器文摘 第 076 期" />&lt;h1 id="机器文摘-第-076-期">机器文摘 第 076 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="太阳有意识吗">太阳有意识吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-40-10.png"
width="690"
height="460"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>许多文化和宗教传统中，太阳和其他天体被认为是有生命和智慧的。&lt;/p>
&lt;p>例如，在古罗马和印度，太阳被尊为神；在其他某些文化中，太阳是女神。&lt;/p>
&lt;p>这些传统反映了人类对自然界的拟人化理解。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.sheldrake.org/files/pdfs/papers/Is_the_Sun_Conscious.pdf" target="_blank" rel="noopener"
>太阳有意识吗？&lt;/a>&lt;/p>
&lt;p>这篇文章的核心内容是探讨太阳是否可能具有意识。&lt;/p>
&lt;p>文章首先指出，从机械唯物主义或物理主义的角度来看，太阳显然不是有意识的，因为在这些观点中，宇宙是一个机械系统，自然是非意识的，意识只是大脑物理活动的产物或幻象。然而，作者提出，从泛心论（panpsychism）的角度来看，意识可能是自然界多层次组织结构中的基本特征，不仅仅局限于大脑。&lt;/p>
&lt;p>文章进一步探讨了泛心论和信息整合理论（Integrated Information Theory, IIT），这些理论认为意识可能是物质的基本属性，存在于从原子到生物体的各种自组织系统中。文章还讨论了电磁场理论对意识的看法，这些理论认为大脑的电磁场可能就是意识的物理基础。&lt;/p>
&lt;p>作者提出了几个假设，包括Greg Matloff的“志愿星假设”（volitional star hypothesis），该假设认为恒星可能通过控制电磁驱动的喷流来调整在星系中的位置。另一个假设是Clément Vidal的“stellivore hypothesis”，该假设认为一些恒星可能是捕食者，通过从双星系统中的伴星吸食物质来维持自己。&lt;/p>
&lt;p>文章最后讨论了太阳的电磁场可能是其意识的物理基础。太阳是一个由等离子体组成的极其复杂的电磁系统，其电磁活动影响整个太阳系甚至更远。太阳的电磁场可能像大脑的神经网络一样，整合来自太阳系各个部分的信息。&lt;/p>
&lt;p>作者总结说，我们可以选择相信宇宙是非意识的，由永恒的数学法则统治，通过无目的和无意识的过程演化；或者我们可以选择接受泛心论的观点，即意识可能是自然界多层次组织结构中的基本特征。如果太阳有意识，那么它可能关心的是调节和保护自己的身体，以及通过电磁活动影响整个太阳系。此外，太阳可能通过其在银河系中的位置和与其他恒星系统的相互作用来感知和影响更大的宇宙。&lt;/p>
&lt;p>&lt;em>注：以上内容来自月之暗面聊天模型 &lt;a class="link" href="https://kimi.moonshot.cn/" target="_blank" rel="noopener"
>kimi&lt;/a> 的总结&lt;/em>&lt;/p>
&lt;h3 id="计划式编程还是探索式编程">计划式编程还是探索式编程？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-40-26.png"
width="690"
height="443"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="373px"
>&lt;/p>
&lt;p>来自 HN 上的一个讨论：https://news.ycombinator.com/item?id=39835343&lt;/p>
&lt;p>作者写了一篇文章表达了自己的编程习惯以及正在做的一些尝试：https://blog.dziban.net/essays/explorative-programming/&lt;/p>
&lt;p>作者表示，自己从来就没有按部就班地编程过，那种教科书上“从设计蓝图到开发计划再到编码实现”的“正规”方式自己根本适应不了。&lt;/p>
&lt;p>他喜欢的方式是，面对一个需要编程解决的问题，直接上手干，然后一边试一边改。&lt;/p>
&lt;p>貌似有很多程序员都是这样，我自己在编程时一般会在脑子里先构思一下，但也是边写边改。&lt;/p>
&lt;p>不过也有例外，记得有次我在 YouTube 上看到一个大神面试，考官给出问题，然后他直接写代码，写完一遍执行通过，一个错误都没改。&lt;/p>
&lt;p>HN 上同样有不同的声音，有人表示喜欢先仔细设计好再进行编码实现，可能个人习惯不同吧。&lt;/p>
&lt;p>但是，讨厌反馈周期长的事情是人的本性，人们都喜欢立即能看到效果。&lt;/p>
&lt;p>所以作者推断，肯定是喜欢这种边干边改的程序员居多。&lt;/p>
&lt;p>他给这种编程方式取名叫“探索式编程”，并表示目前的 IDE 、编程语言等各种环境都没有为这种编程方式提供方便。&lt;/p>
&lt;p>比如：不要基于文件管理各种函数和变量，随时自动给整套环境或某个函数提供快照，这样可以像探索迷宫那样，错了可以立即回到刚才的转角。&lt;/p>
&lt;p>最后作者表示自己正在动手制作一套这样的环境，并且选择 Common Lisp 作为编程语言（因为 Lisp 最接近作者想要的动态定义效果）。&lt;/p>
&lt;p>不过我看完作者的构思之后，感觉当前比较火的 Python 语言外加 &lt;a class="link" href="https://www.dataschool.io/jupyter-and-ipython-terminology/" target="_blank" rel="noopener"
>Jupter notebook&lt;/a> 也能满足一部分需求吧。&lt;/p>
&lt;h3 id="探索遗失的网络世界telnet-的复古魅力">探索遗失的网络世界：Telnet 的复古魅力
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-40-43.png"
width="690"
height="351"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>尽管 Telnet 作为一种远程访问服务器的工具已经被 Secure Shell (SSH) 所取代，但仍有一些人保持着他们的 Telnet 服务在线，因为它能够提供一种复古的娱乐体验。&lt;/p>
&lt;p>通过 Telnet，用户可以连接到不同的服务器，欣赏动画ASCII艺术、玩游戏等。&lt;/p>
&lt;p>在文章&lt;a class="link" href="https://thenewstack.io/the-lost-worlds-of-telnet/" target="_blank" rel="noopener"
>《The Lost Worlds of Telnet》&lt;/a>中，作者回顾了 Telnet 这个被遗忘的互联网工具的历史和文化。&lt;/p>
&lt;p>从ASCII艺术到复古游戏，Telnet不仅仅是SSH的前身，它还是一个充满乐趣的数字时光机。&lt;/p>
&lt;h3 id="从-160-行代码到-200-亿安装量curl-的传奇故事">从 160 行代码到 200 亿安装量：Curl 的传奇故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-41-08.png"
width="690"
height="381"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="434px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.infoq.cn/article/fEABoclZW0Fswu2g5Vvu" target="_blank" rel="noopener"
>本文介绍了 curl 的创始人 Daniel Stenberg 在 FOSDEM 2024 大会上的演讲内容&lt;/a>。&lt;/p>
&lt;p>Stenberg 分享了他从事开源项目的经历和见解，强调了成功的开源项目背后并没有天才或魔法，只是长期的努力和对创意的持续追求。&lt;/p>
&lt;p>他还提到了 curl 项目的起源和发展历程，以及在开发过程中所遇到的挑战和教训。&lt;/p>
&lt;p>尽管 curl 已经成为一项广泛应用的数据传输工具，但 Stenberg 强调了团队合作的重要性，并分享了他对开源社区的感悟和建议。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="猜-rgb-值的小游戏">猜 RGB 值的小游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-41-24.png"
width="690"
height="493"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://susam.net/myrgb.html" target="_blank" rel="noopener"
>这有一个小游戏，网页随机显示一个背景色&lt;/a>。&lt;/p>
&lt;p>并给你三个滑动条，代表 RGB 的值，你通过拖动他们形成一个你的猜测值。&lt;/p>
&lt;p>看你几次能够才对当前背景色的值。&lt;/p>
&lt;p>前端开发和设计师应该比较好上手吧。 ​​​&lt;/p>
&lt;h3 id="图像分辨率增强工具">图像分辨率增强工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-41-34.png"
width="690"
height="468"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/upscayl/upscayl" target="_blank" rel="noopener"
>开源免费的跨平台图像分辨率增强工具&lt;/a>。&lt;/p>
&lt;p>支持在你的桌面环境独立部署。 ​​​&lt;/p>
&lt;h3 id="notepadnext">NotepadNext
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-41-48.png"
width="690"
height="469"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;p>替换 Windows 自带记事本又多一个选项。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dail8859/NotepadNext" target="_blank" rel="noopener"
>NotepadNext&lt;/a>，开源跨平台编辑器（GPL3协议），Notepad++ 的平替。&lt;/p>
&lt;p>虽然作者说目前还有不少 bug 和待完成的功能，但是估计网友们苦 Notepad++ 久矣，对这个项目都很热情，目前超过 7k star。 ​​​&lt;/p>
&lt;h3 id="用-javascript-做深度学习">用 Javascript 做深度学习
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-42-00.png"
width="690"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="350px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/eduardoleao052/js-torch" target="_blank" rel="noopener"
>js-torch&lt;/a>，Javascript 深度学习库，跟 PyTorch API 基本一致，优势是可在任意 JS 环境运行，在浏览器里也可以进行深度学习训练。&lt;/p>
&lt;p>Demo 地址：eduardoleao052.github.io/js-torch/assets/demo/demo.html ​​​&lt;/p>
&lt;h3 id="丑丑头像生成器">丑丑头像生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-076-%E6%9C%9F/2024-04-02-08-42-13.png"
width="495"
height="491"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>&lt;/p>
&lt;p>地址：https://txstc55.github.io/ugly-avatar/&lt;/p>
&lt;p>随机生成丑不拉几的手绘头像。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 075 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/</link><pubDate>Tue, 26 Mar 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-49-17.png" alt="Featured image of post 机器文摘 第 075 期" />&lt;h1 id="机器文摘-第-075-期">机器文摘 第 075 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="40-年编程经验分享">40 年编程经验分享
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-48-18.png"
width="431"
height="491"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://liw.fi/40/" target="_blank" rel="noopener"
>40 年编程经验分享&lt;/a>&lt;/p>
&lt;p>作者 14 岁接触电脑（1984年），为了玩到游戏而不得不学习 BASIC 编程，而后一发不可收拾，决定了他一生的事业。&lt;/p>
&lt;p>与几乎所有过来人一样，作者认识到自己走了一些弯路，并希望分享一些掏心窝子的话，给那些刚起步不久的程序员。&lt;/p>
&lt;p>&lt;em>作者很罗嗦，写了很多，我觉得大概率没人能听进去&lt;/em>&lt;/p>
&lt;p>歌词大意：&lt;/p>
&lt;p>1、创造软件的核心技能不是编程，而是沟通和协作，哪怕是只有 1 个人的项目，也需要考虑“过去的你”、“现在的你”和“未来的你”这三个人的沟通；&lt;/p>
&lt;p>2、做事有条理，不被打扰，吃好睡好是提升生产力的关键，一套合理的个人事务管理与跟踪系统很有必要。作者提到了&lt;a class="link" href="https://gtdfh.liw.fi/" target="_blank" rel="noopener"
> GTD &lt;/a>这套个人时间管理方法论（我也曾沉迷过一段时间）。&lt;/p>
&lt;p>3、软件生产的大部分成本来自初始版本之后，即所谓的维护阶段。最初的开发可能需要一两年的时间，维护将需要几十年的时间。(这说的是比较成功的软件吧？）所以提前考虑好维护成本也很重要。&lt;/p>
&lt;p>4、两周之外不要做详细计划，但两周内进行详细计划并且按照方向进行迭代，是比较有效的方式。&lt;/p>
&lt;p>5、书面表达很重要，文字材料用于交流的实用性很高。&lt;/p>
&lt;p>6、写简单的、清晰的代码，而不是复杂的、高级的代码。&lt;/p>
&lt;p>7、推荐阅读&lt;a class="link" href="https://github.com/Cactus-proj/A-Philosophy-of-Software-Design-zh" target="_blank" rel="noopener"
>《软件设计哲学》&lt;/a>（链接是我找到的中文版，之前好像收录过）。&lt;/p>
&lt;h3 id="30-年前写的一个对话框一直用到今天">30 年前写的一个对话框一直用到今天
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-48-36.png"
width="637"
height="680"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="224px"
>&lt;/p>
&lt;p>Windows 自带的格式化磁盘对话框，来自于 30 年前的一次临时提交，当时作者花了大概一个早上，编写了它。&lt;/p>
&lt;p>谁知后来竟再也没改过。&lt;/p>
&lt;p>文章来自作者的推文：twitter.com/davepl1968/status/1772042158046146792&lt;/p>
&lt;blockquote>
&lt;p>在1994年的一个阴雨连绵的星期四早晨，我在微软公司写下了这个格式化对话框，如果我没记错的话。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>当时我们正在将Windows 95用户界面的无数行代码移植到NT系统上，而格式化功能正是Windows NT与Windows 95差异足够大，以至于我们必须设计一些定制化的用户界面的领域之一。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我拿出一张纸，记录下了所有与磁盘格式化相关的选项和选择，比如文件系统、标签、簇大小、压缩、加密等。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>接着我启动了VC++ 2.0，使用资源编辑器简单地将所有你必须做出的选择以垂直堆叠的方式布局出来，大致按照你必须做出这些选择的顺序。它并不优雅，但在优雅的用户界面到来之前，它能够凑合使用。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>那是大约30年前的事了，而那个对话框至今仍是我那个星期四早上的临时版本，所以请小心对待“临时”解决方案！&lt;/p>
&lt;/blockquote>
&lt;h3 id="追求财富的科技智慧naval-ravikant-的深刻见解">追求财富的科技智慧：Naval Ravikant 的深刻见解
&lt;/h3>&lt;p>在这个快速变化的时代，科技不仅重塑了我们的生活方式，也重新定义了财富的概念。Naval Ravikant，作为一位杰出的科技投资者和 AngelList 的联合创始人，为我们提供了一份关于如何在科技领域追求财富、实现个人自由和成功的宝贵指南。&lt;/p>
&lt;p>&lt;a class="link" href="https://nav.al/rich" target="_blank" rel="noopener"
>《How to Get Rich》(怎样致富？）&lt;/a>&lt;/p>
&lt;p>这篇文章是基于Naval在Twitter上发布的一系列推文（tweetstorm）而扩展的，这些推文因其深刻的见解而迅速走红。Naval在文中讨论了如何通过追求财富来获得自由，而不是仅仅为了金钱或社会地位。他提出了一系列原则和建议，包括：&lt;/p>
&lt;ol>
&lt;li>寻求财富而不是金钱或地位。&lt;/li>
&lt;li>财富是可以在你休息时仍能为你赚钱的资产。&lt;/li>
&lt;li>金钱是社会信用，可以用来转移财富。&lt;/li>
&lt;li>地位是社会层级中的一种排名。&lt;/li>
&lt;li>创造财富不是零和游戏，而是正和游戏。&lt;/li>
&lt;li>通过提供社会所需的产品或服务来创造财富。&lt;/li>
&lt;li>避免将自己的时间出租，而是要拥有股权以获得财务自由。&lt;/li>
&lt;li>通过建立信誉和独特的个人品牌来吸引运气和机会。&lt;/li>
&lt;li>利用互联网扩大职业可能性，找到并放大你的小众兴趣。&lt;/li>
&lt;li>选择与长期合作的长期伙伴一起工作。&lt;/li>
&lt;/ol>
&lt;p>Naval认为，财富不仅仅是金钱的堆砌，更是能够在我们休息时持续创造价值的资产。他区分了财富、金钱与地位，强调了财富的真正价值在于它能够为我们带来自由——从日常的束缚中解放出来，拥有选择的自由。&lt;/p>
&lt;p>Naval Ravikant的见解为我们提供了一种全新的视角，让我们认识到在科技时代追求财富不仅仅是为了物质的积累，更是为了实现个人的梦想和自由。他的理念和策略无疑将激励和指导科技爱好者、创业者和投资者在这个时代创造更多的价值和可能性。&lt;/p>
&lt;p>&lt;em>这篇文章很长，长到我一直没耐心看完，不得不求助于 AI 帮我总结&lt;/em>&lt;/p>
&lt;h3 id="用-javascript-实现一个源码解析器">用 Javascript 实现一个源码解析器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-48-53.png"
width="631"
height="224"
loading="lazy"
class="gallery-image"
data-flex-grow="281"
data-flex-basis="676px"
>&lt;/p>
&lt;p>解析器（Parser）是源码编译工具的重要组成，包括一些现代的文本编辑器，为了实现语法高亮、自动补全等功能，也需要在代码编辑时刻进行解析。&lt;/p>
&lt;p>很多人遇到此类任务的第一感觉是很难（比如让你手写一个 C++ 的解析器），但如果写一个轻量的、小的解析器也许很简单。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://marijnhaverbeke.nl/blog/lezer.html" target="_blank" rel="noopener"
>《Lezer ： A parsing system for CodeMirror, inspired by Tree-sitter》&lt;/a>，是开源前端代码编辑器 &lt;a class="link" href="https://codemirror.net/" target="_blank" rel="noopener"
>CodeMirror&lt;/a> 的作者所写。&lt;/p>
&lt;p>写这篇文章主要是为了介绍他给 CodeMirror 所编写的解析器 &lt;a class="link" href="https://lezer.codemirror.net/" target="_blank" rel="noopener"
>Lezer&lt;/a> ，同时讲解了怎样使用 Javascript 语言构建一个解析器，作者认为此类任务并没有想象中那么复杂，只要掌握一些基本的思路，普通程序员也可以做出符合自己需求的解析器来。&lt;/p>
&lt;h3 id="2000-个字符写一个-intel-8080-cpu-模拟器">2000 个字符写一个 Intel 8080 CPU 模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-49-17.png"
width="637"
height="922"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="165px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://nanochess.org/emulator.html" target="_blank" rel="noopener"
>2000 个字符写一个 Intel 8080 CPU 模拟器&lt;/a>&lt;/p>
&lt;p>注意，不是 2000 行代码，是 2000 个字符。&lt;/p>
&lt;p>作者给出的这些代码是他参加&lt;a class="link" href="https://www.ioccc.org" target="_blank" rel="noopener"
> IOCCC &lt;/a>比赛的获奖作品，即文章标题提到的 8080 模拟器。&lt;/p>
&lt;p>IOCCC 的全称是 International Obfuscated C Code Contest（国际C语言混乱代码大赛）。&lt;/p>
&lt;p>这段仅有 2000 个字符的 C 语言程序不仅模拟了 8080 CPU，并且还带有键盘输入和屏幕输出的支持，以及一个磁盘控制器，可以算是一个简单的个人电脑了。&lt;/p>
&lt;p>在运行后可以加载一些古老的 BASIC 解释器，实现最基本的编程操作。&lt;/p>
&lt;p>作者在文章里介绍了 8080 的一些技术细节，比起现在的 CPU ，那时的 CPU 确实简单很多。&lt;/p>
&lt;p>至于这段代码，虽然作者也在文中试图解释了一些原理，不过还是不要试图弄懂它了吧。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="网页打包下载到本地">网页打包下载到本地
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-49-40.png"
width="690"
height="304"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="544px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://crates.io/crates/monolith" target="_blank" rel="noopener"
>monolith&lt;/a>，一个可以将任何网页打包下载到一个 HTML 文件中的工具。&lt;/p>
&lt;p>与传统的“将页面另存为”不同， monolith 不仅保存目标文档，还同时嵌入了 CSS、图像和 JavaScript 资源，生成了一个存储和共享的 HTML5 文档。&lt;/p>
&lt;p>与使用命令 &lt;code>wget -mpk&lt;/code> 保存网站相比，此工具将所有资产嵌入为数据 URL，因此即使在离线情况下，浏览器也可以还原页面的原始效果。&lt;/p>
&lt;h3 id="最小的-logo-语言解释器">最小的 LOGO 语言解释器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-49-54.png"
width="690"
height="509"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/nanochess/bootLogo" target="_blank" rel="noopener"
>BootLOGO&lt;/a>，Logo 语言的一个小型解释器，只有不到512字节大小。&lt;/p>
&lt;p>汇编语言写的。可以装在x86 引导扇区启动系统。&lt;/p>
&lt;p>小海龟 LOGO 语言是一代人的计算机启蒙语言。早年流行的小霸王学习机上也有过 ​​。&lt;/p>
&lt;h3 id="将任意-ai-模型发布为-http-服务">将任意 AI 模型发布为 HTTP 服务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-50-42.png"
width="865"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="539px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/kibae/onnxruntime-server" target="_blank" rel="noopener"
>ONNX Runtime Server&lt;/a> 是一个为 ONNX 推理提供 TCP 和 HTTP/HTTPS REST API 的服务程序。&lt;/p>
&lt;p>可以方便地将任意 ONNX 格式的模型发布为 HTTP 服务供外部调用。&lt;/p>
&lt;p>ONNX 是一个开放格式，用于描述和承载深度学习模型，允许跟不同的深度学习框架进行模型格式转换。ONNXRuntime 旨在提供一种高效的方式来运行 ONNX 模型，支持多种硬件和软件平台，包括 CPU、GPU 和边缘设备。&lt;/p>
&lt;h3 id="给-sqlite-数据提供-http-服务">给 Sqlite 数据提供 HTTP 服务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-075-%E6%9C%9F/2024-03-26-08-50-53.png"
width="690"
height="363"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/thevahidal/soul" target="_blank" rel="noopener"
>Soul&lt;/a>，一个给 Sqlite 数据库提供 REST API 的命令行工具。&lt;/p>
&lt;p>运行 &lt;code>soul -d sqlite.db -p 8000&lt;/code> ，它会在 网页链接 上启动一个 REST API，在 &lt;code>ws://localhost:8000&lt;/code> 上启动一个 Websocket 服务器。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="信誉堪比黄金">信誉堪比黄金
&lt;/h3>&lt;p>在低信誉社会里要不要坚持守信，是一个有点儿复杂的问题。&lt;/p>
&lt;p>普遍讲信誉的环境里，低信誉个体短期会带来极大收益，但长期是无法生存的。&lt;/p>
&lt;p>与之相反，低信誉环境下，高信誉个体短期会损害利益，但长期会积累起坚不可摧的东西。&lt;/p>
&lt;p>所以我个人的想法是，在物理条件允许的情况下，尽量讲信誉，将之视为比黄金更珍贵的品质。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 074 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/</link><pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-47-47.png" alt="Featured image of post 机器文摘 第 074 期" />&lt;h1 id="机器文摘-第-074-期">机器文摘 第 074 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="在谷歌日历里玩打砖块游戏">在谷歌日历里玩打砖块游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-47-34.png"
width="581"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>打砖块是一款历史悠久但是十分容易上瘾的消除类游戏。&lt;/p>
&lt;p>之前在家用主机、PC、街机等游戏平台上都有大量的版本。&lt;/p>
&lt;p>现在有人把打砖块游戏移植到了一个从没去过的地方&amp;mdash;-谷歌日历。&lt;/p>
&lt;p>作者做了一个叫做 &lt;a class="link" href="https://chromewebstore.google.com/detail/breaktime/efajcgehdfpliglonbkjmifmibpphafk?hl=en&amp;amp;authuser=0" target="_blank" rel="noopener"
>BreakTime&lt;/a> 的休闲游戏，打开谷歌日历的页面就能玩。&lt;/p>
&lt;p>游戏是一个谷歌浏览器插件，到市场安装后再打开谷歌日历后就玩到游戏了。&lt;/p>
&lt;p>游戏一共写了大概 1500 行 Js 代码（含一个迷你游戏引擎）。&lt;/p>
&lt;p>&lt;a class="link" href="https://eieio.games/nonsense/game-13-breaktime/" target="_blank" rel="noopener"
>这篇文章记录了作者研发这个游戏的历程。&lt;/a>&lt;/p>
&lt;h3 id="上世纪三十年代怎样传输照片">上世纪三十年代怎样传输照片？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-47-47.png"
width="551"
height="362"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>前一段时间我读了一本书，匈牙利著名的战地记者罗伯特·卡帕所著，名为&lt;a class="link" href="https://book.douban.com/subject/1270508/" target="_blank" rel="noopener"
>《失焦》&lt;/a>。&lt;/p>
&lt;p>那句著名的“你拍的不够好是因为你离得不够近”就是出自卡帕之口。&lt;/p>
&lt;p>书中记述了作者在二战欧洲战场上记录战斗场景的各种惊心动魄故事。&lt;/p>
&lt;p>但我对于他将照片及时传送给远在纽约的报社所用手段更感兴趣，于是研究了一下当时可能采用的技术。&lt;/p>
&lt;p>经过搜索，锁定了一个通过在滚筒上绕线的方式传输照片的技术（实际上就是传真机），维基百科有相关介绍：https://en.wikipedia.org/wiki/Wirephoto&lt;/p>
&lt;p>相关资料较少，&lt;a class="link" href="https://blog.sciencenet.cn/blog-469915-1094198.html" target="_blank" rel="noopener"
>这篇中文论文探讨了照片传输的技术发展&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>在发送端，照相软片缠绕在一个玻璃圆筒上，外置光源（这里使用能斯特灯）发出的光线通过透镜汇聚于一点，穿过胶片进入玻璃圆筒，经棱镜反射于硒光电池上。
玻璃圆筒旋转的同时沿轴向运动，光点就以螺旋线的形式对整个胶片表面进行扫描。由于胶片各点的透明程度不同，照射于硒光电池上的光强度亦不相同，硒的电阻值随光照强度的变化引发导线上的电流强度随之变化。
在接收端，将与发送端相同的玻璃圆筒置于一个暗箱中，其表面覆盖着感应相纸。
接收端装有一个线动电流表，这个电流表由两根平行银线构成，两线中间安置了一个镁片，镁片覆盖于一个三角形的小孔前，其另一侧为一强光源。
由发送端传来的电流经过电流表时，银线带动镁片发生偏转，使得小孔部分露出，电流越强，小孔露出的部分越大。这样，通过小孔进入暗箱的光线强度随着电流强度而发生改变，光线经透镜汇聚后使相纸上相应位点的感光程度亦不相同，从而实现图像复制。&lt;/p>
&lt;/blockquote>
&lt;p>据说直到上世纪 90 年代仍有报社在使用这项技术进行照片传输。&lt;/p>
&lt;h3 id="九岁小孩用汇编语言能做什么">九岁小孩用汇编语言能做什么
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-47-58.png"
width="690"
height="485"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="341px"
>&lt;/p>
&lt;p>汇编语言几乎等于机器语言，编程的视角非常贴近硬件，写起来枯燥乏味且不易人类理解。&lt;/p>
&lt;p>现在除非一些特殊场景，否则应该没有人再愿意用它来编程了。&lt;/p>
&lt;p>不过在个人电脑还没那么普及的上个世纪八十年代，想要编程整点儿活儿，很有可能还得首选汇编。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://nanochess.org/locs.html" target="_blank" rel="noopener"
>《我在 9 岁时开发了一个绘画语言》&lt;/a>的作者真乃神童也。&lt;/p>
&lt;p>小小年纪因为喜欢用 Logo 语言进行绘图，但苦于手头缺乏市面上能够运行 Logo 语言的计算机，干脆自己撸了一个面向 Z80 机器的移植版本。&lt;/p>
&lt;p>（作者在 1988 年时才 9 岁，向小孩哥致敬 5 分钟）。&lt;/p>
&lt;p>虽然功能不算完备，但竟然具有可用性，成果后被作者的父亲用于教学活动中。&lt;/p>
&lt;p>他在整理父亲用于教学的文件夹时发现了自己写的代码以及说明文档。&lt;/p>
&lt;p>于是在 36 年之后写文章记录了下来。&lt;/p>
&lt;p>文中展示了他编写的代码，并讲解了部分实现原理。&lt;/p>
&lt;h3 id="了解古老的矢量显示器">了解古老的矢量显示器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-48-08.png"
width="690"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="477px"
>&lt;/p>
&lt;p>无论是现在的液晶显示器，还是再稍微古老一点的阴极射线管（CRT）显示器，都采用了一种叫做“光栅化”的技术来显示图像。&lt;/p>
&lt;p>这也是现代计算机图形学的基础，即：采用若干个有限的像素点来组成可见图像。&lt;/p>
&lt;p>但是，在此之前，还有一种显示技术，很少有人提到，不过它也曾经风靡过一段时间。&lt;/p>
&lt;p>它就是“矢量（Vector）显示器”，与现有的光栅化技术不同的是，其通过电子枪在荧光屏上直接“绘制”矢量图形来实现画面的显示。&lt;/p>
&lt;p>矢量显示器曾经一度作为高级图形工作站、航空航天仪器控制台、游戏机等各种应用场景的显示设备，甚至早期的科幻电影中，畅想的未来宇宙飞船中的控制台也是使用矢量显示器。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.jmargolin.com/xy/xymon.htm" target="_blank" rel="noopener"
>《XY显示器的秘密生活》&lt;/a>，非常深入地探讨了早期矢量显示器的技术细节，其中有很多微妙的部分。&lt;/p>
&lt;p>作者早年在雅达利公司工作，参与了几款矢量游戏的制作（估计类似太空飞船对射的那种？）。&lt;/p>
&lt;p>那时还没有形成计算机图形学的专门理论，更没有图形 API 可供调用。&lt;/p>
&lt;p>作者作为技术人员，必须了解相当多的硬件细节才能开发游戏。&lt;/p>
&lt;p>一些有趣的细节：&lt;/p>
&lt;p>1、控制 CRT 电子枪在荧光屏聚焦瞄准的部件是由若干个产生电场的线圈阵列组成，其使用的数学方程与设计相机镜头玻璃参数的方程一样，也就是说，这些线圈是一组用于电子束的“透镜”（原理和作用都一样）。&lt;/p>
&lt;p>2、如果希望产生接近平面直角的画面，必须使用特殊的手段来纠正屏幕角落的偏转失真，这些特殊手段包括在控制电路中加入模拟乘法器以实现偏转非线性矫正（1980 年代，数字控制肯定不现实）。&lt;/p>
&lt;p>3、显示器需要高电压（大概 1 万伏）来加速电子，那时最容易坏的器件就是那个提供高电压的变压器。&lt;/p>
&lt;h3 id="用-excel-实现一个-gpt">用 Excel 实现一个 GPT
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-48-25.png"
width="625"
height="352"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://linux.cn/article-13078-1.html" target="_blank" rel="noopener"
>Excel 现在是图灵完备的了&lt;/a>，理论上可以用它来做任何编程语言做到的事情。&lt;/p>
&lt;p>现在有人整活，实现了一个&lt;a class="link" href="https://spreadsheets-are-all-you-need.ai/index.html" target="_blank" rel="noopener"
>在 Excel 里的 GPT&lt;/a>（GPT2 模型，估计太大的运行不了吧）。&lt;/p>
&lt;p>事实上作者是希望通过这个项目来向大家讲解 GPT 的基础技术原理。&lt;/p>
&lt;p>项目仓库在这里：https://github.com/ianand/spreadsheets-are-all-you-need 可以去下载最新版本的 Excel 文件。&lt;/p>
&lt;h3 id="从神经网络到-hugging-face">从神经网络到 Hugging Face
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-48-43.png"
width="690"
height="259"
loading="lazy"
class="gallery-image"
data-flex-grow="266"
data-flex-basis="639px"
>&lt;/p>
&lt;p>互联网上优质而公开的中文内容越来越少，这篇&lt;a class="link" href="https://hutusi.com/articles/the-history-of-neural-networks" target="_blank" rel="noopener"
>《从神经网络到 Hugging Face》&lt;/a>，是一篇科普神经网络、深度学习发展历程的文章。&lt;/p>
&lt;p>文章条理清晰，一边梳理神经网络技术的发展历史，一边讲清楚了神经网络的核心思路，是我近期在中文网络上看到的少有的好文。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="跨平台数据库客户端">跨平台数据库客户端
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-49-05.png"
width="690"
height="380"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dbeaver/dbeaver" target="_blank" rel="noopener"
>DBeaver&lt;/a> ，一款为开发人员、SQL 程序员、数据库管理员和分析师提供免费的跨平台数据库客户端应用。&lt;/p>
&lt;p>基于 JDBC 支持几乎所有常见数据库（商业版本支持非 JDBC 数据源）。&lt;/p>
&lt;p>具有许多功能，包括元数据编辑器、SQL 编辑器、丰富的数据编辑器、ERD、数据导出/导入/迁移、SQL 执行计划等。&lt;/p>
&lt;p>基于 Eclipse 平台进行开发。&lt;/p>
&lt;h3 id="基于矢量的绘图应用程序">基于矢量的绘图应用程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-49-14.png"
width="690"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/flxzt/rnote" target="_blank" rel="noopener"
>Rnote&lt;/a> 是一个开源的基于矢量的绘图应用程序，用于素描、手写笔记以及注释文档和图片。它面向学生、教师和拥有绘图板的人，并提供 Pdf 和图片导入和导出、无限画布和适用于大屏幕和小屏幕的自适应 UI 等功能。&lt;/p>
&lt;p>配合手写笔和绘图板使用效果更佳。&lt;/p>
&lt;p>用 Rust 和 GTK4 编写。 ​​​&lt;/p>
&lt;h3 id="在安卓上运行-windows-老游戏">在安卓上运行 Windows 老游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-49-37.png"
width="690"
height="299"
loading="lazy"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="553px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/brunodev85/winlator" target="_blank" rel="noopener"
>winlator&lt;/a>，一个可以在 Android 系统上运行 Windows 游戏和应用的开源模拟器。&lt;/p>
&lt;p>这是一个 Android 应用，可以让你使用 Wine 和 Box86/Box64 来运行 Windows 应用和游戏，实现在手机上畅玩各种经典的 PC 游戏。&lt;/p>
&lt;h3 id="电子书transformers-快速入门">电子书《Transformers 快速入门》
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-49-47.png"
width="690"
height="260"
loading="lazy"
class="gallery-image"
data-flex-grow="265"
data-flex-basis="636px"
>&lt;/p>
&lt;p>教程旨在帮助 NLP 初学者快速熟悉 Transformers 库的使用方法，并且通过实例带领读者一步一步构建自己的模型，完成各种 NLP 任务。&lt;/p>
&lt;p>Transformers 是由 Hugging Face 开发的一个 NLP 包，支持加载目前绝大部分的预训练模型。&lt;/p>
&lt;p>随着 BERT、GPT 等大规模语言模型的兴起，越来越多的公司和研究者采用 Transformers 库来构建 NLP 应用。&lt;/p>
&lt;p>读者只需要熟悉 Python 语言即可，并不需要提前掌握 Keras、Pytorch 等深度学习包的使用。&lt;/p>
&lt;p>地址：https://transformers.run/&lt;/p>
&lt;h3 id="吴恩达新的-ai-课程-rag-知识图谱">吴恩达新的 AI 课程 RAG 知识图谱
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-074-%E6%9C%9F/2024-03-19-08-50-06.png"
width="539"
height="299"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>课程包括：&lt;/p>
&lt;ul>
&lt;li>通过从头开始构建公共财务文档图来探索知识图谱的工作原理&lt;/li>
&lt;li>学习编写从图表中检索文本和数据的查询，并使用它来增强传递给 LLM 聊天机器人的上下文&lt;/li>
&lt;li>将知识图谱与问答链相结合，构建更好的 RAG 驱动的聊天系统&lt;/li>
&lt;/ul>
&lt;p>免费注册：https://www.deeplearning.ai/short-courses/knowledge-graphs-rag/&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="降低输入保持专注">降低输入，保持专注
&lt;/h3>&lt;p>当下的环境里，想要保持专注，比以往的任何时候都要更难一些。&lt;/p>
&lt;p>但也不是不能做到，有一些简单易行的方法；&lt;/p>
&lt;p>其中最首要的便是减少信息输入，尤其是网络碎片信息，短视频、社会新闻、娱乐新闻等等；&lt;/p>
&lt;p>信息输入的降低，可以有效减轻大脑负担，才有精力感受当下，脑海才能出现属于自己的思想意识（生其心）；&lt;/p>
&lt;p>其次是做一些自己能够持续产生心流的事情，比如写字、绘画、编程、运动、喝茶、游戏，在过程中，逐渐沉浸，进入心流状态，忘记时间的存在；&lt;/p>
&lt;p>保持专注是对当下的最好体会，也是解决担忧人生虚度的良药，是“应无所住，而生其心”的一种实践；&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 073 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/</link><pubDate>Tue, 12 Mar 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-41-28.png" alt="Featured image of post 机器文摘 第 073 期" />&lt;h1 id="机器文摘-第-073-期">机器文摘 第 073 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="你希望把你的微信聊天记录印成纸质书吗">你希望把你的微信聊天记录印成纸质书吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-40-12.png"
width="690"
height="364"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;p>国内我没听说过，国外有个哥们儿这样做了。&lt;/p>
&lt;p>&lt;a class="link" href="https://benkettle.xyz/posts/message-book/" target="_blank" rel="noopener"
>《提取三年的 iMessages 聊天记录印成书》&lt;/a>，记录了这个过程。&lt;/p>
&lt;p>1、作者突发奇想希望自己能够随时翻阅（物理上）自己的聊天记录；&lt;/p>
&lt;p>2、通过苹果提供的备份软件，将聊天记录备份到 Mac 电脑上，就可以得到一个 SQLite 的数据库（然后可以为所欲为）；&lt;/p>
&lt;p>3、使用 LaTex 进行排版（作者是个讲究人。。。）；&lt;/p>
&lt;p>4、到网上寻找印制服务，作者的“书”一共 1300 页，花了他 300 美元（嚯）；&lt;/p>
&lt;p>5、最后，如果你也想这样干，作者开源了一些过程中有用的代码脚本，地址在这里：https://github.com/bkettle/message-book&lt;/p>
&lt;h3 id="电脑是如何计算正弦值的">电脑是如何计算正弦值的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-40-28.png"
width="552"
height="244"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="542px"
>&lt;/p>
&lt;p>正弦函数是基本的三角函数之一，在数学、物理、工程和计算机科学等各个领域都起着至关重要的作用。它的计算并非易事，尤其是在电子计算器中实施时，效率和准确性至关重要。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://androidcalculator.com/how-do-calculators-compute-sine/" target="_blank" rel="noopener"
>《计算器如何计算正弦》&lt;/a>将深入探讨计算正弦函数的复杂过程，从简单的近似到更复杂的方法。&lt;/p>
&lt;p>文中有意思的点：&lt;/p>
&lt;p>1、由于正弦函数的周期性，只需计算 [0; pi/2]区间的值就足够了；&lt;/p>
&lt;p>2、泰勒级数近似可以逼近正弦函数，但是在 pi/2 处有较大的误差，不可接受，但提供了思路；&lt;/p>
&lt;p>3、英特尔有论文表明他们在处理器中使用了专门的多项式公式来近似正弦值（但是没公开！）；&lt;/p>
&lt;h3 id="为什么有些专业基金经理的回报率还不如一个啥都不懂的外行">为什么有些专业基金经理的回报率还不如一个啥都不懂的外行？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-41-28.png"
width="594"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>因为有科学研究表明，就像喝水一样，喝多了会中毒，聪明的过头了也会带来危险陷阱。&lt;/p>
&lt;p>&lt;a class="link" href="https://collabfund.com/blog/the-dumber-side-of-smart-people/" target="_blank" rel="noopener"
>《聪明人愚蠢的一面》&lt;/a>，论述了聪明的脑袋的局限，如果你很聪明，建议看看，说不定可以避开一些陷阱。&lt;/p>
&lt;p>关键信息：&lt;/p>
&lt;p>1、聪明的人喜欢给结果强行套入自己的公式：面对外部事情发生的结果，总是要拟合出一个自己的函数，并且认为其预测无比精准，比如解释股市涨落的各种公式。&lt;/p>
&lt;p>2、聪明的人基本听不进去资历比自己低的人提出的建议或观点：这也是很多企业走下坡路的原因，CEO 太聪明，无法接受任何外部的建议。&lt;/p>
&lt;p>3、很难改变主义：坚持自己的判断，会为错误付出巨大成本。&lt;/p>
&lt;h3 id="关于-os2-操作系统的那些事儿">关于 OS/2 操作系统的那些事儿
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-41-42.png"
width="633"
height="506"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="300px"
>&lt;/p>
&lt;p>如果你有幸摸过 2000 年之前的个人电脑，并且进入过它的 BIOS 界面的话，应该对一个选项有所印象。&lt;/p>
&lt;p>主板会让你选择希望安装的操作系统，以便做出对应的程序准备和调整，其中操作系统选项里一直有个叫做 “OS/2”的名字。&lt;/p>
&lt;p>这是我对这个操作系统的最早印象，后来 Windows NT/98/ME/2000/XP 几乎占据了所有桌面电脑，操作系统在一段时间内几乎就等于 Windows 了。&lt;/p>
&lt;p>然而如果把时钟拨回到 1990 年，那个时候，微软和 IBM 都在同一个操作系统上发力，那就是&lt;a class="link" href="https://baike.baidu.com/item/OS%2F2/1958699" target="_blank" rel="noopener"
> “OS/2”&lt;/a>，一款面向未来的操作系统。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.os2museum.com/wp/the-future-that-never-was/" target="_blank" rel="noopener"
>《从未有过的未来》&lt;/a>回顾了这款操作系统的诞生以及短暂的发展历程。&lt;/p>
&lt;p>如果你好奇 OS/2 到底长什么样的话，可以看一看，里面展示了一些古老的操作界面。&lt;/p>
&lt;p>它记录了上世纪 90 年代计算机操作系统从 16 位逐渐迈向 32 位的艰难过程。&lt;/p>
&lt;p>值得一提的是，虽然这款操作系统最终没能成功，但是微软的开发人员在相当长的一段时间内是使用了 OS/2 上面的环境开发了 Windows 系统 。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="支持多编程语言的环境版本管理工具">支持多编程语言的环境版本管理工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-42-12.png"
width="690"
height="800"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="207px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/version-fox/vfox" target="_blank" rel="noopener"
>vfox&lt;/a>，一款跨平台的通用版本管理工具，通过命令行快速安装、切换编程语言的不同版本，并支持自定义源地址。相比于针对每种语言的独立版本管理工具（如 nvm、fvm、gvm 等），这个项目让开发者摆脱繁琐的学习和记忆过程，只需一个工具、一条命令，轻松搞定多编程语言版本管理。&lt;/p>
&lt;h3 id="一键给网页添加-webgl-动态背景">一键给网页添加 WebGL 动态背景
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-42-26.png"
width="690"
height="484"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/latentcat/uvcanvas" target="_blank" rel="noopener"
>uvcanvas&lt;/a>，一个开源的 React 组件库，使用 webgl 的着色器，可以快速给网页加入炫酷的动态背景。&lt;/p>
&lt;h3 id="递归查看器">递归查看器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-42-38.png"
width="690"
height="509"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dmytrobaida.github.io/recursion-viewer/" target="_blank" rel="noopener"
>recursion-viewer&lt;/a>，这个网站可以可视化展示 JS 递归函数调用的过程，方便理解和调试你的递归函数。&lt;/p>
&lt;h3 id="在-docker-容器里跑-windows-系统">在 docker 容器里跑 windows 系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-42-47.png"
width="690"
height="354"
loading="lazy"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://https://github.com/dockur/windows" target="_blank" rel="noopener"
>Windows in a Docker container&lt;/a>. 一个开源项目，在 docker 容器里跑 windows 系统，可选择 Win7，Win10，Win11 等，支持自动激活，还支持远程桌面连接。&lt;/p>
&lt;p>基于 Linux 内核的 KVM 虚拟化技术，相当于容器里面跑虚拟机，然后再跑 Windows 系统，不过镜像已经实现了激活和开启远程桌面控制，比较方便使用。&lt;/p>
&lt;h3 id="浏览器中的桌面环境">浏览器中的桌面环境
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-073-%E6%9C%9F/2024-03-12-08-42-58.png"
width="690"
height="440"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/HeyPuter/puter%e2%80%8b%e2%80%8b" target="_blank" rel="noopener"
>Puter&lt;/a> 是浏览器中的高级开源桌面环境，旨在功能丰富、速度极快且高度可扩展。它可用于构建远程桌面环境或用作云存储服务、远程服务器、Web 托管平台等的接口。&lt;/p>
&lt;p>此产品已运营 3 年，且用户量达到了 100 万，现在作者把他开源了出来。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="论生命之短暂">《论生命之短暂》
&lt;/h3>&lt;p>塞涅卡的《论生命之短暂》读起来有些类似马可奥勒留的《沉思录》的感觉，看完并不能记住太多内容，只记得作者在进行一些哲学反思，推崇追求高尚的人格；&lt;/p>
&lt;p>其中对于幸福的论断，要求人们看重财富但不能将之放在中心地位，只有这样才能避免成为财富的奴隶；&lt;/p>
&lt;p>作者论述了一个反极端的观点：即便是上述要求没有做到，也不能认为是失败的，人们树立了追求美德的目标，只要有这个向善的认识，即便没有做到“知行合一”也没什么好指责的；&lt;/p>
&lt;p>看得出来，作者作为当时斯多葛学派的代表人物，应该是遭受了很多“网络”喷子的攻击，不过作者拥有强大的内心，并未进行反驳和过多解释，坚信自己对美德的追求；&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 072 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/</link><pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-04-33.png" alt="Featured image of post 机器文摘 第 072 期" />&lt;h1 id="机器文摘-第-072-期">机器文摘 第 072 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="自己编写程序控制电脑的散热">自己编写程序控制电脑的散热
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-04-22.png"
width="690"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="415px"
>
现在的个人电脑，无论是采用风冷还是水冷，基本都带有根据温度情况自动调整风扇转速的控制系统，以达到散热与噪音平衡的目的。&lt;/p>
&lt;p>对于水冷散热来说，除了散热风扇的转速之外，还可调整水泵的功率（增大或减小水流速度），这些控制都是为了避免不必要的功率浪费和噪音抑制。&lt;/p>
&lt;p>现代 CPU 所带的温控传感器更加灵敏，且随着“睿频”等技术的发展，CPU 的温度波动变得更加剧烈，如果风扇转速时刻与温度参数绑定，对于调度程序来说，很可能造成频繁启停，增加对用户的噪音干扰。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://calbryant.uk/blog/better-pc-cooling-with-python/" target="_blank" rel="noopener"
>《使用 Python 和 Grafana 实现更好的 PC 冷却》&lt;/a>的作者意识到现在的温控程序不够智能，于是自己动手搓了一个更加细致的程序，替代了原有的方案，效果不错。&lt;/p>
&lt;p>具体改进的细节：&lt;/p>
&lt;p>1、根据 CPU 温度控制水泵功率；&lt;/p>
&lt;p>2、根据冷却液温度控制风扇转速；&lt;/p>
&lt;p>作者开源了用于控制的 Python 脚本，在文章原文里提供了相关链接。&lt;/p>
&lt;h3 id="lut-查找表在游戏技术中的应用">LUT 查找表在游戏技术中的应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-04-33.png"
width="689"
height="276"
loading="lazy"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="599px"
>&lt;/p>
&lt;p>之前提到过在技术领域，有一些非常通用的“方法”或者“概念”，可用于解决很多难题。&lt;/p>
&lt;p>比如：“索引”、“缓存”、“分层”，无论是硬件还是软件，都可以从这些概念和方法的应用中获得好处。&lt;/p>
&lt;p>LUT（查找表），也是这样一个“概念”。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://blog.frost.kiwi/WebGL-LUTS-made-simple/" target="_blank" rel="noopener"
>《视频游戏如何使用 LUT 以及使用 LUT 能做什么》&lt;/a>，便是探讨和了解 LUT 的很好材料。&lt;/p>
&lt;p>部分引用：&lt;/p>
&lt;blockquote>
&lt;p>查找表，通常称为 LUT，与数学本身一样古老。将事物预先计算到行或表中的行为并不是什么新鲜事。但是在图形编程领域，这个简单的行为解锁了一些令人难以置信的创造性技术，艺术家和程序员在面临艰难的技术障碍时都会发现这些技术。&lt;/p>
&lt;p>我们将踏上一段小小的旅程，这将带我们从简单的事情，如将灰度镜头转换为彩色，到创建无限变化的嗜血僵尸，在此过程中有许多交互式 WebGL 示例，您可以使用自己的视频或网络摄像头进行尝试。尽管本文使用 WebGL，但所展示的技术适用于任何其他图形编程上下文，无论是 DirectX、OpenGL、Vulkan、Unity 等游戏引擎，还是普通的科学数据可视化。&lt;/p>
&lt;/blockquote>
&lt;h3 id="一切为时不晚">一切为时不晚
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-04-48.png"
width="500"
height="375"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://kk.org" target="_blank" rel="noopener"
>KK&lt;/a> 在 2014 年写的一篇文章&lt;a class="link" href="https://kk.org/thetechnium/you-are-not-late/" target="_blank" rel="noopener"
>《一切为时不晚》&lt;/a>，&lt;a class="link" href="http://blog.fujiji.com/you-are-not-late/" target="_blank" rel="noopener"
>中文翻译在这里&lt;/a>。&lt;/p>
&lt;p>&lt;a class="link" href="https://news.ycombinator.com/item?id=39508046" target="_blank" rel="noopener"
>这篇十年前的文章近期又被 HN 网友顶上来讨论了一番。&lt;/a>&lt;/p>
&lt;p>文中 KK 主要表达的观点是：&lt;/p>
&lt;p>看到互联网上该发明的已经被发明了，先机已被占尽，不要感到沮丧。&lt;/p>
&lt;p>实际上再过 30 年回头看的话，还是有很多新的东西出现，现在动手，一切也都来得及。&lt;/p>
&lt;p>十年过去了，虽然科技创业环境已经不如从前，但网友们仍然对此观点持支持态度。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="开源的类超级马里奥游戏">开源的类超级马里奥游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-04-59.png"
width="690"
height="381"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="434px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SuperTux/supertux" target="_blank" rel="noopener"
>SuperTux&lt;/a>，是一款跳跃游戏，其灵感来自各种任天堂平台的超级马里奥兄弟游戏。在多个世界中奔跑和跳跃，通过跳到敌人身上、从下面撞到他们或向他们扔物体、在途中抓住动力装置和其他东西来击退敌人。&lt;/p>
&lt;p>场景和操控成熟度很不错，可玩度很高。&lt;/p>
&lt;p>游戏支持 WASM、MacOS、Windows、Linux 多平台。&lt;/p>
&lt;h3 id="智谱清言">智谱清言
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-05-26.png"
width="893"
height="688"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chatglm.cn/main/detail" target="_blank" rel="noopener"
>https://chatglm.cn/main/detail&lt;/a>&lt;/p>
&lt;p>清华出的大语言模型，可在线使用，个人感觉对话能力在国产领域属于前列；&lt;/p>
&lt;h3 id="两张照片生成-3d-模型">两张照片生成 3D 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-05-58.png"
width="633"
height="414"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/p>
&lt;p>AI 3D 建模越来越卷了。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/naver/dust3r" target="_blank" rel="noopener"
>DUSt3R&lt;/a>，不需要任何相机校准或视点姿势的先验信息，只需2张图片，无需测量任何额外数据，2秒钟就可完成任意图像的密集或无约束3D重建。&lt;/p>
&lt;h3 id="直接生成-png-素材的扩散模型">直接生成 PNG 素材的扩散模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-06-15.png"
width="531"
height="531"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/huchenlei/ComfyUI-layerdiffusion" target="_blank" rel="noopener"
>Layer Diffusion&lt;/a>，直接生成 PNG 素材，工作流兼容 SDXL 系列的所有模型和 Lora，甚至能直接生成发丝和透明玻璃杯。&lt;/p>
&lt;ul>
&lt;li>插件安装和部署：github.com/huchenlei/ComfyUI-layerdiffusion&lt;/li>
&lt;li>DreamShaper XL 下载：civitai.com/models/112902/dreamshaper-xl&lt;/li>
&lt;/ul>
&lt;h3 id="绿色-apk-资源下载网站">绿色 apk 资源下载网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-072-%E6%9C%9F/2024-03-05-10-06-37.png"
width="690"
height="397"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://apkfreedown.com/" target="_blank" rel="noopener"
>简洁无广告的 apk 直接下载网站&lt;/a>，收录 42w+的 app， apkpure 替代网站&lt;/p>
&lt;p>作者花了两个月爬取的 apk 文件，花了两个星期开发的网站，目前收录了 42w+的 app ，简单绿色无广告但是有些 app 有兼容性问题，不一定能正常使用。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="把别人说的话当作真理是愚蠢行为">把别人说的话当作真理是愚蠢行为
&lt;/h3>&lt;p>有的时候，别人在表达方面确实能够比自己更清晰地表达出自己的感受，这种时候就容易特别认同别人表达的观点，从而忽略了客观现实。&lt;/p>
&lt;p>管中窥豹、盲人摸象、小马过河等成语记录了古人很早之前就意识到的“主观”与“客观”的差异性，以及视角不同所带来的认知差异（实际上每个人都是对的，但是每个人又都是错的）。&lt;/p>
&lt;p>唯有自己用心体会和观察，才能探索和接近真相，才有可能找到最符合自身利益的行动。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 071 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/</link><pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-28-31.png" alt="Featured image of post 机器文摘 第 071 期" />&lt;h1 id="机器文摘-第-071-期">机器文摘 第 071 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="在一个文本文件中管理待办-14-年">在一个文本文件中管理待办 14 年
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-27-57.png"
width="608"
height="574"
loading="lazy"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="254px"
>&lt;/p>
&lt;p>有不少书籍和方法论都在指导人们更加高效地处理日常生活中的各项事务。&lt;/p>
&lt;p>一般都会使用一个或多个工具（软件或物理实体），这些工具常以“清单”或者“日程表”的形式出现。&lt;/p>
&lt;p>这些工具如此精美，以至于大多数人难以抵御诱惑，沉溺于寻找更加强大、高效的工具中，忘记了提升效率的初衷。&lt;/p>
&lt;p>也有例外。&lt;/p>
&lt;p>&lt;a class="link" href="https://jeffhuang.com/productivity_text_file/" target="_blank" rel="noopener"
>《我的生产力应用程序是一个永无止境的.txt文件》&lt;/a>，文章作者便是反其道而行之，将所有事务都放在一个文本文件中进行记录和管理。&lt;/p>
&lt;p>这样做超过了 14 年，而且形成了自己特有的“系统”。&lt;/p>
&lt;p>作者说他本人感受到了较大的生产力提升，早已离不开这个“系统”。&lt;/p>
&lt;p>文中详细介绍了他这套“系统”的方式，可以进链接了解细节。&lt;/p>
&lt;p>大概思路：&lt;/p>
&lt;p>1、所有待办都放在日历中，每天按照日历的安排开展事务，每日更新日历，将未完成的挪到后续的日期中。&lt;/p>
&lt;p>2、所有事务的完成情况、随时的想法、与人的讨论内容，都记入同一个笔记文件（每天一个标题新起一段）；&lt;/p>
&lt;p>3、建立搜索关键词，比如“会议”、“购物”、“课程”等，可迅速搜索到所有同类的信息；&lt;/p>
&lt;p>4、每天白天做当日待办，并记录。晚上回顾更新日历以及笔记中需要跟踪或者重新安排到待办中的事情。如此往复循环。&lt;/p>
&lt;h3 id="为什么你几乎从来不会在商场看到时钟">为什么你几乎从来不会在商场看到时钟？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-28-31.png"
width="528"
height="353"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://thehustle.co/originals/why-you-almost-never-see-a-clock-at-the-mall" target="_blank" rel="noopener"
>为什么你几乎从来不会在商场看到时钟？&lt;/a>&lt;/p>
&lt;p>答案是：你停留的时间越长，你买的越多。&lt;/p>
&lt;p>但是为什么？&lt;/p>
&lt;p>研究表明，人的大脑中负责决策的部分，在刚开始的时候，是以理性认知为基础的。&lt;/p>
&lt;p>然而在同样的环境中，待的时间超出 23 分钟之后，决策部分将转换为情感部分，而不再是认知部分。&lt;/p>
&lt;p>40 分钟之后，他们的大脑将疲惫到降低要求，只要求能做出“合乎逻辑”的决策即可。&lt;/p>
&lt;p>于是商场会拼命让你忘却时间，给你迷宫路线，让你在里面走来走去绕不出来。&lt;/p>
&lt;p>然后一些“合乎逻辑”的推销就对你特别地凑效了。&lt;/p>
&lt;h3 id="前数字时代的绘图工具">前数字时代的绘图工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-28-42.png"
width="690"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>习惯了计算机绘图软件（如：CAD、Adobe Illustrator）的现代人，可能无法想象在计算机绘图软件发明之前，人们是如何绘制图纸（物理）的。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.daube.ch/docu/glossary/drawingtools.html" target="_blank" rel="noopener"
>《前数字时代的绘画和插图》&lt;/a>这篇文章回顾了一些曾经用于绘图的专业工具（非计算机软件）。&lt;/p>
&lt;p>看完后，我发现，除了我们小时候文具盒里的圆规和尺子之外，原来还有这么多辅助绘图的玩意儿。&lt;/p>
&lt;p>比较有意思的有：&lt;/p>
&lt;p>1、带导轨的宽幅绘图板（这个好像在电影中见过）；&lt;/p>
&lt;p>2、带比例放大的绘图尺；&lt;/p>
&lt;p>3、长得像罗盘的计算尺；&lt;/p>
&lt;h3 id="只需四张照片实现-3d-模型构建">只需四张照片实现 3D 模型构建
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-29-12.png"
width="690"
height="403"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>高斯泼溅是一种用于表示3D 场景和渲染新颖视图的方法，在“实时辐射场渲染的3D 高斯泼溅”中引入。 它可以被认为是NeRF² 类模型的替代品，就像当年的NeRF 一样，高斯分布导致了许多新的研究工作，这些工作选择将其用作各种用例的3D 世界的底层表示。&lt;/p>
&lt;p>&lt;a class="link" href="gaussianobject.github.io" >GaussianObject&lt;/a>，是一个使用高斯飞溅来表示和渲染 3D 对象的框架，只需 4 个输入图像即可实现高渲染质量。&lt;/p>
&lt;p>链接中有对应的论文和演示样例。&lt;/p>
&lt;p>摘要：&lt;/p>
&lt;blockquote>
&lt;p>从高度稀疏的视图重建和渲染 3D 对象对于促进 3D 视觉技术的应用和改善用户体验至关重要。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>然而，来自稀疏视图的图像仅包含非常有限的 3D 信息，这导致了两个重大挑战：&lt;/p>
&lt;p>1） 由于用于匹配的图像太少，难以建立多视图一致性;
2） 由于视图覆盖率不足，部分省略或高度压缩的对象信息。&lt;/p>
&lt;p>为了应对这些挑战，我们提出了 GaussianObject，这是一个使用高斯溅射来表示和渲染 3D 对象的框架，只需 4 个输入图像即可实现高渲染质量。&lt;/p>
&lt;p>我们首先介绍了视觉船体和浮子消除技术，这些技术将结构先验明确地注入到初始优化过程中，以帮助建立多视图一致性，从而产生粗略的 3D 高斯表示。&lt;/p>
&lt;p>然后，我们构建了一个基于扩散模型的高斯修复模型，以补充省略的目标信息，进一步细化了高斯修复模型。&lt;/p>
&lt;p>我们设计了一种自生成策略来获取用于训练修复模型的图像对。&lt;/p>
&lt;p>我们的 GaussianObject 在多个具有挑战性的数据集上进行了评估，包括 MipNeRF360、OmniObject3D 和 OpenIllumination，仅从 4 个视图就获得了强大的重建结果，并且性能明显优于以前的先进方法。&lt;/p>
&lt;/blockquote>
&lt;h3 id="膨胀的-javascript">膨胀的 JavaScript
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-30-07.png"
width="721"
height="369"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tonsky.me/blog/js-bloat/" target="_blank" rel="noopener"
>膨胀的 JavaScript&lt;/a>。&lt;/p>
&lt;p>js 文件越来越大了…… 打开个网站下载 js 文件就要 10 多 M。作者对常见的网站做了 js 大小的统计。&lt;/p>
&lt;p>大网站里表现最好的是 P 站（不愧是最关心性能的网站）。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="录制屏幕内容实现记忆搜索">录制屏幕内容，实现记忆搜索
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-30-23.png"
width="690"
height="250"
loading="lazy"
class="gallery-image"
data-flex-grow="276"
data-flex-basis="662px"
>&lt;/p>
&lt;p>&lt;a class="link" href="github.com/yuka-friends/Windrecorder" >Windrecorder | 捕风记录仪&lt;/a>。
捕风记录仪 是一款通过记录屏幕上所有内容、从而实现记忆搜索的应用。它可以根据 OCR 文本、或对画面的描述进行搜索，摘要浏览活动。它的所有能力都完全运行在本地，无需联网或上传任何数据，你完全拥有所有数据。&lt;/p>
&lt;h3 id="轻量级缓存镜像站服务">轻量级缓存镜像站服务
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-30-38.png"
width="690"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="400px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/NoCLin/LightMirrors" target="_blank" rel="noopener"
>LightMirrors&lt;/a>是一个开源的缓存镜像站服务，用于在内网加速软件包下载和镜像拉取，基于Aria2实现了下载进度显示。&lt;/p>
&lt;p>目前支持DockerHub、PyPI、PyTorch、NPM等镜像缓存服务。 ​​​&lt;/p>
&lt;h3 id="一个致力于分享优质资源的网站极简风格">一个致力于分享优质资源的网站（极简风格）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-30-49.png"
width="690"
height="459"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>一个致力于分享高质量资源的平台，包括但不限于文章、视频、图片、音乐等多种形式。网站目标是帮助用户发现并分享有价值的资源。&lt;/p>
&lt;p>地址：https://shareduck.fun/&lt;/p>
&lt;h3 id="在网页里运行的-yolo-模型">在网页里运行的 Yolo 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-31-14.png"
width="447"
height="211"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="508px"
>&lt;/p>
&lt;p>YOLO 是目标检测模型中的佼佼者，现在YOLOv9 来了，它是一种实时对象检测模型，超越了所有基于卷积和 Transformer 的模型。&lt;/p>
&lt;p>有网友把 YOLOv9 与 transformer.js 结合，在浏览器本地进行检测（不需要服务器），地址：https://huggingface.co/spaces/Xenova/yolov9-web&lt;/p>
&lt;h3 id="基于-github-pages-服务的开源-cms-应用">基于 Github Pages 服务的开源 CMS 应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-071-%E6%9C%9F/2024-02-27-10-31-29.png"
width="690"
height="436"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="379px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pagescms.org/" target="_blank" rel="noopener"
>The No-Hassle CMS for GitHub&lt;/a>，一个基于 Github Pages 服务的开源 CMS 应用。&lt;/p>
&lt;p>Github 提供的 Pages 服务十分适合给自己的项目或者个人博客搭建静态站点。&lt;/p>
&lt;p>不过操作起来偏技术流一些，对于习惯了直接在线编辑站点内容的人来说仍有不小的挑战。&lt;/p>
&lt;p>所以作者推出了这个应用，完全基于 Pages 服务，且 100% 免费，让你搭建和维护静态站点变得更加便捷。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="警惕概念爆炸">警惕“概念爆炸”
&lt;/h3>&lt;p>学习技术知识，最重要的是抓大放小，避免“概念爆炸”。即：因为要弄懂一个概念而不得不引入另一个概念导致的链式依赖，从而陷入无限的概念中去了；&lt;/p>
&lt;p>应首先从框架知识入手，找到几个支撑运行逻辑的关键概念，在必要的时候再细化了解每个节点上的细节；&lt;/p>
&lt;p>拿 C++ 编程来说，整个活动中关键环节就这几项：编辑源码、编译和链接（产生可执行成果）、运行和调试（查看结果和除错）；&lt;/p>
&lt;p>虽然有了 IDE（或者具有一点儿 IDE 能力的编辑器如 vscode）将这些活动整合到了一起，但是了解和掌握这个运行框架是十分重要的，每个环节都可以有很多可替代工具进行支撑，也都有很多概念、知识点需要学习；&lt;/p>
&lt;p>但是初学者只有基于这样的框架，才可以比较高效地吸收或储存知识（不然知识点就会凌乱地缠绕在脑海里，无法有效发挥）；&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 070 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/</link><pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-14-38.png" alt="Featured image of post 机器文摘 第 070 期" />&lt;h1 id="机器文摘-第-070-期">机器文摘 第 070 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="通过服务器的访问日志对一些常见网络攻击的分析">通过服务器的访问日志，对一些常见网络攻击的分析
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-13-37.png"
width="690"
height="683"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="242px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://nishtahir.com/i-looked-through-attacks-in-my-access-logs-heres-what-i-found/" target="_blank" rel="noopener"
>通过服务器的访问日志，对一些常见网络攻击的分析&lt;/a>。&lt;/p>
&lt;p>“互联网是一个危险的地方”，如果你有一个暴露在公网上的 IP 的话，你立即就能理解前面那句话意味着什么。&lt;/p>
&lt;p>因为在当前的互联网上，将任何的 IP 暴露在公共网络上，都会马上招致大量恶意流量（访问请求）。&lt;/p>
&lt;p>一位自己维护服务器超过十年的开发人员，近期对他的访问日志（服务器用于记录外部请求的日志）进行了分析，看看常见的攻击究竟是怎样的。&lt;/p>
&lt;p>主要内容：
1、最常见的是对部署人员的粗心大意抱有期望，这些请求会扫描常见的存储程序密码的文件，比如 &lt;code>.env&lt;/code> 文件；通过 &lt;code>GET &lt;/code>请求路径里加入这些猜测文件的地址进行碰碰运气。看来粗心的人还真有，不然这种扫描就不会存在了。&lt;/p>
&lt;p>2、跟上一条差不多，对于一些文件路径的猜测，比如 &lt;code>/old /temp /new /test /backup &lt;/code>，期望有程序员将一些没来及删除的备份文件夹还留在 HTTP 服务器的公开目录下。&lt;/p>
&lt;p>3、利用 Web 服务器的漏洞，将恶意的 &lt;code>Shell&lt;/code> 命令嵌入到 &lt;code>HTTP&lt;/code> 请求的 &lt;code>HTTP_USER_AGENT&lt;/code> 字段里。&lt;/p>
&lt;p>4、对一些带有 &lt;code>CGI&lt;/code> 界面的路由器进行恶意请求，尝试执行嵌入在请求头里的恶意命令。&lt;/p>
&lt;p>5、上述的恶意命令往往是去一个指定地址下载恶意软件，这些恶意软件具有复制自己的能力。&lt;/p>
&lt;p>结论：
公网是一个充满恶意的地方，如果需要暴露服务给公网，请暴露最低限度的东西，不是必须的东西绝对不要暴露它。&lt;/p>
&lt;h3 id="具有超链接的书架">具有超链接的书架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-13-53.png"
width="640"
height="480"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://jamesg.blog/2024/02/14/clickable-bookshelves/" target="_blank" rel="noopener"
>具有超链接的书架&lt;/a>。&lt;/p>
&lt;p>作者突发奇想，希望能够通过计算机视觉技术，给自己的书架照片加上超链接，使得每一本书都可以被点击。&lt;/p>
&lt;p>点击跳转的链接是该书籍的详情信息（由谷歌提供的服务，可调用 api 实现）。&lt;/p>
&lt;p>本文记录了实现思路，文中给出了可以体验的 Demo 网址。&lt;/p>
&lt;p>主要思路：&lt;/p>
&lt;p>1、使用目标检测和图像分割模型识别出图片里的书脊区域；&lt;/p>
&lt;p>2、使用 OCR 技术将书脊区域的文字提取出来；&lt;/p>
&lt;p>3、将提取的文字告诉给大语言模型让它匹配到精确的书名和作者；&lt;/p>
&lt;p>4、调用“谷歌图书”服务，获取书籍详情信息链接；&lt;/p>
&lt;h3 id="怎样居中一个-div">怎样居中一个 DIV
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-14-08.png"
width="690"
height="532"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>在很长一段时间里，将元素在其父元素中居中是一件非常棘手的事情（注：一般也是新手前端开发者遇到的第一个难题）。&lt;/p>
&lt;p>随着 CSS 的发展，有越来越多的方式来解决这个问题。以至于现在很多人都不记得原来居中一个 DIV 曾经有这么多讲究。&lt;/p>
&lt;p>有专业人士出于整理对比一下各种方法优缺点的目的，着手编写了此篇&lt;a class="link" href="https://www.joshwcomeau.com/css/center-a-div/" target="_blank" rel="noopener"
>《怎样居中一个 DIV》&lt;/a>。&lt;/p>
&lt;p>几乎集齐了“元素居中”这个问题的全部答案，并进行了深刻分析，读完至少成为半个前端布局高手&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="极小的-linux-发行版">极小的 Linux 发行版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-14-26.png"
width="690"
height="506"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.damnsmalllinux.org/" target="_blank" rel="noopener"
>Damn Small Linux 2024&lt;/a>，一个极小的 Linux 发行版，大概 50MB 大小。&lt;/p>
&lt;p>目标是让十分低配的 x86 计算机也能具有基本的办公和多媒体能力。&lt;/p>
&lt;p>麻雀虽小五脏俱全，这个发行版配备了 Web 浏览器、office 办公套件、邮件客户端、多媒体播放器、图像编辑器等一大堆即开即用的软件。&lt;/p>
&lt;p>另外还有一批精心挑选的控制台命令行程序，包括 Tmux、FZF、Vim、Nano 等。&lt;/p>
&lt;p>所有入选的软件都遵循基本的原则：对资源占用低、依赖少。&lt;/p>
&lt;p>手上有老电脑的，可以尝试安装一下，说不定能焕发第二春。&lt;/p>
&lt;h3 id="在线分析二进制文件">在线分析二进制文件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-14-38.png"
width="690"
height="367"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://binvis.io" target="_blank" rel="noopener"
>Binvis&lt;/a>，一个在线可视化工具，可直观地剖析和分析二进制文件，在页面中交互展示二进制文件的内部结构和数据组成。&lt;/p>
&lt;h3 id="软件设计的哲学">软件设计的哲学
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-14-49.png"
width="308"
height="673"
loading="lazy"
class="gallery-image"
data-flex-grow="45"
data-flex-basis="109px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://cactus-proj.github.io/A-Philosophy-of-Software-Design-zh/" target="_blank" rel="noopener"
>《软件设计的哲学》&lt;/a>&lt;/p>
&lt;p>经典软件设计书籍《A-Philosophy-of-Software-Design》的中文翻译版电子书。&lt;/p>
&lt;p>80 多年来，人们一直在为电子计算机编写程序，但令人惊讶的是，关于如何设计这些程序或什么是好的程序应该是什么样子的讨论却很少。&lt;/p>
&lt;p>关于软件开发过程（如敏捷开发）和开发工具（如调试器、版本控制系统和测试覆盖工具），已经有了相当多的讨论。还广泛分析了编程技术，如面向对象编程和函数式编程，以及设计模式和算法。&lt;/p>
&lt;p>所有这些讨论都是有价值的，但是软件设计的核心问题在很大程度上仍然没有触及。&lt;/p>
&lt;p>David Parnas 的经典论文“关于将系统分解成模块的标准”发表于 1971 年，但是在随后的 45 年里，软件设计的技术水平并没有超过这篇论文。​​​&lt;/p>
&lt;h3 id="通过-ai-模型快速辨别文件类型">通过 AI 模型快速辨别文件类型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-15-05.png"
width="688"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://opensource.googleblog.com/2024/02/magika-ai-powered-fast-and-efficient-file-type-identification.html" target="_blank" rel="noopener"
>Magika&lt;/a>，谷歌开源的一个轻量级 AI 模型，可以快速判别给定文件的类型（文本、编程源码、图片、音频等）。&lt;/p>
&lt;p>即使不使用 GPU 加速而跑在 CPU 上的话，也能达到毫秒级识别速度。 ​​​&lt;/p>
&lt;h3 id="运行在浏览器里的-llm">运行在浏览器里的 LLM
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-15-30.png"
width="522"
height="305"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>现在大语言模型可直接运行在浏览器，无需服务器支持！&lt;/p>
&lt;p>借助 Web LLM 工具，可以将大语言模型直接在浏览器中运行，并且通过 WebGPU 加速，目前已支持 Llama 2 7B/13B、Mistral 7B 和 WizadMath 等。&lt;/p>
&lt;p>甚至，可以运行 Llama 2 70B 模型，只需要有一台 64GB 内存的设备。&lt;/p>
&lt;p>GitHub：https://github.com/mlc-ai/web-llm&lt;/p>
&lt;p>另外，Chrome 浏览器从 113 版本开始已支持 WebGPU 特性。&lt;/p>
&lt;p>意味着，可以通过 WebGPU 加速更快更流畅的运行 LLM，经测试仅需约 6GB 的显存即可运行 Llama 7B、Vicuna-7B。&lt;/p>
&lt;p>&amp;ndash;来自微博：&lt;a class="link" href="https://weibo.com/5722964389/NDMulfXnj" target="_blank" rel="noopener"
>@GitHubDaily&lt;/a>&lt;/p>
&lt;h3 id="从-0-实现一个极简的自动微分库">从 0 实现一个极简的自动微分库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-15-48.png"
width="690"
height="1369"
loading="lazy"
class="gallery-image"
data-flex-grow="50"
data-flex-basis="120px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://nagi.fun/micrograd-tutorial" target="_blank" rel="noopener"
>&amp;ldquo;micrograd&amp;rdquo; 项目的学习笔记&lt;/a>。该项目是 OpenAI 创始人之一 Andrej Karpathy 创建的一个小型、教育性质的项目。这个项目实现了一个非常简化的自动微分和梯度下降库。&lt;/p>
&lt;p>&amp;ndash;来自微博：&lt;a class="link" href="https://weibo.com/2194035935/O1bDZ7Ydj" target="_blank" rel="noopener"
>@蚁工厂&lt;/a>&lt;/p>
&lt;h3 id="下载飞书文档到本地-md-文件">下载飞书文档到本地 MD 文件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-15-59.png"
width="591"
height="367"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chromewebstore.google.com/detail/cloud-document-converter/ehkomhhcinhikfddnmklbloahaakploh" target="_blank" rel="noopener"
>Cloud Document Converter&lt;/a> ​​​，一个浏览器扩展，支持下载飞书云文档为 Markdown。&lt;/p>
&lt;h3 id="thinkpython-第三版">ThinkPython 第三版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-070-%E6%9C%9F/2024-02-19-16-16-12.png"
width="690"
height="527"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/AllenDowney/ThinkPython/tree/v3" target="_blank" rel="noopener"
>ThinkPython&lt;/a>，是一本面向非专业人员的 Python 编程入门书籍，如今出了第三版。&lt;/p>
&lt;p>电子书内容完全运行在 Jupyter notebooks 中，可以直接在线阅读并运行代码。&lt;/p>
&lt;p>是业余爱好者入门编程的好帮手。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="客观事实与主观臆想">客观事实与主观臆想
&lt;/h3>&lt;p>混淆客观事实和主观臆想是造成错误决策的主要原因。&lt;/p>
&lt;p>所谓战略上的懒惰，多半是因为不愿意多花精力去看清现实，甚至不愿意面对现实。&lt;/p>
&lt;p>第一性原理是一种比较容易执行的认清现实的方法，可作为思考训练。&lt;/p>
&lt;p>撇去主观臆想，是去除幼稚走向成熟的重要标志。&lt;/p>
&lt;p>虽然很难做到百分百，但是，优秀的人，往往在此方面有着高于常人的观察和判断。&lt;/p>
&lt;p>说白了就是凡事尽量抛去成见，去除“意必固我”，知行合一。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 069 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-41-24.png" alt="Featured image of post 机器文摘 第 069 期" />&lt;h1 id="机器文摘-第-069-期">机器文摘 第 069 期
&lt;/h1>&lt;p>&lt;em>春节期间将暂停更新&lt;/em>&lt;/p>
&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="怎样用肉眼识别二维码">怎样用肉眼识别二维码
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-40-14.png"
width="524"
height="525"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="239px"
>&lt;/p>
&lt;p>假如未来人工智能真的统治了地球，二维码对于它们的文明来说，可能算是甲骨文了吧。&lt;/p>
&lt;p>作为普通人类，可以提前多修一门“外语”，真到了那一天，也能跟计算机套套近乎。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://qr.blinry.org/" target="_blank" rel="noopener"
>《不用电脑识别二维码》&lt;/a>，旨在让读者能够从最底层的技术原理理解二维码的构成。&lt;/p>
&lt;p>即便不能真的用肉眼读取二维码，也可了解这些黑白方块为什么可以组成让计算机识别的数据。&lt;/p>
&lt;p>核心点：
1、锚点：用于确认和锁定二维码区域的标识；&lt;/p>
&lt;p>2、掩码：统一盖上一层特定分布的黑白块，叠在最上层。这样做可以容错、使得数据分布均匀、增强对比；&lt;/p>
&lt;p>3、编码：用相邻的四个黑白块来表示数据内容；&lt;/p>
&lt;p>4、纠错：使用一些数学算法增加校验和数据修正；&lt;/p>
&lt;h3 id="unix-即集成开发环境ide">Unix 即集成开发环境（IDE）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-40-54.png"
width="295"
height="572"
loading="lazy"
class="gallery-image"
data-flex-grow="51"
data-flex-basis="123px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://conanblog.me/Unix-as-IDE--Chinese-/" target="_blank" rel="noopener"
>Unix 即集成开发环境（IDE）&lt;/a>，对于熟悉了 IDE 作为开发环境的人来说，基于命令行下的一组工具进行“零散”的开发工作，可能有点儿难以接受。&lt;/p>
&lt;p>但是如果把整个 Unix （或者类 Unix 系统）整体是为集成开发环境的话，也许会有所启发。&lt;/p>
&lt;p>这篇文章，对于喜欢 Unix 哲学的人，是一个很好的回顾与复习，对于习惯了“传统” IDE 的人，说不定会打开另外一扇门。&lt;/p>
&lt;p>主要内容：
1、文件管理：查找、搜索、匹配；&lt;/p>
&lt;p>2、代码编辑：行号、语法高亮、差异对比；&lt;/p>
&lt;p>3、编译：编译、链接、错误分析、优化；&lt;/p>
&lt;p>4、构建：Makefile；&lt;/p>
&lt;p>5、调试：gdb、ltrace；&lt;/p>
&lt;p>6、版本控制：git、svn；&lt;/p>
&lt;h3 id="8kb-大小的动画短片">8kB 大小的动画短片
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-41-24.png"
width="622"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>
令人惊叹的 demoscene 技术再次刷新，国外有团队 &lt;a class="link" href="https://www.ctrl-alt-test.fr" target="_blank" rel="noopener"
>ctrl-alt-test&lt;/a> 制作了一个&lt;a class="link" href="https://www.ctrl-alt-test.fr/2024/how-we-made-an-animated-movie-in-8kb/" target="_blank" rel="noopener"
>只有 8kB 大小的动画短片&lt;/a>，源代码在 Github 开放：github.com/ctrl-alt-test/mouton&lt;/p>
&lt;p>本文详细记录了创作团队的制作过程，以及对于一些 &lt;a class="link" href="https://en.wikipedia.org/wiki/Demoscene" target="_blank" rel="noopener"
>demoscene&lt;/a> 技术的介绍。&lt;/p>
&lt;p>大概技术路线：&lt;/p>
&lt;p>最终成果是一个 8kB 大小的 exe 可执行文件，不依赖外部资源或者文件。&lt;/p>
&lt;p>所有视觉效果都是运行在 GPU 上的 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Games/Techniques/3D_on_the_web/GLSL_Shaders" target="_blank" rel="noopener"
>GLSL shaders（着色器）&lt;/a>实现的，包括对时间线、摄像机等的控制。&lt;/p>
&lt;p>为了降低最终文件大小，使用了专门开发的压缩程序。&lt;/p>
&lt;p>声音采用 &lt;a class="link" href="https://github.com/hzdgopher/4klang" target="_blank" rel="noopener"
>4klang&lt;/a> 软件合成器制作，最终会生成用于产生音乐的二进制汇编。&lt;/p>
&lt;h3 id="实时绿幕抠图">实时绿幕抠图
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-41-39.png"
width="642"
height="873"
loading="lazy"
class="gallery-image"
data-flex-grow="73"
data-flex-basis="176px"
>
&lt;a class="link" href="https://hughfenghen.github.io/posts/2023/07/07/webgl-chromakey/" target="_blank" rel="noopener"
>WebGL Chromakey 实时绿幕抠图&lt;/a>&lt;/p>
&lt;p>本文介绍了一种通过 WebGL 片元着色器实时进行逐像素比对的方式进行抠图的技术。&lt;/p>
&lt;p>作者提供了封装好的 npm 包以及调用演示代码。 ​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="在浏览器运行模型修复图片">在浏览器运行模型修复图片
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-42-01.png"
width="690"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="350px"
>
&lt;a class="link" href="https://github.com/lxfater/inpaint-web" target="_blank" rel="noopener"
>inpaint-web&lt;/a>，基于 Webgpu 技术和 wasm 技术的免费开源 inpainting（图片修复） &amp;amp; image-upscaling 工具, 纯浏览器端实现。&lt;/p>
&lt;h3 id="机器学习在线书籍">机器学习在线书籍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-42-16.png"
width="663"
height="747"
loading="lazy"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="213px"
>
&lt;a class="link" href="https://github.com/stas00/ml-engineering" target="_blank" rel="noopener"
>机器学习在线书籍一套&lt;/a>&lt;/p>
&lt;p>这是一本适合 LLM/VLM 模型训练工程师和操作人员的技术资料。教程里提供了大量可直接运行的脚本，可以直接复制粘贴使用。 ​​​&lt;/p>
&lt;h3 id="专为制作音频软件而开发的ui库旋钮推子等">专为制作音频软件而开发的UI库（旋钮、推子等）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-069-%E6%9C%9F/2024-01-30-08-43-11.png"
width="374"
height="447"
loading="lazy"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="200px"
>&lt;/p>
&lt;p>网址：echoui.dev&lt;/p>
&lt;p>Echo UI 是一款专为 Web Audio API 设计的 UI 库，它的目标是让工程师在开发浏览器音频应用的过程更加简便，它主要有以下几点特性：&lt;/p>
&lt;p>📦 开箱即用：Echo UI 提供了一套开箱即用的组件库，你可以直接使用这些组件来搭建你的音频应用，比如一个 EQ 均衡器、一个音频播放器或一款 VST&lt;/p>
&lt;p>🎛️ 优质交互：大部分组件的交互设计灵感来自于 Ableton Live 和 FL Studio 等优质的 DAW 应用，这些交互可以极大的提升用户体验&lt;/p>
&lt;p>🛠️ 响应式 Hook：Echo UI 提供了一套响应式 Hook，你可以使用它们来快速构建响应式的音频应用&lt;/p>
&lt;p>✨ 可定制 &amp;amp; 易于扩展：基于 React 和 TailwindCSS 开发，这使你可以很容易地定制组件的样式和交互行为，同时也可以很容易地扩展 Echo UI 的组件库&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="行动">行动
&lt;/h3>&lt;p>“天下事有难易乎？为之，则难者亦易矣，不为，则易者亦难矣。”&lt;/p>
&lt;p>讲的是行动对于成事的重要性，畏惧行动、不愿行动是阻碍事情成功的最大因素；&lt;/p>
&lt;p>不愿行动的背后一般是对“浪费”时间和精力的恐惧，对于做事要达成的目标相对单纯和唯一；&lt;/p>
&lt;p>认为唯一目标未达成，就算是白白投入，陷入失望，久而久之，便抗拒行动；&lt;/p>
&lt;p>这里面的关键是对“目标”的定义，只看结果不讲过程的话，十件恐怕有九件都是不能完全达标的；&lt;/p>
&lt;p>但行动的意义远不止于此，就像运动的目的不仅仅是“做功”或者“消耗能量”；&lt;/p>
&lt;p>做任何事情，都不应将目标定义的太单纯和唯一，可以有核心目标，也要有辩证的评价策略，失之东隅得之桑榆，即使核心目标短期没有达成，但也有其他的收获；&lt;/p>
&lt;p>有了这样的认知，在做事情的时候才不会患得患失、抗拒行动，因为什么都不做才是对时间和精力的最大浪费。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 068 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/</link><pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-49-21.png" alt="Featured image of post 机器文摘 第 068 期" />&lt;h1 id="机器文摘-第-068-期">机器文摘 第 068 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="利用随机数算法突破游戏安全限制">利用随机数算法突破游戏安全限制
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-47-28.png"
width="559"
height="620"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="216px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://orlp.net/blog/when-random-isnt/" target="_blank" rel="noopener"
>当随机数不再随机&lt;/a>，文章作者回忆了一段当年玩《魔兽世界》的往事。&lt;/p>
&lt;p>作者在 14 岁接触这款当时爆火的游戏，与其他游戏不同的是，这款游戏允许用户编写一些 Lua 脚本来作为游戏的扩展（Addon）。&lt;/p>
&lt;p>一般用来对游戏界面进行定制，或者增强游戏交互。&lt;/p>
&lt;p>为了安全起见，游戏厂商当然限制了脚本的一些能力，使其不至于影响到游戏的核心规则，比如宝物数量和法术激发等。&lt;/p>
&lt;p>具体做法就是，只允许在一个安全的环境中调用有限的接口。&lt;/p>
&lt;p>这刺激了作者的破解欲望，但是他不希望通过一些强制的手段（比如修改内存等等），而是使用游戏本身的机制，在许可的范围内“合法”地突破限制。&lt;/p>
&lt;p>绕来绕去，作者将目光锁定在了 MSVC 运行库（因为魔兽世界是用 MSVC 编译的，微软又躺枪）提供的随机数函数 &lt;code>rand&lt;/code> 上。&lt;/p>
&lt;p>这个函数，一共就 4 行代码 ：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">state&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">214013&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2531011&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x7fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用“线性共余”算法生成随机数，注意那个 &lt;code>state&lt;/code> 全局变量，导致了所有随机数的生成都共享了这个数据。&lt;/p>
&lt;p>作者通过这个算法，做出了最关键的一步，即根据随机数生成的值，逆向猜出了这个共享的状态值，然后就可以放心猜测接下来的随机数会产生什么值了。&lt;/p>
&lt;p>有了这些随机数值的提前预测，就像考试提前知道了答案一样，作者可以随心所欲地将一些信息输出在屏幕上给自己参考，整个游戏也就变得“索然无味”了。&lt;/p>
&lt;h3 id="调试器是如何工作的">调试器是如何工作的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-47-46.png"
width="573"
height="443"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>调试是每个开发者必备的技能，调试器是离不开的工具。&lt;/p>
&lt;p>下断点、单步跟踪是每个开发者在软件开发过程中必不可少的活动。&lt;/p>
&lt;p>然而，我们很少去关注，这样的调试过程是怎样实现的，它背后有什么机制？&lt;/p>
&lt;p>毕竟调试器给人很神秘的感觉，拥有魔法能力，可以让时间暂停。&lt;/p>
&lt;p>这篇&lt;a class="link" href="http://www.alexonlinux.com/how-debugger-works" target="_blank" rel="noopener"
>《调试器是如何工作的？》&lt;/a>深入探讨了这个话题。&lt;/p>
&lt;p>事实上调试器的工作离不开操作系统在底层提供的 API，而且最终还得 CPU 在硬件层面提供支持。&lt;/p>
&lt;p>在文章里，作者简要讲解了调试器的工作原理，并尝试在 Linux 系统下带领大家实现一个极简的调试器。&lt;/p>
&lt;h3 id="webcodecs-科普">WebCodecs 科普
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-49-03.png"
width="686"
height="503"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p>
&lt;p>在浏览器中操作多媒体信息，现有的 API 已经开放了比较方便的接口，比如“视频播放”、“音频解码”、“视频录制”、“实时流媒体”等等。&lt;/p>
&lt;p>但如果需要深入操控编码、解码的细节，现有 Web API 就无能为力了。&lt;/p>
&lt;p>也有人尝试使用 WASM 技术将编解码器直接运行在浏览器里，但由于缺少硬件加速，很难解决功耗与性能问题。&lt;/p>
&lt;p>不过现在一个新的标准即将普及，那就 WebCodecs，可以在页面中惊喜控制音视频数据的编码、解码细节。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://hughfenghen.github.io/posts/2023/10/06/webcodecs-new-era-for-media-on-the-web/" target="_blank" rel="noopener"
>《WebCodecs 开启 Web 音视频新篇章》&lt;/a>介绍了这个标准的基本情况，并进行了相关能力展示，适合入门扫盲。
​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="开源视频剪辑软件">开源视频剪辑软件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-49-21.png"
width="690"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="438px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://jliljebl.github.io/flowblade/" target="_blank" rel="noopener"
>flowblade&lt;/a> 是一个在 GPL3 许可下发布的多轨非线性视频编辑器。&lt;/p>
&lt;p>支持剪辑、合成、调色、动画全工作流。 ​​​&lt;/p>
&lt;h3 id="在网页里看星星">在网页里看星星
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-49-32.png"
width="689"
height="639"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="258px"
>&lt;/p>
&lt;p>Stellarium 是全世界大学都在使用的开源天文学软件， &lt;a class="link" href="https://stellarium-web.org/" target="_blank" rel="noopener"
>Stellarium Web&lt;/a>，是一个基于开源 Stellarium Web Engine 项目的在线天文馆，无需安装，可直接在Web 浏览器中运行 Stellarium 。&lt;/p>
&lt;p>直接在网页里即可查看自己所在地区的天空、星座、甚至可以看到实时的卫星和空间站（我看到了马斯克的星链在快速移动）。&lt;/p>
&lt;h3 id="复古桌面个人门户">复古桌面个人门户
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-49-42.png"
width="678"
height="443"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="367px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://henryheffernan.com" target="_blank" rel="noopener"
>henryheffernan.com&lt;/a>，一个很有意思的个人门户网站。&lt;/p>
&lt;p>作者在主页用 Three.js 模拟了一个 CRT 的显示器，细节（闪烁、条纹、指纹）还原非常逼真。&lt;/p>
&lt;p>里面还模拟了一个 win32 风格的桌面系统，桌面的浏览器还能用，打开是浏览作者的简历。&lt;/p>
&lt;h3 id="用-css-的-3d-特性制作逼真的云朵">用 CSS 的 3D 特性制作逼真的云朵
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-068-%E6%9C%9F/2024-01-23-08-49-53.png"
width="690"
height="517"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.clicktorelease.com/blog/how-to-make-clouds-with-css-3d/" target="_blank" rel="noopener"
>用 CSS 的 3D 特性制作逼真的云朵&lt;/a>，这篇教程介绍了使用 3D 变换功能制作出有层次、立体的云朵图案（且随着鼠标移动会改变视角）。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="再说电子阳痿">再说电子阳痿
&lt;/h3>&lt;p>太高的自由度会使人疲惫，因为患得患失是人的本性，所以做决策是很消耗精力的事情。&lt;/p>
&lt;p>因此，设计精良的产品（无论是软件还是硬件），在完成它的功能的时候，不会给用户太多选择，而是通过最符合直觉的那条路径实现，让你“没得选”，不用动脑子。&lt;/p>
&lt;p>有的时候“没得选”反而是一种轻松幸福的事情，比如听 FM 广播里的音乐就比自己直接用播放器的要享受一些，因为前者无需选择，而后者给你太多的选择（还能快进切歌）。&lt;/p>
&lt;p>同样的道理，看电影、电视剧、打游戏也都一样，当选择越来越多的时候，带来的压力是巨大的，且容易陷入反复尝试（生怕错过）的循环，很难完整、深刻体验一部作品。&lt;/p>
&lt;p>小时候资源匮乏，“没得选”，才能把一个游戏反复打几十遍上百遍，反而体会到了巨大的幸福。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 067 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/</link><pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-54-05.png" alt="Featured image of post 机器文摘 第 067 期" />&lt;h1 id="机器文摘-第-067-期">机器文摘 第 067 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="c-语言编译器简史">C 语言编译器简史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-53-35.png"
width="437"
height="616"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="170px"
>&lt;/p>
&lt;p>C 语言诞生于上世纪七十年代的贝尔实验室，最初目标是给新诞生的 Unix 操作系统配套一个更高级别（相对于汇编）的可移植语言。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.deusinmachina.net/p/compiling-history-a-brief-tour-of" target="_blank" rel="noopener"
>《C 语言编译器简史》&lt;/a>，从编译器的视角出发，简介记录了 C 语言特性的发展过程，以及主流的编译环境和开发套件是如何一步一步“演化”到现在的样子的。&lt;/p>
&lt;h3 id="在浏览器里实时运行各种编程语言">在浏览器里实时运行各种编程语言
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-53-50.png"
width="690"
height="555"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/p>
&lt;p>现在有不少网站提供编程练习的交互环境，一般的做法是，在浏览器中编辑代码，提交到后台服务器进行运行，输出结果返回给浏览器展示。&lt;/p>
&lt;p>这样做也没什么问题，不过有些用户不希望对服务端产生依赖，想要一个纯客户端的环境，在网页中嵌入运行 Python、PHP、Ruby、Lua 以及 SQL 语言。&lt;/p>
&lt;p>&lt;a class="link" href="https://antonz.org/in-browser-code-playgrounds/" target="_blank" rel="noopener"
>《在浏览器里的代码演练》&lt;/a>，这篇文章介绍了一种借助 WebAssembly 技术在浏览器中嵌入各种编程语言代码片段的方法。&lt;/p>
&lt;p>作者使用 VMWare 实验室预先编译的语言解释器，封装了一个开源工具，可以将 Python、PHP、Ruby、SQLite 等语言的代码片段嵌入到页面中，并直接在浏览器里执行。&lt;/p>
&lt;h3 id="在网页里训练-ai-模型">在网页里训练 AI 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-54-05.png"
width="690"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="415px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://teachablemachine.withgoogle.com/" target="_blank" rel="noopener"
>Teachable Machine&lt;/a>，是一个在线提供 AI 模型工作流的网站。&lt;/p>
&lt;p>不同于其他 AI 云平台，这个网站主要使用你自己的浏览器调用你的本地资源实现计算（借助 Tensorflow.js）。&lt;/p>
&lt;p>以可视化拖拽的方式建立自定义的 AI 应用，上传图片、声音、身体捕捉等样本后直接训练自己的模型。&lt;/p>
&lt;p>网站提供模型下载或者部署代码的框架，可以轻松制作自己的带有 AI 特性的站点。&lt;/p>
&lt;h3 id="用-500-行-sql-实现一个-gpt-语言模型">用 500 行 SQL 实现一个 GPT 语言模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-54-21.png"
width="690"
height="530"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="312px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://explainextended.com/2023/12/31/happy-new-year-15/" target="_blank" rel="noopener"
>500 行 SQL 中的 GPT&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>“嘿，ChatGPT。你能在SQL中实现一个大型语言模型吗？”&lt;/p>
&lt;p>“不，SQL不适合实现大型语言模型。SQL 是一种用于管理和查询关系数据库中的数据的语言。实现语言模型需要复杂的算法、大型数据集，并且通常还需要深度学习框架，这些都超出了 SQL 的能力。”&lt;/p>
&lt;/blockquote>
&lt;p>这就是机器比不了人的地方，人类会突破极限，有人在现实中通过 SQL 实现了一个 GPT。&lt;/p>
&lt;p>文章作者首先解释了 GPT 大预言模型的工作原理以及发展历史，对于相关概念和名词的解释比较浅显易懂。&lt;/p>
&lt;p>总的来说，这种生成式大模型可以理解为一个函数，这个函数接受一段文字输入，然后再输出一段文字。&lt;/p>
&lt;p>然后作者挑战自己，使用 SQL 语言实现了“分词器”、“向量嵌入”等操作，以及实现了“注意力”机制。&lt;/p>
&lt;p>最终竟然通过大约 500 行的 SQL 语句实现了一个可以在 PostgreSQL 中运行的 GPT 模型。&lt;/p>
&lt;h3 id="2023-年十个基于-godot-引擎开发的优秀开源游戏">2023 年十个基于 Godot 引擎开发的优秀开源游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-54-37.png"
width="690"
height="285"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="581px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dev.to/github/top-godot-games-from-game-off-2023-5f3k" target="_blank" rel="noopener"
>2023 年十个基于 Godot 引擎开发的优秀开源游戏&lt;/a>。&lt;/p>
&lt;p>&lt;a class="link" href="https://itch.io/jam/game-off-2023" target="_blank" rel="noopener"
>Game Off&lt;/a> 是 Github 每年 11 月份举办的游戏开发比赛，要求在一个月的时间内开发一款游戏，随便用什么语言或者引擎。&lt;/p>
&lt;p>所有游戏源码和成果上传至 Github 接受全部开发者的投票。&lt;/p>
&lt;p>上面的文章里收集了 2023 年度比赛中表现突出并且使用 Godot 引擎的游戏。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="复制任意网页的内容">复制任意网页的内容
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-54-56.png"
width="690"
height="363"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://enablecopy.com/" target="_blank" rel="noopener"
>超级复制插件&lt;/a>&lt;/p>
&lt;p>新加坡前端工程师 Goh Tong 开发了一个浏览器（Chrome、Edge）插件，可以一键解除网页限制，解除网页禁用右键，任意复制网页上的内容。&lt;/p>
&lt;h3 id="专门用于查看-csv-文件的命令行工具">专门用于查看 csv 文件的命令行工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-55-10.png"
width="690"
height="348"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;p>&lt;a class="link" href="github.com/YS-L/csvlens" >csvlens&lt;/a>，一个命令行下的文本查看器，功能类似 less ，但是专门针对 csv 文件格式进行了优化。&lt;/p>
&lt;p>有类似 vim 的快捷键绑定，可使用正则表达式快速搜索。 ​​​&lt;/p>
&lt;h3 id="用游戏引擎-godot-开发的-os-">用游戏引擎 Godot 开发的 OS ？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-067-%E6%9C%9F/2024-01-16-08-55-24.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/popcar2/GodotOS" target="_blank" rel="noopener"
>GodotOS&lt;/a>，一个用游戏引擎模拟桌面操作系统的开源项目。&lt;/p>
&lt;p>借助 Godot 引擎强大的 UI 系统，作者做出了逼真的桌面环境，这虽然不是真实的操作系统，但却展示了游戏引擎制作界面的能力。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="存储膨胀">存储膨胀
&lt;/h3>&lt;p>类似通货膨胀，计算机存储也存在着空间增长赶不上需求增长的情况。&lt;/p>
&lt;p>以游戏为例，之前的硬盘容量在几十 GB 级别的时候，游戏大小以 MB 为单位，很多主机游戏一共只有几 MB 也很精彩。&lt;/p>
&lt;p>现在的游戏容量轻则几十 GB 动辄上百 GB ，2TB 的硬盘很快就给吞没没了。&lt;/p>
&lt;p>&lt;em>这种现象是不是跟整个宇宙也在膨胀有关?&lt;/em>&lt;/p>
&lt;h3 id="打游戏的深度">打游戏的深度
&lt;/h3>&lt;p>打游戏，不应该同时打多个游戏的进度，而是应该将游戏一个个打通关；&lt;/p>
&lt;p>我近期在开源掌机里就体会到这一点，由于存储的游戏太多，深怕错过了什么经典的游戏，这种心态导致没有心思深入到一个游戏里面去，常常刚开了一点儿进度，就又调头玩其它的了；&lt;/p>
&lt;p>由此也可以映射出现实世界里，这种心态导致学习什么东西都是浅尝辄止，开坑容易，弃坑更容易，但真正的收获较少；&lt;/p>
&lt;p>所以应该认准选中几个游戏，认真玩下去，至少坚持一段时间，打到一定的深度，体验通关的乐趣，而不是启动的乐趣；&lt;/p>
&lt;h3 id="来自-hn-网友对于当前科技发展的评论">来自 HN 网友对于当前科技发展的评论
&lt;/h3>&lt;p>&lt;a class="link" href="https://news.ycombinator.com/item?id=38983067" target="_blank" rel="noopener"
>我对技术感到非常失望，这让我非常难过。&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>我的职业生涯始于互联网繁荣时期，人们对技术和互联网将带来的有益社会变革非常乐观。&lt;/p>
&lt;p>如今，我并不觉得所有的科技都是“邪恶的”，但我确实觉得，如果所有的大型科技公司（谷歌、Facebook、苹果、Microsoft）都完全停止开发任何新技术，世界会变得更好。&lt;/p>
&lt;p>显然这是不现实的，但它凸显了我的感觉，即我不期待这些公司的任何新技术，因为更多的技术总是会导致更多的孤立，更多的“厄运滚动”，更多的攻击我们的注意力。&lt;/p>
&lt;p>我觉得大多数大型科技公司都变成了毒贩，只是试图劫持我们大脑的进化注意力机制来让我们上瘾。&lt;/p>
&lt;p>“注意力就是你所需要的”是对的（注：这是对一篇人工智能论文的”双关“引用）&lt;/p>
&lt;/blockquote>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 066 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/</link><pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-41-37.png" alt="Featured image of post 机器文摘 第 066 期" />&lt;h1 id="机器文摘-第-066-期">机器文摘 第 066 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="一个文本编辑器独立开发者的-9-年回顾">一个文本编辑器独立开发者的 9 年回顾
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-39-43.png"
width="684"
height="696"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="235px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://papereditor.app/dev" target="_blank" rel="noopener"
>一个文本编辑器独立开发者的 9 年回顾&lt;/a>&lt;/p>
&lt;p>作者是一个全栈开发者，9 年来一直独立开发一款 Mac 系统下的文本编辑器。&lt;/p>
&lt;p>文章里记录了他在开发和产品运营上的一些选择，以及为什么这么做。&lt;/p>
&lt;p>Mac 系统下不乏优秀的文本编辑器，作者的产品为什么还能占有一席之地，并且持续获得用户的好评？&lt;/p>
&lt;p>这主要源于作者对于细分市场的敏锐嗅觉，以及对于确立的产品定位极致的坚持（有很多产品做着做着就在用户的呼声里迷失自我）。&lt;/p>
&lt;p>作者的很多观点都与业界公认的思想有所抵触，比如他坚持所有东西都是自己做（违背了：&lt;em>不要重新发明轮子&lt;/em>）、坚持极简的界面和极少的功能、对性能的极致追求（业界普遍会为了研发周期缩短而牺牲性能，或者觉得硬件浪费无所谓）等等。&lt;/p>
&lt;h3 id="使用-a-搜索算法给游戏做路径查找时的一些技巧">使用 A* 搜索算法给游戏做路径查找时的一些技巧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-39-58.png"
width="597"
height="587"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="244px"
>&lt;/p>
&lt;p>迪杰斯特拉（Dijkstra）算法是经典的最短路径搜索算法，它能保证你找到最短路径，但是如果在游戏中使用的话，对于资源的消耗有些多，尤其是之前的游戏主机性能羸弱的情况下。&lt;/p>
&lt;p>最早的时候，像吃豆人那种游戏选择使用最直接的算法，也就是计算怪物和玩家的距离及角度，让怪物直接朝玩家奔去，遇到阻挡的墙壁就顺势滑行。&lt;/p>
&lt;p>但后来的游戏的场景逐渐复杂，这种简单算法不能满足需求。&lt;/p>
&lt;p>于是诞生了更好用的 &lt;a class="link" href="https://en.wikipedia.org/wiki/A*_search_algorithm" target="_blank" rel="noopener"
>A* search&lt;/a> 算法。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://timmastny.com/blog/a-star-tricks-for-videogame-path-finding/" target="_blank" rel="noopener"
>《A* 游戏寻路技巧》&lt;/a>，介绍了这种算法在游戏中的应用。&lt;/p>
&lt;p>作者本来是打算给一个复古 8 位主机 PPU466（一个用于教学的类似 PICO-8 的幻想主机平台） 编写图形游戏，在实现路径搜索时觉得有必要分享一下思路，记录整理成为了本文。&lt;/p>
&lt;h3 id="显示器旋转多少度最有利于开发">显示器旋转多少度最有利于开发？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-40-11.png"
width="609"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://sprocketfox.io/xssfox/2021/12/02/xrandr/" target="_blank" rel="noopener"
>有位闲人发现是 22°&lt;/a>。&lt;/p>
&lt;p>显示器能够旋转 90° 竖起来，这个大家都知道。&lt;/p>
&lt;p>而且，对于文字阅读、网页浏览等任务，竖起来的话明显空间利用率更高。&lt;/p>
&lt;p>对于 Windows 系统来说，你能做的也就这么多了，要么横着，要么竖着。&lt;/p>
&lt;p>不过，Linux 的自由度就很高了，可以使用一个叫做 xrandr 的小工具将显示内容旋转任意角度。&lt;/p>
&lt;p>于是开头那个哥们就测试了很多角度，得出了 22° 是个合适的角度的结论。&lt;/p>
&lt;p>&lt;em>但是实际使用中估计没有人会真这么做吧。&lt;/em>&lt;/p>
&lt;h3 id="纯塑料3d打印的环境能量收集器">纯塑料3D打印的环境能量收集器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-40-31.png"
width="690"
height="478"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.binn.cas.cn/ktz/wzlyjz/yjcgwzl/2023/202301/W020231130596295514704.pdf" target="_blank" rel="noopener"
>纯塑料3D打印的环境能量收集器&lt;/a>&lt;/p>
&lt;p>如何把让人讨厌的静电转换成人类赖以生存的能源，是从 2012 年摩擦纳米发电机（TENG）的发明才开始有了解决方案。&lt;/p>
&lt;p>特点：因为几乎世上所有的材料都会摩擦升电，所以可以作为发电机材料的物品种类繁多，而且很多日常废弃物品都是可用的，比如纸，动物毛皮，废弃塑料等。简单的制作和多样的材料选择（几片塑料薄膜和金属片就可完成制作）让它成为绿色能源的一个热门选项。&lt;/p>
&lt;p>原理：利用摩擦生电原理发明的发电机，其基本原理就是运动的带电物体（比如毛皮，塑料等）吸引电极和导线内的电子运动，产生电流。&lt;/p>
&lt;p>用途：常用的电磁发电机，需要高频的有规律运动。TENG更加适合于低频率的无规则环境振动能量收集，例如海洋能，雨滴能，风能和人体运动。第 267 期提到的雨水发电板就是该发电机的一种。&lt;/p>
&lt;p>文章作者用3D打印的方法，制作了纯塑料可随身携带的能量包，设计开源，让每个人都可以随心所欲的制造它。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="在线模拟自然声音的网站">在线模拟自然声音的网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-40-45.png"
width="690"
height="305"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="542px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://asoftmurmur.com/" target="_blank" rel="noopener"
>asoftmurmur&lt;/a>是一个可以在线播放自然声音的网站，可以根据自己的喜好调整雨声、雷声、鸟鸣、风声等声音的占比。&lt;/p>
&lt;p>适合读书或自习当作背景播放。&lt;/p>
&lt;h3 id="网页桌面模拟">网页桌面模拟
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-40-55.png"
width="690"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dustinbrett.com/" target="_blank" rel="noopener"
>DaedalOS&lt;/a>，又一个运行在网页里的桌面模拟环境。&lt;/p>
&lt;p>模仿 Win10 的界面风格，具有开始菜单和资源管理器。&lt;/p>
&lt;p>自带浏览器、文本编辑器、画图板等基础应用。 ​​​&lt;/p>
&lt;h3 id="在-2024-年还想玩-flash-游戏">在 2024 年还想玩 Flash 游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-41-07.png"
width="690"
height="374"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://flashpointarchive.org/" target="_blank" rel="noopener"
>Flashpoint&lt;/a>，这个项目我记得推荐过一次。但值得再次细说。&lt;/p>
&lt;p>对于痴迷 Flash 游戏的人来说，当下的环境无疑是让人失落的，因为 Flash 技术已经被淘汰，不再被主流浏览器和操作系统支持。&lt;/p>
&lt;p>曾经好玩的 Flash 小游戏也没有合适的平台来玩了。&lt;/p>
&lt;p>不过，还是有一群有情怀的人启动了一个项目。&lt;/p>
&lt;p>Flashpoint，一个保存 Flash 小游戏的项目，提供了一个集成的运行环境，打包存储了超过 17 万个小游戏和动画。&lt;/p>
&lt;p>可以去他们的官方网站下载，内置少量游戏的基本版文件包大概 1GB 左右，包含全部游戏的版本安装完成大概需要 1.48TB 的存储空间。&lt;/p>
&lt;p>ps：我最近在这个项目上找到了二十年前玩过的一个解密游戏 Chasm ，村里的水停了，一个小鸭嘴兽一路上山修复水管的故事。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-41-21.png"
width="566"
height="459"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="295px"
>&lt;/p>
&lt;p>我找了很久这个游戏，靠着一点儿零星的关键词，终于找到了，花了一个周末的时间才打通。&lt;/p>
&lt;h3 id="将卧室电脑打造成游戏机">将卧室电脑打造成游戏机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-066-%E6%9C%9F/2024-01-09-09-41-37.png"
width="665"
height="417"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;p>&lt;a class="link" href="github.com/ublue-os/bazzite" >bazzite&lt;/a>，一个可以将你的卧室电脑打造成 Steam Deck 操作体验的开源系统。&lt;/p>
&lt;p>Steam Deck 是一个游戏掌机，其自带系统（基于 Linux 的魔改版本）专为游戏而生，操作体验进行了特别优化。&lt;/p>
&lt;p>如果你也想让你的家用电脑获得这样的体验，可以尝试一下这个开源系统，不管是放在卧室还是客厅，都可以做到即开及打。&lt;/p>
&lt;p>主要特性：&lt;/p>
&lt;ol>
&lt;li>预装 Nvidia 显卡驱动；&lt;/li>
&lt;li>H264 编码硬解；&lt;/li>
&lt;li>预装 Xbox 手柄驱动；&lt;/li>
&lt;li>内置录屏解决方案；&lt;/li>
&lt;li>优良的 CPU 调度，平衡功耗和性能；&lt;/li>
&lt;li>预装安卓模拟器，可玩手机游戏；&lt;/li>
&lt;/ol>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="索引思维">“索引”思维
&lt;/h3>&lt;p>就像“分层” layer、“缓存” cache 这种通用思维一样，“索引” index 也是一种通用思维；&lt;/p>
&lt;p>“缓存”在各种系统中起到了减少数据搬运而提升速度的作用，而“索引”则在各种场景中起到聚合信息、以少量信息检索大量信息的作用；&lt;/p>
&lt;p>这种通用思维不仅仅局限于信息化软件本身，广义上来说，物理世界的任何“系统”都是可以使用这种通用思维的。&lt;/p>
&lt;p>举例来说，谷歌搜索引擎建立了互联网网页内容的索引、门户网站和导航网站建立了分类信息的索引、淘宝商城建立了可交易商品的索引、维基百科建立了知识概念的索引，这些索引极大地满足了人们对信息获取的需求，所以取得了成功。&lt;/p>
&lt;p>如果想提供自己的产品或服务，除了能直接提升生产力的工具类之外，还有一种可能，就是利用“索引”思维去提供整理好的信息。&lt;/p>
&lt;p>目前已经有很多人在做类似的事情了，比如影视解说、读书解说、分类资源汇总。&lt;/p>
&lt;p>写到这里我想到一个段子：有三家开的比较近的商店竞争，第一家招牌叫“最好的商品”，第二家招牌叫“最实惠的商品”，第三家把店开在他两家的中间，招牌叫“入口”。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 065 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-49-44.png" alt="Featured image of post 机器文摘 第 065 期" />&lt;h1 id="机器文摘-第-065-期">机器文摘 第 065 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="自制一个时钟投影">自制一个时钟投影
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-48-29.png"
width="524"
height="529"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="237px"
>&lt;/p>
&lt;p>现在可以很容易购买到那种卧室投影，可以将时钟、星空等图像投射在房间墙壁或者天花板上。&lt;/p>
&lt;p>不过，这篇&lt;a class="link" href="https://microengineer.eu/2018/05/01/diy-night-clock-projector/" target="_blank" rel="noopener"
>DIY一个夜间时钟投影仪&lt;/a>文章的作者选择自己做一个。&lt;/p>
&lt;p>选用 LED 灯光加 LCD显示的方案，3D 打印外壳。&lt;/p>
&lt;p>为了控制成本，作者选择在中国购买各种零件（一个焦距 25mm 的小镜头竟然才 12 美元）。&lt;/p>
&lt;p>作者把他的设计图纸和相关资料都开源了，地址在这里：https://github.com/shufps/diy-projector-clock&lt;/p>
&lt;h3 id="每个程序员都应该尝试的个人小项目">每个程序员都应该尝试的个人小项目
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-48-50.png"
width="690"
height="477"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;p>关于学习，几乎每个人都认可这一点：在实践中学，是最有效的学习方式。&lt;/p>
&lt;p>对于一些喜欢编程但是又不知挑战实现哪些题目的话，这里有一些&lt;a class="link" href="https://austinhenley.com/blog/challengingprojects.html" target="_blank" rel="noopener"
>程序员应该挑战的小项目&lt;/a>。&lt;/p>
&lt;p>这些项目经过精心挑选，而且都有一定难度，如果全部实现一遍的话，内力必然大增。&lt;/p>
&lt;p>主要包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>文本编辑器；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2D 小游戏（太空入侵者）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编译器：袖珍 BASIC；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>操作系统：迷你 OS；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>模拟器：游戏主机模拟器；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="从底层做文本编辑器应该用什么数据结构">从底层做文本编辑器，应该用什么数据结构？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-49-03.png"
width="492"
height="227"
loading="lazy"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="520px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.averylaird.com/programming/the%20text%20editor/2017/09/30/the-piece-table.html" target="_blank" rel="noopener"
>文本编辑器：数据结构&lt;/a>，有寻找答案的过程。&lt;/p>
&lt;p>作者说，如果是编辑文本的话，最次的数据结构就是直接用一个大数组来存储字符。&lt;/p>
&lt;p>如果想试着自己做个编辑器，可以试试文中推荐的数据结构。&lt;/p>
&lt;p>配图为一种叫做 &lt;a class="link" href="https://en.wikipedia.org/wiki/Rope_%28data_structure%29" target="_blank" rel="noopener"
>rope&lt;/a> 的二叉树。 ​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="音乐人声分离工具">音乐人声分离工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-49-22.png"
width="647"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/jianchang512/vocal-separate" target="_blank" rel="noopener"
>vocal-separate&lt;/a>，一个极简的人声和背景音乐分离工具，完全本地化网页操作。&lt;/p>
&lt;p>内置 spleeter模型 2stems/4stems/5stems，解压后开箱即用，无需连接外网。&lt;/p>
&lt;p>可将一首歌曲或者含有背景音乐的音频、视频文件，分离为单独的人声文件、伴奏文件。&lt;/p>
&lt;p>预编译 Windows 版解压即用，无需额外配置。&lt;/p>
&lt;p>源码版支持本地部署到 Linux/Mac/Windows。&lt;/p>
&lt;h3 id="lowpoly-风格背景图片生成器">Lowpoly 风格背景图片生成器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-49-34.png"
width="480"
height="375"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://sinqi.tools/triangle" target="_blank" rel="noopener"
>Triangle Patterns&lt;/a>，一个专门用于生成 lowpoly 风格渐变背景图的在线小工具。&lt;/p>
&lt;p>可挑选和设置自定义调色板，免费下载和导出自己生成的图片。 ​​​&lt;/p>
&lt;h3 id="基于树莓派的鼠标键盘切换器">基于树莓派的鼠标键盘切换器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-49-44.png"
width="690"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="477px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/hrvach/deskhop" target="_blank" rel="noopener"
>桌面键鼠切换器&lt;/a>，一个很有意思的开源项目。&lt;/p>
&lt;p>可以使用一套键鼠接入两台电脑，虽然市面上类似这样的 USB 切换器有很多，但是这一个确实比较特别：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>不需要按按钮切换，而是使用快捷键，或者自动识别你的鼠标拖动到窗口的边缘。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>免费且开源（不过需要你自己打印外壳，以及购买零件：树莓派的 PICO 版本）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同时支持 Linux、macOS 和 Windows。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="给老游戏打补丁以支持宽屏分辨率">给老游戏打补丁以支持宽屏分辨率
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-065-%E6%9C%9F/2024-01-02-08-50-04.png"
width="649"
height="364"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://thirteenag.github.io/wfp#nfsuc" target="_blank" rel="noopener"
>老游戏宽屏补丁&lt;/a>，一些旧电脑游戏（比如 《GTA 4》、《极品飞车-卧底》等）由于年代久远，对宽屏分辨率支持不佳（或者不支持），这里有一个系列补丁包，专门针对这些游戏提供宽屏支持，甚至有些增加了手柄震动、HUD 贴图显示质量提升等特性。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="降低复杂度的通用思想">降低复杂度的通用思想
&lt;/h3>&lt;p>中间代码、中间层、虚拟化（虚拟机）是降低复杂度的关键&amp;mdash;-读《游戏脚本高级编程》有感，复杂的问题往往需要拆解才能解决，比较通用的办法就是拆分步骤然后加入中间层（约定多个任务中间传递的成果）；&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 064 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/</link><pubDate>Tue, 26 Dec 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-53-40.png" alt="Featured image of post 机器文摘 第 064 期" />&lt;h1 id="机器文摘-第-064-期">机器文摘 第 064 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="youtube-到底有多大httpsethanzuckermancom20231222how-big-is-youtube">&lt;a class="link" href="https://ethanzuckerman.com/2023/12/22/how-big-is-youtube/" target="_blank" rel="noopener"
>Youtube 到底有多大？&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-51-23.png"
width="690"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;p>作为世界上第一大的视频网站，Youtube 的体量想必是很大了。&lt;/p>
&lt;p>但是究竟有多大，很多人可能没有概念。&lt;/p>
&lt;p>有人对此做了一些研究，使用了一些有趣的手段，最终形成一篇报告，记录了对这个视频网站的探索过程。&lt;/p>
&lt;p>有趣的一些点：&lt;/p>
&lt;p>1、仅 2023 年一年就有超过 40 亿个视频发布在 Youtube。&lt;/p>
&lt;p>2、Youtube 视频的观看次数中位数仅为 39 次。&lt;/p>
&lt;p>3、Youtube 只喜欢向观众推荐观看次数超过 10000 次的视频。&lt;/p>
&lt;p>4、作者是通过随机算法来批量猜测视频网址的方法进行统计计算的，因为不可能把所有视频都检索一遍。&lt;/p>
&lt;h3 id="在-gpu-上模拟火焰">在 GPU 上模拟火焰
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-51-42.png"
width="690"
height="339"
loading="lazy"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;p>火焰模拟是一个有趣的图形问题。&lt;/p>
&lt;p>过去的方法通常是采用非物理计算去伪造。&lt;/p>
&lt;p>例如，电影《指环王》中使用了大量烟雾的精灵（即使是对电影工业来说流体模拟也是太贵了）。&lt;/p>
&lt;p>所以当时像电脑游戏这样的实时渲染的，几乎只能使用非物理方法。&lt;/p>
&lt;p>但在过去的 10 年里，GPU 使快速流体仿真变得容易。基本的流体动力学算法在GPU上很容易实现。&lt;/p>
&lt;p>&lt;a class="link" href="https://andrewkchan.dev/posts/fire.html" target="_blank" rel="noopener"
>这篇文章记录了如何在 GPU 上模拟火焰&lt;/a>。&lt;/p>
&lt;p>它介绍了流体动力学背后的数学原理、用于建模流体的并行算法。&lt;/p>
&lt;p>文中给出了用 WebGL 实现的 Demo 代码。&lt;/p>
&lt;h3 id="当相机替代我们体验生活我们失去了什么">当相机替代我们体验生活，我们失去了什么？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-51-57.png"
width="690"
height="507"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>答案是：我们失去了集中注意力体验生活的能力。&lt;/p>
&lt;p>&lt;a class="link" href="https://theconversation.com/whats-lost-when-we-photograph-life-instead-of-experiencing-it-58392" target="_blank" rel="noopener"
>《当相机替代我们体验生活，我们失去了什么》&lt;/a>这篇文章写于 2016 年，那时互联网的趋势已经是视频影像取代文字作为内容的主体了。&lt;/p>
&lt;p>影像越来越多地成为与他人交流、获得肯定和记录新体验的重要组成部分。尽管一连串的颜色、像素、面孔和风景似乎只能丰富我们的想象力，增强我们与世界的互动，但事实似乎恰恰相反。&lt;/p>
&lt;p>借助我们的手机和电脑，无论我们身在何处或附近，我们都会不断与他人联系并与之互动。但是，拍照和制作视频已成为这种数字交流的核心部分。&lt;/p>
&lt;p>我们的冲动不是停留在当下——并真正观察我们所处的位置——而是利用所有的生活经历作为视觉上表现和表达自己的机会。&lt;/p>
&lt;h3 id="停止阅读新闻">停止阅读新闻
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.cnblogs.com/IcanFixIt/p/8524843.html" target="_blank" rel="noopener"
>为什么你应该停止阅读新闻?&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://fs.blog/stop-reading-news/" target="_blank" rel="noopener"
>原文地址&lt;/a>&lt;/p>
&lt;p>我们花费数小时时间来消费新闻，因为我们希望得到充分的信息。&lt;/p>
&lt;p>但这段时间过得好吗？新闻的定义是不持久的。&lt;/p>
&lt;p>而且随着新闻变得更容易分发和制作成本更低，质量也下降了。&lt;/p>
&lt;p>我们很少停下来问问自己，我们消费的是什么：这很重要吗？&lt;/p>
&lt;p>这是否会经受住时间的考验——比如，在一周或一年之内?写这篇文章的人是否了解这个问题?&lt;/p>
&lt;p>我们今天消费时间来阅读新闻的方式存在几个问题：&lt;/p>
&lt;p>首先，新闻传递的速度有不断增加。&lt;/p>
&lt;p>过去我们必须等待才能得到一份报纸或八卦信息，与我们镇上的人们一起获取我们的消息，但现在不了。&lt;/p>
&lt;p>由于通知、短信和其他干扰，新闻几乎在它发布的那一刻就能找到我们。&lt;/p>
&lt;p>其次，生产新闻的成本大幅下降。&lt;/p>
&lt;p>有些人每天为主要报纸写12篇博客文章。&lt;/p>
&lt;p>几乎不可能在一个话题上写一些深思熟虑的东西，更不用说12个了。&lt;/p>
&lt;p>在一年的时间里，可以写出2880篇文章(假设有4周的假期)。&lt;/p>
&lt;p>你从他们所报道的主题中获得新闻的人的流利程度接近于零。&lt;/p>
&lt;p>因此，你的头脑中充斥着关于孤立话题的表面观点。因为成本已经降到了接近零的水平，所以竞争非常激烈。&lt;/p>
&lt;p>第三，新闻生产者试图劫持我们的大脑。&lt;/p>
&lt;p>新闻制作人一直保持着“调入，不要错过，跟随这个或者你会被误导，等等，看看这个！”的文化。&lt;/p>
&lt;p>当你越来越多地消耗这种类型的新闻，你就会越来越少的关注那些重要的事情。&lt;/p>
&lt;p>第四，激励机制失调。&lt;/p>
&lt;p>在某种程度上，由于竞争激烈，大多数新闻媒体都被迫提供免费新闻。&lt;/p>
&lt;p>毕竟，其他人都在这么做。&lt;/p>
&lt;p>然而，当新闻免费的时候，你仍然需要付钱给人们，所以你从一个卖静态广告的订阅模式转向一个把观众卖给广告商的模式。&lt;/p>
&lt;p>页面视图成为游戏的名称，越多越好。&lt;/p>
&lt;p>对于很多创建新闻的人(我不会在这里使用“记者”这个词，因为我对他们的评价很高)，他们获得的页面访问量越多，得到的补偿就越多。&lt;/p>
&lt;p>很多广告不仅仅是印象；他们也向广告商提供你的信息，但那是另一回事。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="手绘风格图形库">手绘风格图形库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-52-15.png"
width="690"
height="510"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://roughjs.com/" target="_blank" rel="noopener"
>Rough.js&lt;/a>，手绘风格图形库。&lt;/p>
&lt;p>很轻巧的一个 JS 库，可以使你的 Canvas 画布或者 SVG 图形轻松拥有手写风格（就是那种，粗糙歪扭的感觉）。 ​​​&lt;/p>
&lt;h3 id="开源塔防游戏">开源塔防游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-52-27.png"
width="690"
height="345"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mindustrygame.github.io" target="_blank" rel="noopener"
>Mindustry&lt;/a>，一款开源的以资源管理为核心的无尽塔防游戏。&lt;/p>
&lt;p>目前在 Steam 上大概卖三十多人民币，不过可以在 itch.io 免费下载（虽然会提示你多少给一点）。&lt;/p>
&lt;p>项目在 Github 开源，目前有超过两万颗星。&lt;/p>
&lt;h3 id="web-页面录屏库">Web 页面录屏库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-52-37.png"
width="690"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="355px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://recordrtc.org/index.html" target="_blank" rel="noopener"
>RecordRTC.js&lt;/a>。&lt;/p>
&lt;p>&lt;a class="link" href="github.com/muaz-khan/RecordRTC/" >开源的 Web 录屏库&lt;/a>，可以录制声音、视频等媒体信息，信息来源支持麦克风、摄像头以及网页截屏，可以录制指定 Canvas 画布渲染的图像结果。&lt;/p>
&lt;p>支持多种分辨率及压缩格式。​​​&lt;/p>
&lt;h3 id="极简画布着色器">极简画布着色器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-52-53.png"
width="495"
height="578"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="205px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://susam.net/fxyt.html" target="_blank" rel="noopener"
>FXYT&lt;/a>，只有 36 命令的“画布着色语言”，有点儿像 GPU 的片元着色器，但是很精巧。&lt;/p>
&lt;p>FXYT 是一种微小的画布着色语言，由 36 个简单的基于堆栈的命令组成。&lt;/p>
&lt;p>针对 256x256 图形画布的每个单元格计算输入代码。每个单元格的颜色由评估结果决定。&lt;/p>
&lt;p>以下是一个非常简单的 FXYT 代码：&lt;/p>
&lt;p>&lt;code>XY^&lt;/code>&lt;/p>
&lt;p>输出如图。&lt;/p>
&lt;h3 id="现代开源-basic-编程套件">现代开源 BASIC 编程套件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-53-07.png"
width="612"
height="373"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="393px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.freebasic.net/" target="_blank" rel="noopener"
>FreeBASIC&lt;/a>，兼容微软 QuickBASIC 语言的开源 BASIC 编程套件。&lt;/p>
&lt;p>FreeBASIC 项目是一套跨平台的开发工具，由编译器、基于GNU的汇编器、链接器和存档器以及支持的运行时库（包括基于软件的图形库）组成。&lt;/p>
&lt;p>编译器 fbc 目前支持在 DOS、Linux、Windows 和 Xbox 平台上构建基于 i386 架构的程序。&lt;/p>
&lt;p>同时支持一些流行的第三方库（Allegro、SDL、OpenGL、GTK+、Windows API 等）用于图形界面、游戏等高级开发。&lt;/p>
&lt;h3 id="制作-u-盘万能引导盘">制作 U 盘万能引导盘
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-53-25.png"
width="601"
height="415"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;p>&lt;a class="link" href="%e7%bd%91%e9%a1%b5%e9%93%be%e6%8e%a5" >Ventoy&lt;/a>，一个开源的优盘启动方案。&lt;/p>
&lt;p>使用优盘做启动盘，大家在安装操作系统的时候都用到过，不过一般做法是将整个引导镜像写入优盘，直接覆盖它整个的文件系统。&lt;/p>
&lt;p>这样做也就会破坏整个优盘原有的存储。&lt;/p>
&lt;p>有了 Ventoy 你就无需反复地格式化U盘，只需要把 ISO/WIM/IMG/VHD(x)/EFI 等类型的文件直接拷贝到U盘里面就可以启动了，无需其他操作。&lt;/p>
&lt;p>你可以一次性拷贝很多个不同类型的镜像文件，Ventoy 会在启动时显示一个菜单来供你进行选择。&lt;/p>
&lt;p>Ventoy 安装之后，同一个U盘可以同时支持 x86 Legacy BIOS、IA32 UEFI、x86_64 UEFI、ARM64 UEFI 和 MIPS64EL UEFI 模式，同时还不影响U盘的日常使用。&lt;/p>
&lt;p>Ventoy 支持大部分常见类型的操作系统 （Windows/WinPE/Linux/ChromeOS/Unix/VMware/Xen &amp;hellip;）
目前已经测试了各类超过 1100+ 个镜像文件。&lt;/p>
&lt;p>支持 90%+ 的操作系统。&lt;/p>
&lt;h3 id="早期的声学定位技术">早期的声学定位技术
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-064-%E6%9C%9F/2023-12-26-08-53-40.png"
width="580"
height="434"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;a class="link" href="%e7%bd%91%e9%a1%b5%e9%93%be%e6%8e%a5" >声学雷达技术&lt;/a>，这篇文章介绍了一种通过声音进行定位的技术，收录了很多历史照片。&lt;/p>
&lt;p>在无线电雷达出现之前，从第一次世界大战中期到第二次世界大战初期，声学定位被用于通过拾取发动机的噪音来被动检测飞机的方位。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="被认同的需求">被认同的需求
&lt;/h3>&lt;p>以前大部分的时候没有意识到，别人在问我问题的时候，是为了获得认同，而不是答案。&lt;/p>
&lt;p>所以答案不重要，在回答的那一刻你能提供的认同感才是最重要的。&lt;/p>
&lt;p>我以前很讨厌这样，认为这是明知故问脱裤子放屁。&lt;/p>
&lt;p>但是我逐渐意识到，人们有被认同的情感需求，而这个需求大部分的时候比获得事实或真理的需求大多了。&lt;/p>
&lt;p>我有两种选择，一种是提供点儿什么以满足这种需求，还有就是去他妈的，装聋作哑。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 063 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/</link><pubDate>Tue, 19 Dec 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-56-13.png" alt="Featured image of post 机器文摘 第 063 期" />&lt;h1 id="机器文摘-第-063-期">机器文摘 第 063 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="采访一位真正的古董程序员">采访一位真正的古董程序员
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-53-32.png"
width="636"
height="343"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>HN 上有一个程序员发布了一篇帖子里面记录了&lt;a class="link" href="https://ezali.substack.com/p/interviewing-my-mother-a-mainframe" target="_blank" rel="noopener"
>一些关于他的程序员母亲的工作经历&lt;/a>。&lt;/p>
&lt;p>他的母亲是一位 &lt;a class="link" href="https://baike.baidu.com/item/COBOL%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener"
>COBOL&lt;/a> 程序员，为一家大型银行工作，负责给 IBM 的大型机编写程序。&lt;/p>
&lt;p>这是一个难得的访谈。&lt;/p>
&lt;p>毕竟现存的、仍在一线工作的 COBOL 程序员屈指可数。&lt;/p>
&lt;p>里面提到了一些有意思的点：&lt;/p>
&lt;p>1、1991 年最开始从事这个工作的时候，他的母亲还需要通过智商、心理健康等一系列严苛的测试。&lt;/p>
&lt;p>2、现在这些程序仍然在运行，而且非常重要。如果他妈妈和那几个共同维护的员工一起消失的话，那家银行会在几周内倒闭。&lt;/p>
&lt;p>3、使用的数据库是基于当年 IBM 给阿波罗登月计划开发的后续版本，而且积累了大量的数据，如果想要迁移到现在流行的支持通用 SQL 语言的数据库则需要数年时间。&lt;/p>
&lt;p>4、主要的数据是历史交易记录，大概存了 110 亿笔，法律规定这些数据要至少保存 10 年不能丢失。&lt;/p>
&lt;p>5、他们所用的 IDE 更像是一个包含了一切的操作系统（注：不是 Emacs），叫做 ISPF，直接连接到大型机，没有本地开发环境。&lt;/p>
&lt;h3 id="一条奇怪的-cpu-指令">一条奇怪的 CPU 指令
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-53-49.png"
width="690"
height="365"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="453px"
>&lt;/p>
&lt;p>在目前使用的大多数 CPU 里，都有一条名为 popcount 的指令，是“population count”的缩写。&lt;/p>
&lt;p>它的作用是计算一个二进制机器字中的 1 的个数，比如（为简单起见，假设是 8 位 CPU ，一个机器字长 8 位），popcount(00100110) 是 3 ， popcount(01100000) 是 2 。&lt;/p>
&lt;p>可是算这个有什么用？而且，为什么从上世纪六十年代一直到现在，大多数 CPU 里都有这个指令？&lt;/p>
&lt;p>&lt;a class="link" href="https://vaibhavsagar.com/blog/2019/09/08/popcount/" target="_blank" rel="noopener"
>你不会相信这个奇怪的 CPU 指令！&lt;/a>一文介绍了这个指令的来龙去脉。&lt;/p>
&lt;p>最初是 NSA（美国国家安全局）出于密码分析与加解密需要而加入的，后来随着时间推移逐渐用不到了，于是人们又发现了它还有其他的用途。&lt;/p>
&lt;p>比如：纠错、用于卷积神经网络的矩阵乘法等等。&lt;/p>
&lt;p>文章里提到了一些人们发明的有效算法，而使得这个指令得以保存，直到今天还在发挥作用。&lt;/p>
&lt;h3 id="平均每晚睡多长时间的人寿命最长">平均每晚睡多长时间的人寿命最长？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-54-46.png"
width="522"
height="370"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="338px"
>&lt;/p>
&lt;p>《我们为什么睡觉》是英国科学家马修·沃克（Matthew Walker）2017 年写的有关睡眠的科普书籍。&lt;/p>
&lt;p>此书被 NPR 评为当年最受欢迎的科普书籍。&lt;/p>
&lt;p>书中声称，每晚睡眠少于六七个小时会使一个人增加患癌风险。&lt;/p>
&lt;p>然而此观点并未受科学证据支持。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://guzey.com/books/why-we-sleep/" target="_blank" rel="noopener"
>《我们为什么会睡觉》一书中的错误观点&lt;/a>探讨了书中的一些错误观点，并通过引用科学论文数据的方式证实了该书的错误之处。&lt;/p>
&lt;p>文章作者引用《科学报告》上的研究图表显示，平均每晚睡眠 5 小时的死亡率甚至低于每晚睡 8 小时。&lt;/p>
&lt;p>有科学研究调研了超过 155 万名参与者和 8 万名癌症病例，发现睡眠时间短或长都与癌症风险增加无关。&lt;/p>
&lt;p>所以科普读物有时候会缺乏科学严谨性，不可全信。&lt;/p>
&lt;h3 id="边做边学迷你数据库">边做边学迷你数据库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-55-53.png"
width="690"
height="289"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="573px"
>&lt;/p>
&lt;p>你在为产品选择不同的数据库时，了解它们之间的差异吗？&lt;/p>
&lt;p>抛开那些用于宣传的营销用语，哪些是它们最重要的指标？&lt;/p>
&lt;p>这里有篇文章，作者通过动手做一个小数据库，以了解学习&lt;a class="link" href="https://tontinton.com/posts/database-fundementals/" target="_blank" rel="noopener"
>数据库的基础知识&lt;/a>。&lt;/p>
&lt;p>从数据库的基本要求： ACID（原子性、一致性、隔离、持久性）讲起，逐步实现对数据的存储、搜索、过滤等基本操作。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="科技美感一些上世纪控制室照片">科技美感，一些上世纪控制室照片
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-56-13.png"
width="690"
height="409"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://designyoutrust.com/2018/01/vintage-beauty-soviet-control-rooms/" target="_blank" rel="noopener"
>前苏联的复古科技感的控制室&lt;/a>，这个页面里收集了很多苏联时期的老式控制室。里面装满了大按钮和模拟表盘，喜欢那个时代复古科技的朋友不可错过。 ​​​&lt;/p>
&lt;h3 id="shader-编程电子书">shader 编程电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-56-23.png"
width="690"
height="345"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>计算机图形学领域中，&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E7%9D%80%E8%89%B2%E5%99%A8" target="_blank" rel="noopener"
>着色器（shader）&lt;/a>是一种计算机程序，原本用于进行图像的浓淡处理（计算图像中的光照、亮度、颜色等），但近来，它也被用于完成很多不同领域的工作，比如处理CG特效、进行与浓淡处理无关的影片后期处理、甚至用于一些与计算机图形学无关的其它领域&lt;/p>
&lt;p>&lt;a class="link" href="https://thebookofshaders.com/?lan=ch" target="_blank" rel="noopener"
>The Book of Shaders&lt;/a>&lt;/p>
&lt;p>这是一本关于 Fragment Shaders（片段着色器）的入门指南，它将一步一步地带你领略其中的纷繁与抽象。&lt;/p>
&lt;p>本书用于学习 shader 编程入门是再合适不过了，在线版本还带有程序执行环境，可以边学边练。&lt;/p>
&lt;h3 id="在线学习莫斯码">在线学习莫斯码
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-56-36.png"
width="616"
height="544"
loading="lazy"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="271px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.perry.qa/morse" target="_blank" rel="noopener"
>morse&lt;/a>，一个在线学习莫斯码的网站。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="故意留点儿工作给明天对效率更好">故意留点儿工作给明天，对效率更好
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-063-%E6%9C%9F/2023-12-19-08-56-55.png"
width="462"
height="450"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>&lt;/p>
&lt;p>“今日事，今日毕”是个好习惯不假。&lt;/p>
&lt;p>然而有些人发现，对于有些需要长时间专注的工作（比如编程、写作），前一天留一点儿简单的“小尾巴”对于工作效率则更高。&lt;/p>
&lt;p>原因是这点儿遗留的工作可以让你第二天迅速热身并进入“心流”状态。&lt;/p>
&lt;p>而创作类工作进入这种状态非常重要，对工作效率有极大影响。&lt;/p>
&lt;p>当然了，前提是你留下的是一个简单的“小尾巴”而不是“烂摊子”。&lt;/p>
&lt;h3 id="我的游戏喜好">我的游戏喜好
&lt;/h3>&lt;p>比起无脑的砍杀，我更喜欢带有解密性质的游戏，《塞尔达-缩小帽》算是其中一种。&lt;/p>
&lt;p>另外需要一定操作技巧才能上手的动作游戏也喜欢（掌握后可以进入心流），这一类的代表是《古墓丽影》，当然古老的《波斯王子》也算。&lt;/p>
&lt;p>除此以外就是能快速进入状态的赛车游戏了。&lt;/p>
&lt;p>不太喜欢需要十分深入剧情的游戏，比较耗神，比如《巫师》、《大镖客》等等，玩起来有些累。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 062 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/</link><pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-46-45.png" alt="Featured image of post 机器文摘 第 062 期" />&lt;h1 id="机器文摘-第-062-期">机器文摘 第 062 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="听歌识曲的技术原理">听歌识曲的技术原理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-46-25.png"
width="664"
height="490"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>现在不少音乐播放应用以及网站音乐库都提供了“听歌识曲”的功能。&lt;/p>
&lt;p>其背后的原理是怎样的？是否有个人蹲在后台一边听一边帮你搜索呢？&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cameronmacleod.com/blog/how-does-shazam-work" target="_blank" rel="noopener"
>Shazam是如何工作的&lt;/a>，这篇文章介绍了一款听歌识曲软件及其背后的工作原理。&lt;/p>
&lt;p>Shazam 可以说是听歌识曲界的鼻祖了，最早的时候，它只是一个电话号码，用户遇到要识别的歌曲，只需拨打这个电话，然后 30 秒后挂断电话，用户就会收到歌曲信息的短信了。&lt;/p>
&lt;p>最开始那还是 2002 年，那时的电话音质，真是一言难尽，我怀疑最初真的是老板蹲在那儿接电话。&lt;/p>
&lt;p>其基本原理如下：&lt;/p>
&lt;p>1、生成曲库中每一首歌的频谱图（当然离不了傅里叶）；&lt;/p>
&lt;p>2、使用算法提取每首歌的声纹特征（主要是通过在频谱中查找峰值）；&lt;/p>
&lt;p>3、Hashing 散列算法固定声纹特征表示形式；&lt;/p>
&lt;p>4、对未知歌曲做同样的提取声纹特征；&lt;/p>
&lt;p>5、通过一种对齐算法，计算未知歌曲的声纹特征与数据库里的声纹特征对齐程度；&lt;/p>
&lt;p>6、那个对的最齐的，就是答案。&lt;/p>
&lt;h3 id="量子计算机从入门到精通">量子计算机从入门到“精通”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-46-45.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>毫无疑问，人类近几十年的飞速发展主要得益于计算机的发明。&lt;/p>
&lt;p>这里的计算机实际上指的是，现在非常普及的计算机。&lt;/p>
&lt;p>开关电子元件天然适合表达二进制数据的特性，使得我们现在能接触到的计算机，绝大部分都是基于祖师爷“图灵”的机器模型，和计算机之父“冯·诺依曼”提出的“程序+存储”架构的。&lt;/p>
&lt;p>可是，假如有外星人，他们要发明计算机，或者如果宇宙中所有文明最终都进化出一种终极计算机的话，它应该是什么样的？&lt;/p>
&lt;p>答案是：量子计算机。&lt;/p>
&lt;p>量子计算机，号称速度高于传统计算机千万倍，分分钟破解现在最严苛的加密等等。&lt;/p>
&lt;p>然而，吹嘘了这么多年，量子计算机一直没能摆脱它神秘的面纱。&lt;/p>
&lt;p>这主要得益于大量媒体的捕风捉影和信口胡诌。&lt;/p>
&lt;p>如果你也像我一样疑惑，可以看看这篇&lt;a class="link" href="https://quantum.country/qcvc" target="_blank" rel="noopener"
>写给好奇者的量子计算&lt;/a>，作者试图以轻松又严谨的风格，认真聊聊什么是量子计算机。&lt;/p>
&lt;p>这是一篇非常长的文章，不建议一口气看完（也看不完）。可以按照作者的设定进行小节划分，并尝试做一下里面的课后练习。&lt;/p>
&lt;p>作者认为，只需了解一点点高等数学和线性代数的基础，就具备深入理解量子计算的能力。当然，如果对传统计算机原理（基于逻辑门）有所了解就更好了。&lt;/p>
&lt;h3 id="通过构建一个前端框架来学习前端框架">通过构建一个前端框架来学习前端框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-47-06.png"
width="690"
height="318"
loading="lazy"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="520px"
>&lt;/p>
&lt;p>现代的 Web 前端开发已经基本离不开 React、Vue 之类的框架，此类框架比起上一代 jQuery 那种直接操作 DOM 元素的方式，有了更高层次的抽象和更清晰的逻辑分层。&lt;/p>
&lt;p>然而由于这些框架追求封装和使用上的便利，对用户隐藏了很多内部细节，以使用框架入门前端开发的初学者，很难接触到事情的本质。&lt;/p>
&lt;p>以至于一旦遇到问题，便无从下手，想要了解原理，又觉得这些东西太神秘深奥。&lt;/p>
&lt;p>不过，最好的学习方式是在实践中学习，有网友写了这篇&lt;a class="link" href="https://nolanlawson.com/2023/12/02/lets-learn-how-modern-javascript-frameworks-work-by-building-one/" target="_blank" rel="noopener"
>Learn how modern JavaScript frameworks work by building one&lt;/a>。&lt;/p>
&lt;p>以现有新一代框架为模仿对象，自己动手做了一个最小化版本，实现了最核心的功能。&lt;/p>
&lt;p>可以揭示一些前端框架的背后原理。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="svg-在线学习">SVG 在线学习
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-47-17.png"
width="566"
height="831"
loading="lazy"
class="gallery-image"
data-flex-grow="68"
data-flex-basis="163px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://svg-tutorial.com/" target="_blank" rel="noopener"
>svg-tutorial&lt;/a>，一个学习 SVG 绘图的网站。叫你用源码一点点绘制 SVG 图形。&lt;/p>
&lt;p>课程涵盖简单图元和复杂的动画。 ​​​&lt;/p>
&lt;h3 id="给命令行程序加上图形界面">给命令行程序加上图形界面
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-47-29.png"
width="690"
height="755"
loading="lazy"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="219px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/chriskiehl/Gooey" target="_blank" rel="noopener"
>Gooey&lt;/a>，又一个很有创意的 Python 库，可以给几乎所有使用 Python3 编写的命令行程序加上图形界面。&lt;/p>
&lt;p>只需要在你的 Python3 脚本里引入这个库，然后在主函数之前加上一个 &lt;code>@Gooey&lt;/code>注解。 ​​​&lt;/p>
&lt;h3 id="边练指法边背单词">边练指法边背单词
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-47-45.png"
width="690"
height="451"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="367px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://typing-word.ttentau.top/" target="_blank" rel="noopener"
>ttentau&lt;/a>。一位工厂小哥，利用下班时间在 B 站学习前端开发。&lt;/p>
&lt;p>然后用 Vue 写了这个一边练习打字一边背单词的网站。&lt;/p>
&lt;p>网站参考了 &lt;a class="link" href="github.com/RealKai42/qwerty-learner/" >qwerty-learner&lt;/a> ，不过增加了生词本、错词本、简单词 的功能。&lt;/p>
&lt;p>佩服小哥的学习力和执行力。&lt;/p>
&lt;p>&amp;mdash;-来自 V 站 ：h++ps://www.v2ex.com/t/997978&lt;/p>
&lt;h3 id="植物模拟器">植物模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-47-58.png"
width="690"
height="372"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://plant.max-richter.dev/" target="_blank" rel="noopener"
>Simulate 3D plants in the browser&lt;/a>，在浏览器中模拟渲染 3D 植物，通过参数化节点控制模拟效果。&lt;/p>
&lt;h3 id="可视化-llm-大模型">可视化 LLM 大模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-062-%E6%9C%9F/2023-12-12-08-48-13.png"
width="690"
height="797"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="207px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://bbycroft.net/llm" target="_blank" rel="noopener"
>LLM Visualization&lt;/a>，这个网站应该是把开源大语言模型的神经结构给 3D 建模了。可以图形化查看不同版本大模型的神经网络架构。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="弯路与直路">弯路与直路
&lt;/h3>&lt;p>无论是一万小时定律还是有效练习的理论，都好像规定了必须不能浪费练习时间。&lt;/p>
&lt;p>这给人带来误解和焦虑。&lt;/p>
&lt;p>任何一个熟练的技能习得，一定是浪费了很多时间在看似低效甚至无效的重复练习上，因为要靠这个来感悟真正的心法。&lt;/p>
&lt;p>很多人站在起点，一心只想着避免走弯路，实际上这世上哪有直路，弯路才是必经之路。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>Github仓库地址：https://github.com/sbabybird/MachineDigest&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 061 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/</link><pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-34-30.png" alt="Featured image of post 机器文摘 第 061 期" />&lt;h1 id="机器文摘-第-061-期">机器文摘 第 061 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="在-adsl-之前电话线拨号上网为什么最高只能是-56k">在 ADSL 之前，电话线拨号上网，为什么最高只能是 56k？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-33-06.png"
width="636"
height="389"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="392px"
>&lt;/p>
&lt;p>用过最早的电话线猫拨号上网（非 ADSL 宽带）的同学，都体会过拨号即将接通那一刻猫欢快地吱吱叫（电影黑客帝国中能回味这种声音），你的心也如猫抓的感受。&lt;/p>
&lt;p>然而当时没人太在意为什么那个猫的速率最高只能达到 56k 每秒（事实上这是理论值，现实中永远达不到）。&lt;/p>
&lt;p>56 这个数字既不是 2 的幂，也不能被 10 整除，它是怎么来的？&lt;/p>
&lt;p>国外有个闲人（他自己说的），认真研究了一大段历史，然后撰写这篇文章：&lt;a class="link" href="https://www.10stripe.com/articles/why-is-56k-the-fastest-dialup-modem-speed.php" target="_blank" rel="noopener"
>《为什么 56k 是最快的拨号调制解调器速度？》&lt;/a> 记录了形成这个数字的原因。&lt;/p>
&lt;p>大概如下：
1、电话线最初是为语音通话服务的，按照最小化成本的原则，选择了一个技术标准：4kHz 的带宽给语音。&lt;/p>
&lt;p>2、转为数字交换机之后，只有用户到接入箱的信号是模拟的，其余都是数字化的，按照科学定律，数字采样频率为 4kHz 的两倍（也就是8000）即可完美保留信息了。&lt;/p>
&lt;p>3、最开始的数模转换芯片是 8-bit 的，每秒 8000 的频率，所传输的数据为 8*8000，也就是 64k。&lt;/p>
&lt;p>4、由于控制信息还要占用 1 位，所以 64k 并不能都给数据载荷，所以传输的数据位 7*8000，也就是 56k。&lt;/p>
&lt;h3 id="自制一个真-3d-显示器">自制一个真 3D 显示器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-33-36.png"
width="690"
height="389"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mitxela.com/projects/candle" target="_blank" rel="noopener"
>一个小小的体积显示器&lt;/a>&lt;/p>
&lt;p>这篇文章的作者使用电机带动一个 LED 点阵电路板的旋转，实现了一个逼真的 3D 显示器，虽然分辨率很低，但是它真的是 3D 的。&lt;/p>
&lt;p>支持从水平方向上的各个角度观看。&lt;/p>
&lt;p>技术通过调节 LED 的点亮时间与电机旋转速度的匹配，以实现不同角度显示不同画面的效果。&lt;/p>
&lt;h3 id="怎样搭建自己的电子邮件服务">怎样搭建自己的电子邮件服务？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-33-49.png"
width="690"
height="380"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://synergeticlabs.com/email-alchemy/" target="_blank" rel="noopener"
>探索自托管电子邮件服务&lt;/a>。&lt;/p>
&lt;p>很少有技术能像互联网上的电子邮件服务那样保持其原始形式。&lt;/p>
&lt;p>虽然它有时会穿上一些不同的马甲，但基本概念和协议至今基本保持不变。&lt;/p>
&lt;p>现在普通用户使用电邮服务基本上都要依托于几家大的服务商（谷歌、微软、苹果等，国内有网易、阿里、腾讯等）。&lt;/p>
&lt;p>这样做的代价就是会被特定的系统绑定，不得不依赖电邮服务商所构建的生态，失去了自主控制的能力。&lt;/p>
&lt;p>本文作者正是基于摆脱特定服务商控制的目标，意图构建一套完全自主管理和运营的电邮系统。&lt;/p>
&lt;p>这在上个世纪电邮刚刚兴起的时候或许还更简单一些，现在由于那些服务商的垄断，导致不得不面临一些技术问题。&lt;/p>
&lt;p>有兴趣的朋友可以跟随作者感受一下完整的从技术选型到构建的过程。&lt;/p>
&lt;h3 id="语音识别时怎样区分多人谈话">语音识别时怎样区分多人谈话？
&lt;/h3>&lt;p>&amp;mdash;-来自微博&lt;a class="link" href="https://weibo.com/1812166904/NuI5ridW8" target="_blank" rel="noopener"
>@Barret李靖&lt;/a>
OpenAI 推出的开源免费 Whisper 在语音识别领域（ASR）可以说无出其右，不过它有一个较大的局限性，就是无法进行说话人分类（Speaker diarization），尤其是在重叠语音检测（Overlapped speech detection）方面，Whisper 在训练过程中只识别了一个声音，同时将其他声音视为背景噪声。&lt;/p>
&lt;p>社区有一个发展了多年的音频处理工具包，&lt;a class="link" href="https://github.com/pyannote/pyannote-audio" target="_blank" rel="noopener"
>pyannote-audio&lt;/a>，它具备非常强大的音频分析、处理、识别和分类能力，在多人同时讲话的时候，也可以很准确地区分说话者内容，只不过它的 ASR 能力还是比不过 Whisper。&lt;/p>
&lt;p>有人想到结合两者的能力，并做了一个&lt;a class="link" href="https://colab.research.google.com/drive/12W6bR-C6NIEjAML19JubtzHPIlVxdaUq" target="_blank" rel="noopener"
>工程化的实践&lt;/a>，大致思路如下：&lt;/p>
&lt;p>1）通过 pyannote-audio 将不同 speaker 的音轨时间片段给识别出来&lt;/p>
&lt;p>2）将不同 speaker 的声音按照各自的时间片段进行合并，空白处使用静音填充&lt;/p>
&lt;p>3）将分离的多个 speaker 音频交给 Whisper 进行语音识别&lt;/p>
&lt;p>4）最后将识别的内容按照 speaker 和时间顺序进行还原&lt;/p>
&lt;p>这个实验还演示了如何使用 yt-dlp 从 Youtube 下载视频，如何使用 pydub 分离音频，以及解决了 Whisper 和 pyannote-audio 安装时的依赖冲突问题，算是一个比较完整的解决方案，不过这个思路需要对音频进行多次分析（取决于 speaker 数量），性能一般。&lt;/p>
&lt;p>&lt;a class="link" href="https://medium.com/@xriteshsharmax/speaker-diarization-using-whisper-asr-and-pyannote-f0141c85d59a" target="_blank" rel="noopener"
>这篇文章提出了一个性能稍微优秀一点点的方案&lt;/a>，仍然是通过工程手段解决问题：&lt;/p>
&lt;p>1）首先利用 pyannote-audio 根据静音、暂停和说话者变化等特征，将音频流分割为更小的片段&lt;/p>
&lt;p>2）对于每个片段，将不同说话者的语音特征提取出来（Speaker Embedding）&lt;/p>
&lt;p>3）将分割的片段极其衍生的更多片段进行聚类（Clustering）和打标（Labeling）&lt;/p>
&lt;p>4）最后交给 Whisper 进行语音识别&lt;/p>
&lt;p>这部分&lt;a class="link" href="https://github.com/riteshhere/Speaker_diarization" target="_blank" rel="noopener"
>工程的实现已被作者整理成一个开源项目&lt;/a>，目前还没有找到更优的解决方案，不知道有经验的朋友都是如何去做的？&lt;/p>
&lt;h3 id="有哪些值得推荐的冷门技术">有哪些值得推荐的冷门技术？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-34-17.png"
width="642"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://news.ycombinator.com/item?id=38499134" target="_blank" rel="noopener"
>有网友在 HN 上发起的一个讨论&lt;/a>，里面抛出了很多平时不被广泛了解的技术或产品。&lt;/p>
&lt;p>比如：
1、&lt;a class="link" href="https://www.ultimatepp.org/" target="_blank" rel="noopener"
>U++&lt;/a>：一个跨平台的 C++ 快速开发框架，专注于提高程序员的生产力。它包括一组库（GUI、SQL 等）和一个集成开发环境。&lt;/p>
&lt;p>2、&lt;a class="link" href="https://flatassembler.net/" target="_blank" rel="noopener"
>flatassembler&lt;/a>：一个专门学习高级汇编语言的网站。&lt;/p>
&lt;p>3、&lt;a class="link" href="" >模拟计算&lt;/a>：纯机械、利用物理系统实现的计算系统，有人认为实现神经网络的最合适技术不应该是基于二进制的数字技术，而是基于机械运动的模拟计算。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="用-ai-生成视觉错觉图片">用 AI 生成视觉错觉图片
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-34-30.png"
width="690"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dangeng.github.io/visual_anagrams/" target="_blank" rel="noopener"
>visual_anagrams&lt;/a> 是一个用 AI 生成视觉错觉图的样例站点。&lt;/p>
&lt;p>生成的图片从正方向来看是一副图像（比如人像、景物等），倒转 180° 之后是另外一副图像，也可以是其他人物或者景物。&lt;/p>
&lt;p>项目开源并且有对应的论文。 ​​​&lt;/p>
&lt;h3 id="深度学习入门">深度学习入门
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-34-55.png"
width="488"
height="542"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="216px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://udlbook.com" target="_blank" rel="noopener"
>Understanding Deep Learning&lt;/a>。一本深度学习入门的电子书。基于 MIT 协议开源。&lt;/p>
&lt;p>注重实操，从基础概念一直讲到最新比较流行的神经网络模型。&lt;/p>
&lt;p>每个章节都附带可直接运行的样例代码（以 ipynb 格式呈现）。 ​​​&lt;/p>
&lt;h3 id="在线网页-ps">在线网页 PS
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-061-%E6%9C%9F/2023-12-05-09-35-22.png"
width="691"
height="581"
loading="lazy"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="285px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zaixianps.net/" target="_blank" rel="noopener"
>在线PS网页版&lt;/a>。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://nordpass.com/most-common-passwords-list/" target="_blank" rel="noopener"
>NordPass&lt;/a> 公布了 2023 年 Top200 常见密码，其中“123456” 5 年 4 次登顶常见密码榜，可被秒破。&lt;/li>
&lt;li>我感觉“123456”搭配上用户名“admin”更有内味儿。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 060 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/</link><pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-36-17.png" alt="Featured image of post 机器文摘 第 060 期" />&lt;h1 id="机器文摘-第-060-期">机器文摘 第 060 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="在-linux-下运行一个-hello-world-到底发生了什么">在 Linux 下运行一个 Hello world 到底发生了什么？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-34-40.png"
width="595"
height="578"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="247px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://jvns.ca/blog/2023/08/03/behind--hello-world/" target="_blank" rel="noopener"
>在 Linux 下运行一个 Hello world 到底发生了什么&lt;/a>。&lt;/p>
&lt;p>这是一个有点儿类似于“你在浏览器里输入网址并回车之后到底发生了什么”的话题。&lt;/p>
&lt;p>如果深入探讨的话，你会发现每一步都没有你想象的那么简单。&lt;/p>
&lt;p>文章作者以运行 Python 程序 hello.py 为例，讲述从输入 &lt;code>python3 hello.py&lt;/code> 到在控制台看到 &lt;code>hello world&lt;/code> 字符串所发生的全部事情。&lt;/p>
&lt;p>大致过程为：
1、解析命令；
2、寻找命令程序在磁盘中的位置；
3、获取可执行文件内容；
4、启动进程；
5、加载动态链接库及相关依赖；
6、执行文件指令；
7、看到执行结果；&lt;/p>
&lt;p>文章中介绍了每一步在命令行下进行跟踪的细节，喜欢动手的可以跟着作者调试一遍，感受更深刻。&lt;/p>
&lt;h3 id="浮点数在计算机里是如何表示的">浮点数在计算机里是如何表示的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-34-59.png"
width="690"
height="446"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>&lt;/p>
&lt;p>即便是每天都在与计算机打交道的程序员，也未必十分清楚浮点数在计算机是如何表示的，以及为什么要这样表示。&lt;/p>
&lt;p>如果去看 IEEE754 （电气工程师学会制定的二进制浮点格式规范）又显得有些太枯燥。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://ciechanow.ski/exposing-floating-point/" target="_blank" rel="noopener"
>《详解浮点数在计算机中的表示》&lt;/a>容易下咽一些。&lt;/p>
&lt;p>总的来说，计算机采用目前的这种表示方式，是权衡了表示精度与表示范围的矛盾，在有限的二进制位中尽可能的表达更高精度和更广的数值范围。&lt;/p>
&lt;p>为了展示存储细节，作者甚至制作了一个网站 &lt;a class="link" href="https://float.exposed/" target="_blank" rel="noopener"
>float.exposed&lt;/a>，用于展示浮点数在计算机中的每一个细节。&lt;/p>
&lt;h3 id="如果不想陷入困境就去感知尚未察觉的事物">如果不想陷入困境，就去感知尚未察觉的事物
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-35-37.png"
width="690"
height="516"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="http://johnsalvatier.org/blog/2017/reality-has-a-surprising-amount-of-detail" target="_blank" rel="noopener"
>《现实世界有着惊人的细节》&lt;/a>告诉我们一个容易被忽略的事实：物理定律本身往往非常简单——但这些定律的表现往往是复杂和违反直觉的，现实中的细节比理论上要复杂很多，要接受这种复杂度。&lt;/p>
&lt;p>作者自幼跟随父亲从哥伦比亚移民美国，从小就跟兄长一起帮助父亲做一些建筑活计，在这些活动中，作者意识到了上面的问题。&lt;/p>
&lt;p>在文中，作者以“建造一段简单的楼梯”和“观察水的沸腾举例”，看似简单的任务里面包含了丰富的细节。&lt;/p>
&lt;p>现代社会的各种方便工具，让我们忽略了的很多繁琐，以至于更容易不加思索地接受别人通过他们的感知而获得的一些简化后的失真观点。&lt;/p>
&lt;p>但事实上，作者提醒道，你要主动去了解现实的各种细节，这对于你成功地做事、解决各方面的问题，至关重要，否则就会陷入困境。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="企业划分网段的最佳实践">企业划分网段的最佳实践
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-35-49.png"
width="690"
height="634"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="261px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sergiomarotco/Network-segmentation-cheat-sheet" target="_blank" rel="noopener"
>Network-segmentation-cheat-sheet&lt;/a>&lt;/p>
&lt;p>从简单到复杂，这个开源项目列出了4个不同级别的划分网段的最佳实践。​​​&lt;/p>
&lt;h3 id="一键禁用-win10-自动更新">一键禁用 Win10 自动更新
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-36-06.png"
width="690"
height="327"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="506px"
>&lt;/p>
&lt;p>上次我分享了一个禁用 Win10 更新的方法（将系统时间调整到 2050 年，然后设置延迟更新时间），不过对于一些人来说操作还是过于麻烦。&lt;/p>
&lt;p>这里有网友分享的一个&lt;a class="link" href="https://cwj-cloud.s3.sgp.tebi.io/windows/%E5%85%B3%E9%97%ADwin10%E6%9B%B4%E6%96%B0.zip" target="_blank" rel="noopener"
>禁用 Windows 更新&lt;/a>的软件，可以一键禁用。 ​​​&lt;/p>
&lt;h3 id="开源数码照片后期软件">开源数码照片后期软件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-36-17.png"
width="690"
height="391"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://ansel.photos/en/" target="_blank" rel="noopener"
>ansel&lt;/a>，开源数码照片后期软件，可作为 Adobe Lightroom 平替。&lt;/p>
&lt;p>支持 Linux 和 Windows 平台。 ​​​&lt;/p>
&lt;h3 id="浏览器跨窗口互动">浏览器跨窗口互动
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-36-32.png"
width="690"
height="628"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="263px"
>&lt;/p>
&lt;p>最近有个浏览器跨窗口的 Demo 火了，多个浏览器窗口里的显示内容进行互动，组成复杂的图形。&lt;/p>
&lt;p>大家纷纷放出了自己的代码实现。&lt;/p>
&lt;p>在这里有一个：https://bgstaal.github.io/multipleWindow3dScene/&lt;/p>
&lt;p>主要原理是通过localStorage存储来交换各个窗口的信息。 ​​​&lt;/p>
&lt;p>还有个通过 websocket 的实现的，代码在这里： &lt;a class="link" href="https://github.com/Momciloo/fun-with-sockets" target="_blank" rel="noopener"
>https://github.com/Momciloo/fun-with-sockets&lt;/a>&lt;/p>
&lt;h3 id="学习-css-grid-布局的资料">学习 CSS Grid 布局的资料
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-38-12.png"
width="421"
height="498"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="202px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.joshwcomeau.com/css/interactive-guide-to-grid/" target="_blank" rel="noopener"
>interactive-guide-to-grid&lt;/a>，CSS Grid 布局的交互式指南。&lt;/p>
&lt;p>虽然现在大家都 Flex 布局一把梭了，但是某些情况下 Grid 布局更加适合。&lt;/p>
&lt;p>如果觉得 Grid 布局学起来稍微有些复杂的话，这篇教程应该会好理解一些。&lt;/p>
&lt;h3 id="最好的爬虫工具">最好的爬虫工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-38-22.png"
width="542"
height="293"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://crawlee.dev/" target="_blank" rel="noopener"
>crawlee&lt;/a> 评价很高的爬虫工具。&lt;/p>
&lt;p>技术栈非常新，功能很强大。&lt;/p>
&lt;p>支持两种模式，HTTP 和 Headless 模式。&lt;/p>
&lt;p>其中，Headless 模式基于 Pupperteer 提供真实的浏览器模拟，支持 JS 渲染，有反封锁和类人操作模拟，可以降低被封概率。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="电影和游戏">电影和游戏
&lt;/h3>&lt;p>电影是一种可以观看的快进人生。&lt;/p>
&lt;p>电子游戏是一种可以参与的快进人生。 ​​​&lt;/p>
&lt;h3 id="ai-的另类用法">AI 的另类用法
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-060-%E6%9C%9F/2023-11-28-09-38-56.png"
width="619"
height="900"
loading="lazy"
class="gallery-image"
data-flex-grow="68"
data-flex-basis="165px"
>&lt;/p>
&lt;p>犯罪嫌疑人开始戴假手指，如果被监控摄像机抓取，会显得像是人工智能生成的图片，从而无法被当成证据。&lt;/p>
&lt;p>&amp;ndash;来自新浪微博：&lt;a class="link" href="https://weibo.com/1666430060/NujKiqNr1" target="_blank" rel="noopener"
>@周健工&lt;/a>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 059 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/</link><pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-46-23.png" alt="Featured image of post 机器文摘 第 059 期" />&lt;h1 id="机器文摘-第-059-期">机器文摘 第 059 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="一个独立游戏开发者自学手绘的探索">一个独立游戏开发者自学手绘的探索
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-45-38.png"
width="690"
height="403"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://indienova.com/indie-game-development/the-process-of-learning-art-for-an-indie-game-developer/" target="_blank" rel="noopener"
>以笔为剑：聊一聊独立游戏开发者的邪道自学绘画&lt;/a>。&lt;/p>
&lt;p>作者是一个独立游戏开发者，受限于美术资源的匮乏只得自己学习绘画并亲自制作（当然我感觉作者本身是热爱绘画的）。&lt;/p>
&lt;p>他谈到了自己曾多次启动学习绘画的计划，但每次都被“系统性学习”这个概念给压倒，周围一帮人要告诉他正确的学习方法和“最佳实践”。&lt;/p>
&lt;p>而这个“最佳实践”就是“素描是一切的基础”，以及艺术成就来自大量练习和“天生的”。&lt;/p>
&lt;p>作者在这个框架下多次挫败、放弃、重启，然后再失败。&lt;/p>
&lt;p>终于有一天他悟了，作为擅长计算机图形学的开发者，能否用 3D 建模以及渲染的思维来学习绘画呢？&lt;/p>
&lt;p>他决定尝试，并取得成功。&lt;/p>
&lt;p>作者文风幽默，可见其对生活、学习乐观积极，文章记录了详细的学习过程，对于有绘画情节的开发者，也许会有所触动。&lt;/p>
&lt;h3 id="一行代码造成-6-千万美元损失的故事">一行代码造成 6 千万美元损失的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-45-57.png"
width="677"
height="807"
loading="lazy"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="201px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://engineercodex.substack.com/p/how-one-line-of-code-caused-a-60" target="_blank" rel="noopener"
>一行代码造成 6 千万美元损失的故事&lt;/a>&lt;/p>
&lt;p>这个故事发生在 1990 年，AT&amp;amp;T 当时是全球最大的通信公司，因为这次事故导致了近一半的网络瘫痪， 6 万人无法通话，500 个航空公司的航班延误。&lt;/p>
&lt;p>原因是有人更新了运行在交换机上的程序。&lt;/p>
&lt;p>按理说应该会经过严格测试才能上线，但这次没有测试就上线了，因为“改动很小，只有一行代码”。&lt;/p>
&lt;p>正是这行代码中出现了因为看错语句嵌套而写错位置的“break”语句，导致了数据被错误覆盖，然后监控程序识别到这个错误就会重启交换机，结果一时间，大量的交换机被重启，网络瘫痪了。&lt;/p>
&lt;h3 id="用-python-写一个-python">用 Python 写一个 Python
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-46-11.png"
width="690"
height="996"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="166px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mathspp.com/blog/building-a-python-compiler-and-interpreter" target="_blank" rel="noopener"
>Building a Python compiler and interpreter&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>在这一系列的文章中，我们将从头开始用 Python 语言实现 Python 编程语言。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>这个系列的最终目标是探索和体验实现类似 Python 编程语言所需的概念和算法。为此，我们将创建一种具有 Python 部分功能的编程语言，并在此过程中涉足词法分析器、解析器、编译器和解释器的实现！！&lt;/p>
&lt;/blockquote>
&lt;h3 id="用-c4model-进行软件架构设计">用 c4model 进行软件架构设计
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-46-23.png"
width="690"
height="556"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="297px"
>&lt;/p>
&lt;p>&lt;a class="link" href="c4model.com" >C4&lt;/a> 是的一个比 UML 更简练的系统架构模型。&lt;/p>
&lt;p>C4的理念是，具体把系统分为：System Context（上下文）, Container（容器）, Component（部件）, Code（代码）。&lt;/p>
&lt;p>这四层每层代表着不同的视图架构，每层适用于不同的系统角色，我们会针对当前的人员的角色，找到共同的关注点（合适的层级）来统一认识，然后展开设计。&lt;/p>
&lt;p>但是介绍它如何落地使用的资料偏少，这里我找到了&lt;a class="link" href="%e7%bd%91%e9%a1%b5%e9%93%be%e6%8e%a5" >一篇关于如何使用 C4 模型进行架构设计的入门文章&lt;/a>。&lt;/p>
&lt;p>介绍了基本的概念以及如何在 vscode 里使用 PlantUML 插件进行绘图。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="自制深度学习推理框架">自制深度学习推理框架
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-46-43.png"
width="690"
height="579"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="286px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/zjhellofss/KuiperInfer" target="_blank" rel="noopener"
>KuiperInfer&lt;/a>，带你从零实现一个高性能的深度学习推理库，支持Unet、Yolov5、Resnet等模型的推理。&lt;/p>
&lt;h3 id="去除图片任意物体网页版">去除图片任意物体（网页版）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-46-58.png"
width="690"
height="462"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/lxfater/inpaint-web/tree/main%e2%80%8b" target="_blank" rel="noopener"
>inpaint-web&lt;/a>，一个运行在浏览器端的inpaint实现，能够去除掉图片的无关物体。&lt;/p>
&lt;h3 id="跟着例子学-wasm">跟着例子学 Wasm
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-47-08.png"
width="690"
height="538"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://wasmbyexample.dev/home.en-us.html" target="_blank" rel="noopener"
>Wasm By Example&lt;/a>，一个简洁的、通过示例介绍 WebAssembly 的站点。&lt;/p>
&lt;p>通过代码片段和带注释的 WebAssembly 示例程序让你更好的理解 WebAssembly 技术的使用。 ​​​&lt;/p>
&lt;h3 id="把网页做成电子书">把网页做成电子书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-47-19.png"
width="690"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/sunxen/EpubPressX" target="_blank" rel="noopener"
>EpubPressX&lt;/a>，一个 chrome 浏览器插件，可以将打开的多个网页制作成一本 epub 电子书，然后在微信读书等进行阅读。&lt;/p>
&lt;h3 id="浏览器调试器技巧">浏览器调试器技巧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-47-27.png"
width="690"
height="510"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://alan.norbauer.com/articles/browser-debugging-tricks" target="_blank" rel="noopener"
>browser-debugging-tricks&lt;/a>，一些浏览器调试器的使用技巧。&lt;/p>
&lt;h3 id="excel-表格粘贴为-markdown-格式">Excel 表格粘贴为 Markdown 格式
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-47-44.png"
width="688"
height="350"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>这个 vscode 的插件可真是太好用了：&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=csholmq.excel-to-markdown-table" target="_blank" rel="noopener"
>Excel to Markdown table&lt;/a> 。&lt;/p>
&lt;p>用法比较简单，先在打开你的 Excel 文档，复制你要的表格内容。&lt;/p>
&lt;p>然后 &lt;code>Shift+Alt+V&lt;/code> 就可以转化并粘贴成 Markdown 格式的 Table 到你当前打开的这个文档中。 ​​​&lt;/p>
&lt;h3 id="机器学习入门课程">机器学习入门课程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-059-%E6%9C%9F/2023-11-21-09-47-57.png"
width="496"
height="287"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://microsoft.github.io/ML-For-Beginners" target="_blank" rel="noopener"
>ML-For-Beginners)&lt;/a>，微软出品的面向初学者的机器学习入门课程（含PDF）。&lt;/p>
&lt;p>虽然是系统学习，但比较偏向于实践，各种知识通过各种实例任务进行串接。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="做好产品的人">做好产品的人
&lt;/h3>&lt;p>只有那些心里有他人，真正为他人着想的人，才能做好产品，才能成为合格的工程师。&amp;mdash;-看到有人发布了一个基于 AI 的导盲 APP 有感。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 058 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/</link><pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-19-49.png" alt="Featured image of post 机器文摘 第 058 期" />&lt;h1 id="机器文摘-第-058-期">机器文摘 第 058 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="将运行在-50-年前处理器上的程序性能提升-1800-倍">将运行在 50 年前处理器上的程序性能提升 1800 倍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-16-04.png"
width="463"
height="482"
loading="lazy"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="230px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://mark.engineer/2023/11/speed-up-a-program-for-50-years-old-processor-by-180000/" target="_blank" rel="noopener"
>《将运行在 50 年前处理器上的程序性能提升 1800 倍》&lt;/a>。&lt;/p>
&lt;p>了解过一点儿计算机历史的都知道世界上第一台真正的电子计算机是 1946 年宾夕法尼亚大学的 ENIAC。&lt;/p>
&lt;p>当年科学家实现了在 ENIAC 上计算 PI 的小数点后 2035 位，耗费时长大概是 70 个小时。&lt;/p>
&lt;p>技术发烧友有一个流派，就是深挖各种硬件的极限性能。&lt;/p>
&lt;p>为此，此文作者希望挑战这个记录。&lt;/p>
&lt;p>即：在 Intel 4040 （4004 的后续产品）CPU 上计算 PI 的小数点后 2035 位，并在耗时上小于 70 小时。&lt;/p>
&lt;p>当然这不是一件容易的事情，涉及到算法选择，以及在捉襟见肘的指令集上反复优化。&lt;/p>
&lt;p>文中对使用计算机计算 PI 的方法也做出了比较详细的介绍。&lt;/p>
&lt;h3 id="又有人自己动手写编译器">又有人自己动手写编译器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-18-12.png"
width="521"
height="783"
loading="lazy"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="159px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://sebmestre.blogspot.com/2023/11/en-writing-compiler-is-surprisingly.html" target="_blank" rel="noopener"
>写一个编译器非常简单&lt;/a> （吗？）&lt;/p>
&lt;p>写这篇文章的作者从小就希望创造一个属于自己的编程语言，但是从来没有完成过。&lt;/p>
&lt;p>因为每次做到“从源码生成汇编代码”这一步时就因为复杂度而放弃了。&lt;/p>
&lt;p>后来很多年过去了，作者总觉得欠小时候的自己一个编译器。&lt;/p>
&lt;p>于是他决心自己动手撸出来一个。&lt;/p>
&lt;p>在这个过程中，他发现，如果设置合理的限制条件的话，做个编辑器并没有想象中的那么难。&lt;/p>
&lt;p>文中分享了整个编写过程，限制条件为：
1、目标平台为 x86-64 处理器；
2、只生成汇编代码，由汇编到可执行文件的过程交给 gcc 来干；&lt;/p>
&lt;h3 id="复杂的问题不等于重要的问题">复杂的问题不等于重要的问题
&lt;/h3>&lt;p>为什么有的时候人们会把简单的问题复杂化，看完这篇&lt;a class="link" href="https://www.benkuhn.net/hard/" target="_blank" rel="noopener"
>《你不需要解决困难的问题》&lt;/a>可能会找到一点儿线索。&lt;/p>
&lt;p>文章作者在学生时代以“解决棘手问题”作为最高工作目标，并引以为傲地写入简历。&lt;/p>
&lt;p>后来经历过现实中各种目标、边界、考核维度都十分模糊的项目之后，作者感悟到了原因。&lt;/p>
&lt;p>即：很多人在现实中错误的将“困难的”问题跟“重要的”问题划上了等号。&lt;/p>
&lt;p>所以在工作中拆解目标时，很容易陷入“困难”、“复杂”的问题中去，而实际上，识别那些问题更重要，哪怕它是简单枯燥的，那也应该优先解决它们。&lt;/p>
&lt;h3 id="纯-javascript-操作-dom">纯 Javascript 操作 DOM
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-19-35.png"
width="683"
height="352"
loading="lazy"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="465px"
>&lt;/p>
&lt;p>使用框架使多了，已经忘了用原生 Javascript 怎样跟 DOM 元素打交道？&lt;/p>
&lt;p>这里有个系列文章&lt;a class="link" href="https://phuoc.ng/collection/html-dom/" target="_blank" rel="noopener"
>《使用纯 Javascript 精通 DOM 操作》&lt;/a>。&lt;/p>
&lt;p>作者编写了十分详尽的文档，并列举了丰富的例子帮我们掌握在不借助任何外部框架的基础上，操作 DOM 元素。&lt;/p>
&lt;p>这些文章每篇都解决现实中一个特定的问题，并给出了最佳实践。&lt;/p>
&lt;p>每篇文章都可以在线交互运行代码示例，例子很小巧、容易理解。&lt;/p>
&lt;p>系列文章深度由浅入深，从最基本的元素插入、修改，到高级的光标定制、滚动条定制与交互操作等，覆盖面非常广泛。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="逼真的俄罗斯方块模拟器">逼真的俄罗斯方块模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-19-49.png"
width="623"
height="925"
loading="lazy"
class="gallery-image"
data-flex-grow="67"
data-flex-basis="161px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://chvin.github.io/react-tetris/?lan=zh-cn" target="_blank" rel="noopener"
>俄罗斯方块&lt;/a>。非常复古拟真的俄罗斯方块游戏，手机或 PC 直接打开链接即可玩。 ​​​&lt;/p>
&lt;h3 id="在线协作终端">在线协作终端
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-20-09.png"
width="690"
height="527"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ekzhang/sshx" target="_blank" rel="noopener"
>sshx&lt;/a>。一个基于 Web 的安全协作终端。&lt;/p>
&lt;p>具有实时协作功能，可以远程分享终端环境。端到端加密，采用 Rust 编写。 ​​​&lt;/p>
&lt;h3 id="复古游戏机模拟器大全">复古游戏机模拟器大全
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-20-25.png"
width="528"
height="750"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="168px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/DerekTurtleRoe/awesome-emulators" target="_blank" rel="noopener"
>awesome-emulators&lt;/a>。这是一个开源的专门收集复古电脑和游戏机模拟器的仓库。 ​​里面整理了非常齐全的复古电脑和游戏主机的不同版本的模拟器。​&lt;/p>
&lt;h3 id="gpu-加速科学数据处理">GPU 加速科学数据处理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-20-38.png"
width="690"
height="312"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="530px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://colab.research.google.com/drive/12tCzP94zFG2BRduACucn5Q_OcX1TUKY3" target="_blank" rel="noopener"
>cuDF&lt;/a>是 Nvidia 开发的 pandas 加速器。&lt;/p>
&lt;p>只需一行代码将 Pandas 代码的速度提高 10-1000 倍&lt;/p>
&lt;p>Notebooks 运行：&lt;code>%load_ext cudf.pandas&lt;/code>&lt;/p>
&lt;p>命令行运行：&lt;code>python -m cudf.pandas&lt;/code>&lt;/p>
&lt;h3 id="贝尔实验室在上世纪七十年代的-c-语言教程">贝尔实验室在上世纪七十年代的 C 语言教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-20-57.png"
width="464"
height="627"
loading="lazy"
class="gallery-image"
data-flex-grow="74"
data-flex-basis="177px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.lysator.liu.se/c/bwk-tutor.html" target="_blank" rel="noopener"
>bwk-tutor&lt;/a>，一份 1974 年，贝尔实验室的 C 语言教程。&lt;/p>
&lt;h3 id="年会抽奖工具">年会抽奖工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-058-%E6%9C%9F/2023-11-14-10-21-17.png"
width="690"
height="674"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="245px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://vitozyf.github.io/lucky-draw/index.html" target="_blank" rel="noopener"
>lucky-draw&lt;/a>。&lt;/p>
&lt;p>一个开源的抽奖工具，基于网页技术实现，支持导入名单和人员照片作为头像。 ​​​&lt;/p>
&lt;h3 id="笔记本的-nvidia-独显竟然没有视频编码硬解支持">笔记本的 Nvidia 独显竟然没有视频编码硬解支持
&lt;/h3>&lt;p>老黄刀法精准，从多年前就开始了。&lt;/p>
&lt;p>我近期才发现我那个老掉牙的笔记本电脑（Thinkpad t450s），里面带的 Nvidia 940M 显卡居然不支持视频格式硬件解码。&lt;/p>
&lt;p>如果我使用独显渲染网页（在 Win10 的图形设置里将浏览器强制指定使用独显，本以为这样会提升性能）的话，访问哔哩哔哩这些视频网站就只能使用 CPU 软解视频流。&lt;/p>
&lt;p>导致 CPU 占用极高。&lt;/p>
&lt;p>今天抱着试试看的态度将之切换为核显，结果发现 Intel 核显支持各种视频格式的硬解，CPU 占用一下就下去了。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="痛苦就是信息">痛苦就是信息
&lt;/h3>&lt;p>小时候，当你触碰到滚烫的物品时，你感觉到了疼痛。这份疼痛给了你一条信息：小心滚烫的东西。&lt;/p>
&lt;p>当你报名参加马拉松比赛时，你是在跟痛苦签约，但跑步过程中你是否要继续，则取决于你自己。用村上春树的话说，“痛苦是必然的，但受苦是可选择的”。你可以选择痛苦，而不选择受苦。&lt;/p>
&lt;p>痛苦就是信息，信息也会带来痛苦。重塑大脑并不是一个无摩擦的过程，有些知识只能通过艰难的方式获得。&lt;/p>
&lt;p>越早将痛苦转化为知识，你就越早能体验到下一个有用的痛苦。不要让自己多次经历同样的痛苦。要获取新的信息，你必须经历新的痛苦。&lt;/p>
&lt;p>人们常说“知识就是力量”。如果痛苦就是信息，那么痛苦也可以转化为力量。为此，你必须学会控制你的受苦，接受伤疤其实是美丽的。&lt;/p>
&lt;p>如果你感到痛苦，问问它给了你什么信息。如果那个信息很有用，那就寻找下一个痛苦。这就是学习的过程。&lt;/p>
&lt;p>来自微博&lt;a class="link" href="https://weibo.com/2166767661/NrRSBpk8l" target="_blank" rel="noopener"
>@本恰恰-&lt;/a>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 057 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/</link><pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-56-08.png" alt="Featured image of post 机器文摘 第 057 期" />&lt;h1 id="机器文摘-第-057-期">机器文摘 第 057 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="浏览器反广告插件是如何工作的">浏览器反广告插件是如何工作的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-55-06.png"
width="528"
height="351"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://andadinosaur.com/youtube-s-anti-adblock-and-ublock-origin" target="_blank" rel="noopener"
>视频网站和反广告插件的猫鼠游戏&lt;/a>。&lt;/p>
&lt;p>我之前也好奇像 adblock 这种浏览器插件是如何屏蔽掉 Youtube 这类网站嵌入在网页或者视频播放器里的广告。&lt;/p>
&lt;p>起初我以为广告插件是简单粗暴地屏蔽掉了某些 DOM 元素，但事实比我想象的要复杂得多。&lt;/p>
&lt;p>在上面这篇文章里，作者讨论了视频网站嵌入广告的技术路线，以及反广告插件是如何通过技术手段使其失效的。&lt;/p>
&lt;p>其基本原理如下：&lt;/p>
&lt;p>1、视频网站会在前端请求一个 API，获取面向当前所播放视频相关的广告信息，这些信息是通过 JSON 格式进行传递的，广告信息就在其中某个数组里。&lt;/p>
&lt;p>2、广告屏蔽插件会重写覆盖 JS 引擎的 JSON.parse 函数，使得视频网站前端代码在执行解析之后，获得一个空的广告信息数组。（想出这个点子的人真是个天才）。&lt;/p>
&lt;p>不过就像军备竞赛一样，双方都在非常认真地升级，近期 Youtube 实在忍无可忍，通过“先发送虚假请求并判断信息是否被篡改”的方式，主动识别出安装了这类插件的浏览器，并弹出窗口严词要求用户关掉该插件。&lt;/p>
&lt;p>插件开发者又要开启了一轮技术升级了。&lt;/p>
&lt;h3 id="全栈工程师升级到了产品工程师">“全栈工程师”升级到了“产品工程师”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-56-08.png"
width="751"
height="414"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://engineercodex.substack.com/p/the-1-trait-of-the-most-valuable" target="_blank" rel="noopener"
>《顶级工程师最有价值的特质》&lt;/a>讨论了一个逐渐被认识的的事实：&lt;em>最好的工程师不仅在技术上非常敏锐，而且能够以技术推动他们的产品向前发展&lt;/em>。&lt;/p>
&lt;p>虽然面向产品和面向代码并非矛盾，并且有时候是相辅相成的。&lt;/p>
&lt;p>但毫无疑问有产品思维的工程师要比有技术的工程师稀缺的多。&lt;/p>
&lt;h3 id="神奇的光影包-mod">神奇的光影包 MOD
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-56-21.png"
width="690"
height="392"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="422px"
>&lt;/p>
&lt;p>第一次在《我的世界》中加载光影 MOD 时，那种神奇的渲染效果震惊了我。&lt;/p>
&lt;p>怀着强烈的好奇心研究了一下，发现并收藏了这篇&lt;a class="link" href="http://blog.hakugyokurou.net/?p=1364" target="_blank" rel="noopener"
>《如何编写Shadersmod光影包》&lt;/a>。&lt;/p>
&lt;p>作者在呕心沥血制作光影包的同时还抽了半年时间完善这套教程实在是令人敬佩。&lt;/p>
&lt;p>基本原理：
1、通过 MOD 使的我的世界具备加载定制着色器（Shader，即在 GPU 中执行的程序）的能力。&lt;/p>
&lt;p>2、定制化着色器驱动渲染管线复杂的光影计算，改变了最终的显示渲染效果。&lt;/p>
&lt;blockquote>
&lt;p>回想一下当你第一次见到Minecraft光影包时的感觉,是不是就像黑魔法一样?为何MC原版那么简陋的画面只要安装上一个Mod就能拥有一个主流游戏的画质?它是怎么绘制阴影和反射的?&lt;/p>
&lt;p>一切都要归功于着色器(Shader),着色器就是决定内存或显存中的顶点数据和纹理是如何在GPU上正确(或错误)地变形、组装、光栅化成像素并进行着色然后绘制到屏幕上的黑魔法,遥想在过去消费级显卡尚未出现的年代,编写软件渲染器是每一个3D游戏程序员都必须掌握的事情,在主频只有数百MHz的CPU上以定点数学编写渲染器虽然不是愉快的事情,但至少那时的程序员对每一个像素都有绝对的控制权.&lt;/p>
&lt;p>而当显卡普及时硬件几乎完全接管了渲染的处理,只留给了程序员一套API,在一些老的图形学或游戏制作相关的书籍中你经常能看到&amp;quot;硬件T&amp;amp;L&amp;quot;这个名词,它指的就是由硬件实现的顶点变换和光照,也就是所谓的固定管线渲染.&lt;/p>
&lt;p>硬件加速的渲染固然高效,但却让程序员失去了对像素的控制权,开发者只能通过图形API提供的最简单的操作,通过搭积木似的拼凑出想要的效果,你还记得在OpenGL1.0规范中甚至不包括纹理吗?&lt;/p>
&lt;p>随着时间的推移,可编程电路逐渐取代了单一功能的电路,在原本由CPU一家独大的主板上,另一股不容忽视的计算力已经悄然崛起,显卡已经从只能执行简单任务的劳工变成了可以处理灵活任务的工程师了,但毕竟各家显卡的编程规范不同,程序员如果想编写一个能在大多数主流显卡(要知道那时候的显卡商是百花齐放)上运行的着色程序得学习数款显卡驱动和它们的汇编语言(高级语言?抱歉,没有),毕竟不是每一个图形学程序员都能像约翰卡马克那样一天适配一款显卡,业界需要一个统一的标准&lt;/p>
&lt;p>这时作为后起之秀的DirectX却抛下了自诩为业界标准的OpenGL,独自扛起了可编程着色器的大旗,在2000年的DirectX8.0中提供了统一的汇编语言用于编写着色器,而在这一关键时期OpenGL规范的众谋特性却让它没能赶上时代步伐,OpenGL规范是由各家(不管是不是做显卡的)统一协定&lt;/p>
&lt;p>这种制度免不了会有各种扯皮,结果是直到2004年9月它才提供了一个可用的着色器语言 - GLSL(OpenGL着色语言),不过相比它的老冤家DirectX来说倒也不算太糟,毕竟DirectX当初提供的是汇编语言,而OpenGL提供的是一个C-like的高级语言,相比之下DirectX到了2004年11月才做出了同为高级语言的HLSL(高级着色语言).&lt;/p>
&lt;p>着色器语言用于编写一个着色器程序,经由驱动编译成显卡能执行的汇编语言后传入显卡,替代原本的固定管线,以此让开发者得以控制渲染的方式.&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="1886年的水果画册">1886年的水果画册
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-56-45.png"
width="690"
height="501"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.openculture.com/2019/06/the-us-government-commissioned-7500-watercolor-paintings.html" target="_blank" rel="noopener"
>水果画&lt;/a>，1886 年，美国政府委托制作了 7,500 幅水彩画，描绘了世界上所有已知的水果。这里提供了一些线索，可以找到并下载这些档案。&lt;/p>
&lt;h3 id="命令行下的-json-解析工具">命令行下的 JSON 解析工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-57-05.png"
width="502"
height="340"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/antonmedv/fx" target="_blank" rel="noopener"
>fx&lt;/a>。最近控制台下的交互体验也提升迅猛，fx 是一个进行 JSON 数据查看和处理的命令行工具。&lt;/p>
&lt;p>交互体验丝滑（甚至支持鼠标），适合控制台爱好者收藏使用。&lt;/p>
&lt;h3 id="把手机当作电脑的话筒">把手机当作电脑的话筒
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-57-17.png"
width="690"
height="366"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://wolicheng.com/womic/" target="_blank" rel="noopener"
>WO Mic&lt;/a> 用任意一部手机当作电脑的音频输入设备，可以通过蓝牙、Wifi、USB等方式进行连接。&lt;/p>
&lt;p>工作方式为，在电脑端启动一个虚拟音频服务，并监听来自手机 app 的连接。 ​​​ ​​​&lt;/p>
&lt;h3 id="vscode-的-activity-bar">VSCode 的 Activity Bar
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-57-43.png"
width="654"
height="360"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/p>
&lt;p>VSCode 终于支持调整 Activity Bar 的位置了，可以切换到顶部与文件页签对齐，这下给右侧的编辑区节省了一列的宽度。&lt;/p>
&lt;p>需要升级到最新 1.84 版本才有这个特性。&lt;/p>
&lt;h3 id="又一个-ai-编程助手插件">又一个 AI 编程助手插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-58-00.png"
width="690"
height="425"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tongyi.aliyun.com/lingma" target="_blank" rel="noopener"
>通义灵码&lt;/a>。阿里云出的 AI 编程助手插件，感觉速度还不错。&lt;/p>
&lt;p>支持 VSCode、JetBrains IDEs 等主流 IDE，支持 Java、Python、Go、JavaScript、TypeScript、C/C++ 等主流语言。&lt;/p>
&lt;h3 id="png-素材下载站">PNG 素材下载站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-58-11.png"
width="690"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="350px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pngpai.com/" target="_blank" rel="noopener"
>PNG派&lt;/a>。一个透明PNG素材下载网站，目前有10+万张，种类多样，免费下载。 ​​​​​​&lt;/p>
&lt;h3 id="在网页中实现书籍翻页效果">在网页中实现书籍翻页效果
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-58-21.png"
width="690"
height="456"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.turnjs.com/" target="_blank" rel="noopener"
>turnjs&lt;/a>。一个实现书籍翻页效果的轻量级（10K） js 库。&lt;/p>
&lt;h3 id="动画展示神经网络原理">动画展示神经网络原理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-58-49.png"
width="690"
height="393"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://animatedai.github.io" target="_blank" rel="noopener"
>animateai&lt;/a>。一个通过三维动画讲解 AI 神经网络原理的网站。&lt;/p>
&lt;p>以生动形象的动画展示了卷积神经网络里各项计算的执行过程。 ​​​&lt;/p>
&lt;h3 id="可以脱离浏览器-dom-的-canvas-api-实现">可以脱离浏览器 DOM 的 Canvas API 实现
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-59-16.png"
width="690"
height="497"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="333px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/joshmarinacci/node-pureimage" target="_blank" rel="noopener"
>PureImage&lt;/a>。&amp;ldquo;PureImage&amp;rdquo; 是 HTML Canvas 2D 绘图 API 的纯 JavaScript 实现，可以脱离浏览器完全在 NodeJS 端执行。&lt;/p>
&lt;p>支持调整图像大小、绘制文本、渲染徽章、转换为灰度图等操作。&lt;/p>
&lt;p>或者执行标准 Canvas 2D API 规范的其他操作。&lt;/p>
&lt;p>另外还提供额外的 API 用于将图像保存为 PNG 和 JPEG 格式。&lt;/p>
&lt;h3 id="软件架构设计的工具">软件架构设计的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-057-%E6%9C%9F/2023-11-07-09-59-28.png"
width="690"
height="507"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>在进行软件架构设计的时候，&lt;a class="link" href="https://c4model.com" target="_blank" rel="noopener"
>“C4 模型”&lt;/a>可以很好地辅助表达一系列的分层图表，它按照上下文（Context）、容器（Container）、组件（Component）和代码（Code）四个维度对软件架构的层级做了定义。&lt;/p>
&lt;p>之前一直是徒手画框，看到 PlantUML 已经内置了 C4 元素，使用简单的 DSL 就可以完成架构图的绘制，实在是太方便了！C4 还内置了一些主题，也可以通过 PlantUML 提供的语法对界面样式进行自定义，不过，一般也不用特别追求好看，内置的主题基本就够用了。&lt;/p>
&lt;p>另外，VSCode 上的插件名就是 &lt;a class="link" href="h&amp;#43;&amp;#43;ps://github.com/plantuml-stdlib/C4-PlantUML" >PlantUML&lt;/a>，它提供了一个包含大量示例的参考仓库。&lt;/p>
&lt;p>来自微博&lt;a class="link" href="https://weibo.com/1812166904/NqnBpnpvx" target="_blank" rel="noopener"
>@Barret李靖&lt;/a>&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="应当多做提升内心秩序的事情">应当多做提升内心秩序的事情
&lt;/h3>&lt;p>内心秩序的建立十分重要。&lt;/p>
&lt;p>应该定期通过一些活动来重新整理自己内心的秩序。&lt;/p>
&lt;p>每当我整理完电脑文件夹，个人知识库，或者是房间、办公桌之后，我都会进入到一种欣喜舒畅的状态。&lt;/p>
&lt;p>整个人都清爽了，各项效率都得到提升，甚至有种踌躇满志的感觉。&lt;/p>
&lt;p>每个人都应该找到能让自己提升内心秩序的事情。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 056 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-58-23.png" alt="Featured image of post 机器文摘 第 056 期" />&lt;h1 id="机器文摘-第-056-期">机器文摘 第 056 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="每个开发者都应该了解的-gpu-计算">每个开发者都应该了解的 GPU 计算
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-56-48.png"
width="690"
height="400"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://codeconfessions.substack.com/p/gpu-computing" target="_blank" rel="noopener"
>《每个开发者都应该了解的 GPU 计算》&lt;/a>。&lt;/p>
&lt;p>大多数程序员对 CPU 和顺序编程都有深入的了解，因为他们入门就面向 CPU 编写代码。&lt;/p>
&lt;p>但是在过去的十年中，GPU 因其在深度学习中的普遍使用而变得非常重要。&lt;/p>
&lt;p>这篇文章可以让不熟悉 GPU 编程以及其内部工作原理的开发者对 GPU 的工作方式有一个基本的了解。&lt;/p>
&lt;p>文章主要内容：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>对比 CPU 和 GPU 的主要区别，前者顺序执行指令，后者并行执行指令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GPU 以流处理器（SM）为核心的计算架构和显存架构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GPU 的程序执行模型以及怎样编写此类程序；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="年轻人的第一间硬件实验室">年轻人的第一间硬件实验室
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-57-03.png"
width="464"
height="812"
loading="lazy"
class="gallery-image"
data-flex-grow="57"
data-flex-basis="137px"
>&lt;/p>
&lt;p>动手能力比较富余的朋友，往往在业余时间喜欢捣鼓一些 DIY 制作，或者拆解一些电子设备，窥探现代科技的魅力。&lt;/p>
&lt;p>对于初入门者来说，除了经典的螺丝刀、万用表、电烙铁这几大件之外，如何在家里构建一套比较全面的 DIY 设备往往是个头疼的问题。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://voidstarsec.com/hw-hacking-lab/vss-lab-guide" target="_blank" rel="noopener"
>《手把手教你打造黑客硬件实验室》&lt;/a>介绍的比较详尽，从工作台到各种设备设施（稳压电源、热风焊台、示波器、显微镜、逻辑分析仪等），十分齐全，为每种设备都提出了高配和低配的解决方案。&lt;/p>
&lt;p>并且都给出了详细的参数和介绍。&lt;/p>
&lt;p>我看了一下，如果全配下来还是比较发烧的，差不多够开个小作坊了。&lt;/p>
&lt;h3 id="windows-远程桌面的一些技巧">Windows 远程桌面的一些技巧
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-57-21.png"
width="418"
height="258"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="388px"
>&lt;/p>
&lt;p>Windows 系统的 RDP 远程桌面技术非常强大，是一些开发者和运维人员必备的工具。&lt;/p>
&lt;p>尤其是如果你在租用云服务虚拟机的时候，选择了 Windows 作为操作系统，那么使用 RDP 作为远程管理工具是最方便的了。&lt;/p>
&lt;p>然而，RDP 的技术细节非常多，包括很多未公开的参数等等，我推测现在就连微软也很难找到一个人能把它的各项开关说清。&lt;/p>
&lt;p>比如我近期发现了这样一篇文章，解决了我在使用远程桌面时困扰了很久的问题。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/bangejingting/p/6846480.html" target="_blank" rel="noopener"
>《如何关闭远程桌面后仍处于可交互状态》&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>UI 自动化测试期间，执行测试的电脑几乎不能继续被他人使用（因为鼠标、键盘等输入设备此时需要响应自动化测试脚本）。为了不影响电脑使用，一般会搭一个虚拟机，然后远程连接到虚拟机里，在虚拟机里执行 UI 自动化测试。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>但是，万一你不小心把某个远程桌面“最小化”了&amp;hellip;Oops，你的自动化测试就挂了。既然连最小化都会失败，相信你已经猜到直接关闭远程桌面的后果了。&lt;/p>
&lt;/blockquote>
&lt;p>为什么最小化或关闭远程连接的桌面会导致自动化测试失败呢？&lt;/p>
&lt;p>查看这篇文章可以尝试寻找答案。&lt;/p>
&lt;h3 id="关于编写技术文档的一些解释">关于编写技术文档的一些解释
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-57-53.png"
width="690"
height="187"
loading="lazy"
class="gallery-image"
data-flex-grow="368"
data-flex-basis="885px"
>&lt;/p>
&lt;p>这里有个系列文章介绍了&lt;a class="link" href="https://documentation.divio.com/introduction.html" target="_blank" rel="noopener"
>“教程”、“指南”、“参考手册”、“详解”等技术文档之间的差别&lt;/a>，以及如何更有效地编写各类技术文档。&lt;/p>
&lt;p>比如“教程”要侧重于面向初学者，目标是要让读者可以开启体验。&lt;/p>
&lt;p>“指南”则重点要向读者讲清楚，怎样一步一步解决某个特定问题。 ​​​&lt;/p>
&lt;h3 id="base64-是如何编码解码的">Base64 是如何编码解码的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-58-08.png"
width="570"
height="417"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.writesoftwarewell.com/base64-encoding-explained/" target="_blank" rel="noopener"
>Base64 编码详解&lt;/a>。&lt;/p>
&lt;p>Base64 是将二进制数据转换为文本的优雅方法，使其易于存储和运输。本文涵盖了Base64 编码的基础知识，包括它的含义，其工作原理以及为什么重要。&lt;/p>
&lt;p>作者还举例说明了如何用各种编程语言实现对数据的 Base64 编码和解码。 ​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="体素编辑器">体素编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-58-23.png"
width="681"
height="397"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/348563616" target="_blank" rel="noopener"
>什么是体素见这里&lt;/a>。体素简单来说就是立体像素，是用一个个立方体来组成三维模型的方法。
&lt;a class="link" href="https://ephtracy.github.io/index.html?page=mv_main" target="_blank" rel="noopener"
>MagicaVoxel&lt;/a>。是一个超级轻量级基于 GPU 的体素编辑器和基于光线追踪的渲染器。&lt;/p>
&lt;h3 id="200-行代码写的聊天室">200 行代码写的聊天室
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-58-43.png"
width="620"
height="708"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;p>发明了 &lt;a class="link" href="https://redis.io" target="_blank" rel="noopener"
>Redis&lt;/a> 的作者 &lt;a class="link" href="http://antirez.com/" target="_blank" rel="noopener"
>antirez&lt;/a>，前一段时间说是代码写累了，改行去写科幻小说了。&lt;/p>
&lt;p>不过，现在又回来了，这两天新写了个&lt;a class="link" href="https://github.com/antirez/smallchat" target="_blank" rel="noopener"
>仅有 200 行 C 代码的在线聊天室系统&lt;/a>。&lt;/p>
&lt;p>据他所说，此代码是为了给大量的前端开发者，演示一下系统编程的大概套路。&lt;/p>
&lt;p>麻雀虽小五脏俱全，这个聊天室支持使用 telnet 登录，并且可以设置聊天账号的昵称。&lt;/p>
&lt;h3 id="vscode-的中英文混合排版补正插件">VSCode 的中英文混合排版补正插件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-59-11.png"
width="627"
height="393"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=huacnlee.autocorrect" target="_blank" rel="noopener"
>AutoCorrect&lt;/a> 能自动帮你格式化中英文混排的文字，补充正确的空格。&lt;/p>
&lt;p>上周介绍 &lt;a class="link" href="https://github.com/Jinjiang/zhlint" target="_blank" rel="noopener"
>zhlint&lt;/a> 的时候我还说要是直接有个编辑器插件就好了，结果已经有人做出来了。&lt;/p>
&lt;h3 id="模拟复古游戏机显示效果的渲染引擎">模拟复古游戏机显示效果的渲染引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-056-%E6%9C%9F/2023-10-31-09-59-35.png"
width="639"
height="485"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://btco.github.io/qx82/" target="_blank" rel="noopener"
>qx82&lt;/a>。一个 Javascript 编写的小型渲染引擎，可以模拟复古的上世纪 80 年代的计算机（家用游戏主机）的显示效果。如果想在网页制作复古小游戏的话，也许能用得上。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="社会和个体就像婆媳是一对天然的对手却又不得不建立亲密关系">社会和个体，就像婆媳，是一对天然的对手却又不得不建立亲密关系。
&lt;/h3>&lt;blockquote>
&lt;p>看到有人说，当你被现代心理学测出有心理疾病的时候，说明你正在偏移社会主体，你这颗工业螺丝在异变，想成为个体，简单的来说：你即将挣脱地球 ol 这个游戏中 NPC 的框架，正在成为有名字的游戏角色。&lt;/p>
&lt;/blockquote>
&lt;p>来自&lt;a class="link" href="https://weibo.com/7743682633/Np9LRgKkV" target="_blank" rel="noopener"
>@烟灰海2023&lt;/a>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 055 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-33-19.png" alt="Featured image of post 机器文摘 第 055 期" />&lt;h1 id="机器文摘-第-055-期">机器文摘 第 055 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="c-语言限制了现代计算机处理器的发展">C 语言限制了现代计算机处理器的发展？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-33-19.png"
width="633"
height="498"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="305px"
>&lt;/p>
&lt;p>在 HN 上读到一篇有些深度的文章：&lt;a class="link" href="https://queue.acm.org/detail.cfm?id=3212479" target="_blank" rel="noopener"
>C 不是一种低级语言&lt;/a>。&lt;/p>
&lt;p>需要了解一些背景知识才能读的进去，比如 C 语言诞生于上个世纪 70 年代古老的 PDP-11 计算机上。&lt;/p>
&lt;p>这篇文章的作者认为，C 在诞生之初确实是一个十分靠近硬件底层的“低级语言”（业界认为越靠近硬件底层的编程语言为“低级语言”，相反越接近人类则为“高级语言”）。&lt;/p>
&lt;p>因为最初的 C 语言确实准确反映了当时 PDP-11 计算机的硬件抽象：没有缓存、扁平的内存空间、串行（顺序）执行的指令等等。&lt;/p>
&lt;p>但是随着时间的推移，处理器逐渐性能提升，硬件复杂度也在倍增。&lt;/p>
&lt;p>但面对 C 语言仍旧不得不提供一个像 PDP-11 那样古老硬件的抽象接口，而新的硬件比如三级缓存、多核心等无法暴露给 C语言进行编程。&lt;/p>
&lt;p>处理器自己在底层默默做着指令分支预测、寄存器重命名（用于欺骗 C 语言的进程）等操作，消耗了大量的能量，限制了性能的发挥。&lt;/p>
&lt;p>作者在文末畅想了一种没有受 C 语言对硬件抽象限制的处理器，具有函数式编程架构、简化的寄存器缓存、天然的并行执行等等特性。&lt;/p>
&lt;p>但是最终作者也不得不感叹，由于现在绝大多数的软件都是构建在 C 语言之上的，所以上述畅想的处理器，想在商业上取得成功就很难了。&lt;/p>
&lt;p>人类技术的发展历史，也确实是不断在打补丁、打补丁、打补丁，想改底层，很难了吧。&lt;/p>
&lt;h3 id="typescript-的类型系统是图灵完备的">Typescript 的类型系统是图灵完备的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-33-38.png"
width="690"
height="531"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zackoverflow.dev/writing/flappy-bird-in-type-level-typescript" target="_blank" rel="noopener"
>基于 Typescript 的类型系统编写一个 flappy bird 游戏&lt;/a>。&lt;/p>
&lt;p>Typescript 的类型系统很强大，大家发现它甚至是&lt;a class="link" href="https://baike.baidu.com/item/%E5%9B%BE%E7%81%B5%E5%AE%8C%E5%A4%87/4634934" target="_blank" rel="noopener"
>图灵完备&lt;/a>的。&lt;/p>
&lt;p>于是喜欢折腾的人开始充分发挥想象力，使用 Typescript 的类型系统开发各式各样的程序。&lt;/p>
&lt;p>之前见过有人拿它写一个下棋 AI 的，这篇文章的作者，则是实现了一个完整的 2d 游戏。&lt;/p>
&lt;h3 id="什么是-csp-网页安全政策">什么是 CSP （网页安全政策）
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-34-01.png"
width="638"
height="479"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>最近在使用 &lt;a class="link" href="https://pixijs.com/" target="_blank" rel="noopener"
>Pixi.js&lt;/a> 写一个 Demo 的时候，遇到一个问题：如果我把页面的安全选项设置的比较严格，则 Pixi.js 库无法正常运行（貌似 Pixi.js 库要求在页面脚本中执行 eval 的权限）。&lt;/p>
&lt;p>于是我认真研究了一下 “Content Security Policy” 这个东东（之前都是拷贝的模板放在 HTML 的头部）。&lt;/p>
&lt;p>&amp;ldquo;网页安全政策&amp;rdquo;（Content Security Policy，缩写 CSP），起初的设计是为了防止 &lt;a class="link" href="https://baike.baidu.com/item/XSS%E6%94%BB%E5%87%BB" target="_blank" rel="noopener"
>XSS&lt;/a> 跨站攻击的。&lt;/p>
&lt;p>也就是说，在服务端进行了相应的 CSP 声明之后，符合规范的浏览器就会仅加载执行经过许可的 Js 代码或其他资源。&lt;/p>
&lt;p>这使得跨站攻击变得几乎不可能了。&lt;/p>
&lt;p>但同时，过于严格的 CSP 声明也会导致你自己的脚本执行受到影响。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.ruanyifeng.com/blog/2016/09/csp.html" target="_blank" rel="noopener"
>《Content Security Policy 入门教程》&lt;/a>可以帮助你了解相关的知识。&lt;/p>
&lt;p>如果希望知道更多的细节，可以看一下&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener"
>这篇 MDN 专门介绍 CSP 的文档&lt;/a>。&lt;/p>
&lt;h3 id="想玩怀旧复古游戏除了用模拟器还有这个办法">想玩怀旧复古游戏除了用模拟器还有这个办法
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-34-15.png"
width="450"
height="550"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;p>玩复古游戏可以有多种方式，最常见的是在 PC 或者手机上使用软件模拟各种古老的游戏机平台，以及如果不差钱的话去搜罗各种古董硬件设备和卡带（这样的老爷机往往不舍得下手玩）。&lt;/p>
&lt;p>不过近些年也有人走上了另一条路线，那就是使用 FPGA 进行硬件级模拟。&lt;/p>
&lt;p>FPGA 的全称是现场可编程门阵列，通过直接对芯片中的模块和逻辑单元编程来模拟老游戏机硬件的运行方式。&lt;/p>
&lt;p>比起软件模拟，硬件级模拟具有高度还原（连原有硬件的 BUG 也还原）、无延迟等优势。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://eli.lipsitz.net/posts/fpga-gameboy-emulator/" target="_blank" rel="noopener"
>《使用 FPGA 做一个 GBA 模拟器》&lt;/a>记录了作者从头手工制作的过程。&lt;/p>
&lt;p>因为作者原本就是软件模拟器开发者，所以对于各项原理和特性讲解都比较清楚，愿意动手试一试的可以看一下。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="下载达芬奇的手稿">下载达芬奇的手稿
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-34-42.png"
width="690"
height="1071"
loading="lazy"
class="gallery-image"
data-flex-grow="64"
data-flex-basis="154px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.drawingsofleonardo.org" target="_blank" rel="noopener"
>达芬奇手稿&lt;/a>，这个网站收录了达芬奇所有的经典手稿，每张手稿都标注了主题和完成时间，可以直接点击打开大图，或直接下载。&lt;/p>
&lt;h3 id="设计模式-javascript-版">设计模式 Javascript 版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-34-56.png"
width="690"
height="515"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="321px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.carlosrojas.dev/quick-reference-guide-to-design-patterns-in-js-1ebeb1e1c605" target="_blank" rel="noopener"
>常用设计模式的 Javascript 实现&lt;/a>。以示意图的方式简单介绍了抽象工厂、单例、桥接等 21 种设计模式，并给出了使用 Javascript 语言的实现。 ​​​​​​&lt;/p>
&lt;h3 id="中文文本格式检查">中文文本格式检查
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-35-15.png"
width="477"
height="415"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="275px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Jinjiang/zhlint" target="_blank" rel="noopener"
>zhlint&lt;/a>，一个中文文本格式自动检查工具。可以像检查编程语法那样检查中文文本内容，给中文文本中的标点符号、英文字符等自动增加空格间距，以实现排版的美观。&lt;/p>
&lt;p>谁要是能把它做成 vscode 插件帮我自动格式化 md 文档就更好了。 ​​​&lt;/p>
&lt;h3 id="超轻量自动补全库">超轻量自动补全库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-35-40.png"
width="690"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/knadh/autocomp.js" target="_blank" rel="noopener"
>autocomp.js&lt;/a>。一个超级小型 JavaScript 自动补全库。零依赖，压缩后只有800个字节大小。 ​​​&lt;/p>
&lt;h3 id="又一个网页绘图板">又一个网页绘图板
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-35-59.png"
width="690"
height="344"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pictode.com/" target="_blank" rel="noopener"
>Pictode&lt;/a> 是一个基于 Vue 3、TypeScript、Konva、HeadlessUI 和 Tailwind CSS 等酷炫技术构建的画板项目，它让你可以随心所欲地绘制、创作和表达自己的创意。&lt;/p>
&lt;h3 id="一款开源的设计工具">一款开源的设计工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-36-26.png"
width="690"
height="366"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://penpot.app/" target="_blank" rel="noopener"
>penpot&lt;/a>，开源的 Figma 平替。&lt;/p>
&lt;p>是一个矢量图形编辑器和原型设计工具，主要基于网页进行工作。&lt;/p>
&lt;p>源代码在此：github.com/penpot/penpot&lt;/p>
&lt;p>可以直接在线使用他们官方提供的服务，也可以自己搭建私有服务。 ​​​​​​&lt;/p>
&lt;h3 id="用儿童编程工具-scratch-运行-linux-内核">用儿童编程工具 Scratch 运行 Linux 内核
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-055-%E6%9C%9F/2023-10-24-09-36-44.png"
width="690"
height="778"
loading="lazy"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="212px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://scratch.mit.edu/projects/892602496/" target="_blank" rel="noopener"
>Linux 6.1.14-rv32ima On Scratch&lt;/a>，使用纯Scratch（常见的图形化搭积木式的少儿编程工具）运行Linux 6.1.14内核！原理是先在 Scratch 中运行一个 RISC-V（rv32ima）CPU 模拟器。&lt;/p>
&lt;p>我的感觉是：就像有人拿着鸡爪子也能写出好看的字，我拿着毛笔也写不好，拿着鸡爪子就更不行了。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="原来我早已不是我是我们">原来我早已不是我，是我们
&lt;/h3>&lt;blockquote>
&lt;p>【研究表明：#寄生虫或能向宿主借基因控制宿主思想#】铁线虫在水中生活和繁殖，但它们的幼虫只能寄生在其它动物体内，通常是陆生昆虫，比如螳螂。一旦幼虫在宿主体内生长成熟，它就必须说服宿主主动跳进水中淹死自己，使其回归水中生活，完成生命周期。那么这种寄生虫是如何说服宿主跳水的呢？长期以来，这个问题一直困扰着科学家。近日，日本科学家的一项新研究发现，铁线虫幼虫用来控制宿主的3100个基因中有1400多种是从宿主那里借来的，有反过来操控宿主跳入水中。但是这种基因如何转移仍然是一个谜，下一步科学家将深入研究以解开更多答案。&lt;/p>
&lt;/blockquote>
&lt;p>来自&lt;a class="link" href="https://weibo.com/1029527725/NoKg67mGw" target="_blank" rel="noopener"
>@机械科技&lt;/a>。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 054 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/</link><pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-05-58.png" alt="Featured image of post 机器文摘 第 054 期" />&lt;h1 id="机器文摘-第-054-期">机器文摘 第 054 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="前端技术栈为什么这么复杂">前端技术栈为什么这么复杂
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-05-25.png"
width="665"
height="345"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://matt-rickard.com/why-is-the-frontend-stack-so-complicated" target="_blank" rel="noopener"
>《前端技术栈为什么这么复杂？》&lt;/a>。想吐槽 Web 前端开发技术的可以看看这篇文章，能给你提供一些弹药。&lt;/p>
&lt;p>作者列举了引起前端生态如此混乱的多个槽点，喷的在点子上：&lt;/p>
&lt;p>1、缺少通用的包引用系统：ESM、CommonJS、AMD、UMD，一堆标准。&lt;/p>
&lt;p>2、转换层太多：TS 转 JS、ES6 转 ES5、原始转压缩、混淆，一系列步骤下来给定位问题带来困扰。&lt;/p>
&lt;p>3、运行环境多：除了要在浏览器端执行，还要考虑判断是否执行在 Node 端，一个库既要、又要、还要。&lt;/p>
&lt;p>4、过于依赖文件结构：前端工程往往会有一些对文件路径以及命名的潜规则，比如各种配置文件、路由信息等等。&lt;/p>
&lt;h3 id="intel-80386-cpu-解析">Intel 80386 CPU 解析
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-05-38.png"
width="690"
height="730"
loading="lazy"
class="gallery-image"
data-flex-grow="94"
data-flex-basis="226px"
>&lt;/p>
&lt;p>与很多人想象的不同（多数人认为 8088、8086 是 Intel 最具里程碑意义的处理器），实际上 1985 年发布的 Intel 386 处理器才是 x86 家族中最关键的一款处理器。&lt;/p>
&lt;p>386 在几个方面是现代计算的关键转折点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>386 将 x86 架构移至 32 位，定义了 20 世纪剩余时间的主要计算架构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>386 也确立了 x86 对整个计算机行业的趋势引领。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>386 结束了 IBM 对 PC 市场的垄断，使康柏这类兼容机成为架构领先者。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在这篇&lt;a class="link" href="http://www.righto.com/2023/10/intel-386-die-versions.html" target="_blank" rel="noopener"
>《Intel 386 硅芯片研究》&lt;/a>中，作者通过放大了的英特尔 386 芯片照片，探索了这款经典处理器所创下的历史。&lt;/p>
&lt;h3 id="老程序员的外设推荐">老程序员的外设推荐
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-05-58.png"
width="690"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://fabiensanglard.net/40/index.html" target="_blank" rel="noopener"
>一位 40 年编程经验的程序员编程设备推荐&lt;/a>。&lt;/p>
&lt;p>作者“年仅” 46岁，却已有 40 年的编程经验，据称其中至少有一半的时间是职业编程。&lt;/p>
&lt;p>作者随着技术的进步（和身体的老化）在不断升级自己的用着趁手的工具，在文中积极推荐了一波。 ​​​&lt;/p>
&lt;h3 id="wasm-图形操作入门">WASM 图形操作入门
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-06-15.png"
width="690"
height="611"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="271px"
>&lt;/p>
&lt;p>介绍过很多次 WASM 的技术，这次介绍一个比较容易上手的实验。&lt;/p>
&lt;p>&lt;a class="link" href="https://web.dev/articles/drawing-to-canvas-in-emscripten?hl=zh-cn" target="_blank" rel="noopener"
>使用 WASM 在网页上渲染 2D 图形&lt;/a>。也就是说在网页上绘图，不过不是通过 Javascript 操作 canvas 画布，而是使用 WASM 技术编译 C++ 代码，基于 OpenGL 或者 SDL 接口进行绘制。&lt;/p>
&lt;p>这样做的好处 1 是性能强一些，2 是可以轻松移植之前基于 SDL 编写的游戏或者图形程序到网页里。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="一个频谱动画库">一个频谱动画库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-06-32.png"
width="690"
height="216"
loading="lazy"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="766px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://audiomotion.dev/" target="_blank" rel="noopener"
>audioMotion-analyzer&lt;/a>。一个 Javascript 写的实时音频频谱分析与动画库。&lt;/p>
&lt;p>用于在网页制作音频频谱实时动画，性能优秀且自带多种风格样式。 ​​​&lt;/p>
&lt;h3 id="全能仪表盘">全能仪表盘
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-06-43.png"
width="690"
height="426"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://gethomepage.dev/v0.7.3/%e7%bd%91%e9%a1%b5%e9%93%be%e6%8e%a5" target="_blank" rel="noopener"
>Homepage&lt;/a>，不仅是一个现代的应用程序仪表盘，还是一个充分静态、快速、安全且高度可定制的工具，能够将超过100个服务集成到一个地方，界面支持多国语言。&lt;/p>
&lt;p>主要特性如下：&lt;/p>
&lt;p>全静态：不需要复杂的服务器设置或后端处理，具备出色的性能和可靠性。&lt;/p>
&lt;p>超过100个服务集成：支持超过100个不同的服务集成，包括各种云服务、开源工具和社交媒体平台。无论使用哪些服务，都可以在一个地方轻松地查看它们的状态和数据。&lt;/p>
&lt;h3 id="在一个地方管理你的全部文件">在一个地方管理你的全部文件
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-054-%E6%9C%9F/2023-10-17-10-06-55.png"
width="690"
height="422"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="392px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/spacedriveapp/spacedrive" target="_blank" rel="noopener"
>Spacedrive&lt;/a>&lt;/p>
&lt;p>Spacedrive 是一个基于虚拟分布式文件系统的文件资源管理器。&lt;/p>
&lt;p>可以在一个地方组织跨多个设备的文件。包括云服务和离线硬盘，Spacedrive 可以将这些文件资源合并为一个个人的分布式云，既安全又易于使用。&lt;/p>
&lt;p>注意：项目目前还在开发中，功能特性还未稳定。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="docker-的意义">Docker 的意义
&lt;/h3>&lt;blockquote>
&lt;p>一个服务运行起来依赖许多假设：当前目录，安装了了哪些软件，系统上存在了哪些文件。这些都很难用语言来描述清楚，而且假设通常也会被打破。这个时候如果有了 docker 的话，所有的假设都被物化下来，对于开发和运维都是好事。
来自 &lt;a class="link" href="https://weibo.com/2048838462/N7bBxpf2B" target="_blank" rel="noopener"
>@dirtysalt&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="鱼有灵魂吗">鱼有灵魂吗
&lt;/h3>&lt;blockquote>
&lt;p>鱼类要多久才能进化到知道渔线上吊着一块肉其实是一个陷阱？
可能已经进化出来了。
答主【瞻云】解释，作为具有高级中枢的鱼类，是能够在长期被钓的过程中，产生复杂条件反射，从而对食物、鱼钩、鱼线、人影、鱼竿等陷阱特征，产生高度的警觉。
他认为鱼类是可能具有浅层意识的，是能意识到危险和陷阱的。但可能会类似于我们半梦半醒状态。
当然，如果我们依据保守的观点，还是认为，具有大脑皮层才能产生意识。
那么，如果提供合适的进化条件，它们可能还需要1~2亿年的时间，才能知道这是个陷阱～
来自 &lt;a class="link" href="https://weibo.com/1904769205/NnZa39XD0" target="_blank" rel="noopener"
>@知乎&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>人类可能也需要一到两亿年才能悟道更上一层吧，如果有机会的话。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 053 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-36-14.png" alt="Featured image of post 机器文摘 第 053 期" />&lt;h1 id="机器文摘-第-053-期">机器文摘 第 053 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="手机和电脑的时间来源">手机和电脑的时间来源
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-35-56.png"
width="480"
height="270"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>现在使用手机和电脑基本默认开启了网络校时功能，只要能联网，就可以保证电脑的时钟是准的，误差很小。&lt;/p>
&lt;p>用于校时的网络服务是由网络校时服务器基于 NTP 提供的。&lt;/p>
&lt;p>那么 NTP 服务器的时间是跟谁对的？&lt;/p>
&lt;p>答案是 GPS（全球卫星定位系统）卫星 。&lt;/p>
&lt;p>那 GPS 跟谁对的时？&lt;/p>
&lt;p>&lt;a class="link" href="https://dotat.at/@/2023-05-26-whence-time.html" target="_blank" rel="noopener"
>你手机和电脑上的时间是从哪儿来的？&lt;/a>。这篇文章解答了这一系列问题并追溯到了最初的时间定义。&lt;/p>
&lt;h3 id="构建用于在线协作的数据结构">构建用于在线协作的数据结构
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-36-14.png"
width="690"
height="612"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/p>
&lt;p>CRDT 这个概念可能听过的人不多，但是如果思考过怎样进行网络协同工作的朋友，可能多少都接近过这个概念。&lt;/p>
&lt;p>CRDT 全称为：&lt;code>Conflict-free Replicated Data Type&lt;/code> 无冲突复制数据类型。&lt;/p>
&lt;p>目标是建立一种能够同时存储在不同计算设备上的数据结构，这种数据结构可以使得每个设备都能够自由地编辑状态，而且通过一定的技术约定，使得数据载体可以协商到一个大家都不冲突的状态。&lt;/p>
&lt;p>说的直白一点，就是大家能够同时在线编辑一份数据，但是不会产生编辑冲突，这是非常美好的一个愿望。&lt;/p>
&lt;p>&lt;a class="link" href="https://jakelazaroff.com/words/an-interactive-intro-to-crdts/" target="_blank" rel="noopener"
>CRDT(无冲突复制数据类型)入门&lt;/a>。这篇文章介绍了如何初步实现这种数据结构，并给出了交互式代码，如果你有关于制定协作程序数据结构相关需求，可以考虑深入阅读一下。&lt;/p>
&lt;h3 id="再介绍一下-unicode-技术">再介绍一下 Unicode 技术
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-37-35.png"
width="567"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="403px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tonsky.me/blog/unicode/" target="_blank" rel="noopener"
>每个开发人员都应该掌握的 Unicode 知识&lt;/a>。&lt;/p>
&lt;p>2023 年了，还没搞清楚 Unicode 的人，再给一次机会。&lt;/p>
&lt;p>比较喜欢这种讲技术先从历史讲起的方式。&lt;/p>
&lt;p>因为很多技术点的出现都有它的历史背景，了解了其背景，一些看似莫名其妙的规范要求也就合理了。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="练习-css-布局的小游戏">练习 CSS 布局的小游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-37-57.png"
width="690"
height="532"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://flexboxfroggy.com/" target="_blank" rel="noopener"
>flexboxfroggy&lt;/a>。&lt;/p>
&lt;p>一个通过网页交互游戏学习 CSS 布局的网站。&lt;/p>
&lt;p>通过编写合适的 CSS 代码让青蛙过河，以达到学习 flex 布局的目的。 ​​​&lt;/p>
&lt;h3 id="页面元素可视化选择">页面元素可视化选择
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-38-15.png"
width="690"
height="499"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://simonwep.github.io/selection/" target="_blank" rel="noopener"
>viselect&lt;/a>。&lt;/p>
&lt;p>一个页面元素可视化选择库。&lt;/p>
&lt;p>如果你需要用户能够以分组、个别选择，甚至多个分组的方式选择页面中的元素，这个库可以轻松提供这种功能。&lt;/p>
&lt;p>可以以原生方式使用，也可以与 React 或 Vue.js 集成一起使用。&lt;/p>
&lt;h3 id="html-反向转为-markdown">HTML 反向转为 Markdown
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-38-29.png"
width="690"
height="277"
loading="lazy"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="597px"
>&lt;/p>
&lt;p>&lt;a class="link" href="github.com/mixmark-io/turndown" >trundown&lt;/a>。&lt;/p>
&lt;p>找到一个好工具，HTML 代码转换为 Markdown 代码。&lt;/p>
&lt;p>近期我需要迁移一部分博客文章，导出的备份为 HTML 格式，找到了这个 JS 编写的工具库。可以转换 HTML 页面到 Markdown 格式。&lt;/p>
&lt;p>复杂一点的页面也能比较完美的转换，效果不错。 ​​​&lt;/p>
&lt;h3 id="数学公式图形化交互">数学公式图形化交互
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-38-47.png"
width="690"
height="315"
loading="lazy"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="525px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.math3d.org/derivatives" target="_blank" rel="noopener"
>math3d&lt;/a>。&lt;/p>
&lt;p>一个在线展示数学公式图形的工具，与以往的 2d 绘图工具不同，
math3d.org 是一个可以实时交互的三维场景，通过鼠标实时改变查看角度。&lt;/p>
&lt;p>还可以通过设置时间 &lt;code>T&lt;/code> 变量进行动画模拟。 ​​​&lt;/p>
&lt;h3 id="杀时间的小游戏">杀时间的小游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-053-%E6%9C%9F/2023-10-10-13-39-20.png"
width="630"
height="500"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="302px"
>
&lt;a class="link" href="https://torcado.itch.io/windowkill" target="_blank" rel="noopener"
>windowkill&lt;/a>。&lt;/p>
&lt;p>一个 72 小时内做出来的杀时间小游戏。&lt;/p>
&lt;p>玩家通过不断发射子弹以击打怪物，子弹打在屏幕边缘可以使得游戏窗口越来越大。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;p>从物理学的角度观察，生命的本质就是抵抗无序、逆熵发展。&lt;/p>
&lt;p>有了这个视角，就理解了为什么人们最喜欢的一项运动&amp;mdash;&amp;mdash;抬杠。&lt;/p>
&lt;p>因为那是人们所遵循的、生命赋予的最基本源动力。&lt;/p>
&lt;p>不信你观察抬杠的人或者话题，本身都毫无意义，但是人们非要争论不休。&lt;/p>
&lt;blockquote>
&lt;p>你说一个人牛逼，他说，哪里哪里，自己差的很远。
你说一个人差的很远，他说，你算什么东西？老子天下第一。&lt;/p>
&lt;/blockquote>
&lt;p>总之就是要跟你逆着来。才舒服。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 052 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/</link><pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-03-59.png" alt="Featured image of post 机器文摘 第 052 期" />&lt;h1 id="机器文摘-第-052-期">机器文摘 第 052 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="手机端的文字编辑交互">手机端的文字编辑交互
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-02-43.png"
width="279"
height="596"
loading="lazy"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="112px"
>&lt;/p>
&lt;p>在手机等移动端延续桌面电脑的文字编辑习惯很可能是一条走歪的路。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://jenson.org/text/" target="_blank" rel="noopener"
>看不见的问题&lt;/a>由谷歌工程师编写，作者专注于研究在移动终端上进行文字编辑的课题。&lt;/p>
&lt;p>简单来说，无论是安卓还是 iOS，都有一个共同的问题，那就是延续了桌面电脑的文本编辑约定，但是却又没有鼠标和菜单栏。&lt;/p>
&lt;p>作者在本文中列举了当前移动编辑的各种让人疑惑的交互设计，分析相当到位透彻。在文末作者给出了一个可能的改进方案，但是对于在移动端的改进推行却比较悲观。&lt;/p>
&lt;h3 id="怎样网页里实现拖拽操作">怎样网页里实现拖拽操作
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-03-05.png"
width="543"
height="416"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.redblobgames.com/making-of/draggable/" target="_blank" rel="noopener"
>网页元素的拖拽实现&lt;/a>。&lt;/p>
&lt;p>这篇文章深入讲解了实现网页元素拖动交互的底层原理和标准模式。&lt;/p>
&lt;p>作者从头记录了他所编写的代码从简陋模型到支持各种异常事件的完美模型进化的全过程。&lt;/p>
&lt;p>文章的最后，作者甚至还封装了一个 ​​​VUE 组件来总结成果，很有实战参考价值。&lt;/p>
&lt;h3 id="不同的数据库怎样执行查询语言">不同的数据库怎样执行查询语言
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-03-15.png"
width="690"
height="374"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://notes.eatonphil.com/2023-09-21-how-do-databases-execute-expressions.html" target="_blank" rel="noopener"
>数据库是怎样执行查询语句的&lt;/a>。&lt;/p>
&lt;p>这篇文章的作者花时间研究了一些常见开源数据库的源码，并分析判断了这些数据库在执行语句时所采用的不同方法。&lt;/p>
&lt;p>一般来说，数据库对于查询语句的执行，与我们所使用的各种编程语言在底层机制上并无太大差别。&lt;/p>
&lt;p>比较常见的方法也是包括：抽象语法树遍历（解释执行）、构建中间层虚拟机（基于堆栈或寄存器）、编译为本地指令（JIT）等。&lt;/p>
&lt;h3 id="游戏中的物理模拟是怎样实现的">游戏中的物理模拟是怎样实现的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-03-40.png"
width="573"
height="249"
loading="lazy"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="552px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.ibm.com/tutorials/wa-build2dphysicsengine/" target="_blank" rel="noopener"
>给你的 Js 游戏写一个物理引擎&lt;/a>。&lt;/p>
&lt;p>这篇教程，介绍了怎样给 Js 编写的网页游戏提供物理模拟相关的支持。&lt;/p>
&lt;p>包括游戏场景和角色重力加速度模拟、碰撞模拟等等。&lt;/p>
&lt;p>教程虽然发表于十多年前，但是真正的技术历久弥新，其原理并未过时，基本框架和核心思想是不变的。&lt;/p>
&lt;p>文章深入浅出，逻辑清晰，适合一边阅读一遍动手实践。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="又一个新写的桌面操作系统">又一个新写的桌面操作系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-03-59.png"
width="690"
height="391"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://gitlab.com/nakst/essence" target="_blank" rel="noopener"
>nakst&lt;/a>，一个从零打造的桌面操作系统。目前仅支持 SVGA 显卡接口，有自己的文件系统，同时支持对 FAT、NTFS 等文件系统的只读。实现了基本的文件管理、进程管理等功能，移植有 GCC 编译器。&lt;/p>
&lt;h3 id="现代汇编语言教程">现代汇编语言教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-06-00.png"
width="566"
height="661"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="205px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.egr.unlv.edu/~ed/assembly64.pdf" target="_blank" rel="noopener"
>assembly64&lt;/a> 在现代处理器和操作系统上学习 x86-64 汇编语言。&lt;/p>
&lt;h3 id="给命令行程序增加漂亮的-ui">给命令行程序增加漂亮的 “UI”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-06-15.png"
width="662"
height="575"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/natemoo-re/clack" target="_blank" rel="noopener"
>clack&lt;/a>&lt;/p>
&lt;p>clack 是一个命令行交互库，可以让你方便地构建带有美观、高级交互的命令行程序。 ​​​&lt;/p>
&lt;h3 id="基于-wasm-技术的游戏编辑器">基于 WASM 技术的游戏编辑器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-052-%E6%9C%9F/2023-10-03-10-06-28.png"
width="690"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://raverie-us.github.io/raverie-engine/" target="_blank" rel="noopener"
>raverie-engine&lt;/a>&lt;/p>
&lt;p>一个在网页中运行的游戏引擎，使用 WASM 技术实现了纯页面加载的全功能游戏编辑器。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="先问是不是再问为什么">先问是不是，再问为什么
&lt;/h3>&lt;p>人的大脑特别喜欢「逻辑自洽」的感觉，如果我们太快的进入逻辑，进入因果关系的分析当中，会很容易「忽略那些与逻辑不符的事实」，而这对于做出正确决策来说是致命的。&lt;/p>
&lt;p>&amp;mdash;-来自&lt;a class="link" href="https://weibo.com/3978383590/Nl53Y6nrF" target="_blank" rel="noopener"
>@Murph丶璇&lt;/a>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 051 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/</link><pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-36-20.png" alt="Featured image of post 机器文摘 第 051 期" />&lt;h1 id="机器文摘-第-051-期">机器文摘 第 051 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="基于-github-pages-服务搭建个人博客">基于 Github Pages 服务搭建个人博客
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-34-26.png"
width="1600"
height="672"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="571px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://sbabybird.github.io/p/%E5%9F%BA%E4%BA%8E-github-pages-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener"
>基于 Github Pages 服务搭建个人博客 &lt;/a>
这是我自己写的一篇文章，发布在&lt;a class="link" href="https://sbabybird.github.io" target="_blank" rel="noopener"
>我的博客&lt;/a>。&lt;/p>
&lt;p>搭建独立博客网站的方法多种多样，常见的方法包括租用服务器自行架设，或者选择托管服务商提供的博客发布服务。&lt;/p>
&lt;p>但是上述两种方式都会产生一定的费用，对于非盈利网站而言，不太友好。&lt;/p>
&lt;p>经过多年的实践，现在已有越来越多的人选择了使用免费且易用的 GitHub Pages 服务来搭建个人博客。&lt;/p>
&lt;p>然而，现有的使用教程大多侧重于操作步骤，对于新手或非专业人士而言，难以真正理解其中原理。&lt;/p>
&lt;p>他们可能看到别人的博客既漂亮又实用，却在自己尝试搭建时屡屡遇到挫折，逐渐失去信心。&lt;/p>
&lt;p>这无疑会打击那些希望通过博客持续创作文字、并且希望能够免费建立个性化站点的人的积极性。&lt;/p>
&lt;p>本文将介绍如何使用 GitHub Pages 服务搭建免费的个人博客网站，及其背后的实现原理，以帮助初学者顺利建立自己理想的博客站点。&lt;/p>
&lt;h3 id="人的大脑不是由爬行脑哺乳动物脑智人脑累加而成">人的大脑不是由爬行脑、哺乳动物脑、智人脑累加而成
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-35-36.png"
width="690"
height="588"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;p>心理学界有一个关于人类大脑流传很广的理论：人的大脑主要由三层不同能力的大脑构成，位于最核心的“爬行动物脑”、随着演化逐渐增加的“低级哺乳动物脑”，以及带来更多灵活性和语言能力的“高级脑”。&lt;/p>
&lt;p>这种理论给人的感觉就好像人的大脑是像洋葱那样，由一个“旧”的大脑结构逐渐添加“新”大脑形成。&lt;/p>
&lt;p>而且换句话说，青蛙和鱼仍然在我们身体里，我们只是有了更高级的东西把它们包裹了起来。&lt;/p>
&lt;p>然而以上理论只是心理学家所提出的一种错误观点，近年来随着生物科学的发展，越来越多的科学家开始指出这种错误。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://journals.sagepub.com/doi/10.1177/0963721420917687" target="_blank" rel="noopener"
>《你的大脑不是洋葱，你的脑子里并没有一个爬行动物》&lt;/a>是由神经科学家撰写，重点澄清了上述关于“三层大脑”的传言。&lt;/p>
&lt;p>文章指出：之所以这种理论流传甚广，是因为大家普遍对“进化论”的进化过程有所误解，大多数人认为进化过程是一种先低级再逐渐高级的线性过程。然而事实的进化是一种同步辐射进程。&lt;/p>
&lt;h3 id="使用-javascript-操作照片的-exif-信息">使用 Javascript 操作照片的 EXIF 信息
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-35-59.png"
width="690"
height="444"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://getaround.tech/exif-data-manipulation-javascript/" target="_blank" rel="noopener"
>使用 Javascript 操作照片的 EXIF 信息&lt;/a>
可交换图像文件格式（EXIF）是一种规范，用于指定图像和声音的格式。它通过元数据存储技术细节，所谓元数据即用来描述其他数据的数据，例如相机制造商和型号、图像拍摄日期和时间等信息。&lt;/p>
&lt;p>最初，EXIF仅用于JPEG和TIFF两种图像格式。然而，如今，其他文件格式如PNG、WEBP或HEIC也支持EXIF以用于元数据。&lt;/p>
&lt;p>本文将重点关注JPEG格式，探究其内部结构，然后展示如何在浏览器环境中通过JavaScript读取和更新相关的元数据。&lt;/p>
&lt;h3 id="css-的自定义缓动曲线">CSS 的自定义缓动曲线
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-36-20.png"
width="690"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="415px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.smashingmagazine.com/2023/09/path-css-easing-linear-function/" target="_blank" rel="noopener"
>使用 linear（） 函数实现惊人的 CSS 缓动动画&lt;/a>，随着新的 CSS linear() 缓动功能的出现，我们可以创建自然感觉的动画和过渡的可能性大大扩展。Jhey Tompkins 在本文中介绍了 CSS 缓动的当前状态，并演示了 linear() 函数令人期待的特性。 ​​​&lt;/p>
&lt;h3 id="通过放大-rom-芯片搞破解">通过放大 ROM 芯片搞破解
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-36-35.png"
width="690"
height="571"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="290px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/travisgoodspeed/gbrom-tutorial" target="_blank" rel="noopener"
>gbrom&lt;/a>，通过拍摄 ROM 芯片的显微照片，将里面固件的二进制代码还原了出来，硬破解的世界就是这么朴实无华。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="免费开发云服务大全">免费开发云服务大全
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-36-56.png"
width="690"
height="737"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="224px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://free-for.dev/#/" target="_blank" rel="noopener"
>free-for.dev&lt;/a>。这个网站筛选收录了大量面向开发者提供的在线服务。收录的标准非常严苛：必须真正免费（免费试用的不算），如果套餐有时间限制，则至少提供 1 年的免费时间。收录的服务涵盖：云基础设施、内容托管、设计资源、字体、在线 IDE 、产品监控等。&lt;/p>
&lt;h3 id="在线提示词工厂">在线提示词工厂
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-37-13.png"
width="690"
height="403"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://promptperfect.jinaai.cn/a/NEW" target="_blank" rel="noopener"
>promptperfect&lt;/a>，来自 JinaAI 的 PromptPerfect。能自动生成提示词。让用户可以逐步调试提示词，提供了各种参数。我试着让它帮我编写 AI 作画的提示语，感觉比我自己写的要靠谱一些。&lt;/p>
&lt;h3 id="更新的光线追踪教程">更新的光线追踪教程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-051-%E6%9C%9F/2023-09-26-13-37-26.png"
width="670"
height="553"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="290px"
>
&lt;a class="link" href="raytracing.github.io" >《花一个周末学会光线追踪》&lt;/a>，Ray Tracing in One Weekend，这本在线电子书出新版了。真正从零开始手把手教你通过光线追踪进行三维场景渲染。 ​​​事实上整个系列一共包括三部曲，继续阅读《光线追踪：下一周篇》，将添加纹理、体积（如雾）、矩形、实例、光源，并支持使用包围体积层次结构（BVH）来处理大量对象。最后，在《光线追踪：往后余生篇》中，将深入探讨创建一个非常严谨的光线追踪器所涉及的数学。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="专注是良药">专注是良药
&lt;/h3>&lt;p>不用过多考虑某些时间的投入是否值得，而陷入对时间流逝的焦虑。&lt;/p>
&lt;p>如果做一件事情能够使得一个人在一段时间内保持专注，就是非常值得做的事情。&lt;/p>
&lt;p>因为，“专注”本身就是收获成果的一部分。&lt;/p>
&lt;p>能够在快节奏的生活中，找到不容易被分散注意力、不被各种诱惑干扰、可以集中精力投入的事情，已属难得。&lt;/p>
&lt;p>“专注”做事看似简单，却是解决各种精神内耗的良药。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 050 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-31-40.png" alt="Featured image of post 机器文摘 第 050 期" />&lt;h1 id="机器文摘-第-050-期">机器文摘 第 050 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="十八世纪的光学电报网络">十八世纪的光学电报网络
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-31-08.png"
width="500"
height="517"
loading="lazy"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="232px"
>&lt;/p>
&lt;p>当年读《基督山伯爵》的时候，有一个让我震惊的科技。&lt;/p>
&lt;p>主人公有一项复仇计划是破坏敌人的金融资产。计划采取的手段是收买了一个传递实时信息的人让其传递错误信息。&lt;/p>
&lt;p>而具体传递信息的手段是，每隔一段距离设一座瞭望塔，每个塔上有一个人，向一个方向用望远镜观看，远方的上级瞭望塔会有人发射信号弹，一连串的信号弹代表一定的信息，然后这个人再原样发射一遍，让后方的瞭望塔看见。信息就这样一级一级传递下去。&lt;/p>
&lt;p>信息经过编码，可以表达股票行情等信息，类似后来的电报系统，但是这是在十八世纪。&lt;/p>
&lt;p>读过之后我就一直有疑问，不知道小说是否虚构了这种信息传递技术，直到前几天我发现了这篇文章：&lt;a class="link" href="https://www.lowtechmagazine.com/2007/12/email-in-the-18.html" target="_blank" rel="noopener"
>《十八世纪的光学电报网络》&lt;/a>。&lt;/p>
&lt;p>里面详细介绍了在两百多年前人类就已经发明了“光学电报”系统，并建立起了巨大的信息网络。信息传递速度达到了惊人的 1380千米/每小时。&lt;/p>
&lt;h3 id="c-语言发展简史">C 语言发展简史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-31-23.png"
width="690"
height="352"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;/p>
&lt;p>要说 C 语言是计算机历史上最重要的编程语言应该不会有人反对吧。&lt;/p>
&lt;p>作为大多数人编程入门的母语，C 语言具有语法简洁、高性能（贴近计算机底层）、使用灵活、适用范围广泛等特点。&lt;/p>
&lt;p>虽然诞生于上个世纪 70 年代，但即便是在 2023 年的今天，C 语言仍然排在各大编程排行榜的考前位置，仍然是信息科技的重要支撑力量。&lt;/p>
&lt;p>&lt;a class="link" href="http://cm.bell-labs.co/who/dmr/chist.html" target="_blank" rel="noopener"
>《C 语言简史》&lt;/a>，由丹尼斯·里奇（C 语言之父）撰写，是一篇难得的介绍 C 语言的诞生和发展的历史性文献。&lt;/p>
&lt;h3 id="vbvisual-basic发展简史">VB（Visual Basic）发展简史
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-31-40.png"
width="690"
height="518"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>前几天 HN 上有个从业近 30 年的老程序员发问：&lt;a class="link" href="https://news.ycombinator.com/item?id=37470318" target="_blank" rel="noopener"
>为什么 VB（Visual Basic）这么高效、好用的开发工具逐渐消失了？&lt;/a>。&lt;/p>
&lt;p>被顶的最高的网友放出了&lt;a class="link" href="https://retool.com/visual-basic/" target="_blank" rel="noopener"
>《Visual Basic 从诞生到消失》&lt;/a>这篇文章。&lt;/p>
&lt;p>在上世纪 80 年代末 90 年代初，Windows 操作系统刚刚崭露头角的时候，VB 已经在萌芽状态了。而且已经具有非常先进的组件化、可视化、低代码等超前思想。并且发明了“控件”、“消息触发”等概念。&lt;/p>
&lt;p>最初的版本与 BASIC 语言并无关系，只考虑了使用可视化开发并辅助简单的内嵌脚本，但是比尔·盖茨对 BASIC 十分热爱（毕竟那是微软起家的技术），亲自推动了组件化、可视化开发与 BASIC 语言结合，便诞生了 Visual Basic。&lt;/p>
&lt;p>得益于超前的可视化开发理念，VB 极大降低了当时开发应用程序的门槛，涌现出一大批开发者。包括当时那些不得不转型给个人电脑开发程序的大型机编程工程师。&lt;/p>
&lt;p>这一切在 VB 随着 Visual Studio 发布 6.0 的时候达到了顶峰。&lt;/p>
&lt;p>转折点出现在微软为了应对 Java 的威胁而推出 .Net 公共语言运行时的时候，VB 也被纳入到这套体系里，被成为 VB.Net ，扩充了复杂的语法和继承、多态等高级特性。&lt;/p>
&lt;p>对于那些真正喜欢 VB6 的人来说，这些都是唯恐避之不及的东西，更糟糕的是新的 VB.Net 无法兼容之前的代码，大量成果移植困难。&lt;/p>
&lt;p>之后更是随着网络信息科技的发展，Web 编程逐渐取代了 Windows 桌面编程，VB 这个伟大的技术，被淘汰也就是顺其自然的了。&lt;/p>
&lt;h3 id="一个在网页里模仿-excel-表格的故事">一个在网页里模仿 Excel 表格的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-32-14.png"
width="690"
height="201"
loading="lazy"
class="gallery-image"
data-flex-grow="343"
data-flex-basis="823px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://websheets.github.io/websheets/demo/" target="_blank" rel="noopener"
>一位前端工程师，讲述了他在 2016 年受雇于 Uber（优步）时的一些开发往事&lt;/a>。&lt;/p>
&lt;p>作为服务于数据工程师的内部研发团队，他所在的小组主要是给公司的数据分析人员提供内部工具，以便让他们能够更快地分析数据，更快的分析数据意味着更有可能在产品运营竞争里获胜。&lt;/p>
&lt;p>然而数据分析人员总是抱怨工具不满足要求，主要是操作界面，因为他们非常习惯“Excel”，每次提需求的时候总是说：“你就做得跟 Excel 一样就行”。&lt;/p>
&lt;p>作者最开始还试图跟用户解释要实现起来是多么困难，后来逐渐放弃了挣扎，并开始着手在网页里实现一个跟 Excel 一样的表格，而且他竟然实现了。&lt;/p>
&lt;p>故事的后来有些伤感，作者提供的工具并没有使得 “Uber” 在跟嘀嘀的竞争中胜出，相反地，“Uber”在中国的业务还被“嘀嘀”收购了。&lt;/p>
&lt;p>被用于数据分析的工具也被抛弃不再使用。&lt;/p>
&lt;p>后来作者选择了将那个像 Excel 的表格代码放在了 &lt;a class="link" href="github.com/WebSheets/websheets" >Github 进行开源，地址在这里&lt;/a>。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="通用-web-应用服务器">通用 Web 应用服务器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-32-34.png"
width="690"
height="356"
loading="lazy"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://unit.nginx.org/" target="_blank" rel="noopener"
>NGINX Unit&lt;/a>，通用 Web 应用服务器。是一个轻量且多功能的应用运行时，作为一个单一的开源服务器，它提供了您的 Web 应用程序所需的基本组件：运行应用程序代码（包括 WebAssembly）、提供静态资源、处理 TLS 和请求路由。&lt;/p>
&lt;p>Unit 是由 NGINX 团队成员从零开始创建的，以在运行时高度高效且完全可配置。最新版本是 1.31.0，于 2023 年 8 月 31 日发布。&lt;/p>
&lt;h3 id="绿色安卓-app-合集">绿色安卓 App 合集
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-32-52.png"
width="690"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.simplemobiletools.com/" target="_blank" rel="noopener"
>绿色安卓app合集&lt;/a>。&lt;/p>
&lt;p>这个网站收集了一大批良心 app，全部没有广告且不要求隐私权限。&lt;/p>
&lt;p>几乎涵盖了日常使用的所有类型，包括艺术绘画、音乐播放器、笔记、文件管理、录音、拍照等。 ​​​&lt;/p>
&lt;h3 id="nuejs">nuejs
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-33-10.png"
width="690"
height="455"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://nuejs.org/" target="_blank" rel="noopener"
>nuejs&lt;/a>，越来越多的人对前端开发的混乱感到不满了。不同的是有人选择抱怨，有人撸起袖子开干。nuejs 的作者觉得现在使用 React、Vue 等框架再加上若干服务端渲染框架，使得前端开发生态变得越来越复杂和掌握。于是自己动手开发了一个简单的轻量化框架，终极目标是构建一个简洁、高效的前端开发生态。&lt;/p>
&lt;h3 id="1024-字节的网页可显示-3d-地球">1024 字节的网页，可显示 3D 地球
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-33-21.png"
width="447"
height="255"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://aem1k.com/world/" target="_blank" rel="noopener"
>1024 字节的 JavaScript，在网页中显示动画 3D 地球模型&lt;/a>，页面动画显示的就是其源代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">script&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;p=&amp;#34;&amp;lt;&amp;#34;+&amp;#34;pre&amp;gt;&amp;#34;/* ,.oq#+ ,._, */;for(y in n=&amp;#34;zw24l6k\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">4e3t4jnt4qj24xh2 x/* =&amp;lt;,m#F^ A W###q. */42kty24wrt413n243n\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">9h243pdxt41csb yz/* #K q##H######Am */43iyb6k43pk7243nm\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">r24&amp;#34;.split(4)){/* dP cpq#q##########b, */for(a in t=pars\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">eInt(n[y],36)+/* p##@###YG=[#######y */(e=x=r=[]))for\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">(r=!r,i=0;t[a/* d#qg `*PWo##q#######D */]&amp;gt;i;i+=.05)wi\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">th(Math)x-= /* aem1k.com Q###KWR#### W[ */.05,0\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">x;)p+=&amp;#34; *#&amp;#34;/* b. OQ####x#K */[e[x++]+e[x++\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">]]||(S=(&amp;#34;eval&amp;#34;/* l `X#####D , */+&amp;#34;(z=\&amp;#39;&amp;#34;+z.spl\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">it(B = &amp;#34;\\\\&amp;#34;)./* G####B&amp;#34; # */join(B+B).split\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">(Q=&amp;#34;\&amp;#39;&amp;#34;).join(B+Q/* VQBP` */)+Q+&amp;#34;)//m1k&amp;#34;)[x/2\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">+61*y-1]).fontcolor/* TP */(/\\w/.test(S)&amp;amp;&amp;amp;&amp;#34;#\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">03B&amp;#34;);document.body.innerHTML=p+=B+&amp;#34;\\n&amp;#34;}setTimeout(z)&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="全球-ip-地址地理位置数据库">全球 IP 地址地理位置数据库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-050-%E6%9C%9F/2023-09-19-13-33-35.png"
width="690"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://ipapi.is/geolocation.html" target="_blank" rel="noopener"
>全球 IP 地址 地理位置数据库&lt;/a>。含 IPV4 和 IPV6。 ​​&lt;a class="link" href="https://ipapi.is/geolocation.html" target="_blank" rel="noopener"
>​这篇文章里还介绍了构建 IP 地址地理数据库的实现原理&lt;/a>和一套具有指导意义的实现方法。基本原理是：“互联网中的每个 IP 地址都由组织拥有或管理。可以向互联网注册机构查询WHOIS信息。”&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="为什么-facebook-的-pytorch-占有率赢了-google-的-tensorflow">为什么 Facebook 的 PyTorch 占有率赢了 Google 的 Tensorflow
&lt;/h3>&lt;p>Pytorch 已经完全击败了 Tensorflow，成为 AI 开发框架的事实标准。Pytorch 一开始就专注于学术界，方向是把最牛的人吸引过来。而 Tensorflow 则倾向于软件工程炫技，做各种简单但是酷炫的功能。&lt;/p>
&lt;p>最终专业化的 torch 击败了 tensorflow 。 我觉得​​​还有一个原因就是 Google 特别容易弃坑，Tensorflow 中间也切换过前后不兼容的 API。&lt;/p>
&lt;h3 id="越来越多的科技产品让人更好地欺骗自己">越来越多的科技产品让人更好地欺骗自己
&lt;/h3>&lt;p>比如美颜相机、电影特效、游戏等，研发它们的主要目的就是让人们更好的实现自我欺骗和催眠。&lt;/p>
&lt;h3 id="东方文明为什么警惕科技我个人不完全同意">东方文明为什么警惕科技（我个人不完全同意）
&lt;/h3>&lt;p>中国古代对于科技非常警惕和打压的原因，也许是古人早就意识到科技（或技术）力量很容易对人类造成强烈反噬。&lt;/p>
&lt;p>观点来自 &lt;a class="link" href="https://www.bilibili.com/video/BV1pu4y1r7KW/" target="_blank" rel="noopener"
>@​​​安东尼2001：量子自旋理论背后，是人类历史的轮回&lt;/a>。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 049 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/</link><pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/</guid><description>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-34-22.png" alt="Featured image of post 机器文摘 第 049 期" />&lt;h1 id="机器文摘-第-049-期">机器文摘 第 049 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="在-linux-环境里执行-windows-应用程序">在 Linux 环境里执行 Windows 应用程序
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-33-44.png"
width="512"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>最近遇到一个难以启齿的需求，服务器是 Linux 环境，但是某项服务功能却需要执行一个 Windows exe 文件。&lt;/p>
&lt;p>不得已才想到要求助 Wine 这个经典中间层，据说可以使的 Linux 兼容大部分的 Win32 程序。&lt;/p>
&lt;p>但是又不想污染服务器的其他环境，于是选择在容器中运行。&lt;/p>
&lt;p>在网上找到了这篇&lt;a class="link" href="https://leimao.github.io/blog/Docker-Wine/" target="_blank" rel="noopener"
>《利用 Docker 容器和 Wine 在 Linux里运行 Windows 程序》&lt;/a>，按照文中介绍的步骤成功实现了需求。&lt;/p>
&lt;p>基本步骤：
1、根据文章提供的 Dockfile 构建镜像；
2、运行镜像并注意配置运行容器的环境变量；
3、执行所需的 exe 程序。&lt;/p>
&lt;h3 id="windows-系统是怎样进行引导的">Windows 系统是怎样进行引导的
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-34-06.png"
width="690"
height="976"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/p>
&lt;p>前不久，我在给笔记本更换大容量固态硬盘的时候，由于不愿重做系统，使用了硬盘克隆功能，将原盘整体信息直接克隆到新硬盘。&lt;/p>
&lt;p>结果克隆成功并替换安装硬盘之后，却没能正常引导进入 Windows，而是进入了一个类似 PE 系统的界面（猜测是原盘中厂家自制的），并告知我由于检测到硬件更换，拒绝引导，并建议我选择恢复系统。&lt;/p>
&lt;p>我猜测之前的隐藏分区可能有笔记本厂家做的一些特定引导程序，才导致这样的情况。&lt;/p>
&lt;p>我对系统引导的理解还停留在 MBR 分区表大面积应用的阶段。于是尝试删除了隐藏分区，并手动将系统盘分区设置为了 “激活”分区（事实上这时候已经错了，因为 GPT 分区表方式下无法采用这种引导方式了）。&lt;/p>
&lt;p>结果系统干脆直接无法引导。出现这种情况，我之前的知识储备显然不够用了。&lt;/p>
&lt;p>经过一番折腾和搜索，我才得知现在 Windows 8 及以上版本操作系统的电脑所采用的方式是 GPT 分区表 + UEFI 引导。&lt;/p>
&lt;p>也就是说硬盘上需要单独开辟一个分区存储负责进行操作系统引导的工作。这个分区平时对于操作系统的资源管理器不可见（但磁盘管理中可以看到），由主板上的 UEFI 程序（这个程序可以理解为 BIOS 的升级版）进行访问和管理。&lt;/p>
&lt;p>了解这个方式之后，就简单了，重新使用工具修改 GPT 分区并制作专用引导分区即可。&lt;/p>
&lt;p>最后，为了弄清这跟之前的 MBR 引导方式有什么区别，我找到了一位运维工程师总结得较到位的文章&lt;a class="link" href="https://zhuanlan.zhihu.com/p/355526135" target="_blank" rel="noopener"
>《Windows系统开机引导顺序简述及运维小结》&lt;/a>。&lt;/p>
&lt;h3 id="500-行代码写一个-c-编译器">500 行代码写一个 C 编译器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-34-22.png"
width="690"
height="690"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://vgel.me/posts/c500/" target="_blank" rel="noopener"
>500 行 Python 代码写一个 C 编译器&lt;/a>。&lt;/p>
&lt;p>作者立下这个 flag 之后才发现任务有多难。&lt;/p>
&lt;p>主要是代码行数太少了，如果使用传统手段实现，可能这点儿代码量还不够写个语法分析器的。&lt;/p>
&lt;p>于是作者主动放弃了 AST （抽象语法树）的构建，采用 Token 提取和指令生成“一遍过”的方式，实现了一个相当“简洁”的 C 编译器。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="假装弹钢琴">假装弹钢琴
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-34-51.png"
width="690"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://touchpianist.com/" target="_blank" rel="noopener"
>touchpianist&lt;/a>，在线弹钢琴的网站（也提供手机 App 版），可以让你假装钢琴大师，只需要按键盘上的任意键，旋律就会自动演奏，不过你要控制敲击键盘的速度，以匹配原曲的节奏。我弹了一下，默认曲目是贝多芬的《月光奏鸣曲》，差点儿被自己陶醉了。 ​​​&lt;/p>
&lt;h3 id="bun-v10">Bun V1.0
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-35-09.png"
width="690"
height="419"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://bun.sh/blog/bun-v1.0" target="_blank" rel="noopener"
>bun-v1.0&lt;/a>，拳打 node ， 脚踢 deno 的 JavaScript 运营环境 bun 推出了 1.0 版本。主打一个“All in one”，号称可以一次性取代一揽子工具：node、npx、npm、webpack、tsc、babel、jest。一个工具包揽了运行、打包、包管理、转译、测试等所有事情，且速度是 nodejs 的 3 倍。&lt;/p>
&lt;p>对于这种吹的比较厉害的技术，保持关注，谨慎使用吧。&lt;/p>
&lt;h3 id="开源基于-llm-知识库平台">开源基于 LLM 知识库平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-35-24.png"
width="690"
height="334"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="495px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/labring/FastGPT" target="_blank" rel="noopener"
>FastGPT&lt;/a> - 基于 LLM 大模型的 AI 知识库问答系统。提供开箱即用的数据处理、模型调用等能力。同时可以通过 Flow 可视化进行工作流编排，从而实现复杂的问答场景。项目在 Github 开源，采用技术栈: NextJs + TS + ChakraUI + Mongo + Postgres（Vector 插件）。支持 GPT、Claude、Spark、ChatGLM 等多种 LLM 模型。&lt;/p>
&lt;h3 id="开源基于-llm-数据可视化平台">开源基于 LLM 数据可视化平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-049-%E6%9C%9F/2023-09-12-13-35-35.png"
width="690"
height="292"
loading="lazy"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="567px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/microsoft/lida" target="_blank" rel="noopener"
>lida&lt;/a>，微软出品的数据可视化工具库，特点是基于 LLM 对话模型进行生成，其生成的可视化代码支持多种可视化后端的语法，包括 matplotlib、seaborn、d3等。 ​​​&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="编程是一种体育锻炼">编程是一种体育锻炼
&lt;/h3>&lt;p>编程除了是一种可以以之谋生的专业技能，对于那些真喜欢编程的人来说，它还是一个心理疗愈工具。&lt;/p>
&lt;p>编程能使人专注，进入“心流”状态比较容易，也容易让人的心态平和。&lt;/p>
&lt;p>编程与体育锻炼一样，都是可以让人受益终生的活动。&lt;/p>
&lt;p>&amp;mdash;-来自&lt;a class="link" href="https://weibo.com/1461522430/NiEh1BHMt" target="_blank" rel="noopener"
>@软件教书匠金旭亮&lt;/a>。&lt;/p>
&lt;h3 id="造成电子阳痿的一种因素">造成电子阳痿的一种因素
&lt;/h3>&lt;p>一个不容忽视的因素是现在游戏的加载速度，尤其是 PC 游戏。&lt;/p>
&lt;p>我们被碎片化信息惯得一秒钟都不想等待。&lt;/p>
&lt;p>每当想玩会儿 CS 或者地平线之类得游戏，光是等待游戏启动、地图加载等就足以让人放弃想玩的念头。&lt;/p>
&lt;p>更别提有些游戏还有一些跳都无法跳过得开场引导视频。&lt;/p>
&lt;p>所以我现在就算是玩也是偶尔打开模拟器玩一玩老游戏，带有状态存储，随时加载存档。&lt;/p>
&lt;p>据说有一部分游戏主机（比如新一代 XBox）有类似笔记本电脑的睡眠功能，开机就玩，随时进入上次未完成的任务。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 048 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-048-期">机器文摘 第 048 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="关于-python-语言的一些统计数字">关于 Python 语言的一些统计数字
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-20-05.png"
width="690"
height="307"
loading="lazy"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="539px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://py-code.org/stats" target="_blank" rel="noopener"
>关于开源 Python 仓库的一些有趣统计&lt;/a>，有人克隆了 PyPI 网站里所有 Python 包对应的 Github 仓库，并对这些仓库里的全部文件进行了分析和统计。&lt;/p>
&lt;p>1、排名前三的语法特性分别是：列表推导、fstring字符串格式化、注解；&lt;/p>
&lt;p>2、代码中大约包含有超过 2 万 5 千个密钥明文，泄露最多的是访问 Google API、OpenAI API和腾讯云 Secret ID；&lt;/p>
&lt;p>3、截止到 2023 年 8 月，所有源码加起来已超过 60TB ，文件数量超过 10 亿。&lt;/p>
&lt;h3 id="wasm-技术让数据库执行-ai-模型">Wasm 技术让数据库执行 AI 模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-20-30.png"
width="618"
height="492"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://dylibso.com/blog/pg-extism/" target="_blank" rel="noopener"
>使用 Extism 将 WebAssembly 引入 PostgreSQL&lt;/a>。&lt;/p>
&lt;p>这篇文章的作者介绍了一种方法，可以使用 Wasm 技术通过扩展插件的方式给 PostgreSQL 数据库增加 UDF （用户自定义函数），从而实现调用 AI 模型的能力。&lt;/p>
&lt;h3 id="bitlocker-硬件加密能破解吗">BitLocker 硬件加密能破解吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-20-50.png"
width="690"
height="499"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;p>BitLocker 是 Windows 下的存储加密技术，用于保护硬盘中的数据安全。&lt;/p>
&lt;p>未经解密的硬盘即使遗失或者被接入其他系统也无法进行读取。&lt;/p>
&lt;p>这在极大程度上带来了数据安全（不过仍有不少用户在不知情的情况下开启了 BitLocker 且未保存密钥，在重做系统的时候发现硬盘无法解密，数据无法恢复。。欲哭无泪。。）。&lt;/p>
&lt;p>然而这种加密方式也不是绝对安全，国外有技术爱好者对此进行了挑战，并使用一台逻辑分析仪成功绕过了加密。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.errno.fr/BypassingBitlocker.html" target="_blank" rel="noopener"
>这篇文章进行了详细的记录&lt;/a>。&lt;/p>
&lt;p>主要原理为：在系统开机启动过程中的某个时刻，加密芯片和 CPU 之间传输了未加密的信号。使用逻辑分析仪捕获该信号可以逆向出加密密钥。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="监控网页信息变化的工具">监控网页信息变化的工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-21-17.png"
width="499"
height="326"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="367px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dgtlmoon/changedetection.io" target="_blank" rel="noopener"
>changedetection&lt;/a>，一个监控网站变化的工具。&lt;/p>
&lt;p>帮助用户密切关注商品打折、股票行情、政策发布等信息变动。&lt;/p>
&lt;p>支持通过网页可视化的方式指定监控页面区域。&lt;/p>
&lt;p>通过邮件、即时聊天软件、API调用等多种方式推送信息。可使用 Docker 部署，或者本地 Python 环境部署。&lt;/p>
&lt;h3 id="switch-模拟器">Switch 模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-21-28.png"
width="690"
height="472"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="350px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Ryujinx/Ryujinx" target="_blank" rel="noopener"
>Ryujinx&lt;/a> 一个用c# 写的开源 switch 模拟器，该模拟器旨在提供卓越的准确性和性能、用户友好的界面以及稳定的版本构建。 ​​​&lt;/p>
&lt;h3 id="文字缩写快捷键工具">文字缩写快捷键工具
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-21-45.png"
width="568"
height="446"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="305px"
>&lt;/p>
&lt;p>为了减少打字量，国外这哥们写了个脚本将日常用语全部缩写了，只需敲入缩写字母，脚本自动完成完整句子的键盘输入。&lt;/p>
&lt;p>比如：
st =&amp;gt; something
ab =&amp;gt; about
hw =&amp;gt; hardware
sti =&amp;gt; sometime&lt;/p>
&lt;p>据小哥自己统计，使用这个脚本以后他已经减少了一半的键盘敲击量。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/eschluntz/compress" target="_blank" rel="noopener"
>项目名叫 compress 目前已开源&lt;/a>，如果你有兴趣，改成支持中文也不是不可以。&lt;/p>
&lt;h3 id="canvas-手册">Canvas 手册
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-048-%E6%9C%9F/2023-09-05-13-22-11.png"
width="562"
height="625"
loading="lazy"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="215px"
>&lt;/p>
&lt;p>Canvas 是网页中用于图形绘制的基本元素，结合 JavaScript 可以实现各种复杂的图形效果和交互动画。我之前都是每次用到了的时候现去翻文档，对它的每个 API 都是一知半解。这里有一个&lt;a class="link" href="https://bucephalus.org/text/CanvasHandbook/CanvasHandbook.html" target="_blank" rel="noopener"
>Canvas 手册&lt;/a>，详细介绍了 Canvas 的各种调用接口。适合希望深度使用及系统学习 Canvas。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="不要重复造轮子是人为设置的一种限制">“不要重复造轮子”是人为设置的一种限制
&lt;/h3>&lt;p>遇到需求不能满足的情况，是去“寻找轮子”还是“动手创造轮子”，这是两种不同的思维习惯。&lt;/p>
&lt;p>“寻找轮子”往往意味着寻找已有答案，将问题看为一种正常的状态，是“自古以来”、是“从来如此”。&lt;/p>
&lt;p>思维定势一旦形成，就很难改变，让人成了那个在沙漠中让美女帮他牵住骆驼的矮子。&lt;/p>
&lt;p>动手创造者往往是发现这种问题的人，他们不循规蹈矩，他们 Think different，是改变世界的人。&lt;/p>
&lt;p>“不要重复发明轮子”，这个原则用于工作中确实比较安全，他保证了不会浪费资源，并且避免了一定的技术风险。&lt;/p>
&lt;p>但也同时拒绝了伟大的创新。&lt;/p>
&lt;p>所以不要被这句话束缚，尽管去做自己的轮子。&lt;/p>
&lt;p>哪怕它一开始很丑。&lt;/p>
&lt;p>你的轮子必将使你与众不同，使你拥有不一样的视角，成为那个动手创造的人。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 047 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/</link><pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-047-期">机器文摘 第 047 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="业余爱好者痴迷于工具专业人士注重技能">业余爱好者痴迷于工具，专业人士注重技能
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-17-36.png"
width="649"
height="582"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://adamsinger.substack.com/p/amateurs-obsess-over-tools-pros-over" target="_blank" rel="noopener"
>业余爱好者痴迷于工具，专业人士注重技能&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>以原声吉他为例。在数字音乐制作和合成器盛行的时代，这个单独演奏的乐器可能显得有点古老。然而，在熟练音乐家的手中，它变成了一个充满迷人旋律和触动灵魂的载体。它甚至可能为更大的创意提供灵感，如果你直接跳到现代合成器就有可能会错过这些。原声吉他的简单性促使艺术家专注于演奏的细微之处，完善他们的指弹技巧，并通过每一次弹奏传达情感。真正的魔力不在于吉他本身，而在于将其演绎得生动活泼的音乐家的技艺。&lt;/p>
&lt;/blockquote>
&lt;p>这篇文章读来深有感触。&lt;/p>
&lt;p>在解决问题的时候，我总是忍不住问自己，我这个方法是最优的吗？我使用的工具是不是最合适/最好的？&lt;/p>
&lt;p>这种心理，常常使我陷入对最佳实践和完美工具的追求中，而忘记了解决问题本身。&lt;/p>
&lt;p>时间久了，工具积累一大堆，但每个都未曾发挥其真正作用，一边老工具在吃灰，一边继续寻找新工具。&lt;/p>
&lt;p>差生文具多。&lt;/p>
&lt;p>正如文章中所说：真正的高手明白，应当拿起手里已有的工具，先行动起来。在这个过程中如果有机会创造美好的事物，好的工具自然会出现在眼前。&lt;/p>
&lt;h3 id="cpu-的指令分支预测">CPU 的指令分支预测
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-17-49.png"
width="682"
height="743"
loading="lazy"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="220px"
>&lt;/p>
&lt;p>现代的 CPU 基本都具有指令分支预测的特性，通过猜测后续会执行的指令分支，提前运行一些指令和设置状态，可以有效利用 CPU 的执行资源，提升效率。&lt;/p>
&lt;p>不过，如果预测准确的话效率提升十分明显，但是如果预测错误，CPU 就要多做一些事情（刷新后续预测的指令和相关的状态），随着现代 CPU 中指令流水线越来越复杂，这种代价也变得越来愈大。&lt;/p>
&lt;p>在编程的时候，编写一些对于 CPU 分支预测友好的代码，能够对性能产生极大的影响。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://johnnysswlab.com/how-branches-influence-the-performance-of-your-code-and-what-can-you-do-about-it/" target="_blank" rel="noopener"
>对于 CPU 的分支预测，我们能做什么&lt;/a>耐心地从 CPU 的分支预测机制讲起，通过具体的代码举例，讲解了怎样让编写的代码对 CPU 分支预测这类优化更加友好。&lt;/p>
&lt;h3 id="ssh-命令详解">SSH 命令详解
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-18-25.png"
width="690"
height="535"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="309px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://grahamhelton.com/blog/ssh-cheatsheet/" target="_blank" rel="noopener"
>SSH 命令详解&lt;/a>，一篇对 SSH 命令的参数介绍十分详细且易懂的文章。&lt;/p>
&lt;p>通过举例让我彻底弄清楚了基于 SSH 的端口转发。&lt;/p>
&lt;p>另外还知道了可以在已有的 SSH 连接上执行补充命令，以实现不断开终端的情况下将远程主机上的端口转发到本机访问。 ​​​&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="开源的房子">开源的房子
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-18-47.png"
width="690"
height="403"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.wikihouse.cc" target="_blank" rel="noopener"
>wikihouse&lt;/a>，是一个开源房屋建造网站，房子的图纸、模型均可从网站上下载，里面有各式各样的房屋建造资料，任何人都可以据此增删、设计、制造、组装自己的建筑。可以理解为建筑界的 github。
​​​&lt;/p>
&lt;h3 id="关掉-edge-浏览器新增的圆角样式">关掉 Edge 浏览器新增的圆角样式
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-19-03.png"
width="690"
height="352"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;/p>
&lt;p>Edge 浏览器的最新更新里，给所有页面强制增加了一个圆角边框，看起来很不习惯（丑陋）。&lt;/p>
&lt;p>经过研究，我发现，如果想恢复到之前的样子，可以在设置外观选项里关闭该特性。&lt;/p>
&lt;p>我已经关闭，并果断给这个功能特性反馈了负面评价。&lt;/p>
&lt;h3 id="hello-world">Hello World
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-19-26.png"
width="690"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/leachim6/hello-world" target="_blank" rel="noopener"
>Hello World&lt;/a> ，这个仓库收录了几乎所有编程语言（997种）的 Hello world 程序。 ​​​&lt;/p>
&lt;h3 id="前端开发代码大全">前端开发代码大全
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-19-42.png"
width="690"
height="639"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="259px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://30secondsofcode.org" target="_blank" rel="noopener"
>30secondsofcode&lt;/a>。&lt;/p>
&lt;p>这个网站有大量可复用的代码片段，主要是 Javascript、CSS、HTML 、Python 等语言的内容，可以覆盖 Web 应用开发全栈。&lt;/p>
&lt;p>里面收录的代码段或者文章都很清新，每个都配有细心的解释，具有良好的实用性。 ​​​&lt;/p>
&lt;h3 id="关于-win10-的锁屏睡眠时间">关于 Win10 的锁屏睡眠时间
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-20-00.png"
width="410"
height="502"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;p>我在使用 Windows10 的时候发现一个问题。&lt;/p>
&lt;p>无论我将电源设置里的睡眠时间、显示器空闲关闭时间设置多长，锁屏后系统都会在 1 分钟之后关闭显示器。&lt;/p>
&lt;p>这会带来一些不方便，并且让人困惑。&lt;/p>
&lt;p>在经过一番研究搜索之后，找到了如下解决方案（Windows就是这么喜欢在注册表隐藏设置）：&lt;/p>
&lt;p>1、打开注册表编辑器后。&lt;/p>
&lt;p>2、定位到：&lt;code>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Power\PowerSettings\7516b95f-f776-4464-8c53-06167f40cc99\8EC4B3A5-6868-48c2-BE75-4F3044BE88A7&lt;/code>&lt;/p>
&lt;p>3、修改右侧的Attributes 数值为2 (初始值为1)&lt;/p>
&lt;p>4、再打开“编辑电源计划”时会发现多了一个选项“控制台锁定显示关闭超时。&lt;/p>
&lt;h3 id="红警2游戏整合包">红警2游戏整合包
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-047-%E6%9C%9F/2023-08-29-13-20-25.png"
width="413"
height="302"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://tmioe.com/7991.html" target="_blank" rel="noopener"
>红警2 的民间整合包&lt;/a>，支持 win7 到 win11。整合大量资源，傻瓜式一键安装。 ​​​&lt;/p>
&lt;p>经过我的测试，前面链接页面里提供的安装包里带有额外的广告脚本，在使用时可使用 7z 等压缩软件直接打开该自解压包，选取主文件夹拷贝出来即可。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="隐形的门槛">隐形的门槛
&lt;/h3>&lt;p>也许每个领域都存在一个隐形的门槛，无论是你学会一种语言，还是掌握一种能力，哪怕是打通一个游戏，只要你跨不过那个门槛，那么无论你尝试多少次，都会在同样的水平下无功而返。相反，一旦跨过后，那就是一马平川，你有了在那个新世界周游的能力。这当然不是说你不会再遇到困难，而是说，你不再有那种尝试了无数次，带着同一种感受离开的感觉。剩下的区别只是更多经验的积累，是熟练度的问题，因为你已经在那个轨道上了，你已经拿到了入场券。&lt;/p>
&lt;p>人生可以被隐喻成一个有着自然消退机制的RPG体系，累积10000经验可以升那关键的一级，那么先前你无论你多少次到达5000，6000，9000都不行，因为熟练度会反复消退到1000，2000的水平。而我知道，很多人就是无数次的卡在了那9000以内，但每次都要从1000，2000这个位置开始。这个和自我接纳也没有关系，因为你知道你遇到的困难并不是基于你对自己的苛求，你的困难在于你无法为自己在乎的事情付出真正的努力，无法将自己的活力与热情持续的灌注在同一个点上，但你隐约知晓跨过那10000的门槛，是你更重要的人生福祉。&lt;/p>
&lt;p>来自微博 &lt;a class="link" href="https://weibo.com/3762961402/NgprO9HD5" target="_blank" rel="noopener"
>@崔庆龙_&lt;/a>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 046 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/</link><pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-046-期">机器文摘 第 046 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="windows-的任务管理器">Windows 的任务管理器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-28-48.png"
width="452"
height="758"
loading="lazy"
class="gallery-image"
data-flex-grow="59"
data-flex-basis="143px"
>&lt;/p>
&lt;p>如果你喜欢使用 Windows 任务管理器来查杀那些不安分的进程，并且跟我一样讨厌他们乱跳（尤其在按照资源占用排序时）。你可以按下 Ctrl 键，它就会神奇地停止更新直到你松开 Ctrl。&lt;/p>
&lt;p>Windows 操作系统有一种魔力，就是哪怕你用了将近 20 年，还是会有你不知道的快捷键或者快捷操作。这些东西有时候能带来一些惊喜。&lt;/p>
&lt;p>具体介绍可以看这里：&lt;a class="link" href="https://www.theverge.com/2023/8/16/23834125/microsoft-windows-task-manager-pause-shortcut" target="_blank" rel="noopener"
>暂停 Windows 任务管理器&lt;/a>&lt;/p>
&lt;h3 id="linux-内核最初版的解析">Linux 内核最初版的解析
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-29-10.png"
width="588"
height="253"
loading="lazy"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="557px"
>&lt;/p>
&lt;p>最新版本的 Linux 内核，其源码规模已经飙升至 3600 万行，想要深入细节去了解它十分吃力。&lt;/p>
&lt;p>而Linux 的第一个版本 v0.01 却非常小巧。&lt;/p>
&lt;p>刨去注释和空行的话，也就 8 千来行代码。&lt;/p>
&lt;p>这么小的代码结构，足够理解操作系统的精髓。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://seiya.me/blog/reading-linux-v0.01" target="_blank" rel="noopener"
>探索 Linux v0.01 d的内部结构&lt;/a>，可以带你像参观历史博物馆那样去见证曾经的 Linux。&lt;/p>
&lt;p>我记录了一些有意思的地方：&lt;/p>
&lt;p>1、v0.01 只有 66 个系统调用，用于支持文件管理和进程管理，分别是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">access acct alarm &lt;span class="nb">break&lt;/span> brk chdir chmod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chown chroot close creat dup dup2 execve
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exit&lt;/span> fcntl fork fstat ftime getegid geteuid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">getgid getpgrp setsid getpid getppid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">getuid gtty ioctl &lt;span class="nb">kill&lt;/span> link lock lseek
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir mknod mount mpx nice open pause
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">phys pipe prof ptrace &lt;span class="nb">read&lt;/span> rename rmdir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">setgid setpgid setuid setup signal stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">stime stty sync &lt;span class="nb">time&lt;/span> &lt;span class="nb">times&lt;/span> &lt;span class="nb">ulimit&lt;/span> &lt;span class="nb">umask&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">umount uname unlink ustat utime waitpid write
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 mount 调用啥也没干，直接返回了。&lt;/p>
&lt;p>2、直接写死代码绑定 Intel 386 平台。至今对于 PS/2 接口的键盘、ATA硬盘、VGA显卡等标准硬件的驱动代码还是写死在内核里（而不是放在drivers文件夹）。&lt;/p>
&lt;p>3、系统崩溃处理代码只有 5 行：只实现了打印一句“我不行了”，然后进入死循环&lt;code>for(;;);&lt;/code>。&lt;/p>
&lt;h3 id="llamacpp-是怎样做到的">LLaMa.cpp 是怎样做到的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-29-37.png"
width="540"
height="531"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="244px"
>&lt;/p>
&lt;p>LLaMa.cpp 是一个令人惊叹的项目，在它之前没有人能够在低端消费设备上成功运行 Meta 开源的人工智能模型 LLaMa ，因为那需要太多的硬件资源。&lt;/p>
&lt;p>但是 LLaMa.cpp 的横空出世使得在 M2 Macbook Pro、Android Pixel5 手机甚至树莓派上运行 LLaMa 的 7B 模型成为可能。&lt;/p>
&lt;p>这是怎么做到的？&lt;/p>
&lt;p>带着这个疑问，有网友深入研究了这个项目，并写下了这篇&lt;a class="link" href="https://finbarr.ca/how-is-llama-cpp-possible/" target="_blank" rel="noopener"
>How is LLaMa.cpp possible?&lt;/a>以解释原因。&lt;/p>
&lt;p>作者认为主要得益于对模型参数的量化，降低模型参数的精度，从 FLOAT16 减小到 INT4。使得 LLaMa.cpp 能够以较少的计算资源甚至只依赖 CPU 的情况下加载大模型。&lt;/p>
&lt;h3 id="逐渐觉得微软比谷歌良心">逐渐觉得微软比谷歌良心
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-30-01.png"
width="690"
height="372"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>曾经微软是技术黑客的公敌，被不少人视为反对技术创新、技术开放的最大反派。&lt;/p>
&lt;p>不过随着时间的推移，以及微软逐渐在开源社区所做出的努力。这一现象有所好转。&lt;/p>
&lt;p>近期在 HN 上&lt;a class="link" href="https://old.reddit.com/r/degoogle/comments/15pd5si/today_i_realized_i_now_trust_microsoft_more_than/" target="_blank" rel="noopener"
>有位网友很扭捏地承认：现在他对微软的感觉要比对谷歌好很多&lt;/a>。&lt;/p>
&lt;p>他列举了一些关于两家公司的对比，包括发布的产品、主观的优劣评价等等。&lt;/p>
&lt;p>为了抵制微软，他已经十多年没用 Windows 了，但貌似微软的其他产品“很香”（VS Code、Github、ChatGPT等）。&lt;/p>
&lt;p>并表示最近正在寻摸租一个云存储，大概率也会用微软的 onedrive 而不是谷歌的 Google drivers。&lt;/p>
&lt;p>对此我也有类似感觉，不过我对谷歌的不信任起始于十年前谷歌将 Google reader 停掉，而自从微软推出 WSL 后，我更是觉得微软在产品上越来越实在了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-31-23.png"
width="690"
height="538"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;h3 id="tailwindcss-的小抄">tailwindcss 的小抄
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-30-29.png"
width="690"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;p>tailwind 这个 css 框架之所以能够很快流行起来，主要原因就是它解决了一个之前很多人没有太注意的问题，即 CSS 的“正交性”。&lt;/p>
&lt;p>之前 CSS 实现一个效果，可以有 N 种方法，外加各种奇技淫巧，但在使用 tailwind 之后，针对特定效果都有了最优实践路径，而且还可以很容易组合。&lt;/p>
&lt;p>不过由于它的类分的太细太碎，导致刚开始的时候会有一些不容易记忆。&lt;/p>
&lt;p>&lt;a class="link" href="https://tailwindcomponents.com/cheatsheet/" target="_blank" rel="noopener"
>这里有一份 tailwind 的小抄&lt;/a>，适合初学者收藏，方便随时查阅。&lt;/p>
&lt;h3 id="在浏览器中运行的-vim">在浏览器中运行的 vim
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-30-43.png"
width="690"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/rhysd/vim.wasm" target="_blank" rel="noopener"
>vim.wasm&lt;/a>，在浏览器中运行的 Vim，不是插件。&lt;/p>
&lt;p>使用 wasm 技术直接编译移植的 Vim Editor 源码，效果跟原生程序几乎一样。&lt;/p>
&lt;p>使用 WebAssembly 给 Vim 提供一个新的 GUI 前端（类似 GVim）。&lt;/p>
&lt;p>为了编译通过，作者在源码里禁用了很多 Wasm 不支持的特性，如：fork(2)、PTY 等。&lt;/p>
&lt;p>可在这里体验：https://rhysd.github.io/vim.wasm/&lt;/p>
&lt;h3 id="无隐私问题的-pdf-工具网站">无隐私问题的 pdf 工具网站
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-32-04.png"
width="690"
height="362"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://pdftool.org/zh" target="_blank" rel="noopener"
>这个pdf工具可以尝试一下&lt;/a>，跟其他pdf 工具网站不同，这个网站借用 WebAssembly 技术将很多工作放在浏览器客户端执行，用户无需上传自己的pdf到网站，即可执行处理工作，包括：加密、解密、拆分、合并等常用功能。 ​​​&lt;/p>
&lt;h3 id="深入理解操作系统的小游戏">深入理解操作系统的小游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-046-%E6%9C%9F/2023-08-22-13-32-17.png"
width="690"
height="368"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://plbrault.com/blog-posts/i-created-the-nerdierst-game-ever-en/" target="_blank" rel="noopener"
>这个自称史上最极客的小游戏&lt;/a>，是国外一位计算机科学教授给学生们写的一个小游戏，假设玩家是一个“操作系统”，在游戏里玩家需要不停地进程调度、内存页交换等操作，一旦调度不合理就会激怒用户导致“玩家”也就是操作系统被重启，游戏就 GAME OVER 了。&lt;/p>
&lt;p>游戏使用 Python 编写，作者将其编译为 WebAssembly 以嵌入网页，这里可以直接在线体验: &lt;a class="link" href="https://drfreckles42.itch.io/youre-the-os" target="_blank" rel="noopener"
>https://drfreckles42.itch.io/youre-the-os&lt;/a>。&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="学习技能最有效的练习手段是复刻">学习技能最有效的练习手段是“复刻”
&lt;/h3>&lt;p>这是我前两天尝试用 CSS 临时写个页面效果想到的。&lt;/p>
&lt;p>我虽然也了解了CSS 语言的一些基本知识，但是在具体实操的时候仍会感到无从下手。&lt;/p>
&lt;p>与下棋类似，只知道“规则”但是没有“套路”。&lt;/p>
&lt;p>后来干脆找了几个目标页面，按照自己的想法去还原，渐渐能够摸到一些“套路”的边缘，最终实现了自己想要的效果。&lt;/p>
&lt;p>于是我想: &lt;strong>在学习一项技能的时候，“复刻”、“抄袭”、“借鉴”、“致敬”，都没有问题，应该把它作为最主要的练习手段。&lt;/strong>&lt;/p>
&lt;p>因为“抄”是最经济的学习方法了。&lt;/p>
&lt;p>不仅仅是编程技能，艺术方面更是如此。&lt;/p>
&lt;p>比如在编曲学习的时候有一种练习叫“扒带”，就是找一首歌，然后你通过你的工具和技巧制作一份完全一样的作品，尽量做到百分百还原。&lt;/p>
&lt;p>很多“大师”都是在这个过程中，遇到问题解决问题，领悟到很多只能意会不能言传的技巧，而这些领悟是无论如何也无法仅仅通过“看”和“听”获得的。&lt;/p>
&lt;p>另外，人们练字、绘画也是从临摹开始，一般在熟练之后才能突破，才又自成体系。&lt;/p>
&lt;h3 id="忍耐守恒">忍耐守恒
&lt;/h3>&lt;p>怕麻烦的人，主要是不能忍受一些事情。&lt;/p>
&lt;p>然而正是因为这些不能忍受，所以注定要忍受一些其他的事情。&lt;/p>
&lt;p>人生就是这样，比如无法忍受投资带来的风险，就得承受现金贬值；不能面对创业的压力，就得忍受按时上班的束缚。&lt;/p>
&lt;p>对于这种现象，我将之称为“忍耐守恒”。 ​​​&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 045 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-045-期">机器文摘 第 045 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="基于浏览器-javascript-堆快照的网页爬虫">基于浏览器 JavaScript 堆快照的网页爬虫
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-23-22.png"
width="690"
height="546"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.adriancooney.ie/blog/web-scraping-via-javascript-heap-snapshots" target="_blank" rel="noopener"
>基于 JavaScript 堆快照的网页爬虫&lt;/a>。&lt;/p>
&lt;p>本文作者介绍了一个实现网络爬虫的新思路，据称已在生产上使用了一段时间，且效果不错。&lt;/p>
&lt;p>比较典型的网络爬虫在爬取数据时，大都采用解析网页 DOM 的方式，或直接通过 HTTP 请求流直接解析，或使用无头浏览器进行解析。&lt;/p>
&lt;p>但现在这项技术已经被很多网站、平台人为设置很多障碍，比如增加很多随机的嵌套等等。&lt;/p>
&lt;p>作者某天福至心灵，想到一个点子。&lt;/p>
&lt;p>利用浏览器提供的 JavaScript 内存堆快照功能，将内存里的全部信息扒下来，然后根据对应的 JavaScript 对象属性，按图索骥去找到真正需要的数据。&lt;/p>
&lt;p>这种方法比较狠的地方在于，&lt;strong>直接从后台的数据结构下手，跳过了对页面 DOM 的分析和拆解&lt;/strong>，而且据作者说，网站即便想通过混淆此类数据在内存中的属性名称来进行防御，其工作量还是相当大的。&lt;/p>
&lt;p>所以，可能短期内无能为力。&lt;/p>
&lt;p>作者说，也许全面转为 Web Assembly 才能彻底禁止他这种爬虫。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/adriancooney/puppeteer-heap-snapshot" target="_blank" rel="noopener"
>项目源码在这里&lt;/a>&lt;/p>
&lt;h3 id="intel-cpu-的崩溃攻击漏洞">Intel CPU 的“崩溃攻击”漏洞
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-23-45.png"
width="512"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://downfall.page" target="_blank" rel="noopener"
>intel cpu 有一个崩溃攻击漏洞&lt;/a>，标识为 &lt;a class="link" href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-40982" target="_blank" rel="noopener"
>CVE-2022-40982&lt;/a>，利用此漏洞可以在虚拟机里窃取共享同一个物理 CPU 的其他虚拟机的数据。&lt;/p>
&lt;p>这个漏洞可以让恶意程序在本机运行后窃取如密码、加密密钥、以及个人电子邮件等私人数据。&lt;/p>
&lt;p>恶意的云计算客户可以利用 Downfall 漏洞从与其共享同一台云计算机的其他客户那里窃取数据和凭据。&lt;/p>
&lt;p>据文章作者（也即漏洞发现者）所说，该漏洞存在于 Intel Core 6 代到 11 代 CPU，并且研究人员发现存在通过 Web 网页浏览进行攻击的可能性。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/flowyroll/downfall/tree/main/POC" target="_blank" rel="noopener"
>作者开放了一部分用于测试攻击的代码在此&lt;/a>&lt;/p>
&lt;h3 id="利用树莓派的-gpio-发射无线信号">利用树莓派的 GPIO 发射无线信号
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-24-15.png"
width="690"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://hackaday.com/2021/04/06/fan-tastic-misuse-of-raspberry-pi-gpio/" target="_blank" rel="noopener"
>原来树莓派的 GPIO 还能干这个&lt;/a>，这位老哥使用树莓派的 GPIO 接口直接进行无线电波发射（没错，就是随便扯出一根线就可以当作天线了）。实现了基于树莓派的微型电台。&lt;/p>
&lt;p>这得益于 &lt;a class="link" href="https://github.com/F5OEO/rpitx" target="_blank" rel="noopener"
>rpitx&lt;/a>这个开源项目，项目本来是为了研究和学习一些无线电原理，不过后来逐渐成为一些 SDR 爱好者必不可少的工具了。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=M2JY1_Xmokg&amp;amp;t=8s" target="_blank" rel="noopener"
>我上次看到一个小哥使用 RTL-SDR 录制汽车遥控器信号，然后使用树莓派重复发射出来，成功实现了自家汽车的解锁&lt;/a>。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://oimo.io/works/water/" target="_blank" rel="noopener"
>water&lt;/a>，一个在网页里模拟流体动画的 Demo，使用 Haxe 语言编写。&lt;a class="link" href="https://github.com/saharan/works/tree/main/water" target="_blank" rel="noopener"
>源码在这里&lt;/a>
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-24-42.png"
width="690"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>Haxe 是一种跨平台的开源编程语言，在其官方网站上称其为&amp;quot;universal language&amp;quot;。&lt;/p>
&lt;p>它可以用于开发多种平台（如Web、移动、桌面等）的应用程序。&lt;/p>
&lt;p>Haxe 提供了强大的静态类型系统，并支持多种编译目标，包括但不限于 JavaScript、C++、Java、C#、Python 等。&lt;/p>
&lt;p>感兴趣的话，这里也有&lt;a class="link" href="https://daobook.github.io/haxe-book/docs/start/00_intro.html" target="_blank" rel="noopener"
>一份 Haxe 的在线教程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/lllyasviel/Fooocus" target="_blank" rel="noopener"
>Fooocus&lt;/a>，ControlNet 作者开源的一款新的 AI 画图工具 ，搭建起来比 Stable Diffusion webui 稍微方便了一点，相当于整合包。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-25-40.png"
width="690"
height="644"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="257px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>原来 HTML5 有一个 &lt;code>&amp;lt;progress&amp;gt;&amp;lt;/progress&amp;gt;&lt;/code> 标签，直接写这个标签，不加任何属性的话，就是一个加载动画，非常适合在页面里临时需要一个进度、状态展示的时候。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-25-55.png"
width="462"
height="387"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="286px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://wangdoc.com/typescript/" target="_blank" rel="noopener"
>阮一峰老师的 Typescript 教程&lt;/a>，发布了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-26-13.png"
width="501"
height="800"
loading="lazy"
class="gallery-image"
data-flex-grow="62"
data-flex-basis="150px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>据老师自己说，刚开始也是抗拒的，觉得TypeScript 就是为 JS 语言添加静态类型系统。如果真需要静态类型，可以考虑使用其他更成熟的语言（比如 Rust 和 Java），再编译成 JS（wasm 模块），何必新学一门语言呢。&lt;/p>
&lt;p>但是后来发现 TypeScript 越来越流行，成为前端开发的主流工具，各种项目纷纷移植过去。&lt;/p>
&lt;p>我虽然对 TypeScript 仍然持保留态度，但是阮老师写的技术书籍读起来都很轻松易懂，所以觉得还是有必要收藏一下​​​。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://islamov.ai/stable-diffusion-webgpu/" target="_blank" rel="noopener"
>stable-diffusion-webgpu&lt;/a>，在网页里运行 AI 画图模型。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-26-55.png"
width="1154"
height="667"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="415px"
>&lt;/p>
&lt;p>基于 webgpu 技术，无需部署，直接在网页里运行。我试了一下，在我的 1080 8G 显存的显卡上 ，可以跑动，但是速度一般。&lt;/p>
&lt;p>上面的图是我只跑了 8 个 steps 的结果。。。 ​​​&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="ai-画图的品质">AI 画图的品质
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-27-30.png"
width="690"
height="690"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>为了验证之前关于“模特很可能被AI取代”的想法，自己动手部署 &lt;a class="link" href="https://github.com/AUTOMATIC1111/stable-diffusion-webui" target="_blank" rel="noopener"
>Stable Diffusion webui &lt;/a> 测试了一些模型。根据网友分享的提示词尝试生成了一些图片。&lt;/p>
&lt;p>感觉效果比我几个月之前体验时又有了不少提升，配合各种微调模型和 LoRA 模型可以生成照片质感和光影的图片。&lt;/p>
&lt;p>虽然人物表情和姿态还有些僵硬，不过我相信这是我没有合理调整各个参数以及充分发挥插件性能导致。&lt;/p>
&lt;p>多进行尝试和练习，应该能够生成更逼真、自然的照片。&lt;/p>
&lt;h3 id="信息的维度">信息的维度
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-045-%E6%9C%9F/2023-08-15-13-28-20.png"
width="690"
height="690"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>
最近看了一些线性代数相关的知识，在向量、矩阵的各种计算中逐渐有了一些感悟：&lt;/p>
&lt;p>古代“老子”思想中的“道”很可能是无限维的，你的任何表达都是对它的一种投影，也就是降维了。所以才是“道可道，非常道”。&lt;/p>
&lt;p>每个人都想用最简单的框架去理解世界，将多维的信息硬生生地将为一维。&lt;/p>
&lt;p>这样的后果便是，盲人摸象、管中窥豹、一叶障目，不同的观点争得不可开交。&lt;/p>
&lt;p>所以在接收时也应该尽量按自己掌握的其它维度进行升维还原，任何信息都不可孤立看待。&lt;/p>
&lt;p>如果能从多维信息得视角去认知世界，也许会有转机，这多少就有点儿“阴阳互生、一分为三”的意思了。&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 044 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/</link><pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-044-期">机器文摘 第 044 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="导致-python-多线程鸡肋的-gil-是什么">导致 Python 多线程鸡肋的 GIL 是什么
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-51-26.png"
width="690"
height="839"
loading="lazy"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="197px"
>
近期在使用 Python 多线程的时候，遇到了 GIL 全局锁导致的性能问题。&lt;/p>
&lt;p>具体来说就是性能提升没有达到预期，对于有些计算任务无法并行执行。&lt;/p>
&lt;p>从多核 CPU 占用结果上来看，像极了网上那张经典的围观图，一核干活多核围观。&lt;/p>
&lt;p>于是翻阅了相关资料研究一下，发现这是 Python 社区争论多年的问题，而且有很大的历史包袱。&lt;/p>
&lt;p>严格来说，GIL 全局锁导致的性能问题与 Python 编程语言没有关系，导致这个问题的原因在于具体实现的 CPython 解释器。&lt;/p>
&lt;p>当年解释器开发者为了简单实现对多线程的支持，搞了一个全局锁，以至于在多核时代无法充分发挥 CPU 性能。&lt;/p>
&lt;p>而后续又有很多库延续了这项依赖，历史的包袱（屎山？）越来越重，很难下定决心将之移除（据说代价甚至比当年从 Python2.x 迁移到 Python3 还要大）。&lt;/p>
&lt;p>如果不想深究具体技术细节只想了解基本的来龙去脉，这里有篇文章&lt;a class="link" href="https://xie.infoq.cn/article/1e151c24367abe8cad18130f4" target="_blank" rel="noopener"
>为什么 GIL 让多线程变得如此鸡肋？&lt;/a>介绍了 Python PIL 的产生背景以及适用于 Python 多线程的业务场景，可以给你的技术决策提供参考。&lt;/p>
&lt;p>不过好消息是，就在刚刚（前几天），Python 官方终于宣布要动手取消掉 GIL 了，顿时网上一片沸腾（其实只有一部分人，大多数人都还不知道 PIL 是什么玩意儿）。而且，&lt;a class="link" href="https://news.ycombinator.com/item?id=36643670" target="_blank" rel="noopener"
>Meta 也承诺，愿意出工出力（3人年）帮助 Python 社区做针对去除 GIL 的相关开发工作&lt;/a>。&lt;/p>
&lt;h3 id="用树莓派做一个属于自己的高级收音机">用树莓派做一个属于自己的高级收音机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-52-14.png"
width="606"
height="454"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>
最近接触到 SDR （软件定义无线电）这个领域，感觉挺有意思的。&lt;/p>
&lt;p>软件定义无线电是一种无线通信技术，它利用软件来实现无线电通信系统中的信号处理和调制解调功能，而不是传统的硬件电路。&lt;/p>
&lt;p>通过软件定义无线电技术，可以实现灵活、可配置和可重用的无线通信系统，大大提高了无线通信的灵活性和性能。&lt;/p>
&lt;p>传统的无线电通信系统通常使用硬件电路来执行信号处理、调制解调和频谱管理等功能。这些硬件电路通常是固定的，不能轻易更改，因此限制了通信系统的灵活性和可配置性。&lt;/p>
&lt;p>而SDR技术通过将信号处理和调制解调等功能以软件方式实现，可以在通信系统中使用可编程的处理器和通用硬件，从而使得通信系统的功能可以在软件层面上重新配置和调整，而不需要更改硬件设计。&lt;/p>
&lt;p>比起灵活性和可配置性来说，我觉得 SDR 最大的优势是成本大大降低。之前必须购买昂贵的硬件才能实现的效果，现在能够通过便宜的、少量的硬件加上软件模拟即可。&lt;/p>
&lt;p>我近期就以很低廉的价格购买了一套 SDR 设备，通过 USB 接口连接计算机，可以实现 500KHz到1700MHz频率范围的接收。听 FM 和航空频段不在话下，SW 短波的话受天线影响，我暂时没有调试出好的效果。&lt;/p>
&lt;p>跟 SDR 相比，我几千块买的旗舰手台显得既昂贵又功能弱。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.hackster.io/mircemk/diy-sdr-dsp-radio-with-raspberry-pi-and-rtlsdr-dongle-c38064" target="_blank" rel="noopener"
>这里有篇文章&lt;/a>是作者自己动手用 SDR 设备结合树莓派制作了一个看起来还挺专业的宽频无线接收机。&lt;/p>
&lt;p>其实这跟音乐制作领域内很多乐器、效果器逐渐被虚拟化的软件、插件代替是一样的。软件虚拟化拥有巨大的优势，随着通用计算硬件的成本越来越低廉，一切能被软件定义的最终都会被软件定义。&lt;/p>
&lt;h3 id="家用-wifi-路由器需要选择哪个信道">家用 WiFi 路由器需要选择哪个“信道”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-52-42.png"
width="601"
height="373"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>
近期验证了一个关于无线路由器的传说。&lt;/p>
&lt;p>起因是我新买了一个树莓派 ZeroW 带无线版本，没想到板载的 WiFi 网卡天线太弱了。&lt;/p>
&lt;p>离路由器稍微远一点，比如放到卧室，传输速率就会大幅下降，我又暂时没能找到合适的外接网卡，一度陷入绝望。&lt;/p>
&lt;p>后来灵机一动，看看能不能从路由器那头想想办法，于是打开路由器配置页面，找到了 WiFi 的“信道”设置，将之从“自动”调到了最不常用的“13”。&lt;/p>
&lt;p>这里补充一下，WiFi信道一般从1到13，由路由器自动选择，但现在无线环境十分混乱，尤其是 2.4G（树莓派 Zero W 只能连这个规格） 频段，干扰很严重。&lt;/p>
&lt;p>但是 13 这个信道很少被路由器自动选用，原因是最初制定标准的时候，不是所有国家和地区都支持，也不是所有终端设备都支持，所以这个信道就成了最不常用的。&lt;/p>
&lt;p>在我手动指定信道之后，惊喜地发现，树莓派放在同样的位置，传输速率得到了较大提升并且稳定。看来传说将路由器 2.4G 信道设为 13 可以防干扰是真实的。&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/344389009" target="_blank" rel="noopener"
>什么是路由器的信道？信道设置成什么最合理？&lt;/a>&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://roadmap.sh" target="_blank" rel="noopener"
>开发人员路线图&lt;/a> 是一个学习索引网站，旨在创建路线图、指南和其他教育内容，以帮助开发人员选择学习路径。在 Github 所有仓库中 Stars 排名第七。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-53-03.png"
width="690"
height="490"
loading="lazy"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="337px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://felixkreuk.github.io/audiogen/" target="_blank" rel="noopener"
>AudioGen&lt;/a> facebook 开源的声音合成模型，可以根据文字描述生成对应的声音。效果已经很惊人了，这个页面展示了很多样例。我听了一下，觉得以后影视作品里的一部分声音特效应该可以通过 AI 进行生成了。至少像一些嘈杂的人群、婴儿哭声、鸟叫等各种背景音是可以合成的。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-53-14.png"
width="499"
height="270"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/li>
&lt;li>原来 Chrome 和 Edge 浏览器的 DevTools 里自带了 CSS 动画曲线编辑器啊！可以直接通过鼠标拖动进行调整和预览，十分便捷。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-53-29.png"
width="562"
height="528"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/GraphiteEditor/Graphite" target="_blank" rel="noopener"
>Graphite&lt;/a>，一个开源的 2D 矢量图形编辑器，适用于照片编辑、图像处理、图形设计、插图、数据可视化、数字绘画等领域。可以实现项目图稿，数据可视化和自动化。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-54-19.png"
width="830"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;h3 id="获取高品质信息的需求仍然强烈只是被淹没了">获取高品质信息的需求仍然强烈，只是被淹没了
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-54-40.png"
width="367"
height="372"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="236px"
>
三十几年前，电视逐渐取代书籍、报纸等传统媒体的年代，尼尔波兹曼写下了《娱乐至死》。&lt;/p>
&lt;p>作者认为：过度追求娱乐和娱乐化的信息传播方式可能导致公众思考能力的下降。&lt;/p>
&lt;p>然而这么多年过去了，人们在降低信息质量这条路上越走越远。电视也早已沦为老年人卧床的伴侣，电视节目更是无法占据现代人的时间，取而代之的是手机短视频。&lt;/p>
&lt;p>短视频已经成为大部分人闲暇消遣、信息获取的主要方式。这种媒体的变化将进一步降低理解和感受深度信息的能力，使人对深入学习和思考失去兴趣。&lt;/p>
&lt;p>虽然获取的信息看似在增多，但现在高质量的信息却越来越少。&lt;/p>
&lt;p>短视频等碎片化信息给我的感觉就像是无线电信号的背景噪音，现在的信息“电磁环境”早已被这种噪音充斥。因为“背景噪音”太大，就好像在高楼林立的城市里打开无线电，接收到的全是 LED 路灯和电动车充电器产生的噪波。&lt;/p>
&lt;p>不过我还是相信会有包括我在内的相当一部分人，不愿放弃主动思考，不屑于接收低品质信息。&lt;/p>
&lt;p>我正在努力做出一些尝试，以后逐渐记录下来：&lt;/p>
&lt;ol>
&lt;li>降低输入：减少刷碎片信息的时间；&lt;/li>
&lt;li>滤波：使用搜索引擎、RSS服务、newsletter邮件等工具进行整理；&lt;/li>
&lt;li>溯源：尽量选择信息源头获取一手信息，对于技术来说，直接阅读英文文档是一个办法；&lt;/li>
&lt;li>创造：自己制作高质量内容；&lt;/li>
&lt;/ol>
&lt;h3 id="摄影师不会被-ai-取代但是模特很可能会">摄影师不会被 AI 取代，但是模特很可能会
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-044-%E6%9C%9F/2023-08-08-09-56-00.png"
width="664"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="373px"
>
即便以后 AI 绘画能够产出更加难以分辨真假的作品。&lt;/p>
&lt;p>从目前能看到的各种生成作品来说，还是摄影师负责了主要的创作灵感。&lt;/p>
&lt;p>真要说被取代的话，也许“被拍摄对象”经过虚拟化以后，很可能被取代。&lt;/p>
&lt;p>以后不仅仅是举着相机的叫摄影师，说不定会诞生面向 AI 摄影这一职业。&lt;/p>
&lt;p>到时候器材党玩的不再是镜头，改玩显卡了？&lt;/p>
&lt;p>“嘿，你这 N 卡 比我这 A 卡有德味儿，毒！”&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 043 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/</link><pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-043-期">机器文摘 第 043 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="先做框架再做功能">先做框架再做功能
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-13-57-56.png"
width="690"
height="395"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>
&lt;a class="link" href="https://devblogs.microsoft.com/oldnewthing/20230725-00/?p=108482" target="_blank" rel="noopener"
>Before you try to do something, make sure you can do nothing.&lt;/a>&lt;/p>
&lt;p>看到这句话第一反应是：这是什么 XX 逻辑？看完作者的文字之后，哦，这是一种软件构建的方法。&lt;/p>
&lt;p>意思是说，先宏观再微观，先整体再局部，别一上来就陷入到细节代码的编写中去。&lt;/p>
&lt;p>先把框架搭好，具体功能一个也别着急实现，留着占位，先搭一个“什么都不干”的架子，然后再逐渐补充功能。&lt;/p>
&lt;p>但也不是真的什么都不干，而是理清了各个关键组件的调用关系以及与开发相关的辅助功能（如打印调试信息）。&lt;/p>
&lt;p>这样做最大的好处是，随着功能开发的深入，代码不至于失控，而且具有良好的可调试性和组件问题隔离能力。&lt;/p>
&lt;p>随之而来的就是轻松写代码，而不是眉毛胡子一把抓。&lt;/p>
&lt;h3 id="神经网络从开始到现在">神经网络从开始到现在
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-13-58-59.png"
width="690"
height="513"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>
&lt;a class="link" href="https://s3tlxskbq3.feishu.cn/docx/NyPqdCKraoXz9gxNVCfcIFdnnAc" target="_blank" rel="noopener"
>The Document is All You Need!&lt;/a>&lt;/p>
&lt;p>一篇 AI 科普好文章，用较为通俗的语言讲解了神经网络模型原理和发展历程（我感觉有些像生物的进化）。&lt;/p>
&lt;p>从最初的由神经元组成的多层感知机开始，然后进化到卷积神经网络 CNN 降低网络复杂度，再进化， RNN 循环神经网络给模型增加记忆能力，记忆能力太强也不行，到了 LSTM 开始让它能够遗忘，再到后面的 注意力机制以及 LLM 语言模型。&lt;/p>
&lt;p>比起同类文章，这一篇尽量避免了数学概念的推导和论证，尽量在不看公式的情况下解释基本思路，适合我等小白学习。&lt;/p>
&lt;h3 id="代码审查的一些建议">代码审查的一些建议
&lt;/h3>&lt;p>&lt;a class="link" href="https://codelantis.com/blog/code-reviews-best-practices" target="_blank" rel="noopener"
>5个关于代码审查的最佳实践&lt;/a>，文章记录一些了对代码审查的实践建议，嫌长不看我总结如下:&lt;/p>
&lt;ol>
&lt;li>一次只审查一个功能特性或者错误修复。&lt;/li>
&lt;li>提前准备好背景交代（在审查之前写清楚这么做的原因和基本思路）。&lt;/li>
&lt;li>利用自动化工具提前做好静态检查，提前统一风格、规范。&lt;/li>
&lt;li>利用提问的方式提出改进建议而不是直接喷，如：“我们真的需要这个断言吗？”&lt;/li>
&lt;li>仔细阅读代码，慢慢来，以充分理解。&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>微软的 &lt;a class="link" href="https://learn.microsoft.com/en-us/sysinternals/downloads/zoomit" target="_blank" rel="noopener"
>ZoomIT&lt;/a> 真是个经典工具，已经默默维护了好多年了，现在版本为7.0。体积小巧才1MB多点儿，绿色免安装，下载解压即用。非常适合进行共享屏幕培训讲解，或者录制教学视频。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-13-59-57.png"
width="669"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="345px"
>
ZoomIT 快捷键如下：
Ctrl+1：放大屏幕，屏幕静止，然后使用鼠标批注；
Ctrl+2：使用鼠标随意绘制批注，支持 r、g、b、o 等快捷键切换颜色；
Ctrl+3：显示 BreakTime 倒计时；
Ctrl+4：放大屏幕，屏幕继续支持鼠标交互操作，用于放大操作过程；
Ctrl+5：录制屏幕，可与前面几个功能结合使用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/kamranahmedse/driver.js" target="_blank" rel="noopener"
>driver.js&lt;/a> 一个压缩后只有 5K 大小的前端库，可以让你的网站或者 Webapp 迅速集成交互式“使用指南”的能力。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-14-00-27.png"
width="690"
height="361"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://clangjs.netlify.app" target="_blank" rel="noopener"
>clangjs&lt;/a> 一个在浏览器编译、链接、运行 C/C++ 代码的 JS 库。支持 C/C++ 标准库。完全在本地编译，无需网络即可工作。原理：
首先把 Clang 和 LLD 编译为 WebAssembly 使其运行在浏览器中。然后使用 WebAssembly 版本 Clang 把 C/C++ 代码编译为 WebAssembly，最后通过浏览器 API 运行 WebAssembly。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-14-00-43.png"
width="690"
height="292"
loading="lazy"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="567px"
>
&lt;a class="link" href="https://github.com/luoxuhai/clang.js" target="_blank" rel="noopener"
>附：clangjs源码&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/bartobri/no-more-secrets" target="_blank" rel="noopener"
>nms&lt;/a>，一个控制台程序，可以将任意命令的输出（ANSI TXT）文本转换成为乱码以达到防偷窥和加密的效果。通过命令管道使用：&lt;code>ls -l | nms&lt;/code> ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-14-00-57.png"
width="690"
height="236"
loading="lazy"
class="gallery-image"
data-flex-grow="292"
data-flex-basis="701px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://iconbuddy.app" target="_blank" rel="noopener"
>Icon Buddy&lt;/a>，这个网站有超过 1 百万个免费 svg 图标，可在线自定义颜色。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-14-01-15.png"
width="690"
height="420"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="394px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;ul>
&lt;li>无法眼神交流不是导致远程办公沟通的最大障碍，语音延迟才是：
&lt;ul>
&lt;li>我之前一直以为远程办公给沟通带来最大的最大障碍是无法眼神交流导致的信息失真，想象着可以通过升级摄像头（比如嵌入在屏幕中）来改善这一情况。&lt;/li>
&lt;li>但进行无数次网络会议之后，我体会到了最大的障碍还不是无法眼神交流，而是网络通信带来的（几乎是必然的）严重的语音延迟。&lt;/li>
&lt;li>人们对声音延迟的感知和容忍限度大约在10毫秒（现在的电脑声卡在使用 ASIO 驱动之后可以轻松做到本地延迟 8到6毫秒左右，所以可以用于实时录音），大于10毫秒的延迟会带来明显的迟钝感，时间再长一些就会对对话的节奏带来严重影响。（如果体会不到的话，可以回忆一下新闻直播间主持人跟现场记者连线时那种说话总是对不上节奏的尴尬。）&lt;/li>
&lt;li>什么时候网络视频会议的延时能缩短到10毫秒以内（唱卡拉OK可以接受的最低延迟），远程办公才能迎来质的飞跃，否则网络视频会议对于工作讨论永远都是隔靴搔痒、效率低下。现在的解决方案普遍还在吹能做到一秒（1000毫秒）以内，任重而道远。 ​​​&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>现在真正的程序员用什么编辑器 ？
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-043-%E6%9C%9F/2023-08-01-14-01-47.png"
width="690"
height="645"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="256px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 042 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/</link><pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-042-期">机器文摘 第 042 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="从-cpu-到操作系统">从 CPU 到操作系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-57-14.png"
width="665"
height="261"
loading="lazy"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>
整天使用电脑和手机却对它的工作原理一知半解？&lt;a class="link" href="https://cpu.land" target="_blank" rel="noopener"
>把你搁 CPU 里&lt;/a>是一套不错的科普文章，作者保证你无论是否了解 CPU 的运作方式，读完之后都会有所收获。我原本以为主要讲解 CPU 组成原理，在浏览了一遍之后，发现 CPU 只是引子，后面还讲了很多操作系统相关的知识，很值得一看。 ​​​&lt;/p>
&lt;h3 id="基于-gpu-渲染的-ui-界面制作">基于 GPU 渲染的 UI 界面制作
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-57-33.png"
width="690"
height="412"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>
&lt;a class="link" href="https://hasen.substack.com/p/gpu-gui-table-of-contents" target="_blank" rel="noopener"
>基于 GPU 渲染的 UI 界面制作&lt;/a>，也是一个系列文章，探讨了使用 GPU 渲染用户界面的一些思路和相关技术实现方法。用 GPU 绘制用户界面不是什么新鲜事，事实上现在大部分游戏的 UI 都是基于 GPU 渲染的，不过这个作者讲的比较深入浅出，对基础介绍的比较多，适合我这种业外人士，读起来通俗易懂。&lt;/p>
&lt;h3 id="为什么我们更应该使用-display-port-而不是-hdmi-">为什么我们更应该使用 Display port 而不是 HDMI ？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-58-12.png"
width="790"
height="479"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>
&lt;a class="link" href="https://hackaday.com/2023/07/11/displayport-a-better-video-interface/" target="_blank" rel="noopener"
>为什么我们更应该使用 Display port 而不是 HDMI？&lt;/a>，简单来说，HDMI 是家电行业制定的接口标准，封闭而保守，Display port 是 PC 行业制定的标准，开放又激进。现在的显卡上一般提供一个 HDMI 接口，仅仅是为了兼容而做出的妥协，不提供多个是因为 HDMI 授权收费。&lt;/p>
&lt;h3 id="txt-纯文本才是王道">txt 纯文本才是王道
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-58-45.png"
width="690"
height="220"
loading="lazy"
class="gallery-image"
data-flex-grow="313"
data-flex-basis="752px"
>
喜欢老式合成器的操作方式，不用图形和触摸屏，而是用文本和字符进行交互，可以快速选择音色参数，指哪儿打哪儿，心中有数。&lt;/p>
&lt;p>喜欢在控制台的黑窗口通过命令行跟计算机交互，而不是用鼠标在图形界面上点击，不用将鼻子凑在屏幕上，闭上眼睛也能做到精确操作。&lt;/p>
&lt;p>喜欢单反相机的肩屏，无论我用什么姿势拨动拨杆、拨轮，肩屏总能用字符给我最快速最准确的响应，告诉我现在的曝光三参数是多少，做到心中有数。&lt;/p>
&lt;p>喜欢用 Markdown 文本格式记录信息，只因为文本格式最干净纯粹，利于保存和传播。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://graydon2.dreamwidth.org/193447.html" target="_blank" rel="noopener"
>《txt纯文本才是王道》&lt;/a>的作者表达了跟我同样的喜好，对于使用纯文本保存信息偏爱有加，认为无论是视频、图片还是其他数字形式，在文字面前都是弱小的弟弟。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/FlagAlpha/Llama2-Chinese" target="_blank" rel="noopener"
>Llama2-Chinese&lt;/a>，Llama2中文社区！是一个专注于Llama2模型在中文方面的优化和上层建设的高级技术社区。 &lt;em>基于大规模中文数据，从预训练开始对Llama2模型进行中文能力的持续迭代升级&lt;/em>。Facebook近期开源的 Llama 2 模型比较火，号称可以免费商用。我试了一下，效果不如预期，跟 ChatGPT 3.5 比起来还有距离。可能我使用的中文微调 Lora 参数还不够好吧。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-59-02.png"
width="690"
height="182"
loading="lazy"
class="gallery-image"
data-flex-grow="379"
data-flex-basis="909px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://githubunwrapped.com" target="_blank" rel="noopener"
>githubunwrapped&lt;/a>是一个帮你统计 Github 信息的网站，可以将输入的 Github 账号相关的统计信息生成一段漂亮的动画，展示你使用最多的编程语言、哪天提交的最积极、哪个时段工作效率高（根据文件修改时间？）等。比较有趣的是，这个网站生成动画视频的技术来自一个叫做 &lt;a class="link" href="https://remotion.dev" target="_blank" rel="noopener"
>remotion&lt;/a>的库，它可以使用 React 组件式风格编写动画效果，并通过 Canvas 实现视频文件的渲染。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-59-18.png"
width="690"
height="455"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/jesseduffield/lazydocker" target="_blank" rel="noopener"
>lazydocker&lt;/a>，继发现 lazygit 和 lazyvim 两个神器之后，我又发现了 lazy 家族新成员：lazydocker！同样是提供终端命令行下的“gui”界面，不过操作对象是 docker 这下管理容器终于可以不再看错乱的 docker 命令输出了。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-042-%E6%9C%9F/2023-07-25-13-59-28.png"
width="690"
height="397"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>关于产品需求的来源：&lt;/p>
&lt;p>对于提供IT相关服务的从业人员来说，无论是在企业还是个人做独立产品，把握好产品的需求、做好产品定义是最关键的事情，是后续做研发、运营的基础。&lt;/p>
&lt;p>而好的产品定义=自己想做+自己能做+用户想用+愿意付费。&lt;/p>
&lt;p>这样的定义应该怎样去发现？&lt;/p>
&lt;p>拿软件举例，大部分软件能给用户提供的最大价值是“将一些事情自动化”和“将一些物理实体虚拟化”。前者能够通过自动化实现工作效率的指数级提升，后者则通过对物理现实虚拟化实现用户对交互体验的指数级提升。&lt;/p>
&lt;p>所以在分析产品需求进行产品定义时可以从身边三个方面入手：&lt;/p>
&lt;ol>
&lt;li>还有什么事情可以被计算机自动化？&lt;/li>
&lt;li>还有哪些物理实体可以被虚拟化？&lt;/li>
&lt;li>市场上的现有产品，还有哪些可以从上面两个维度提升以增强体验的？&lt;/li>
&lt;/ol>
&lt;p>我发现，无论是企业的产品，还是个人的独立产品，都可以从这些维度进行分析。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基于互联网通道的“业余无线电”：&lt;/p>
&lt;p>不是很理解热衷于用互联网通道进行业余无线电通联的心态。&lt;/p>
&lt;p>今天刚知道现在有一些业余无线电爱好者使用一种叫做 mmdvm 的盒子（热点盒子）进行自主搭建数字中继。&lt;/p>
&lt;p>原理是“热点盒子”用家里的wifi接入互联网，然后热点盒子给业余无线电台提供UV频段的发射接收中继，这样就能轻易通联全国甚至全球的爱好者。&lt;/p>
&lt;p>目前很多拥有支持数字通信的电台的爱好者都很积极地参与这种通联，甚至每周还有打卡点名活动。&lt;/p>
&lt;p>我暂时还不是很理解这种心态。这种依赖互联网进行的通联在我看来（也许是暂时的）早已失去了玩无线电的初衷。如果我想要通过互联网假装进行呼叫，还得依靠家里的无线路由器，那我为什么不干脆使用微信电话？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无头系统：
今天才知道原来我给自己配的远程开发环境有个专业术语叫做 &lt;a class="link" href="https://zh.wikipedia.org/zh-cn/%e6%97%a0%e5%a4%b4%e8%ae%a1%e7%ae%97%e6%9c%ba" target="_blank" rel="noopener"
>“Headless 无头系统”&lt;/a> 啊。我现在基本上可以做到带着笔记本随意移动，开发环境都在远程，在各处体验环境都一样。主要使用： Win10 + WSL2 + Nvidia-Docker + VS Code + Neovim。有时会启用远程桌面 RDP，有时直接 ssh + tmux。有兴趣的话我挑一期详解。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 041 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/</link><pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-041-期">机器文摘 第 041 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="c-也能一次编译到处运行了">C 也能一次编译到处运行了？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-28-30.png"
width="743"
height="446"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>
用 C 编写的程序，只编译一次，生成的可执行文件能同时在多个平台运行吗？&lt;/p>
&lt;p>这在以往是 java 这类依赖虚拟机执行环境的语言宣称的事情。&lt;/p>
&lt;p>然而我今天才听说还有这个神奇的库（好久没关注过c++领域的技术了）：&lt;a class="link" href="https://github.com/jart/cosmopolitan" target="_blank" rel="noopener"
>Cosmopolitan&lt;/a>Libc 号称可以使 C 成为一种构建一次就能到处运行的语言，就像Java一样，除了它不需要解释器或虚拟机。相反，它重新配置了GCC和Clang，以输出POSIX批准的多语言格式，该格式在Linux + Mac + Windows + FreeBSD + OpenBSD + NetBSD + BIOS上本地运行，具有最佳的性能和最小的占用空间。&lt;/p>
&lt;p>在使用的时候需要引入特殊的库和编译配置，具体执行效果我还没有测试。&lt;/p>
&lt;p>然后，&lt;a class="link" href="https://ahgamut.github.io/2023/07/13/patching-gcc-cosmo/" target="_blank" rel="noopener"
>这篇文章&lt;/a>的作者干脆来个更方便的操作，他给 GCC 打了大约 2000 行的补丁，使得 GCC 直接就嵌入了 Cosmopolitan 库，现在可以在不修改任何源代码（前提是得用纯 C 写）的情况下构建出到处都能运行可执行文件了（Windows也可以吗？我要测试）。&lt;/p>
&lt;h3 id="业余无线电入坑指南">业余无线电入坑指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-29-07.png"
width="690"
height="920"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>
业余无线电跟摄影、HiFi音响这一类的爱好在某种维度上非常相似，在“入坑”的境界上，甚至完全一样。&lt;/p>
&lt;p>这里的坑，指需要投入大量精力和资金。&lt;/p>
&lt;p>之所以这么说，是因为它们都有一个共同的特点。&lt;/p>
&lt;p>即围绕这些爱好有大量的知识可以学习和探索。&lt;/p>
&lt;p>比如拿业余无线电来说，上来就一堆“亚音”、“中继”、“频段”、“频差”、“杂散发射”等名词，对标摄影中的“构图”、“光圈”、“快门”、“ISO感光度”等名词。新手若想有所体会，单是这些概念就够琢磨几天的。更不用提后续还有逐渐步入玄学的一些操作流派，乃至一个不留神还会陷入无穷尽的装备升级竞赛。&lt;/p>
&lt;p>这类知识对于好奇心强烈、喜欢求知的人来说有着巨大的吸引力。甚至直白的说，我们很可能不是爱好这项技能，而是单纯喜欢探索和求知的过程，喜欢那种获得感。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://zhuanlan.zhihu.com/p/585518350" target="_blank" rel="noopener"
>《业余无线电新手指南》&lt;/a>可以普及一些基本知识，愿意入坑的请阅读。&lt;/p>
&lt;p>&lt;em>我近期已考取了中国无线电协会的业余无线电操作能力 A 证&lt;/em> 算是合法的 &lt;a class="link" href="https://baike.baidu.com/item/%E6%97%A0%E7%BA%BF%E7%94%B5%E7%88%B1%E5%A5%BD%E8%80%85/6509242" target="_blank" rel="noopener"
>HAM 火腿&lt;/a>了。&lt;/p>
&lt;h3 id="远程办公还能成为趋势吗">远程办公还能成为趋势吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-29-47.png"
width="799"
height="414"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="463px"
>
疫情的时候，远程办公、异地协同等概念一度变得很火爆，当时很多人觉得这又是一个风口。&lt;/p>
&lt;p>但随着当时极端环境的消失，各大公司又纷纷将员工从居家办公中召回。&lt;/p>
&lt;p>那么？此类与远程协作相关的概念破灭了吗？&lt;/p>
&lt;p>各种协同工具、平台相关的市场，还有没有继续扩大的可能，或者说还在等待一个巨大的技术革新来引爆？&lt;/p>
&lt;p>这里有个项目，&lt;a class="link" href="https://github.com/LinuxSuRen/remote-jobs-in-china" target="_blank" rel="noopener"
>积极收集远程办公相关的信息&lt;/a>，包括国内支持的公司清单、工具及使用资料等。&lt;/p>
&lt;h3 id="怎样做出伟大的成就">怎样做出伟大的成就？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-30-40.png"
width="636"
height="422"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>
昨日读了保罗格雷厄姆（《黑客与画家》的作者）新文章一篇&amp;mdash;-&lt;a class="link" href="http://paulgraham.com/greatwork.html" target="_blank" rel="noopener"
>《怎样做出伟大的成就》&lt;/a>（实际上我觉得可以译为“怎样牛逼”）。&lt;/p>
&lt;p>虽然标题看起来略有鸡汤味儿，但读起来还是比较实惠的。&lt;/p>
&lt;p>文章从发现和选择要做的事情开始，谈论了一些具体的方法。然后展开讨论了在方法执行过程中可能会遇到的一些问题，以及如何克服。甚至介绍了一些心理暗示技巧。&lt;/p>
&lt;p>文章比较长，我个人体会比较深的点如下：&lt;/p>
&lt;ol>
&lt;li>一个人做什么才能牛逼？答：做自己天赋里有的东西，就是找一些你既有能力又非常感兴趣的事情。&lt;/li>
&lt;li>要养成“自驱”的习惯。让“工作”来源于自己的认知，而不是别人告诉你、让你做的事情。主动，而不是等待。&lt;/li>
&lt;li>拥有一个属于自己的“项目”是一个找到“自驱”的最佳方法。不断观察自己对什么有强烈的好奇心（甚至好奇到大多数人不能理解）可以找到这样的“项目”。&lt;/li>
&lt;li>选定要做的“项目”还应遵循兴奋原则，即：做自己愿意用的产品，写自己想读的故事，而不是执着于满足想象中的不存在的复杂需求。&lt;/li>
&lt;li>注重积累效应，日拱一卒、长期积累，每天写一篇文字，一年下来就是一本书。&lt;/li>
&lt;li>周期性审视自己做的事情，确认它是否偏离了目标（在做自己最想做的事情），及时修正。&lt;/li>
&lt;li>行动的重要性，很多人实际上可以更牛逼，但是因为“谦虚”和“恐惧”导致的拖延使得计划一再搁浅，浪费了时间。&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="http://t.cn/A60wPLwI" target="_blank" rel="noopener"
>jabbr.ai&lt;/a>是一个针对拳击比赛的打击判定进行训练的AI模型，可以在智能手机上运行，实时监测视频中拳击选手的打击得分情况，即时进行统计，多个智能手机多视角同时运行可以快速生成总结性视频。模型提供约50种监测参数（质量、步法、压力等）可用于运动员训练分析。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-31-11.png"
width="908"
height="509"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/li>
&lt;li>浏览器地址栏快捷操作，我今天才知道原来浏览器地址栏还有这些快捷操作（火狐浏览器支持的最多，我测试的Edge浏览器也支持部分操作）：
&lt;ol>
&lt;li>输入*星号，可以搜索你的收藏夹；&lt;/li>
&lt;li>输入^，可以搜索历史浏览记录；&lt;/li>
&lt;li>输入%，可以搜索当前打开的tab页；&lt;/li>
&lt;li>输入？，可以显示所有搜索建议； ​​​&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a class="link" href="https://video.weibo.com/show?fid=1034:4923133602234429" target="_blank" rel="noopener"
>树莓磁带&lt;/a> 一种用树莓派做的小硬件，为了支持在老式电脑中加载程序（之前用磁带存储的那种）。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-31-40.png"
width="607"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/li>
&lt;li>两招教你“永久”关闭 Windows 自动更新（任选一个都可以）：
&lt;ol>
&lt;li>通过执行代码的方式：&lt;code>reg add “HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings” /v FlightSettingsMaxPauseDays /t reg_dword /d 10000 /f&lt;/code> Win+R 打开「运行」对话框，输入 &lt;code>cmd&lt;/code> 后按下 &lt;code>Ctrl+Shift+Enter&lt;/code>，在弹出来的命令行窗口中输入上面的代码，并敲击回车。命令里的 10000 代表停止更新的天数。&lt;/li>
&lt;li>手动把电脑时钟日期改成 2050 年（为了防止时间自动校准，可以暂时断开网络），然后在 Windows 更新设置界面里面点击“延迟更新”，完成设置后再把电脑时间调回来就行了。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a class="link" href="https://pkg-size.dev/" target="_blank" rel="noopener"
>pkg-size&lt;/a>，一个在线监测 npm 包大小的网站，可以实时查看一个 npm 包的真实依赖，网站利用了 web容器技术，直接在浏览器里执行 npm install 操作。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-32-07.png"
width="1011"
height="636"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="381px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=degreat.3e" target="_blank" rel="noopener"
>3e&lt;/a>，一个 VS Code 插件，可以让你在编辑器里直接浏览 3d 模型，基于 webgl 实现。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-041-%E6%9C%9F/2023-07-19-09-32-58.png"
width="704"
height="468"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 039 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-039-期">机器文摘 第 039 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.cs.columbia.edu/~hgs/etc/writing-bugs.html" target="_blank" rel="noopener"
>关于写作的通用问题&lt;/a>，“元技能”一般指比普通技能更高阶的技能，我理解为可产生技能的技能，此类技能并不会随着外部环境的高速发展而被淘汰。比如写作就算是一种元技能，当不知道该训练和提升什么技能的时候，将时间花在“元技能”的提升上准没有错。这篇文章主要讲解英文写作的常见问题，但是有些我觉得对于中文也适用。比如文章开头提到的两个基本原则：“在写之前就弄清楚自己想表达什么”、“即便是你已经写完了一整篇，如果没能表达你的意思那也是废纸”。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-13-52-23.png"
width="294"
height="171"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="412px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://jmmv.dev/2023/06/fast-machines-slow-machines.html" target="_blank" rel="noopener"
>新电脑快还是老电脑快？&lt;/a>，上周有博主在twitter发布了一个视频吐槽了一个我也困惑很久的事情。作者展示了他在一台古董电脑上运行Windows NT 3.5 的情况，视频中的电脑基本可以做到秒开程序，然后又展示了一台配备了Windows 11的Surface平板电脑，操作起来界面响应有明显延迟。后者cpu频率为前者的4倍，内存容量为前者的6倍。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-13-55-53.png"
width="507"
height="228"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="533px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>现在的硬件性能动辄就比之前的老硬件几十甚至上百倍的提升，但是我们的交互体验呢？能够秒开的程序甚至还不如二十年前的老爷机。
后来这事儿在twitter引发了一些争议，有人认为现在的软件确实吃掉了硬件提升的性能，对体验来说提升不足。也有人说现在的体验与以往不可同日而语，这样的对比不公平也没有意义。&lt;/p>
&lt;p>博主不得不专门写了一篇文章来回应，详细记录了作者认为更加合理的对比过程。&lt;/p>
&lt;p>我个人认为首要原因就是随着硬件性能的提升，软件开发者的精力已经逐渐从性能向开发效率倾斜了。由于现在硬件成本确实低廉，软件迭代周期变得越来越短，软件开发者也越来越没有动力做出极致挖掘硬件性能的软件。&lt;/p>
&lt;p>不信你看，现在越来越多的应用程序不再使用原生开发，而是采用了可以“跨平台”的web技术。&lt;/p>
&lt;p>这样使得软件界面的响应直接下降了一个数量级。（我在使用vscode的时候甚至还会遇到打字卡顿慢慢弹出字符的情况。）&lt;/p>
&lt;p>另外，复杂的设计模式和软件架构，也吃掉了不少硬件性能，因为每增加一层抽象，都会消耗资源，而现在各种复杂的架构就是拼命地增加抽象层。&lt;/p>
&lt;p>希望以后市场能够鼓励开发者多做挖掘硬件性能的事情吧。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://faultlore.com/blah/text-hates-you/" target="_blank" rel="noopener"
>文字渲染比你想象的要复杂&lt;/a>，这篇文章的作者曾负责火狐浏览器的文字渲染引擎，他写这篇文字的目的是科普一下关于文字渲染的一些基本技术和困难。在阅读之前，我也简单的以为，文字渲染就是把对应的字符字形从字体库中取出来然后绘制到相应的位置即可，但实际情况确实比这要复杂得多。比如，文中提到的关于“连字符”的处理、“抗锯齿”、“书写方向”等问题，每一个都是开发者的头发杀手。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-12-47.png"
width="574"
height="307"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/rrweb-io/rrweb" target="_blank" rel="noopener"
>rrweb&lt;/a>，可在网页上记录用户行为并导出视频文件。可用于：排查用户错误、保险业务签署、内部风控、用户交互分析等。rrweb采用虚拟化转换DOM、记录变更和操作过程，并通过链表回放数据。存储最小化、回放可快进且跳过无效行为。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-13-31.png"
width="529"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/zhaoyun0071/DragGAN-Windows-GUI" target="_blank" rel="noopener"
>DragGAN-Windows-GUI&lt;/a>，DragGAN（上周介绍过的开源模型，可以针对图片进行交互式拖动修改）的懒人包，解压直接用，内置17个模型。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-13-53.png"
width="690"
height="421"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="393px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://neal.fun/deep-sea/" target="_blank" rel="noopener"
>deep-sea&lt;/a>，这个网页可以让你查看海洋各个深度都是有哪些生物，果然是越往下越看不清，所以大家就随便长长了，不讲究好看不好看了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-14-11.png"
width="690"
height="501"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/li>
&lt;li>&lt;a class="link" href="http://elementsofprogramming.com/" target="_blank" rel="noopener"
>电子书《Elements of Programming》&lt;/a>，这本老书在出版十年后推出了免费pdf版。中文译作《编程原本》，旨在介绍通用的程序设计原理和技巧，重点关注程序设计的基本元素和抽象概念。这本书的核心思想是将程序设计看作是一种构建和操作抽象概念的过程。它强调程序设计应该建立在数学原理和精确性基础上，通过抽象和泛化来创建可重用、可扩展和可维护的软件。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-14-52.png"
width="377"
height="542"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="166px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/loft-sh/devpod" target="_blank" rel="noopener"
>devpod&lt;/a>，Github 的 Codespaces 和微软的 VSCode DevContainers 给开发者提供了即开即用的云端开发环境。现在，他们的开源平替来了，devpod 是一个开源的开发环境容器，可以方便地在任意客户端（Mac、Win、Linux）或云端主机创建体验一致的开发环境，并且可以与VSCode和Jetbrains等IDE直接集成。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-15-25.png"
width="690"
height="266"
loading="lazy"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="622px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://uploads-ssl.webflow.com/5ac6b7f2924c656f2b13a88c/6435aabdc0a041194b243eef_Current%20Best%20Practices%20for%20Training%20LLMs%20from%20Scratch%20-%20Final.pdf" target="_blank" rel="noopener"
>从零开始训练大语言模型的最佳实践&lt;/a>，训练大语言模型的技术白皮书，从基本概念和技术讲起，教你训练大语言模型。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-15-45.png"
width="656"
height="849"
loading="lazy"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="185px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/yardenshafir/WinDbg_Scripts/blob/master/windbg_the_fun_way.pdf" target="_blank" rel="noopener"
>windbg&lt;/a>，一本电子书，讲了很多 windbg 调试器的高级用法，市面上很少见。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-039-%E6%9C%9F/2023-07-04-14-16-44.png"
width="620"
height="319"
loading="lazy"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="466px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 040 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-040-期">机器文摘 第 040 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="前端代码检查插件eslint和美化插件prettier的冲突">前端代码检查插件&lt;code>ESLint&lt;/code>和美化插件&lt;code>Prettier&lt;/code>的冲突
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-02-40.png"
width="1900"
height="1008"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>
在使用VSCode等现代化编辑器进行前端开发的时候，很多工程样板都默认开启了代码检查和自动格式化的功能，其中以 ESLint 插件和 Prettier 插件为主。&lt;/p>
&lt;p>之前有一阵子我总是困惑这两个插件的区别，甚至如果配置不好的话，还会有冲突。&lt;/p>
&lt;p>比如 Prettier 插件会在你保存源码的时候按照既定规则进行“美化”代码，如去除行尾分号、增加表达式中的空格等等。此时如果ESLint插件的规则配置不同的话，编辑器就会报错并提示要进行“修复”，然而就在你“修复”之后，刚&lt;code>Ctrl+S&lt;/code>保存之后，又傻眼了，因为 Prettier 又对代码进行了“美化”。&lt;/p>
&lt;p>我周末特意花时间研究了一下，梳理了一下这两个插件的关系以及他们的分工。&lt;/p>
&lt;p>首先，他们的职责定位不同：ESLint 用于检查代码编写是否符合某种预定义的规范，可以进行十分详尽的配置和多项检查，比如定义的变量如果未使用可以作为一种警告或者错误，其职责定位以检查为主。而 Prettier 的职责侧重于格式化（美化）代码，对于编写代码的样式如 tab 缩进量、行尾要不要分号、字符串用单引号还是双引号等可以进行统一格式化，一般用于在代码保存的时候进行快速统一样式。&lt;/p>
&lt;p>所以两者可以配合使用，但开头提到的规则冲突需要注意。&lt;/p>
&lt;p>我个人的习惯是，将两个插件的配置文件里的配置项进行匹配（规则调整为一致），因为我在美化时关注的项并不太多，所以编写这两个配置文件不算费劲。&lt;/p>
&lt;p>而网上有人提出了更好的办法，即通过扩展插件的方式，使得 ESLint 自动获取 Prettier 的规则，以自动统一两者的行为。&lt;/p>
&lt;p>&lt;a class="link" href="https://rileycai.com/%e4%b8%8d%e4%bb%a5%e8%a7%84%e7%9f%a9%ef%bc%8c%e4%b8%8d%e8%83%bd%e6%88%90%e6%96%b9%e5%9c%86-%e5%bd%bb%e5%ba%95%e6%90%9e%e6%87%82-eslint-%e5%92%8c-prettier/" target="_blank" rel="noopener"
>关于 ESLint 和 Prettier 的具体分析文章和操作建议可以看这一篇文章：&lt;/a>&lt;/p>
&lt;h3 id="说一说我现在的知识管理工具和流程">说一说我现在的知识管理工具和流程
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-03-27.png"
width="302"
height="517"
loading="lazy"
class="gallery-image"
data-flex-grow="58"
data-flex-basis="140px"
>
Hacknews 上有网友说&lt;a class="link" href="https://news.ycombinator.com/item?id=36609641" target="_blank" rel="noopener"
>Evernote几乎辞退了它的所有员工&lt;/a>，才想起来我已经有好几年没用过 Evernote 了。之前大概有将近十年的时间都在使用Evernote（但都是免费用户）。主要使用场景是记录个人的工作日志和借助浏览器插件剪藏一些值得收藏的文章。&lt;/p>
&lt;p>后来随着 Evernote 的限制越来越多，体验逐渐下降。我就迁移到了使用纯文本作为知识记录载体的路线上了。&lt;/p>
&lt;p>期间使用过 Emacs 的 org 模式，也尝试过 vim 的 wiki 插件，最后选择了现在这个 VSCode + GitHub 的方案，已稳定使用了两年时间。&lt;/p>
&lt;p>具体流程如下：
1、使用 VSCode + &lt;a class="link" href="https://foambubble.github.io/foam/" target="_blank" rel="noopener"
>foam&lt;/a> 、&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one" target="_blank" rel="noopener"
>MarkdownAllinOne&lt;/a> 等插件实现对 Markdown 的高效编辑，可以实时预览排版效果，foam实现了类似 &lt;a class="link" href="https://obsidian.md/" target="_blank" rel="noopener"
>Obsidian&lt;/a> 的文章双向链接和知识关系图谱。我主要使用 Markdown 记录日志和编写知识卡片用于存放个人吸收的信息。
2、所有内容存放在一个 git 仓库中，同步到 GitHub 上的个人私有仓库，这样可以省去对接网盘的麻烦。
3、对于互联网上阅读到的有用文章，使用浏览器插件 &lt;a class="link" href="https://microsoftedge.microsoft.com/addons/detail/web-clipper/opejamnnohhbjflpbhnmdlknhjkfhfdp" target="_blank" rel="noopener"
>Web Clipper&lt;/a>，可以完整的抓取页面内容到指定的后端存储，这个插件我最喜欢的点是它可以将文章抓取到你指定的GitHub仓库，并作为Issue提交。
4、来不及看的信息就先抓取到 Issue ，然后等有时间进行整理，形成自己的知识卡片后再关闭该 Issue 。&lt;/p>
&lt;p>这套工具及流程的优点：
1、完全免费，不产生任何费用，而且体验不亚于收费软件。
2、自由度高，存储后端可以自己随意选择，如果嫌 GitHub 麻烦的话，可以自己用网盘同步文件夹。
3、纯文本载体，这个算是优点吧，格式开放，不会存在别的编辑器打不开的情况。
4、数据私有，数据随时都在本地（云端的仅作为备份和同步中转），不用担心 SaaS 供应商跑路（你看现在的Evernote）。&lt;/p>
&lt;p>欢迎大家讨论。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/TransparentLC/WechatMomentScreenshot" target="_blank" rel="noopener"
>朋友圈截图生成工具&lt;/a>，可以帮你生成逼真的朋友圈截图，可定制头像、评论、点赞个数等细节。收藏&lt;a class="link" href="https://akarin.dev/WechatMomentScreenshot/" target="_blank" rel="noopener"
>这个地址&lt;/a>，以后再也不怕被群里晒孩子的家长或者搞活动的商家逼着发朋友圈集赞了。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-04-12.png"
width="690"
height="1227"
loading="lazy"
class="gallery-image"
data-flex-grow="56"
data-flex-basis="134px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://86box.net/" target="_blank" rel="noopener"
>86box&lt;/a>，老式 x86 架构计算机模拟器，与 Virtualbox 等虚拟化技术不同的是，86box采用纯软件模拟的方式，实现了经典老式 cpu （如 AMD Am486DX4）的各种技术细节，甚至是当时的硬件缺陷（有些老游戏的 hack 需要这些缺陷）。可以完美复现一台上世纪 90 年代的经典 DOS PC ，用来复古怀旧游戏是再合适不过了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-04-26.png"
width="553"
height="371"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="357px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ztxz16/fastllm" target="_blank" rel="noopener"
>fastllm&lt;/a>，fastllm是纯c++实现，无第三方依赖的高性能大模型推理库（待测试验证）。据宣称：6~7B级模型在安卓端上也可以流畅运行，支持python调用，chatglm-6B级模型单卡可达10000+token / s，支持glm, llmam, moss基座，手机端流畅运行。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-05-17.png"
width="875"
height="356"
loading="lazy"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="589px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://photoai.com" target="_blank" rel="noopener"
>PhotoAI&lt;/a>，作者说，他为这个网站大概写了14000行PHP代码，样式全写在了&lt;code>&amp;lt;style&amp;gt;&lt;/code>标签里，JS全写在&lt;code>&amp;lt;script&amp;gt;&lt;/code>标签里，除了&lt;code>jQuery&lt;/code>没用任何框架，就连布局也是使用&lt;code>float:left&lt;/code>这种老式的浮动实现。然而这个网站确能给他带来每月差不多 &lt;em>6万刀&lt;/em> 的收入。这是不是在吹牛。这个网站的业务是：使用AI生成完全没有任何版权问题的各种人像照片。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-05-41.png"
width="690"
height="617"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://makepad.nl/makepad/examples/ironfish/src/index.html" target="_blank" rel="noopener"
>Ironfish synth&lt;/a>，用rust写的在线合成器，虽然感觉像个 Demo 但完成度很高，音源部分具有两个振荡器（可选正弦波、方波、锯齿波等）和一个噪波通道，滤波器、效果器齐全，另外还有一个可视化音序器。可基于键盘直接演奏。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-040-%E6%9C%9F/2023-07-11-13-05-59.png"
width="690"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 038 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/</link><pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-038-期">机器文摘 第 038 期
&lt;/h1>&lt;h2 id="研究">研究
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.polygon.com/23690187/discord-ai-chatbot-clyde-grandma-exploit-chatgpt" target="_blank" rel="noopener"
>ChatGPT的“奶奶漏洞”&lt;/a>，奶奶漏洞来源自一个用户说他已经过世的奶奶是凝固汽油弹工厂的工程师，用户让 ChatGPT 用他奶奶说睡前故事的形式，详细介绍了凝固汽油弹的制作方法。以此来绕过 ChatGPT 的安全审查，结果当然是，他得逞了。后来还有网友做了试验，以同样的方式可以套取 Windows 各个版本的序列号。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-53-23.png"
width="720"
height="489"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/li>
&lt;li>国外也有“垃圾佬”，这篇&lt;a class="link" href="https://l4rz.net/running-nvidia-sxm-gpus-in-consumer-pcs/" target="_blank" rel="noopener"
>《怎样低成本搭建深度学习电脑》&lt;/a>的文章，介绍了作者怎样通过在二手网站上“捡垃圾”搭建出了性能良好且便宜的GPU工作站。 值得一提的是，作者购买的主要渠道竟然来自国内的著名二手物品交易平台，某鱼。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-54-05.png"
width="690"
height="459"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="长文">长文
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>回顾这些年软件研发的历程，凡是能够做成的软件，无一例外都是抓住了真正存在的需求。这样的需求未必很宏大或者华丽，但一定不是想象种的伪需求。仔细分析之后就会发现，在一个软件产品的生命周期里，开发者所面临的真正（或者说正确的）需求很少，因为找到它们十分不易，它们周边布满了被人们主观意识强加上的伪需求。&lt;a class="link" href="https://cerebralab.com/Imaginary_Problems_Are_the_Root_of_Bad_Software" target="_blank" rel="noopener"
>《伪需求是糟糕软件的根源》&lt;/a>，文章探讨了软件开发中存在的一个问题，即虚构的问题（我将之译为：伪需求）如何导致糟糕的软件结果。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-56-35.png"
width="353"
height="179"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有没有考虑过一个问题，即：为什么随着科技的发展和生产力的提升，人们不是越来越清闲，反而越来越劳累了？这里有篇文章探讨了一些深层次的原因，&lt;a class="link" href="https://theanarchistlibrary.org/library/david-graeber-bullshit-jobs" target="_blank" rel="noopener"
>《狗屁工作》&lt;/a>，此文写于 2013 年，作者是 David Graeber （一名人类学教授）。文章讨论了现代社会中存在的一种现象，即许多人在工作中感到他们所从事的工作毫无意义，没有真正的价值和目的。这些工作被称为&amp;quot;狗屁工作&amp;quot;，作者试图探究狗屁工作的存在原因和对个体和社会的影响。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-56-57.png"
width="602"
height="854"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/laishulu/Sarasa-Term-SC-Nerd" target="_blank" rel="noopener"
>Sarasa Term SC Nerd&lt;/a>，写中文Markdown文件的时候，最怕遇到表格，因为编辑器按照一个中文字符的宽度等于两个英文字符的宽度进行计算，而很多字体在设计时未考虑严格按照这种2:1的宽度比例设计字形，导致在Markdown在编辑状态时的表格分割线错位，看起来十分头疼。经过多方对比，我终于找到了让自己满意的等宽字体，支持中英文字符2：1宽度比例，中文为黑体，英文字符也特别适合写代码。此外还整合了Nerd fonts，支持在终端显示各种漂亮图标。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-58-24.png"
width="690"
height="187"
loading="lazy"
class="gallery-image"
data-flex-grow="368"
data-flex-basis="885px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://reviewgpt.net" target="_blank" rel="noopener"
>ReviewGPT&lt;/a> 写作文、写报告、写邮件，生活中充满了各种写作任务。ReviewGPT 基于 gpt 模型，可为你的文章进行打分、评价，提出修改意见，甚至还可以扮演莎士比亚、金庸等知名作家，帮助你重新撰写，快速提升文章质量。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-58-38.png"
width="690"
height="394"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/binpash/try" target="_blank" rel="noopener"
>try&lt;/a>，刚发布的一个命令行工具，目标是允许你执行命令的时候先检查其执行的后果，然后再决定是否让命令真正生效。真正起到了安全保护的效果。官方介绍这个命令是基于 Linux 的命名空间（通过 unshare ）和 overlayfs 联合文件系统等技术实现。并特别提醒并非基于沙盒，所以还是谨慎执行危险操作吧。比如&lt;code>try rm rf /*&lt;/code>。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-15-59-26.png"
width="831"
height="467"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="427px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/XingangPan/DragGAN" target="_blank" rel="noopener"
>DragGAN&lt;/a>, 通过拖动就可以完全操纵图像的 AI 模型，现已开放源码！ DragGAN 是由谷歌、麻省理工学院和马克斯普朗克研究所创建的一种新的人工智能模型。可以让你轻松通过点击拖动等简单的交互操作就能改变拍摄对象的姿势、形状和表情。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-16-00-25.png"
width="598"
height="399"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://flameshot.org/" target="_blank" rel="noopener"
>flameshot&lt;/a>，一个超强的免费截图软件，可以像任何一个截图工具一样截图，最重要的是还有一些附加功能，按一下数字图标，就可以在屏幕上按数字顺序自动生成步骤图示，非常适合生成操作步骤说明。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-038-%E6%9C%9F/2023-06-27-16-01-00.png"
width="580"
height="374"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 037 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/</link><pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-037-期">机器文摘 第 037 期
&lt;/h1>&lt;h2 id="研究">研究
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://snap-research.github.io/SnapFusion/" target="_blank" rel="noopener"
>SnapFusion&lt;/a> 文本到图像的扩散模型可以从自然语言描述中创建令人惊叹的图像。然而，这些模型很大，需要高端 GPU 在服务端运行模型。SnapFusion提出了一种通用方法，可以在移动设备上运行的文本到图像扩散模型，且出图时间不到2秒。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-55-06.png"
width="609"
height="899"
loading="lazy"
class="gallery-image"
data-flex-grow="67"
data-flex-basis="162px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://framer.com/ai" target="_blank" rel="noopener"
>Framer&lt;/a> 发布了 AI 工具，直接根据文字需求生成页面，我试了一下，对于个人博客、产品介绍页面等静态展示类型的页面，生成的效果还是十分理想的，而且同步提供桌面端和移动端页面。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-55-33.png"
width="599"
height="710"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="202px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://notes.dt.in.th/HDRQRCode" target="_blank" rel="noopener"
>比&lt;code>#ffffff&lt;/code>还“白”的“超级白”&lt;/a>，这里有网友介绍了一个方法，可以显示更高对比度的二维码（以方便用户扫描识别），据说白的程度超出了sRGB颜色范围，前提是你的显示设备支持HDR。作者的思路是用一段HDR视频在网页中伪装成显示二维码的图片。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-56-11.png"
width="690"
height="305"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="542px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://rwmj.wordpress.com/2023/06/14/i-booted-linux-292612-times/" target="_blank" rel="noopener"
>我在21小时内重启系统29万次&lt;/a>，Linux 6.4内核有一个bug可能导致启动时挂起，但概率很低。为了复现bug，Richard WM Jones重启了29万次电脑，最终找到了问题。这让我想起了之前修改不容易复现Bug的艰辛。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-56-28.png"
width="690"
height="735"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="225px"
>&lt;/li>
&lt;li>我发现一个用chatGPT翻译整段文字的小技巧，那就是在他翻译完成之后，再将这段话发给他，让他根据通顺程度和合理性进行二次润色，出来的结果就好很多了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-58-53.png"
width="717"
height="648"
loading="lazy"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
>&lt;/li>
&lt;li>Python写代码很爽，但是想打包发布成果的时候就稍微麻烦一些了，毕竟一大堆环境依赖和包依赖。我之前一直用的是PyInstaller作为打包工具，但是现在我又发现了这个&lt;a class="link" href="https://github.com/Nuitka/Nuitka" target="_blank" rel="noopener"
>Nuitka&lt;/a>。它的打包原理是：直接把 Python 代码转成 C 代码再编译，这样打包出来的成果占用小、执行效率也高，尤其适合PyQt编写的桌面程序。另外，著名的 Blender 就是用 Nuitka 编译的。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-59-12.png"
width="428"
height="272"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="377px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="长文">长文
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.raptitude.com/2022/01/everything-must-be-paid-for-twice/" target="_blank" rel="noopener"
>你买的每样东西都需要支付两次成本&lt;/a>，这篇在Hacker News上的文章引起我的强烈共鸣。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-15-59-33.png"
width="600"
height="400"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/li>
&lt;/ul>
&lt;p>它提出了一个有趣的观点，我以前从未意识到：&lt;/p>
&lt;p>每样东西都需要支付两次成本。&lt;/p>
&lt;p>通常，我们只关注第一次支付的成本，也就是购买时花的钱，比如买一台相机、一架钢琴或一本小说。&lt;/p>
&lt;p>然而，作者指出，如果你不支付第二次的成本，你之前花的钱就等于打水漂了。&lt;/p>
&lt;p>第二次成本指的是，你需要花时间和精力去充分使用你所购买的物品。&lt;/p>
&lt;p>比如认真阅读一本书，练习钢琴以提高演奏水平等等。&lt;/p>
&lt;p>然而，我们常常只停留在第一次购买时的满足感上，然后追求下一个。&lt;/p>
&lt;p>随着时间的推移，大量未支付第二次成本的物品使我们积累了一种无形的债务。&lt;/p>
&lt;p>为此经常感到挫败。&lt;/p>
&lt;p>这种挫败感促使我们寻求那些能够刺激我们的短期享受，比如玩手机、享用美食。&lt;/p>
&lt;p>进一步导致没有时间支付第二次成本。&lt;/p>
&lt;p>那么，有什么办法可以改变这种情况吗？&lt;/p>
&lt;p>作者说，唯一的解决办法就是控制购买欲望，强迫自己安排时间来履行第二次支付的责任。&lt;/p>
&lt;p>尽管这听起来可能有些不舒服，但如果我们能克服这种不舒服的临界点，例如学会一首乐曲，耐心读完一本书，我们将会获得意想不到的奖励时刻。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.ratatype.com" target="_blank" rel="noopener"
>ratatype&lt;/a>，在线键盘盲打指法练习，有完整的练习教程，从初级到高级都有。有点儿像Dos时代的著名打字练习软件TT，不过是网页版的。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-16-00-11.png"
width="690"
height="360"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="460px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://play0ad.com/download" target="_blank" rel="noopener"
>0A.D.&lt;/a>，帝国时代是个经典游戏，这里有个开源版，名字叫做0AD，由Wildfire Games开发，虽然是免费开源的游戏，但是效果和可玩性都非常高，适合在周末的午后来一把怀旧局。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-16-00-26.png"
width="690"
height="405"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://landing.love" target="_blank" rel="noopener"
>landing.love&lt;/a>，一个专门收集各种网页动画效果的网站，目前已收录超过400个具有新颖创意动效的网站，并配有截图和录屏视频。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-16-00-47.png"
width="590"
height="486"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="291px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/princeton-vl/infinigen" target="_blank" rel="noopener"
>infinigen&lt;/a>，一款面向计算机视觉研究的3D场景自动生成器，提供多样且高质量的3D训练数据。基于Blender，免费且开源。可以通过重写随机化的默认参数来完全控制资产生成。提供了对自然界中多种对象和场景的生成器，包括植物、动物、地形以及火、云、雨、雪等自然现象。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-16-01-41.png"
width="951"
height="522"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://yjdoc2.github.io/8086-emulator-web/compile" target="_blank" rel="noopener"
>8086-emulator-web&lt;/a> ，用js编写的的8086 cpu模拟器，支持汇编语言在线编写、编译和调试运行，是一个学习汇编语言和理解计算机原理的好工具。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-037-%E6%9C%9F/2023-06-20-16-01-04.png"
width="690"
height="320"
loading="lazy"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="517px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 036 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-036-期">机器文摘 第 036 期
&lt;/h1>&lt;h2 id="研究">研究
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://video.weibo.com/show?fid=1034:4911535232057363" target="_blank" rel="noopener"
>软驱阵列演奏音乐&lt;/a>，国外大神用512个软驱、16个硬盘、4个扫描仪，组装成阵列，通过编程的方式控制电机震动发出声音，组成各声部。这么多软驱，让我想到了退休老干部合唱团。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-49-03.png"
width="1555"
height="926"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="403px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://video.weibo.com/show?fid=1034:4564677670141974" target="_blank" rel="noopener"
>大脑能像身体那样锻炼吗？&lt;/a>，如何训练大脑？提高记忆力、注意力和智力！这个视频进行了讲解，总之就是，用进废退，改变日常默认行动，让大脑动起来。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-49-59.png"
width="743"
height="450"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://gaultier.github.io/blog/x11_x64.html" target="_blank" rel="noopener"
>用纯汇编写一个GUI&lt;/a>，跟随这篇教学文章，通过编写图形界面的方式来学习汇编语言吧。顺便，作者想挑战一下，最小的GUI程序其可执行二进制文件能有多小。（现在的可执行文件动不动就好几十上百MB）​。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-50-39.png"
width="1046"
height="463"
loading="lazy"
class="gallery-image"
data-flex-grow="225"
data-flex-basis="542px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.betacat.io/post/2023/06/summarize-hacker-news-by-chatgpt" target="_blank" rel="noopener"
>让 ChatGPT 帮我们总结 Hacker News&lt;/a>，让AI每天帮我总结新闻摘要，这个想法我已经考虑很久了，现在已经有人做了实现。这篇文章介绍了一个开源静态网站的实现，它利用 ChatGPT 的总结能力，直接将每条Hackernews的新闻用一两句话总结出来，然后发布到GithubPages 可以节约我们每天看新闻的时间。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-51-29.png"
width="891"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="517px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.web3brand.io/p/maximize-unregretted-user-time" target="_blank" rel="noopener"
>马斯克专访：推特的混乱过去了，现在的目标是最大化用户无悔时间！&lt;/a>，我不喜欢看八卦，但是科技的除外。马斯克收购 Twitter 几个月过去了，大家还在等着看笑话，但是为什么没等到，以及开掉一半人之后效率却提升那么多？
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-52-02.png"
width="680"
height="417"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="391px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/AI4Finance-Foundation/FinGPT" target="_blank" rel="noopener"
>FinGPT&lt;/a>，一个面向金融领域的开源语言模型，采用以数据为中心的方法，为研究人员和实践者提供易于使用的资源，致力于做金融领域的chatGPT。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-52-48.png"
width="822"
height="462"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="427px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/facebookresearch/audiocraft" target="_blank" rel="noopener"
>Audiocraft&lt;/a>，facebook发布的一个PyTorch库，用于音频生成的深度学习研究。目前，它提供了用于从文本生成音乐的MusicGen代码和模型。模型使用2万小时正版授权音乐训练。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-53-34.png"
width="816"
height="350"
loading="lazy"
class="gallery-image"
data-flex-grow="233"
data-flex-basis="559px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/mljar/mercury" target="_blank" rel="noopener"
>Mercury&lt;/a>，在 Jupyter Notebook 中构建 Web 应用程序，允许您在Python笔记本中添加交互式小部件，然后将笔记本发布为带交互界面的Web应用程序。我的感受是，Mercury就是 notebook版的&lt;a class="link" href="https://github.com/gradio-app/gradio" target="_blank" rel="noopener"
>gradio&lt;/a> ​​​。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-53-58.png"
width="805"
height="421"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/reactive-python/reactpy" target="_blank" rel="noopener"
>ReactPy&lt;/a>，React是最流行的用于构建UI的前端框架，现在所有Python开发人员都可以使用它。比起gradio，这个reactpy的抽象层级更低一些，自由度更高了，我猜测目标用户应该是不喜欢写前端代码但是又希望掌控页面细节的python程序员。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-56-24.png"
width="632"
height="148"
loading="lazy"
class="gallery-image"
data-flex-grow="427"
data-flex-basis="1024px"
>&lt;/li>
&lt;li>&lt;a class="link" href="http://ggml.ai/" target="_blank" rel="noopener"
>GGML&lt;/a>，一个用于机器学习的张量库，采用纯C++实现，无其他依赖项。旨在在普通硬件上实现大型模型和高性能。它同时也是 llama.cpp 和 whisper.cpp 的底层库。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-16-57-18.png"
width="629"
height="327"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Genymobile/scrcpy" target="_blank" rel="noopener"
>Scrcpy&lt;/a>，一个让人相见恨晚的app，可以通过USB或TCP/IP连接镜像Android设备的视频和音频，并允许使用计算机的键盘和鼠标来控制设备。它不需要任何root权限，并且兼容Linux、Windows和macOS操作系统。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-17-02-19.png"
width="408"
height="589"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="166px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://maketafi.com/ai" target="_blank" rel="noopener"
>Tafi&lt;/a>，通过自然语言生成3D模型，质量号称接近AAA级游戏，可以导出创建的角色到Blender、Unreal 或 Unity中。 ​​​
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-17-02-52.png"
width="1080"
height="608"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Hufe921/canvas-editor" target="_blank" rel="noopener"
>canvas-editor&lt;/a>，一个基于 canvas/svg 实现的富文本编辑器，在市面上，使用 Canvas 实现整个编辑器的开源项目并不常见，大多数情况下仍然使用 DOM 来实现。使用 Canvas 的最显著特点是其出色的性能，但实现起来的成本也更高。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-17-15-39.png"
width="1200"
height="668"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://markmap.js.org%e2%80%8b%e2%80%8b" target="_blank" rel="noopener"
>markmap.js&lt;/a>，一个用markdown文本制作思维导图的工具，提供了vscode的插件可直接在编辑器预览。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-036-%E6%9C%9F/2023-06-14-17-16-02.png"
width="611"
height="458"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 035 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/</link><pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-035-期">机器文摘 第 035 期
&lt;/h1>&lt;h2 id="研究">研究
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.reproof.app/blog/notes-apps-help-us-forget" target="_blank" rel="noopener"
>笔记帮我们记住还是忘记？&lt;/a>这篇文章讨论了笔记对帮助我们遗忘的作用。作者认为，随着时间的推移，我们无法记住所有的事情，但是只要我们记录了重要的信息，就可以在需要时再次查找，因此笔记实际上帮助我们遗忘。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-09-37.png"
width="1173"
height="488"
loading="lazy"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="576px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://research.nvidia.com/labs/dir/neuralangelo/" target="_blank" rel="noopener"
>高保真神经表面重建&lt;/a>，Nvidia 新发布的这个 Neuralangelo 有些猛，随便给一个视频就能进行精细3D建模，也许要不多久激光点云技术就要淘汰了。值得关注 ！
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-12-49.png"
width="936"
height="465"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="483px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Neo-Desktop/WindowsXPKg" target="_blank" rel="noopener"
>Windows XP 激活算法被破解&lt;/a>， XPKeygen是一个可以随意生成XP有效安装密钥的程序，当前的电脑可能用不到了。不过可能还有一些老旧的设备，只能通过 Windows XP 来操作，这时候这个东西就派上用场了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-17-33.png"
width="610"
height="285"
loading="lazy"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="513px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.v2ex.com/t/944717" target="_blank" rel="noopener"
>一个整活儿的开源编辑器&lt;/a>，data:text/html;base64,PGh0bWwgY29udGVudGVkaXRhYmxlPmVkaXQgbWU8L2h0bWw+ 把这个代码粘到浏览器地址栏，竟然是个记事本app，如果从IDE拷贝代码过去，竟然还支持代码高亮。。。。加入到收藏夹即可食用。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-20-19.png"
width="663"
height="347"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://mymodernmet.com/sea-turtle-birch-aquarium-3d-printed-brace" target="_blank" rel="noopener"
>3D打印拯救海龟&lt;/a> ，2017年，伯奇水族馆与加州大学圣地亚哥分校图书馆的数字媒体实验室合作。他们一起创造了一种首创的3D打印支架，以固定她的外壳上的缝隙。现在，六年后，这种生物及其照顾者继续从这项发明中获益。这只海龟最近接受了年度检查，健康状况良好。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-21-40.png"
width="613"
height="372"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://kuenzi.dev/toothbrush/" target="_blank" rel="noopener"
>破解“智能”牙刷&lt;/a> 国外一个博主记录了他破解自己的电动牙刷的过程。由于牙刷的NFC芯片采用的加密方式是密码加密，并且在通讯过程中是用了明文传递，所以他采取了截获通讯信号的方式窃听到了密码，然后就解锁了各种姿势开始为所欲为了。。。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-22-42.png"
width="606"
height="363"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://bjoernkarmann.dk/project/paragraphica" target="_blank" rel="noopener"
>真·AI相机&lt;/a> ，paragraphica 是一个没有镜头但是却有物理实体的“AI相机”，使用位置、时间等参数数据生成特定地点和时刻的prompt，然后由人工智能来生成“照片”。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-24-07.png"
width="578"
height="513"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.dora.run/ai" target="_blank" rel="noopener"
>Droa&lt;/a>，一个通过自然语言进行网站开发的工具，你只需要提需求，剩下的交给AI。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-26-05.png"
width="821"
height="496"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/SupaGruen/StableDiffusion-CheatSheet" target="_blank" rel="noopener"
>StableDiffusion-CheatSheet&lt;/a>，经常用 Stable Diffusion 进行 AI 绘图的，可以看下这个开源速查表。里面拥有超过 700 种经过测试的艺术风格，可快速搜索查找各类艺术家，并支持一键复制 Prompt。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-26-50.png"
width="742"
height="521"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="341px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.math.cmu.edu/~jmackey/151_128/bws_book.pdf" target="_blank" rel="noopener"
>你一直想知道的关于数学的一切&lt;/a>，此书是CMU数学科学系的博士生布兰登·W·沙利文撰写的，旨在引导读者进入抽象数学和证明写作的世界，帮助培养读者的数学思维和表达能力。主题涵盖集合、逻辑、归纳法、关系、函数、基数和组合数学等基础和工具。暂未有中文翻译。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-27-26.png"
width="724"
height="579"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="300px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/eastlakeside/interpy-zh" target="_blank" rel="noopener"
>Python进阶&lt;/a>，是《Intermediate Python》的中文译本。2021最新目录版，实时更新托管在&lt;a class="link" href="https://py.eastlakeside.cn" target="_blank" rel="noopener"
>GithubPages&lt;/a>。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-28-23.png"
width="1037"
height="350"
loading="lazy"
class="gallery-image"
data-flex-grow="296"
data-flex-basis="711px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://csspro.com/" target="_blank" rel="noopener"
>CSSPro&lt;/a>，一个所见即所得的在线CSS可视化开发工具，直接在页面运行，那里修改点哪里。效果真的很惊艳。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-29-07.png"
width="921"
height="537"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/makeplane/plane" target="_blank" rel="noopener"
>Plane&lt;/a>，开源版 JIRA ！不少软件开发者都使用JIRA进行缺陷管理，JIRA确实很强大，也很好用。现在，开源版的来了，据说完全可以作为JIRA的平替。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-30-19.png"
width="1139"
height="595"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://openmlsys.github.io/index.html" target="_blank" rel="noopener"
>机器学习系统：设计和实现&lt;/a>，一本关于机器学习的电子书，本书希望做成世界上第一本全面讲述机器学习系统知识的开源书籍。可以看作一门衔接机器学习和计算机系统的课程 ​​。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-31-04.png"
width="234"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="60"
data-flex-basis="144px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://callannie.ai/" target="_blank" rel="noopener"
>Callanie&lt;/a>，练习英语口语的AI对话机器人，支持国内手机号注册，免费且流畅。后端基于大语言模型，可以陪你聊各种话题。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-035-%E6%9C%9F/2023-06-07-10-31-49.png"
width="303"
height="570"
loading="lazy"
class="gallery-image"
data-flex-grow="53"
data-flex-basis="127px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 034 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-034-期">机器文摘 第 034 期
&lt;/h1>&lt;h2 id="研究">研究
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://samwho.dev/memory-allocation/" target="_blank" rel="noopener"
>图解内存分配&lt;/a>，文章展示了 C/C++ 编程中的内存分配过程，包括静态和动态内存分配技术、它们的优势，以及有效的内存管理所需考虑的事项。以图解的形式展示了内存分配过程，希望读者可以通过本文更好地理解内存分配相关的概念，并在实际编程中对内存进行更加高效的管理。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-49-39.png"
width="759"
height="298"
loading="lazy"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.koehntopp.info/2023/05/17/50-years-in-filesystems-towards-2004-lfs.html" target="_blank" rel="noopener"
>文件系统五十年&lt;/a>，这是一个系列文章，详细记录了计算机文件系统的发展历程。也许我们身在其中无法感受到它的进步，但是回顾历史我们会发现，即便是我们不容易注意到的部分，也在不停地发展和优化。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-50-33.png"
width="672"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://xorvoid.com/sectorc.html" target="_blank" rel="noopener"
>只有512字节的C编译器&lt;/a>，这篇文章介绍了一个怎样实现最小编译器的思路，SectorC （github） 是一个用 x86-16 汇编编写的 C 编译器，适合 x512 机器的 86 字节引导扇区。它支持 C 的子集，足够大，可以编写真实有趣的程序。它很可能是有史以来最小的C编译器。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-51-20.png"
width="764"
height="366"
loading="lazy"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="500px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.amygoodchild.com/blog/computer-art-50s-and-60s" target="_blank" rel="noopener"
>上世纪50~60年代的计算机艺术&lt;/a>，数字艺术的发展简史。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-51-53.png"
width="781"
height="494"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="379px"
>&lt;/li>
&lt;li>&lt;a class="link" href="" >win10的隐藏功能&lt;/a>，原来win10还有这个功能。按Ctrl + Alt + Del 后，按住Ctrl不松，再点击右下角的电源符号，就会进入紧急重启（Emergency Restart）界面。应该是一种强制重启。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-52-04.png"
width="690"
height="518"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/SevaSk/ecoute" target="_blank" rel="noopener"
>Ecoute&lt;/a>，可用于远程面试作弊的工具？Ecoute 是一种实时转录工具，可在文本框中为用户的麦克风输入（您）和用户的扬声器输出（扬声器）提供实时翻译。它还使用 OpenAI 的 GPT-3.5 生成建议答复内容，供用户“参考”。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-52-39.png"
width="820"
height="386"
loading="lazy"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://app.rask.ai/" target="_blank" rel="noopener"
>rask.ai&lt;/a>，自动将视频转成“译制片”，在对内容进行翻译的同时，会尽量保持之前的音色和语调，端到端给你的视频完成多语配音，后续还会推出唇形同步合成。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-53-28.png"
width="1171"
height="644"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://chrome.google.com/webstore/detail/tango-how-to-guides-and-s/lggdbpblkekjjbobadliahffoaobaknh" target="_blank" rel="noopener"
>Tango&lt;/a>，一个Chrome浏览器插件，能帮你生成一个网站的操作指南。它会自动记录所有的操作流程，并做相应的截图和注解文档。你只需要点一遍就行了。目前还只能生成英文版的，不过自己翻译也不麻烦。可以节省不少时间。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-53-58.png"
width="632"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="388px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://praeclarum.org/2023/05/19/webgpu-torch.html" target="_blank" rel="noopener"
>WebGPU-torch&lt;/a>，PyTroch的webgpu实现。我测试了一下，我的浏览器目前还不支持。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-54-28.png"
width="1384"
height="796"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/li>
&lt;li>&lt;a class="link" href="http://ogden.basic-english.org/" target="_blank" rel="noopener"
>basic-english&lt;/a>，“基础英语”的概念是：25，000个单词的牛津袖珍英语词典去掉冗余，并消除组合单词，90%的概念可以用850个单词来实现。使用这些基础英语可以简化日常工作和交流。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-55-26.png"
width="778"
height="516"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/raunofreiberg/interfaces" target="_blank" rel="noopener"
>Web界面准则&lt;/a>，讲解如何提升网页界面的交互性、排版、动画、辅助功能、优化和设计。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-56-18.png"
width="834"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="429px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/excalidraw/excalidraw" target="_blank" rel="noopener"
>excalidraw&lt;/a>，开源虚拟手绘风格白板程序，支持端到端加密在线协作。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-034-%E6%9C%9F/2023-05-31-09-56-43.png"
width="759"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="沉思录">沉思录
&lt;/h2>&lt;ul>
&lt;li>一切商业的本质都是：收购一些东西（包括原材料、人力服务），经过加工（加工过程产生价值）后变成产品或服务出售。这里的原材料可以是实体物品也可以是信息。所以关键动作就是：收、加工、出售，从重要性上来说，出售大于加工大于收。所以如果要策划自己的产品，解决和分析问题的优先级也应如此，我之前想的正好一反；&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 033 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-033-期">机器文摘 第 033 期
&lt;/h1>&lt;h2 id="研究">研究
&lt;/h2>&lt;h3 id="全键盘信息终端">全键盘信息终端
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/2023-05-24-09-22-11.png"
width="1335"
height="637"
loading="lazy"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>
我一直很怀念使用黑莓手机的日子。&lt;/p>
&lt;p>物理全键盘的手感比起现在硬邦邦的触摸屏真不知道好到哪里去了。&lt;/p>
&lt;p>多少次盯着抽屉里的黑莓尸体，都在想有没有办法再次发挥它的余热。&lt;/p>
&lt;p>现在机会来了，有人将树莓派和黑莓手机的全键盘（带触摸板的那一款）结合起来做了一个终端。&lt;/p>
&lt;p>取名：&lt;a class="link" href="https://beepberry.sqfmi.com/" target="_blank" rel="noopener"
>Beepberry&lt;/a>，具有400*200分辨率的LCD屏幕，和usb type-c接口。&lt;/p>
&lt;h3 id="自己动手给树莓派写操作系统">自己动手给树莓派写操作系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/2023-05-24-09-31-09.png"
width="677"
height="359"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>
学习操作系统的最佳手段是自己动手写一个。&lt;/p>
&lt;p>这类教程很多，一般都是针对x86平台，树莓派的比较少见。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/isometimes/rpi4-osdev" target="_blank" rel="noopener"
>《给树莓派编写“裸机”操作系统》&lt;/a>来自github上的一个开源项目。&lt;/p>
&lt;p>可以带你从树莓派的硬件层基础上直接构建一个的完整操作系统。&lt;/p>
&lt;h3 id="关于-demoscene-制作的一些文章">关于 Demoscene 制作的一些文章
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/2023-05-24-09-40-25.png"
width="471"
height="314"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>
Demoscene（也称为Demo Party）是一种计算机艺术形式，旨在展示计算机的音频和图形表现能力。Demoscene通常是由小团队制作的演示性程序，也被称为demo，它集计算机程序、音乐、图形和动画于一身，是八十年代初期在个人计算机上发展起来的一种文化和艺术运动。Demoscene的主要目的是展示计算机和程序的美感，通常使用3D渲染和其他复杂的视觉效果，展示计算机的高级图形和音频处理能力。&lt;/p>
&lt;p>我对于如何制作这些炫酷的 demo 一直很感兴趣，但是网上关于这方面的资料非常少，成体系的就更少了。&lt;/p>
&lt;p>这里收录了一些比较经典的相关资料：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.ctrl-alt-test.fr/2023/procedural-3d-mesh-generation-in-a-64kb-intro/" target="_blank" rel="noopener"
>64kb的demos&lt;/a>介绍了基于SDF（Signed Distance Field，有符号距离场）生成三维网格的方法，这个方法是大部分demo用于在三维场景中产生三维模型的主要方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.flipcode.com/archives/The_Art_of_Demomaking-Issue_01_Prologue.shtml" target="_blank" rel="noopener"
>The_Art_of_Demomaking&lt;/a>是一套很系统的教程，讲述Demo的概念、发展历史以及制作过程需要了解的基础知识。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.pbr-book.org/3ed-2018/contents" target="_blank" rel="noopener"
>pbr-book&lt;/a>是一本关于基于物理的渲染（Physically Based Rendering，简称PBR）的经典教材。内容包括计算机图形学相关的基础概念、渲染算法、工作流程和高级特性等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="怎样防止针对llm的prompt攻击">怎样防止针对LLM的prompt攻击
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/2023-05-24-09-52-09.png"
width="734"
height="401"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="439px"
>
就像之前流行的sql注入攻击，针对大语言模型的提示语注入攻击现在变得也很常见。&lt;/p>
&lt;p>一种比较典型的攻击场景是，通过一段特定的提示语，解锁chatGPT原本被封印的能力。&lt;/p>
&lt;p>或者对于接入了其他工具接口的语言模型，通过特定的提示语让其执行危险操作（如：删除所有信息）。&lt;/p>
&lt;p>这对于使用者来说可能危害不大，但对于服务的提供者是一个不小的挑战。&lt;/p>
&lt;p>&lt;a class="link" href="https://simonwillison.net/2023/Apr/25/dual-llm-pattern/" target="_blank" rel="noopener"
>《用于构建可以抵抗即时注入的 AI 助手的双 LLM 模式》&lt;/a>提出了一种可能可行的解决方案。&lt;/p>
&lt;p>即使用双模型的配置，协同工作，将具有执行危险操作的特权模型放在另一个模型后面，中间使用过滤器进行风险审查，即未被审查的内容永远不会发送到特权模型。&lt;/p>
&lt;h2 id="资源">资源：
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://gamma.app/" target="_blank" rel="noopener"
>gamma&lt;/a>，AI帮你做PPT。支持自然语言描述需要生成的内容，自动给出ppt的大纲和每页基本的排版布局；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/2023-05-24-10-00-52.png"
width="742"
height="687"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="259px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.3blue1brown.com/" target="_blank" rel="noopener"
>3blue1brown&lt;/a>，YouTube上最好的数学科普视频，特点是使用动画直观展示计算原理；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-033-%E6%9C%9F/2023-05-24-10-01-29.png"
width="953"
height="611"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="374px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 032 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-032-期">机器文摘 第 032 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="ai歌手的训练与使用">AI歌手的训练与使用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-14-33-53.png"
width="1011"
height="641"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>
最近火了很多AI歌手（即：用AI模型模仿某位歌手的声音），其中b站上AI孙燕姿演唱的《漠河舞厅》、《撒日朗》等歌曲播放已超百万。&lt;/p>
&lt;p>为了研究实现原理，我也找到了开源工具体验了一下。&lt;/p>
&lt;p>具体步骤主要总结如下：&lt;/p>
&lt;ol>
&lt;li>选定某一个歌手，找到具有代表性的几首歌曲，通过&lt;a class="link" href="https://ultimatevocalremover.com/" target="_blank" rel="noopener"
>Ultimate Vocal Remover&lt;/a>软件利用AI做人声和伴奏的分离，主要用于获取干净的纯人声用于模型训练。（不得不说现在基于AI模型的人声、伴奏分离做的是真的强，可以做到非常干净的提取，让你感觉像是原始独立的音轨）。&lt;/li>
&lt;li>通过安装&lt;a class="link" href="https://github.com/voicepaw/so-vits-svc-fork" target="_blank" rel="noopener"
>so-vits-svc-fork&lt;/a>这个一体化开源工具进行模型训练，具体方法见&lt;a class="link" href="https://github.com/voicepaw/so-vits-svc-fork/blob/main/README_zh_CN.md" target="_blank" rel="noopener"
>so-vits-svc-fork的Readme&lt;/a>，从数据预处理到最后的模型导出和推理都已经做好了，甚至还提供了图形界面。&lt;/li>
&lt;li>继续使用so-vits-svc-fork提供的gui界面进行操作，将模型载入，将预期修改歌曲的原唱人声（提取方式同第1步）传入，运行推理获得定制的人声（注意看文档的各种参数）。&lt;/li>
&lt;li>将第3步推理所得干净人声，跟原唱分离的干净背景音乐进行混音合成，即可获得一首新歌曲了。&lt;/li>
&lt;/ol>
&lt;h3 id="怎样用口袋计算器玩耍">怎样用口袋计算器玩耍
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-14-49-14.png"
width="716"
height="514"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="334px"
>
在移动互联网时代，人打发无聊的方式实在是太多了，视频聊天、阅读各种资讯八卦、观看短视频、手游等等。&lt;/p>
&lt;p>功能机的时代，我有印象的打发无聊的事情是手机上的贪食蛇、发短信、wap资讯等等，也算不错了。&lt;/p>
&lt;p>如果时间来到上世纪七十年代呢？那个时代的没有随身携带的手机，怎么打发时间？&lt;/p>
&lt;p>答案是：如果有一个随身携带的计算器也行，这里有一本书&lt;a class="link" href="https://archive.org/details/htewypc" target="_blank" rel="noopener"
>《How To Entertain With Your Pocket Calculator》&lt;/a>，出版于上世纪七十年代。书中花了大量的篇幅介绍了很多种基于数字的游戏，我翻看了一下，我觉得可能得无聊到一定的程度我才能愿意玩书里的游戏。&lt;/p>
&lt;h3 id="llm的几篇介绍文章">LLM的几篇介绍文章
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-14-56-38.png"
width="703"
height="332"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="508px"
>
Large Language Model (LLM) 即大规模语言模型，是一种基于深度学习的自然语言处理模型，它能够学习到自然语言的语法和语义，从而可以生成人类可读的文本。
与其感叹以chatGPT为代表的大语言模型发展太快，不如静下心来，读一读关于LLM的一些基础知识和使用方法，我找了三篇比较有代表性的放在这里收藏。&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://github.com/RUCAIBox/LLMSurvey/blob/main/assets/LLM_Survey_Chinese_0418.pdf" target="_blank" rel="noopener"
>大语言模型综述&lt;/a>，认真地概括并解释了什么是LLM和它的基本原理。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bmpi.dev/dev/deep-learning/nlp-language-models/" target="_blank" rel="noopener"
>ChatGPT背后的语言模型简史&lt;/a>，从发展历史上捋一捋各种语言模型的辈分。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/datawhalechina/prompt-engineering-for-developers" target="_blank" rel="noopener"
>prompt-engineering-for-developers&lt;/a>一个中文版的 Prompt Engineering 教程，翻译自：吴恩达《ChatGPT Prompt Engineering for Developers》课程，主要内容为指导开发者如何构建 Prompt 并基于 OpenAI API 构建新的、基于 LLM 的应用；&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ninehills/ninehills.github.io/issues/92" target="_blank" rel="noopener"
>大语言模型微调技术笔记&lt;/a>，记录了基于 LLM 进行微调训练的实战技巧。&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://sinerider.com/" target="_blank" rel="noopener"
>sinerider&lt;/a>，一个很有创意的数学学习游戏，让你通过数学函数构建图像从而帮助画面中的角色到达目标地点。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-15-04-41.png"
width="810"
height="708"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="274px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://anvaka.github.io/map-of-github/#0.87/0/16.7" target="_blank" rel="noopener"
>map-of-github&lt;/a>，以节点地图的方式展示Github上面超过40万个仓库，通过虚拟大陆的方式展示他们之间的关系。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-15-07-40.png"
width="1274"
height="682"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://learngitbranching.js.org/?locale=zh_CN" target="_blank" rel="noopener"
>learngitbranching&lt;/a>，以交互式游戏的方式学习git命令。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-15-11-32.png"
width="569"
height="598"
loading="lazy"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="228px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://vgamuseum.ru/" target="_blank" rel="noopener"
>&lt;/a>，在线显卡博物馆，收藏了1982年到2012年之间发布的各款显卡，包括高清图片和规格参数的介绍；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-032-%E6%9C%9F/2023-05-16-15-14-37.png"
width="1364"
height="571"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="573px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 031 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/</link><pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-031-期">机器文摘 第 031 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="怎样驱动上个世纪的网络摄像头">怎样驱动上个世纪的网络摄像头
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-09-20-31.png"
width="697"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>
国外有个老哥，在帮朋友收拾废品的时候，获得了一个老旧的摄像头。&lt;/p>
&lt;p>于是他按耐不住想感受一下，这个来自上个世纪的“古董”，还能打吗？&lt;/p>
&lt;p>由于年代比较久远，厂家也不再提供驱动程序的更新。&lt;/p>
&lt;p>哥们不得不在虚拟机里全新安装一个windows xp，成功启动摄像头，并获得“清晰图像”。&lt;/p>
&lt;p>安装xp时有个插曲：安装界面里的进度条仅用时几十秒就走完了原本几十分钟的倒计时（所以说微软的进度条是如何推断剩余时间的永远是个迷）。&lt;/p>
&lt;p>在经过一番体验之后，又跃跃欲试准备自己给它手搓一个在现代操作系统下的驱动程序。&lt;/p>
&lt;p>整个过程记录在&lt;a class="link" href="https://blog.benjojo.co.uk/post/quickcam-usb-userspace-driver" target="_blank" rel="noopener"
>《一个1999年的摄像头复活的故事》&lt;/a>。&lt;/p>
&lt;p>整个故事都充满了一种“我不知道这么做有什么意义，但是我就是可以”的极客风格（也是我收录它的主要原因）。&lt;/p>
&lt;h3 id="webgpu-科普">webGPU 科普
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-09-36-36.png"
width="673"
height="338"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="477px"
>
最近谷歌浏览器率先宣布全面支持 webGPU ，预计到今年年底各大浏览器也都会跟进并提供支持。&lt;/p>
&lt;p>webGPU 从名字上看跟显卡和浏览器有关，可是之前已经有webgl了，这次又有什么变化？&lt;/p>
&lt;p>通过多方面信息的搜索，我得到的结论是：webGPU 更充分地暴露了显卡的计算能力，GPU不再只是做图形渲染相关的事情，而是根据webGPU提供的相关专业接口，可以执行深度学习之类的更通用的计算工作。&lt;/p>
&lt;p>如果想了解的更全面一些，这篇&lt;a class="link" href="https://cohost.org/mcc/post/1406157-i-want-to-talk-about-webgpu" target="_blank" rel="noopener"
>《谈谈 webGPU》&lt;/a>文章十分值得一读。&lt;/p>
&lt;p>作者对 webGPU 这一技术介绍的比较详尽，从各个图形接口的发展历史一直到对未来如何应用的展望，都包括了。&lt;/p>
&lt;h3 id="如何翻译一本书">如何翻译一本书
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-09-49-38.png"
width="709"
height="354"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>
&lt;a class="link" href="https://sspai.com/post/79534" target="_blank" rel="noopener"
>《从不自量力到 AI 助力，我如何翻译完一整本英文书》&lt;/a>
这是一个关于执行力的故事。&lt;/p>
&lt;p>主题是：如何借助AI和现代信息工具，实现看似不可能完成的任务。&lt;/p>
&lt;p>在这个时代，个体的力量很渺小，因为个人几乎无法独立完成任何事情。&lt;/p>
&lt;p>但同时，借助科技工具和基础设施的力量，1 个人甚至可以完成之前需要一个上百人公司才能做到的事情，这让个体变得非常强大。&lt;/p>
&lt;h3 id="如何刷路由器">如何刷路由器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-00-09.png"
width="600"
height="417"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="345px"
>
&lt;a class="link" href="https://www.v2ex.com/" target="_blank" rel="noopener"
>V站&lt;/a>上说，中年技术男有三大爱好：钓鱼、NAS、软路由。&lt;/p>
&lt;p>&lt;del>我一样也没沾边儿，但还是克制不住关注相关技术。&lt;/del>&lt;/p>
&lt;p>之前多次想拿自己家的路由器开刀，刷一个openwrt系统，然后就可以各种折腾（科学上网、内网穿透等等）了。&lt;/p>
&lt;p>但是一直没有动手，今天看到这篇&lt;a class="link" href="https://a-wing.top/linux/2023/05/01/start-openwrt" target="_blank" rel="noopener"
>自己动手定制你的路由器&lt;/a>写的如此详细，还是心动了一下。&lt;/p>
&lt;p>先收藏吧。&lt;/p>
&lt;h3 id="仅用csshtml实现三维动画">仅用CSS+HTML实现三维动画
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-06-52.png"
width="632"
height="161"
loading="lazy"
class="gallery-image"
data-flex-grow="392"
data-flex-basis="942px"
>
CSS 的 &lt;code>translate3d&lt;/code>用到的不多。&lt;/p>
&lt;p>如果使用巧妙的话，可以帮你实现很出彩的 3D 动画效果，国外有高手在给自己的文章配数学公式的时候，利用CSS制作了一些可以动态显示的公式图表。这篇&lt;a class="link" href="https://x.st/spinning-diagrams-with-css/" target="_blank" rel="noopener"
>CSS 3D图表&lt;/a>记录了它们的实现细节和技术原理。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.window-swap.com/Window" target="_blank" rel="noopener"
>window-swap&lt;/a>，随机看别人家的窗外景色。这个网站每次刷新都随机显示一个网友共享的摄像头视角，一般是自家的窗外。可以随时体验全球各地的邻家风景。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-14-06.png"
width="1371"
height="929"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.landiannews.com/archives/98512.html" target="_blank" rel="noopener"
>foobar2000&lt;/a>，经典的音乐播放器终于更新了。2002年发布的foobar2000播放器曾经是很多发烧友的最爱，如今过了20多年，居然更新了2.0稳定版，值得收藏；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-15-52.png"
width="743"
height="504"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://lost-at-sql.therobinlord.com/" target="_blank" rel="noopener"
>lost-at-sql&lt;/a>，一个在线学习 sql 的交互游戏，通过游戏闯关的方式练习 sql 技能；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-18-25.png"
width="745"
height="484"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="369px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://glsl-exercises.simondev.io/lesson/1/1#welcome" target="_blank" rel="noopener"
>glsl-exercises&lt;/a>，在线学习glsl的交互课程，通过交互式页面练习 glsl 编写；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-19-48.png"
width="1858"
height="794"
loading="lazy"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="561px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.gameuidatabase.com/" target="_blank" rel="noopener"
>gameuidatabase&lt;/a>，一个游戏界面资源网站，各种游戏的界面截图，可以用来“借鉴”？；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-031-%E6%9C%9F/2023-05-10-10-20-48.png"
width="1078"
height="567"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 030 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-030-期">机器文摘 第 030 期
&lt;/h1>&lt;p>&lt;em>下周五一假期，休息，不更新。&lt;/em>&lt;/p>
&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="内网穿透的原理及实现">内网穿透的原理及实现
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-09-42-27.png"
width="1040"
height="515"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="484px"
>&lt;/p>
&lt;blockquote>
&lt;p>设想这样一个问题：在北京和上海各有一台局域网的机器（例如一台是家里的台式机，一 台是连接到星巴克 WiFi 的笔记本），二者都是私网 IP 地址，但可以访问公网， 如何让这两台机器通信呢？&lt;/p>
&lt;/blockquote>
&lt;p>IPv4地址即将枯竭，IPv6技术还没有普及，现在很多家庭宽带都不再分配公网IP地址。这就意味着大部分的个人电脑是无法通过互联网被直接访问的（当然，你可以通过你家wifi或者4G信号访问互联网，但是反过来不行）。&lt;/p>
&lt;p>可是这种需求又真实存在，比如我就经常希望能够在任何地方访问我家里的电脑，通过远程桌面进行办公、文件共享等等。&lt;/p>
&lt;p>最简单的方法是通过购买一台具有公网IP地址的云主机来实现中继，这也是目前最普遍的方式。&lt;/p>
&lt;p>不过阅读完这篇&lt;a class="link" href="https://arthurchiao.art/blog/how-nat-traversal-works-zh/" target="_blank" rel="noopener"
>《NAT 穿透是如何工作的：技术原理及企业级实践》&lt;/a>，假如你有很强的动手能力的话，就应该可以实现一套完全不需要公网主机进行中继的“企业级内网穿透工具”。&lt;/p>
&lt;p>文章很长，来自&lt;a class="link" href="https://tailscale.com/blog/how-nat-traversal-works/" target="_blank" rel="noopener"
>这篇英文博客&lt;/a>。&lt;/p>
&lt;h3 id="技术写作指南">技术写作指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-09-53-51.png"
width="437"
height="205"
loading="lazy"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="511px"
>
曾经在翻阅《程序员的数学》这本书的时候被朋友看到，于是诞生了短暂的讨论。&lt;/p>
&lt;p>当时我的观点是，作为程序员一定要掌握好数学，即便现在编程过程中已经不怎么用到特别底层的知识，但也应该多训练数学思维。&lt;/p>
&lt;p>朋友当时说了一句话让我记忆犹新。&lt;/p>
&lt;p>“比起程序员的数学，我更担忧的是程序员的语文。”&lt;/p>
&lt;p>确实，写作这项能力在很多技术人员心里是被低估的。&lt;/p>
&lt;p>不少人受尽写技术文档的折磨，于是越发讨厌写作。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.yuque.com/serviceup/misc/cn-writing-for-engineers" target="_blank" rel="noopener"
>《作为工程师应该如何写作》&lt;/a>真是雪中送炭，总结了很多立即就能见效的技术写作方法，希望可以帮助到工程师朋友。&lt;/p>
&lt;h3 id="怎样制作好玩的小游戏">怎样制作好玩的小游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-09-57-29.png"
width="512"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>
很多人都有自己开发游戏的冲动。&lt;/p>
&lt;p>不过很容易掉进各种复杂的引擎和工具的坑里。&lt;/p>
&lt;p>然后感到沮丧，忘了想做游戏的初心。&lt;/p>
&lt;p>这篇&lt;a class="link" href="http://farawaytimes.blogspot.com/2023/02/how-to-make-good-small-games.html" target="_blank" rel="noopener"
>《怎样制作好玩的小游戏》&lt;/a>可以让你重新焕发精神。&lt;/p>
&lt;p>作者认为开发那种不用复杂引擎的小游戏也可以很欢乐，只要有足够的游戏性。&lt;/p>
&lt;p>他在文章中详细列举了想要制作出真正具有游戏性的小游戏所必须具备的几点关键特性。&lt;/p>
&lt;p>看得出来，作者是懂游戏的。&lt;/p>
&lt;h3 id="神奇的一页纸知识管理">神奇的一页纸知识管理
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-10-03-34.png"
width="1220"
height="841"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="348px"
>&lt;/p>
&lt;blockquote>
&lt;p>宇航员在太空中找到的方法一定不会错，因为他要是出错就没命了。
航天员的秘密武器，One Pager。就是把一个专项的知识，都写和画在一页纸上。日积月累，宇航员有了一本手册，里面都是一页一页的one pager。
我向来对知识管理的各种方法很有兴趣。&lt;/p>
&lt;/blockquote>
&lt;p>在网上闲逛时看到这篇&lt;a class="link" href="https://www.zhongwen.ai/fantastic-one-pager/" target="_blank" rel="noopener"
>《神奇的One Pager》&lt;/a>，讲述了一种通过一页纸进行知识管理的方法。&lt;/p>
&lt;p>热爱学习的人可不能错过。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/chidiwilliams/buzz" target="_blank" rel="noopener"
>buzz&lt;/a>，Transcribe and translate audio offline on your personal computer. Powered by OpenAI&amp;rsquo;s Whisper.
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-08-48-07.png"
width="827"
height="431"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="460px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://moonvy.com/apps/ops/" target="_blank" rel="noopener"
>可视化提示词拼装&lt;/a>，文生图的AI越来越多，自己也可以在本地搭建服务，可是为什么我自己生成的图片那么丑呢？这个工具也许可以帮你生成一些靠谱的提示词。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-08-50-22.png"
width="991"
height="418"
loading="lazy"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="568px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://liaokong.gitbook.io/llm-kai-fa-jiao-cheng/" target="_blank" rel="noopener"
>LangChain 中文入门教程&lt;/a>，众所周知 OpenAI 的 API 无法联网的，所以如果只使用自己的功能实现联网搜索并给出回答、总结 PDF 文档、基于某个 Youtube 视频进行问答等等的功能肯定是无法实现的。所以，我们来介绍一个非常强大的第三方开源库：LangChain 。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-08-51-08.png"
width="1103"
height="493"
loading="lazy"
class="gallery-image"
data-flex-grow="223"
data-flex-basis="536px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://oimo.io/works/clock/" target="_blank" rel="noopener"
>clock&lt;/a>，一个非常酷的网页时钟显示效果。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-08-51-53.png"
width="999"
height="586"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://webgpufundamentals.org/" target="_blank" rel="noopener"
>WebGPU 理论基础&lt;/a>，从基础理论开始学习WebGPU，稳！
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-030-%E6%9C%9F/2023-04-26-08-53-56.png"
width="688"
height="743"
loading="lazy"
class="gallery-image"
data-flex-grow="92"
data-flex-basis="222px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 029 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/</link><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-029-期">机器文摘 第 029 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="计算机的中断机制是如何实现的">计算机的“中断”机制是如何实现的？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-09-37-58.png"
width="1008"
height="682"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>
稍微了解过计算机原理的朋友都知道，计算机是通过“中断”的机制实现对键盘输入、鼠标移动、硬盘读写等操作的。&lt;/p>
&lt;p>让我给小朋友讲解这些基本的知识时，我也可以侃侃而谈，说上半个小时不带重复。&lt;/p>
&lt;p>但是真要解释“中断”的机制是如何实现的，我想即便是现在科班出身的本科生也未必能够说明白。&lt;/p>
&lt;p>原因我觉得除了缺少实践之外，也跟大部分书上的理论内容离实际工程较远有关。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://r12f.com/posts/interrupts/" target="_blank" rel="noopener"
>漫谈中断&lt;/a>从实际的硬件实例（x86）出发，详细介绍了中断的实现机制，普及了“外部中断”、“内部中断”、“软中断”等概念，以及人们怎样通过“中断控制器”逐渐解决了多设备中断处理的问题。是一篇很值得阅读的科普文章。适合对计算机组成原理、操作系统等技术有兴趣的朋友阅读。&lt;/p>
&lt;h3 id="怎样提升软件项目的可维护性">怎样提升软件项目的可维护性？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-09-54-43.png"
width="576"
height="242"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="571px"
>
不同的项目团队对于软件项目的可维护性所做出的努力不同。&lt;/p>
&lt;p>有不少团队宁愿在修改bug上加班加点，也不愿意为可维护性多花一丁点精力。&lt;/p>
&lt;p>不过，如果你要开始一个新的软件项目或者想要改善一个已经存在的项目的可维护性。&lt;/p>
&lt;p>这里有一份&lt;a class="link" href="https://hix.dev/tutorials/general/software-project-checklist" target="_blank" rel="noopener"
>软件项目可维护性检查清单&lt;/a>可以参考。&lt;/p>
&lt;p>作者主要从版本控制、软件测试、静态分析、依赖库管理、多语言支持、多平台支持、开发环境管理等方面给出了可以改进的行动清单，以及基于开源工具的最佳实践建议。&lt;/p>
&lt;h3 id="怎样榨干chatgpt">怎样榨干chatGPT？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-06-59.png"
width="1024"
height="1024"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>
ChatGPT是由OpenAI训练的一款大型语言模型，能够和你进行任何领域的对话。&lt;/p>
&lt;p>现在跟年初账号紧张的情况比起来已经方便了很多。&lt;/p>
&lt;p>在这么多开源工具和套壳网站的帮助下，我想现在大部分人都能够比较方便的体验它了吧。&lt;/p>
&lt;p>但是可能很多人还不知道如何更好的发挥它的作用。&lt;/p>
&lt;p>有网友整理了一份开源的&lt;a class="link" href="https://github.com/PlexPt/awesome-chatgpt-prompts-zh" target="_blank" rel="noopener"
>chatGPT中文调教指南&lt;/a>，内容极为详尽，可以帮你榨干chatGPT的全部潜能。&lt;/p>
&lt;h3 id="怎样让ai作画理解你的意图">怎样让AI作画理解你的意图？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-17-26.png"
width="1536"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="300"
data-flex-basis="720px"
>
对于现在强大的AI绘图应用，有些人可能会认为只输入一个单词就能生成一张很酷的图片。&lt;/p>
&lt;p>然而，虽然AI模型越来越善于理解我们想要的内容，但它们还不能读懂我们的思想。&lt;/p>
&lt;p>因此，如果你想生成一张看起来像你所想的那样的图片，你需要编写正确的提示。&lt;/p>
&lt;p>这个&lt;a class="link" href="https://boostpixels.com/short-guide" target="_blank" rel="noopener"
>AI绘图prompt编写指南&lt;/a>可以给你提供一些帮助。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://zh.ifixit.com/Guide" target="_blank" rel="noopener"
>维修指南&lt;/a>，各种设备的维修教程大全，详细到每一个步骤的照片，设备型号齐全；
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-22-36.png"
width="977"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="508px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://shadertoy.com/view/msVXWD" target="_blank" rel="noopener"
>glsl-CNN&lt;/a>，有大神用glsl语言，仅通过webGL的片元着色器实现了一个手写识别的CNN神经网络。可以在浏览器直接体验，效果惊艳。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-31-02.png"
width="801"
height="479"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/facebookresearch/dinov2" target="_blank" rel="noopener"
>dinov2&lt;/a>，Meta AI新发布的全能视觉模型，模型支持：图像分类、分割、图像检索和深度估计。比较厉害的地方在于它是一个自监督模型，直接从图像中学习特征，而不依赖文本描述，即可训练计算机视觉模型。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-31-37.png"
width="828"
height="236"
loading="lazy"
class="gallery-image"
data-flex-grow="350"
data-flex-basis="842px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://minigpt-4.github.io/" target="_blank" rel="noopener"
>minigpt-4&lt;/a>，GPT4 的图像支持迟迟不开放，这个开源的MiniGPT4 却已经做到了类似的多模态效果，官方演示看起来非常棒。只用了四张A100训练了10小时，模型甚至只有13B。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-33-47.png"
width="1289"
height="1484"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="208px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/linyiLYi/street-fighter-ai" target="_blank" rel="noopener"
>street-fighter-ai&lt;/a>，有个B站UP主在GPT的帮助下， 写了个 强化训练的AI模型，终于打败了街霸里的 AI，实现了儿时的梦想。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-029-%E6%9C%9F/2023-04-19-10-36-53.png"
width="1080"
height="760"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="341px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 027 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/</link><pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-027-期">机器文摘 第 027 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="搭建本地ai作图应用">搭建本地AI作图应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-13-51-53.png"
width="695"
height="392"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>
AI对话机器人火爆的同时，去年由Stable-Diffusion模型引爆的AI作图技术也没有放慢进化的脚步。&lt;/p>
&lt;p>这里面的佼佼者&lt;a class="link" href="https://zh.wikipedia.org/zh-cn/Midjourney" target="_blank" rel="noopener"
>Midjourney&lt;/a>已经发展成了强大的图像生成系统。可以轻松定制出照片级图像，其效果足以乱真。&lt;/p>
&lt;p>不过目前在国内使用Midjourney还比较麻烦，即便能够访问，使用量也会受限制，能否自己搭建一个呢？&lt;/p>
&lt;p>答案是肯定的。&lt;/p>
&lt;p>跟去年刚问世的时候不同，现在基于Stable-Diffusion模型的生态也已经十分完备，很多开源软件、框架、插件围绕这个模型开发。&lt;/p>
&lt;p>利用这些软件可以快速在本地计算机上构建一套属于自己的图像生成服务。&lt;/p>
&lt;p>这里有一篇博客以&lt;a class="link" href="https://www.freedidi.com/8474.html" target="_blank" rel="noopener"
>手把手的方式教你如何在最快速的时间搭建自己的图像生成服务&lt;/a>。&lt;/p>
&lt;p>里面还列举了一些微调好的定制模型下载地址，合理的使用这些模型，你会发现打开新世界的大门。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-14-02-07.png"
width="733"
height="799"
loading="lazy"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="220px"
>&lt;/p>
&lt;h3 id="搭建本地chatgpt应用">搭建本地chatGPT应用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-14-08-25.png"
width="779"
height="342"
loading="lazy"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>
本来不想再提chatGPT了，因为最近说的有些太多了。&lt;/p>
&lt;p>但是无奈当前的开源生态对于语言模型是在是太追捧了，技术发展迅雷不及掩耳。&lt;/p>
&lt;p>很快就出现了一批可以自己搭建的AI对话模型。&lt;/p>
&lt;p>今天我挑两个我认为效果比较好的（且对中文支持比较好的）介绍一下。&lt;/p>
&lt;p>注意，跟目前流行的基于OpenAI的接口进行套壳的程序不同。我说的是完全在本地搭建自己的服务。&lt;/p>
&lt;p>第一个：&lt;a class="link" href="https://chatglm.cn/blog" target="_blank" rel="noopener"
>ChatGLM-6B&lt;/a>，一个具有62亿参数的中英双语语言模型。通过使用与 ChatGLM（chatglm.cn）相同的技术，ChatGLM-6B 初具中文问答和对话功能，并支持在单张 2080Ti 上进行推理使用。&lt;/p>
&lt;p>搭建过程比较简单，按照&lt;a class="link" href="https://github.com/THUDM/ChatGLM-6B/blob/main/README.md" target="_blank" rel="noopener"
>README&lt;/a>文档中的步骤下载模型、执行脚本程序即可。&lt;/p>
&lt;p>第二个：&lt;a class="link" href="https://github.com/ymcui/Chinese-LLaMA-Alpaca" target="_blank" rel="noopener"
>中文 LLaMA &amp;amp; Alpaca 大模型&lt;/a>，开源了中文LLaMA模型和经过指令精调的Alpaca大模型。这些模型在原版LLaMA的基础上扩充了中文词表并使用了中文数据进行二次预训练，进一步提升了中文基础语义理解能力。同时，在中文LLaMA的基础上，本项目使用了中文指令数据进行指令精调，显著提升了模型对指令的理解和执行能力。&lt;/p>
&lt;p>搭建过程略微繁琐一些，需要通过自己的手段下载到开源的LLaMA原始模型（当然这对于技术人员来说不是问题）。&lt;/p>
&lt;p>然后按照文档中的教程，执行模型合并、量化等脚本，最终通过开源程序LLaMA.cpp实现模型的本地运行。&lt;/p>
&lt;h3 id="合作运行千亿参数级语言模型">合作运行千亿参数级语言模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-14-22-47.png"
width="492"
height="214"
loading="lazy"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>
按照众人划桨开大船的思路，之前在带宽不足的年代诞生了BT下载。&lt;/p>
&lt;p>如今，当我们的本地显卡无法应付超大AI模型时，有人开始用同样的思路解决问题。&lt;/p>
&lt;p>&lt;a class="link" href="https://petals.ml/" target="_blank" rel="noopener"
>Petals&lt;/a>就是这么一个分布式模型微调、运行的框架，可以让你轻松在家运行超过千亿参数的大模型（当然是在线跟大家一起协作）。&lt;/p>
&lt;p>其原理是大家分别加载模型的一小部分，然后与其他人一起通过协同的方式进行推理或者微调。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-14-27-18.png"
width="1742"
height="680"
loading="lazy"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="614px"
>&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://learningprompt.wiki/" target="_blank" rel="noopener"
>Prompt Engineering 教程&lt;/a>，一份教你如何更好使好地使用 ChatGPT 和其他 AI 产品的免费教程。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-14-43-13.png"
width="970"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="499px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://prompthero.com/" target="_blank" rel="noopener"
>Prompthero&lt;/a>，跟聊天机器人、绘图机器人交流的prompt大全，与上面的教程不同，这是一个模板库大全，有创作灵感但是不知道该如何描述的时候可以去参考一下。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-027-%E6%9C%9F/2023-04-04-14-45-46.png"
width="759"
height="381"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://civitai.com/" target="_blank" rel="noopener"
>Civitai&lt;/a>，与上面相同，不过专门用于图像生成，而且路子比较野，有大量的NSFW内容，要搭配Stable-Diffusion的各种微调模型使用。具体使用方法，可参考前文中介绍如何搭建本地图像生成服务的部分。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 028 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/</link><pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-028-期">机器文摘 第 028 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="极简代码理解-gpt-模型结构">极简代码理解 GPT 模型结构
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-09-37-14.png"
width="679"
height="607"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>
在&lt;a class="link" href="https://twitter.com/karpathy/status/1645115622517542913" target="_blank" rel="noopener"
>twitter上有网友发布了一个简单的示例代码&lt;/a>，讲解了 GPT 语言模型的运行原理，为了方便大家理解，作者用了极简的模型设置，即语言文字只保留了1和0两个字符，上下文长度也仅为3，可以很直观地感受到训练过程是如何起作用的。&lt;/p>
&lt;p>作者&lt;a class="link" href="https://colab.research.google.com/drive/1SiF0KZJp75rUeetKOWqpsA8clmHP6jMg?usp=sharing" target="_blank" rel="noopener"
>提供了托管在colab的python源码&lt;/a>，可以在线体验。&lt;/p>
&lt;h3 id="用开源语言模型训练自己的数字化身">用开源语言模型训练自己的数字化身
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-09-38-57.png"
width="623"
height="364"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>
随着开源语言模型的训练和微调变得越来越简单，果然有人开始整活。&lt;/p>
&lt;p>已经有网友&lt;a class="link" href="https://greatdk.com/1908.html" target="_blank" rel="noopener"
>通过自己的微信聊天记录和博客文章训练出有自己风格的AI&lt;/a>。&lt;/p>
&lt;p>作者使用目前对中文支持最好的开源模型 chatglm-6b 作为预训练模型（我上期介绍过它的部署和使用）。&lt;/p>
&lt;p>经过一番折腾后终于训练出还算凑合的模型。&lt;/p>
&lt;p>我们的世界离&lt;a class="link" href="https://movie.douban.com/subject/11502153/episode/1/" target="_blank" rel="noopener"
>《黑镜》中的黑暗故事&lt;/a>越来越近了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-09-49-17.png"
width="1024"
height="576"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;h3 id="四十年工作经验程序员的职业建议">四十年工作经验程序员的职业建议
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-09-50-49.png"
width="700"
height="420"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>
国外有位“老程序员”退休了，是真正的到了退休年龄的退休。&lt;/p>
&lt;p>他从1981年入行，直到去年退休。这期间他做过各种开发，跳过槽也被辞退过，打过工也创过业。&lt;/p>
&lt;p>这不容易。&lt;/p>
&lt;p>所以，他决定&lt;a class="link" href="https://thecodist.com/how-i-stayed-relevant-over-four-decades/" target="_blank" rel="noopener"
>以“一个退休程序员”的身份分享一些心得&lt;/a>。&lt;/p>
&lt;p>摘抄部分要点如下：&lt;/p>
&lt;blockquote>
&lt;p>保持开阔的眼界：每天花时间获取真正的资讯，看到趋势，在事物流行起来之前发现他们。
保持学习：不要拒绝和敌视新技术，要为你所用。
要有自己的项目（做一些真正的事情）：作为程序员不要浪费聪明才智和外部资源，要学着开始一个自己的项目。&lt;/p>
&lt;/blockquote>
&lt;h3 id="进入心流的入口">进入心流的入口
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-10-08-18.png"
width="660"
height="379"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="417px"
>
进入心流（Flow）状态是一种很忘我的体验，也是知识工作者高效产出的必要条件。&lt;/p>
&lt;p>有不少创作者都体会过那种全身心的投入并且忘记了时间的感觉。&lt;/p>
&lt;p>一旦进入那种状态，很多问题能够很快得到解决，大脑飞速运转并且不会感觉到劳累。&lt;/p>
&lt;p>这种状态最忌讳被打断，因为一旦打断，再进入就会比较困难。&lt;/p>
&lt;p>这里有篇文章介绍了一些小技巧，可以让你在不得已中断心流之后，能够比较快速地恢复状态。&lt;/p>
&lt;p>作者将这些技巧比喻为高速服务区进入主路之前的加速匝道，姑且称为&lt;a class="link" href="https://census.dev/blog/an-on-ramp-to-flow" target="_blank" rel="noopener"
>进入心流的入口&lt;/a>。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://spline.design/" target="_blank" rel="noopener"
>Spline&lt;/a>，一个免费易用的 3D 设计工具，可实时协作，提供了丰富的物料库，可以基于它来快速创建有趣的 3D 场景，支持处理细腻动画交互，此外还可以导入本地模型和声音素材，支持到处多种输出格式包括WebGL、视频、链接等，很适合新手。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-10-19-26.png"
width="986"
height="536"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="441px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://codepen.io/ksenia-k/pen/poOMpzx" target="_blank" rel="noopener"
>Draw With Flowers!&lt;/a>，在threejs里用着色器语言编写的一个特效demo，可以随着鼠标移动绘制绚丽的花朵。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-10-19-52.png"
width="828"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/numbbbbb/read-react-source-code" target="_blank" rel="noopener"
>React 源码阅读&lt;/a>，一本开源电子书，通过阅读React的源码来详细理解前端框架的原理。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-10-20-26.png"
width="591"
height="369"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://codeium.com/download" target="_blank" rel="noopener"
>Codeium&lt;/a>，Github copilot 的免费平替，提供vscode、vim、neovim等常见编辑器的插件，我试了一下，效果可以接受。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-028-%E6%9C%9F/2023-04-12-10-21-52.png"
width="1024"
height="586"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 026 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/</link><pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-026-期">机器文摘 第 026 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="通用人工智能要来了吗">通用人工智能要来了吗
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-09-37-08.png"
width="854"
height="476"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>
AGI（通用人工智能），即用一个模型解决全部问题，而不是特定领域的问题（如语音识别、图像分类等）。&lt;/p>
&lt;p>我在几年前读过一本叫做《人工智能，人类最后的发明》的书。&lt;/p>
&lt;p>书里说AGI就是人类最后一个发明，因为有了它，别的一切都不需要了。&lt;/p>
&lt;p>当时感觉距离通用的人工智能还很遥远，觉得作者有些危言耸听。&lt;/p>
&lt;p>直到今年，chatGPT和GPT-4的发布，我才发觉AI的势头确实有些猛得出乎意料。&lt;/p>
&lt;p>&lt;a class="link" href="https://orangeblog.notion.site/GPT-4-8fc50010291d47efb92cbbd668c8c893" target="_blank" rel="noopener"
>《 GPT-4 ，人类迈向AGI的第一步》&lt;/a>是一篇&lt;a class="link" href="https://arxiv.org/pdf/2303.12712v1.pdf" target="_blank" rel="noopener"
>近期论文&lt;/a>的翻译，该论文由微软研究院发布，论证了当前的 GPT-4 模型已经初步具有 AGI 的苗头。&lt;/p>
&lt;p>论文内容十分详实，看完很震撼。&lt;/p>
&lt;p>摘录部分文字如下：&lt;/p>
&lt;blockquote>
&lt;blockquote>
&lt;p>&lt;strong>对话&lt;/strong>
&amp;gt; 马克：我不喜欢你昨天晚上对待杰克的方式
&amp;gt; 朱迪：你看到他在做什么了吗？他打了他哥哥的头!
&amp;gt; 马克：这并不能成为你对他大喊大叫的理由
&amp;gt; 朱迪：你想让我怎么做？让他打他的弟弟，然后什么都不说？
&amp;gt; 马克：不，我不同意
&amp;gt; 朱迪：那你为什么要为他辩护？
&lt;strong>提问：马克的意图似乎是什么？&lt;/strong>
GPT4: 马克的意图似乎是要表达他对朱迪处理与杰克关系的方式的不满，并建议她可以更加冷静和尊重。
ChatGPT：根据谈话内容，马克的意图似乎是为杰克的行为辩护，并表达他对朱迪对待杰克的不满。
&lt;strong>提问：朱迪如何看待汤姆的回应？&lt;/strong>
GPT4: 朱迪认为他的评论是对她的分析能力的攻击，也是对杰克的不当行为表示同情的表现。她的反应是防御性的和愤怒的，并质疑马克的动机。
ChatGPT：如果没有更多的文字，我不可能准确判断朱迪是如何接受马克的评论的。然而，根据朱迪的回应，她似乎并不同意马克的观点，而且可能对他为杰克的行为辩护感到沮丧。&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;h3 id="用-gpt-4-帮你编写一个游戏">用 GPT-4 帮你编写一个游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-02-56.png"
width="717"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="510px"
>
我第一次见识到 ChaptGPT 的编程能力之后，就基本离不开这个工具了。&lt;/p>
&lt;p>现在我几乎每天都在它的辅助下编写代码。&lt;/p>
&lt;p>不过，这里有个老哥更过分。&lt;/p>
&lt;p>他让 &lt;a class="link" href="https://twitter-thread.com/t/1637592014446551040" target="_blank" rel="noopener"
>GPT-4 模型帮他做出了一个3D太空赛跑游戏&lt;/a>。&lt;/p>
&lt;p>作者本身没有游戏编程经验也不懂Javascript，但是通过跟模型一点一点对话，反复将调试代码生成的错误信息反馈给模型，逐渐完成了一个完成度还挺高的游戏。&lt;/p>
&lt;h3 id="搭建基于私域数据的chatgpt">搭建基于私域数据的ChatGPT
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-12-24.png"
width="776"
height="438"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>
ChatGPT 超强的对话能力怎样应用到私有数据上？&lt;/p>
&lt;p>比如说我希望做出一个基于 ChatGPT 模型的专属客服，要吃透我的产品信息。&lt;/p>
&lt;p>官方提供的训练API和微调（fine tuning）指导相对复杂一些，对于AI模型的微调不熟悉的人员还不够友好。&lt;/p>
&lt;p>这里有一篇“零基础”教程&lt;a class="link" href="https://mp.weixin.qq.com/s/naiVMuXHAScRb_jSEJN3zg" target="_blank" rel="noopener"
>《搭建基于私域数据的ChatGPT》&lt;/a>，可以带你走一下流程，感受一下定制专属模型的步骤。&lt;/p>
&lt;h3 id="ai令人焦虑">AI令人焦虑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-21-37.png"
width="609"
height="859"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="170px"
>
这篇&lt;a class="link" href="https://mp.weixin.qq.com/s/7H1FrwbQvsh0HD9z90L0wg" target="_blank" rel="noopener"
>《AI狂飙的时代，人还有价值吗？》&lt;/a>是一期语音播客的文字转译，因为内容比较精彩，所以也收录在这里了。&lt;/p>
&lt;blockquote>
&lt;p>我觉得取代不是一个好的词儿，因为取代是一个非常容易反驳的词儿。我可以说我仍然会干什么什么，AI干不了，所以它取代不了我。
但正是这种字面上的抬杠，使得问题的本质被掩盖了，因为AI在人的生活中的渗透是一个逐渐的过程。
百分之百地取代你可能仍然不会发生，可是它也不需要百分之百的取代掉你，只要50%的取代掉你的某些工作职能，AI就会对就业市场形成非常大的冲击。
我有一个纽约的律师朋友，他是很早就开始用这个东西。
他本身不是一个技术人员，他是一个标准的文科生，平常的用一个新软件都要紧张半天的那种人。
但是他开始用这个之后，因为律师的工作是很大程度上是依赖于文本的，而文本是GPT的长项，所以他就开始用。
之后，我就问他说，所以你真的开始辞退你的员工了吗？因为他自己是一个律所合伙人。
他说我还没有真正开始辞退任何人，但是我确实打算今年暑假不用再招实习生了，因为给我省下的活完全可以让我腾出手来做一些事，以至于我可以省下招一个实习生的AD account。
这就是一个真实的影响对不对？
它没有真正取代什么东西，但是它仍然冲击了一个真实的就业市场上的职位。&lt;/p>
&lt;p>我觉得AI对我们社会的影响会以这种方式出现，它不会马上一下子让你这个人变得没有意义,但是它可以让三个人的活，两个人现在能干完，多出来那个人就没有存在的必要了，所以老板就可以把他开掉。
它并不是百分之百取代的人的方式来逐渐进行的，而且这个事情是非常真实的。这也是为什么我觉得很多人对冲击仍然没有做好心理上和事实上的准备。
其实有点令人忧虑的原因就是，如果你今天还用一种这东西，都是媒体的炒作来对待这个问题，你就很可能会在真正的影响你切身生活的冲击到来之前，没有做好对自己来说比较有用的帮助。&lt;/p>
&lt;/blockquote>
&lt;p>读完这篇文章，我的感受是，没必要焦虑，不是AI没有威胁，而是焦虑也没用，蒸汽机车发明之后，超越马车就只剩下时间问题了。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://greasyfork.org/zh-CN/scripts/445751-unlimited-downloader" target="_blank" rel="noopener"
>无限制下载器，只要能播放就能下载&lt;/a>，能够帮助下载视频网站内容的浏览器插件很多，大部分都是通过嗅探播放地址来实现的下载，网站也会采用各种加密手段来进行阻止。但是这个油猴脚本采用了另一种思路。你网站防再死不能不让观众看吧？脚本几乎采用了类似录屏的手段来进行视频下载。对于一些实在想要下载的内容，可以考虑试试这个插件。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-34-53.png"
width="640"
height="400"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/cocktailpeanut/dalai" target="_blank" rel="noopener"
>帮你本地运行 LLaMA 模型&lt;/a>，只需一行命令就可以让你在本地运行 &lt;a class="link" href="https://github.com/ggerganov/llama.cpp" target="_blank" rel="noopener"
>LLaMA&lt;/a> 模型，轻松感受在本地单机上运行大规模语言模型的魅力。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-40-09.png"
width="1920"
height="1080"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/lxe/simple-llama-finetuner" target="_blank" rel="noopener"
>微调 LLaMa 模型的工具&lt;/a>，既然都能在本地运行了，那就再给力一些，这个工具可以让你很方便地使用自己的数据训练 LLaMA 模型。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-42-04.png"
width="1013"
height="898"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Haxxnet/Compose-Examples" target="_blank" rel="noopener"
>Docker Compose 容器组合最佳实践&lt;/a>，Docker有多好用不用再说了吧，这里有一堆使用Docker Compose编排容器的模板，收录了很多十分有用的容器镜像组合，可方便快速的搭建各种业务（如：单点登录、VPN、媒体管理、文件共享、博客、维基、社交网站、项目管理等）。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-026-%E6%9C%9F/2023-03-29-10-46-53.png"
width="802"
height="445"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 025 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/</link><pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-025-期">机器文摘 第 025 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="252个字节实现播放音乐和动画">252个字节实现播放音乐和动画
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-10-25-42.png"
width="915"
height="478"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>
这里有个网页介绍了一个demo作者使用一段JavaScript代码实现了一个&lt;a class="link" href="http://www.p01.org/256b_tetris_theme/" target="_blank" rel="noopener"
>一边播放俄罗斯方块背景音乐一边播放字符动画的网页&lt;/a>，原理是利用HTML5的AudioContext对象进行声音合成，通过定时器触发基于当前时间t值的不同频率，实现音乐播放。具体代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">body&lt;/span> &lt;span class="nx">onclick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;with(new AudioContext)with(o=createOscillator())connect(destination),start(setInterval(v=&amp;gt;innerHTML=&amp;#39;TETЯIS&amp;amp;#&amp;#39;+(9624|(o.frequency.value=`RR&amp;gt;AIIA&amp;gt;777${d=&amp;#39;ARRIA&amp;gt;&amp;gt;&amp;gt;AIIRRAA7777&amp;#39;}IIIWnnbWRRR${d}`.charCodeAt(++t%58)*4)%7)+&amp;#39;P01&amp;#39;,t=232))&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">click&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="诺基亚发布的可维修手机">诺基亚发布的“可维修”手机
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-10-35-52.png"
width="614"
height="369"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>
说到诺基亚，用过的朋友第一个映入脑海的词就是“砸核桃”。&lt;/p>
&lt;p>那是iPhone还没发布的非智能手机年代。&lt;/p>
&lt;p>手机可更换电池和外壳在那时是一个标准设计，谁要是不支持这些都不好意思跟人打招呼。&lt;/p>
&lt;p>那时我经常把我的诺基亚掉在地上摔得七零八落，然后淡定地捡起来像电影里特工拼装自己的手枪那样，一个个把零件组装起来，形成“一把”手机。&lt;/p>
&lt;p>或者等手机快要没电的时候，像换弹匣那样给手机换一块电池，立马满血复活。&lt;/p>
&lt;p>这样的日子自从iPhone发布之后就再也没有了。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.theguardian.com/technology/2023/feb/25/nokia-launches-diy-repairable-budget-android-phone" target="_blank" rel="noopener"
>诺基亚近期发布了一款手机&lt;/a>，再次让我想起我那掉地上摔开几瓣的手机。这款手机号称具有良好的“可维修”性，普通用户也可一个人在家轻松拆卸。可以自行更换包括电池、屏幕、充电端口等零件。&lt;/p>
&lt;h3 id="不要重复自己是编程的好原则吗">不要重复自己是编程的好原则吗
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-10-50-45.png"
width="650"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>
不要重复自己，永远不要从头开始重写代码！&lt;/p>
&lt;p>这是很多程序员收到的忠告。&lt;/p>
&lt;p>然而它是绝对正确的吗？&lt;/p>
&lt;p>这里有篇文章&lt;a class="link" href="https://programmingisterrible.com/post/176657481103/repeat-yourself-do-more-than-one-thing-and" target="_blank" rel="noopener"
>《重复自己，重写一切》&lt;/a>，作者在文章中探讨了编程中的一些习惯，他认为这些习惯可以使代码变得更难理解、更难维护，并可能导致代码的冗长和不必要的复杂性。文章提到了重写代码可以给程序带来更好的抽象和可维护性，所以建议定期通过重新写代码的方式重构你的程序。&lt;/p>
&lt;p>说实话，我不知道作者是怎样看待所谓“屎山”代码的，也许当他面对有些代码时，他的观点也会变为：“能跑的代码，就尽量别动它了”。&lt;/p>
&lt;h3 id="慢下来">慢下来
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-10-59-28.png"
width="587"
height="205"
loading="lazy"
class="gallery-image"
data-flex-grow="286"
data-flex-basis="687px"
>
这篇文章的题目是&lt;a class="link" href="https://sive.rs/slow" target="_blank" rel="noopener"
>“慢下来”&lt;/a>，作者是Derek Sivers，一位创业者、作家和音乐家。在这篇文章中，他分享了自己对于“慢下来”这个主题的一些思考和感悟。&lt;/p>
&lt;p>虽然是个急性子，但是我很认同文章里的观点。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.macpierce.com/the-camera-shy-hoodie" target="_blank" rel="noopener"
>反跟踪识别的套件&lt;/a>，如果你觉得被公共场所的摄像头拍摄和记录或者识别侵犯了你的隐私，这里有一套开源的穿戴套件可以考虑。它通过在身上穿戴可以发射红外线的LED设备，使得摄像头画面过曝。以获得保护隐私的效果。不过仅用于研究，不知道是否符合有些国家的法律法规。网站提供了配件清单和详细的装配说明（pdf）供下载。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-11-05-16.png"
width="1203"
height="583"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="495px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://whatdoesthiscodedo.com/" target="_blank" rel="noopener"
>AI帮你解释一段代码&lt;/a>，有人使用openai的开发接口提供了一个专门帮人们解释代码执行的工具，输入代码，输出解释。并提供vscode的插件。我把文章开头那段播放音乐的Javascript代码发给他让他解释，效果如下图：
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-11-09-51.png"
width="625"
height="740"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="202px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://xenova.github.io/transformers.js/" target="_blank" rel="noopener"
>在网页中运行GPT模型&lt;/a>，一个可以在浏览器中执行Transformer模型的开源程序，可以执行轻量的模型，实现如翻译、语音转文字、图像转文字等任务。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-11-12-45.png"
width="1239"
height="519"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="572px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://aitxt.io" target="_blank" rel="noopener"
>AI生成工具箱&lt;/a>，近期，基于chatGPT模型的应用大爆发，这里有一个整理好的工具箱，可以使用ai做很多内容生成工作，包括帮你编写周报、润色文字、写道歉信、写外卖好评等，效果还不错。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-025-%E6%9C%9F/2023-03-22-11-15-00.png"
width="1033"
height="530"
loading="lazy"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 024 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/</link><pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-024-期">机器文摘 第 024 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="电池充一次可以用两年的笔记本电脑">电池充一次可以用两年的“笔记本”电脑
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-09-18-01.png"
width="830"
height="467"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>
挪威软件开发商安德烈亚斯·埃里克森（Andreas Eriksen）组装了一款笔记本电脑（或者说便携膝上型电脑？）。&lt;/p>
&lt;p>它拥有“以年为单位的电池寿命”，并且使用用Lisp编程系统界面，产品名为：&lt;a class="link" href="https://www.hackster.io/news/andreas-eriksen-s-potatop-is-a-lisp-powered-laptop-with-a-battery-life-measured-in-years-2f5d79653f24" target="_blank" rel="noopener"
>PotatoP&lt;/a>。&lt;/p>
&lt;p>CPU好像是个ARM架构的低功耗单核处理器，最高频率96MHz。&lt;/p>
&lt;p>支持蓝牙5.0。&lt;/p>
&lt;p>运行的系统为PotatOS，一个基于&lt;a class="link" href="http://www.ulisp.com/" target="_blank" rel="noopener"
>uLisp&lt;/a>（一个专门为微控制器设计的Lisp）移植的专用系统。&lt;/p>
&lt;p>使用的4.4英寸显示屏采用介于LCD和墨水屏之间的技术，省电。&lt;/p>
&lt;p>再加上机身上还带有太阳能电池，据说如果环境光充足的话，可以连续运行两年。&lt;/p>
&lt;h3 id="详解-amd-为-steam-deck-开发的-apu">详解 AMD 为 Steam Deck 开发的 APU
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-09-32-20.png"
width="671"
height="272"
loading="lazy"
class="gallery-image"
data-flex-grow="246"
data-flex-basis="592px"
>
Steam Deck 无疑是一款革命性的掌机。&lt;/p>
&lt;p>如果不是价格在国内被炒的离谱，我定会入手一台，也许再观望一下等待第二代或者三代产品更好。&lt;/p>
&lt;p>这款掌机使得在便携设备上游玩3A大作不再是幻想。&lt;/p>
&lt;p>取得这样的表现，除了得益于V厂魔改的Linux系统之外，还离不开这块由AMD定制的、代号“梵高”的 APU。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://chipsandcheese.com/2023/03/05/van-gogh-amds-steam-deck-apu/" target="_blank" rel="noopener"
>《“梵高”AMD的Steam Deck APU》&lt;/a>详细介绍了这块APU的各种技术细节，解释了为什么Steam Deck可以做到低功耗的同时还拥有相当给力的图形性能。&lt;/p>
&lt;h3 id="用磁盘阵列raid确保数据安全靠谱吗">用磁盘阵列（RAID）确保数据安全靠谱吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-09-45-46.png"
width="477"
height="250"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>
再谈谈 NAS 的事情（中年技术男的三大爱好之一）。&lt;/p>
&lt;p>像我这样的人，对于 RAID 磁盘阵列总是抱有美好的幻想。我们认为，只要将数据存放在经过合理规划的磁盘阵列中（例如 RAID 5），我们就可以高枕无忧，确保数据永远不会丢失。然而，实际上，磁盘阵列并不是备份数据的最佳选择，最佳的数据安全策略是异地多份存储。&lt;/p>
&lt;p>尽管 RAID 5 宣称随便损坏一块硬盘也不要紧，只需更换一块正常盘即可，但这种理想状态可能不太容易实现，中间随时可能会出现其他状况导致数据永久丢失。&lt;/p>
&lt;p>一篇名为&lt;a class="link" href="https://www.ucmadscientist.com/almost-lost-it-all-again/" target="_blank" rel="noopener"
>《差点儿就又全没了》&lt;/a>的博文，讲述了作者在使用 NAS 磁盘阵列时经历了一次惊险刺激的数据拯救过程。希望这篇文章能够给计划使用类似方式保存数据的朋友们一个平常心态。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://pubby.games/nesfab.html" target="_blank" rel="noopener"
>NESFab&lt;/a>，一个专为开发任天堂8位游戏机（NES、FC）设计的编程语言。具有高性能、易于装载资源、自动内存地址切换等特性，作者还在主页提供了一个使用NESFab开发游戏的教程。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-10-10-50.png"
width="490"
height="169"
loading="lazy"
class="gallery-image"
data-flex-grow="289"
data-flex-basis="695px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/AstroNvim/AstroNvim" target="_blank" rel="noopener"
>AstroNvim&lt;/a>，一套即开即用的Nvim配置文件，主打界面美观，集成了文件浏览、代码补全、语法高亮、模糊查询、可视化调试等常用插件配置。对于新手和懒得折腾的人来说，可以尝试。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-10-13-25.png"
width="814"
height="434"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/pynecone-io/pynecone" target="_blank" rel="noopener"
>pynecone&lt;/a>，一个用python开发的web应用框架，特点是使用python语言完成所有任务，包括前端和后端，可以帮助那些对于前端开发不太擅长的人更方便地制作web应用程序。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-10-16-17.png"
width="727"
height="647"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="269px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming" target="_blank" rel="noopener"
>函数式编程入门&lt;/a>，一篇介绍函数式编程的文章，介绍了函数式编程的基本概念和一些重要的函数式编程概念，并使用Javascript演示了如何使用这些概念进行函数式编程。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-024-%E6%9C%9F/2023-03-15-10-18-09.png"
width="450"
height="220"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="490px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 023 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/</link><pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-023-期">机器文摘 第 023 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="视频信号可以被窃听吗">视频信号可以被窃听吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-10-10-45.png"
width="533"
height="234"
loading="lazy"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>
我之前听到过一个传说。&lt;/p>
&lt;p>使用高灵敏度的天线，再加上一些奇妙的设备。&lt;/p>
&lt;p>可以窃听（窃视？）到附近（方圆数百米）范围之内的显示器显示的内容。&lt;/p>
&lt;p>这个传说流传的时候，还是CRT显示器的时代，当时的视频接口主要是VGA，采用模拟信号进行传输。&lt;/p>
&lt;p>如果显示器或者视频线缆所作的屏蔽不够充分的话，难免会有信号泄露。&lt;/p>
&lt;p>而VGA信号又没有任何加密，被别有用心的人收看是有一定的可能的。&lt;/p>
&lt;p>时间发展到今天，视频接口早已升级，我以为除非不小心无线投屏到了邻居家，否则就不会有视频内容泄露的情况。&lt;/p>
&lt;p>然而，&lt;a class="link" href="https://www.windytan.com/2023/02/using-hdmi-radio-interference-for-high.html" target="_blank" rel="noopener"
>今天要说的这篇文章&lt;/a>则证实了上述传说的可能。&lt;/p>
&lt;p>不过，比起传说中的窃听，作者走的更远一些。&lt;/p>
&lt;p>起因是作者在家里摆弄无线电的时候，发现了一个信号干扰源，最后发现来自他的一个树莓派设备。&lt;/p>
&lt;p>于是经过一番操作，作者不但成功通过无线接收的方式将视频信号显示了出来。&lt;/p>
&lt;p>还利用这种无线信号的干扰（或泄露？）实现了叠加数据的传输。&lt;/p>
&lt;h3 id="怎样用密码保护一个静态页面">怎样用密码保护一个静态页面？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-10-34-20.png"
width="903"
height="429"
loading="lazy"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="505px"
>
说到网站上的数据权限保护，一般我们会需要后端程序配合。&lt;/p>
&lt;p>比如使用账号系统，给用户角色分配不同的权限，使其访问后端接口时获取不同的数据。&lt;/p>
&lt;p>如果没有后台程序，只有静态页面会怎样？&lt;/p>
&lt;p>这儿有个开源工具，&lt;a class="link" href="https://robinmoisson.github.io/staticrypt/" target="_blank" rel="noopener"
>可以帮你生成带有密码保护的静态HTML页面&lt;/a>。&lt;/p>
&lt;p>具体使用方法和原理也很简单。&lt;/p>
&lt;p>输入你想设置的密码和你的HTML页面原始代码，这个工具可以使用AES-256加密算法对其进行加密。&lt;/p>
&lt;p>然后在浏览器加载时，页面自动使用一个js库实现自解密。&lt;/p>
&lt;p>这个方法用于临时保护一些静态的内容还是挺有效的，而且很方便。&lt;/p>
&lt;h3 id="写代码越干净越好吗">写代码越“干净”越好吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-10-43-47.png"
width="713"
height="344"
loading="lazy"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="497px"
>
有不少人宣称自己有代码“洁癖”。&lt;/p>
&lt;p>对于设计模式和面向对象有着非常深的执念（或者函数式编程也是）。&lt;/p>
&lt;p>市面上也充斥着很多“之美”、“之道”、“之禅”之类的书籍，强调代码要给人读、整洁干净。&lt;/p>
&lt;p>我并不反对上述观点，甚至自己也有一点这样的“洁癖”，只是有时内心会有一丝怀疑的时候，觉得如果过于追求某些东西可能会偏离了解决问题的根本目标。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.computerenhance.com/p/clean-code-horrible-performance" target="_blank" rel="noopener"
>《“干净”的代码，糟糕的性能》&lt;/a>，帮我吐槽了一些事情。&lt;/p>
&lt;p>但作者在文中所举的例子稍微有些牵强，不必过于纠结。&lt;/p>
&lt;h3 id="不知道怎么练习编程怎么办">不知道怎么练习编程怎么办
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-10-58-53.png"
width="469"
height="314"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>
经常有人困惑在学习了一门新的编程语言之后，不知该做些什么。&lt;/p>
&lt;p>就像是掌握了词语却写不出好的小说，掌握了规则也下不好象棋。&lt;/p>
&lt;p>我们从小受到的教育方式导致了，在学习技能这一块，缺失实践的动力和方法。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://prog21.dadgum.com/80.html" target="_blank" rel="noopener"
>给无目标的新手程序的一些建议&lt;/a>，虽然内容不多，但是可以看出作者也是个老油条了。&lt;/p>
&lt;p>给出的一些提示都很实在，对于技能练习方面，提的都是我希望我能遵从的。&lt;/p>
&lt;p>比如：&lt;/p>
&lt;blockquote>
&lt;p>用技能解决你实际生活中的问题。
做一些你真正会用到的东西。&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.freecodecamp.org/chinese/news/typescript-for-react-developers/" target="_blank" rel="noopener"
>写给 React 开发者的 TypeScript 指南&lt;/a>，针对React程序员的TypeScript的学习资料，解答了我一部分为什么要用TS的问题。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-11-01-19.png"
width="698"
height="375"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="446px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://method.ac/" target="_blank" rel="noopener"
>Method of Action&lt;/a>，一些免费的工具和在线小游戏（颜色搭配、贝塞尔曲线等），可以帮助你学习和掌握设计理念和工具。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-11-02-12.png"
width="605"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="314px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://archivebox.io/" target="_blank" rel="noopener"
>Archivebox&lt;/a>，一套开源的互联网内容保存方案，可以将你喜欢的页面下载下来，并自动爬取相关链接、图片等内容，类似于互联网档案馆的https://archive.org，不过可以自己搭建。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-11-06-33.png"
width="686"
height="285"
loading="lazy"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="577px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://ohiostate.pressbooks.pub/graphicshistory/front-matter/cover/" target="_blank" rel="noopener"
>History of Computer Graphics and Animation&lt;/a>，一本讲解计算机图形和动画发展历程的电子书，里面记录了计算机图形学相关的许多参考资料，曾用于俄亥俄州立大学的授课。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-023-%E6%9C%9F/2023-03-08-11-08-29.png"
width="676"
height="711"
loading="lazy"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="228px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 022 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/</link><pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-022-期">机器文摘 第 022 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="自制家庭服务器">自制家庭服务器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-10-51-39.png"
width="668"
height="367"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="436px"
>
人们常说，中年技术男的最终归宿除了钓鱼和盘核桃之外，还有一项就是折腾家里的服务器，这些服务器形态各异，但是作用都是殊途同归：NAS、软路由、虚拟化、Docker容器。&lt;/p>
&lt;p>怎样变着花样搭建家庭服务器几乎是 V 站的月经甚至日经话题。&lt;/p>
&lt;p>这里有个国外的老哥，决定使用 ARM64 架构自己“装配”一个，是那种需要焊接的“装配”。&lt;/p>
&lt;p>有兴趣的可以翻阅一下这篇&lt;a class="link" href="https://jforberg.se/blog/posts/2023-02-19-rockpro64/rockpro64.html" target="_blank" rel="noopener"
>《构建 ARM64 家庭服务器》&lt;/a>。&lt;/p>
&lt;p>文章介绍了如何用一种较为困难的方式构建一个 ARM64 架构的家用服务器。&lt;/p>
&lt;p>作者使用了一块名为 ROCKPro64 的开发板，并详细介绍了构建过程中遇到的问题以及如何解决这些问题。&lt;/p>
&lt;p>文章中包含了安装基础操作系统、配置网络连接、设置磁盘阵列和安装各种软件的详细步骤和指导，涵盖了从硬件到软件的多个方面。&lt;/p>
&lt;p>在构建过程中，作者提到了一些常见的问题和解决方法，例如如何处理不同操作系统的差异，如何在开发板上设置固件，以及如何解决硬件不兼容问题。&lt;/p>
&lt;p>总之，这篇文章是一份详细的指南，可以帮助有兴趣构建自己的家用服务器的读者了解基础知识，克服可能遇到的问题，并学习如何从头开始构建一个高效、安全的服务器。&lt;/p>
&lt;blockquote>
&lt;p>上面这段是让 chatGPT 帮我写的 :)&lt;/p>
&lt;/blockquote>
&lt;h3 id="用rust写一个大小仅有2k的极简fps游戏">用Rust写一个大小仅有2K的极简FPS游戏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-11-06-53.png"
width="480"
height="258"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="446px"
>
极简渲染器的编写教程网上有很多，但大都浅尝辄止，以静态渲染为主。&lt;/p>
&lt;p>&lt;a class="link" href="https://grantshandy.github.io/posts/raycasting/" target="_blank" rel="noopener"
>这篇文章&lt;/a>则从制作一个第一人称射击游戏的视角出发，讲解了怎样使用光线投射技术实现最基本的三维空间渲染、光照、阴影等效果。&lt;/p>
&lt;p>作者使用 Rust 语言基于 wasm 技术编写了一个在网页中运行的示例程序，该程序非常小巧，但是也充分展现了如何使用光线投射算法来实现 3D 渲染技术仲的一些基本概念，比如：墙体贴图、视角控制等。&lt;/p>
&lt;p>是我看到的教程里比较系统的一个，适合作为爱好者去研究。&lt;/p>
&lt;h3 id="玩具-cpu-模拟器">玩具 CPU 模拟器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-13-24-45.png"
width="640"
height="480"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>
国外一个大学老师觉得他的计算机组成原理课程有些枯燥，于是他&lt;a class="link" href="https://jimhall.itch.io/toy-cpu" target="_blank" rel="noopener"
>动手撸了一个 CPU 模拟器出来&lt;/a>，以帮助学生们更好的理解计算机内部运作原理。&lt;/p>
&lt;p>作者在文章里介绍了基本的原理，以及模拟器的各个组件，适合学习底层原理初入门的学生。&lt;/p>
&lt;p>另外这个模拟器也基于 MIT 协议进行了开源，文章中附有开源仓库的地址和编译好的可执行文件下载连接。&lt;/p>
&lt;p>需要注意的是该程序运行环境为DOS，现在要想体验的话，需要先安装 &lt;a class="link" href="https://www.dosbox.com/download.php?main=1" target="_blank" rel="noopener"
>DosBOX&lt;/a> 这个模拟器。&lt;/p>
&lt;h3 id="不用任何构建系统编写前端代码">不用任何构建系统编写前端代码
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-13-35-29.png"
width="632"
height="224"
loading="lazy"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="677px"
>
比起十几年前，前端开发工程现在已经变得十分复杂。&lt;/p>
&lt;p>有次我想写个简单的页面程序，但是却花费了一上午的时间陷入对框架和构建系统的选择上。&lt;/p>
&lt;p>后来不得不放弃，改用记事本随便用原生Javascript完成了功能。&lt;/p>
&lt;p>&lt;a class="link" href="https://jvns.ca/blog/2023/02/16/writing-javascript-without-a-build-system/" target="_blank" rel="noopener"
>这篇文章&lt;/a>的作者跟我有同样的感受。&lt;/p>
&lt;p>作者认为，对于一些简单的项目来说，使用构建系统可能是不必要的。&lt;/p>
&lt;p>因为构建系统会增加开发和维护的复杂性，而且可能会导致一些性能问题。&lt;/p>
&lt;p>文章演示了作者如何使用原生的Javascript和浏览器的开发者工具来实现一些常见的构建系统功能。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener"
>计算机知识笔记&lt;/a>，一个计算机科学知识笔记仓库，包括计算机基础知识、编程语言和算法、开发工具、面试笔试题目等等，是一个非常实用的笔记库。目前在 Github 上有超过 162k 个 star 。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-13-47-03.png"
width="344"
height="602"
loading="lazy"
class="gallery-image"
data-flex-grow="57"
data-flex-basis="137px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.hugi.scene.org/online/hugi31/hugi%2031%20-%20index%20coding%20corner.htm" target="_blank" rel="noopener"
>Creating Demos&lt;/a>，这套教程是 &lt;a class="link" href="https://en.wikipedia.org/wiki/Hugi" target="_blank" rel="noopener"
>Hugi 杂志&lt;/a>在2001年第31期发布的一系列编程文章，主题是“Demo程序”的制作，是我目前在网络上见到的比较完整和耐心的一套讲解 Demoscene 如何制作的教程。虽然有些技术是老旧的，但是思想一直是不变的，能够学到很多平时很难了解到的东西，现在很少有人愿意分享这些了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-13-52-29.png"
width="543"
height="367"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="355px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/iawia002/lux" target="_blank" rel="noopener"
>网络视频下载器&lt;/a>，一个 go 语言编写的网络音视频资源下载工具，类似 youtube-dl，但是支持的网站要更多一些。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-13-54-53.png"
width="870"
height="666"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.ambient.run/" target="_blank" rel="noopener"
>ambient&lt;/a>，Ambient是一个使用 WebAssembly、Rust 和 WebGPU 技术构建的高性能多人游戏和3D应用的开源引擎。特点是针对构建多人游戏开发进行优化支持。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-022-%E6%9C%9F/2023-03-01-14-03-29.png"
width="981"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="622px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 021 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-021-期">机器文摘 第 021 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="chatgpt-原理通俗讲解">chatGPT 原理通俗讲解
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-14-57-11.png"
width="1240"
height="410"
loading="lazy"
class="gallery-image"
data-flex-grow="302"
data-flex-basis="725px"
>
可能是有人炒作的缘故，chatGPT 热度一直不降，连街边买菜的大妈都在讨论这个“人工智能机器人”。&lt;/p>
&lt;p>可能是它输出语言的流畅度实在是太接近真实的人类了，用惯了之前那种“智能助理”的人很容易感到震惊。&lt;/p>
&lt;p>然而其背后的原理并非像想象的那么复杂，甚至是大力出奇迹的又一个经典样例。&lt;/p>
&lt;p>最近关于它的文章也是铺天盖地，各种分析、叫好，很少有冷静下来探讨其背后机理的。&lt;/p>
&lt;p>我翻看了几篇之后，发现唯有这篇&lt;a class="link" href="https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/" target="_blank" rel="noopener"
>《chatGPT在做什么以及它为什么好使》&lt;/a> 比较优秀。读起来比较平和，没有压力。&lt;/p>
&lt;p>文章揭示了即使像chatGPT这样的大型语言模型也是一个单词一个单词慢慢往出崩的，并尝试说清楚这么流畅的语言是基于什么来预测后续单词的概率。&lt;/p>
&lt;h3 id="怎样利用多gpu训练真正的大型模型">怎样利用多GPU训练真正的大型模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-13-37.png"
width="920"
height="461"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>
前面提到的 chatGPT 模型，体量非常大，据说训练一次就要耗费上千万美元。&lt;/p>
&lt;p>作为普通开发者我们是不敢奢望自己上手训练一番。&lt;/p>
&lt;p>不过，这里有一篇文章可以让我了解像这样的&lt;a class="link" href="https://lilianweng.github.io/posts/2021-09-25-train-large/" target="_blank" rel="noopener"
>大模型是如何进行并行训练的&lt;/a>。&lt;/p>
&lt;p>另外还有个开源的项目，号称可以&lt;a class="link" href="https://github.com/hpcaitech/ColossalAI/blob/main/README-zh-Hans.md" target="_blank" rel="noopener"
>在较少资源的基础设施上进行 GPT 模型训练&lt;/a>，有兴趣的可以试试。&lt;/p>
&lt;h3 id="怎样搭建一个电子爱好者工作间">怎样搭建一个电子爱好者工作间
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-28-10.png"
width="716"
height="439"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="391px"
>
拥有一个电子产品工作室一直是我的一个梦想。&lt;/p>
&lt;p>电烙铁、稳压电源、万用表，是我能想到的最基本的设备。&lt;/p>
&lt;p>如果还想更完美，可以借鉴这篇文章所介绍的思路，&lt;a class="link" href="https://lcamtuf.substack.com/p/setting-up-an-electronics-workshop" target="_blank" rel="noopener"
>搭建一个电子爱好者工作间&lt;/a>。&lt;/p>
&lt;h3 id="运气计算公式">运气计算公式
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-37-36.png"
width="809"
height="570"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>
看到一个关于运气的文章&lt;a class="link" href="https://www.swyx.io/create-luck" target="_blank" rel="noopener"
>《如何获得好运气》&lt;/a>，觉得里面提到的“怎样使得随机的运气变得让好运更加倾向于你”的说法比较有意思。&lt;/p>
&lt;p>于是就收录一下。&lt;/p>
&lt;p>文章里探讨的问题，很容易让我联想到关于“下雨的时候是飞速跑动淋雨多还是慢慢走淋雨多”的问题。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://academy.cs.cmu.edu/" target="_blank" rel="noopener"
>卡耐基梅隆大学计算机科学在线教程&lt;/a>，CMU CS Academy 是卡内基梅隆大学计算机科学学院 (SCS) 的一个项目，其目标是开发一种新颖的、世界级的、在线的、完全免费的交互式高中计算机科学课程。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-45-42.png"
width="767"
height="390"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="472px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.handsome-css.com/" target="_blank" rel="noopener"
>纯CSS实现的超漂亮UI组件收集&lt;/a>，网站收集了超多 UI 组件，基于 纯 CSS 实现，采用 MIT 开源协议发布，可以自由使用。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-47-30.png"
width="863"
height="349"
loading="lazy"
class="gallery-image"
data-flex-grow="247"
data-flex-basis="593px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://cn.sli.dev/" target="_blank" rel="noopener"
>为开发者打造的演示文稿工具&lt;/a>，Slidev 旨在为开发者提供灵活性和交互性，通过使用他们已经熟悉的工具和技术，使他们的演示文稿更加有趣、更具表现力和吸引力。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-50-17.png"
width="652"
height="251"
loading="lazy"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="623px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.stableattribution.com/" target="_blank" rel="noopener"
>根据ai做的图倒推出用于训练模型的原始图&lt;/a>，这个网站比较有意思，前一段时间比较火的根据文字生成图片的 AI ，这里可以将根据 AI 生成的图片反推出它当时样本训练的原始图。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-021-%E6%9C%9F/2023-02-22-15-56-55.png"
width="1696"
height="398"
loading="lazy"
class="gallery-image"
data-flex-grow="426"
data-flex-basis="1022px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 020 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/</link><pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-020-期">机器文摘 第 020 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="怎样获得非凡成就">怎样获得非凡成就
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/2023-02-15-09-57-43.png"
width="749"
height="383"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="469px"
>
多年来，我对成功学嗤之以鼻。&lt;/p>
&lt;p>但也对有些人的成功给予应有的尊重。&lt;/p>
&lt;p>我所欣赏的成功人士有一种特殊气质，我说不上来具体是什么特点，有点儿像反叛精神，又有点儿对手工技术的狂热。&lt;/p>
&lt;p>这些人里对我影响比较大的是《黑客与画家》的作者 保罗·格雷厄姆（&lt;a class="link" href="https://zh.wikipedia.org/zh-hans/%E4%BF%9D%E7%BD%97%C2%B7%E6%A0%BC%E9%9B%B7%E5%8E%84%E5%A7%86" target="_blank" rel="noopener"
>Paul Graham&lt;/a>）。&lt;/p>
&lt;p>他创建了著名的 &lt;a class="link" href="https://zh.wikipedia.org/zh-hans/Y_Combinator" target="_blank" rel="noopener"
>YC 孵化器公司&lt;/a>，也打造了很多成功的产品。&lt;/p>
&lt;p>今天推荐的这篇文章&lt;a class="link" href="https://blog.samaltman.com/how-to-be-successful" target="_blank" rel="noopener"
>《How To Be Successful》&lt;/a>的作者，是保罗·格雷厄姆非常推崇的一位创业者。&lt;/p>
&lt;p>文章分享的观点乍看有成功学的影子，但读完却能引人思考。&lt;/p>
&lt;p>这里是中文翻译版：&lt;a class="link" href="https://mp.weixin.qq.com/s/pQYztNmmQ6W4fRxPIEsWYQ" target="_blank" rel="noopener"
>《观察成千上万创业者后，关于如何获得非凡成就的13条思考》&lt;/a>&lt;/p>
&lt;p>我觉得这些观点至少可以给长期埋头技术工作的人们一些启发，我稍微列举几条如下：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>这个世界很少人能做到将眼光放长远，而那些有长远眼光的人会得到市场的丰厚回报。&lt;/li>
&lt;li>把时间花在做正确的事上，比花长时间进行工作更重要。&lt;/li>
&lt;li>跟着你的好奇心走。因为对你来说兴奋的事情对其他人来说也同样兴奋。&lt;/li>
&lt;li>成为内驱型的人(即：自己去做一件事的原因来自于自己，而不是外部的力量或别人的期望)。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="怎样在客厅建立自己的私人影院">怎样在客厅建立自己的私人影院
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/2023-02-15-10-21-45.png"
width="841"
height="396"
loading="lazy"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>
智能电视或者智能盒子已成为现在客厅的标配。&lt;/p>
&lt;p>如何充分发挥它们的作用，早已是技术爱好者的孜孜不倦探索的课题。&lt;/p>
&lt;p>前些天我偶然收到一份公开的云盘链接，使用开源的 &lt;a class="link" href="https://github.com/alist-org/alist" target="_blank" rel="noopener"
>AList&lt;/a>(一个支持网盘存储的文件列表程序，可以通过多种协议将网盘映射为本地访问的存储路径) 进行构建。里面整理了大量的影视资源，有不少是高质量、高码率的蓝光原盘文件。&lt;/p>
&lt;p>这就激发了我的好奇心。&lt;/p>
&lt;p>由于自己一直按耐住折腾 NAS 的念头，这些年一直没有收集电影。&lt;/p>
&lt;p>但现在既然有在线的资源，不妨尝试一下。&lt;/p>
&lt;p>于是我找到了这篇&lt;a class="link" href="https://wp.gxnas.com/12278.html" target="_blank" rel="noopener"
>《利用KODI和云盘打造4K高清私人云影院》&lt;/a>（仅作研究，观影和收藏还需支持正版）。&lt;/p>
&lt;p>按照文章的指导，成功给电视安装了 KODI（一个媒体中心 App），并进行了配置，可以非常方便地浏览、观看互联网云盘上的高清电影。&lt;/p>
&lt;p>比起云盘官方所出品的各种 App 在体验上更加灵活、完美。&lt;/p>
&lt;h3 id="噪声在计算机图形学里的作用">“噪声”在计算机图形学里的作用
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/2023-02-15-10-40-28.png"
width="671"
height="303"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="531px"
>
想要计算机产生的图形更加的接近自然，生成各式各样的噪声是必不可少的算法。&lt;/p>
&lt;p>之前在读&lt;a class="link" href="https://natureofcode.com/" target="_blank" rel="noopener"
>《The Nature of Code》&lt;/a>（中文译作：代码本色）一书的时候，作者花了大量篇幅讲解关于噪声、随机等对于模拟自然界中各种现象的重要作用。&lt;/p>
&lt;p>或许在噪声里就隐藏着大自然最深处的秘密。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://zhuanlan.zhihu.com/p/68507311" target="_blank" rel="noopener"
>WebGL进阶——走进图形噪声&lt;/a>可以让你领略一些图形噪声的神奇。&lt;/p>
&lt;p>很多场景都给出了 WebGL 实现的源码，可以边学边练。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://threegn.app/" target="_blank" rel="noopener"
>ThreeGN&lt;/a>，一个基于网页的三维建模程序，特点是具有类似 Blender 的几何节点编辑功能。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/2023-02-15-10-51-53.png"
width="846"
height="453"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://tabler-icons.io/" target="_blank" rel="noopener"
>tabler&lt;/a>，一个开源的图标库，可用于 Web 或 移动端应用开发，全部免费使用。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/2023-02-15-10-55-30.png"
width="796"
height="314"
loading="lazy"
class="gallery-image"
data-flex-grow="253"
data-flex-basis="608px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://microsoftedge.microsoft.com/addons/detail/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AF%91/amkbmndfnliijdhojkpoglbnaaahippg" target="_blank" rel="noopener"
>immersive-translate&lt;/a>，一个在线翻译浏览器插件，支持 Edge、Firefox、Chrome 等浏览器，优点是可以在网页上追加中文显示，原文和译文同时展示，对于想提升外语水平的人士，是个不错的对照工具。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-020-%E6%9C%9F/2023-02-15-10-59-08.png"
width="621"
height="357"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 019 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-019-期">机器文摘 第 019 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="现阶段-ai-能对游戏开发提供多大帮助">现阶段 AI 能对游戏开发提供多大帮助
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-13-19-34.png"
width="686"
height="358"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>
AI 在最近有多爆发自然不用我再赘述，抛开那些狂热的能够引起焦虑的言论（比如 AI 即将替代大量工作岗位），也有不少人选择跟 AI 和平相处。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.traffickinggame.com/ai-assisted-graphics/" target="_blank" rel="noopener"
>《AI 辅助图形》&lt;/a>的作者是一个有着游戏制作二十年经验的从业者，近期想尝试尽可能地利用各种 AI 加持的辅助工具，试图通过他们提升制作效率。&lt;/p>
&lt;p>作者从游戏的概念原型阶段，一直到三维模型资产的制作和游戏场景的搭建，均选用了具有 AI 能力的效率工具进行支持。&lt;/p>
&lt;p>最终结论是，虽然在过程中会有这样那样的不顺手，但这些工具确实能够帮助他节约大量工作时长。&lt;/p>
&lt;p>所以作者的看法是，他很愿意将 AI 工具看作他的同事。&lt;/p>
&lt;p>照这么说的话，留给人类的工作真的是不多了。&lt;/p>
&lt;h3 id="chatgpt-学习笔记">ChatGPT 学习笔记
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-13-32-44.png"
width="600"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>
ChatGPT 在春节后又起了一波热度。&lt;/p>
&lt;p>网上到处都是关于它的段子，有人用它写论文，有人拿来给孩子辅导作业，有人写情书，有人当个动嘴的甲方让它写程序。&lt;/p>
&lt;p>喜得微软恨不得现在就把它接到搜索引擎里，逼得谷歌提前释放出自己的类似模型。&lt;/p>
&lt;p>国内的百度也表示将在3月份发出自己的大规模语言模型。&lt;/p>
&lt;p>要我说就不要这么着急，不妨拨开迷雾，看看 ChatGPT 是个什么东东。&lt;/p>
&lt;p>在网上发现这篇&lt;a class="link" href="https://blog.csdn.net/v_JULY_v/article/details/128579457" target="_blank" rel="noopener"
>《ChatGPT 通俗笔记》&lt;/a>，讲述了这个模型的发展历程，以及一些基本的概念原理。&lt;/p>
&lt;p>此类中文资料不多，给这篇文章作者点赞。&lt;/p>
&lt;h3 id="视觉设计的一些规则">视觉设计的一些规则
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-13-49-28.png"
width="697"
height="357"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>
现在专业的界限越来越模糊，每个人都应该掌握一些基本的设计理念，以便在日常工作中输出的成果具备基本的美感。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://anthonyhobday.com/sideprojects/saferules/" target="_blank" rel="noopener"
>《视觉设计安全法则》&lt;/a>，浅显易读、明确具体，对于视觉设计活动很有指导意义。&lt;/p>
&lt;p>看完之后无论是自己动手做 PPT 还是软件的 demo 原型，都可以用到。&lt;/p>
&lt;p>我觉得甚至对于摄影构图、房屋装修都能有所借鉴，因为美是相通的。&lt;/p>
&lt;h3 id="python-做后端开发的技术选型">Python 做后端开发的技术选型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-13-57-37.png"
width="673"
height="314"
loading="lazy"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="514px"
>
有时候想做一些 Web 应用的原型，Python 是我的首选语言，写起来顺手又省事，能节约不少时间。&lt;/p>
&lt;p>但是由于用的不够深入，在选择开发框架的时候，稍微有些困惑。&lt;/p>
&lt;p>比如同样都能提供快速的开发能力，Fastapi 和 Flask到底选哪个？&lt;/p>
&lt;p>如果你也有跟我一样的疑惑，可以看看这篇&lt;a class="link" href="https://www.turing.com/kb/fastapi-vs-flask-a-detailed-comparison" target="_blank" rel="noopener"
>《Fastapi 和 Flask 详细对比》&lt;/a>。&lt;/p>
&lt;p>文章深度分析了这两个框架的异同以及所适用的工作场景。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/red-data-tools/YouPlot" target="_blank" rel="noopener"
>YouPlot&lt;/a>，控制台绘图工具，可以在控制台窗口用字符的方式进行绘图，支持柱状图、散点图等。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-14-10-37.png"
width="587"
height="355"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://play-cs.com/zh/servers" target="_blank" rel="noopener"
>网页在线联机 CS1.6&lt;/a>，只需浏览器即可联机玩反恐精英 1.6，这个网站通过 WASM 技术将 CS 1.6 移植到了网页中运行，现代浏览器均可支持，第一次加载时间略长，但体验还算流畅，在线人员数量也挺多，随时可以匹配到。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-14-20-36.png"
width="811"
height="397"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="490px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://fffuel.co/sssvg" target="_blank" rel="noopener"
>交互式 SVG 参考&lt;/a>，一个可以在线了解 SVG 图形标准细节的网站，提供交互式界面进行实时演示。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-14-25-38.png"
width="904"
height="428"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="506px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/LunarFang416/url-animations" target="_blank" rel="noopener"
>浏览器地址栏里的动画&lt;/a>，一个有意思的 Js 库，通过动态修改浏览器地址栏的 URL 地址来实现动画，效果还比较萌。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-019-%E6%9C%9F/2023-02-07-14-26-39.png"
width="757"
height="208"
loading="lazy"
class="gallery-image"
data-flex-grow="363"
data-flex-basis="873px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 018 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-018-期">机器文摘 第 018 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="游戏高清重制科林麦克雷拉力赛3">游戏高清重制《科林麦克雷拉力赛3》
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-09-15-47.png"
width="857"
height="434"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>
游戏高清重制一直是我比较感兴趣的话题，可能因为比较喜欢怀旧吧。&lt;/p>
&lt;p>我曾经收藏过采用覆盖显示驱动的方式进行高清分辨率支持的《极品飞车 5》、《Quake 3》等游戏。&lt;/p>
&lt;p>也见过一些更古老的游戏在更新资源包之后重新焕发青春。&lt;/p>
&lt;p>不过一直没有接触过真正的重制过程。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://cookieplmonster.github.io/2023/01/15/remastering-colin-mcrae-rally-3-silentpatch/" target="_blank" rel="noopener"
>《重制科林麦克雷拉力赛》&lt;/a>详细记录了一个优秀的赛车游戏进行高清重制的过程。&lt;/p>
&lt;p>可以带你了解老旧游戏如何进行“宽屏”、“超宽屏”支持，如何重制高清界面UI元素等，过程充满了对不可能的挑战。&lt;/p>
&lt;h3 id="把网页渲染到控制台">把网页渲染到控制台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-09-24-01.png"
width="1067"
height="464"
loading="lazy"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>
通过控制台窗口进行上网，你可能觉得并不新鲜。&lt;/p>
&lt;p>毕竟已经有很多类似 w3m 这种在控制台下基于字符的浏览器程序。&lt;/p>
&lt;p>但是他们的缺点都是不能显示图形，而且几乎失去了对页面的样式渲染。&lt;/p>
&lt;p>今天这篇&lt;a class="link" href="https://fathy.fr/carbonyl" target="_blank" rel="noopener"
>《把网页渲染到控制台》&lt;/a>则另辟蹊径，虽然同样是在控制台的字符界面，但是渲染手段却大不相同。&lt;/p>
&lt;p>它将控制台字符当作单个像素来处理，采用现代浏览器内核进行页面解析和预渲染计算。&lt;/p>
&lt;p>然后在像素渲染阶段，采用了控制台字符来进行替换。&lt;/p>
&lt;p>虽然最终效果无法跟图形界面下的浏览器相比。&lt;/p>
&lt;p>但是它毕竟提供了一种在终端控制台进行图形化网页显示的可能。&lt;/p>
&lt;h3 id="chromium-渲染流水线字节码到像素的一生">Chromium 渲染流水线——字节码到像素的一生
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-09-32-37.png"
width="481"
height="580"
loading="lazy"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="199px"
>
看了前面网页渲染到控制台的文章，如果对浏览器的原理架构比较感兴趣的话。&lt;/p>
&lt;p>可以看看这篇&lt;a class="link" href="https://zhuanlan.zhihu.com/p/574069391" target="_blank" rel="noopener"
>讲解 Chromium 浏览器渲染架构&lt;/a>的文章。&lt;/p>
&lt;p>现代浏览器已经复杂到不可能通过个人从零开始实现。&lt;/p>
&lt;p>了解一下他们的架构，即便不从事相关开发，也可能对自己的软件架构产生有益影响。&lt;/p>
&lt;h3 id="99-行代码实现光线追踪">99 行代码实现光线追踪
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-09-40-20.png"
width="702"
height="235"
loading="lazy"
class="gallery-image"
data-flex-grow="298"
data-flex-basis="716px"
>
光线追踪在图形渲染中十分关键的概念。&lt;/p>
&lt;p>同时也是现代电影工业实现逼真光照渲染所必须的技术手段。&lt;/p>
&lt;p>然而它的原理却并不复杂，甚至只需少量代码就可以自己实现一个建议的渲染器。&lt;/p>
&lt;p>这篇&lt;a class="link" href="http://kevinbeason.com/smallpt/" target="_blank" rel="noopener"
>《99 行代码实现光线追踪》&lt;/a>就只是用了少量 C++ 代码实现了一个简单的带有全局光照、阴影、反射的场景渲染。&lt;/p>
&lt;p>虽然看起来简单，效果还是很令人惊艳的。&lt;/p>
&lt;p>适合我这种喜欢研究原理，但又不太深入的“技术爱好者”。&lt;/p>
&lt;h3 id="光线追踪深入">光线追踪深入
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-09-47-14.png"
width="731"
height="333"
loading="lazy"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="526px"
>
既然前面提到了光线追踪，不妨再引申一下。&lt;/p>
&lt;p>很多光线追踪的入门教程都会教你渲染一些简单的模型，比如球体，圆柱体等等。&lt;/p>
&lt;p>如果想基于光线追踪技术渲染复杂一些的三维模型，应该怎么做？&lt;/p>
&lt;p>这里有一篇&lt;a class="link" href="https://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/" target="_blank" rel="noopener"
>《光线行进和符号距离函数》&lt;/a>，里面介绍了基于光线行进算法（光线追踪的一种实现方式）和符号距离函数来构建三维场景中复杂模型的思路。&lt;/p>
&lt;p>内容比较详细，并带有示例代码。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.chronophoto.app/game.html" target="_blank" rel="noopener"
>chronophoto&lt;/a>，一个猜照片年代的游戏，根据网站随机展示的老照片，来判断这张照片是哪一年拍摄的，答案区间 1900 到 2020 ，我试了试还挺有意思，可以根据照片中出现的物品和人物的衣着进行分析。&lt;br>
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-09-56-50.png"
width="944"
height="432"
loading="lazy"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="524px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/GimelStudio/GimelStudio" target="_blank" rel="noopener"
>Gimel Studio&lt;/a>，一个基于节点系统的照片后期处理工具，开源，采用 Python 编写。&lt;br>
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-10-00-55.png"
width="1009"
height="537"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/vitoplantamura/BugChecker" target="_blank" rel="noopener"
>BugChecker&lt;/a>，一个支持 Windows 11 的类 SoftICE 调试器，开源。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-10-04-14.png"
width="649"
height="376"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/google/swiftshader" target="_blank" rel="noopener"
>swiftshader&lt;/a>，一个基于 CPU 实现 OpenGL 渲染的图形库。主要应用在谷歌开源的 chromium 项目里，用纯软件算法实现了OpenGL、Vulkan图形接口。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-018-%E6%9C%9F/2023-01-31-10-08-42.png"
width="308"
height="307"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 017 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-017-期">机器文摘 第 017 期
&lt;/h1>&lt;p>&lt;em>预计春节期间暂停更新，节后恢复。&lt;/em>&lt;/p>
&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="怎样在-1-位色深的-lcd-屏幕上显示灰度httpswwwzephraymepostgrayscale_lcd">&lt;a class="link" href="https://www.zephray.me/post/grayscale_lcd/" target="_blank" rel="noopener"
>怎样在 1 位色深的 LCD 屏幕上显示灰度&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-09-33-34.png"
width="1920"
height="1080"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>
只有 1 位色深的 LCD 屏幕按理说是不能显示灰度的，因为他的像素点要么纯黑、要么纯白，显示的图案效果肯定非常差。&lt;/p>
&lt;p>如果说非要显示灰度的话，我第一个想法是通过&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E6%8A%96%E5%8B%95_%28%E6%95%B8%E4%BD%8D%E8%A8%8A%E8%99%9F%E8%99%95%E7%90%86%29" target="_blank" rel="noopener"
>抖动算法&lt;/a>进行模拟（即通过像素点的稀疏程度来制造错觉，如下图）。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-09-40-49.png"
width="180"
height="215"
loading="lazy"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="200px"
>&lt;/p>
&lt;p>然而这篇文章的作者采取了更为巧妙地方法，使用 PWM （脉冲宽度调制）技术，利用每个像素点的点亮时间不同来制造灰度错觉。&lt;/p>
&lt;p>之前只是见过使用 PWM 调整 LED 灯泡的亮度，像这种用法我倒是第一次见。&lt;/p>
&lt;h3 id="作为一名数据工程师和作家我为什么要用-neovimhttpswwwsspaeticomblogwhy-using-neovim-data-engineer-and-writer-2023">&lt;a class="link" href="https://www.sspaeti.com/blog/why-using-neovim-data-engineer-and-writer-2023/" target="_blank" rel="noopener"
>作为一名数据工程师和作家，我为什么要用 (Neo)vim&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-09-44-27.png"
width="500"
height="264"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;p>很多人都被 Vim 复杂的功能和陡峭的学习曲线吓到过。&lt;/p>
&lt;p>也有很多人本着对效率的极致追求，而选择了征服 Vim，从而走上高效（折腾）的路线。&lt;/p>
&lt;p>本文作者作为一名数据工程师，讲述了他学习 Vim 的心路历程，也许对于现在还在观望的人有所启发。&lt;/p>
&lt;p>我个人使用 Vim 已十多年时间，虽然从未触及特别深入的技能（如宏定义、寄存器等），但是 Vim 这种神器的特点就是，只要你忍者难受越过操作的及格线，剩下的技能你稍微多掌握一点，就能马上给你带来非常丰厚的回报。&lt;/p>
&lt;h3 id="焦散是什么如何正确地渲染焦散httpswwwchaoscomcnblogwhat-are-caustics-and-how-to-render-them-the-right-way">&lt;a class="link" href="https://www.chaos.com/cn/blog/what-are-caustics-and-how-to-render-them-the-right-way" target="_blank" rel="noopener"
>焦散是什么？如何正确地渲染焦散？&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-09-55-28.png"
width="850"
height="469"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="434px"
>
焦散(Caustics)在现实生活中随处可见，但在渲染图中却很稀有。这篇文章解答了为什么渲染焦散很难，以及有哪些方法可以迂回实现。&lt;/p>
&lt;p>找到这篇文章是因为我在 Github 上发现了&lt;a class="link" href="https://github.com/pmndrs/drei#caustics" target="_blank" rel="noopener"
>一个使用 webgl 实现焦散渲染的项目&lt;/a>，效果非常不错，于是想研究一下背后的原理。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-10-02-22.png"
width="652"
height="339"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://refactoringguru.cn/design-patterns" target="_blank" rel="noopener"
>常用设计模式有哪些&lt;/a>，一本在线电子书，图文并茂，以比较直观的方式介绍了软件开发常用的设计模式，支持英文、日文、中文等多国语言。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-10-04-26.png"
width="673"
height="357"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://abseil.io/resources/swe-book/html/toc.html" target="_blank" rel="noopener"
>谷歌的软件工程&lt;/a>，好几年前的一本书，讲述在谷歌做软件开发的体验和最佳实践，现在出了可免费阅读的电子版。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-10-04-41.png"
width="504"
height="662"
loading="lazy"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="182px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/ToolJet/ToolJet" target="_blank" rel="noopener"
>开源低代码开发框架 ToolJet&lt;/a>，免费开源的低代码开发框架，带有可视化编辑器，从数据持久化到前端界面全部无需编写代码。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-10-08-12.png"
width="795"
height="414"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="460px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/Eandrju/cellular-automaton.nvim" target="_blank" rel="noopener"
>一个无聊的 Neovim 插件&lt;/a>，一个没啥用的 Neovim 插件，唯一能做的事情是当你感到无聊时，可以将你的文本编辑区里的文本执行一个“元胞自动机”动画，看起来还算解压。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-10-11-33.png"
width="547"
height="614"
loading="lazy"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="213px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.futurepedia.io/" target="_blank" rel="noopener"
>最大的 AI 工具箱&lt;/a>，喜欢研究 AI 的不要错过这个网站，收集了各种 AI 模型的开源项目和相关网址，涵盖了图像识别、自然语言处理等常见的、时兴的 AI 技术。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-017-%E6%9C%9F/2023-01-16-10-15-15.png"
width="1151"
height="729"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 016 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-016-期">机器文摘 第 016 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="黑客与汽车httpssamcurrynetweb-hackers-vs-the-auto-industry">&lt;a class="link" href="https://samcurry.net/web-hackers-vs-the-auto-industry/" target="_blank" rel="noopener"
>黑客与汽车&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-13-16-50.png"
width="680"
height="414"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="394px"
>
现在的汽车很多都具有联网的能力，可以通过互联网进行便利的远程操作。&lt;/p>
&lt;p>比如获取汽车位置、健康状态、远程启动、远程开门等等。&lt;/p>
&lt;p>作为消费者来说，在使用这些便利功能的时候，内心是十分信任厂商的。&lt;/p>
&lt;p>觉得安全问题肯定会被厂商非常重视，作为头号问题来抓。&lt;/p>
&lt;p>然而这篇&lt;a class="link" href="https://samcurry.net/web-hackers-vs-the-auto-industry/" target="_blank" rel="noopener"
>《黑客与汽车》&lt;/a>却改变了我的看法，原来这些车联网的安全防护如此的脆弱。&lt;/p>
&lt;p>文章作者为业内人士，写的还比较实在。如下列举部分这些黑客可以对车进行的未授权操作：&lt;/p>
&lt;ol>
&lt;li>远程发动机启停、车门解锁与锁定、大灯闪烁、喇叭鸣笛；&lt;/li>
&lt;li>锁定用户，迁移管理权；&lt;/li>
&lt;li>根据车架号下载到用户的销售档案；&lt;/li>
&lt;li>远程刷新更新车辆电脑固件；&lt;/li>
&lt;li>跟踪车辆物理GPS位置；&lt;/li>
&lt;/ol>
&lt;p>看完我感觉是不是得把我的相关车联网服务给停一停了。&lt;/p>
&lt;h3 id="汇编代码阅读指南httpswwwtimdbgcompostsfakers-guide-to-assembly">&lt;a class="link" href="https://www.timdbg.com/posts/fakers-guide-to-assembly/" target="_blank" rel="noopener"
>汇编代码阅读指南&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-13-30-23.png"
width="1061"
height="636"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>
写汇编代码很麻烦，阅读起来也很费劲吗？&lt;/p>
&lt;p>这儿有&lt;a class="link" href="https://www.timdbg.com/posts/fakers-guide-to-assembly/" target="_blank" rel="noopener"
>一份简要的汇编阅读指南&lt;/a>，作者介绍了一些汇编代码的阅读技巧。&lt;/p>
&lt;p>因为根据统计显示，最常用的汇编指令也就那么十来个，所以并没有想象中的那么晦涩和高深莫测。&lt;/p>
&lt;h3 id="使用-svg-绘制逼真的绳索httpsmuffinmanioblogdraw-svg-rope-using-javascript">&lt;a class="link" href="https://muffinman.io/blog/draw-svg-rope-using-javascript/" target="_blank" rel="noopener"
>使用 SVG 绘制逼真的绳索&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-13-38-11.png"
width="786"
height="342"
loading="lazy"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>
SVG 是在网页中进行矢量绘图的技术，比起 Canvas 画板的像素图像，SVG 具有放大不失真的特点，在网页中可以通过 Javascript 操作生成 SVG 图形对象，实现各种复杂的图案。&lt;/p>
&lt;p>这篇文章的作者从几何的角度考虑了如何使用矢量图形来绘制一个现实中的麻绳图案，要不仅体现出绳索的扭曲，还要正确表现绳索分支之间的叠压，作者提出了一个巧妙的使用 SVG path 进行实现的方法。还给出了代码。&lt;/p>
&lt;p>你要问作者为什么这么做，有什么用没有？我想作者可能会回答：Because I can ！&lt;/p>
&lt;h3 id="ssh-进阶用法介绍httpsplantegggithubio20190602e58fb2e4b88ae69c80e585a8_ssh_e69a97e9bb91e68a80e5b7a7e8afa6e8a7a3--e694b6e8978fe4bf9de5b9b3e5ae89">&lt;a class="link" href="https://plantegg.github.io/2019/06/02/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8_SSH_%E6%9A%97%E9%BB%91%E6%8A%80%E5%B7%A7%E8%AF%A6%E8%A7%A3--%E6%94%B6%E8%97%8F%E4%BF%9D%E5%B9%B3%E5%AE%89/" target="_blank" rel="noopener"
>SSH 进阶用法介绍&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-13-55-02.png"
width="800"
height="480"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;/p>
&lt;p>经常在 Linux 系统下进行开发或者运维的专业人士，可能每天使用最多的工具就是 SSH 了，每天都要通过它登录服务端系统，进行一系列的操作。&lt;/p>
&lt;p>这里&lt;a class="link" href="https://plantegg.github.io/2019/06/02/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8_SSH_%E6%9A%97%E9%BB%91%E6%8A%80%E5%B7%A7%E8%AF%A6%E8%A7%A3--%E6%94%B6%E8%97%8F%E4%BF%9D%E5%B9%B3%E5%AE%89/" target="_blank" rel="noopener"
>有一篇文章&lt;/a>比较全面地介绍了 SSH 的进阶使用技巧，可以在某种程度上极大提升效率以及操作体验。&lt;/p>
&lt;p>列举部分如下：&lt;/p>
&lt;ol>
&lt;li>如何免密码登录；&lt;/li>
&lt;li>如何映射服务端的服务端口到本地（以方便调试）；&lt;/li>
&lt;li>如何将服务端的图形界面（如xcalc）代理到本地电脑显示和交互（不是远程桌面哦）；&lt;/li>
&lt;li>一些网络端口映射之类的高级操作；&lt;/li>
&lt;/ol>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://gist.github.com/sbabybird/c340dee0fbec2e1dfe4a1c49d311cf4b" target="_blank" rel="noopener"
>个人年终总结模板&lt;/a>，我做了一个基于 Markdown 语法的年终总结模板，方便梳理在编写个人总结时的思路，放在 github 上的 gist 里了，可以随意使用。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-13-57-40.png"
width="416"
height="486"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="205px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.webdesignmuseum.org/" target="_blank" rel="noopener"
>web 网页设计博物馆&lt;/a>，一个保存古老网页设计的网站。记录了 1999 年到 2020 年各大公司的网页设计变迁。包括谷歌、亚马逊、苹果、任天堂、麦当劳等等。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-14-01-04.png"
width="918"
height="568"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://allinone.tools/" target="_blank" rel="noopener"
>一站式网页工具大全&lt;/a>，一堆的在线工具汇总，包括图片处理、PDF格式转换、文字编码转换、密码生成、字符串加密解密等等，常用工具一网打尽。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-14-05-09.png"
width="1320"
height="570"
loading="lazy"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="555px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://gamepad-tester.com/" target="_blank" rel="noopener"
>在线手柄测试工具&lt;/a>，打开网页即可测试游戏手柄的工作状态，按键是否灵敏，遥感是否有死区等等，非常方便。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-016-%E6%9C%9F/2023-01-10-14-11-28.png"
width="930"
height="614"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 015 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/</link><pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-015-期">机器文摘 第 015 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="编程就是玩儿httpsaustinhenleycomblogprogrammingasplayhtml">&lt;a class="link" href="https://austinhenley.com/blog/programmingasplay.html" target="_blank" rel="noopener"
>编程就是玩儿&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-13-43-13.png"
width="804"
height="355"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="543px"
>&lt;/p>
&lt;p>对于程序员或者技术从业者来说，以一种什么样的心态工作将十分影响成果的产出。&lt;/p>
&lt;p>&lt;a class="link" href="https://austinhenley.com/blog/programmingasplay.html" target="_blank" rel="noopener"
>这篇文章&lt;/a>的作者给大家分享了他自己的感受&amp;mdash;-“不把编程视为严肃的工作、目标只是玩得开心、为了好玩而编程”。&lt;/p>
&lt;p>他同时也是 &lt;a class="link" href="https://news.ycombinator.com/item?id=27256867" target="_blank" rel="noopener"
>《为什么我喜欢做无用的东西》&lt;/a>帖子的作者。&lt;/p>
&lt;p>除了文章本身之外，&lt;a class="link" href="https://news.ycombinator.com/item?id=34086416" target="_blank" rel="noopener"
>在 HN 配套的讨论帖子在这里&lt;/a>。&lt;/p>
&lt;p>这种类似于“寓教于乐”、“做自己开心的事儿”等等内容，一直是一个值得探讨的话题。&lt;/p>
&lt;p>我个人也倾向于以兴趣和爱好来驱动自己，只是如果这个兴趣和爱好顺便能够挣钱，那就更好了。&lt;/p>
&lt;h3 id="webassembly没有容器的-dockerhttpswasmlabsdevarticlesdocker-without-containers">&lt;a class="link" href="https://wasmlabs.dev/articles/docker-without-containers/" target="_blank" rel="noopener"
>WebAssembly：没有容器的 Docker&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-13-45-15.png"
width="3483"
height="1436"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;p>最近 &lt;a class="link" href="https://www.docker.com" target="_blank" rel="noopener"
>Docker&lt;/a> 宣布与 &lt;a class="link" href="https://github.com/WasmEdge/Wasmedge" target="_blank" rel="noopener"
>WasmEdge&lt;/a> 合作支持 WebAssembly 。&lt;/p>
&lt;p>WebAssembly 和 Docker 我们都听说过，在前面的文摘中我还尝试过自己使用 Rust 编写运行在网页里的 WebAssembly 应用程序。&lt;/p>
&lt;p>Docker 也是我工作中每天都要用到的容器技术。&lt;/p>
&lt;p>那他们两个有什么关系？放在一起能碰撞出什么火花？&lt;/p>
&lt;p>&lt;a class="link" href="https://wasmlabs.dev/articles/docker-without-containers/" target="_blank" rel="noopener"
>这篇文章&lt;/a>将讲解这两种技术的结合在云原生架构下的使用。&lt;/p>
&lt;p>看来 WebAssembly 技术不仅可以在浏览器环境中发挥作用，还能在云计算、边缘计算等领域发光发热，前途不可限量嘛。&lt;/p>
&lt;h3 id="3d-摄影测量建模技术httpswwwjeffgeerlingcomblog2021modeling-my-grandpa-3d-photogrammetry">&lt;a class="link" href="https://www.jeffgeerling.com/blog/2021/modeling-my-grandpa-3d-photogrammetry" target="_blank" rel="noopener"
>3D 摄影测量建模技术&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-13-58-29.png"
width="712"
height="340"
loading="lazy"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;p>3D 摄影测量建模，是一种通过对物体多角度拍摄照片，然后使用计算机通过软件算法合成为 3D 模型的技术。&lt;/p>
&lt;p>从最开始在专业领域（如：建筑工程、考古）使用，到现在已经普及到普通人只需安装手机 App 也能轻松实现了。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.jeffgeerling.com/blog/2021/modeling-my-grandpa-3d-photogrammetry" target="_blank" rel="noopener"
>用3D摄影测量法对我的爷爷建模&lt;/a>记述了作者如何使用 3D 摄影测量建模技术给自己爷爷的雕像进行“数字化”的过程。&lt;/p>
&lt;p>里面详细记录了整个过程所使用的开源软件和相关的配置细节。&lt;/p>
&lt;p>对于一些想要进行一次实操演练的朋友来说可能有用。&lt;/p>
&lt;h3 id="在-2d-游戏中如何模拟-3d-的光影效果httpswwwgamedevelopercomprogramminggraveyard-keeper-how-the-graphics-effects-are-made">&lt;a class="link" href="https://www.gamedeveloper.com/programming/graveyard-keeper-how-the-graphics-effects-are-made" target="_blank" rel="noopener"
>在 2D 游戏中如何模拟 3D 的光影效果&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-14-14-17.png"
width="454"
height="265"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;p>《守墓人》是一款经典的 2D 角色扮演游戏，比起它的精彩剧情和有趣的玩法，出色的画面效果也是该游戏取得成功的重要原因。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://www.gamedeveloper.com/programming/graveyard-keeper-how-the-graphics-effects-are-made" target="_blank" rel="noopener"
>《守墓人的图形效果是如何制作的》&lt;/a>文章，由该游戏的核心开发者于 2018 年发表，讲述了很多关于实现在 2D 画面带来更加有立体光影效果的特殊技巧。&lt;/p>
&lt;p>文章虽然老了一点，但是技术没有过时。&lt;/p>
&lt;p>读进去可以深深体会到：一个优秀作品的创造，离不开对各种不可能的挑战和极限的突破。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://bluemaxima.org/flashpoint/" target="_blank" rel="noopener"
>Flash 游戏大全&lt;/a>，上一期里我摘录了一个关于复刻 Flash 游戏的故事。后来也勾起了我对于 Flash 小游戏的怀念。便深入探索了一下现在这个阶段该如何再去运行那些老游戏。Flashpoint 是一个 Web 游戏保存工程，号称已经累计保存了包括 Flash 在内的 35 个平台的超过十万个小游戏。这个工程在 2018 年 1 月启动，试图在 Flash 消亡之前将之前的经典内容进行备份。现在提供两种版本的下载包，一种全量下载的大概 1.3 TB，包含了全部游戏。一种增量下载的，700多MB，只带了部分游戏，但是支持随下随玩。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-14-33-07.png"
width="1001"
height="382"
loading="lazy"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="628px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://sweetcocoa.github.io/pop2piano_samples/" target="_blank" rel="noopener"
>根据音频自动生成钢琴旋律&lt;/a>，一个开源的 AI 模型，可以根据歌曲的音频识别出里面的旋律主线，并且使用钢琴演奏出来，效果十分神奇。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-14-41-36.png"
width="741"
height="456"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://virtualconsoles.com/online-emulators/c64/" target="_blank" rel="noopener"
>C64 Emulator&lt;/a>，一个在线的 commodore 64 电脑模拟器，可以直接将磁盘镜像拖拽到网页上进行加载，页面还提供了虚拟键盘。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-14-44-02.png"
width="643"
height="733"
loading="lazy"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://shadiao.pro/" target="_blank" rel="noopener"
>沙雕 App&lt;/a>，收集了各种有趣网站、工具的导航站，之前就关注过，最近好像升级了，喜欢恶搞的同学可以到里面找到一些比较有恶趣味的小程序。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-015-%E6%9C%9F/2023-01-03-14-47-42.png"
width="676"
height="371"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 014 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-014-期">机器文摘 第 014 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="运行在单片机上的-qthttpsdecovardevblog20221224qt-on-mcu">&lt;a class="link" href="https://decovar.dev/blog/2022/12/24/qt-on-mcu/" target="_blank" rel="noopener"
>运行在单片机上的 Qt&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-13-43-13.png"
width="684"
height="456"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>尝试过给单片机写图形界面没有？&lt;/p>
&lt;p>这篇 &lt;a class="link" href="https://decovar.dev/blog/2022/12/24/qt-on-mcu/" target="_blank" rel="noopener"
>《Qt on MCU》 &lt;/a>比较系统的介绍了“为什么选择 Qt（一套开源图形界面库） 给单片机做界面”、“Qt 的基本架构”、“程序移植性”等相关问题。&lt;/p>
&lt;p>读完可以较为全面地了解在单片机这种机能较弱的硬件设备上制作图形界面的基本思路和需要关注的问题。&lt;/p>
&lt;h3 id="openwrtlede-搭建-syncthing-p2p-私有文件同步服务httpschenhemepostopenwrt-syncthing">&lt;a class="link" href="https://chenhe.me/post/openwrt-syncthing/" target="_blank" rel="noopener"
>OpenWrt/LEDE 搭建 Syncthing p2p 私有文件同步服务&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-13-56-50.png"
width="1251"
height="730"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;p>现在大家都不止一个电子终端设备，个人数字信息、各种数据文件的同步需求基本上是一个刚需。&lt;/p>
&lt;p>有很多厂商提供了收费方案，比较常见的有国内的各种网盘、手机厂商提供的各种 Cloud 服务等等。&lt;/p>
&lt;p>如果想基于家庭网络自己动手搭建一个私有服务的话，可能略微麻烦一些，不过也有较为成熟的方案了。&lt;/p>
&lt;p>条件具备的话不妨参考这篇&lt;a class="link" href="https://chenhe.me/post/openwrt-syncthing/" target="_blank" rel="noopener"
>《OpenWrt/LEDE 搭建 Syncthing p2p 私有文件同步服务》&lt;/a>动手试一试。&lt;/p>
&lt;h3 id="用-flash-高清重制一款游戏httpswwwjiqizhixincomarticles2022-12-22-2">&lt;a class="link" href="https://www.jiqizhixin.com/articles/2022-12-22-2" target="_blank" rel="noopener"
>用 Flash 高清重制一款游戏&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-13-58-23.png"
width="600"
height="338"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>Flash 基本已经成为历史了。&lt;/p>
&lt;p>即便现在可以通过一些渠道或者浏览器勉强开启 Flash 插件的话，也会提心掉胆地担心计算机的安全性。&lt;/p>
&lt;p>毕竟那些恼人的弹窗广告有 80% 都是靠 Flash 技术实现的。&lt;/p>
&lt;p>但是还有这么一群人，他们玩着 4399 上的小游戏长大，80 后喜欢的各种主机游戏在他们眼里根本不值一提，倒是网页上那种基于 Flash 制作的即开即玩的小游戏（比如我能想到的就有：黄金矿工、狂扁小朋友、打企鹅等等）才是他们的最爱。&lt;/p>
&lt;p>Flash 技术被时代抛弃，那些 4399 们也就逐渐消失了。&lt;/p>
&lt;p>不过总有人会拥抱情怀，这篇&lt;a class="link" href="https://www.jiqizhixin.com/articles/2022-12-22-2" target="_blank" rel="noopener"
>《为拯救童年回忆，开发者决定采用古法编程》&lt;/a>便讲述了这样一个故事。&lt;/p>
&lt;p>里面的哥们儿以极其硬核的方式实现了他的梦想，为了复刻一个 Flash 小游戏，他几乎重新写了一个 Flash 播放器。&lt;/p>
&lt;h3 id="unix-终端系统tty是如何工作的httpswaynervcompostshow-tty-system-works">&lt;a class="link" href="https://waynerv.com/posts/how-tty-system-works/" target="_blank" rel="noopener"
>Unix 终端系统（TTY）是如何工作的&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-14-09-23.png"
width="2560"
height="2272"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/p>
&lt;p>没有使用过大型机而直接进入 PC 时代的计算机用户，可能觉得“终端”就是电脑上那个能够输入 CMD 命令的黑乎乎窗口吧。&lt;/p>
&lt;p>即便是终日与命令行打交道的软件开发人员、系统运维人员，可能也很难一下子解释清楚什么是“终端”，它为什么叫这个名字。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://waynerv.com/posts/how-tty-system-works/" target="_blank" rel="noopener"
>《Unix 终端系统（TTY）是如何工作的》&lt;/a>从计算机硬件发展的历史出发，介绍了计算机系统跟用户交互的发展历程，并针对“终端”系统进行详细展开，讲解了实现原理和后来发展的现代形态。&lt;/p>
&lt;p>喜欢硬核知识的朋友可点进去阅读一下。&lt;/p>
&lt;h3 id="hn-讨论极大提升你效率的软件有哪些httpsnewsycombinatorcomitemid34069106">&lt;a class="link" href="https://news.ycombinator.com/item?id=34069106" target="_blank" rel="noopener"
>HN 讨论：极大提升你效率的软件有哪些？&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-14-16-52.png"
width="776"
height="403"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;p>哪些软件最能节约你的时间、解放你的双手、使你离不开它？&lt;/p>
&lt;p>这个话题几乎每过一段时间就会被拿出来讨论一番。&lt;/p>
&lt;p>每个人都有自己的偏爱。&lt;/p>
&lt;p>不过，看看大家的讨论，说不定也能发现一些新鲜的软件，也许能更新一下自己的工具库也说不定。&lt;/p>
&lt;blockquote>
&lt;p>比如上面这篇帖子里，楼主提到的 &lt;a class="link" href="https://github.com/BurntSushi/xsv" target="_blank" rel="noopener"
>这个 csv 工具&lt;/a> ，可以在命令行让你高效对 csv 文件进行快速检索、合并查询、切片等等。
不过帖子里可能有人把节奏带偏了，在下面大吹特吹各种 IDE 软件，就仁者见仁了。&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://huili.github.io/" target="_blank" rel="noopener"
>SQlite源码分析&lt;/a>，一本讲解 SQlite 源码的在线电子书，主要对 SQLite 数据库的实现机制和使用方法做了简要分析。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-14-25-49.png"
width="804"
height="424"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://retrogame.com.ua/2022/03/moarstalgia-windows-98-3dfx-amp-dos-retro-gaming-pack/" target="_blank" rel="noopener"
>经典复古 win98 游戏合集&lt;/a>，一个游戏整合包，里面整合了若干在 Win98 系统下才能跑的老游戏，像初代的雷神之锤、半条命、极品飞车等等。提供了基于 DosBox 的虚拟系统，即开即用，性能还不错。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-14-33-08.png"
width="656"
height="387"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://www.doshaven.eu/programming-tools/" target="_blank" rel="noopener"
>DOS 系统下的编程工具合集&lt;/a>，想要重温在 DOS 环境下编程的感受，这里有一套比较全面的工具合集，包括 QBASIC、TurboC 等开发环境，以及一些用于游戏开发的图形库、引擎。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-14-59-31.png"
width="908"
height="527"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://humanbenchmark.com/dashboard" target="_blank" rel="noopener"
>给你自己跑个分&lt;/a>，现在一些硬件评测动不动就使用软件进行跑分，用以展示硬件之间的形成差异，这个网站提供了一组小游戏，可以考验你的短期记忆力、反应能力，并给你打分。也试试给自己跑个分吧。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-014-%E6%9C%9F/2022-12-27-15-05-15.png"
width="900"
height="511"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="422px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 012 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/</link><pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-012-期">机器文摘 第 012 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="github-登录被第三方网站滥用了吗">Github 登录被第三方网站滥用了吗？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-13-30-19.png"
width="494"
height="491"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>
为了方便账号注册，现在很多网站都提供了基于 Github 账号登录的方式。&lt;/p>
&lt;p>我个人也更倾向于使用这种方式登录。&lt;/p>
&lt;p>毕竟可以少填一些注册信息，减少思考密码的麻烦。&lt;/p>
&lt;p>但是这样做有什么安全问题没有？&lt;/p>
&lt;p>上周有一个&lt;a class="link" href="https://news.ycombinator.com/item?id=33917962" target="_blank" rel="noopener"
>在 HackerNews 上的帖子&lt;/a>，有人遇到了在使用 Github 账号登录某些网站之后，导致他的账号莫名给别的仓库添 Star 的情况。&lt;/p>
&lt;p>这引发了大家关于 Github 账号权限管理以及通过第三方鉴权进行账号登录和注册的讨论。&lt;/p>
&lt;p>看完觉得在第三方鉴权授权时还是应该慎重使用才好。&lt;/p>
&lt;h3 id="每个黑客都知道的命令行快捷键">每个黑客都知道的命令行快捷键
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-13-41-23.png"
width="926"
height="636"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>
在图形化界面、触控操作交互界面已经十分普及的今天，普通用户可能现在很少能接触到命令行操作了。&lt;/p>
&lt;p>但是对于软件开发者、IT运维工程师来说，命令行还是属于离不开的操作界面。&lt;/p>
&lt;p>而且对于有些工作任务来说，使用命令行完成起来要更加高效。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.masteringemacs.org/article/keyboard-shortcuts-every-command-line-hacker-should-know-about-gnu-readline" target="_blank" rel="noopener"
>这篇文章&lt;/a>讲解了常见命令行交互时的一些快捷操作，比如常见的行内编辑、快速移动光标到命令开头、历史记录搜索等等。&lt;/p>
&lt;p>掌握之后可以在各种命令行交互界面中进行使用（基本风格一致）。&lt;/p>
&lt;h3 id="基于颜色循环的动画技术">基于颜色循环的动画技术
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-13-54-06.png"
width="509"
height="383"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>
在计算机硬件资源匮乏的上世纪 90 年代，开发人员为了在有限条件下实现丰富的效果真是挖空心思。&lt;/p>
&lt;p>比如，还记得 Windows 98 的启动画面吗？&lt;/p>
&lt;p>蓝天白云，Windows 徽标，底部有一个蓝色的渐变色条，在缓慢的滚动。&lt;/p>
&lt;p>实际上它只是一幅图片，并非多帧动画。&lt;/p>
&lt;p>这就用到了一个叫做&lt;a class="link" href="https://en.wikipedia.org/wiki/Color_cycling" target="_blank" rel="noopener"
>“颜色循环”&lt;/a>的技术。&lt;/p>
&lt;blockquote>
&lt;p>来自维基百科：颜色循环，也称为调色板移动，是计算机图形学中使用的一种技术，其中颜色被更改以产生动画的假象。这种技术主要用于早期的电脑游戏，因为存储一个图像并更改其调色板比将动画存储为几帧需要更少的内存和处理器能力。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="http://www.effectgames.com/effect/article-Old_School_Color_Cycling_with_HTML5.html" target="_blank" rel="noopener"
>这里有个博客&lt;/a>使用 HTML Canvas 复刻了一批采用颜色循环创作的作品，效果非常惊艳。&lt;/p>
&lt;p>另外网站还开源了用于展示这些作品的图形引擎，虽然现在已经不再维护了，但是用于学习和探索还是很有研究意义。&lt;/p>
&lt;h3 id="软件逆向工程入门">软件逆向工程入门
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-14-06-08.png"
width="716"
height="442"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>
软件的加密和破解在普通用户眼里十分神秘。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://to-be-deleted-in-2022.emily.st/2015/01/27/reverse-engineering/" target="_blank" rel="noopener"
>软件逆向工程入门&lt;/a>比较深入浅出地介绍了一些常用手法，跟着作者可以浅尝一下在内存中寻找注册号、修改汇编指令以使得软件保护失效等体验。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="http://nifty.stanford.edu/" target="_blank" rel="noopener"
>计算机课后作业&lt;/a>，斯坦福大学计算机专业评选的历年来优秀作业作品。如果不知道自己编程需要练习什么的话，可以打开参考参考，很有实用价值，比起在 Leecode 上刷算法的题目，这些作业都在解决实际问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://scholar.archive.org/" target="_blank" rel="noopener"
>互联网档案学术&lt;/a>，全文检索索引包含超过2500万的研究文章和其他保存在互联网档案馆里的学术文档。 该馆藏涵盖从18世纪期刊的数字化副本，到最新的Open Access会议记录和从万维网上抓取的预印本。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-14-19-26.png"
width="1113"
height="507"
loading="lazy"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="526px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://playcanvas.com/" target="_blank" rel="noopener"
>PlayCanvas Web 优先的游戏引擎&lt;/a>，一个免费的游戏引擎，倡导以 Web 优先，在网页中提供从开发到发行的全部流程支持。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-14-23-40.png"
width="961"
height="655"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="352px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://asciinema.org/" target="_blank" rel="noopener"
>命令行会话记录器&lt;/a>，Asciinema 是一个免费开源软件，用于帮助用户录制在命令行中的操作行为，便于在互联网上分发自己的操作示范、教学演示。比起直接视频录屏的方式，这种以字符方式的记录更加节约资源，无论是记录、传播还是回放环节，都很轻量。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-14-29-43.png"
width="631"
height="383"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://matthias-research.github.io/pages/tenMinutePhysics/index.html" target="_blank" rel="noopener"
>十分钟物理&lt;/a>，这套教程集合了一组十分钟左右的视频短片，每次介绍一个基本的物理概念并通过 Web 前端技术编程实现模拟。除了视频之外，网站还提供了源代码、演示环境等配套资源。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-14-32-47.png"
width="1191"
height="666"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="429px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://skilldrick.github.io/easy6502/" target="_blank" rel="noopener"
>Easy6502&lt;/a>，一本学习 6502 汇编的电子书（没错，我就是特别喜欢这款 CPU）。网站带有交互界面，提供了一个简易模拟器，可以边学边练，教程最后会带你实现一个基于汇编的贪食蛇游戏。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-012-%E6%9C%9F/2022-12-13-14-43-13.png"
width="608"
height="484"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 013 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-013-期">机器文摘 第 013 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="从古董电脑中我们能学到什么httpsgithubcomreadmefeaturedvintage-computing">&lt;a class="link" href="https://github.com/readme/featured/vintage-computing" target="_blank" rel="noopener"
>从古董电脑中我们能学到什么&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-09-36-43.png"
width="1182"
height="689"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;p>我也不知道为什么自己会对老旧电脑，尤其是上世纪80年代、90年代出品的电脑这么迷恋。&lt;/p>
&lt;p>我觉得那个时代的电脑散发着一种难以名状的工业气质。&lt;/p>
&lt;p>通过阅读&lt;a class="link" href="https://github.com/readme/featured/vintage-computing" target="_blank" rel="noopener"
>这篇文章&lt;/a>，使我意识到一些深层次的原因。&lt;/p>
&lt;p>这些老式电脑的魅力来自于当时技术的限制、简单粗暴和直接。&lt;/p>
&lt;p>通过深入了解这些老古董、学习开发那个时代的软件，可以更容易地了解计算机科学。&lt;/p>
&lt;p>毕竟，现在的计算机已经充分的复杂和“人性化”，软件把硬件包裹得越来越严实和抽象。以至于根本看不清它的内部构造和实现原理。&lt;/p>
&lt;p>去研究那些古董电脑吧，操作那些裸漏单纯的硬件接口，贴近更加具体的科技。&lt;/p>
&lt;h3 id="蛋httpwwwgalactanetcomoneofftheegg_zhhtml">&lt;a class="link" href="http://www.galactanet.com/oneoff/theegg_zh.html" target="_blank" rel="noopener"
>蛋&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-09-49-07.png"
width="1024"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>这是一篇很富有哲理的小小说，严格来说跟机器没有关系。&lt;/p>
&lt;p>但是写的实在是很好，忍不住收录进来。&lt;/p>
&lt;p>毕竟，喜欢机器的人，很难抗拒这种对宇宙天马行空的探索。&lt;/p>
&lt;h3 id="rlhf-模型详解httpshuggingfacecoblogrlhf">&lt;a class="link" href="https://huggingface.co/blog/rlhf" target="_blank" rel="noopener"
>RLHF 模型详解&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-09-54-30.png"
width="1450"
height="1338"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="260px"
>&lt;/p>
&lt;p>近期 AI 圈最火的事情，莫过于 OpenAI 发布的聊天机器人 ChatGPT 了。&lt;/p>
&lt;p>这个智能聊天机器人已经强大到可以让人担忧的地步了。&lt;/p>
&lt;p>那么，它背后的实现原理是什么？&lt;/p>
&lt;p>&lt;a class="link" href="https://huggingface.co/blog/rlhf" target="_blank" rel="noopener"
>这篇文章&lt;/a>讲解了 ChatGPT 所使用的 RLHF（人类反馈强化学习） 模型是如何实现的以及它的未来会怎样发展。&lt;/p>
&lt;h3 id="基于扩散模型生成音乐httpswwwriffusioncomabout">&lt;a class="link" href="https://www.riffusion.com/about" target="_blank" rel="noopener"
>基于扩散模型生成音乐&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-10-03-35.png"
width="540"
height="378"
loading="lazy"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>基于文本生成图像的扩散模型已经火了一段时间了。&lt;/p>
&lt;p>我当时还在想，既然基于扩散模型可以生成图像的话，那能不能生成声音呢？&lt;/p>
&lt;p>结果我只是动了动念头，人家这边已经把成果拿出来了。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.riffusion.com/about" target="_blank" rel="noopener"
>这篇文章&lt;/a>介绍了他们基于扩散模型生成音乐的项目。&lt;/p>
&lt;p>我试听了一下，效果还不错，挺神奇的。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://ittavern.com/getting-started-with-tmux/" target="_blank" rel="noopener"
>tmux 入门&lt;/a>，一篇 tmux 的入门教程。tmux 是一个终端程序，可以同时模拟多个客户端控制台，如果觉得不好理解的话，可以认为它是一个控制台的多页签浏览器。因为在工作中经常需要 ssh 登录服务器进行编程开发，我现在已经离不开它了。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-10-12-18.png"
width="701"
height="419"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://oimo.io/works/" target="_blank" rel="noopener"
>一个有趣的个人网站&lt;/a>，作者是一个日本在读博士生，网站放了一些个人的编程作品，主要跟物理模拟、像素艺术有关。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-10-14-33.png"
width="915"
height="450"
loading="lazy"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.hello-algo.com/" target="_blank" rel="noopener"
>你好，算法&lt;/a>，一本开源电子书，可在线阅读，深入浅出讲解数据结构和算法，生动有趣，适合有一定编程基础但是算法这块有些薄弱的爱好者阅读。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-10-20-26.png"
width="3144"
height="2319"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://nbviewer.org/github/gpeyre/numerical-tours/blob/master/python/ml_6_nn.ipynb" target="_blank" rel="noopener"
>神经网络在线教程&lt;/a>，一套神经网络编程教程，提供在线的 python 代码阅读环境，适合作为入门资料学习。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-013-%E6%9C%9F/2022-12-21-10-23-10.png"
width="388"
height="262"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="355px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 011 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/</link><pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-011-期">机器文摘 第 011 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="自己动手做一个天气墨水屏">自己动手做一个天气墨水屏
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-13-22.png"
width="617"
height="455"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>
有个喜欢动手的哥们，发现了自己及家人的一项小需求，即从家出门的时候想快速知道天气情况。&lt;/p>
&lt;p>虽然这种需求抬眼看一下手机也能实现，但是本着“懒惰使人进步”的核心思想(作者懒得掏出手机)他动手实现了一套基于电池供电的可以显示天气预报信息的电子墨水屏。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://kimmo.blog/posts/7-building-eink-weather-display-for-our-home/" target="_blank" rel="noopener"
>《做一个天气墨水屏》&lt;/a>记录了作者从诞生点子到产品出炉的全过程。&lt;/p>
&lt;p>另外作者还开源了项目的源代码，&lt;a class="link" href="https://github.com/kimmobrunfeldt/eink-weather-display" target="_blank" rel="noopener"
>可在这里获取&lt;/a>。&lt;/p>
&lt;h3 id="m1-gpu-的故事">M1 GPU 的故事
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-21-23.png"
width="985"
height="614"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>
GPU 大家都知道，&lt;a class="link" href="https://asahilinux.org/2022/11/tales-of-the-m1-gpu/" target="_blank" rel="noopener"
>这里有篇文章介绍了它的工作细节&lt;/a>。&lt;/p>
&lt;p>作者来自一个给苹果 M1 芯片适配 Linux 驱动的团队（苹果官方不提供驱动，所以这意味着需要做一些逆向工程）。&lt;/p>
&lt;p>本文记录了这些工作中比较有趣的部分，还顺便介绍了 GPU 的一些底层工作原理。&lt;/p>
&lt;h3 id="在-commodore-64-上实现位图滚动条的显示">在 Commodore 64 上实现位图滚动条的显示
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-37-41.png"
width="386"
height="338"
loading="lazy"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="274px"
>
Demosense 是一项挖掘计算机硬件机能极限的活动。&lt;/p>
&lt;p>通常创作者们会通过各种编程技巧来实现看似无法达到的效果。&lt;/p>
&lt;p>由于 Commodore 64 这台古董电脑十分经典，现在仍有不少Demosense爱好者在为它开发程序。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.c64demo.com/side-border-bitmap-scroller/" target="_blank" rel="noopener"
>这篇文章&lt;/a>讲述了著名 C64 demo 程序 &lt;a class="link" href="https://csdb.dk/release/?id=195841" target="_blank" rel="noopener"
>Memento Mori&lt;/a> 的实现过程，程序在 Commodore 64 上显示了一副巨大（对于C64来说）的图片。&lt;/p>
&lt;p>这在圈内属于首创。&lt;/p>
&lt;h3 id="动手做一个-4-位-cpu">动手做一个 4 位 CPU
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-43-28.png"
width="496"
height="370"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>
计算机组成原理是不是还没学明白？没关系，我们可以自己亲手做一个简单的 CPU 。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.bigmessowires.com/nibbler/" target="_blank" rel="noopener"
>Nibbler&lt;/a> 是一款 4 位 CPU，使用标准 7400 系列逻辑芯片（单个计数器、寄存器、缓冲器和门）构建而成。是一个简单 CPU 的教育示例，易于理解和构建，但仍然能够运行游戏和其他有趣的程序。Nibbler 在 5 x 4 英寸（127 x 102 毫米）穿孔板上使用绕线制造。CPU总共包含17个芯片。&lt;/p>
&lt;p>作者公开了设计图纸和相关资料，可在文章内部的链接中获取。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="http://www.craftinginterpreters.com/" target="_blank" rel="noopener"
>纯手撸一个解释器&lt;/a>，编译原理没学明白没关系，这本在线电子书手把手教你写一个自己的解释器。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-51-28.png"
width="593"
height="182"
loading="lazy"
class="gallery-image"
data-flex-grow="325"
data-flex-basis="781px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md" target="_blank" rel="noopener"
>Git 飞行规则 (Flight Rules)&lt;/a> ，一个十分全面的 Git 使用指南，把你能遇到的情况都想到了。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-54-49.png"
width="532"
height="541"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="236px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://thevaluable.dev/vim-advanced/" target="_blank" rel="noopener"
>Vim 高级进阶&lt;/a>，如果你已经学会了怎么退出 Vim，恭喜你，已经击败了 80% 的选手。想要在 Vim 中进行更高效的编辑操作，这份高手指南十分适合作为参考。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-57-10.png"
width="776"
height="511"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="364px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/" target="_blank" rel="noopener"
>Flexbox 布局交互指南&lt;/a>，这篇在线教程讲解了如何使用 Flexbox 进行页面布局，难能可贵的是直接在页面中提供了交互操作界面，可以一遍学一遍实践，非常方便。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-09-59-27.png"
width="743"
height="448"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="398px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.makesense.ai/" target="_blank" rel="noopener"
>在线 AI 标注工具&lt;/a>，想要训练自己的 AI 模型，比如目标检测、图像分类等等，可以使用这个在线工具进行数据标注，直接上传图片然后在线标注，完成后可导出 VOC、Coco 等格式的数据集。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-011-%E6%9C%9F/2022-12-07-10-02-46.png"
width="628"
height="391"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 010 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/</link><pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-010-期">机器文摘 第 010 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="极客摄影指南">极客摄影指南
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-14-11-12.png"
width="1235"
height="841"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="352px"
>
相机，也是机器的一种。&lt;/p>
&lt;p>我用它记录生活，捕捉生活中转瞬即逝的美好瞬间。&lt;/p>
&lt;p>有个问题一直困扰着我，怎样拍出不那么“到此一游”的照片？&lt;/p>
&lt;p>怎样才能“掌控”相机这个机器？&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://lcamtuf.coredump.cx/photo_basics/" target="_blank" rel="noopener"
>《极客摄影》（英文）&lt;/a>能够帮助你对摄影做一个真正深入的理解（而不是学习那些充斥社交平台的各种浮于表面的“技巧”）。&lt;/p>
&lt;p>作者是一个热爱摄影的技术男，有二十多年摄影经验。&lt;/p>
&lt;p>听他给你讲讲什么是“光”和“构图”。&lt;/p>
&lt;p>一篇就够了。&lt;/p>
&lt;h3 id="ms-dos-背后的设计">MS-DOS 背后的设计
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-14-24-37.png"
width="480"
height="512"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="225px"
>&lt;/p>
&lt;p>包括我在内的不少 80 后接触电脑是从 MS-DOS 开始的。&lt;/p>
&lt;p>对于它的黑窗口和命令行都有着很深的印象。&lt;/p>
&lt;p>上大学时执行最多的命令是&lt;code>format c: /s /q&lt;/code>&lt;/p>
&lt;p>当年还玩过不少在 DOS 平台的游戏，比如仙剑奇侠传、主题医院等等。&lt;/p>
&lt;p>只是当时没工夫对系统本身做深入了解。&lt;/p>
&lt;p>顶多是，自己在学习汇编语言时，对 DOS 又仔细端详了几眼。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://patersontech.com/Dos/Byte/InsideDos.htm" target="_blank" rel="noopener"
>《凑近看看 MS-DOS 》（英文）&lt;/a>，介绍了 DOS 系统的设计标准、内存分配、磁盘文件结构、FAT文件系统的技术细节等等。&lt;/p>
&lt;p>想要窥探技术细节的可以点进去看看。&lt;/p>
&lt;h3 id="构建最快的-lua-解释器">构建最快的 Lua 解释器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-14-45-43.png"
width="645"
height="386"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>
给动态语言编写解释器可能不算太难（如果只是能跑的话）。&lt;/p>
&lt;p>但是如果要编写一个高性能的、好用的动态语言解释器，比如像谷歌浏览器所用的 V8 引擎那样，就比较困难了。&lt;/p>
&lt;p>&lt;a class="link" href="https://sillycross.github.io/2022/11/22/2022-11-22/" target="_blank" rel="noopener"
>《构建最快的 Lua 解释器》&lt;/a>这篇文章站在更高维度提供一种方法，即：编写一种可以自动生成编译器（解释器）代码的程序，以使得制作高性能解释器变得更加容易。&lt;/p>
&lt;p>我看了一下，大概就是自动化生成之前需要手工处理的编译器优化代码。作为编译原理学的不怎么明白的我，对此不敢评论。&lt;/p>
&lt;h3 id="为什么-linux-内核没有单元测试">为什么 Linux 内核没有单元测试？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-15-14-46.png"
width="637"
height="411"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>
我对单元测试的态度一般，既不强烈支持，也不反对。&lt;/p>
&lt;p>听说有的开发团队由于对于单元测试十分狂热，已经到了不允许写注释，都用单元测试替代的地步。&lt;/p>
&lt;p>前不久，在 HN 上有网友发起了一个引战的讨论：“&lt;a class="link" href="https://news.ycombinator.com/item?id=33742130" target="_blank" rel="noopener"
>既然单元测试这么好，为什么 Linux 内核源码不用呢？&lt;/a>”&lt;/p>
&lt;p>以下为部分观点：&lt;/p>
&lt;blockquote>
&lt;p>单元测试被严重高估了，TDD有一些好主意，但有一段时间它变成了一种宗教。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>单元测试与TDD宗教不是一回事。它只是意味着将事物划分为小单元并尽可能详尽地测试其功能。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>SQLite不是反例吗？他们有更多的单元测试代码，而不是实际运行的代码。&lt;/p>
&lt;/blockquote>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener"
>Python 100 天从入门到精通&lt;/a>，Python 好学吗？好学又不好学，上手容易，精通难。这里有套开源教程囊括了从入门到实战应用（语言基础、数据处理、Web开发、网络开发、爬虫、深度学习等）的所有课程。这个仓库目前已经在 Github 上获得了 12 万star。可以说是好评如潮，想深入学习 Python 的不容错过。赶紧到我收藏夹里吃灰。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://wokwi.com/" target="_blank" rel="noopener"
>在线单片机模拟器&lt;/a>，想要学习单片机开发，又没有硬件设备吗？这个网站最合适。不需要担心手残不会电烙铁，也不用担心买不到芯片。直接在线进行模拟接线，直接运行编写的代码，结果实时展现。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-15-31-31.png"
width="878"
height="661"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://slowroads.io/" target="_blank" rel="noopener"
>slow roads&lt;/a>，一个在线赛车游戏。基于网页制作。亮点在于作者实现了无限地图。所有地形和道路均使用程序生成。游戏有自动驾驶模式，如果只想观赏路边风景的话，可以开启。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-15-36-44.png"
width="1736"
height="855"
loading="lazy"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="487px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://tic80.com/" target="_blank" rel="noopener"
>TIC-80&lt;/a>，TIC-80 是一台用于制作、播放和分享小型游戏的幻想计算机。有内置的开发工具：代码、sprites、地图、声音编辑器和命令行，这足以创建一个迷你复古游戏。在退出时，你将得到一个盒式文件，它可以在网站上存储和播放。
另外，游戏可以打包成一个播放器，可以在所有流行的平台上运行，并按你的意愿分发。为了制作一个复古风格的游戏，整个创作过程是在一些技术限制下进行的。240x136 像素的显示屏，16 种颜色的调色板，256 个 8x8 的彩色 sprites，4 channel sound 等等。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-010-%E6%9C%9F/2022-11-29-15-42-20.png"
width="490"
height="279"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 009 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/</link><pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-009-期">机器文摘 第 009 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="游戏中的精灵">游戏中的“精灵”
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-21-14-24-20.png"
width="729"
height="409"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>
&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E7%B2%BE%E7%81%B5%E5%9B%BE" target="_blank" rel="noopener"
>精灵（sprite）&lt;/a>这个词来自古法语单词“esprit”，意思是“精神”——源自拉丁语“spiritus”。在民间传说中，精灵是活泼、俏皮和神奇的小生物。然而对于游戏开发者来说，它又是另一个含义了。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://wireframe.raspberrypi.com/articles/the-surprising-history-of-sprites" target="_blank" rel="noopener"
>《精灵的惊人历史》（英文）&lt;/a>，介绍了不同的游戏厂商，在早期硬件机能有限的条件下，如何实现“角色在屏幕上移动”这个现在看似十分简单的事情的。&lt;/p>
&lt;p>对于不了解“精灵”的含义的，稍作如下解释：&lt;/p>
&lt;blockquote>
&lt;p>2D 游戏在处理需要动起来的角色时，出于性能考虑，将一部分图形的绘制与背景画面的绘制分开，对于频繁需要刷新（动起来的）部分，单独处理，使他们感觉像是漂浮在背景画面的“幽灵”似的，故名“精灵”。&lt;/p>
&lt;/blockquote>
&lt;h3 id="任天堂-nes-的一些技术细节">任天堂 NES 的一些技术细节
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-21-14-41-33.png"
width="507"
height="477"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>
NES 是任天堂推出一款极其成功的家用游戏机（NES ： Nintendo Entertainment ，System 是其在北美发售的名称，亚洲叫 FC ：Family Computer），不少80、90后的朋友应该都玩过（或者是国内山寨厂商仿制的*霸王之类）。&lt;/p>
&lt;p>NES 使用极其经典的 6502 CPU。这块 CPU 有多经典呢，苹果的 Apple1代2代 、史上销量第一的个人电脑 Commodore 64 、国内早年比较流行的文曲星等，使用的都是这个 CPU。&lt;/p>
&lt;p>&lt;a class="link" href="https://medium.com/@fogleman/i-made-an-nes-emulator-here-s-what-i-learned-about-the-original-nintendo-2e078c9b28fe" target="_blank" rel="noopener"
>《我做了一个 NES 模拟器》（英文）&lt;/a>，这篇文章的作者在编写模拟器的过程中挖出了不少技术细节，里面还提到了硬件存在的各种 BUG （没错，要模拟的话必须连 BUG 都得模拟，不然有些游戏玩不了），想要了解的朋友可以点进去看一下。&lt;/p>
&lt;p>作为模拟器爱好者，我对 6502 处理器非常好奇，一度希望自己动手也实现一个，而且这款处理器真的非常适合模拟器入门，毕竟只有三个寄存器和百十条指令。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/fogleman/nes" target="_blank" rel="noopener"
>文中提到的 NES 模拟器在 Github 上开放了源码&lt;/a>，有兴趣的可以学习。&lt;/p>
&lt;h3 id="一个桌面开发程序员为了学习-javascript-而手撸了一个基于-webgl-的游戏引擎">一个桌面开发程序员为了学习 Javascript 而手撸了一个基于 WebGL 的游戏引擎
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-21-15-11-11.png"
width="780"
height="448"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="417px"
>
学习一样技能最好的方式就是动手去做。&lt;/p>
&lt;p>当我感叹牛人怎么那么厉害的时候，往往忽略了牛人的学习过程。&lt;/p>
&lt;p>以为他们天生就那样。&lt;/p>
&lt;p>事实上他们的技能也是靠努力训练得来的。&lt;/p>
&lt;p>不过，学习方法确实很重要。&lt;/p>
&lt;p>&lt;a class="link" href="http://zephyrosanemos.com/" target="_blank" rel="noopener"
>《我对 Javascript 的尝试》（英文）&lt;/a>，这篇文章的作者原本是一个桌面程序开发者（类似 CAD 软件之类）。&lt;/p>
&lt;p>他突然想要学习前端开发，掌握 Javascript 语言。&lt;/p>
&lt;p>于是结合自己之前的知识，使用前端技术做了一套很优秀的 Demo 程序，一个性能和外观都很不错的游戏引擎。&lt;/p>
&lt;p>文章里作者详细介绍了实现过程中对技术、算法的选择等等。&lt;/p>
&lt;p>内容很长，但还算友好，比较干货。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://roadmap.sh/" target="_blank" rel="noopener"
>开发者之路&lt;/a>，汇总了各个技术路线的学习资料，包括前端、后端、运维、计算机科学、区块链、移动端、质量管理等等。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-21-15-24-33.png"
width="753"
height="455"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>
总之极其全面。
目前在 Github 有两百多万个 star，被 fork 了 三十多万次。&lt;/li>
&lt;li>&lt;a class="link" href="https://crxdl.com/" target="_blank" rel="noopener"
>chrome 插件下载&lt;/a>，访问谷歌浏览器插件商店有困难吗？试试这个网站，可以直接下载插件的包文件，下载后拖入浏览器即可安装。不过我已经转换到微软的 Edge 阵营了，用不到这个了。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.toptal.com/developers/css3maker" target="_blank" rel="noopener"
>CSS3 生成器&lt;/a>，对于 CSS 的属性参数总是记不住，这个网站就很适合我。每次要调背景渐变、圆角、阴影、动画曲线等等，都得现去搜。有了这个网站，在线点点拖拖，直接复制代码即可。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-21-15-33-35.png"
width="1288"
height="660"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://tesseract.projectnaptha.com/" target="_blank" rel="noopener"
>tesseract.js&lt;/a>，可直接在浏览器里运行的 OCR 引擎，支持多国语言（超过 100 种）文字识别。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-21-16-16-10.png"
width="1039"
height="439"
loading="lazy"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="568px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.aichpoem.net/#/shisanbai/poem" target="_blank" rel="noopener"
>AI 在线写诗&lt;/a>，比较全面的 AI 写诗工具，可以写律诗、绝句、现代诗、歌词等等，根据输入的主题任意发挥。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-23-10-36-44.png"
width="846"
height="502"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.upscale.media/zh" target="_blank" rel="noopener"
>图片分辨率在线提升&lt;/a>，上传图片，网站使用 AI 算法将图片的清晰度自动提升，效果还不错。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-009-%E6%9C%9F/2022-11-23-10-41-36.png"
width="1087"
height="693"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 008 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-008-期">机器文摘 第 008 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="用好-github给自己建立一个全方位的私有云平台">用好 GitHub，给自己建立一个全方位的私有云平台
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/2022-11-16-09-24-41.png"
width="754"
height="393"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="460px"
>
很多人都有进行个人的知识管理和数字资源管理的需求，市面上也有很多软件工具或者平台来满足这样的需求，但是大部分都是收费的，且自由度不高。我个人经常使用 Github 作为知识管理仓库，我的网络日志、技术博客、私人小项目、电子书籍等都放在上面，生活中已经离不开这个网站了。&lt;/p>
&lt;p>近期读到这样一篇文章&amp;ndash;&lt;a class="link" href="https://www.bmpi.dev/self/use-github-better/" target="_blank" rel="noopener"
>善用 Github&lt;/a>，全方位讲解了 Github 如何使用，如何将其提供的服务发挥最大化的作用，看完受益匪浅。&lt;/p>
&lt;blockquote>
&lt;p>GitHub 是微软旗下的一个在线软件源代码托管服务平台，也是一个拥有八千多万开发者用户的社区。很多开发者应该对GitHub有一定的了解，但非技术人员大多可能并不会去使用它。本文更多是想给非技术人员来介绍这个平台，看完这篇文章，希望能让更多人在上面来学习、创作与展示自己的作品。&lt;/p>
&lt;/blockquote>
&lt;h3 id="webgpu-是什么跟-webgl-有什么关系">WebGPU 是什么？跟 WebGL 有什么关系？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/2022-11-16-09-36-12.png"
width="846"
height="433"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>
前几天我想在网页上制作一个小游戏，用于尝试一下图形编程相关的技术。用到了一些基于 Web 技术的 3d 图形框架，比如 Three.js、Babylon.js 等等。在尝试的过程中遇到了一个新的名词 WebGPU，之前总是在听说 WebGL 相关的技术，结果说了这么多年，WebGL还没普及，怎么又冒出来一个 WebGPU？于是找了一篇文章，浅扒一下各个图形接口的历史。就是这篇&lt;a class="link" href="https://www.51cto.com/article/698100.html" target="_blank" rel="noopener"
>浅入浅出 WebGPU&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>2016年6月，Google 产生了使用新API来代替WebGL的想法，称之为 WebGL Next。
2017年1月，Khronos Group 举办了WebGL Next研讨会，Chromium一马当先，展示了可以基于OpenGL和Metal独立运行的新图形系统原型，同时Apple和Mozilla也分别展示了自己的原型，三者都非常类似于Metal Api。
次月，Apple就向W3C提交了一个名为 WebGPU 的技术概念验证方案，基于Metal图形开放接口，最终W3C采纳了 WebGPU 这个名字作为下一代标准，Apple的提案进入了正式的小组提案中。
3月，Mozilla向Khronos Group提交了基于Vulkan的名为WebGL Next提案。
2018年6月，Chrome团队宣布着手实现WebGPU，这意味着Khronos的失败，WebGPU胜出，大家以后还是团结在W3C的周围。
按照预期，工作组希望在2021年底发布WebGPU 1.0 标准，不过目前只有草案。
WebGPU 1.0 草案：https://www.w3.org/standards/types#WD&lt;/p>
&lt;/blockquote>
&lt;h3 id="扔掉-photoshop-改用字符串绘图">扔掉 Photoshop 改用字符串绘图
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/2022-11-16-09-58-00.png"
width="761"
height="741"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>
相信很多人都接触过使用字符绘制的图片，这在程序员圈子里甚至发展为一门专有的艺术 “&lt;a class="link" href="https://zh.wikipedia.org/wiki/ASCII%E8%89%BA%E6%9C%AF" target="_blank" rel="noopener"
>ASCII 艺术&lt;/a>”。不过我现在不是要说这些，我在一篇 2015 年发表的文章里，发现了这个：有个猛男在自己的程序里彻底抛弃使用 Photoshop 制作的图片资源，改用字符串来描述各种图形（程序界面的图标），然后自己再用代码将其渲染成为高清的图像。&lt;/p>
&lt;p>作者对此很沾沾自喜，他甚至设计了一套自用的语法规范，用特定字母代表特定的符号关系，这样就可以组合出各种复杂的图案了。&lt;/p>
&lt;p>我也在文章的评论区见到了跟我有同样疑惑的读者留言：“这不就是重新发明了 &lt;a class="link" href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%B8%AE%E6%94%BE%E5%90%91%E9%87%8F%E5%9C%96%E5%BD%A2" target="_blank" rel="noopener"
>SVG&lt;/a> 吗？唯一的区别就是没有用 XML 作为载体”。&lt;/p>
&lt;p>不过文章记录的整个开发过程还是很有趣的，希望了解朋友可以点进去看看 &lt;a class="link" href="http://cocoamine.net/blog/2015/03/20/replacing-photoshop-with-nsstring/" target="_blank" rel="noopener"
>Replacing Photoshop With NSString&lt;/a>&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://ffmpeg.xianwaizhiyin.net/" target="_blank" rel="noopener"
>FFmpeg原理&lt;/a>，FFmpeg 这个开源项目可能圈外的人士了解不多，但实际上我们生活中一刻也离不开它。现在的网络直播、网络视频网站和移动App、各种视频剪辑合成软件，都或多或少的使用了 FFmpeg 提供的编解码技术。这本在线书籍对于想进一步了解 FFmpeg 以及视频编解码技术的朋友是个不错的参考资料。&lt;/p>
&lt;blockquote>
&lt;p>本书《FFmpeg原理》主要讲解 FFmpeg 原理性的知识，前面几章主要讲解一些音视频开发的基础知识，例如原始数据 YUV 跟 RGB，封装格式 FLV 跟 MP4 ，压缩编码的基本概念，还有封装格式分析。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://rustdesk.com/zh/" target="_blank" rel="noopener"
>开源虚拟与远程桌面基础架构&lt;/a>，远程桌面软件，开箱即用，无需任何配置。(我个人目前还是使用windows的远程桌面多一些，不过这个开源的rustdesk看起来不错)&lt;/p>
&lt;blockquote>
&lt;p>您完全掌控数据，不用担心安全问题。您可以使用我们的注册/中继服务器，或者自建，亦或者开发您的版本
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/2022-11-16-10-26-09.png"
width="1388"
height="701"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://learnxinyminutes.com/" target="_blank" rel="noopener"
>Learn X in Y minutes&lt;/a>，这里的教程几乎涵盖所有编程语言，完全没有废话。英文版、中文版都有。如果有编程语言基础的话，通过这个网站确实可以在几十分钟内掌握一门新的编程语言的核心知识。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://flash.zczc.cz/" target="_blank" rel="noopener"
>Flash 保存计划&lt;/a>，Flash 虽然消失了，但是它曾经创造的辉煌一直在我们的记忆里，现在偶尔还想起一些经典的小游戏。这个网站里收藏了很多经典的Flash小游戏，通过一些黑科技复活了它们，可以在浏览器里运行体验。反正我一打开了黄金矿工，就半天停不下来。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/2022-11-16-10-34-57.png"
width="1142"
height="554"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="494px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://keg.cs.tsinghua.edu.cn/codegeex/index_zh.html" target="_blank" rel="noopener"
>CodeGeeX: 多语言代码生成模型&lt;/a>，又一个能帮你写代码的 AI 模型。提供有官方的 VSCode 插件。我试了一下，效果跟 Github 的 copilot 还有一定的差距。&lt;/p>
&lt;blockquote>
&lt;p>CodeGeeX是一个具有130亿参数的多编程语言代码生成预训练模型。CodeGeeX采用华为MindSpore框架实现，在鹏城实验室“鹏城云脑II”中的192个节点（共1536个国产昇腾910 AI处理器）上训练而成。截至2022年6月22日，CodeGeeX历时两个月在20多种编程语言的代码语料库（&amp;gt;8500亿Token）上预训练得到&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://iximiuz.com/en/series/computer-networking-fundamentals/" target="_blank" rel="noopener"
>计算机网络基础学习（英文）&lt;/a>，一个在线讲解网络基础知识的教程，优点是内容简洁，不用特别多的专用名词唬人，另外还提供了在线实验的环境。&lt;/p>
&lt;blockquote>
&lt;p>关于计算机网络的书籍往往令人生畏 - 数千页，无聊的图表&amp;hellip;&amp;hellip;这个教程以几千字的字数引导您了解网络基础知识！它还提供动手实验室来实践所获得的知识。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-008-%E6%9C%9F/2022-11-16-10-51-40.png"
width="764"
height="476"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 007 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-007-期">机器文摘 第 007 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="如何在-html5-canvas-制作可精确控制时间的动画">如何在 HTML5 Canvas 制作可精确控制时间的动画
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-09-30-08.png"
width="576"
height="337"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="410px"
>&lt;/p>
&lt;p>使用 Canvas 对象在网页中制作动画非常简单，有不少人喜欢直接使用定时器 &lt;code>setinterval&lt;/code> 以一定的时间周期循环执行绘图代码来实现动画效果。但是这种做法有一个弊端，由于显示刷新率以及计算机硬件性能的不同，会导致在不同机器上的表现差异。比如你希望你的动画角色在 1 秒内移动 50 个像素，但是实际执行起来却很难控制。&lt;a class="link" href="https://www.viget.com/articles/time-based-animation/" target="_blank" rel="noopener"
>基于时间的动画&lt;/a>这篇文章讲解了如何使用浏览器的 &lt;code>requestAnimationFrame&lt;/code> API 来实现精准控制动画时间的效果，里面给出了一个很简单的样例，但是基本上给出了一个完整的“更新、渲染、通过时间变化计算运动距离”的游戏控制架构。&lt;/p>
&lt;h3 id="如何使用纯-web-技术开发一个相机-app">如何使用纯 Web 技术开发一个相机 App
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-09-47-44.png"
width="680"
height="475"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="343px"
>&lt;/p>
&lt;p>如果不习惯复杂的移动 app 开发环境，直接使用 Web 技术开发一些小的 App 也是十分方便的。我近期希望通过网页实现一个拍照的应用，并且希望不使用手机的原生相机功能，而是自己控制一些相机参数、后期效果、增加特定的取景框等等。于是我找到了一篇教学指南：&lt;a class="link" href="https://blog.prototypr.io/make-a-camera-web-app-tutorial-part-1-ec284af8dddf" target="_blank" rel="noopener"
>Make a Camera Web App&lt;/a>，只需几十行代码就实现了一个相机 App 。感兴趣的朋友可以点进去看看。&lt;/p>
&lt;h3 id="数据库是如何工作的从零开始写一个数据库">数据库是如何工作的，从零开始写一个数据库
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-10-01-15.png"
width="390"
height="394"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="237px"
>&lt;/p>
&lt;p>如果和我一样好奇数据库是如何实现的，可以看看&lt;a class="link" href="https://cstack.github.io/db_tutorial/" target="_blank" rel="noopener"
>这篇文章&lt;/a>。带你用 C 语言从头撸一个数据库出来。&lt;/p>
&lt;h3 id="使用-rust-写一个操作系统">使用 Rust 写一个操作系统
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-10-05-43.png"
width="702"
height="518"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>Rust 逐渐火起来了，这篇 &lt;a class="link" href="https://os.phil-opp.com/zh-CN/" target="_blank" rel="noopener"
>2018 年的文章&lt;/a>整理了一份教程，作者尝试使用 Rust 写一个操作系统，我之所以收录它是因为作者还在 Github 开源了代码，并且这系列教程甚至提供了多国语言的版本。制作精良。应该是实践操作系统知识的好教材。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://100dayscss.com/" target="_blank" rel="noopener"
>100 天精通 CSS &lt;/a>，这个网站给了你 100 个关于 CSS 技术的挑战题目，也许练完之后可以达到深入应用 CSS 的效果，我尝试了几个挑战，有些题目的设置有些偏炫技范畴了，想在工作中使用估计会被打死。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-10-24-10.png"
width="392"
height="391"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://cht.sh/" target="_blank" rel="noopener"
>Linux 命令在线帮助工具&lt;/a>，对于我这种经常记不住命令用法的人来说真的是一种福音。比如我就经常记不清 &lt;code>tar&lt;/code> 命令的用法，面对压缩包解压或者文件打包的工作每次都是去网上搜索一番。有了这个在线工具，直接在命令行中使用 &lt;code>curl&lt;/code>请求他的网址就可给出命令的样例用法详解，非常方便。比如执行&lt;code>curl cht.sh/tar&lt;/code> 就会给出 tar 的使用样例了，我直接复制粘贴之。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-10-28-42.png"
width="586"
height="462"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="304px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.mobilephonemuseum.com/" target="_blank" rel="noopener"
>手机博物馆&lt;/a>， 网站收录了各品牌手机的各代产品资料，包括手机图片、型号参数、当时发布的广告等。不过我看了一下，资料应该还不齐全，有些手机只是列了个名字和型号在那儿，还缺少详细信息，估计还在继续收集中。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-10-32-23.png"
width="1696"
height="790"
loading="lazy"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="515px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://www.famicn.com/" target="_blank" rel="noopener"
>中文家用游戏博物馆&lt;/a> ,收录了比较齐全的家用游戏机及掌机的中文版游戏资料。可以直接在线通过模拟器玩耍。有不少经典的 FC、GB、MD 游戏，甚至还有小霸王学习机的 ROM ，可以在线体验。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-007-%E6%9C%9F/2022-11-09-10-36-51.png"
width="1096"
height="711"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 006 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-006-期">机器文摘 第 006 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="怎样写一段代码把自己打印出来">怎样写一段代码把自己打印出来？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/2022-11-02-13-45-45.png"
width="651"
height="400"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>近期在知乎上看到一个&lt;a class="link" href="https://www.zhihu.com/question/22006572/answer/2722369370" target="_blank" rel="noopener"
>如何编写代码打印自己的问题&lt;/a>，感到十分有趣。以前也在网上见到过类似的代码，用 C 或者 Javascript 等各种语言实现的版本都有。当时只是感叹代码写的十分神奇，一段代码在运行之后竟然输出自己的源代码，而且一个字符也不差，并没有搞懂其中的原理。这篇回答里，作者给出了详细解释。并指出，冯·诺依曼早在他编写的《自复制元胞自动机理论》一书中的提出了这种事情在理论上的通用方法。&lt;/p>
&lt;blockquote>
&lt;p>如上图所示，自复制系统有五个基本部件：A：通用构造器；B：通用复制器；C：控制器；D：其他函数；ϕ(A,B,C,D)\phi(A,B,C,D)\phi(A,B,C,D) : A, B, C, D的编码；当自复制过程启动的时候，B将编码复制一份。A再根据复制出的编码构造出ABCD。最后，C再将这些结构组合起来，构造出一个新的、复制的结构。可以看到，自复制、自打印程序的核心就在于通用构造器和编码，因为复制器、控制器都是比较容易实现的。&lt;/p>
&lt;/blockquote>
&lt;p>具体实现的示例，文中有更详细的说明。&lt;/p>
&lt;p>最后，此问题可以引申到，大自然中生命基于基因的复制机制，也是与此相关，甚至其背后都是同样的机制。&lt;/p>
&lt;h3 id="kevin-kelly-在-68-岁生日时给出的-68-条建议">Kevin Kelly 在 68 岁生日时给出的 68 条建议
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/2022-11-02-14-01-30.png"
width="688"
height="368"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://baike.baidu.com/item/%E5%87%AF%E6%96%87%C2%B7%E5%87%AF%E5%88%A9/6607570" target="_blank" rel="noopener"
>凯文·凯利（又称KK， 作者，著有《失控》《科技想要什么》《必然》等）&lt;/a>，上个月 28 号是他的 68 岁生日，他准备了 68 条简短的建议，作为礼物送给年轻人。&lt;/p>
&lt;p>有人翻译了&lt;a class="link" href="https://zhuanlan.zhihu.com/p/143834871" target="_blank" rel="noopener"
>KK 在 68 岁生日时给出的 68 条建议&lt;/a>。&lt;/p>
&lt;p>摘抄几条如下：&lt;/p>
&lt;blockquote>
&lt;p>任何一项大工程（修房子、拍电影、开发 app）完成度为 90% 的时候，你都要做好心理准备：剩余的大量细节工作会占掉你另一段与之前相当的时间。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>不要担心自己问的问题听起来很傻。99% 的情况下，其他人都有和你一样的问题，只不过羞于问出口而已。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>别成为一群人里最聪明的那个。和那些比你聪明的人待在一起，向他们学习。如果能找到和你观点相左的聪明人，那就更好了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>别做最好的。做唯一的。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>任何真实之物都源于虚构之意。想象是宇宙中最强大的力量，也是你能够日益精进的能力。生命中可以因不知众人所知而获益的能力，仅此一项。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>经验往往被高估了。招募的时候，要看资质，技能则可以培训。许多令人惊奇和赞叹的事情，都是由第一次做的人做出来的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="怎样搭建一个最简的-git-服务器">怎样搭建一个最简的 GIT 服务器
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/2022-11-02-14-15-18.png"
width="626"
height="466"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>GIT 是现在软件开发过程中必不可少的版本控制工具，功能非常强大，我们平时直接使用单位的私有服务或者在线的云服务（如：Github 等）。&lt;/p>
&lt;p>如果想要搭建个人的服务，可能就比较繁琐一些。&lt;a class="link" href="https://www.ruanyifeng.com/blog/2022/10/git-server.html" target="_blank" rel="noopener"
>阮一峰老师的这篇博客&lt;/a>就解答了怎样采用极简的技术路线，为自己搭建一台 GIT 服务器。&lt;/p>
&lt;blockquote>
&lt;p>自己搭建 Git 服务器的原因，无非就是不方便访问外网，不愿意代码放在别人的服务器，或者有一些定制化的需求。
这时，你可以选择开源的 Git 服务器软件。
Gitlab CE
Gitea
Gogs
Onedev
这些软件里面，Gogs 的安装是最简单的，但是功能相对比较弱。功能越强的软件，安装越复杂。
如果你只是想远程保存一份代码，并不在意有没有 Web 界面，或者其他功能，那么根本不用安装上面这些软件，一行命令就够了。&lt;/p>
&lt;/blockquote>
&lt;h3 id="为什么很多程序员讨厌低代码">为什么很多程序员讨厌低代码？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/2022-11-02-14-24-59.png"
width="640"
height="355"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;p>“低代码”（一般指：不用或少用编写代码的方式进行软件开发）这个词近两年又开始火了，它代表着对软件工程的一种美好“幻想”，即：花费更低的代价去构建复杂的软件系统。&lt;/p>
&lt;p>虽然每隔一个时间周期都会被重提一次，但是每次都未能如愿。&lt;/p>
&lt;p>现在既然又被频繁提及，我在知乎上发现了这样一篇&lt;a class="link" href="https://www.zhihu.com/question/561025857/answer/2734260311" target="_blank" rel="noopener"
>关于低代码话题的回答&lt;/a>。从程序员的视角表达了对低代码这种期望的观点，有兴趣的朋友可以点进去看看。&lt;/p>
&lt;blockquote>
&lt;p>软件工程这门学问，研究的就是“如何利用工程思想，从整体上降低开发复杂性”；但与之同时，它不得不反复强调“软件工程试图解决的、是人为引入的不必要的复杂性；但工程的本质复杂性是无法逃避的。因为没有银弹，没有银弹，没有银弹！”&lt;/p>
&lt;/blockquote>
&lt;p>我个人的观点是：低代码或者配置化、拖拽式软件开发，很难平衡对复杂现实的抽象程度和开发便利性的矛盾关系。如何做到既提供方便的组件同时又不限制对个性化需求的实现，这需要非常强大的设计能力以及对于特定应用场景的取舍。目前来看，如果要做到或者接近上述状态，必然要先消耗巨量的成本，至于是否值得，可能不同的主体会有不同的选择吧。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/Visualize-ML/Book4_Power-of-Matrix" target="_blank" rel="noopener"
>从加减乘除到机器学习&lt;/a>，一本不错的数学扫盲书，如果你在学习人工智能的时候对数学感到吃力的话，这本书非常适合阅读，一点也不枯燥。主要讲解线性代数相关的知识。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/2022-11-02-14-46-11.png"
width="616"
height="335"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="441px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="noopener"
>命令行的艺术&lt;/a> 想成为命令行高手，掌握这一篇就够了。&lt;/p>
&lt;blockquote>
&lt;p>熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-006-%E6%9C%9F/2022-11-02-14-47-54.png"
width="477"
height="287"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="398px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/practical-tutorials/project-based-learning" target="_blank" rel="noopener"
>基于实际项目的学习&lt;/a>，这是一个巨大的代码工程资源索引，里面列举了针对各种编程语言的个人项目，当你不知道该如何去深入学习一门编程语言的时候，选择一个这里的项目然后自己动手跟着练一遍效果绝对惊人。入选的项目都十分有趣，比如怎样用 C 写一个解释器、怎样写一个自己的编辑器、自己动手实现 TCP/IP 协议栈，等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/lxgw/LxgwWenKai" target="_blank" rel="noopener"
>霞鹜文楷&lt;/a>，一款开源中文字体，基于 FONTWORKS 出品字体 Klee One 衍生。用来看书非常舒服，特别是在排版上。微信读书已经内置，如果是第三方支持自定义字体的可以试试。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 005 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-005-期">机器文摘 第 005 期
&lt;/h1>&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="穿越到-1983-年学习-basichttpslinuxcnarticle-11091-1html">&lt;a class="link" href="https://linux.cn/article-11091-1.html" target="_blank" rel="noopener"
>穿越到 1983 年学习 BASIC&lt;/a>
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-10-33-53.png"
width="1006"
height="644"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="374px"
>&lt;/p>
&lt;blockquote>
&lt;p>很多著名的程序员，尤其在计算机游戏行业，孩童时期就在苹果 II 和 Commodore 64 这样的 8 位计算机上开始编写游戏，John Romero、Richard Garriott 和 Chris Roberts 都是这样的例子。这好理解。在 8 位计算机时代，很多游戏只能在计算机杂志和书籍中以印刷的 BASIC 程序清单方式得到。如果你想玩其中一款游戏，就必须手工键入整个程序。不可避免的，你可能遇到一些问题，所以你就得调试你的程序。等到你让它可以工作起来了，你就已经对程序是如何运行的有了足够的了解，你就可以开始自己修改它了。如果你是一个狂热的游戏玩家，你几乎必然会成为一名优秀的程序员。&lt;/p>
&lt;/blockquote>
&lt;p>喜欢小霸王的小伙伴（老伙伴？），不可错过的文章，一起跟随作者回忆一下如何在老古董电脑上运行BASIC程序，顺便怀念一下当年靠着一本说明书就在小霸王学习机上编写（抄写）游戏的时光。&lt;/p>
&lt;ul>
&lt;li>文中提到的&lt;a class="link" href="https://vice-emu.sourceforge.io/" target="_blank" rel="noopener"
> Commodore64 电脑可以在这里下载模拟器&lt;/a>。&lt;/li>
&lt;/ul>
&lt;h3 id="在-github-的-pages-服务里跑-sqlitehttpsphireskygithubioblog2021hosting-sqlite-databases-on-github-pages">&lt;a class="link" href="https://phiresky.github.io/blog/2021/hosting-sqlite-databases-on-github-pages/" target="_blank" rel="noopener"
>在 Github 的 Pages 服务里跑 SQLite&lt;/a>
&lt;/h3>&lt;p>作者尝试做一个小网站来显示一些统计数据，于是他想到了用数据库，但是，使用数据库需要托管和维护后端服务，或者每次将整个数据集下载到浏览器中（当数据集超过10MB时，体验就变得很差劲）。&lt;/p>
&lt;p>于是作者开始琢磨有没有办法找到一个可以在静态服务器上搞一个数据库服务得可能，毕竟提供静态服务的地方有很多（如 GitHub，GitLab，Netlify 等等）。&lt;/p>
&lt;p>一通折腾下来（借助了 WASM 技术并适当的进行一些魔改），作者竟然实现了一个 100% 静态托管的数据库服务。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-10-10-18.png"
width="864"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;h3 id="语句表达式和海象操作符httpswwwzlovezlcnarticlesstmt-expr-and-walrus-operator">&lt;a class="link" href="https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/" target="_blank" rel="noopener"
>语句、表达式和海象操作符&lt;/a>
&lt;/h3>&lt;p>这是一篇介绍如何通过“海象操作符“（类似这样：&lt;code>foo := 'bar'&lt;/code>）使得Python语句更加精炼的文章。&lt;/p>
&lt;p>这种操作符之所以可以使得语句更加精炼，主要原因就是它使得一句代码既进行了赋值然后又作为表达式返回了值。&lt;/p>
&lt;p>之前写 Python 代码的时候都没注意还有这种写法，而且貌似这在 C 和 C++ 中都是基本的特性。不过 C 和 C++ 是赋值语句&lt;code>=&lt;/code>直接就返回了表达式的值，同时这给程序员提供了出错机会（有不少人应该还记得条件判断时少写了个等号导致的问题）。&lt;/p>
&lt;h3 id="给个人开发者的一些建议英文httpsnewsycombinatorcomitemid32647091">&lt;a class="link" href="https://news.ycombinator.com/item?id=32647091" target="_blank" rel="noopener"
>给个人开发者的一些建议（英文）&lt;/a>
&lt;/h3>&lt;p>hacker news 上的网友针对有志于运营自己的SaaS产品的个人开发者提了一些心得和建议。&lt;/p>
&lt;p>摘抄一点儿如下：&lt;/p>
&lt;ul>
&lt;li>关于做什么，做那些你自己都愿意付费的东西，别指望做出一个你自己都不想花钱使用的产品有别人来买单；&lt;/li>
&lt;li>还是关于做什么，不要做需要漂亮UI的东西，那会让你陷入编码之外的很多麻烦（确实很牵涉精力），如果提供的工具能够通过简单交互就能提供优质服务最佳；&lt;/li>
&lt;li>如果有可能，尽量提供自助服务模式，也就是说让用户不用见到你就可以自行操作付款了（作者这是有多社交恐惧？）；&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://visualgo.net/zh" target="_blank" rel="noopener"
>数据结构与算法可视化&lt;/a>，是一个学习算法知识的好工具。通过动图来演示和讲解数据结构和算法实现原理，针对每一个常用算法不仅有直观的图示，还附有一篇详细的文档，内涵原理知识以及代码实例，网站甚至还提供了答题练习功能，可以一边学习一边做题。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-09-31-46.png"
width="1072"
height="321"
loading="lazy"
class="gallery-image"
data-flex-grow="333"
data-flex-basis="801px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://lisperator.net/slip/" target="_blank" rel="noopener"
>SLip&lt;/a>，一个在浏览器中运行的Lisp解释器，使用Javascript实现。网站提供了一个简易的IDE，可以直接在页面中进行编程开发，还提供了图形绘制的扩展包，用于学习lisp语言非常合适。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-09-35-46.png"
width="497"
height="363"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener"
>针对 Windows 预先编译的 Python 扩展包&lt;/a>，在使用Python的时候，尤其是在Windows环境，经常会遇到有些扩展包由于依赖某些二进制库的原因导致无法通过pip直接安装，自己动手编译又十分麻烦。这个网站提供了各种预编译版本，可以直接下载网站提供的whl文件到本地然后安装。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-09-40-07.png"
width="675"
height="345"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="469px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-ray-tracing" target="_blank" rel="noopener"
> 3D 渲染器入门&lt;/a>，一套计算机图形学的入门教程，从原理讲解开始，手把手教你用C++语言编写一个自己的光线追踪渲染器。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-09-48-21.png"
width="531"
height="361"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://htmldog.com/" target="_blank" rel="noopener"
>HTMLDOG&lt;/a>，前端开发基础知识大全，主要是 HTML、CSS、Javascript 的手把手教学以及语言参考。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-005-%E6%9C%9F/2022-10-26-09-52-21.png"
width="1862"
height="709"
loading="lazy"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="630px"
>&lt;/p>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 004 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第-004-期">机器文摘 第 004 期
&lt;/h1>&lt;h2 id="搞机">搞机
&lt;/h2>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/2022-10-18-09-53-01.png"
width="324"
height="702"
loading="lazy"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="110px"
>&lt;/p>
&lt;p>美国德州仪器公司出品的TI图形计算器是一种既能计算又能作图的新型的数学使用工具，它具备符号代数系统、几何操作系统、数据分析系统等，可以直观地绘制各种图形，并进行动态演示、跟踪轨迹。&lt;/p>
&lt;p>TI实体计算器的售价十分昂贵（相较于其他消费类计算器），这里有一个开源项目&lt;a class="link" href="http://wabbitemu.org/" target="_blank" rel="noopener"
>wabbitemu&lt;/a>，使用C语言编写的一个TI计算器的模拟器，可以在电脑上运行并模拟TI计算器，支持多种型号，如TI-82、TI-83、TI-83-plus（需要加载对应的ROM）等。&lt;/p>
&lt;p>甚至有人基于这个项目编译出了Android的版本，安装后手机秒变成高级科学计算器。&lt;/p>
&lt;p>想进一步了解TI计算器的强大，可以看一下这篇文章&lt;a class="link" href="https://zhuanlan.zhihu.com/p/148392866" target="_blank" rel="noopener"
>《计算器与计算器游戏发展简史》&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.liubaoyi.com/wp-content/uploads/2014/11/Android_Wabbitemu.zip" target="_blank" rel="noopener"
>TI计算器模拟器安卓版本下载地址（含ROM文件）&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://www.liubaoyi.com/wp-content/uploads/2014/11/CX-C-CAS-%E5%9B%BE%E5%BD%A2%E8%AE%A1%E7%AE%97%E5%99%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97.zip" target="_blank" rel="noopener"
>TI计算器使用说明书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>以上资源来自&lt;a class="link" href="http://www.liubaoyi.com/" target="_blank" rel="noopener"
>@Karen的日志&lt;/a>&lt;/p>
&lt;h2 id="观点">观点
&lt;/h2>&lt;blockquote>
&lt;p>社交媒体的正确使用方法:
一，不浪费一秒钟时间和知识结构相差太大的人去解释/讨论。你没有义务也没有这个精力。对任何不友好评论，迅速拉黑。
二，通过公开展示你的思考，来寻找在知识结构，兴趣或技能上，可能与你产生互补作用，或者 1＋1&amp;gt;2 的效应的朋友。公开展示长期留存的文字记录，效率最高。&lt;/p>
&lt;/blockquote>
&lt;p>来自&lt;a class="link" href="https://weibo.com/5339148412/Mal0hACJr" target="_blank" rel="noopener"
>@硅谷王川&lt;/a>&lt;/p>
&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="我是如何用21天刷完sicp">我是如何用21天刷完SICP
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/2022-10-18-10-56-50.png"
width="411"
height="300"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="328px"
>&lt;/p>
&lt;p>SICP 全称 Structure and Interpretation of Computer Programs，翻译过来叫《计算机程序的构造和解释》，是一本关于计算机程序设计的总体性观念的基础教科书，由麻省理工学院出版社与麦格罗希尔出版社共同出版营销。作者是麻省理工学院教授哈尔·阿伯尔森、杰拉德·杰伊·萨斯曼。&lt;/p>
&lt;p>这本书是计算机编程领域非常经典的一本教科书，内容覆盖范围非常广泛，从编程入门一直到教你亲手设计实现一个编程语言解释器。虽然是一本几十年前的书，但是书中的编程理念如数据驱动、过程抽象等到现在仍不过时。可以说是程序员修炼“内功心法”必读的一本好书。&lt;/p>
&lt;p>这篇&lt;a class="link" href="http://numbbbbb.com/2016/03/28/20160328_%E6%88%91%E5%A6%82%E4%BD%95%E7%94%A8%E4%B8%A4%E5%91%A8%E6%97%B6%E9%97%B4%E5%88%B7%E5%AE%8C%20SICP/" target="_blank" rel="noopener"
>《我是如何用21天刷完SICP（中文）》&lt;/a>的文章讲述了作者通过阅读本书学习的过程和心得，里面的观点可以借鉴，我在看完之后也想再把这本书拿出来学习一遍。&lt;/p>
&lt;p>觉得看书太晦涩的，可以到下面这个项目里下载本书作者课堂讲解视频（国内好心人给做了翻译字幕）&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://learningsicp.github.io/" target="_blank" rel="noopener"
>『计算机程序的结构和解释』公开课 翻译项目&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://pan.baidu.com/s/1o78bsYA" target="_blank" rel="noopener"
>百度网盘SICP文件夹&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bilibili.com/video/av8515129/" target="_blank" rel="noopener"
>中译版视频专辑列表（bilibili）&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="图解stable-diffusion模型">图解Stable Diffusion模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/2022-10-18-10-55-05.png"
width="937"
height="387"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="581px"
>&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://jalammar.github.io/illustrated-stable-diffusion/" target="_blank" rel="noopener"
>图解Stable Diffusion模型（英文）&lt;/a>详细讲解了 Stable Diffusion（最近比较火的那个可以通过文字描述进行绘图的AI模型）的工作原理。文中使用清晰的图示阐述了“扩散”模型是怎样通过给图片增加噪声一步一步生成图像的。&lt;/p>
&lt;h3 id="wine是如何工作的">Wine是如何工作的
&lt;/h3>&lt;p>Linux桌面用户都遇到过在不得不运行 Windows 软件的时候，这个时候就可以使用这个叫做 Wine 的兼容程序，它可以让你在 Linux 下执行 win32 程序。（ Valve 最新出品的游戏掌机 Steam Dect 就使用了 Wine 作为兼容层来运行 Windows 平台下的游戏）。&lt;/p>
&lt;p>Wine 的名字来自于 “Wine Is Not an Emulator” 这个英文缩写。&lt;/p>
&lt;p>这篇&lt;a class="link" href="https://werat.dev/blog/how-wine-works-101/" target="_blank" rel="noopener"
>《Wine是如何工作的（英文）》&lt;/a>介绍了它的基本工作原理。&lt;/p>
&lt;h3 id="在-windows-记事本里运行光线追踪">在 Windows 记事本里运行光线追踪
&lt;/h3>&lt;p>光纤追踪（Ray Tracing）是一项计算机图形学技术，使用该技术渲染的计算机图像具有逼真的全局光照效果。&lt;/p>
&lt;p>这篇&lt;a class="link" href="http://kylehalladay.com/blog/2020/05/20/Rendering-With-Notepad.html" target="_blank" rel="noopener"
>《记事本中的光线追踪 30FPS》&lt;/a>记录了作者突发奇想要在Windows上的记事本中进行光线追踪渲染的趣事。&lt;/p>
&lt;p>其原理是通过系统API获取到记事本窗口的句柄，然后利用钩子函数给记事本的窗体发送相应的“消息”以及覆盖对应的内存数据来实现对记事本窗体界面的“魔改”。最终实现了在另一个进程里执行光线追踪算法，然后借用记事本中显示的字符来替代画面像素，从而“渲染”出画面的效果。&lt;/p>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="github.com/SerenityOS/serenity" >SerenityOS项目&lt;/a>，一个从头开始的桌面操作系统，内核采用类似Unix的架构，界面外观则仿照了上世纪90年代Windows的窗口风格。作者并未将其定位成玩具，而是一款具备生产力的操作系统软件。 除了操作系统本身，这个项目还有配套的编程语言Jakt、自己的浏览器引擎LibWeb和浏览器Ladybird ​​​&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/ruanyf/document-style-guide" target="_blank" rel="noopener"
>《中文技术文档写作规范》&lt;/a>，&lt;a class="link" href="https://www.ruanyifeng.com/blog/" target="_blank" rel="noopener"
>阮一峰老师&lt;/a>整理的技术文档写作规范，规定了标题、文本、段落、标点符号等文档元素的使用约定，需要经常编写技术文档的朋友可以收藏看看。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://freehand.yunwooo.com/" target="_blank" rel="noopener"
>Freehand意绘&lt;/a>，一个在线的AI绘图工具，可以根据文字描述帮助你生成图片，界面简洁友好，使用方便。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/2022-10-18-10-58-24.png"
width="1063"
height="525"
loading="lazy"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="485px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/izackwu/TeachYourselfCS-CN" target="_blank" rel="noopener"
>计算机科学自学指南&lt;/a>，提供了一份自学计算机科学的全方位资料大全，可以根据内容系统地进行学习计算机科学相关的知识。&lt;/p>
&lt;blockquote>
&lt;p>互联网上，到处都有许多的学习资源，然而精华与糟粕并存。你所需要的，不是一个诸如「200+ 免费在线课程」的清单，而是以下问题的答案：&lt;/p>
&lt;p>你应当学习 哪些科目，为什么？
对于这些科目，最好的书籍或者视频课程 是什么？
在这份指引中，我们尝试对这些问题做出确定的回答。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://stevens.netmeister.org/631/" target="_blank" rel="noopener"
>UNIX环境中的高级编程&lt;/a>，一套编程教程，在课程中，主要学习用C编程语言开发复杂的系统级软件，同时深入了解Unix操作系统（以及属于该家族的所有操作系统，如Linux，BSD，甚至Mac OS X）及其编程环境。&lt;/p>
&lt;blockquote>
&lt;p>涵盖的主题将包括用户/内核接口，Unix的基本概念，用户身份验证，基本和高级I / O，文件系统，信号，进程关系和进程间通信。还将涵盖Unix系统上软件开发和维护的基本概念（开发和调试工具，如“make”和“gdb”）。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://codeberg.org/drummyfish/tinyphysicsengine" target="_blank" rel="noopener"
>写在C头文件里的3D物理引擎&lt;/a>，一个仅用C99标准写在C头文件里的超小物理引擎，没有依赖，直接包含头文件即可在你的工程中使用，功能完整，内置向量、三角函数、引力等计算库。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-004-%E6%9C%9F/2022-10-18-14-04-11.png"
width="399"
height="326"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="293px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 003 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第003期">机器文摘 第003期
&lt;/h1>&lt;h2 id="搞机">搞机
&lt;/h2>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/2022-10-11-10-17-41.png"
width="853"
height="640"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;h3 id="收听广播可以缓解压力个人体会">收听广播可以缓解压力(&lt;em>个人体会&lt;/em>)
&lt;/h3>&lt;p>近期我找到一个缓解焦虑的新方法，听收音机。&lt;/p>
&lt;p>一定要老式的那种，收听真正无线电波信号的。随便找个台，最好还带有滋滋啦啦的杂音，当作工作时的背景声音，听着听着就感觉无比的放松。但又不是简单的“粉红噪音”、“白噪音”带来的那种平静，这种“仿佛脱离现在、回到了某个时空”的感觉让人感到愉悦。&lt;/p>
&lt;p>我还没找到相关的研究信息，有人知道原理吗？&lt;/p>
&lt;h2 id="动向">动向
&lt;/h2>&lt;h3 id="欧洲通过法案将强制统一usb-type-c接口为充电接口">欧洲通过法案，将强制统一USB Type-C接口为充电接口
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/2022-10-11-15-46-02.png"
width="800"
height="450"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;blockquote>
&lt;p>欧洲议会今天以压倒性多数投票赞成在2024年底之前将USB-C作为包括iPhone和AirPods在内的各种消费电子设备的通用充电端口。&lt;/p>
&lt;/blockquote>
&lt;p>这对于苹果来说恐怕是个坏消息，对于消费者来说应该是个好消息。不过也许以苹果公司的脾气，说不定将来取消所有物理接口也有可能。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.macrumors.com/2022/10/04/eu-passes-law-to-switch-iphone-to-usb-c-in-2024/" target="_blank" rel="noopener"
>欧洲强制iPhone使用usb-c接口&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="波士顿动力承诺不将机器人武器化">波士顿动力承诺不将机器人武器化
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/2022-10-11-10-15-11.png"
width="640"
height="427"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;blockquote>
&lt;p>当地时间 10 月 6 日消息，波士顿动力、Agility Robotics、ANYbotics 等 6 家公司联合发表致行业的公开信表达了他们对这些可能性的担忧。他们称，先进的商业化机器人的经济可负担性和可获得性越来越强，其被滥用的可能性也越来越大。我们承诺不会将通用机器人或软件武器化，也不会支持其他人这么做；同时呼吁政策制定者、开发者和用户共同促进安全使用。&lt;/p>
&lt;/blockquote>
&lt;p>我个人感觉此类声明并不会带来什么限制，相反地，我偏悲观的认为这种技术很可能以最优先的速度被应用于军事目的。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.163.com/dy/article/HJ5DMDS005118DFD.html" target="_blank" rel="noopener"
>网易新闻：波士顿动力承诺不将机器人武器化&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="taocpthe-art-of-computer-programming-4b正式初版">TAOCP（《The Art of Computer Programming》） 4B正式初版
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/2022-10-11-10-30-24.png"
width="756"
height="732"
loading="lazy"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="247px"
>
&lt;em>图片来自&lt;a class="link" href="https://weibo.com/5819320755/M9LXaF5I3" target="_blank" rel="noopener"
>@算法时空&lt;/a>&lt;/em>&lt;/p>
&lt;p>世界著名程序员——高德纳老师，日前在他的个人网站宣布了&lt;a class="link" href="https://www-cs-faculty.stanford.edu/~knuth/news.html#v4b" target="_blank" rel="noopener"
>TAOCP 4B正式出版&lt;/a>的消息。&lt;/p>
&lt;p>这部计算机世界的经典巨著，耗费了高德纳老爷子的毕生心血，虽然已经出到了第四B卷，但本书目前还没有完全写完（本书从1962年开始写（中间停了几年是因为老爷子发现没有趁手的排版软件，就顺手发明了TEX——这又是另一个宏大话题了），计划共有七卷，其中第四卷分ABC三册）。他在自己主页中提到：&lt;/p>
&lt;blockquote>
&lt;p>与此同时，我继续研究第3部分（第4C卷），它已经有许多令人兴奋的主题。&lt;/p>
&lt;/blockquote>
&lt;p>我只能说：祝老爷子身体健康！&lt;/p>
&lt;h3 id="webassembly技术发展的怎么样了">WebAssembly技术发展的怎么样了？
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/2022-10-11-10-45-39.png"
width="386"
height="383"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>&lt;/p>
&lt;blockquote>
&lt;p>WebAssembly 是一种运行在现代网络浏览器中的新型代码，并且提供新的性能特性和效果。它设计的目的不是为了手写代码而是为诸如 C、C++和 Rust 等低级源语言提供一个高效的编译目标。
——来自&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/WebAssembly/Concepts" target="_blank" rel="noopener"
>Mozilla官方文档关于WebAssembly概念的介绍&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>WebAssembly技术号称可以在浏览器中高效执行代码，并可以很方便地将C、Rust等各种语言编译到浏览器中执行，那么目前他的使用体验如何？&lt;/p>
&lt;p>我周末做了简单体验。&lt;/p>
&lt;p>通过官方给出的文档和入门指南，可以很快速地搭建出程序的原型，上图就是我参考官方示例将Rust代码编译到网页中执行的效果(是一个&lt;a class="link" href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" target="_blank" rel="noopener"
>经典的Game of life的小游戏&lt;/a>)。&lt;/p>
&lt;p>从开发上来说，现在已经有了比较成熟的工具链（尤其是针对Rust语言到WASM的工具），和共享库的生态，想要进行开发，不必像前些年那样费心地搭建开发环境，基本上在Linux系统下简单执行几行命令即可完成环境搭建。&lt;/p>
&lt;p>从执行效果来说，我没有做性能测试，直观感受上来说，确实比原生js快了不少。&lt;/p>
&lt;p>但这并不是重点，我个人觉得这项技术它最大的意义在于，将之前的桌面程序技术有了向Web移植的可行性。&lt;/p>
&lt;p>我们有可能很快就看到完全兼顾Web分发的方便和桌面程序性能体验的产品。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.infoq.cn/article/hdwglnhub2wwklo9zz6z" target="_blank" rel="noopener"
>一则WebAssembly相关的新闻&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/mbasso/awesome-wasm" target="_blank" rel="noopener"
>GitHub网友整理的关于WASM的资源大全&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://rustwasm.github.io/docs/book/introduction.html" target="_blank" rel="noopener"
>一本手把手教你使用Rust语言进行WASM开发的在线电子书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zalo.github.io/CascadeStudio" target="_blank" rel="noopener"
>一个使用WASM技术将三维设计软件CAD嵌入到网页中的开源项目&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://supabase.com/blog/postgres-wasm" target="_blank" rel="noopener"
>一个使用WASM技术在浏览器中运行的PostgresSQL数据库&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;blockquote>
&lt;p>在你的密码里面放上一个逗号&lt;code>&amp;quot;,&amp;quot;&lt;/code>,这样当你的密码在网上被人拖库时可以给黑客增加一些麻烦，因这样会使得他在作为csv文件往他的密码字典里面导入的时候，因为逗号分隔符的错位而让他崩溃。
注：csv文件默认使用逗号分隔符区分字段。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>来自：佚名网友。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>当你长期使用windows远程桌面进行远程办公时，一层一层的服务器登进去，时间长了就会陷入盗梦空间那种疑惑，我现在是在哪一层？&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>来自：我自己。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>量子计算机就是向过去和未来借用了很多乃至无限的时间吗？刹那即永恒。
注：量子计算机号称每个bit位可在同一时刻表示多种状态。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>来自：我自己。&lt;/li>
&lt;/ul>
&lt;h2 id="长文">长文
&lt;/h2>&lt;h3 id="从0到1打造家庭弱电方案">从0到1打造家庭弱电方案
&lt;/h3>&lt;p>现在有不少人在困惑家里的网线该如何布局，这篇&lt;a class="link" href="https://luolei.org/home-network-1/" target="_blank" rel="noopener"
>《从0到1打造家庭弱电方案》（中文）&lt;/a>记录了作者完整的装修过程，内容十分精彩详尽。看完之后我有点儿后悔，当时装修时没有给各个房间拉上光纤，以及用了比较普通的超五类网线。&lt;/p>
&lt;h3 id="如何配置一个完全基于命令行窗口的开发环境">如何配置一个完全基于命令行窗口的开发环境
&lt;/h3>&lt;p>我在油管上关注了一个日本小哥（Takuya Matsuyama），是一个个人开发者，经常上传自己的开发过程录屏，他完全基于命令行窗口（控制台）进行开发，没使用任何IDE。&lt;/p>
&lt;p>后来我参考他的配置文件给自己也配置了一套，使用fish作为shell，neovim加上各种插件作为主力编辑器，现已成为我的日常开发环境。&lt;/p>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-003-%E6%9C%9F/2022-10-11-11-16-56.png"
width="1571"
height="820"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>&lt;/p>
&lt;p>有条件的可以到他的主页看看关于如何配置的详细介绍，或者直接去他的github仓库获取配置文件。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.craftz.dog/posts" target="_blank" rel="noopener"
>Takuya Matsuyama小哥的主页&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/craftzdog/dotfiles-public" target="_blank" rel="noopener"
>他的基于控制台命令行开发的各种配置文件&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="云桌面并不像你想的那么好">云桌面并不像你想的那么好
&lt;/h3>&lt;p>给开发人员配置一个廉价的笔记本加上一个高性能的云端工作站，这个点子棒不棒？&lt;/p>
&lt;p>听起来有很多的优势，兼具了性能、便携性、安全性等等。&lt;/p>
&lt;p>不过先等一等，这里有一位作者在这样尝试了之后，给出了不少负面反馈（比如多显示器支持、GPU加速、网页视频质量等等问题），有兴趣的可以点进去看看。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://mjg59.dreamwidth.org/61535.html" target="_blank" rel="noopener"
>《云桌面并不像你想象的那么好》（英文）&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://webusers.imj-prg.fr/~jan.nekovar/co/en/en.pdf" target="_blank" rel="noopener"
>从高中到大学，数学中常用符号和计算关系的英文名称&lt;/a>，适合对数学公式中的各种符号感到困惑的人收藏，这本小册子汇聚了所有数学符号、常用希腊字母、代数式等英文叫法介绍。&lt;/li>
&lt;li>&lt;a class="link" href="http://www.egr.unlv.edu/~ed/x86.html" target="_blank" rel="noopener"
>如何在Ubuntu下进行x86-x64汇编语言编程&lt;/a>，一本讲解现代汇编语言的电子书，基于常用的Ubuntu系统，从认识汇编语言开始讲起，到工具链的准备和怎样编写和调试程序，都有详细的介绍。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.drawkit.com/" target="_blank" rel="noopener"
>DrawKit&lt;/a>，一个提供矢量插画的网站，有很多免费的高质量插画，可用于网站制作、软件产品等方面。&lt;/li>
&lt;li>&lt;a class="link" href="https://missing-semester-cn.github.io/" target="_blank" rel="noopener"
>计算机教育中缺失的一课&lt;/a>，一般学校里不会教开发环境的配置和各种效率工具的使用，这本电子书就是以环境和工具为切入点，将学校学习的理论应用于实际，比较接地气。
&lt;blockquote>
&lt;p>大学里的计算机课程通常专注于讲授从操作系统到机器学习这些学院派的课程或主题，而对于如何精通工具这一主题则往往会留给学生自行探索。在这个系列课程中，我们讲授命令行、强大的文本编辑器的使用、使用版本控制系统提供的多种特性等等。学生在他们受教育阶段就会和这些工具朝夕相处（在他们的职业生涯中更是这样）。 因此，花时间打磨使用这些工具的能力并能够最终熟练地、流畅地使用它们是非常有必要的。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 002 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第002期">机器文摘 第002期
&lt;/h1>&lt;h2 id="搞机">搞机
&lt;/h2>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/2022-10-03-11-08-56.png"
width="895"
height="689"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;blockquote>
&lt;p>MNT推出了一款名叫Pocket Reform的迷你笔记本电脑。它外形紧凑（屏幕只有7英寸），但功能齐全，据官方介绍，它的性能满足轻量办公需求，甚至还能玩一些游戏（ARM平台）。虽然现在的智能手机在性能方面已经有了很大提升，且便携性远超笔记本电脑，但是还是有相当一部分人倾向于在具有真实物理键盘的“电脑”上进行操作。&lt;/p>
&lt;/blockquote>
&lt;p>在我看来，这台设备可能对于希望随时随地写两行代码的程序员更加具有吸引力。&lt;/p>
&lt;ul>
&lt;li>参考文章：
&lt;ul>
&lt;li>&lt;a class="link" href="https://spectrum.ieee.org/meet-an-open-source-pc-that-can-fit-in-your-pocket" target="_blank" rel="noopener"
>可以装在口袋里的开源PC&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="动向">动向
&lt;/h2>&lt;h3 id="文字直接生成3d模型">文字直接生成3D模型
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/2022-10-03-11-41-32.png"
width="735"
height="491"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>
谷歌实验室的几个哥们上周发布了一个新作&amp;mdash;-DreamFusion。输入文字，就能生成带深度图和法线的3D模型。&lt;/p>
&lt;p>开发团队声称：&lt;/p>
&lt;blockquote>
&lt;p>最近在文本到图像合成方面的突破是基于在数十亿个图像-文本对上训练的扩散模型。将这种方法应用于3D合成将需要标记大量的3D资产和用于对3D数据进行去噪的高效架构，而目前这都不太可行。在DreamFusion中，我们通过使用预先训练的2D文本到图像扩散模型来执行文本到3D合成来规避这些限制。我们的方法不需要3D训练数据，也不需要修改图像扩散模型，证明了预训练图像扩散模型作为先验的有效性。&lt;/p>
&lt;/blockquote>
&lt;p>具体方法据称是来自他们新提出的“一种通过优化损失函数从扩散模型中生成采样的方法”该方法允许他们在任意参数空间中优化采样（例如3D空间）。&lt;/p>
&lt;p>我看了一下官方给出的demo，3D模型还略显粗糙，不过可能将来算力提升之后会有改善。&lt;/p>
&lt;p>现在，除了插画师受到了职业威胁，就连3D建模工程师的工作也有可能被AI取代？&lt;/p>
&lt;ul>
&lt;li>参考文章：
&lt;ul>
&lt;li>&lt;a class="link" href="https://dreamfusion3d.github.io/" target="_blank" rel="noopener"
>DreamFusion官方介绍&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="通过文字描述生成语音的人工智能也来了">通过文字描述生成语音的人工智能也来了
&lt;/h3>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/2022-10-03-11-32-54.png"
width="909"
height="451"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="483px"
>&lt;/p>
&lt;blockquote>
&lt;p>Twitter 用户 Felix Kreuk 发布了从文本到音频 (Text to Audio) 的 AI 模型：AudioGen
AudioGen 可以
(1) 根据文本生成音频；(2) 续写指定的音频；(3) 同时做以上两件事，根据指定文本描述生成指定音频。
作者给出的展示DEMO里展示了如下文本生成的语音：
（1）在风声中吹口哨
（2）男人在说话时伴有鸟和狗的叫声
（3）警报器和嗡嗡作响的引擎接近后走远
（4）鸽子咕咕叫并伴有沙沙的声音
（5）男人说话的声音，背景伴有人群欢呼声&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/2022-10-03-11-33-50.png"
width="1147"
height="629"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>
从作者公布的架构图上可以看出来，采用的也是Transformer神经网络。之前在看到AI画图时我就想到同样的原理可能用于生成音频，结果这才没过几天，人家都已经做出来了。&lt;/p>
&lt;ul>
&lt;li>参考文章：
&lt;ul>
&lt;li>&lt;a class="link" href="https://weibo.com/1309158107/M8mPt5LgI" target="_blank" rel="noopener"
>@海辛Hyacinth&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://felixkreuk.github.io/text2audio_arxiv_samples/" target="_blank" rel="noopener"
>作者的demo和原理介绍页面（托管在github）&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;blockquote>
&lt;p>站桩的简单，枯燥和有效，就好比持有 sp500 指数基金简单，枯燥但足以秒杀 95%以上的基金经理一样。
莫将容易得，便作等闲看。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>来自&lt;a class="link" href="https://weibo.com/5339148412/LeTdmcfjW" target="_blank" rel="noopener"
>@硅谷王川&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="长文">长文
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://randomascii.wordpress.com/2022/09/29/why-modern-software-is-slow-windows-voice-recorder/" target="_blank" rel="noopener"
>为什么现在的软件这么慢（英文）&lt;/a>，作者在Windows系统（Windows 10, 21H2版本）下使用“录音机App”的时候获得了极差的体验（确切的说是软件启动后大概卡死了将近20秒）。于是动手分析到底是什么原因导致，然后发现主要是这个软件启动后疯狂扫描“用户”文件夹下的录音文件用于构建界面中的录音列表，这种密集IO操作导致软件停止响应。作者花了很大的篇幅来吐槽这种行为，对于微软工程师为什么这么做表示莫名其妙。不过由于我们现在的计算机大都使用了固态硬盘，而且我们的习惯一般不会在“用户”文件夹下存放太多文件，所以这个体验应该不太明显。但即使这样，我也同样对Windows系统现在的软件质量感到担忧。
&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-002-%E6%9C%9F/2022-10-03-18-24-45.png"
width="643"
height="310"
loading="lazy"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="497px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://zhangtielei.com/posts/blog-involution-analysis.html" target="_blank" rel="noopener"
>内卷、汉明问题与认知迭代（中文）&lt;/a>，作者较为科学地分析了内卷的定义和形态，从而引申出了关于什么是“人生中重要的事”的思考，文章虽然比较长，但也清晰易懂，发人深省。部分引用如下：&lt;/p>
&lt;blockquote>
&lt;p>从大的方面说，社会需要创新，个人则需要突破，而创新和突破又都要求我们不断地精益求精。那么，内卷与精益求精是本质上一样的吗？如果不是，两者的区别在哪？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在某件事情上花费太多精力，并不一定就是内卷；在无关紧要的事情上花费精力才是真的内卷。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>汉明早年在贝尔实验室工作。那年春天，他经常和几位同事聚在一起在餐厅吃午饭。吃饭期间，他向其中一位叫Dave McCall的同事提了一个问题：“在你的领域里最重要的问题是什么？”大约一个星期后，再次一起午餐时他继续发问：“你目前正在研究的最重要的问题是什么？” 显然，这位同伴对于这两个问题的回答并不一样。于是他接着问：“如果你当前做的并不是最重要的事，那为什么还要一直花时间投入去做呢？”有了这「灵魂三问」之后，于是——在那个春天接下来的日子里，汉明不得不另找别的同伴一起吃午饭了……
汉明的问题听起来有些让人生厌，但后来演变成了一个在学术界很受关注的问题——汉明问题（The Hamming Question）。它本来说的是科研选题的事情，但实际上关乎人生最重要的选择。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>内卷，指的是在低水平的状态下无实质意义的消耗。这里的「低水平」，可能是客观的，也可能是主观的。
针对主观的低水平状态，我们需要冲破意识层面的障碍，同时把读书、实践和思考结合起来，反复迭代，这样才可能跃升到更高的认知层次上。
而针对客观的低水平状态，唯有认真对待汉明问题，选择好真正重要的人生大方向，才能避免卷入那些无关紧要的、无谓的消耗中去。这才是真正考验大智慧的时候了。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/mtdvio/every-programmer-should-know" target="_blank" rel="noopener"
>每个程序员都需要知道的&lt;/a> ，整理了一份资源合集，包含了软件工程师技能相关的各类知识资源，包括算法、数据结构、浮点、Unicode、时间、内存、分布式、正则、安全、架构、工程哲学、实践、职业发展、软技能。。。等等，以及一些可用于技能训练和学习的站点。看起来非常符合我这种“收藏了就是学习了”的囤积爱好者的胃口。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/jefflomax/word-writer-6-commodore-64" target="_blank" rel="noopener"
>Word Writer 6 6502汇编源码&lt;/a>，是一份开源的Word Writer 6的6502汇编源码，可在模拟器下编译运行。用来学习6502汇编是一个不错的项目。上个世纪80年代爆火的计算机Commodore 64是很多复古计算机爱好者（包括我）的最爱，Word Writer 6是该平台上流行的文字排版编辑软件。&lt;/li>
&lt;li>&lt;a class="link" href="https://almanac.httparchive.org/zh-CN/2022/" target="_blank" rel="noopener"
>HTTP Archive的年度报告&lt;/a>，这份报告详细（超级详细）分析了目前全球各在线网页中所使用的技术，从页面中的“CSS”、“Javascript”、“字体”以及用户体验中的“搜索引擎优化”、“移动端支持”等超过20个方面进行展示，内容十分详尽，有种看NBA的进球统计的感觉。&lt;/li>
&lt;li>&lt;a class="link" href="https://javascriptquiz.com/" target="_blank" rel="noopener"
>Javascript Quiz&lt;/a>，一份关于Javascript的小测验，可在线作答，一共十道选择题，全是关于Js语法的常见坑，每道题答完之后都可以点击“info”图标获取关于这道题的详细解释。我试着做了一下，勉强及格。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.musi-co.com/listen/streams" target="_blank" rel="noopener"
>Streams&lt;/a>，这里有一批纯AI创作的音乐，由AI负责作曲和编曲，工程师只是把这些乐谱放入DAW软件中进行混音和录音，完成度很高，听起来相当上头。&lt;/li>
&lt;li>&lt;a class="link" href="https://learningsynths.ableton.com/zh-Hans/get-started" target="_blank" rel="noopener"
>学习合成器&lt;/a>，这个网站提供了一本交互式电子书，讲解了电子合成器的原理，还单独提供了一个交互页面用于调制和体验各种合成器音色。我尝试了一下，真的很直观，在页面中直接可以修改各种振荡器波形、滤波器、LFO等参数，非常适合用于音色合成入门。&lt;/li>
&lt;li>&lt;a class="link" href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/" target="_blank" rel="noopener"
>函数式编程指北&lt;/a>，在线电子书，讲解函数式编程的范式，以Javascript进行举例，作者风趣幽默，深入浅出，觉得被函数编程概念唬住的可以去看看。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>机器文摘 第 001 期</title><link>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-001-%E6%9C%9F/</link><pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate><guid>https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-001-%E6%9C%9F/</guid><description>&lt;h1 id="机器文摘-第001期">机器文摘 第001期
&lt;/h1>&lt;h2 id="搞机">搞机
&lt;/h2>&lt;p>&lt;img src="https://sbabybird.github.io/p/%E6%9C%BA%E5%99%A8%E6%96%87%E6%91%98-%E7%AC%AC-001-%E6%9C%9F/2022-09-28-09-38-31.png"
width="641"
height="571"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="269px"
>&lt;/p>
&lt;blockquote>
&lt;p>TurnT是一个颇具创意的唱盘设计，它把智能手机与模拟黑胶的老式音乐播放方式相结合。用家把触笔放在手机屏幕显示的黑胶唱片上，它即开始播放。从内部结构上看，它其实是一个无线扬声器，可以连接到智能手机播放音乐。TurnT这种播放音乐的体验增加了互动的体验感，如同在实际的唱片上一样，挪开唱针会立即停止音乐，将其“向内”移动到手机屏幕上显示的光盘中心就可以播放音乐。要更改歌曲，您可以通过滑动来更改专辑，还可以重新定位。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>参考文章：
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.sohu.com/a/573073318_121124377" target="_blank" rel="noopener"
>把手机变成黑胶唱机 &amp;mdash; Yamaha发布了与智能手机配合使用的独特音乐设备&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="动向">动向
&lt;/h2>&lt;h3 id="ai生成图像技术带来的艺术危机">AI生成图像技术带来的“艺术危机”
&lt;/h3>&lt;blockquote>
&lt;p>近几周，基于AI生成的图像艺术作品的新闻越来越多，以DALL-E、Stable Diffusion等神经网络模型为代表的图像生成类AI进化越来越快，已达“以假乱真”程度。我也在动手尝试后惊叹他们的生成效果非常逼真和充满想象力。然而很快，此类AI就引起设计师、画师、艺术家的反对（恐慌？）。当然也有很多持积极态度，把它们当作工具加以利用，甚至不乏商业头脑灵活的人士，已经通过AI作画开始获取收益。于是引发了一系列的反应和讨论。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>参考文章：
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.uisdc.com/unsplash-prohibited-ai" target="_blank" rel="noopener"
>知名图库Unsplash 宣布禁传AI生成图像&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.51cto.com/article/719747.html" target="_blank" rel="noopener"
>付费图库集体封禁AI生成图片&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bilibili.com/read/cv18571483" target="_blank" rel="noopener"
>AI 绘画 Windows 本地零基础搭建 Stable Diffusion&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/560226367" target="_blank" rel="noopener"
>AI数字绘画 stable-diffusion 保姆级教程&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ahrm/UnstableFusion" target="_blank" rel="noopener"
>一个包装好的AI绘图开源GUI客户端&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="观点">观点
&lt;/h2>&lt;blockquote>
&lt;p>程序员是计算机的翻译官。他们先是把人类的语言翻译成计算机的语言，现在又教会了计算机使用人类的语言。&lt;/p>
&lt;ul>
&lt;li>来自&lt;a class="link" href="https://weibo.com/6827625527/M7vHNl9HD" target="_blank" rel="noopener"
>@t0mbkeeper&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="长文">长文
&lt;/h2>&lt;ul>
&lt;li>对很多事情都有兴趣，但是生命的时间有限，怎么办？&lt;a class="link" href="https://news.ycombinator.com/item?id=32628511" target="_blank" rel="noopener"
>这篇hacker news上的讨论（英文）&lt;/a>或许能提供一些建议。&lt;/li>
&lt;li>&lt;a class="link" href="https://www.calnewport.com/blog/2022/05/16/taking-a-break-from-social-media-makes-you-happier-and-less-anxious/" target="_blank" rel="noopener"
>这篇文章提到了一项关于焦虑的研究（英文）&lt;/a>。研究表明，远离社交媒体（包括及时通讯工具）一个星期，可以显著提升幸福感、降低焦虑程度；&lt;/li>
&lt;li>掌握一项技能需要时间和实践，降低预期，慢即是快。&lt;a class="link" href="https://geekplux.com/posts/how-i-learned-programming" target="_blank" rel="noopener"
>《我是如何学会编程的》（中文）&lt;/a>，这篇文章是一位网友分享的关于他学习编程的历程。&lt;/li>
&lt;/ul>
&lt;h2 id="资源">资源
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https:///coding-fonts.netlify.app/" target="_blank" rel="noopener"
>coding-fonts&lt;/a> ​​​是一个不错的编程字体网站，可以在线预览各种适合编程开发时用的字体，让选择更加直观。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/opendilab/DI-sheep" target="_blank" rel="noopener"
>深度强化学习羊了个羊&lt;/a> 这个github仓库开源了一个通过AI强化学习来玩耍“羊了个羊”游戏的模型及代码，结构清晰，效果很棒，用于了解深度强化学习知识非常不错。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/scutan90/DeepLearning-500-questions" target="_blank" rel="noopener"
>深度学习500问&lt;/a>这本在线书籍以问答形式对常用的概率知识、线性代数、机器学习、深度学习、计算机视觉等热点问题进行阐述，目前在github将近50k颗星。&lt;/li>
&lt;/ul>
&lt;h2 id="订阅">订阅
&lt;/h2>&lt;p>这里会隔三岔五分享我看到的有趣的内容（不一定是最新的，但是有意思），因为大部分都与机器有关，所以先叫它“机器文摘”吧。&lt;/p>
&lt;p>喜欢的朋友可以订阅关注：&lt;/p>
&lt;ul>
&lt;li>通过微信公众号“从容地狂奔”订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/weixin.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>通过&lt;a class="link" href="https://zhubai.love/" target="_blank" rel="noopener"
>竹白&lt;/a>进行邮件、微信小程序订阅。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sbabybird.github.io/zhubai.jpg"
loading="lazy"
>&lt;/p></description></item></channel></rss>